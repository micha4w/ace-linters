"use strict";
(self["webpackChunkace_linters_root"] = self["webpackChunkace_linters_root"] || []).push([[9886],{

/***/ 75560:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

var __webpack_unused_export__;


var oop = __webpack_require__(89359);
var DocCommentHighlightRules = (__webpack_require__(62718)/* .DocCommentHighlightRules */ .c);
var TextHighlightRules = (__webpack_require__(28053)/* .TextHighlightRules */ .K);

// used by objective-c
var cFunctions = __webpack_unused_export__ = "hypot|hypotf|hypotl|sscanf|system|snprintf|scanf|scalbn|scalbnf|scalbnl|scalbln|scalblnf|scalblnl|sin|sinh|sinhf|sinhl|sinf|sinl|signal|signbit|strstr|strspn|strncpy|strncat|strncmp|strcspn|strchr|strcoll|strcpy|strcat|strcmp|strtoimax|strtod|strtoul|strtoull|strtoumax|strtok|strtof|strtol|strtold|strtoll|strerror|strpbrk|strftime|strlen|strrchr|strxfrm|sprintf|setjmp|setvbuf|setlocale|setbuf|sqrt|sqrtf|sqrtl|swscanf|swprintf|srand|nearbyint|nearbyintf|nearbyintl|nexttoward|nexttowardf|nexttowardl|nextafter|nextafterf|nextafterl|nan|nanf|nanl|csin|csinh|csinhf|csinhl|csinf|csinl|csqrt|csqrtf|csqrtl|ccos|ccosh|ccoshf|ccosf|ccosl|cimag|cimagf|cimagl|ctime|ctan|ctanh|ctanhf|ctanhl|ctanf|ctanl|cos|cosh|coshf|coshl|cosf|cosl|conj|conjf|conjl|copysign|copysignf|copysignl|cpow|cpowf|cpowl|cproj|cprojf|cprojl|ceil|ceilf|ceill|cexp|cexpf|cexpl|clock|clog|clogf|clogl|clearerr|casin|casinh|casinhf|casinhl|casinf|casinl|cacos|cacosh|cacoshf|cacoshl|cacosf|cacosl|catan|catanh|catanhf|catanhl|catanf|catanl|calloc|carg|cargf|cargl|cabs|cabsf|cabsl|creal|crealf|creall|cbrt|cbrtf|cbrtl|time|toupper|tolower|tan|tanh|tanhf|tanhl|tanf|tanl|trunc|truncf|truncl|tgamma|tgammaf|tgammal|tmpnam|tmpfile|isspace|isnormal|isnan|iscntrl|isinf|isdigit|isunordered|isupper|ispunct|isprint|isfinite|iswspace|iswcntrl|iswctype|iswdigit|iswupper|iswpunct|iswprint|iswlower|iswalnum|iswalpha|iswgraph|iswxdigit|iswblank|islower|isless|islessequal|islessgreater|isalnum|isalpha|isgreater|isgreaterequal|isgraph|isxdigit|isblank|ilogb|ilogbf|ilogbl|imaxdiv|imaxabs|div|difftime|_Exit|ungetc|ungetwc|pow|powf|powl|puts|putc|putchar|putwc|putwchar|perror|printf|erf|erfc|erfcf|erfcl|erff|erfl|exit|exp|exp2|exp2f|exp2l|expf|expl|expm1|expm1f|expm1l|vsscanf|vsnprintf|vscanf|vsprintf|vswscanf|vswprintf|vprintf|vfscanf|vfprintf|vfwscanf|vfwprintf|vwscanf|vwprintf|va_start|va_copy|va_end|va_arg|qsort|fscanf|fsetpos|fseek|fclose|ftell|fopen|fdim|fdimf|fdiml|fpclassify|fputs|fputc|fputws|fputwc|fprintf|feholdexcept|fesetenv|fesetexceptflag|fesetround|feclearexcept|fetestexcept|feof|feupdateenv|feraiseexcept|ferror|fegetenv|fegetexceptflag|fegetround|fflush|fwscanf|fwide|fwprintf|fwrite|floor|floorf|floorl|fabs|fabsf|fabsl|fgets|fgetc|fgetpos|fgetws|fgetwc|freopen|free|fread|frexp|frexpf|frexpl|fmin|fminf|fminl|fmod|fmodf|fmodl|fma|fmaf|fmal|fmax|fmaxf|fmaxl|ldiv|ldexp|ldexpf|ldexpl|longjmp|localtime|localeconv|log|log1p|log1pf|log1pl|log10|log10f|log10l|log2|log2f|log2l|logf|logl|logb|logbf|logbl|labs|lldiv|llabs|llrint|llrintf|llrintl|llround|llroundf|llroundl|lrint|lrintf|lrintl|lround|lroundf|lroundl|lgamma|lgammaf|lgammal|wscanf|wcsstr|wcsspn|wcsncpy|wcsncat|wcsncmp|wcscspn|wcschr|wcscoll|wcscpy|wcscat|wcscmp|wcstoimax|wcstod|wcstoul|wcstoull|wcstoumax|wcstok|wcstof|wcstol|wcstold|wcstoll|wcstombs|wcspbrk|wcsftime|wcslen|wcsrchr|wcsrtombs|wcsxfrm|wctob|wctomb|wcrtomb|wprintf|wmemset|wmemchr|wmemcpy|wmemcmp|wmemmove|assert|asctime|asin|asinh|asinhf|asinhl|asinf|asinl|acos|acosh|acoshf|acoshl|acosf|acosl|atoi|atof|atol|atoll|atexit|atan|atanh|atanhf|atanhl|atan2|atan2f|atan2l|atanf|atanl|abs|abort|gets|getc|getchar|getenv|getwc|getwchar|gmtime|rint|rintf|rintl|round|roundf|roundl|rename|realloc|rewind|remove|remquo|remquof|remquol|remainder|remainderf|remainderl|rand|raise|bsearch|btowc|modf|modff|modfl|memset|memchr|memcpy|memcmp|memmove|mktime|malloc|mbsinit|mbstowcs|mbsrtowcs|mbtowc|mblen|mbrtowc|mbrlen";

var c_cppHighlightRules = function(extraKeywords) {

    var keywordControls = (
        "break|case|continue|default|do|else|for|goto|if|_Pragma|" +
        "return|switch|while|catch|operator|try|throw|using"
    );
    
    var storageType = (
        "asm|__asm__|auto|bool|_Bool|char|_Complex|double|enum|float|" +
        "_Imaginary|int|int8_t|int16_t|int32_t|int64_t|long|short|signed|size_t|struct|typedef|uint8_t|uint16_t|uint32_t|uint64_t|union|unsigned|void|" +
        "class|wchar_t|template|char16_t|char32_t"
    );

    var storageModifiers = (
        "const|extern|register|restrict|static|volatile|inline|private|" +
        "protected|public|friend|explicit|virtual|export|mutable|typename|" +
        "constexpr|new|delete|alignas|alignof|decltype|noexcept|thread_local"
    );

    var keywordOperators = (
        "and|and_eq|bitand|bitor|compl|not|not_eq|or|or_eq|typeid|xor|xor_eq|" +
        "const_cast|dynamic_cast|reinterpret_cast|static_cast|sizeof|namespace"
    );

    var builtinConstants = (
        "NULL|true|false|TRUE|FALSE|nullptr"
    );

    var keywordMapper = this.$keywords = this.createKeywordMapper(Object.assign({
        "keyword.control" : keywordControls,
        "storage.type" : storageType,
        "storage.modifier" : storageModifiers,
        "keyword.operator" : keywordOperators,
        "variable.language": "this",
        "constant.language": builtinConstants,
        "support.function.C99.c": cFunctions
    }, extraKeywords), "identifier");

    var identifierRe = "[a-zA-Z\\$_\u00a1-\uffff][a-zA-Z\\d\\$_\u00a1-\uffff]*\\b";
    var escapeRe = /\\(?:['"?\\abfnrtv]|[0-7]{1,3}|x[a-fA-F\d]{2}|u[a-fA-F\d]{4}U[a-fA-F\d]{8}|.)/.source;
    var formatRe = "%"
          + /(\d+\$)?/.source // field (argument #)
          + /[#0\- +']*/.source // flags
          + /[,;:_]?/.source // separator character (AltiVec)
          + /((-?\d+)|\*(-?\d+\$)?)?/.source // minimum field width
          + /(\.((-?\d+)|\*(-?\d+\$)?)?)?/.source // precision
          + /(hh|h|ll|l|j|t|z|q|L|vh|vl|v|hv|hl)?/.source // length modifier
          + /(\[[^"\]]+\]|[diouxXDOUeEfFgGaACcSspn%])/.source; // conversion type
          
    // regexp must not have capturing parentheses. Use (?:) instead.
    // regexps are ordered -> the first match is used

    this.$rules = { 
        "start" : [
            {
                token : "comment",
                regex : "//$",
                next : "start"
            }, {
                token : "comment",
                regex : "//",
                next : "singleLineComment"
            },
            DocCommentHighlightRules.getStartRule("doc-start"),
            {
                token : "comment", // multi line comment
                regex : "\\/\\*",
                next : "comment"
            }, {
                token : "string", // character
                regex : "'(?:" + escapeRe + "|.)?'"
            }, {
                token : "string.start",
                regex : '"', 
                stateName: "qqstring",
                next: [
                    { token: "string", regex: /\\\s*$/, next: "qqstring" },
                    { token: "constant.language.escape", regex: escapeRe },
                    { token: "constant.language.escape", regex: formatRe },
                    { token: "string.end", regex: '"|$', next: "start" },
                    { defaultToken: "string"}
                ]
            }, {
                token : "string.start",
                regex : 'R"\\(', 
                stateName: "rawString",
                next: [
                    { token: "string.end", regex: '\\)"', next: "start" },
                    { defaultToken: "string"}
                ]
            }, {
                token : "constant.numeric", // hex
                regex : "0[xX][0-9a-fA-F]+(L|l|UL|ul|u|U|F|f|ll|LL|ull|ULL)?\\b"
            }, {
                token : "constant.numeric", // float
                regex : "[+-]?\\d+(?:(?:\\.\\d*)?(?:[eE][+-]?\\d+)?)?(L|l|UL|ul|u|U|F|f|ll|LL|ull|ULL)?\\b"
            }, {
                token : "keyword", // pre-compiler directives
                regex : "#\\s*(?:include|import|pragma|line|define|undef)\\b",
                next  : "directive"
            }, {
                token : "keyword", // special case pre-compiler directive
                regex : "#\\s*(?:endif|if|ifdef|else|elif|ifndef)\\b"
            }, {
                token : keywordMapper,
                regex : "[a-zA-Z_$][a-zA-Z0-9_$]*"
            }, {
                token : "keyword.operator",
                regex : /--|\+\+|<<=|>>=|>>>=|<>|&&|\|\||\?:|[*%\/+\-&\^|~!<>=]=?/
            }, {
              token : "punctuation.operator",
              regex : "\\?|\\:|\\,|\\;|\\."
            }, {
                token : "paren.lparen",
                regex : "[[({]"
            }, {
                token : "paren.rparen",
                regex : "[\\])}]"
            }, {
                token : "text",
                regex : "\\s+"
            }
        ],
        "comment" : [
            {
                token : "comment", // closing comment
                regex : "\\*\\/",
                next : "start"
            }, {
                defaultToken : "comment"
            }
        ],
        "singleLineComment" : [
            {
                token : "comment",
                regex : /\\$/,
                next : "singleLineComment"
            }, {
                token : "comment",
                regex : /$/,
                next : "start"
            }, {
                defaultToken: "comment"
            }
        ],
        "directive" : [
            {
                token : "constant.other.multiline",
                regex : /\\/
            },
            {
                token : "constant.other.multiline",
                regex : /.*\\/
            },
            {
                token : "constant.other",
                regex : "\\s*<.+?>",
                next : "start"
            },
            {
                token : "constant.other", // single line
                regex : '\\s*["](?:(?:\\\\.)|(?:[^"\\\\]))*?["]',
                next : "start"
            }, 
            {
                token : "constant.other", // single line
                regex : "\\s*['](?:(?:\\\\.)|(?:[^'\\\\]))*?[']",
                next : "start"
            },
            // "\" implies multiline, while "/" implies comment
            {
                token : "constant.other",
                regex : /[^\\\/]+/,
                next : "start"
            }
        ]
    };

    this.embedRules(DocCommentHighlightRules, "doc-",
        [ DocCommentHighlightRules.getEndRule("start") ]);
    this.normalizeRules();
};

oop.inherits(c_cppHighlightRules, TextHighlightRules);

exports.r = c_cppHighlightRules;


/***/ }),

/***/ 62718:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {



var oop = __webpack_require__(89359);
var TextHighlightRules = (__webpack_require__(28053)/* .TextHighlightRules */ .K);

var DocCommentHighlightRules = function () {
    this.$rules = {
        "start": [
            {
                token: "comment.doc.tag",
                regex: "@\\w+(?=\\s|$)"
            }, DocCommentHighlightRules.getTagRule(), {
                defaultToken: "comment.doc",
                caseInsensitive: true
            }
        ]
    };
};

oop.inherits(DocCommentHighlightRules, TextHighlightRules);

DocCommentHighlightRules.getTagRule = function(start) {
    return {
        token : "comment.doc.tag.storage.type",
        regex : "\\b(?:TODO|FIXME|XXX|HACK)\\b"
    };
};

DocCommentHighlightRules.getStartRule = function(start) {
    return {
        token : "comment.doc", // doc comment
        regex : "\\/\\*(?=\\*)",
        next  : start
    };
};

DocCommentHighlightRules.getEndRule = function (start) {
    return {
        token : "comment.doc", // closing comment
        regex : "\\*\\/",
        next  : start
    };
};


exports.c = DocCommentHighlightRules;


/***/ }),

/***/ 12764:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {



var oop = __webpack_require__(89359);
var Range = (__webpack_require__(59082)/* .Range */ .e);
var BaseFoldMode = (__webpack_require__(15369).FoldMode);

var FoldMode = exports.Z = function(commentRegex) {
    if (commentRegex) {
        this.foldingStartMarker = new RegExp(
            this.foldingStartMarker.source.replace(/\|[^|]*?$/, "|" + commentRegex.start)
        );
        this.foldingStopMarker = new RegExp(
            this.foldingStopMarker.source.replace(/\|[^|]*?$/, "|" + commentRegex.end)
        );
    }
};
oop.inherits(FoldMode, BaseFoldMode);

(function() {
    
    this.foldingStartMarker = /([\{\[\(])[^\}\]\)]*$|^\s*(\/\*)/;
    this.foldingStopMarker = /^[^\[\{\(]*([\}\]\)])|^[\s\*]*(\*\/)/;
    this.singleLineBlockCommentRe= /^\s*(\/\*).*\*\/\s*$/;
    this.tripleStarBlockCommentRe = /^\s*(\/\*\*\*).*\*\/\s*$/;
    this.startRegionRe = /^\s*(\/\*|\/\/)#?region\b/;
    
    //prevent naming conflict with any modes that inherit from cstyle and override this (like csharp)
    this._getFoldWidgetBase = this.getFoldWidget;
    
    /**
     * Gets fold widget with some non-standard extras:
     *
     * @example lineCommentRegionStart
     *      //#region [optional description]
     *
     * @example blockCommentRegionStart
     *      /*#region [optional description] *[/]
     *
     * @example tripleStarFoldingSection
     *      /*** this folds even though 1 line because it has 3 stars ***[/]
     * 
     * @note the pound symbol for region tags is optional
     */
    this.getFoldWidget = function(session, foldStyle, row) {
        var line = session.getLine(row);
    
        if (this.singleLineBlockCommentRe.test(line)) {
            // No widget for single line block comment unless region or triple star
            if (!this.startRegionRe.test(line) && !this.tripleStarBlockCommentRe.test(line))
                return "";
        }
    
        var fw = this._getFoldWidgetBase(session, foldStyle, row);
    
        if (!fw && this.startRegionRe.test(line))
            return "start"; // lineCommentRegionStart
    
        return fw;
    };

    this.getFoldWidgetRange = function(session, foldStyle, row, forceMultiline) {
        var line = session.getLine(row);
        
        if (this.startRegionRe.test(line))
            return this.getCommentRegionBlock(session, line, row);
        
        var match = line.match(this.foldingStartMarker);
        if (match) {
            var i = match.index;

            if (match[1])
                return this.openingBracketBlock(session, match[1], row, i);
                
            var range = session.getCommentFoldRange(row, i + match[0].length, 1);
            
            if (range && !range.isMultiLine()) {
                if (forceMultiline) {
                    range = this.getSectionRange(session, row);
                } else if (foldStyle != "all")
                    range = null;
            }
            
            return range;
        }

        if (foldStyle === "markbegin")
            return;

        var match = line.match(this.foldingStopMarker);
        if (match) {
            var i = match.index + match[0].length;

            if (match[1])
                return this.closingBracketBlock(session, match[1], row, i);

            return session.getCommentFoldRange(row, i, -1);
        }
    };
    
    this.getSectionRange = function(session, row) {
        var line = session.getLine(row);
        var startIndent = line.search(/\S/);
        var startRow = row;
        var startColumn = line.length;
        row = row + 1;
        var endRow = row;
        var maxRow = session.getLength();
        while (++row < maxRow) {
            line = session.getLine(row);
            var indent = line.search(/\S/);
            if (indent === -1)
                continue;
            if  (startIndent > indent)
                break;
            var subRange = this.getFoldWidgetRange(session, "all", row);
            
            if (subRange) {
                if (subRange.start.row <= startRow) {
                    break;
                } else if (subRange.isMultiLine()) {
                    row = subRange.end.row;
                } else if (startIndent == indent) {
                    break;
                }
            }
            endRow = row;
        }
        
        return new Range(startRow, startColumn, endRow, session.getLine(endRow).length);
    };
    
    /**
     * gets comment region block with end region assumed to be start of comment in any cstyle mode or SQL mode (--) which inherits from this.
     * There may optionally be a pound symbol before the region/endregion statement
     */
    this.getCommentRegionBlock = function(session, line, row) {
        var startColumn = line.search(/\s*$/);
        var maxRow = session.getLength();
        var startRow = row;
        
        var re = /^\s*(?:\/\*|\/\/|--)#?(end)?region\b/;
        var depth = 1;
        while (++row < maxRow) {
            line = session.getLine(row);
            var m = re.exec(line);
            if (!m) continue;
            if (m[1]) depth--;
            else depth++;

            if (!depth) break;
        }

        var endRow = row;
        if (endRow > startRow) {
            return new Range(startRow, startColumn, endRow, line.length);
        }
    };

}).call(FoldMode.prototype);


/***/ }),

/***/ 69886:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

/*
  THIS FILE WAS AUTOGENERATED BY mode.tmpl.js
*/



var oop = __webpack_require__(89359);
var TextMode = (__webpack_require__(98030).Mode);
var ObjectiveCHighlightRules = (__webpack_require__(51852)/* .ObjectiveCHighlightRules */ .C);
var CStyleFoldMode = (__webpack_require__(12764)/* .FoldMode */ .Z);

var Mode = function() {
    this.HighlightRules = ObjectiveCHighlightRules;
    this.foldingRules = new CStyleFoldMode();
    this.$behaviour = this.$defaultBehaviour;
};
oop.inherits(Mode, TextMode);

(function() {
    this.lineCommentStart = "//";
    this.blockComment = {start: "/*", end: "*/"};
    this.$id = "ace/mode/objectivec";
}).call(Mode.prototype);

exports.Mode = Mode;


/***/ }),

/***/ 51852:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {



var oop = __webpack_require__(89359);
var DocCommentHighlightRules = (__webpack_require__(62718)/* .DocCommentHighlightRules */ .c);
var CHighlightRules = (__webpack_require__(75560)/* .c_cppHighlightRules */ .r);

var ObjectiveCHighlightRules = function() {
    var NSKeywords = {
        "support.function.cocoa.leopard": "NSRectToCGRect|NSRectFromCGRect|NSMakeCollectable|NSStringFromProtocol|NSSizeToCGSize|NSSizeFromCGSize|NSDrawNinePartImage|NSDrawThreePartImage|NSPointToCGPoint|NSPointFromCGPoint|NSProtocolFromString|NSEventMaskFromType|NSValue",
        "support.function.cocoa": "NSRoundDownToMultipleOfPageSize|NSRoundUpToMultipleOfPageSize|NSRunCriticalAlertPanel|NSRunCriticalAlertPanelRelativeToWindow|NSRunInformationalAlertPanel|NSRunInformationalAlertPanelRelativeToWindow|NSRunAlertPanel|NSRunAlertPanelRelativeToWindow|NSResetMapTable|NSResetHashTable|NSRecycleZone|NSRectClip|NSRectClipList|NSRectFill|NSRectFillUsingOperation|NSRectFillList|NSRectFillListUsingOperation|NSRectFillListWithGrays|NSRectFillListWithColors|NSRectFillListWithColorsUsingOperation|NSRectFromString|NSRecordAllocationEvent|NSReturnAddress|NSReleaseAlertPanel|NSReadPixel|NSRealMemoryAvailable|NSReallocateCollectable|NSRegisterServicesProvider|NSRangeFromString|NSGetSizeAndAlignment|NSGetCriticalAlertPanel|NSGetInformationalAlertPanel|NSGetUncaughtExceptionHandler|NSGetFileType|NSGetFileTypes|NSGetWindowServerMemory|NSGetAlertPanel|NSMinX|NSMinY|NSMidX|NSMidY|NSMouseInRect|NSMapRemove|NSMapGet|NSMapMember|NSMapInsert|NSMapInsertIfAbsent|NSMapInsertKnownAbsent|NSMakeRect|NSMakeRange|NSMakeSize|NSMakePoint|NSMaxRange|NSMaxX|NSMaxY|NSBitsPerSampleFromDepth|NSBitsPerPixelFromDepth|NSBestDepth|NSBeep|NSBeginCriticalAlertSheet|NSBeginInformationalAlertSheet|NSBeginAlertSheet|NSShouldRetainWithZone|NSShowsServicesMenuItem|NSShowAnimationEffect|NSStringFromRect|NSStringFromRange|NSStringFromMapTable|NSStringFromSize|NSStringFromSelector|NSStringFromHashTable|NSStringFromClass|NSStringFromPoint|NSSizeFromString|NSSetShowsServicesMenuItem|NSSetZoneName|NSSetUncaughtExceptionHandler|NSSetFocusRingStyle|NSSelectorFromString|NSSearchPathForDirectoriesInDomains|NSSwapBigShortToHost|NSSwapBigIntToHost|NSSwapBigDoubleToHost|NSSwapBigFloatToHost|NSSwapBigLongToHost|NSSwapBigLongLongToHost|NSSwapShort|NSSwapHostShortToBig|NSSwapHostShortToLittle|NSSwapHostIntToBig|NSSwapHostIntToLittle|NSSwapHostDoubleToBig|NSSwapHostDoubleToLittle|NSSwapHostFloatToBig|NSSwapHostFloatToLittle|NSSwapHostLongToBig|NSSwapHostLongToLittle|NSSwapHostLongLongToBig|NSSwapHostLongLongToLittle|NSSwapInt|NSSwapDouble|NSSwapFloat|NSSwapLittleShortToHost|NSSwapLittleIntToHost|NSSwapLittleDoubleToHost|NSSwapLittleFloatToHost|NSSwapLittleLongToHost|NSSwapLittleLongLongToHost|NSSwapLong|NSSwapLongLong|NSHighlightRect|NSHostByteOrder|NSHomeDirectory|NSHomeDirectoryForUser|NSHeight|NSHashRemove|NSHashGet|NSHashInsert|NSHashInsertIfAbsent|NSHashInsertKnownAbsent|NSHFSTypeCodeFromFileType|NSHFSTypeOfFile|NSNumberOfColorComponents|NSNextMapEnumeratorPair|NSNextHashEnumeratorItem|NSContainsRect|NSConvertGlyphsToPackedGlyphs|NSConvertSwappedDoubleToHost|NSConvertSwappedFloatToHost|NSConvertHostDoubleToSwapped|NSConvertHostFloatToSwapped|NSCountMapTable|NSCountHashTable|NSCountFrames|NSCountWindows|NSCountWindowsForContext|NSCopyMemoryPages|NSCopyMapTableWithZone|NSCopyBits|NSCopyHashTableWithZone|NSCopyObject|NSColorSpaceFromDepth|NSCompareMapTables|NSCompareHashTables|NSClassFromString|NSCreateMapTable|NSCreateMapTableWithZone|NSCreateHashTable|NSCreateHashTableWithZone|NSCreateZone|NSCreateFilenamePboardType|NSCreateFileContentsPboardType|NSTemporaryDirectory|NSIsControllerMarker|NSIsEmptyRect|NSIsFreedObject|NSInsetRect|NSIncrementExtraRefCount|NSIntersectsRect|NSIntersectionRect|NSIntersectionRange|NSInterfaceStyleForKey|NSIntegralRect|NSZoneRealloc|NSZoneMalloc|NSZoneName|NSZoneCalloc|NSZoneFromPointer|NSZoneFree|NSOpenStepRootDirectory|NSOffsetRect|NSDisableScreenUpdates|NSDivideRect|NSDottedFrameRect|NSDecimalRound|NSDecimalMultiply|NSDecimalString|NSDecimalSubtract|NSDecimalNormalize|NSDecimalCopy|NSDecimalCompact|NSDecimalCompare|NSDecimalIsNotANumber|NSDecimalDivide|NSDecimalPower|NSDecimalAdd|NSDecrementExtraRefCountWasZero|NSDefaultMallocZone|NSDeallocateMemoryPages|NSDeallocateObject|NSDrawGroove|NSDrawGrayBezel|NSDrawBitmap|NSDrawButton|NSDrawColorTiledRects|NSDrawTiledRects|NSDrawDarkBezel|NSDrawWhiteBezel|NSDrawWindowBackground|NSDrawLightBezel|NSUserName|NSUnionRect|NSUnionRange|NSUnregisterServicesProvider|NSUpdateDynamicServices|NSJavaBundleSetup|NSJavaBundleCleanup|NSJavaSetup|NSJavaSetupVirtualMachine|NSJavaNeedsToLoadClasses|NSJavaNeedsVirtualMachine|NSJavaClassesForBundle|NSJavaClassesFromPath|NSJavaObjectNamedInPath|NSJavaProvidesClasses|NSPointInRect|NSPointFromString|NSPerformService|NSPlanarFromDepth|NSPageSize|NSEndMapTableEnumeration|NSEndHashTableEnumeration|NSEnumerateMapTable|NSEnumerateHashTable|NSEnableScreenUpdates|NSEqualRects|NSEqualRanges|NSEqualSizes|NSEqualPoints|NSEraseRect|NSExtraRefCount|NSFileTypeForHFSTypeCode|NSFullUserName|NSFreeMapTable|NSFreeHashTable|NSFrameRect|NSFrameRectWithWidth|NSFrameRectWithWidthUsingOperation|NSFrameAddress|NSWindowList|NSWindowListForContext|NSWidth|NSLocationInRange|NSLog|NSLogv|NSLogPageSize|NSAccessibilityRoleDescription|NSAccessibilityRoleDescriptionForUIElement|NSAccessibilityRaiseBadArgumentException|NSAccessibilityUnignoredChildren|NSAccessibilityUnignoredChildrenForOnlyChild|NSAccessibilityUnignoredDescendant|NSAccessibilityUnignoredAncestor|NSAccessibilityPostNotification|NSAccessibilityActionDescription|NSApplicationMain|NSApplicationLoad|NSAvailableWindowDepths|NSAllMapTableValues|NSAllMapTableKeys|NSAllHashTableObjects|NSAllocateMemoryPages|NSAllocateCollectable|NSAllocateObject",
        "support.class.cocoa.leopard": "NSRuleEditor|NSGarbageCollector|NSGradient|NSMapTable|NSHashTable|NSCondition|NSCollectionView|NSCollectionViewItem|NSToolbarItemGroup|NSTextInputClient|NSTreeNode|NSTrackingArea|NSInvocationOperation|NSOperation|NSOperationQueue|NSDictionaryController|NSDockTile|NSPointerFunctions|NSPointerArray|NSPathControl|NSPathControlDelegate|NSPathComponentCell|NSPathCell|NSPathCellDelegate|NSPrintPanelAccessorizing|NSPredicateEditor|NSPredicateEditorRowTemplate|NSViewController|NSFastEnumeration|NSAnimationContext|NSAnimatablePropertyContainer",
        "support.class.cocoa": "NSRunLoop|NSRulerMarker|NSRulerView|NSResponder|NSRecursiveLock|NSRelativeSpecifier|NSRandomSpecifier|NSRangeSpecifier|NSGetCommand|NSGlyphGenerator|NSGlyphStorage|NSGlyphInfo|NSGraphicsContext|NSXMLNode|NSXMLDocument|NSXMLDTD|NSXMLDTDNode|NSXMLParser|NSXMLElement|NSMiddleSpecifier|NSMovie|NSMovieView|NSMoveCommand|NSMutableString|NSMutableSet|NSMutableCharacterSet|NSMutableCopying|NSMutableIndexSet|NSMutableDictionary|NSMutableData|NSMutableURLRequest|NSMutableParagraphStyle|NSMutableAttributedString|NSMutableArray|NSMessagePort|NSMessagePortNameServer|NSMenu|NSMenuItem|NSMenuItemCell|NSMenuView|NSMethodSignature|NSMetadataItem|NSMetadataQuery|NSMetadataQueryResultGroup|NSMetadataQueryAttributeValueTuple|NSMachBootstrapServer|NSMachPort|NSMatrix|NSBitmapImageRep|NSBox|NSBundle|NSButton|NSButtonCell|NSBezierPath|NSBrowser|NSBrowserCell|NSShadow|NSScanner|NSScriptSuiteRegistry|NSScriptCoercionHandler|NSScriptCommand|NSScriptCommandDescription|NSScriptClassDescription|NSScriptObjectSpecifier|NSScriptExecutionContext|NSScriptWhoseTest|NSScroller|NSScrollView|NSScreen|NSStepper|NSStepperCell|NSStatusBar|NSStatusItem|NSString|NSStream|NSSimpleHorizontalTypesetter|NSSimpleCString|NSSocketPort|NSSocketPortNameServer|NSSound|NSSortDescriptor|NSSpecifierTest|NSSpeechRecognizer|NSSpeechSynthesizer|NSSpellServer|NSSpellChecker|NSSplitView|NSSecureTextField|NSSecureTextFieldCell|NSSet|NSSetCommand|NSSearchField|NSSearchFieldCell|NSSerializer|NSSegmentedControl|NSSegmentedCell|NSSlider|NSSliderCell|NSSavePanel|NSHost|NSHTTPCookie|NSHTTPCookieStorage|NSHTTPURLResponse|NSHelpManager|NSNib|NSNibConnector|NSNibControlConnector|NSNibOutletConnector|NSNotification|NSNotificationCenter|NSNotificationQueue|NSNull|NSNumber|NSNumberFormatter|NSNetService|NSNetServiceBrowser|NSNameSpecifier|NSChangeSpelling|NSCharacterSet|NSConstantString|NSConnection|NSControl|NSController|NSConditionLock|NSCoding|NSCoder|NSCountCommand|NSCountedSet|NSCopying|NSColor|NSColorSpace|NSColorPickingCustom|NSColorPickingDefault|NSColorPicker|NSColorPanel|NSColorWell|NSColorList|NSCompoundPredicate|NSComparisonPredicate|NSComboBox|NSComboBoxCell|NSCustomImageRep|NSCursor|NSCIImageRep|NSCell|NSClipView|NSCloseCommand|NSCloneCommand|NSClassDescription|NSCachedImageRep|NSCachedURLResponse|NSCalendar|NSCalendarDate|NSCreateCommand|NSThread|NSTypesetter|NSTimeZone|NSTimer|NSToolbar|NSToolbarItem|NSToolbarItemValidations|NSTokenField|NSTokenFieldCell|NSText|NSTextBlock|NSTextStorage|NSTextContainer|NSTextTab|NSTextTable|NSTextTableBlock|NSTextInput|NSTextView|NSTextField|NSTextFieldCell|NSTextList|NSTextAttachment|NSTextAttachmentCell|NSTask|NSTableHeaderCell|NSTableHeaderView|NSTableColumn|NSTableView|NSTabView|NSTabViewItem|NSTreeController|NSIndexSpecifier|NSIndexSet|NSIndexPath|NSInputManager|NSInputStream|NSInputServiceProvider|NSInputServer|NSInputServerMouseTracker|NSInvocation|NSIgnoreMisspelledWords|NSImage|NSImageRep|NSImageCell|NSImageView|NSOutputStream|NSOutlineView|NSOpenGLContext|NSOpenGLPixelBuffer|NSOpenGLPixelFormat|NSOpenGLView|NSOpenPanel|NSObjCTypeSerializationCallBack|NSObject|NSObjectController|NSDistantObject|NSDistantObjectRequest|NSDistributedNotificationCenter|NSDistributedLock|NSDictionary|NSDirectoryEnumerator|NSDocument|NSDocumentController|NSDeserializer|NSDecimalNumber|NSDecimalNumberBehaviors|NSDecimalNumberHandler|NSDeleteCommand|NSDate|NSDateComponents|NSDatePicker|NSDatePickerCell|NSDateFormatter|NSData|NSDrawer|NSDraggingInfo|NSUserInterfaceValidations|NSUserDefaults|NSUserDefaultsController|NSURL|NSURLResponse|NSURLRequest|NSURLHandle|NSURLHandleClient|NSURLConnection|NSURLCache|NSURLCredential|NSURLCredentialStorage|NSURLDownload|NSURLDownloadDelegate|NSURLProtocol|NSURLProtocolClient|NSURLProtectionSpace|NSURLAuthenticationChallenge|NSURLAuthenticationChallengeSender|NSUniqueIDSpecifier|NSUndoManager|NSUnarchiver|NSPipe|NSPositionalSpecifier|NSPopUpButton|NSPopUpButtonCell|NSPort|NSPortMessage|NSPortNameServer|NSPortCoder|NSPICTImageRep|NSPersistentDocument|NSPDFImageRep|NSPasteboard|NSPanel|NSParagraphStyle|NSPageLayout|NSPrintInfo|NSPrinter|NSPrintOperation|NSPrintPanel|NSProcessInfo|NSProtocolChecker|NSPropertySpecifier|NSPropertyListSerialization|NSProgressIndicator|NSProxy|NSPredicate|NSEnumerator|NSEvent|NSEPSImageRep|NSError|NSException|NSExistsCommand|NSExpression|NSView|NSViewAnimation|NSValidatedToobarItem|NSValidatedUserInterfaceItem|NSValueTransformer|NSKeyedUnarchiver|NSKeyedArchiver|NSQuickDrawView|NSQuitCommand|NSFileManager|NSFileHandle|NSFileWrapper|NSFont|NSFontManager|NSFontDescriptor|NSFontPanel|NSFormCell|NSFormatter|NSWhoseSpecifier|NSWindow|NSWindowController|NSWorkspace|NSLock|NSLocking|NSLocale|NSLogicalTest|NSLevelIndicator|NSLevelIndicatorCell|NSLayoutManager|NSAssertionHandler|NSAnimation|NSActionCell|NSAttributedString|NSAutoreleasePool|NSATSTypesetter|NSApplication|NSAppleScript|NSAppleEventManager|NSAppleEventDescriptor|NSAffineTransform|NSAlert|NSArchiver|NSArray|NSArrayController",
        "support.type.cocoa.leopard": "",
        "support.class.quartz": "CISampler|CIContext|CIColor|CIImage|CIImageAccumulator|CIPlugIn|CIPlugInRegistration|CIVector|CIKernel|CIFilter|CIFilterGenerator|CIFilterShape|CARenderer|CAMediaTiming|CAMediaTimingFunction|CABasicAnimation|CAScrollLayer|CAConstraint|CAConstraintLayoutManager|CATiledLayer|CATextLayer|CATransition|CATransaction|CAOpenGLLayer|CAPropertyAnimation|CAKeyframeAnimation|CALayer|CAAnimation|CAAnimationGroup|CAAction",
        "support.type.quartz": "CGFloat|CGPoint|CGSize|CGRect|CIFormat|CAConstraintAttribute",
        "support.type.cocoa": "NSRect|NSRectEdge|NSRange|NSGlyph|NSGlyphRelation|NSGlyphLayoutMode|NSGradientType|NSModalSession|NSMatrixMode|NSMapEnumerator|NSBitmapImageFileType|NSBorderType|NSButtonType|NSBezelStyle|NSBackingStoreType|NSBrowserColumnResizingType|NSScrollerPart|NSScrollerArrow|NSScrollArrowPosition|NSScreenAuxiliaryOpaque|NSStringEncoding|NSSize|NSSocketNativeHandle|NSSelectionGranularity|NSSelectionDirection|NSSelectionAffinity|NSSwappedDouble|NSSwappedFloat|NSSaveOperationType|NSHashEnumerator|NSHandler|NSHandler2|NSControlSize|NSControlTint|NSCompositingOperation|NSComparisonResult|NSCellState|NSCellType|NSCellImagePosition|NSCellAttribute|NSThreadPrivate|NSTypesetterGlyphInfo|NSTickMarkPosition|NSTitlePosition|NSTimeInterval|NSToolTipTag|NSToolbarSizeMode|NSToolbarDisplayMode|NSTokenStyle|NSTIFFCompression|NSTextTabType|NSTextAlignment|NSTabState|NSTableViewDropOperation|NSTabViewType|NSTrackingRectTag|NSImageInterpolation|NSZone|NSOpenGLContextAuxiliary|NSOpenGLPixelFormatAuxiliary|NSDocumentChangeType|NSDatePickerElementFlags|NSDrawerState|NSDragOperation|NSUsableScrollerParts|NSPoint|NSPrintingPageOrder|NSProgressIndicatorStyle|NSProgressIndicatorThickness|NSProgressIndicatorThreadInfo|NSEventType|NSKeyValueObservingOptions|NSFontSymbolicTraits|NSFontTraitMask|NSFontAction|NSFocusRingType|NSWindowOrderingMode|NSWindowDepth|NSWorkspaceIconCreationOptions|NSWorkspaceLaunchOptions|NSWritingDirection|NSLineBreakMode|NSLayoutStatus|NSLayoutDirection|NSAnimationProgress|NSAnimationEffect|NSApplicationTerminateReply|NSApplicationDelegateReply|NSApplicationPrintReply|NSAppleEventManagerSuspensionID|NSAffineTransformStruct|NSAlertStyle",
        "support.constant.cocoa": "NSRGBModeColorPanel|NSRGBColorSpaceModel|NSRightMouseDown|NSRightMouseDownMask|NSRightMouseDragged|NSRightMouseDraggedMask|NSRightMouseUp|NSRightMouseUpMask|NSRightTextMovement|NSRightTextAlignment|NSRightTabsBezelBorder|NSRightTabStopType|NSRightArrowFunctionKey|NSRoundRectBezelStyle|NSRoundBankers|NSRoundedBezelStyle|NSRoundedTokenStyle|NSRoundedDisclosureBezelStyle|NSRoundDown|NSRoundUp|NSRoundPlain|NSRoundLineCapStyle|NSRoundLineJoinStyle|NSRunStoppedResponse|NSRunContinuesResponse|NSRunAbortedResponse|NSResizableWindowMask|NSResetCursorRectsRunLoopOrdering|NSResetFunctionKey|NSRecessedBezelStyle|NSReceiversCantHandleCommandScriptError|NSReceiverEvaluationScriptError|NSReturnTextMovement|NSRedoFunctionKey|NSRequiredArgumentsMissingScriptError|NSRelevancyLevelIndicatorStyle|NSRelativeBefore|NSRelativeAfter|NSRegularSquareBezelStyle|NSRegularControlSize|NSRemoveTraitFontAction|NSRandomSubelement|NSRangeDateMode|NSRatingLevelIndicatorStyle|NSRadioModeMatrix|NSRadioButton|NSGIFFileType|NSGlyphBelow|NSGlyphInscribeBelow|NSGlyphInscribeBase|NSGlyphInscribeOverstrike|NSGlyphInscribeOverBelow|NSGlyphInscribeAbove|NSGlyphLayoutWithPrevious|NSGlyphLayoutAtAPoint|NSGlyphLayoutAgainstAPoint|NSGlyphAttributeBidiLevel|NSGlyphAttributeSoft|NSGlyphAttributeInscribe|NSGlyphAttributeElastic|NSGlyphAbove|NSGrooveBorder|NSGreaterThanComparison|NSGreaterThanOrEqualToComparison|NSGreaterThanOrEqualToPredicateOperatorType|NSGreaterThanPredicateOperatorType|NSGrayModeColorPanel|NSGrayColorSpaceModel|NSGradientNone|NSGradientConcaveStrong|NSGradientConcaveWeak|NSGradientConvexStrong|NSGradientConvexWeak|NSGraphiteControlTint|NSXMLNotationDeclarationKind|NSXMLNodeCompactEmptyElement|NSXMLNodeIsCDATA|NSXMLNodeOptionsNone|NSXMLNodeUseSingleQuotes|NSXMLNodeUseDoubleQuotes|NSXMLNodePreserveNamespaceOrder|NSXMLNodePreserveCharacterReferences|NSXMLNodePreserveCDATA|NSXMLNodePreserveDTD|NSXMLNodePreservePrefixes|NSXMLNodePreserveEntities|NSXMLNodePreserveEmptyElements|NSXMLNodePreserveQuotes|NSXMLNodePreserveWhitespace|NSXMLNodePreserveAttributeOrder|NSXMLNodePreserveAll|NSXMLNodePrettyPrint|NSXMLNodeExpandEmptyElement|NSXMLNamespaceKind|NSXMLCommentKind|NSXMLTextKind|NSXMLInvalidKind|NSXMLDocumentXMLKind|NSXMLDocumentXHTMLKind|NSXMLDocumentXInclude|NSXMLDocumentHTMLKind|NSXMLDocumentTidyXML|NSXMLDocumentTidyHTML|NSXMLDocumentTextKind|NSXMLDocumentIncludeContentTypeDeclaration|NSXMLDocumentValidate|NSXMLDocumentKind|NSXMLDTDKind|NSXMLParserGTRequiredError|NSXMLParserXMLDeclNotStartedError|NSXMLParserXMLDeclNotFinishedError|NSXMLParserMisplacedXMLDeclarationError|NSXMLParserMisplacedCDATAEndStringError|NSXMLParserMixedContentDeclNotStartedError|NSXMLParserMixedContentDeclNotFinishedError|NSXMLParserStandaloneValueError|NSXMLParserStringNotStartedError|NSXMLParserStringNotClosedError|NSXMLParserSpaceRequiredError|NSXMLParserSeparatorRequiredError|NSXMLParserNMTOKENRequiredError|NSXMLParserNotationNotStartedError|NSXMLParserNotationNotFinishedError|NSXMLParserNotWellBalancedError|NSXMLParserNoDTDError|NSXMLParserNamespaceDeclarationError|NSXMLParserNAMERequiredError|NSXMLParserCharacterRefInDTDError|NSXMLParserCharacterRefInPrologError|NSXMLParserCharacterRefInEpilogError|NSXMLParserCharacterRefAtEOFError|NSXMLParserConditionalSectionNotStartedError|NSXMLParserConditionalSectionNotFinishedError|NSXMLParserCommentNotFinishedError|NSXMLParserCommentContainsDoubleHyphenError|NSXMLParserCDATANotFinishedError|NSXMLParserTagNameMismatchError|NSXMLParserInternalError|NSXMLParserInvalidHexCharacterRefError|NSXMLParserInvalidCharacterRefError|NSXMLParserInvalidCharacterInEntityError|NSXMLParserInvalidCharacterError|NSXMLParserInvalidConditionalSectionError|NSXMLParserInvalidDecimalCharacterRefError|NSXMLParserInvalidURIError|NSXMLParserInvalidEncodingNameError|NSXMLParserInvalidEncodingError|NSXMLParserOutOfMemoryError|NSXMLParserDocumentStartError|NSXMLParserDelegateAbortedParseError|NSXMLParserDOCTYPEDeclNotFinishedError|NSXMLParserURIRequiredError|NSXMLParserURIFragmentError|NSXMLParserUndeclaredEntityError|NSXMLParserUnparsedEntityError|NSXMLParserUnknownEncodingError|NSXMLParserUnfinishedTagError|NSXMLParserPCDATARequiredError|NSXMLParserPublicIdentifierRequiredError|NSXMLParserParsedEntityRefMissingSemiError|NSXMLParserParsedEntityRefNoNameError|NSXMLParserParsedEntityRefInInternalSubsetError|NSXMLParserParsedEntityRefInInternalError|NSXMLParserParsedEntityRefInPrologError|NSXMLParserParsedEntityRefInEpilogError|NSXMLParserParsedEntityRefAtEOFError|NSXMLParserProcessingInstructionNotStartedError|NSXMLParserProcessingInstructionNotFinishedError|NSXMLParserPrematureDocumentEndError|NSXMLParserEncodingNotSupportedError|NSXMLParserEntityRefInDTDError|NSXMLParserEntityRefInPrologError|NSXMLParserEntityRefInEpilogError|NSXMLParserEntityReferenceMissingSemiError|NSXMLParserEntityReferenceWithoutNameError|NSXMLParserEntityRefLoopError|NSXMLParserEntityRefAtEOFError|NSXMLParserEntityBoundaryError|NSXMLParserEntityNotStartedError|NSXMLParserEntityNotFinishedError|NSXMLParserEntityIsParameterError|NSXMLParserEntityIsExternalError|NSXMLParserEntityValueRequiredError|NSXMLParserEqualExpectedError|NSXMLParserElementContentDeclNotStartedError|NSXMLParserElementContentDeclNotFinishedError|NSXMLParserExternalStandaloneEntityError|NSXMLParserExternalSubsetNotFinishedError|NSXMLParserExtraContentError|NSXMLParserEmptyDocumentError|NSXMLParserLiteralNotStartedError|NSXMLParserLiteralNotFinishedError|NSXMLParserLTRequiredError|NSXMLParserLTSlashRequiredError|NSXMLParserLessThanSymbolInAttributeError|NSXMLParserAttributeRedefinedError|NSXMLParserAttributeHasNoValueError|NSXMLParserAttributeNotStartedError|NSXMLParserAttributeNotFinishedError|NSXMLParserAttributeListNotStartedError|NSXMLParserAttributeListNotFinishedError|NSXMLProcessingInstructionKind|NSXMLEntityGeneralKind|NSXMLEntityDeclarationKind|NSXMLEntityUnparsedKind|NSXMLEntityParsedKind|NSXMLEntityParameterKind|NSXMLEntityPredefined|NSXMLElementDeclarationMixedKind|NSXMLElementDeclarationUndefinedKind|NSXMLElementDeclarationElementKind|NSXMLElementDeclarationEmptyKind|NSXMLElementDeclarationKind|NSXMLElementDeclarationAnyKind|NSXMLElementKind|NSXMLAttributeNMTokensKind|NSXMLAttributeNMTokenKind|NSXMLAttributeNotationKind|NSXMLAttributeCDATAKind|NSXMLAttributeIDRefsKind|NSXMLAttributeIDRefKind|NSXMLAttributeIDKind|NSXMLAttributeDeclarationKind|NSXMLAttributeEntityKind|NSXMLAttributeEntitiesKind|NSXMLAttributeEnumerationKind|NSXMLAttributeKind|NSMinXEdge|NSMiniaturizableWindowMask|NSMinYEdge|NSMinuteCalendarUnit|NSMiterLineJoinStyle|NSMiddleSubelement|NSMixedState|NSMonthCalendarUnit|NSModeSwitchFunctionKey|NSMouseMoved|NSMouseMovedMask|NSMouseEntered|NSMouseEnteredMask|NSMouseEventSubtype|NSMouseExited|NSMouseExitedMask|NSMoveToBezierPathElement|NSMomentaryChangeButton|NSMomentaryPushButton|NSMomentaryPushInButton|NSMomentaryLight|NSMomentaryLightButton|NSMenuFunctionKey|NSMacintoshInterfaceStyle|NSMacOSRomanStringEncoding|NSMatchesPredicateOperatorType|NSMappedRead|NSMaxXEdge|NSMaxYEdge|NSMACHOperatingSystem|NSBMPFileType|NSBottomTabsBezelBorder|NSBoldFontMask|NSBorderlessWindowMask|NSBoxSecondary|NSBoxSeparator|NSBoxOldStyle|NSBoxPrimary|NSButtLineCapStyle|NSBezelBorder|NSBevelLineJoinStyle|NSBelowBottom|NSBelowTop|NSBeginsWithComparison|NSBeginsWithPredicateOperatorType|NSBeginFunctionKey|NSBlueControlTint|NSBackspaceCharacter|NSBacktabTextMovement|NSBackingStoreRetained|NSBackingStoreBuffered|NSBackingStoreNonretained|NSBackTabCharacter|NSBackwardsSearch|NSBackgroundTab|NSBrowserNoColumnResizing|NSBrowserUserColumnResizing|NSBrowserAutoColumnResizing|NSBreakFunctionKey|NSShiftJISStringEncoding|NSShiftKeyMask|NSShowControlGlyphs|NSShowInvisibleGlyphs|NSShadowlessSquareBezelStyle|NSSysReqFunctionKey|NSSystemDomainMask|NSSystemDefined|NSSystemDefinedMask|NSSystemFunctionKey|NSSymbolStringEncoding|NSScannedOption|NSScaleNone|NSScaleToFit|NSScaleProportionally|NSScrollerNoPart|NSScrollerIncrementPage|NSScrollerIncrementLine|NSScrollerIncrementArrow|NSScrollerDecrementPage|NSScrollerDecrementLine|NSScrollerDecrementArrow|NSScrollerKnob|NSScrollerKnobSlot|NSScrollerArrowsMinEnd|NSScrollerArrowsMaxEnd|NSScrollerArrowsNone|NSScrollerArrowsDefaultSetting|NSScrollWheel|NSScrollWheelMask|NSScrollLockFunctionKey|NSScreenChangedEventType|NSStopFunctionKey|NSStringDrawingOneShot|NSStringDrawingDisableScreenFontSubstitution|NSStringDrawingUsesDeviceMetrics|NSStringDrawingUsesFontLeading|NSStringDrawingUsesLineFragmentOrigin|NSStreamStatusReading|NSStreamStatusNotOpen|NSStreamStatusClosed|NSStreamStatusOpen|NSStreamStatusOpening|NSStreamStatusError|NSStreamStatusWriting|NSStreamStatusAtEnd|NSStreamEventHasBytesAvailable|NSStreamEventHasSpaceAvailable|NSStreamEventNone|NSStreamEventOpenCompleted|NSStreamEventEndEncountered|NSStreamEventErrorOccurred|NSSingleDateMode|NSSingleUnderlineStyle|NSSizeDownFontAction|NSSizeUpFontAction|NSSolarisOperatingSystem|NSSunOSOperatingSystem|NSSpecialPageOrder|NSSecondCalendarUnit|NSSelectByCharacter|NSSelectByParagraph|NSSelectByWord|NSSelectingNext|NSSelectingPrevious|NSSelectionAffinityDownstream|NSSelectionAffinityUpstream|NSSelectedTab|NSSelectFunctionKey|NSSegmentSwitchTrackingMomentary|NSSegmentSwitchTrackingSelectOne|NSSegmentSwitchTrackingSelectAny|NSSquareLineCapStyle|NSSwitchButton|NSSaveToOperation|NSSaveOptionsYes|NSSaveOptionsNo|NSSaveOptionsAsk|NSSaveOperation|NSSaveAsOperation|NSSmallSquareBezelStyle|NSSmallControlSize|NSSmallCapsFontMask|NSSmallIconButtonBezelStyle|NSHighlightModeMatrix|NSHSBModeColorPanel|NSHourMinuteSecondDatePickerElementFlag|NSHourMinuteDatePickerElementFlag|NSHourCalendarUnit|NSHorizontalRuler|NSHomeFunctionKey|NSHTTPCookieAcceptPolicyNever|NSHTTPCookieAcceptPolicyOnlyFromMainDocumentDomain|NSHTTPCookieAcceptPolicyAlways|NSHelpButtonBezelStyle|NSHelpKeyMask|NSHelpFunctionKey|NSHeavierFontAction|NSHPUXOperatingSystem|NSYearMonthDayDatePickerElementFlag|NSYearMonthDatePickerElementFlag|NSYearCalendarUnit|NSNonStandardCharacterSetFontMask|NSNonZeroWindingRule|NSNonactivatingPanelMask|NSNonLossyASCIIStringEncoding|NSNoBorder|NSNotificationSuspensionBehaviorHold|NSNotificationSuspensionBehaviorCoalesce|NSNotificationSuspensionBehaviorDeliverImmediately|NSNotificationSuspensionBehaviorDrop|NSNotificationNoCoalescing|NSNotificationCoalescingOnSender|NSNotificationCoalescingOnName|NSNotificationDeliverImmediately|NSNotificationPostToAllSessions|NSNotPredicateType|NSNotEqualToPredicateOperatorType|NSNoScriptError|NSNoScrollerParts|NSNoSubelement|NSNoSpecifierError|NSNoCellMask|NSNoTitle|NSNoTopLevelContainersSpecifierError|NSNoTabsBezelBorder|NSNoTabsNoBorder|NSNoTabsLineBorder|NSNoInterfaceStyle|NSNoImage|NSNoUnderlineStyle|NSNoFontChangeAction|NSNullGlyph|NSNullCellType|NSNumericSearch|NSNumericPadKeyMask|NSNumberFormatterRoundHalfDown|NSNumberFormatterRoundHalfUp|NSNumberFormatterRoundHalfEven|NSNumberFormatterRoundCeiling|NSNumberFormatterRoundDown|NSNumberFormatterRoundUp|NSNumberFormatterRoundFloor|NSNumberFormatterBehavior10|NSNumberFormatterBehaviorDefault|NSNumberFormatterScientificStyle|NSNumberFormatterSpellOutStyle|NSNumberFormatterNoStyle|NSNumberFormatterCurrencyStyle|NSNumberFormatterDecimalStyle|NSNumberFormatterPercentStyle|NSNumberFormatterPadBeforeSuffix|NSNumberFormatterPadBeforePrefix|NSNumberFormatterPadAfterSuffix|NSNumberFormatterPadAfterPrefix|NSNetServicesBadArgumentError|NSNetServicesNotFoundError|NSNetServicesCollisionError|NSNetServicesCancelledError|NSNetServicesTimeoutError|NSNetServicesInvalidError|NSNetServicesUnknownError|NSNetServicesActivityInProgress|NSNetworkDomainMask|NSNewlineCharacter|NSNextStepInterfaceStyle|NSNextFunctionKey|NSNEXTSTEPStringEncoding|NSNativeShortGlyphPacking|NSNaturalTextAlignment|NSNarrowFontMask|NSChangeReadOtherContents|NSChangeGrayCell|NSChangeGrayCellMask|NSChangeBackgroundCell|NSChangeBackgroundCellMask|NSChangeCleared|NSChangeDone|NSChangeUndone|NSChangeAutosaved|NSCMYKModeColorPanel|NSCMYKColorSpaceModel|NSCircularBezelStyle|NSCircularSlider|NSConstantValueExpressionType|NSContinuousCapacityLevelIndicatorStyle|NSContentsCellMask|NSContainsComparison|NSContainerSpecifierError|NSControlGlyph|NSControlKeyMask|NSCondensedFontMask|NSColorPanelRGBModeMask|NSColorPanelGrayModeMask|NSColorPanelHSBModeMask|NSColorPanelCMYKModeMask|NSColorPanelColorListModeMask|NSColorPanelCustomPaletteModeMask|NSColorPanelCrayonModeMask|NSColorPanelWheelModeMask|NSColorPanelAllModesMask|NSColorListModeColorPanel|NSCoreServiceDirectory|NSCompositeXOR|NSCompositeSourceIn|NSCompositeSourceOut|NSCompositeSourceOver|NSCompositeSourceAtop|NSCompositeHighlight|NSCompositeCopy|NSCompositeClear|NSCompositeDestinationIn|NSCompositeDestinationOut|NSCompositeDestinationOver|NSCompositeDestinationAtop|NSCompositePlusDarker|NSCompositePlusLighter|NSCompressedFontMask|NSCommandKeyMask|NSCustomSelectorPredicateOperatorType|NSCustomPaletteModeColorPanel|NSCursorUpdate|NSCursorUpdateMask|NSCursorPointingDevice|NSCurveToBezierPathElement|NSCenterTextAlignment|NSCenterTabStopType|NSCellHighlighted|NSCellHasImageHorizontal|NSCellHasImageOnLeftOrBottom|NSCellHasOverlappingImage|NSCellChangesContents|NSCellIsBordered|NSCellIsInsetButton|NSCellDisabled|NSCellEditable|NSCellLightsByGray|NSCellLightsByBackground|NSCellLightsByContents|NSCellAllowsMixedState|NSClipPagination|NSClosePathBezierPathElement|NSClosableWindowMask|NSClockAndCalendarDatePickerStyle|NSClearControlTint|NSClearDisplayFunctionKey|NSClearLineFunctionKey|NSCaseInsensitiveSearch|NSCaseInsensitivePredicateOption|NSCannotCreateScriptCommandError|NSCancelButton|NSCancelTextMovement|NSCachesDirectory|NSCalculationNoError|NSCalculationOverflow|NSCalculationDivideByZero|NSCalculationUnderflow|NSCalculationLossOfPrecision|NSCarriageReturnCharacter|NSCriticalRequest|NSCriticalAlertStyle|NSCrayonModeColorPanel|NSThickSquareBezelStyle|NSThickerSquareBezelStyle|NSTypesetterBehavior|NSTypesetterHorizontalTabAction|NSTypesetterContainerBreakAction|NSTypesetterZeroAdvancementAction|NSTypesetterOriginalBehavior|NSTypesetterParagraphBreakAction|NSTypesetterWhitespaceAction|NSTypesetterLineBreakAction|NSTypesetterLatestBehavior|NSTickMarkRight|NSTickMarkBelow|NSTickMarkLeft|NSTickMarkAbove|NSTitledWindowMask|NSTimeZoneDatePickerElementFlag|NSToolbarItemVisibilityPriorityStandard|NSToolbarItemVisibilityPriorityHigh|NSToolbarItemVisibilityPriorityUser|NSToolbarItemVisibilityPriorityLow|NSTopTabsBezelBorder|NSToggleButton|NSTIFFCompressionNone|NSTIFFCompressionNEXT|NSTIFFCompressionCCITTFAX3|NSTIFFCompressionCCITTFAX4|NSTIFFCompressionOldJPEG|NSTIFFCompressionJPEG|NSTIFFCompressionPackBits|NSTIFFCompressionLZW|NSTIFFFileType|NSTerminateNow|NSTerminateCancel|NSTerminateLater|NSTextReadInapplicableDocumentTypeError|NSTextReadWriteErrorMinimum|NSTextReadWriteErrorMaximum|NSTextBlockMinimumHeight|NSTextBlockMinimumWidth|NSTextBlockMiddleAlignment|NSTextBlockMargin|NSTextBlockMaximumHeight|NSTextBlockMaximumWidth|NSTextBlockBottomAlignment|NSTextBlockBorder|NSTextBlockBaselineAlignment|NSTextBlockHeight|NSTextBlockTopAlignment|NSTextBlockPercentageValueType|NSTextBlockPadding|NSTextBlockWidth|NSTextBlockAbsoluteValueType|NSTextStorageEditedCharacters|NSTextStorageEditedAttributes|NSTextCellType|NSTexturedRoundedBezelStyle|NSTexturedBackgroundWindowMask|NSTexturedSquareBezelStyle|NSTextTableFixedLayoutAlgorithm|NSTextTableAutomaticLayoutAlgorithm|NSTextFieldRoundedBezel|NSTextFieldSquareBezel|NSTextFieldAndStepperDatePickerStyle|NSTextWriteInapplicableDocumentTypeError|NSTextListPrependEnclosingMarker|NSTwoByteGlyphPacking|NSTabCharacter|NSTabTextMovement|NSTabletPoint|NSTabletPointMask|NSTabletPointEventSubtype|NSTabletProximity|NSTabletProximityMask|NSTabletProximityEventSubtype|NSTableColumnNoResizing|NSTableColumnUserResizingMask|NSTableColumnAutoresizingMask|NSTableViewReverseSequentialColumnAutoresizingStyle|NSTableViewGridNone|NSTableViewSolidHorizontalGridLineMask|NSTableViewSolidVerticalGridLineMask|NSTableViewSequentialColumnAutoresizingStyle|NSTableViewNoColumnAutoresizing|NSTableViewUniformColumnAutoresizingStyle|NSTableViewFirstColumnOnlyAutoresizingStyle|NSTableViewLastColumnOnlyAutoresizingStyle|NSTrackModeMatrix|NSInsertCharFunctionKey|NSInsertFunctionKey|NSInsertLineFunctionKey|NSIntType|NSInternalScriptError|NSInternalSpecifierError|NSIndexSubelement|NSInvalidIndexSpecifierError|NSInformationalRequest|NSInformationalAlertStyle|NSInPredicateOperatorType|NSItalicFontMask|NSISO2022JPStringEncoding|NSISOLatin1StringEncoding|NSISOLatin2StringEncoding|NSIdentityMappingCharacterCollection|NSIllegalTextMovement|NSImageRight|NSImageRepMatchesDevice|NSImageRepLoadStatusReadingHeader|NSImageRepLoadStatusCompleted|NSImageRepLoadStatusInvalidData|NSImageRepLoadStatusUnexpectedEOF|NSImageRepLoadStatusUnknownType|NSImageRepLoadStatusWillNeedAllData|NSImageBelow|NSImageCellType|NSImageCacheBySize|NSImageCacheNever|NSImageCacheDefault|NSImageCacheAlways|NSImageInterpolationHigh|NSImageInterpolationNone|NSImageInterpolationDefault|NSImageInterpolationLow|NSImageOnly|NSImageOverlaps|NSImageFrameGroove|NSImageFrameGrayBezel|NSImageFrameButton|NSImageFrameNone|NSImageFramePhoto|NSImageLoadStatusReadError|NSImageLoadStatusCompleted|NSImageLoadStatusCancelled|NSImageLoadStatusInvalidData|NSImageLoadStatusUnexpectedEOF|NSImageLeft|NSImageAlignRight|NSImageAlignBottom|NSImageAlignBottomRight|NSImageAlignBottomLeft|NSImageAlignCenter|NSImageAlignTop|NSImageAlignTopRight|NSImageAlignTopLeft|NSImageAlignLeft|NSImageAbove|NSOnState|NSOneByteGlyphPacking|NSOnOffButton|NSOnlyScrollerArrows|NSOtherMouseDown|NSOtherMouseDownMask|NSOtherMouseDragged|NSOtherMouseDraggedMask|NSOtherMouseUp|NSOtherMouseUpMask|NSOtherTextMovement|NSOSF1OperatingSystem|NSOpenGLGOResetLibrary|NSOpenGLGORetainRenderers|NSOpenGLGOClearFormatCache|NSOpenGLGOFormatCacheSize|NSOpenGLPFARobust|NSOpenGLPFARendererID|NSOpenGLPFAMinimumPolicy|NSOpenGLPFAMultisample|NSOpenGLPFAMultiScreen|NSOpenGLPFAMPSafe|NSOpenGLPFAMaximumPolicy|NSOpenGLPFABackingStore|NSOpenGLPFAScreenMask|NSOpenGLPFAStencilSize|NSOpenGLPFAStereo|NSOpenGLPFASingleRenderer|NSOpenGLPFASupersample|NSOpenGLPFASamples|NSOpenGLPFASampleBuffers|NSOpenGLPFASampleAlpha|NSOpenGLPFANoRecovery|NSOpenGLPFAColorSize|NSOpenGLPFAColorFloat|NSOpenGLPFACompliant|NSOpenGLPFAClosestPolicy|NSOpenGLPFAOffScreen|NSOpenGLPFADoubleBuffer|NSOpenGLPFADepthSize|NSOpenGLPFAPixelBuffer|NSOpenGLPFAVirtualScreenCount|NSOpenGLPFAFullScreen|NSOpenGLPFAWindow|NSOpenGLPFAAccumSize|NSOpenGLPFAAccelerated|NSOpenGLPFAAuxBuffers|NSOpenGLPFAAuxDepthStencil|NSOpenGLPFAAlphaSize|NSOpenGLPFAAllRenderers|NSOpenStepUnicodeReservedBase|NSOperationNotSupportedForKeyScriptError|NSOperationNotSupportedForKeySpecifierError|NSOffState|NSOKButton|NSOrPredicateType|NSObjCBitfield|NSObjCBoolType|NSObjCShortType|NSObjCStringType|NSObjCStructType|NSObjCSelectorType|NSObjCNoType|NSObjCCharType|NSObjCObjectType|NSObjCDoubleType|NSObjCUnionType|NSObjCPointerType|NSObjCVoidType|NSObjCFloatType|NSObjCLongType|NSObjCLonglongType|NSObjCArrayType|NSDisclosureBezelStyle|NSDiscreteCapacityLevelIndicatorStyle|NSDisplayWindowRunLoopOrdering|NSDiacriticInsensitivePredicateOption|NSDirectSelection|NSDirectPredicateModifier|NSDocModalWindowMask|NSDocumentDirectory|NSDocumentationDirectory|NSDoubleType|NSDownTextMovement|NSDownArrowFunctionKey|NSDescendingPageOrder|NSDesktopDirectory|NSDecimalTabStopType|NSDeviceNColorSpaceModel|NSDeviceIndependentModifierFlagsMask|NSDeveloperDirectory|NSDeveloperApplicationDirectory|NSDefaultControlTint|NSDefaultTokenStyle|NSDeleteCharacter|NSDeleteCharFunctionKey|NSDeleteFunctionKey|NSDeleteLineFunctionKey|NSDemoApplicationDirectory|NSDayCalendarUnit|NSDateFormatterMediumStyle|NSDateFormatterBehavior10|NSDateFormatterBehaviorDefault|NSDateFormatterShortStyle|NSDateFormatterNoStyle|NSDateFormatterFullStyle|NSDateFormatterLongStyle|NSDrawerClosingState|NSDrawerClosedState|NSDrawerOpeningState|NSDrawerOpenState|NSDragOperationGeneric|NSDragOperationMove|NSDragOperationNone|NSDragOperationCopy|NSDragOperationDelete|NSDragOperationPrivate|NSDragOperationEvery|NSDragOperationLink|NSDragOperationAll|NSUserCancelledError|NSUserDirectory|NSUserDomainMask|NSUserFunctionKey|NSURLHandleNotLoaded|NSURLHandleLoadSucceeded|NSURLHandleLoadInProgress|NSURLHandleLoadFailed|NSURLCredentialPersistenceNone|NSURLCredentialPersistencePermanent|NSURLCredentialPersistenceForSession|NSUnscaledWindowMask|NSUncachedRead|NSUnicodeStringEncoding|NSUnitalicFontMask|NSUnifiedTitleAndToolbarWindowMask|NSUndoCloseGroupingRunLoopOrdering|NSUndoFunctionKey|NSUndefinedDateComponent|NSUnderlineStyleSingle|NSUnderlineStyleNone|NSUnderlineStyleThick|NSUnderlineStyleDouble|NSUnderlinePatternSolid|NSUnderlinePatternDot|NSUnderlinePatternDash|NSUnderlinePatternDashDot|NSUnderlinePatternDashDotDot|NSUnknownColorSpaceModel|NSUnknownPointingDevice|NSUnknownPageOrder|NSUnknownKeyScriptError|NSUnknownKeySpecifierError|NSUnboldFontMask|NSUtilityWindowMask|NSUTF8StringEncoding|NSUpdateWindowsRunLoopOrdering|NSUpTextMovement|NSUpArrowFunctionKey|NSJustifiedTextAlignment|NSJPEG2000FileType|NSJPEGFileType|NSJapaneseEUCGlyphPacking|NSJapaneseEUCStringEncoding|NSPostNow|NSPosterFontMask|NSPostWhenIdle|NSPostASAP|NSPositionReplace|NSPositionBefore|NSPositionBeginning|NSPositionEnd|NSPositionAfter|NSPositiveIntType|NSPositiveDoubleType|NSPositiveFloatType|NSPopUpNoArrow|NSPopUpArrowAtBottom|NSPopUpArrowAtCenter|NSPowerOffEventType|NSPortraitOrientation|NSPNGFileType|NSPushInCell|NSPushInCellMask|NSPushOnPushOffButton|NSPenTipMask|NSPenUpperSideMask|NSPenPointingDevice|NSPenLowerSideMask|NSPeriodic|NSPeriodicMask|NSPPScaleField|NSPPStatusTitle|NSPPStatusField|NSPPSaveButton|NSPPNoteTitle|NSPPNoteField|NSPPNameTitle|NSPPNameField|NSPPCopiesField|NSPPTitleField|NSPPImageButton|NSPPOptionsButton|NSPPPaperFeedButton|NSPPPageRangeTo|NSPPPageRangeFrom|NSPPPageChoiceMatrix|NSPPPreviewButton|NSPPLayoutButton|NSPlainTextTokenStyle|NSPauseFunctionKey|NSParagraphSeparatorCharacter|NSPageDownFunctionKey|NSPageUpFunctionKey|NSPrintingReplyLater|NSPrintingSuccess|NSPrintingCancelled|NSPrintingFailure|NSPrintScreenFunctionKey|NSPrinterTableNotFound|NSPrinterTableOK|NSPrinterTableError|NSPrintFunctionKey|NSPropertyListXMLFormat|NSPropertyListMutableContainers|NSPropertyListMutableContainersAndLeaves|NSPropertyListBinaryFormat|NSPropertyListImmutable|NSPropertyListOpenStepFormat|NSProprietaryStringEncoding|NSProgressIndicatorBarStyle|NSProgressIndicatorSpinningStyle|NSProgressIndicatorPreferredSmallThickness|NSProgressIndicatorPreferredThickness|NSProgressIndicatorPreferredLargeThickness|NSProgressIndicatorPreferredAquaThickness|NSPressedTab|NSPrevFunctionKey|NSPLHeightForm|NSPLCancelButton|NSPLTitleField|NSPLImageButton|NSPLOKButton|NSPLOrientationMatrix|NSPLUnitsButton|NSPLPaperNameButton|NSPLWidthForm|NSEnterCharacter|NSEndsWithComparison|NSEndsWithPredicateOperatorType|NSEndFunctionKey|NSEvenOddWindingRule|NSEverySubelement|NSEvaluatedObjectExpressionType|NSEqualToComparison|NSEqualToPredicateOperatorType|NSEraserPointingDevice|NSEraCalendarUnit|NSEraDatePickerElementFlag|NSExclude10|NSExcludeQuickDrawElementsIconCreationOption|NSExpandedFontMask|NSExecuteFunctionKey|NSViewMinXMargin|NSViewMinYMargin|NSViewMaxXMargin|NSViewMaxYMargin|NSViewHeightSizable|NSViewNotSizable|NSViewWidthSizable|NSViaPanelFontAction|NSVerticalRuler|NSValidationErrorMinimum|NSValidationErrorMaximum|NSVariableExpressionType|NSKeySpecifierEvaluationScriptError|NSKeyDown|NSKeyDownMask|NSKeyUp|NSKeyUpMask|NSKeyPathExpressionType|NSKeyValueMinusSetMutation|NSKeyValueSetSetMutation|NSKeyValueChangeReplacement|NSKeyValueChangeRemoval|NSKeyValueChangeSetting|NSKeyValueChangeInsertion|NSKeyValueIntersectSetMutation|NSKeyValueObservingOptionNew|NSKeyValueObservingOptionOld|NSKeyValueUnionSetMutation|NSKeyValueValidationError|NSQTMovieNormalPlayback|NSQTMovieLoopingBackAndForthPlayback|NSQTMovieLoopingPlayback|NSF11FunctionKey|NSF17FunctionKey|NSF12FunctionKey|NSF18FunctionKey|NSF13FunctionKey|NSF19FunctionKey|NSF14FunctionKey|NSF15FunctionKey|NSF1FunctionKey|NSF10FunctionKey|NSF16FunctionKey|NSF7FunctionKey|NSFindPanelActionReplace|NSFindPanelActionReplaceAndFind|NSFindPanelActionReplaceAll|NSFindPanelActionReplaceAllInSelection|NSFindPanelActionShowFindPanel|NSFindPanelActionSetFindString|NSFindPanelActionSelectAll|NSFindPanelActionSelectAllInSelection|NSFindPanelActionNext|NSFindPanelActionPrevious|NSFindFunctionKey|NSFitPagination|NSFileReadNoSuchFileError|NSFileReadNoPermissionError|NSFileReadCorruptFileError|NSFileReadInvalidFileNameError|NSFileReadInapplicableStringEncodingError|NSFileReadUnsupportedSchemeError|NSFileReadUnknownError|NSFileHandlingPanelCancelButton|NSFileHandlingPanelOKButton|NSFileNoSuchFileError|NSFileErrorMinimum|NSFileErrorMaximum|NSFileWriteNoPermissionError|NSFileWriteInvalidFileNameError|NSFileWriteInapplicableStringEncodingError|NSFileWriteOutOfSpaceError|NSFileWriteUnsupportedSchemeError|NSFileWriteUnknownError|NSFileLockingError|NSFixedPitchFontMask|NSF21FunctionKey|NSF27FunctionKey|NSF22FunctionKey|NSF28FunctionKey|NSF23FunctionKey|NSF29FunctionKey|NSF24FunctionKey|NSF25FunctionKey|NSF2FunctionKey|NSF20FunctionKey|NSF26FunctionKey|NSFontMonoSpaceTrait|NSFontModernSerifsClass|NSFontBoldTrait|NSFontSymbolicClass|NSFontScriptsClass|NSFontSlabSerifsClass|NSFontSansSerifClass|NSFontCondensedTrait|NSFontCollectionApplicationOnlyMask|NSFontClarendonSerifsClass|NSFontTransitionalSerifsClass|NSFontIntegerAdvancementsRenderingMode|NSFontItalicTrait|NSFontOldStyleSerifsClass|NSFontOrnamentalsClass|NSFontDefaultRenderingMode|NSFontUnknownClass|NSFontUIOptimizedTrait|NSFontPanelShadowEffectModeMask|NSFontPanelStandardModesMask|NSFontPanelStrikethroughEffectModeMask|NSFontPanelSizeModeMask|NSFontPanelCollectionModeMask|NSFontPanelTextColorEffectModeMask|NSFontPanelDocumentColorEffectModeMask|NSFontPanelUnderlineEffectModeMask|NSFontPanelFaceModeMask|NSFontPanelAllModesMask|NSFontPanelAllEffectsModeMask|NSFontExpandedTrait|NSFontVerticalTrait|NSFontFamilyClassMask|NSFontFreeformSerifsClass|NSFontAntialiasedRenderingMode|NSFontAntialiasedIntegerAdvancementsRenderingMode|NSFocusRingBelow|NSFocusRingTypeNone|NSFocusRingTypeDefault|NSFocusRingTypeExterior|NSFocusRingOnly|NSFocusRingAbove|NSFourByteGlyphPacking|NSFormattingError|NSFormattingErrorMinimum|NSFormattingErrorMaximum|NSFormFeedCharacter|NSF8FunctionKey|NSFunctionExpressionType|NSFunctionKeyMask|NSF31FunctionKey|NSF32FunctionKey|NSF33FunctionKey|NSF34FunctionKey|NSF35FunctionKey|NSF3FunctionKey|NSF30FunctionKey|NSF9FunctionKey|NSF4FunctionKey|NSFPRevertButton|NSFPSizeTitle|NSFPSizeField|NSFPSetButton|NSFPCurrentField|NSFPPreviewButton|NSFPPreviewField|NSFloatingPointSamplesBitmapFormat|NSFloatType|NSFlagsChanged|NSFlagsChangedMask|NSFaxButton|NSF5FunctionKey|NSF6FunctionKey|NSWheelModeColorPanel|NSWindowsNTOperatingSystem|NSWindowsCP1251StringEncoding|NSWindowsCP1252StringEncoding|NSWindowsCP1253StringEncoding|NSWindowsCP1254StringEncoding|NSWindowsCP1250StringEncoding|NSWindows95InterfaceStyle|NSWindows95OperatingSystem|NSWindowMiniaturizeButton|NSWindowMovedEventType|NSWindowBelow|NSWindowCloseButton|NSWindowToolbarButton|NSWindowZoomButton|NSWindowOut|NSWindowDocumentIconButton|NSWindowExposedEventType|NSWindowAbove|NSWorkspaceLaunchNewInstance|NSWorkspaceLaunchInhibitingBackgroundOnly|NSWorkspaceLaunchDefault|NSWorkspaceLaunchPreferringClassic|NSWorkspaceLaunchWithoutActivation|NSWorkspaceLaunchWithoutAddingToRecents|NSWorkspaceLaunchAsync|NSWorkspaceLaunchAndHide|NSWorkspaceLaunchAndHideOthers|NSWorkspaceLaunchAndPrint|NSWorkspaceLaunchAllowingClassicStartup|NSWeekdayCalendarUnit|NSWeekdayOrdinalCalendarUnit|NSWeekCalendarUnit|NSWantsBidiLevels|NSWarningAlertStyle|NSWritingDirectionRightToLeft|NSWritingDirectionNatural|NSWritingDirectionLeftToRight|NSWrapCalendarComponents|NSListModeMatrix|NSLineMovesRight|NSLineMovesDown|NSLineMovesUp|NSLineMovesLeft|NSLineBorder|NSLineBreakByCharWrapping|NSLineBreakByClipping|NSLineBreakByTruncatingMiddle|NSLineBreakByTruncatingHead|NSLineBreakByTruncatingTail|NSLineBreakByWordWrapping|NSLineSeparatorCharacter|NSLineSweepRight|NSLineSweepDown|NSLineSweepUp|NSLineSweepLeft|NSLineToBezierPathElement|NSLineDoesntMove|NSLinearSlider|NSLiteralSearch|NSLikePredicateOperatorType|NSLighterFontAction|NSLibraryDirectory|NSLocalDomainMask|NSLessThanComparison|NSLessThanOrEqualToComparison|NSLessThanOrEqualToPredicateOperatorType|NSLessThanPredicateOperatorType|NSLeftMouseDown|NSLeftMouseDownMask|NSLeftMouseDragged|NSLeftMouseDraggedMask|NSLeftMouseUp|NSLeftMouseUpMask|NSLeftTextMovement|NSLeftTextAlignment|NSLeftTabsBezelBorder|NSLeftTabStopType|NSLeftArrowFunctionKey|NSLayoutRightToLeft|NSLayoutNotDone|NSLayoutCantFit|NSLayoutOutOfGlyphs|NSLayoutDone|NSLayoutLeftToRight|NSLandscapeOrientation|NSLABColorSpaceModel|NSAsciiWithDoubleByteEUCGlyphPacking|NSAscendingPageOrder|NSAnyType|NSAnyPredicateModifier|NSAnyEventMask|NSAnchoredSearch|NSAnimationBlocking|NSAnimationNonblocking|NSAnimationNonblockingThreaded|NSAnimationEffectDisappearingItemDefault|NSAnimationEffectPoof|NSAnimationEaseIn|NSAnimationEaseInOut|NSAnimationEaseOut|NSAnimationLinear|NSAndPredicateType|NSAtBottom|NSAttachmentCharacter|NSAtomicWrite|NSAtTop|NSASCIIStringEncoding|NSAdobeGB1CharacterCollection|NSAdobeCNS1CharacterCollection|NSAdobeJapan1CharacterCollection|NSAdobeJapan2CharacterCollection|NSAdobeKorea1CharacterCollection|NSAddTraitFontAction|NSAdminApplicationDirectory|NSAutosaveOperation|NSAutoPagination|NSApplicationSupportDirectory|NSApplicationDirectory|NSApplicationDefined|NSApplicationDefinedMask|NSApplicationDelegateReplySuccess|NSApplicationDelegateReplyCancel|NSApplicationDelegateReplyFailure|NSApplicationDeactivatedEventType|NSApplicationActivatedEventType|NSAppKitDefined|NSAppKitDefinedMask|NSAlternateKeyMask|NSAlphaShiftKeyMask|NSAlphaNonpremultipliedBitmapFormat|NSAlphaFirstBitmapFormat|NSAlertSecondButtonReturn|NSAlertThirdButtonReturn|NSAlertOtherReturn|NSAlertDefaultReturn|NSAlertErrorReturn|NSAlertFirstButtonReturn|NSAlertAlternateReturn|NSAllScrollerParts|NSAllDomainsMask|NSAllPredicateModifier|NSAllLibrariesDirectory|NSAllApplicationsDirectory|NSArgumentsWrongScriptError|NSArgumentEvaluationScriptError|NSAboveBottom|NSAboveTop|NSAWTEventType",
        "support.constant.notification.cocoa.leopard": "NSMenuDidBeginTrackingNotification|NSViewDidUpdateTrackingAreasNotification",
        "support.constant.notification.cocoa": "NSMenuDidRemoveItemNotification|NSMenuDidSendActionNotification|NSMenuDidChangeItemNotification|NSMenuDidEndTrackingNotification|NSMenuDidAddItemNotification|NSMenuWillSendActionNotification|NSSystemColorsDidChangeNotification|NSSplitViewDidResizeSubviewsNotification|NSSplitViewWillResizeSubviewsNotification|NSContextHelpModeDidDeactivateNotification|NSContextHelpModeDidActivateNotification|NSControlTintDidChangeNotification|NSControlTextDidBeginEditingNotification|NSControlTextDidChangeNotification|NSControlTextDidEndEditingNotification|NSColorPanelColorDidChangeNotification|NSColorListDidChangeNotification|NSComboBoxSelectionIsChangingNotification|NSComboBoxSelectionDidChangeNotification|NSComboBoxWillDismissNotification|NSComboBoxWillPopUpNotification|NSClassDescriptionNeededForClassNotification|NSToolbarDidRemoveItemNotification|NSToolbarWillAddItemNotification|NSTextStorageDidProcessEditingNotification|NSTextStorageWillProcessEditingNotification|NSTextDidBeginEditingNotification|NSTextDidChangeNotification|NSTextDidEndEditingNotification|NSTextViewDidChangeSelectionNotification|NSTextViewDidChangeTypingAttributesNotification|NSTextViewWillChangeNotifyingTextViewNotification|NSTableViewSelectionIsChangingNotification|NSTableViewSelectionDidChangeNotification|NSTableViewColumnDidResizeNotification|NSTableViewColumnDidMoveNotification|NSImageRepRegistryDidChangeNotification|NSOutlineViewSelectionIsChangingNotification|NSOutlineViewSelectionDidChangeNotification|NSOutlineViewColumnDidResizeNotification|NSOutlineViewColumnDidMoveNotification|NSOutlineViewItemDidCollapseNotification|NSOutlineViewItemDidExpandNotification|NSOutlineViewItemWillCollapseNotification|NSOutlineViewItemWillExpandNotification|NSDrawerDidCloseNotification|NSDrawerDidOpenNotification|NSDrawerWillCloseNotification|NSDrawerWillOpenNotification|NSPopUpButtonCellWillPopUpNotification|NSPopUpButtonWillPopUpNotification|NSViewGlobalFrameDidChangeNotification|NSViewBoundsDidChangeNotification|NSViewFocusDidChangeNotification|NSViewFrameDidChangeNotification|NSFontSetChangedNotification|NSWindowDidResizeNotification|NSWindowDidResignMainNotification|NSWindowDidResignKeyNotification|NSWindowDidMiniaturizeNotification|NSWindowDidMoveNotification|NSWindowDidBecomeMainNotification|NSWindowDidBecomeKeyNotification|NSWindowDidChangeScreenNotification|NSWindowDidChangeScreenProfileNotification|NSWindowDidDeminiaturizeNotification|NSWindowDidUpdateNotification|NSWindowDidEndSheetNotification|NSWindowDidExposeNotification|NSWindowWillMiniaturizeNotification|NSWindowWillMoveNotification|NSWindowWillBeginSheetNotification|NSWindowWillCloseNotification|NSWorkspaceSessionDidResignActiveNotification|NSWorkspaceSessionDidBecomeActiveNotification|NSWorkspaceDidMountNotification|NSWorkspaceDidTerminateApplicationNotification|NSWorkspaceDidUnmountNotification|NSWorkspaceDidPerformFileOperationNotification|NSWorkspaceDidWakeNotification|NSWorkspaceDidLaunchApplicationNotification|NSWorkspaceWillSleepNotification|NSWorkspaceWillUnmountNotification|NSWorkspaceWillPowerOffNotification|NSWorkspaceWillLaunchApplicationNotification|NSAntialiasThresholdChangedNotification|NSApplicationDidResignActiveNotification|NSApplicationDidBecomeActiveNotification|NSApplicationDidHideNotification|NSApplicationDidChangeScreenParametersNotification|NSApplicationDidUnhideNotification|NSApplicationDidUpdateNotification|NSApplicationDidFinishLaunchingNotification|NSApplicationWillResignActiveNotification|NSApplicationWillBecomeActiveNotification|NSApplicationWillHideNotification|NSApplicationWillTerminateNotification|NSApplicationWillUnhideNotification|NSApplicationWillUpdateNotification|NSApplicationWillFinishLaunchingNotification|NSAppleEventManagerWillProcessFirstEventNotification",
        "support.constant.cocoa.leopard": "NSRuleEditorRowTypeSimple|NSRuleEditorRowTypeCompound|NSRuleEditorNestingModeSingle|NSRuleEditorNestingModeSimple|NSRuleEditorNestingModeCompound|NSRuleEditorNestingModeList|NSGradientDrawsBeforeStartingLocation|NSGradientDrawsAfterEndingLocation|NSMinusSetExpressionType|NSMachPortDeallocateReceiveRight|NSMachPortDeallocateSendRight|NSMachPortDeallocateNone|NSMapTableStrongMemory|NSMapTableCopyIn|NSMapTableZeroingWeakMemory|NSMapTableObjectPointerPersonality|NSBoxCustom|NSBundleExecutableArchitectureX86|NSBundleExecutableArchitectureI386|NSBundleExecutableArchitecturePPC|NSBundleExecutableArchitecturePPC64|NSBetweenPredicateOperatorType|NSBackgroundStyleRaised|NSBackgroundStyleDark|NSBackgroundStyleLight|NSBackgroundStyleLowered|NSStringDrawingTruncatesLastVisibleLine|NSStringEncodingConversionExternalRepresentation|NSStringEncodingConversionAllowLossy|NSSubqueryExpressionType|NSSpeechSentenceBoundary|NSSpeechImmediateBoundary|NSSpeechWordBoundary|NSSpellingStateGrammarFlag|NSSpellingStateSpellingFlag|NSSplitViewDividerStyleThin|NSSplitViewDividerStyleThick|NSServiceRequestTimedOutError|NSServiceMiscellaneousError|NSServiceMalformedServiceDictionaryError|NSServiceInvalidPasteboardDataError|NSServiceErrorMinimum|NSServiceErrorMaximum|NSServiceApplicationNotFoundError|NSServiceApplicationLaunchFailedError|NSSegmentStyleRoundRect|NSSegmentStyleRounded|NSSegmentStyleSmallSquare|NSSegmentStyleCapsule|NSSegmentStyleTexturedRounded|NSSegmentStyleTexturedSquare|NSSegmentStyleAutomatic|NSHUDWindowMask|NSHashTableStrongMemory|NSHashTableCopyIn|NSHashTableZeroingWeakMemory|NSHashTableObjectPointerPersonality|NSNoModeColorPanel|NSNetServiceNoAutoRename|NSChangeRedone|NSContainsPredicateOperatorType|NSColorRenderingIntentRelativeColorimetric|NSColorRenderingIntentSaturation|NSColorRenderingIntentDefault|NSColorRenderingIntentPerceptual|NSColorRenderingIntentAbsoluteColorimetric|NSCollectorDisabledOption|NSCellHitNone|NSCellHitContentArea|NSCellHitTrackableArea|NSCellHitEditableTextArea|NSTimeZoneNameStyleShortStandard|NSTimeZoneNameStyleShortDaylightSaving|NSTimeZoneNameStyleStandard|NSTimeZoneNameStyleDaylightSaving|NSTextFieldDatePickerStyle|NSTableViewSelectionHighlightStyleRegular|NSTableViewSelectionHighlightStyleSourceList|NSTrackingMouseMoved|NSTrackingMouseEnteredAndExited|NSTrackingCursorUpdate|NSTrackingInVisibleRect|NSTrackingEnabledDuringMouseDrag|NSTrackingAssumeInside|NSTrackingActiveInKeyWindow|NSTrackingActiveInActiveApp|NSTrackingActiveWhenFirstResponder|NSTrackingActiveAlways|NSIntersectSetExpressionType|NSIndexedColorSpaceModel|NSImageScaleNone|NSImageScaleProportionallyDown|NSImageScaleProportionallyUpOrDown|NSImageScaleAxesIndependently|NSOpenGLPFAAllowOfflineRenderers|NSOperationQueueDefaultMaxConcurrentOperationCount|NSOperationQueuePriorityHigh|NSOperationQueuePriorityNormal|NSOperationQueuePriorityVeryHigh|NSOperationQueuePriorityVeryLow|NSOperationQueuePriorityLow|NSDiacriticInsensitiveSearch|NSDownloadsDirectory|NSUnionSetExpressionType|NSUTF16BigEndianStringEncoding|NSUTF16StringEncoding|NSUTF16LittleEndianStringEncoding|NSUTF32BigEndianStringEncoding|NSUTF32StringEncoding|NSUTF32LittleEndianStringEncoding|NSPointerFunctionsMachVirtualMemory|NSPointerFunctionsMallocMemory|NSPointerFunctionsStrongMemory|NSPointerFunctionsStructPersonality|NSPointerFunctionsCStringPersonality|NSPointerFunctionsCopyIn|NSPointerFunctionsIntegerPersonality|NSPointerFunctionsZeroingWeakMemory|NSPointerFunctionsOpaqueMemory|NSPointerFunctionsOpaquePersonality|NSPointerFunctionsObjectPointerPersonality|NSPointerFunctionsObjectPersonality|NSPathStyleStandard|NSPathStyleNavigationBar|NSPathStylePopUp|NSPatternColorSpaceModel|NSPrintPanelShowsScaling|NSPrintPanelShowsCopies|NSPrintPanelShowsOrientation|NSPrintPanelShowsPaperSize|NSPrintPanelShowsPageRange|NSPrintPanelShowsPageSetupAccessory|NSPrintPanelShowsPreview|NSExecutableRuntimeMismatchError|NSExecutableNotLoadableError|NSExecutableErrorMinimum|NSExecutableErrorMaximum|NSExecutableLinkError|NSExecutableLoadError|NSExecutableArchitectureMismatchError|NSKeyValueObservingOptionInitial|NSKeyValueObservingOptionPrior|NSFindPanelSubstringMatchTypeStartsWith|NSFindPanelSubstringMatchTypeContains|NSFindPanelSubstringMatchTypeEndsWith|NSFindPanelSubstringMatchTypeFullWord|NSFileReadTooLargeError|NSFileReadUnknownStringEncodingError|NSForcedOrderingSearch|NSWindowBackingLocationMainMemory|NSWindowBackingLocationDefault|NSWindowBackingLocationVideoMemory|NSWindowSharingReadOnly|NSWindowSharingReadWrite|NSWindowSharingNone|NSWindowCollectionBehaviorMoveToActiveSpace|NSWindowCollectionBehaviorCanJoinAllSpaces|NSWindowCollectionBehaviorDefault|NSWidthInsensitiveSearch|NSAggregateExpressionType"
    };
    // regexp must not have capturing parentheses. Use (?:) instead.
    // regexps are ordered -> the first match is used

    var escapedConstRe = "\\\\(?:[abefnrtv'\"?\\\\]|" + 
                         "[0-3]\\d{1,2}|" +
                         "[4-7]\\d?|" +
                         "222|" +
                         "x[a-zA-Z0-9]+)";

    var specialVariables = [{
            regex: "\\b_cmd\\b",
            token: "variable.other.selector.objc"
        }, {
            regex: "\\b(?:self|super)\\b",
            token: "variable.language.objc"
        }
    ];

    var cObj = new CHighlightRules(NSKeywords);
    var cRules = cObj.getRules();
    this.$keywordList = cObj.$keywordList;

    this.$rules = {
    "start": [ 
        {
            token : "comment",
            regex : "\\/\\/.*$"
        },
        DocCommentHighlightRules.getStartRule("doc-start"),
        {
            token : "comment", // multi line comment
            regex : "\\/\\*",
            next : "comment"
        }, 
        {
            token: [ "storage.type.objc", "punctuation.definition.storage.type.objc", 
                       "entity.name.type.objc", "text", "entity.other.inherited-class.objc"
                     ],
            regex: "(@)(interface|protocol)(?!.+;)(\\s+[A-Za-z_][A-Za-z0-9_]*)(\\s*:\\s*)([A-Za-z]+)"
        },
        {
            token: [ "storage.type.objc" ],
            regex: "(@end)"
        },
        {
            token: [ "storage.type.objc", "entity.name.type.objc", 
                        "entity.other.inherited-class.objc"
                     ],
            regex: "(@implementation)(\\s+[A-Za-z_][A-Za-z0-9_]*)(\\s*?::\\s*(?:[A-Za-z][A-Za-z0-9]*))?"
        },
        {
            token: "string.begin.objc",
            regex: '@"',
            next: "constant_NSString"
        },
        {
            token: "storage.type.objc",
            regex: "\\bid\\s*<",
            next: "protocol_list"
        },
        {
            token: "keyword.control.macro.objc",
            regex: "\\bNS_DURING|NS_HANDLER|NS_ENDHANDLER\\b"
        },
        {
            token: ["punctuation.definition.keyword.objc", "keyword.control.exception.objc"],
            regex: "(@)(try|catch|finally|throw)\\b"
        },
        {
            token: ["punctuation.definition.keyword.objc", "keyword.other.objc"],
            regex: "(@)(defs|encode)\\b"
        },
        {
            token: ["storage.type.id.objc", "text"],
            regex: "(\\bid\\b)(\\s|\\n)?"
        },
        {
            token: "storage.type.objc",
            regex: "\\bIBOutlet|IBAction|BOOL|SEL|id|unichar|IMP|Class\\b"
        },
        {
            token: [ "punctuation.definition.storage.type.objc", "storage.type.objc"],
            regex: "(@)(class|protocol)\\b"
        },
        {
            token: [ "punctuation.definition.storage.type.objc", "punctuation"],
            regex: "(@selector)(\\s*\\()",
            next: "selectors"
        },
        {
            token: [ "punctuation.definition.storage.modifier.objc", "storage.modifier.objc"],
            regex: "(@)(synchronized|public|private|protected|package)\\b"
        },
        {
            token: "constant.language.objc",
            regex: "\\bYES|NO|Nil|nil\\b"
        },
        {
            token:  "support.variable.foundation",
            regex: "\\bNSApp\\b"
        },

        {
            token : cObj.getKeywords(),
            regex : "[a-zA-Z_$][a-zA-Z0-9_$]*\\b"
        },
        {
            token: "punctuation.section.scope.begin.objc",
            regex: "\\[",
            next: "bracketed_content"
        },
        {
            token: "meta.function.objc",
            regex: "^(?:-|\\+)\\s*"
        }
    ],
    "constant_NSString": [
        {
            token: "constant.character.escape.objc",
            regex: escapedConstRe
        },
        {
            token: "invalid.illegal.unknown-escape.objc",
            regex: "\\\\."
        },
        {
            token: "string",
            regex: '[^"\\\\]+'
        },
        {
            token: "punctuation.definition.string.end",
            regex: "\"",
            next: "start"
        }
    ],
    "protocol_list": [
        {
            token: "punctuation.section.scope.end.objc",
            regex: ">",
            next: "start"
        },
        {
            token: "support.other.protocol.objc",
            regex: "\bNS(?:GlyphStorage|M(?:utableCopying|enuItem)|C(?:hangeSpelling|o(?:ding|pying|lorPicking(?:Custom|Default)))|T(?:oolbarItemValidations|ext(?:Input|AttachmentCell))|I(?:nputServ(?:iceProvider|erMouseTracker)|gnoreMisspelledWords)|Obj(?:CTypeSerializationCallBack|ect)|D(?:ecimalNumberBehaviors|raggingInfo)|U(?:serInterfaceValidations|RL(?:HandleClient|DownloadDelegate|ProtocolClient|AuthenticationChallengeSender))|Validated(?:ToobarItem|UserInterfaceItem)|Locking)\b"
        }
    ],
    "selectors": [
        {
            token: "support.function.any-method.name-of-parameter.objc",
            regex: "\\b(?:[a-zA-Z_:][\\w]*)+"
        },
        {
            token: "punctuation",
            regex: "\\)",
            next: "start"
        }
    ],
    "bracketed_content": [
        {
            token: "punctuation.section.scope.end.objc",
            regex: "]",
            next: "start"
        },
        {
            token: ["support.function.any-method.objc"],
            regex: "(?:predicateWithFormat:| NSPredicate predicateWithFormat:)",
            next: "start"
        },
        {
            token: "support.function.any-method.objc",
            regex: "\\w+(?::|(?=]))",
            next: "start"
        }
    ],
    "bracketed_strings": [
        {
            token: "punctuation.section.scope.end.objc",
            regex: "]",
            next: "start"
        },
        {
            token: "keyword.operator.logical.predicate.cocoa",
            regex: "\\b(?:AND|OR|NOT|IN)\\b"
        },
        {
            token: ["invalid.illegal.unknown-method.objc", "punctuation.separator.arguments.objc"],
            regex: "\\b(\\w+)(:)"
        },
        {
            regex: "\\b(?:ALL|ANY|SOME|NONE)\\b",
            token: "constant.language.predicate.cocoa"
        },
        {
            regex: "\\b(?:NULL|NIL|SELF|TRUE|YES|FALSE|NO|FIRST|LAST|SIZE)\\b",
            token: "constant.language.predicate.cocoa"
        },
        {
            regex: "\\b(?:MATCHES|CONTAINS|BEGINSWITH|ENDSWITH|BETWEEN)\\b",
            token: "keyword.operator.comparison.predicate.cocoa"
        },
        {
            regex: "\\bC(?:ASEINSENSITIVE|I)\\b",
            token: "keyword.other.modifier.predicate.cocoa"
        },
        {
            regex: "\\b(?:ANYKEY|SUBQUERY|CAST|TRUEPREDICATE|FALSEPREDICATE)\\b",
            token: "keyword.other.predicate.cocoa"
        },
        {
            regex: escapedConstRe,
            token: "constant.character.escape.objc"
        },
        {
            regex: "\\\\.",
            token: "invalid.illegal.unknown-escape.objc"
        },
        {
            token: "string",
            regex: '[^"\\\\]'
        },
        {
            token: "punctuation.definition.string.end.objc",
            regex: "\"",
            next: "predicates"
        }
    ],
    "comment" : [
        {
            token : "comment", // closing comment
            regex : ".*?\\*\\/",
            next : "start"
        }, {
            defaultToken : "comment"
        }
    ],
    "methods" : [
        {
            token : "meta.function.objc",
            regex : "(?=\\{|#)|;",
            next : "start"
        }
    ]
};

    // copy in C-Rules directly
    for (var r in cRules) {
        if (this.$rules[r]) {
            if (this.$rules[r].push)
                this.$rules[r].push.apply(this.$rules[r], cRules[r]);
        } else {
            this.$rules[r] = cRules[r];
        }
    }
    
    this.$rules.bracketed_content = this.$rules.bracketed_content.concat(
        this.$rules.start, specialVariables
    );

    this.embedRules(DocCommentHighlightRules, "doc-",
        [ DocCommentHighlightRules.getEndRule("start") ]);
};

oop.inherits(ObjectiveCHighlightRules, CHighlightRules);

exports.C = ObjectiveCHighlightRules;


/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnVuZGxlLjk4ODYuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFhOztBQUViLFVBQVUsbUJBQU8sQ0FBQyxLQUFZO0FBQzlCLCtCQUErQiw4REFBaUU7QUFDaEcseUJBQXlCLHdEQUFvRDs7QUFFN0U7QUFDQSxpQkFBaUIseUJBQWtCOztBQUVuQzs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBLDhDQUE4QyxJQUFJLGFBQWEsRUFBRSxhQUFhLEVBQUUsWUFBWSxFQUFFO0FBQzlGO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQSwrREFBK0Q7QUFDL0Q7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCLG9EQUFvRDtBQUMxRSxzQkFBc0Isb0RBQW9EO0FBQzFFLHNCQUFzQixvREFBb0Q7QUFDMUUsc0JBQXNCLGtEQUFrRDtBQUN4RSxzQkFBc0I7QUFDdEI7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQkFBc0IsbURBQW1EO0FBQ3pFLHNCQUFzQjtBQUN0QjtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0Esc0NBQXNDO0FBQ3RDLGFBQWE7QUFDYjtBQUNBLDZCQUE2QjtBQUM3QixhQUFhO0FBQ2I7QUFDQSwrQkFBK0I7QUFDL0IsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQSxTQUEyQjs7Ozs7Ozs7QUNsTWQ7O0FBRWIsVUFBVSxtQkFBTyxDQUFDLEtBQVk7QUFDOUIseUJBQXlCLHdEQUFvRDs7QUFFN0U7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBLFNBQWdDOzs7Ozs7OztBQzdDbkI7O0FBRWIsVUFBVSxtQkFBTyxDQUFDLEtBQWU7QUFDakMsWUFBWSwyQ0FBNEI7QUFDeEMsbUJBQW1CLHFDQUErQjs7QUFFbEQsZUFBZSxTQUFnQjtBQUMvQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsbUNBQW1DLFVBQVU7QUFDN0MscUNBQXFDLFFBQVE7QUFDN0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNEJBQTRCO0FBQzVCO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLENBQUM7Ozs7Ozs7O0FDOUpEO0FBQ0E7QUFDQTs7QUFFYTs7QUFFYixVQUFVLG1CQUFPLENBQUMsS0FBWTtBQUM5QixlQUFlLGlDQUFzQjtBQUNyQywrQkFBK0IsOERBQWdFO0FBQy9GLHFCQUFxQiw4Q0FBb0M7O0FBRXpEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EseUJBQXlCO0FBQ3pCO0FBQ0EsQ0FBQzs7QUFFRCxZQUFZOzs7Ozs7OztBQ3hCQzs7QUFFYixVQUFVLG1CQUFPLENBQUMsS0FBWTtBQUM5QiwrQkFBK0IsOERBQWlFO0FBQ2hHLHNCQUFzQix5REFBc0Q7O0FBRTVFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxtQ0FBbUMsSUFBSTtBQUN2QztBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpREFBaUQ7QUFDakQsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0EsU0FBUzs7QUFFVDtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJCQUEyQixLQUFLO0FBQ2hDO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBLFNBQWdDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYWNlLWxpbnRlcnMtcm9vdC8uL25vZGVfbW9kdWxlcy9hY2UtY29kZS9zcmMvbW9kZS9jX2NwcF9oaWdobGlnaHRfcnVsZXMuanMiLCJ3ZWJwYWNrOi8vYWNlLWxpbnRlcnMtcm9vdC8uL25vZGVfbW9kdWxlcy9hY2UtY29kZS9zcmMvbW9kZS9kb2NfY29tbWVudF9oaWdobGlnaHRfcnVsZXMuanMiLCJ3ZWJwYWNrOi8vYWNlLWxpbnRlcnMtcm9vdC8uL25vZGVfbW9kdWxlcy9hY2UtY29kZS9zcmMvbW9kZS9mb2xkaW5nL2NzdHlsZS5qcyIsIndlYnBhY2s6Ly9hY2UtbGludGVycy1yb290Ly4vbm9kZV9tb2R1bGVzL2FjZS1jb2RlL3NyYy9tb2RlL29iamVjdGl2ZWMuanMiLCJ3ZWJwYWNrOi8vYWNlLWxpbnRlcnMtcm9vdC8uL25vZGVfbW9kdWxlcy9hY2UtY29kZS9zcmMvbW9kZS9vYmplY3RpdmVjX2hpZ2hsaWdodF9ydWxlcy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxudmFyIG9vcCA9IHJlcXVpcmUoXCIuLi9saWIvb29wXCIpO1xudmFyIERvY0NvbW1lbnRIaWdobGlnaHRSdWxlcyA9IHJlcXVpcmUoXCIuL2RvY19jb21tZW50X2hpZ2hsaWdodF9ydWxlc1wiKS5Eb2NDb21tZW50SGlnaGxpZ2h0UnVsZXM7XG52YXIgVGV4dEhpZ2hsaWdodFJ1bGVzID0gcmVxdWlyZShcIi4vdGV4dF9oaWdobGlnaHRfcnVsZXNcIikuVGV4dEhpZ2hsaWdodFJ1bGVzO1xuXG4vLyB1c2VkIGJ5IG9iamVjdGl2ZS1jXG52YXIgY0Z1bmN0aW9ucyA9IGV4cG9ydHMuY0Z1bmN0aW9ucyA9IFwiaHlwb3R8aHlwb3RmfGh5cG90bHxzc2NhbmZ8c3lzdGVtfHNucHJpbnRmfHNjYW5mfHNjYWxibnxzY2FsYm5mfHNjYWxibmx8c2NhbGJsbnxzY2FsYmxuZnxzY2FsYmxubHxzaW58c2luaHxzaW5oZnxzaW5obHxzaW5mfHNpbmx8c2lnbmFsfHNpZ25iaXR8c3Ryc3RyfHN0cnNwbnxzdHJuY3B5fHN0cm5jYXR8c3RybmNtcHxzdHJjc3BufHN0cmNocnxzdHJjb2xsfHN0cmNweXxzdHJjYXR8c3RyY21wfHN0cnRvaW1heHxzdHJ0b2R8c3RydG91bHxzdHJ0b3VsbHxzdHJ0b3VtYXh8c3RydG9rfHN0cnRvZnxzdHJ0b2x8c3RydG9sZHxzdHJ0b2xsfHN0cmVycm9yfHN0cnBicmt8c3RyZnRpbWV8c3RybGVufHN0cnJjaHJ8c3RyeGZybXxzcHJpbnRmfHNldGptcHxzZXR2YnVmfHNldGxvY2FsZXxzZXRidWZ8c3FydHxzcXJ0ZnxzcXJ0bHxzd3NjYW5mfHN3cHJpbnRmfHNyYW5kfG5lYXJieWludHxuZWFyYnlpbnRmfG5lYXJieWludGx8bmV4dHRvd2FyZHxuZXh0dG93YXJkZnxuZXh0dG93YXJkbHxuZXh0YWZ0ZXJ8bmV4dGFmdGVyZnxuZXh0YWZ0ZXJsfG5hbnxuYW5mfG5hbmx8Y3Npbnxjc2luaHxjc2luaGZ8Y3NpbmhsfGNzaW5mfGNzaW5sfGNzcXJ0fGNzcXJ0Znxjc3FydGx8Y2Nvc3xjY29zaHxjY29zaGZ8Y2Nvc2Z8Y2Nvc2x8Y2ltYWd8Y2ltYWdmfGNpbWFnbHxjdGltZXxjdGFufGN0YW5ofGN0YW5oZnxjdGFuaGx8Y3RhbmZ8Y3Rhbmx8Y29zfGNvc2h8Y29zaGZ8Y29zaGx8Y29zZnxjb3NsfGNvbmp8Y29uamZ8Y29uamx8Y29weXNpZ258Y29weXNpZ25mfGNvcHlzaWdubHxjcG93fGNwb3dmfGNwb3dsfGNwcm9qfGNwcm9qZnxjcHJvamx8Y2VpbHxjZWlsZnxjZWlsbHxjZXhwfGNleHBmfGNleHBsfGNsb2NrfGNsb2d8Y2xvZ2Z8Y2xvZ2x8Y2xlYXJlcnJ8Y2FzaW58Y2FzaW5ofGNhc2luaGZ8Y2FzaW5obHxjYXNpbmZ8Y2FzaW5sfGNhY29zfGNhY29zaHxjYWNvc2hmfGNhY29zaGx8Y2Fjb3NmfGNhY29zbHxjYXRhbnxjYXRhbmh8Y2F0YW5oZnxjYXRhbmhsfGNhdGFuZnxjYXRhbmx8Y2FsbG9jfGNhcmd8Y2FyZ2Z8Y2FyZ2x8Y2Fic3xjYWJzZnxjYWJzbHxjcmVhbHxjcmVhbGZ8Y3JlYWxsfGNicnR8Y2JydGZ8Y2JydGx8dGltZXx0b3VwcGVyfHRvbG93ZXJ8dGFufHRhbmh8dGFuaGZ8dGFuaGx8dGFuZnx0YW5sfHRydW5jfHRydW5jZnx0cnVuY2x8dGdhbW1hfHRnYW1tYWZ8dGdhbW1hbHx0bXBuYW18dG1wZmlsZXxpc3NwYWNlfGlzbm9ybWFsfGlzbmFufGlzY250cmx8aXNpbmZ8aXNkaWdpdHxpc3Vub3JkZXJlZHxpc3VwcGVyfGlzcHVuY3R8aXNwcmludHxpc2Zpbml0ZXxpc3dzcGFjZXxpc3djbnRybHxpc3djdHlwZXxpc3dkaWdpdHxpc3d1cHBlcnxpc3dwdW5jdHxpc3dwcmludHxpc3dsb3dlcnxpc3dhbG51bXxpc3dhbHBoYXxpc3dncmFwaHxpc3d4ZGlnaXR8aXN3Ymxhbmt8aXNsb3dlcnxpc2xlc3N8aXNsZXNzZXF1YWx8aXNsZXNzZ3JlYXRlcnxpc2FsbnVtfGlzYWxwaGF8aXNncmVhdGVyfGlzZ3JlYXRlcmVxdWFsfGlzZ3JhcGh8aXN4ZGlnaXR8aXNibGFua3xpbG9nYnxpbG9nYmZ8aWxvZ2JsfGltYXhkaXZ8aW1heGFic3xkaXZ8ZGlmZnRpbWV8X0V4aXR8dW5nZXRjfHVuZ2V0d2N8cG93fHBvd2Z8cG93bHxwdXRzfHB1dGN8cHV0Y2hhcnxwdXR3Y3xwdXR3Y2hhcnxwZXJyb3J8cHJpbnRmfGVyZnxlcmZjfGVyZmNmfGVyZmNsfGVyZmZ8ZXJmbHxleGl0fGV4cHxleHAyfGV4cDJmfGV4cDJsfGV4cGZ8ZXhwbHxleHBtMXxleHBtMWZ8ZXhwbTFsfHZzc2NhbmZ8dnNucHJpbnRmfHZzY2FuZnx2c3ByaW50Znx2c3dzY2FuZnx2c3dwcmludGZ8dnByaW50Znx2ZnNjYW5mfHZmcHJpbnRmfHZmd3NjYW5mfHZmd3ByaW50Znx2d3NjYW5mfHZ3cHJpbnRmfHZhX3N0YXJ0fHZhX2NvcHl8dmFfZW5kfHZhX2FyZ3xxc29ydHxmc2NhbmZ8ZnNldHBvc3xmc2Vla3xmY2xvc2V8ZnRlbGx8Zm9wZW58ZmRpbXxmZGltZnxmZGltbHxmcGNsYXNzaWZ5fGZwdXRzfGZwdXRjfGZwdXR3c3xmcHV0d2N8ZnByaW50ZnxmZWhvbGRleGNlcHR8ZmVzZXRlbnZ8ZmVzZXRleGNlcHRmbGFnfGZlc2V0cm91bmR8ZmVjbGVhcmV4Y2VwdHxmZXRlc3RleGNlcHR8ZmVvZnxmZXVwZGF0ZWVudnxmZXJhaXNlZXhjZXB0fGZlcnJvcnxmZWdldGVudnxmZWdldGV4Y2VwdGZsYWd8ZmVnZXRyb3VuZHxmZmx1c2h8ZndzY2FuZnxmd2lkZXxmd3ByaW50Znxmd3JpdGV8Zmxvb3J8Zmxvb3JmfGZsb29ybHxmYWJzfGZhYnNmfGZhYnNsfGZnZXRzfGZnZXRjfGZnZXRwb3N8ZmdldHdzfGZnZXR3Y3xmcmVvcGVufGZyZWV8ZnJlYWR8ZnJleHB8ZnJleHBmfGZyZXhwbHxmbWlufGZtaW5mfGZtaW5sfGZtb2R8Zm1vZGZ8Zm1vZGx8Zm1hfGZtYWZ8Zm1hbHxmbWF4fGZtYXhmfGZtYXhsfGxkaXZ8bGRleHB8bGRleHBmfGxkZXhwbHxsb25nam1wfGxvY2FsdGltZXxsb2NhbGVjb252fGxvZ3xsb2cxcHxsb2cxcGZ8bG9nMXBsfGxvZzEwfGxvZzEwZnxsb2cxMGx8bG9nMnxsb2cyZnxsb2cybHxsb2dmfGxvZ2x8bG9nYnxsb2diZnxsb2dibHxsYWJzfGxsZGl2fGxsYWJzfGxscmludHxsbHJpbnRmfGxscmludGx8bGxyb3VuZHxsbHJvdW5kZnxsbHJvdW5kbHxscmludHxscmludGZ8bHJpbnRsfGxyb3VuZHxscm91bmRmfGxyb3VuZGx8bGdhbW1hfGxnYW1tYWZ8bGdhbW1hbHx3c2NhbmZ8d2Nzc3RyfHdjc3Nwbnx3Y3NuY3B5fHdjc25jYXR8d2NzbmNtcHx3Y3Njc3BufHdjc2Nocnx3Y3Njb2xsfHdjc2NweXx3Y3NjYXR8d2NzY21wfHdjc3RvaW1heHx3Y3N0b2R8d2NzdG91bHx3Y3N0b3VsbHx3Y3N0b3VtYXh8d2NzdG9rfHdjc3RvZnx3Y3N0b2x8d2NzdG9sZHx3Y3N0b2xsfHdjc3RvbWJzfHdjc3Bicmt8d2NzZnRpbWV8d2NzbGVufHdjc3JjaHJ8d2NzcnRvbWJzfHdjc3hmcm18d2N0b2J8d2N0b21ifHdjcnRvbWJ8d3ByaW50Znx3bWVtc2V0fHdtZW1jaHJ8d21lbWNweXx3bWVtY21wfHdtZW1tb3ZlfGFzc2VydHxhc2N0aW1lfGFzaW58YXNpbmh8YXNpbmhmfGFzaW5obHxhc2luZnxhc2lubHxhY29zfGFjb3NofGFjb3NoZnxhY29zaGx8YWNvc2Z8YWNvc2x8YXRvaXxhdG9mfGF0b2x8YXRvbGx8YXRleGl0fGF0YW58YXRhbmh8YXRhbmhmfGF0YW5obHxhdGFuMnxhdGFuMmZ8YXRhbjJsfGF0YW5mfGF0YW5sfGFic3xhYm9ydHxnZXRzfGdldGN8Z2V0Y2hhcnxnZXRlbnZ8Z2V0d2N8Z2V0d2NoYXJ8Z210aW1lfHJpbnR8cmludGZ8cmludGx8cm91bmR8cm91bmRmfHJvdW5kbHxyZW5hbWV8cmVhbGxvY3xyZXdpbmR8cmVtb3ZlfHJlbXF1b3xyZW1xdW9mfHJlbXF1b2x8cmVtYWluZGVyfHJlbWFpbmRlcmZ8cmVtYWluZGVybHxyYW5kfHJhaXNlfGJzZWFyY2h8YnRvd2N8bW9kZnxtb2RmZnxtb2RmbHxtZW1zZXR8bWVtY2hyfG1lbWNweXxtZW1jbXB8bWVtbW92ZXxta3RpbWV8bWFsbG9jfG1ic2luaXR8bWJzdG93Y3N8bWJzcnRvd2NzfG1idG93Y3xtYmxlbnxtYnJ0b3djfG1icmxlblwiO1xuXG52YXIgY19jcHBIaWdobGlnaHRSdWxlcyA9IGZ1bmN0aW9uKGV4dHJhS2V5d29yZHMpIHtcblxuICAgIHZhciBrZXl3b3JkQ29udHJvbHMgPSAoXG4gICAgICAgIFwiYnJlYWt8Y2FzZXxjb250aW51ZXxkZWZhdWx0fGRvfGVsc2V8Zm9yfGdvdG98aWZ8X1ByYWdtYXxcIiArXG4gICAgICAgIFwicmV0dXJufHN3aXRjaHx3aGlsZXxjYXRjaHxvcGVyYXRvcnx0cnl8dGhyb3d8dXNpbmdcIlxuICAgICk7XG4gICAgXG4gICAgdmFyIHN0b3JhZ2VUeXBlID0gKFxuICAgICAgICBcImFzbXxfX2FzbV9ffGF1dG98Ym9vbHxfQm9vbHxjaGFyfF9Db21wbGV4fGRvdWJsZXxlbnVtfGZsb2F0fFwiICtcbiAgICAgICAgXCJfSW1hZ2luYXJ5fGludHxpbnQ4X3R8aW50MTZfdHxpbnQzMl90fGludDY0X3R8bG9uZ3xzaG9ydHxzaWduZWR8c2l6ZV90fHN0cnVjdHx0eXBlZGVmfHVpbnQ4X3R8dWludDE2X3R8dWludDMyX3R8dWludDY0X3R8dW5pb258dW5zaWduZWR8dm9pZHxcIiArXG4gICAgICAgIFwiY2xhc3N8d2NoYXJfdHx0ZW1wbGF0ZXxjaGFyMTZfdHxjaGFyMzJfdFwiXG4gICAgKTtcblxuICAgIHZhciBzdG9yYWdlTW9kaWZpZXJzID0gKFxuICAgICAgICBcImNvbnN0fGV4dGVybnxyZWdpc3RlcnxyZXN0cmljdHxzdGF0aWN8dm9sYXRpbGV8aW5saW5lfHByaXZhdGV8XCIgK1xuICAgICAgICBcInByb3RlY3RlZHxwdWJsaWN8ZnJpZW5kfGV4cGxpY2l0fHZpcnR1YWx8ZXhwb3J0fG11dGFibGV8dHlwZW5hbWV8XCIgK1xuICAgICAgICBcImNvbnN0ZXhwcnxuZXd8ZGVsZXRlfGFsaWduYXN8YWxpZ25vZnxkZWNsdHlwZXxub2V4Y2VwdHx0aHJlYWRfbG9jYWxcIlxuICAgICk7XG5cbiAgICB2YXIga2V5d29yZE9wZXJhdG9ycyA9IChcbiAgICAgICAgXCJhbmR8YW5kX2VxfGJpdGFuZHxiaXRvcnxjb21wbHxub3R8bm90X2VxfG9yfG9yX2VxfHR5cGVpZHx4b3J8eG9yX2VxfFwiICtcbiAgICAgICAgXCJjb25zdF9jYXN0fGR5bmFtaWNfY2FzdHxyZWludGVycHJldF9jYXN0fHN0YXRpY19jYXN0fHNpemVvZnxuYW1lc3BhY2VcIlxuICAgICk7XG5cbiAgICB2YXIgYnVpbHRpbkNvbnN0YW50cyA9IChcbiAgICAgICAgXCJOVUxMfHRydWV8ZmFsc2V8VFJVRXxGQUxTRXxudWxscHRyXCJcbiAgICApO1xuXG4gICAgdmFyIGtleXdvcmRNYXBwZXIgPSB0aGlzLiRrZXl3b3JkcyA9IHRoaXMuY3JlYXRlS2V5d29yZE1hcHBlcihPYmplY3QuYXNzaWduKHtcbiAgICAgICAgXCJrZXl3b3JkLmNvbnRyb2xcIiA6IGtleXdvcmRDb250cm9scyxcbiAgICAgICAgXCJzdG9yYWdlLnR5cGVcIiA6IHN0b3JhZ2VUeXBlLFxuICAgICAgICBcInN0b3JhZ2UubW9kaWZpZXJcIiA6IHN0b3JhZ2VNb2RpZmllcnMsXG4gICAgICAgIFwia2V5d29yZC5vcGVyYXRvclwiIDoga2V5d29yZE9wZXJhdG9ycyxcbiAgICAgICAgXCJ2YXJpYWJsZS5sYW5ndWFnZVwiOiBcInRoaXNcIixcbiAgICAgICAgXCJjb25zdGFudC5sYW5ndWFnZVwiOiBidWlsdGluQ29uc3RhbnRzLFxuICAgICAgICBcInN1cHBvcnQuZnVuY3Rpb24uQzk5LmNcIjogY0Z1bmN0aW9uc1xuICAgIH0sIGV4dHJhS2V5d29yZHMpLCBcImlkZW50aWZpZXJcIik7XG5cbiAgICB2YXIgaWRlbnRpZmllclJlID0gXCJbYS16QS1aXFxcXCRfXFx1MDBhMS1cXHVmZmZmXVthLXpBLVpcXFxcZFxcXFwkX1xcdTAwYTEtXFx1ZmZmZl0qXFxcXGJcIjtcbiAgICB2YXIgZXNjYXBlUmUgPSAvXFxcXCg/OlsnXCI/XFxcXGFiZm5ydHZdfFswLTddezEsM318eFthLWZBLUZcXGRdezJ9fHVbYS1mQS1GXFxkXXs0fVVbYS1mQS1GXFxkXXs4fXwuKS8uc291cmNlO1xuICAgIHZhciBmb3JtYXRSZSA9IFwiJVwiXG4gICAgICAgICAgKyAvKFxcZCtcXCQpPy8uc291cmNlIC8vIGZpZWxkIChhcmd1bWVudCAjKVxuICAgICAgICAgICsgL1sjMFxcLSArJ10qLy5zb3VyY2UgLy8gZmxhZ3NcbiAgICAgICAgICArIC9bLDs6X10/Ly5zb3VyY2UgLy8gc2VwYXJhdG9yIGNoYXJhY3RlciAoQWx0aVZlYylcbiAgICAgICAgICArIC8oKC0/XFxkKyl8XFwqKC0/XFxkK1xcJCk/KT8vLnNvdXJjZSAvLyBtaW5pbXVtIGZpZWxkIHdpZHRoXG4gICAgICAgICAgKyAvKFxcLigoLT9cXGQrKXxcXCooLT9cXGQrXFwkKT8pPyk/Ly5zb3VyY2UgLy8gcHJlY2lzaW9uXG4gICAgICAgICAgKyAvKGhofGh8bGx8bHxqfHR8enxxfEx8dmh8dmx8dnxodnxobCk/Ly5zb3VyY2UgLy8gbGVuZ3RoIG1vZGlmaWVyXG4gICAgICAgICAgKyAvKFxcW1teXCJcXF1dK1xcXXxbZGlvdXhYRE9VZUVmRmdHYUFDY1NzcG4lXSkvLnNvdXJjZTsgLy8gY29udmVyc2lvbiB0eXBlXG4gICAgICAgICAgXG4gICAgLy8gcmVnZXhwIG11c3Qgbm90IGhhdmUgY2FwdHVyaW5nIHBhcmVudGhlc2VzLiBVc2UgKD86KSBpbnN0ZWFkLlxuICAgIC8vIHJlZ2V4cHMgYXJlIG9yZGVyZWQgLT4gdGhlIGZpcnN0IG1hdGNoIGlzIHVzZWRcblxuICAgIHRoaXMuJHJ1bGVzID0geyBcbiAgICAgICAgXCJzdGFydFwiIDogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHRva2VuIDogXCJjb21tZW50XCIsXG4gICAgICAgICAgICAgICAgcmVnZXggOiBcIi8vJFwiLFxuICAgICAgICAgICAgICAgIG5leHQgOiBcInN0YXJ0XCJcbiAgICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICAgICB0b2tlbiA6IFwiY29tbWVudFwiLFxuICAgICAgICAgICAgICAgIHJlZ2V4IDogXCIvL1wiLFxuICAgICAgICAgICAgICAgIG5leHQgOiBcInNpbmdsZUxpbmVDb21tZW50XCJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBEb2NDb21tZW50SGlnaGxpZ2h0UnVsZXMuZ2V0U3RhcnRSdWxlKFwiZG9jLXN0YXJ0XCIpLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHRva2VuIDogXCJjb21tZW50XCIsIC8vIG11bHRpIGxpbmUgY29tbWVudFxuICAgICAgICAgICAgICAgIHJlZ2V4IDogXCJcXFxcL1xcXFwqXCIsXG4gICAgICAgICAgICAgICAgbmV4dCA6IFwiY29tbWVudFwiXG4gICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgICAgdG9rZW4gOiBcInN0cmluZ1wiLCAvLyBjaGFyYWN0ZXJcbiAgICAgICAgICAgICAgICByZWdleCA6IFwiJyg/OlwiICsgZXNjYXBlUmUgKyBcInwuKT8nXCJcbiAgICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICAgICB0b2tlbiA6IFwic3RyaW5nLnN0YXJ0XCIsXG4gICAgICAgICAgICAgICAgcmVnZXggOiAnXCInLCBcbiAgICAgICAgICAgICAgICBzdGF0ZU5hbWU6IFwicXFzdHJpbmdcIixcbiAgICAgICAgICAgICAgICBuZXh0OiBbXG4gICAgICAgICAgICAgICAgICAgIHsgdG9rZW46IFwic3RyaW5nXCIsIHJlZ2V4OiAvXFxcXFxccyokLywgbmV4dDogXCJxcXN0cmluZ1wiIH0sXG4gICAgICAgICAgICAgICAgICAgIHsgdG9rZW46IFwiY29uc3RhbnQubGFuZ3VhZ2UuZXNjYXBlXCIsIHJlZ2V4OiBlc2NhcGVSZSB9LFxuICAgICAgICAgICAgICAgICAgICB7IHRva2VuOiBcImNvbnN0YW50Lmxhbmd1YWdlLmVzY2FwZVwiLCByZWdleDogZm9ybWF0UmUgfSxcbiAgICAgICAgICAgICAgICAgICAgeyB0b2tlbjogXCJzdHJpbmcuZW5kXCIsIHJlZ2V4OiAnXCJ8JCcsIG5leHQ6IFwic3RhcnRcIiB9LFxuICAgICAgICAgICAgICAgICAgICB7IGRlZmF1bHRUb2tlbjogXCJzdHJpbmdcIn1cbiAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgICAgdG9rZW4gOiBcInN0cmluZy5zdGFydFwiLFxuICAgICAgICAgICAgICAgIHJlZ2V4IDogJ1JcIlxcXFwoJywgXG4gICAgICAgICAgICAgICAgc3RhdGVOYW1lOiBcInJhd1N0cmluZ1wiLFxuICAgICAgICAgICAgICAgIG5leHQ6IFtcbiAgICAgICAgICAgICAgICAgICAgeyB0b2tlbjogXCJzdHJpbmcuZW5kXCIsIHJlZ2V4OiAnXFxcXClcIicsIG5leHQ6IFwic3RhcnRcIiB9LFxuICAgICAgICAgICAgICAgICAgICB7IGRlZmF1bHRUb2tlbjogXCJzdHJpbmdcIn1cbiAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgICAgdG9rZW4gOiBcImNvbnN0YW50Lm51bWVyaWNcIiwgLy8gaGV4XG4gICAgICAgICAgICAgICAgcmVnZXggOiBcIjBbeFhdWzAtOWEtZkEtRl0rKEx8bHxVTHx1bHx1fFV8RnxmfGxsfExMfHVsbHxVTEwpP1xcXFxiXCJcbiAgICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICAgICB0b2tlbiA6IFwiY29uc3RhbnQubnVtZXJpY1wiLCAvLyBmbG9hdFxuICAgICAgICAgICAgICAgIHJlZ2V4IDogXCJbKy1dP1xcXFxkKyg/Oig/OlxcXFwuXFxcXGQqKT8oPzpbZUVdWystXT9cXFxcZCspPyk/KEx8bHxVTHx1bHx1fFV8RnxmfGxsfExMfHVsbHxVTEwpP1xcXFxiXCJcbiAgICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICAgICB0b2tlbiA6IFwia2V5d29yZFwiLCAvLyBwcmUtY29tcGlsZXIgZGlyZWN0aXZlc1xuICAgICAgICAgICAgICAgIHJlZ2V4IDogXCIjXFxcXHMqKD86aW5jbHVkZXxpbXBvcnR8cHJhZ21hfGxpbmV8ZGVmaW5lfHVuZGVmKVxcXFxiXCIsXG4gICAgICAgICAgICAgICAgbmV4dCAgOiBcImRpcmVjdGl2ZVwiXG4gICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgICAgdG9rZW4gOiBcImtleXdvcmRcIiwgLy8gc3BlY2lhbCBjYXNlIHByZS1jb21waWxlciBkaXJlY3RpdmVcbiAgICAgICAgICAgICAgICByZWdleCA6IFwiI1xcXFxzKig/OmVuZGlmfGlmfGlmZGVmfGVsc2V8ZWxpZnxpZm5kZWYpXFxcXGJcIlxuICAgICAgICAgICAgfSwge1xuICAgICAgICAgICAgICAgIHRva2VuIDoga2V5d29yZE1hcHBlcixcbiAgICAgICAgICAgICAgICByZWdleCA6IFwiW2EtekEtWl8kXVthLXpBLVowLTlfJF0qXCJcbiAgICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICAgICB0b2tlbiA6IFwia2V5d29yZC5vcGVyYXRvclwiLFxuICAgICAgICAgICAgICAgIHJlZ2V4IDogLy0tfFxcK1xcK3w8PD18Pj49fD4+Pj18PD58JiZ8XFx8XFx8fFxcPzp8WyolXFwvK1xcLSZcXF58fiE8Pj1dPT8vXG4gICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgIHRva2VuIDogXCJwdW5jdHVhdGlvbi5vcGVyYXRvclwiLFxuICAgICAgICAgICAgICByZWdleCA6IFwiXFxcXD98XFxcXDp8XFxcXCx8XFxcXDt8XFxcXC5cIlxuICAgICAgICAgICAgfSwge1xuICAgICAgICAgICAgICAgIHRva2VuIDogXCJwYXJlbi5scGFyZW5cIixcbiAgICAgICAgICAgICAgICByZWdleCA6IFwiW1soe11cIlxuICAgICAgICAgICAgfSwge1xuICAgICAgICAgICAgICAgIHRva2VuIDogXCJwYXJlbi5ycGFyZW5cIixcbiAgICAgICAgICAgICAgICByZWdleCA6IFwiW1xcXFxdKX1dXCJcbiAgICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICAgICB0b2tlbiA6IFwidGV4dFwiLFxuICAgICAgICAgICAgICAgIHJlZ2V4IDogXCJcXFxccytcIlxuICAgICAgICAgICAgfVxuICAgICAgICBdLFxuICAgICAgICBcImNvbW1lbnRcIiA6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB0b2tlbiA6IFwiY29tbWVudFwiLCAvLyBjbG9zaW5nIGNvbW1lbnRcbiAgICAgICAgICAgICAgICByZWdleCA6IFwiXFxcXCpcXFxcL1wiLFxuICAgICAgICAgICAgICAgIG5leHQgOiBcInN0YXJ0XCJcbiAgICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICAgICBkZWZhdWx0VG9rZW4gOiBcImNvbW1lbnRcIlxuICAgICAgICAgICAgfVxuICAgICAgICBdLFxuICAgICAgICBcInNpbmdsZUxpbmVDb21tZW50XCIgOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgdG9rZW4gOiBcImNvbW1lbnRcIixcbiAgICAgICAgICAgICAgICByZWdleCA6IC9cXFxcJC8sXG4gICAgICAgICAgICAgICAgbmV4dCA6IFwic2luZ2xlTGluZUNvbW1lbnRcIlxuICAgICAgICAgICAgfSwge1xuICAgICAgICAgICAgICAgIHRva2VuIDogXCJjb21tZW50XCIsXG4gICAgICAgICAgICAgICAgcmVnZXggOiAvJC8sXG4gICAgICAgICAgICAgICAgbmV4dCA6IFwic3RhcnRcIlxuICAgICAgICAgICAgfSwge1xuICAgICAgICAgICAgICAgIGRlZmF1bHRUb2tlbjogXCJjb21tZW50XCJcbiAgICAgICAgICAgIH1cbiAgICAgICAgXSxcbiAgICAgICAgXCJkaXJlY3RpdmVcIiA6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB0b2tlbiA6IFwiY29uc3RhbnQub3RoZXIubXVsdGlsaW5lXCIsXG4gICAgICAgICAgICAgICAgcmVnZXggOiAvXFxcXC9cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgdG9rZW4gOiBcImNvbnN0YW50Lm90aGVyLm11bHRpbGluZVwiLFxuICAgICAgICAgICAgICAgIHJlZ2V4IDogLy4qXFxcXC9cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgdG9rZW4gOiBcImNvbnN0YW50Lm90aGVyXCIsXG4gICAgICAgICAgICAgICAgcmVnZXggOiBcIlxcXFxzKjwuKz8+XCIsXG4gICAgICAgICAgICAgICAgbmV4dCA6IFwic3RhcnRcIlxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB0b2tlbiA6IFwiY29uc3RhbnQub3RoZXJcIiwgLy8gc2luZ2xlIGxpbmVcbiAgICAgICAgICAgICAgICByZWdleCA6ICdcXFxccypbXCJdKD86KD86XFxcXFxcXFwuKXwoPzpbXlwiXFxcXFxcXFxdKSkqP1tcIl0nLFxuICAgICAgICAgICAgICAgIG5leHQgOiBcInN0YXJ0XCJcbiAgICAgICAgICAgIH0sIFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHRva2VuIDogXCJjb25zdGFudC5vdGhlclwiLCAvLyBzaW5nbGUgbGluZVxuICAgICAgICAgICAgICAgIHJlZ2V4IDogXCJcXFxccypbJ10oPzooPzpcXFxcXFxcXC4pfCg/OlteJ1xcXFxcXFxcXSkpKj9bJ11cIixcbiAgICAgICAgICAgICAgICBuZXh0IDogXCJzdGFydFwiXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgLy8gXCJcXFwiIGltcGxpZXMgbXVsdGlsaW5lLCB3aGlsZSBcIi9cIiBpbXBsaWVzIGNvbW1lbnRcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB0b2tlbiA6IFwiY29uc3RhbnQub3RoZXJcIixcbiAgICAgICAgICAgICAgICByZWdleCA6IC9bXlxcXFxcXC9dKy8sXG4gICAgICAgICAgICAgICAgbmV4dCA6IFwic3RhcnRcIlxuICAgICAgICAgICAgfVxuICAgICAgICBdXG4gICAgfTtcblxuICAgIHRoaXMuZW1iZWRSdWxlcyhEb2NDb21tZW50SGlnaGxpZ2h0UnVsZXMsIFwiZG9jLVwiLFxuICAgICAgICBbIERvY0NvbW1lbnRIaWdobGlnaHRSdWxlcy5nZXRFbmRSdWxlKFwic3RhcnRcIikgXSk7XG4gICAgdGhpcy5ub3JtYWxpemVSdWxlcygpO1xufTtcblxub29wLmluaGVyaXRzKGNfY3BwSGlnaGxpZ2h0UnVsZXMsIFRleHRIaWdobGlnaHRSdWxlcyk7XG5cbmV4cG9ydHMuY19jcHBIaWdobGlnaHRSdWxlcyA9IGNfY3BwSGlnaGxpZ2h0UnVsZXM7XG4iLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIG9vcCA9IHJlcXVpcmUoXCIuLi9saWIvb29wXCIpO1xudmFyIFRleHRIaWdobGlnaHRSdWxlcyA9IHJlcXVpcmUoXCIuL3RleHRfaGlnaGxpZ2h0X3J1bGVzXCIpLlRleHRIaWdobGlnaHRSdWxlcztcblxudmFyIERvY0NvbW1lbnRIaWdobGlnaHRSdWxlcyA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLiRydWxlcyA9IHtcbiAgICAgICAgXCJzdGFydFwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgdG9rZW46IFwiY29tbWVudC5kb2MudGFnXCIsXG4gICAgICAgICAgICAgICAgcmVnZXg6IFwiQFxcXFx3Kyg/PVxcXFxzfCQpXCJcbiAgICAgICAgICAgIH0sIERvY0NvbW1lbnRIaWdobGlnaHRSdWxlcy5nZXRUYWdSdWxlKCksIHtcbiAgICAgICAgICAgICAgICBkZWZhdWx0VG9rZW46IFwiY29tbWVudC5kb2NcIixcbiAgICAgICAgICAgICAgICBjYXNlSW5zZW5zaXRpdmU6IHRydWVcbiAgICAgICAgICAgIH1cbiAgICAgICAgXVxuICAgIH07XG59O1xuXG5vb3AuaW5oZXJpdHMoRG9jQ29tbWVudEhpZ2hsaWdodFJ1bGVzLCBUZXh0SGlnaGxpZ2h0UnVsZXMpO1xuXG5Eb2NDb21tZW50SGlnaGxpZ2h0UnVsZXMuZ2V0VGFnUnVsZSA9IGZ1bmN0aW9uKHN0YXJ0KSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgdG9rZW4gOiBcImNvbW1lbnQuZG9jLnRhZy5zdG9yYWdlLnR5cGVcIixcbiAgICAgICAgcmVnZXggOiBcIlxcXFxiKD86VE9ET3xGSVhNRXxYWFh8SEFDSylcXFxcYlwiXG4gICAgfTtcbn07XG5cbkRvY0NvbW1lbnRIaWdobGlnaHRSdWxlcy5nZXRTdGFydFJ1bGUgPSBmdW5jdGlvbihzdGFydCkge1xuICAgIHJldHVybiB7XG4gICAgICAgIHRva2VuIDogXCJjb21tZW50LmRvY1wiLCAvLyBkb2MgY29tbWVudFxuICAgICAgICByZWdleCA6IFwiXFxcXC9cXFxcKig/PVxcXFwqKVwiLFxuICAgICAgICBuZXh0ICA6IHN0YXJ0XG4gICAgfTtcbn07XG5cbkRvY0NvbW1lbnRIaWdobGlnaHRSdWxlcy5nZXRFbmRSdWxlID0gZnVuY3Rpb24gKHN0YXJ0KSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgdG9rZW4gOiBcImNvbW1lbnQuZG9jXCIsIC8vIGNsb3NpbmcgY29tbWVudFxuICAgICAgICByZWdleCA6IFwiXFxcXCpcXFxcL1wiLFxuICAgICAgICBuZXh0ICA6IHN0YXJ0XG4gICAgfTtcbn07XG5cblxuZXhwb3J0cy5Eb2NDb21tZW50SGlnaGxpZ2h0UnVsZXMgPSBEb2NDb21tZW50SGlnaGxpZ2h0UnVsZXM7XG4iLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIG9vcCA9IHJlcXVpcmUoXCIuLi8uLi9saWIvb29wXCIpO1xudmFyIFJhbmdlID0gcmVxdWlyZShcIi4uLy4uL3JhbmdlXCIpLlJhbmdlO1xudmFyIEJhc2VGb2xkTW9kZSA9IHJlcXVpcmUoXCIuL2ZvbGRfbW9kZVwiKS5Gb2xkTW9kZTtcblxudmFyIEZvbGRNb2RlID0gZXhwb3J0cy5Gb2xkTW9kZSA9IGZ1bmN0aW9uKGNvbW1lbnRSZWdleCkge1xuICAgIGlmIChjb21tZW50UmVnZXgpIHtcbiAgICAgICAgdGhpcy5mb2xkaW5nU3RhcnRNYXJrZXIgPSBuZXcgUmVnRXhwKFxuICAgICAgICAgICAgdGhpcy5mb2xkaW5nU3RhcnRNYXJrZXIuc291cmNlLnJlcGxhY2UoL1xcfFtefF0qPyQvLCBcInxcIiArIGNvbW1lbnRSZWdleC5zdGFydClcbiAgICAgICAgKTtcbiAgICAgICAgdGhpcy5mb2xkaW5nU3RvcE1hcmtlciA9IG5ldyBSZWdFeHAoXG4gICAgICAgICAgICB0aGlzLmZvbGRpbmdTdG9wTWFya2VyLnNvdXJjZS5yZXBsYWNlKC9cXHxbXnxdKj8kLywgXCJ8XCIgKyBjb21tZW50UmVnZXguZW5kKVxuICAgICAgICApO1xuICAgIH1cbn07XG5vb3AuaW5oZXJpdHMoRm9sZE1vZGUsIEJhc2VGb2xkTW9kZSk7XG5cbihmdW5jdGlvbigpIHtcbiAgICBcbiAgICB0aGlzLmZvbGRpbmdTdGFydE1hcmtlciA9IC8oW1xce1xcW1xcKF0pW15cXH1cXF1cXCldKiR8XlxccyooXFwvXFwqKS87XG4gICAgdGhpcy5mb2xkaW5nU3RvcE1hcmtlciA9IC9eW15cXFtcXHtcXChdKihbXFx9XFxdXFwpXSl8XltcXHNcXCpdKihcXCpcXC8pLztcbiAgICB0aGlzLnNpbmdsZUxpbmVCbG9ja0NvbW1lbnRSZT0gL15cXHMqKFxcL1xcKikuKlxcKlxcL1xccyokLztcbiAgICB0aGlzLnRyaXBsZVN0YXJCbG9ja0NvbW1lbnRSZSA9IC9eXFxzKihcXC9cXCpcXCpcXCopLipcXCpcXC9cXHMqJC87XG4gICAgdGhpcy5zdGFydFJlZ2lvblJlID0gL15cXHMqKFxcL1xcKnxcXC9cXC8pIz9yZWdpb25cXGIvO1xuICAgIFxuICAgIC8vcHJldmVudCBuYW1pbmcgY29uZmxpY3Qgd2l0aCBhbnkgbW9kZXMgdGhhdCBpbmhlcml0IGZyb20gY3N0eWxlIGFuZCBvdmVycmlkZSB0aGlzIChsaWtlIGNzaGFycClcbiAgICB0aGlzLl9nZXRGb2xkV2lkZ2V0QmFzZSA9IHRoaXMuZ2V0Rm9sZFdpZGdldDtcbiAgICBcbiAgICAvKipcbiAgICAgKiBHZXRzIGZvbGQgd2lkZ2V0IHdpdGggc29tZSBub24tc3RhbmRhcmQgZXh0cmFzOlxuICAgICAqXG4gICAgICogQGV4YW1wbGUgbGluZUNvbW1lbnRSZWdpb25TdGFydFxuICAgICAqICAgICAgLy8jcmVnaW9uIFtvcHRpb25hbCBkZXNjcmlwdGlvbl1cbiAgICAgKlxuICAgICAqIEBleGFtcGxlIGJsb2NrQ29tbWVudFJlZ2lvblN0YXJ0XG4gICAgICogICAgICAvKiNyZWdpb24gW29wdGlvbmFsIGRlc2NyaXB0aW9uXSAqWy9dXG4gICAgICpcbiAgICAgKiBAZXhhbXBsZSB0cmlwbGVTdGFyRm9sZGluZ1NlY3Rpb25cbiAgICAgKiAgICAgIC8qKiogdGhpcyBmb2xkcyBldmVuIHRob3VnaCAxIGxpbmUgYmVjYXVzZSBpdCBoYXMgMyBzdGFycyAqKipbL11cbiAgICAgKiBcbiAgICAgKiBAbm90ZSB0aGUgcG91bmQgc3ltYm9sIGZvciByZWdpb24gdGFncyBpcyBvcHRpb25hbFxuICAgICAqL1xuICAgIHRoaXMuZ2V0Rm9sZFdpZGdldCA9IGZ1bmN0aW9uKHNlc3Npb24sIGZvbGRTdHlsZSwgcm93KSB7XG4gICAgICAgIHZhciBsaW5lID0gc2Vzc2lvbi5nZXRMaW5lKHJvdyk7XG4gICAgXG4gICAgICAgIGlmICh0aGlzLnNpbmdsZUxpbmVCbG9ja0NvbW1lbnRSZS50ZXN0KGxpbmUpKSB7XG4gICAgICAgICAgICAvLyBObyB3aWRnZXQgZm9yIHNpbmdsZSBsaW5lIGJsb2NrIGNvbW1lbnQgdW5sZXNzIHJlZ2lvbiBvciB0cmlwbGUgc3RhclxuICAgICAgICAgICAgaWYgKCF0aGlzLnN0YXJ0UmVnaW9uUmUudGVzdChsaW5lKSAmJiAhdGhpcy50cmlwbGVTdGFyQmxvY2tDb21tZW50UmUudGVzdChsaW5lKSlcbiAgICAgICAgICAgICAgICByZXR1cm4gXCJcIjtcbiAgICAgICAgfVxuICAgIFxuICAgICAgICB2YXIgZncgPSB0aGlzLl9nZXRGb2xkV2lkZ2V0QmFzZShzZXNzaW9uLCBmb2xkU3R5bGUsIHJvdyk7XG4gICAgXG4gICAgICAgIGlmICghZncgJiYgdGhpcy5zdGFydFJlZ2lvblJlLnRlc3QobGluZSkpXG4gICAgICAgICAgICByZXR1cm4gXCJzdGFydFwiOyAvLyBsaW5lQ29tbWVudFJlZ2lvblN0YXJ0XG4gICAgXG4gICAgICAgIHJldHVybiBmdztcbiAgICB9O1xuXG4gICAgdGhpcy5nZXRGb2xkV2lkZ2V0UmFuZ2UgPSBmdW5jdGlvbihzZXNzaW9uLCBmb2xkU3R5bGUsIHJvdywgZm9yY2VNdWx0aWxpbmUpIHtcbiAgICAgICAgdmFyIGxpbmUgPSBzZXNzaW9uLmdldExpbmUocm93KTtcbiAgICAgICAgXG4gICAgICAgIGlmICh0aGlzLnN0YXJ0UmVnaW9uUmUudGVzdChsaW5lKSlcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmdldENvbW1lbnRSZWdpb25CbG9jayhzZXNzaW9uLCBsaW5lLCByb3cpO1xuICAgICAgICBcbiAgICAgICAgdmFyIG1hdGNoID0gbGluZS5tYXRjaCh0aGlzLmZvbGRpbmdTdGFydE1hcmtlcik7XG4gICAgICAgIGlmIChtYXRjaCkge1xuICAgICAgICAgICAgdmFyIGkgPSBtYXRjaC5pbmRleDtcblxuICAgICAgICAgICAgaWYgKG1hdGNoWzFdKVxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLm9wZW5pbmdCcmFja2V0QmxvY2soc2Vzc2lvbiwgbWF0Y2hbMV0sIHJvdywgaSk7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICB2YXIgcmFuZ2UgPSBzZXNzaW9uLmdldENvbW1lbnRGb2xkUmFuZ2Uocm93LCBpICsgbWF0Y2hbMF0ubGVuZ3RoLCAxKTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgaWYgKHJhbmdlICYmICFyYW5nZS5pc011bHRpTGluZSgpKSB7XG4gICAgICAgICAgICAgICAgaWYgKGZvcmNlTXVsdGlsaW5lKSB7XG4gICAgICAgICAgICAgICAgICAgIHJhbmdlID0gdGhpcy5nZXRTZWN0aW9uUmFuZ2Uoc2Vzc2lvbiwgcm93KTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGZvbGRTdHlsZSAhPSBcImFsbFwiKVxuICAgICAgICAgICAgICAgICAgICByYW5nZSA9IG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHJldHVybiByYW5nZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChmb2xkU3R5bGUgPT09IFwibWFya2JlZ2luXCIpXG4gICAgICAgICAgICByZXR1cm47XG5cbiAgICAgICAgdmFyIG1hdGNoID0gbGluZS5tYXRjaCh0aGlzLmZvbGRpbmdTdG9wTWFya2VyKTtcbiAgICAgICAgaWYgKG1hdGNoKSB7XG4gICAgICAgICAgICB2YXIgaSA9IG1hdGNoLmluZGV4ICsgbWF0Y2hbMF0ubGVuZ3RoO1xuXG4gICAgICAgICAgICBpZiAobWF0Y2hbMV0pXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuY2xvc2luZ0JyYWNrZXRCbG9jayhzZXNzaW9uLCBtYXRjaFsxXSwgcm93LCBpKTtcblxuICAgICAgICAgICAgcmV0dXJuIHNlc3Npb24uZ2V0Q29tbWVudEZvbGRSYW5nZShyb3csIGksIC0xKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgXG4gICAgdGhpcy5nZXRTZWN0aW9uUmFuZ2UgPSBmdW5jdGlvbihzZXNzaW9uLCByb3cpIHtcbiAgICAgICAgdmFyIGxpbmUgPSBzZXNzaW9uLmdldExpbmUocm93KTtcbiAgICAgICAgdmFyIHN0YXJ0SW5kZW50ID0gbGluZS5zZWFyY2goL1xcUy8pO1xuICAgICAgICB2YXIgc3RhcnRSb3cgPSByb3c7XG4gICAgICAgIHZhciBzdGFydENvbHVtbiA9IGxpbmUubGVuZ3RoO1xuICAgICAgICByb3cgPSByb3cgKyAxO1xuICAgICAgICB2YXIgZW5kUm93ID0gcm93O1xuICAgICAgICB2YXIgbWF4Um93ID0gc2Vzc2lvbi5nZXRMZW5ndGgoKTtcbiAgICAgICAgd2hpbGUgKCsrcm93IDwgbWF4Um93KSB7XG4gICAgICAgICAgICBsaW5lID0gc2Vzc2lvbi5nZXRMaW5lKHJvdyk7XG4gICAgICAgICAgICB2YXIgaW5kZW50ID0gbGluZS5zZWFyY2goL1xcUy8pO1xuICAgICAgICAgICAgaWYgKGluZGVudCA9PT0gLTEpXG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICBpZiAgKHN0YXJ0SW5kZW50ID4gaW5kZW50KVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgdmFyIHN1YlJhbmdlID0gdGhpcy5nZXRGb2xkV2lkZ2V0UmFuZ2Uoc2Vzc2lvbiwgXCJhbGxcIiwgcm93KTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgaWYgKHN1YlJhbmdlKSB7XG4gICAgICAgICAgICAgICAgaWYgKHN1YlJhbmdlLnN0YXJ0LnJvdyA8PSBzdGFydFJvdykge1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHN1YlJhbmdlLmlzTXVsdGlMaW5lKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgcm93ID0gc3ViUmFuZ2UuZW5kLnJvdztcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHN0YXJ0SW5kZW50ID09IGluZGVudCkge1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbmRSb3cgPSByb3c7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIHJldHVybiBuZXcgUmFuZ2Uoc3RhcnRSb3csIHN0YXJ0Q29sdW1uLCBlbmRSb3csIHNlc3Npb24uZ2V0TGluZShlbmRSb3cpLmxlbmd0aCk7XG4gICAgfTtcbiAgICBcbiAgICAvKipcbiAgICAgKiBnZXRzIGNvbW1lbnQgcmVnaW9uIGJsb2NrIHdpdGggZW5kIHJlZ2lvbiBhc3N1bWVkIHRvIGJlIHN0YXJ0IG9mIGNvbW1lbnQgaW4gYW55IGNzdHlsZSBtb2RlIG9yIFNRTCBtb2RlICgtLSkgd2hpY2ggaW5oZXJpdHMgZnJvbSB0aGlzLlxuICAgICAqIFRoZXJlIG1heSBvcHRpb25hbGx5IGJlIGEgcG91bmQgc3ltYm9sIGJlZm9yZSB0aGUgcmVnaW9uL2VuZHJlZ2lvbiBzdGF0ZW1lbnRcbiAgICAgKi9cbiAgICB0aGlzLmdldENvbW1lbnRSZWdpb25CbG9jayA9IGZ1bmN0aW9uKHNlc3Npb24sIGxpbmUsIHJvdykge1xuICAgICAgICB2YXIgc3RhcnRDb2x1bW4gPSBsaW5lLnNlYXJjaCgvXFxzKiQvKTtcbiAgICAgICAgdmFyIG1heFJvdyA9IHNlc3Npb24uZ2V0TGVuZ3RoKCk7XG4gICAgICAgIHZhciBzdGFydFJvdyA9IHJvdztcbiAgICAgICAgXG4gICAgICAgIHZhciByZSA9IC9eXFxzKig/OlxcL1xcKnxcXC9cXC98LS0pIz8oZW5kKT9yZWdpb25cXGIvO1xuICAgICAgICB2YXIgZGVwdGggPSAxO1xuICAgICAgICB3aGlsZSAoKytyb3cgPCBtYXhSb3cpIHtcbiAgICAgICAgICAgIGxpbmUgPSBzZXNzaW9uLmdldExpbmUocm93KTtcbiAgICAgICAgICAgIHZhciBtID0gcmUuZXhlYyhsaW5lKTtcbiAgICAgICAgICAgIGlmICghbSkgY29udGludWU7XG4gICAgICAgICAgICBpZiAobVsxXSkgZGVwdGgtLTtcbiAgICAgICAgICAgIGVsc2UgZGVwdGgrKztcblxuICAgICAgICAgICAgaWYgKCFkZXB0aCkgYnJlYWs7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgZW5kUm93ID0gcm93O1xuICAgICAgICBpZiAoZW5kUm93ID4gc3RhcnRSb3cpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgUmFuZ2Uoc3RhcnRSb3csIHN0YXJ0Q29sdW1uLCBlbmRSb3csIGxpbmUubGVuZ3RoKTtcbiAgICAgICAgfVxuICAgIH07XG5cbn0pLmNhbGwoRm9sZE1vZGUucHJvdG90eXBlKTtcbiIsIi8qXG4gIFRISVMgRklMRSBXQVMgQVVUT0dFTkVSQVRFRCBCWSBtb2RlLnRtcGwuanNcbiovXG5cblwidXNlIHN0cmljdFwiO1xuXG52YXIgb29wID0gcmVxdWlyZShcIi4uL2xpYi9vb3BcIik7XG52YXIgVGV4dE1vZGUgPSByZXF1aXJlKFwiLi90ZXh0XCIpLk1vZGU7XG52YXIgT2JqZWN0aXZlQ0hpZ2hsaWdodFJ1bGVzID0gcmVxdWlyZShcIi4vb2JqZWN0aXZlY19oaWdobGlnaHRfcnVsZXNcIikuT2JqZWN0aXZlQ0hpZ2hsaWdodFJ1bGVzO1xudmFyIENTdHlsZUZvbGRNb2RlID0gcmVxdWlyZShcIi4vZm9sZGluZy9jc3R5bGVcIikuRm9sZE1vZGU7XG5cbnZhciBNb2RlID0gZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5IaWdobGlnaHRSdWxlcyA9IE9iamVjdGl2ZUNIaWdobGlnaHRSdWxlcztcbiAgICB0aGlzLmZvbGRpbmdSdWxlcyA9IG5ldyBDU3R5bGVGb2xkTW9kZSgpO1xuICAgIHRoaXMuJGJlaGF2aW91ciA9IHRoaXMuJGRlZmF1bHRCZWhhdmlvdXI7XG59O1xub29wLmluaGVyaXRzKE1vZGUsIFRleHRNb2RlKTtcblxuKGZ1bmN0aW9uKCkge1xuICAgIHRoaXMubGluZUNvbW1lbnRTdGFydCA9IFwiLy9cIjtcbiAgICB0aGlzLmJsb2NrQ29tbWVudCA9IHtzdGFydDogXCIvKlwiLCBlbmQ6IFwiKi9cIn07XG4gICAgdGhpcy4kaWQgPSBcImFjZS9tb2RlL29iamVjdGl2ZWNcIjtcbn0pLmNhbGwoTW9kZS5wcm90b3R5cGUpO1xuXG5leHBvcnRzLk1vZGUgPSBNb2RlO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBvb3AgPSByZXF1aXJlKFwiLi4vbGliL29vcFwiKTtcbnZhciBEb2NDb21tZW50SGlnaGxpZ2h0UnVsZXMgPSByZXF1aXJlKFwiLi9kb2NfY29tbWVudF9oaWdobGlnaHRfcnVsZXNcIikuRG9jQ29tbWVudEhpZ2hsaWdodFJ1bGVzO1xudmFyIENIaWdobGlnaHRSdWxlcyA9IHJlcXVpcmUoXCIuL2NfY3BwX2hpZ2hsaWdodF9ydWxlc1wiKS5jX2NwcEhpZ2hsaWdodFJ1bGVzO1xuXG52YXIgT2JqZWN0aXZlQ0hpZ2hsaWdodFJ1bGVzID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIE5TS2V5d29yZHMgPSB7XG4gICAgICAgIFwic3VwcG9ydC5mdW5jdGlvbi5jb2NvYS5sZW9wYXJkXCI6IFwiTlNSZWN0VG9DR1JlY3R8TlNSZWN0RnJvbUNHUmVjdHxOU01ha2VDb2xsZWN0YWJsZXxOU1N0cmluZ0Zyb21Qcm90b2NvbHxOU1NpemVUb0NHU2l6ZXxOU1NpemVGcm9tQ0dTaXplfE5TRHJhd05pbmVQYXJ0SW1hZ2V8TlNEcmF3VGhyZWVQYXJ0SW1hZ2V8TlNQb2ludFRvQ0dQb2ludHxOU1BvaW50RnJvbUNHUG9pbnR8TlNQcm90b2NvbEZyb21TdHJpbmd8TlNFdmVudE1hc2tGcm9tVHlwZXxOU1ZhbHVlXCIsXG4gICAgICAgIFwic3VwcG9ydC5mdW5jdGlvbi5jb2NvYVwiOiBcIk5TUm91bmREb3duVG9NdWx0aXBsZU9mUGFnZVNpemV8TlNSb3VuZFVwVG9NdWx0aXBsZU9mUGFnZVNpemV8TlNSdW5Dcml0aWNhbEFsZXJ0UGFuZWx8TlNSdW5Dcml0aWNhbEFsZXJ0UGFuZWxSZWxhdGl2ZVRvV2luZG93fE5TUnVuSW5mb3JtYXRpb25hbEFsZXJ0UGFuZWx8TlNSdW5JbmZvcm1hdGlvbmFsQWxlcnRQYW5lbFJlbGF0aXZlVG9XaW5kb3d8TlNSdW5BbGVydFBhbmVsfE5TUnVuQWxlcnRQYW5lbFJlbGF0aXZlVG9XaW5kb3d8TlNSZXNldE1hcFRhYmxlfE5TUmVzZXRIYXNoVGFibGV8TlNSZWN5Y2xlWm9uZXxOU1JlY3RDbGlwfE5TUmVjdENsaXBMaXN0fE5TUmVjdEZpbGx8TlNSZWN0RmlsbFVzaW5nT3BlcmF0aW9ufE5TUmVjdEZpbGxMaXN0fE5TUmVjdEZpbGxMaXN0VXNpbmdPcGVyYXRpb258TlNSZWN0RmlsbExpc3RXaXRoR3JheXN8TlNSZWN0RmlsbExpc3RXaXRoQ29sb3JzfE5TUmVjdEZpbGxMaXN0V2l0aENvbG9yc1VzaW5nT3BlcmF0aW9ufE5TUmVjdEZyb21TdHJpbmd8TlNSZWNvcmRBbGxvY2F0aW9uRXZlbnR8TlNSZXR1cm5BZGRyZXNzfE5TUmVsZWFzZUFsZXJ0UGFuZWx8TlNSZWFkUGl4ZWx8TlNSZWFsTWVtb3J5QXZhaWxhYmxlfE5TUmVhbGxvY2F0ZUNvbGxlY3RhYmxlfE5TUmVnaXN0ZXJTZXJ2aWNlc1Byb3ZpZGVyfE5TUmFuZ2VGcm9tU3RyaW5nfE5TR2V0U2l6ZUFuZEFsaWdubWVudHxOU0dldENyaXRpY2FsQWxlcnRQYW5lbHxOU0dldEluZm9ybWF0aW9uYWxBbGVydFBhbmVsfE5TR2V0VW5jYXVnaHRFeGNlcHRpb25IYW5kbGVyfE5TR2V0RmlsZVR5cGV8TlNHZXRGaWxlVHlwZXN8TlNHZXRXaW5kb3dTZXJ2ZXJNZW1vcnl8TlNHZXRBbGVydFBhbmVsfE5TTWluWHxOU01pbll8TlNNaWRYfE5TTWlkWXxOU01vdXNlSW5SZWN0fE5TTWFwUmVtb3ZlfE5TTWFwR2V0fE5TTWFwTWVtYmVyfE5TTWFwSW5zZXJ0fE5TTWFwSW5zZXJ0SWZBYnNlbnR8TlNNYXBJbnNlcnRLbm93bkFic2VudHxOU01ha2VSZWN0fE5TTWFrZVJhbmdlfE5TTWFrZVNpemV8TlNNYWtlUG9pbnR8TlNNYXhSYW5nZXxOU01heFh8TlNNYXhZfE5TQml0c1BlclNhbXBsZUZyb21EZXB0aHxOU0JpdHNQZXJQaXhlbEZyb21EZXB0aHxOU0Jlc3REZXB0aHxOU0JlZXB8TlNCZWdpbkNyaXRpY2FsQWxlcnRTaGVldHxOU0JlZ2luSW5mb3JtYXRpb25hbEFsZXJ0U2hlZXR8TlNCZWdpbkFsZXJ0U2hlZXR8TlNTaG91bGRSZXRhaW5XaXRoWm9uZXxOU1Nob3dzU2VydmljZXNNZW51SXRlbXxOU1Nob3dBbmltYXRpb25FZmZlY3R8TlNTdHJpbmdGcm9tUmVjdHxOU1N0cmluZ0Zyb21SYW5nZXxOU1N0cmluZ0Zyb21NYXBUYWJsZXxOU1N0cmluZ0Zyb21TaXplfE5TU3RyaW5nRnJvbVNlbGVjdG9yfE5TU3RyaW5nRnJvbUhhc2hUYWJsZXxOU1N0cmluZ0Zyb21DbGFzc3xOU1N0cmluZ0Zyb21Qb2ludHxOU1NpemVGcm9tU3RyaW5nfE5TU2V0U2hvd3NTZXJ2aWNlc01lbnVJdGVtfE5TU2V0Wm9uZU5hbWV8TlNTZXRVbmNhdWdodEV4Y2VwdGlvbkhhbmRsZXJ8TlNTZXRGb2N1c1JpbmdTdHlsZXxOU1NlbGVjdG9yRnJvbVN0cmluZ3xOU1NlYXJjaFBhdGhGb3JEaXJlY3Rvcmllc0luRG9tYWluc3xOU1N3YXBCaWdTaG9ydFRvSG9zdHxOU1N3YXBCaWdJbnRUb0hvc3R8TlNTd2FwQmlnRG91YmxlVG9Ib3N0fE5TU3dhcEJpZ0Zsb2F0VG9Ib3N0fE5TU3dhcEJpZ0xvbmdUb0hvc3R8TlNTd2FwQmlnTG9uZ0xvbmdUb0hvc3R8TlNTd2FwU2hvcnR8TlNTd2FwSG9zdFNob3J0VG9CaWd8TlNTd2FwSG9zdFNob3J0VG9MaXR0bGV8TlNTd2FwSG9zdEludFRvQmlnfE5TU3dhcEhvc3RJbnRUb0xpdHRsZXxOU1N3YXBIb3N0RG91YmxlVG9CaWd8TlNTd2FwSG9zdERvdWJsZVRvTGl0dGxlfE5TU3dhcEhvc3RGbG9hdFRvQmlnfE5TU3dhcEhvc3RGbG9hdFRvTGl0dGxlfE5TU3dhcEhvc3RMb25nVG9CaWd8TlNTd2FwSG9zdExvbmdUb0xpdHRsZXxOU1N3YXBIb3N0TG9uZ0xvbmdUb0JpZ3xOU1N3YXBIb3N0TG9uZ0xvbmdUb0xpdHRsZXxOU1N3YXBJbnR8TlNTd2FwRG91YmxlfE5TU3dhcEZsb2F0fE5TU3dhcExpdHRsZVNob3J0VG9Ib3N0fE5TU3dhcExpdHRsZUludFRvSG9zdHxOU1N3YXBMaXR0bGVEb3VibGVUb0hvc3R8TlNTd2FwTGl0dGxlRmxvYXRUb0hvc3R8TlNTd2FwTGl0dGxlTG9uZ1RvSG9zdHxOU1N3YXBMaXR0bGVMb25nTG9uZ1RvSG9zdHxOU1N3YXBMb25nfE5TU3dhcExvbmdMb25nfE5TSGlnaGxpZ2h0UmVjdHxOU0hvc3RCeXRlT3JkZXJ8TlNIb21lRGlyZWN0b3J5fE5TSG9tZURpcmVjdG9yeUZvclVzZXJ8TlNIZWlnaHR8TlNIYXNoUmVtb3ZlfE5TSGFzaEdldHxOU0hhc2hJbnNlcnR8TlNIYXNoSW5zZXJ0SWZBYnNlbnR8TlNIYXNoSW5zZXJ0S25vd25BYnNlbnR8TlNIRlNUeXBlQ29kZUZyb21GaWxlVHlwZXxOU0hGU1R5cGVPZkZpbGV8TlNOdW1iZXJPZkNvbG9yQ29tcG9uZW50c3xOU05leHRNYXBFbnVtZXJhdG9yUGFpcnxOU05leHRIYXNoRW51bWVyYXRvckl0ZW18TlNDb250YWluc1JlY3R8TlNDb252ZXJ0R2x5cGhzVG9QYWNrZWRHbHlwaHN8TlNDb252ZXJ0U3dhcHBlZERvdWJsZVRvSG9zdHxOU0NvbnZlcnRTd2FwcGVkRmxvYXRUb0hvc3R8TlNDb252ZXJ0SG9zdERvdWJsZVRvU3dhcHBlZHxOU0NvbnZlcnRIb3N0RmxvYXRUb1N3YXBwZWR8TlNDb3VudE1hcFRhYmxlfE5TQ291bnRIYXNoVGFibGV8TlNDb3VudEZyYW1lc3xOU0NvdW50V2luZG93c3xOU0NvdW50V2luZG93c0ZvckNvbnRleHR8TlNDb3B5TWVtb3J5UGFnZXN8TlNDb3B5TWFwVGFibGVXaXRoWm9uZXxOU0NvcHlCaXRzfE5TQ29weUhhc2hUYWJsZVdpdGhab25lfE5TQ29weU9iamVjdHxOU0NvbG9yU3BhY2VGcm9tRGVwdGh8TlNDb21wYXJlTWFwVGFibGVzfE5TQ29tcGFyZUhhc2hUYWJsZXN8TlNDbGFzc0Zyb21TdHJpbmd8TlNDcmVhdGVNYXBUYWJsZXxOU0NyZWF0ZU1hcFRhYmxlV2l0aFpvbmV8TlNDcmVhdGVIYXNoVGFibGV8TlNDcmVhdGVIYXNoVGFibGVXaXRoWm9uZXxOU0NyZWF0ZVpvbmV8TlNDcmVhdGVGaWxlbmFtZVBib2FyZFR5cGV8TlNDcmVhdGVGaWxlQ29udGVudHNQYm9hcmRUeXBlfE5TVGVtcG9yYXJ5RGlyZWN0b3J5fE5TSXNDb250cm9sbGVyTWFya2VyfE5TSXNFbXB0eVJlY3R8TlNJc0ZyZWVkT2JqZWN0fE5TSW5zZXRSZWN0fE5TSW5jcmVtZW50RXh0cmFSZWZDb3VudHxOU0ludGVyc2VjdHNSZWN0fE5TSW50ZXJzZWN0aW9uUmVjdHxOU0ludGVyc2VjdGlvblJhbmdlfE5TSW50ZXJmYWNlU3R5bGVGb3JLZXl8TlNJbnRlZ3JhbFJlY3R8TlNab25lUmVhbGxvY3xOU1pvbmVNYWxsb2N8TlNab25lTmFtZXxOU1pvbmVDYWxsb2N8TlNab25lRnJvbVBvaW50ZXJ8TlNab25lRnJlZXxOU09wZW5TdGVwUm9vdERpcmVjdG9yeXxOU09mZnNldFJlY3R8TlNEaXNhYmxlU2NyZWVuVXBkYXRlc3xOU0RpdmlkZVJlY3R8TlNEb3R0ZWRGcmFtZVJlY3R8TlNEZWNpbWFsUm91bmR8TlNEZWNpbWFsTXVsdGlwbHl8TlNEZWNpbWFsU3RyaW5nfE5TRGVjaW1hbFN1YnRyYWN0fE5TRGVjaW1hbE5vcm1hbGl6ZXxOU0RlY2ltYWxDb3B5fE5TRGVjaW1hbENvbXBhY3R8TlNEZWNpbWFsQ29tcGFyZXxOU0RlY2ltYWxJc05vdEFOdW1iZXJ8TlNEZWNpbWFsRGl2aWRlfE5TRGVjaW1hbFBvd2VyfE5TRGVjaW1hbEFkZHxOU0RlY3JlbWVudEV4dHJhUmVmQ291bnRXYXNaZXJvfE5TRGVmYXVsdE1hbGxvY1pvbmV8TlNEZWFsbG9jYXRlTWVtb3J5UGFnZXN8TlNEZWFsbG9jYXRlT2JqZWN0fE5TRHJhd0dyb292ZXxOU0RyYXdHcmF5QmV6ZWx8TlNEcmF3Qml0bWFwfE5TRHJhd0J1dHRvbnxOU0RyYXdDb2xvclRpbGVkUmVjdHN8TlNEcmF3VGlsZWRSZWN0c3xOU0RyYXdEYXJrQmV6ZWx8TlNEcmF3V2hpdGVCZXplbHxOU0RyYXdXaW5kb3dCYWNrZ3JvdW5kfE5TRHJhd0xpZ2h0QmV6ZWx8TlNVc2VyTmFtZXxOU1VuaW9uUmVjdHxOU1VuaW9uUmFuZ2V8TlNVbnJlZ2lzdGVyU2VydmljZXNQcm92aWRlcnxOU1VwZGF0ZUR5bmFtaWNTZXJ2aWNlc3xOU0phdmFCdW5kbGVTZXR1cHxOU0phdmFCdW5kbGVDbGVhbnVwfE5TSmF2YVNldHVwfE5TSmF2YVNldHVwVmlydHVhbE1hY2hpbmV8TlNKYXZhTmVlZHNUb0xvYWRDbGFzc2VzfE5TSmF2YU5lZWRzVmlydHVhbE1hY2hpbmV8TlNKYXZhQ2xhc3Nlc0ZvckJ1bmRsZXxOU0phdmFDbGFzc2VzRnJvbVBhdGh8TlNKYXZhT2JqZWN0TmFtZWRJblBhdGh8TlNKYXZhUHJvdmlkZXNDbGFzc2VzfE5TUG9pbnRJblJlY3R8TlNQb2ludEZyb21TdHJpbmd8TlNQZXJmb3JtU2VydmljZXxOU1BsYW5hckZyb21EZXB0aHxOU1BhZ2VTaXplfE5TRW5kTWFwVGFibGVFbnVtZXJhdGlvbnxOU0VuZEhhc2hUYWJsZUVudW1lcmF0aW9ufE5TRW51bWVyYXRlTWFwVGFibGV8TlNFbnVtZXJhdGVIYXNoVGFibGV8TlNFbmFibGVTY3JlZW5VcGRhdGVzfE5TRXF1YWxSZWN0c3xOU0VxdWFsUmFuZ2VzfE5TRXF1YWxTaXplc3xOU0VxdWFsUG9pbnRzfE5TRXJhc2VSZWN0fE5TRXh0cmFSZWZDb3VudHxOU0ZpbGVUeXBlRm9ySEZTVHlwZUNvZGV8TlNGdWxsVXNlck5hbWV8TlNGcmVlTWFwVGFibGV8TlNGcmVlSGFzaFRhYmxlfE5TRnJhbWVSZWN0fE5TRnJhbWVSZWN0V2l0aFdpZHRofE5TRnJhbWVSZWN0V2l0aFdpZHRoVXNpbmdPcGVyYXRpb258TlNGcmFtZUFkZHJlc3N8TlNXaW5kb3dMaXN0fE5TV2luZG93TGlzdEZvckNvbnRleHR8TlNXaWR0aHxOU0xvY2F0aW9uSW5SYW5nZXxOU0xvZ3xOU0xvZ3Z8TlNMb2dQYWdlU2l6ZXxOU0FjY2Vzc2liaWxpdHlSb2xlRGVzY3JpcHRpb258TlNBY2Nlc3NpYmlsaXR5Um9sZURlc2NyaXB0aW9uRm9yVUlFbGVtZW50fE5TQWNjZXNzaWJpbGl0eVJhaXNlQmFkQXJndW1lbnRFeGNlcHRpb258TlNBY2Nlc3NpYmlsaXR5VW5pZ25vcmVkQ2hpbGRyZW58TlNBY2Nlc3NpYmlsaXR5VW5pZ25vcmVkQ2hpbGRyZW5Gb3JPbmx5Q2hpbGR8TlNBY2Nlc3NpYmlsaXR5VW5pZ25vcmVkRGVzY2VuZGFudHxOU0FjY2Vzc2liaWxpdHlVbmlnbm9yZWRBbmNlc3RvcnxOU0FjY2Vzc2liaWxpdHlQb3N0Tm90aWZpY2F0aW9ufE5TQWNjZXNzaWJpbGl0eUFjdGlvbkRlc2NyaXB0aW9ufE5TQXBwbGljYXRpb25NYWlufE5TQXBwbGljYXRpb25Mb2FkfE5TQXZhaWxhYmxlV2luZG93RGVwdGhzfE5TQWxsTWFwVGFibGVWYWx1ZXN8TlNBbGxNYXBUYWJsZUtleXN8TlNBbGxIYXNoVGFibGVPYmplY3RzfE5TQWxsb2NhdGVNZW1vcnlQYWdlc3xOU0FsbG9jYXRlQ29sbGVjdGFibGV8TlNBbGxvY2F0ZU9iamVjdFwiLFxuICAgICAgICBcInN1cHBvcnQuY2xhc3MuY29jb2EubGVvcGFyZFwiOiBcIk5TUnVsZUVkaXRvcnxOU0dhcmJhZ2VDb2xsZWN0b3J8TlNHcmFkaWVudHxOU01hcFRhYmxlfE5TSGFzaFRhYmxlfE5TQ29uZGl0aW9ufE5TQ29sbGVjdGlvblZpZXd8TlNDb2xsZWN0aW9uVmlld0l0ZW18TlNUb29sYmFySXRlbUdyb3VwfE5TVGV4dElucHV0Q2xpZW50fE5TVHJlZU5vZGV8TlNUcmFja2luZ0FyZWF8TlNJbnZvY2F0aW9uT3BlcmF0aW9ufE5TT3BlcmF0aW9ufE5TT3BlcmF0aW9uUXVldWV8TlNEaWN0aW9uYXJ5Q29udHJvbGxlcnxOU0RvY2tUaWxlfE5TUG9pbnRlckZ1bmN0aW9uc3xOU1BvaW50ZXJBcnJheXxOU1BhdGhDb250cm9sfE5TUGF0aENvbnRyb2xEZWxlZ2F0ZXxOU1BhdGhDb21wb25lbnRDZWxsfE5TUGF0aENlbGx8TlNQYXRoQ2VsbERlbGVnYXRlfE5TUHJpbnRQYW5lbEFjY2Vzc29yaXppbmd8TlNQcmVkaWNhdGVFZGl0b3J8TlNQcmVkaWNhdGVFZGl0b3JSb3dUZW1wbGF0ZXxOU1ZpZXdDb250cm9sbGVyfE5TRmFzdEVudW1lcmF0aW9ufE5TQW5pbWF0aW9uQ29udGV4dHxOU0FuaW1hdGFibGVQcm9wZXJ0eUNvbnRhaW5lclwiLFxuICAgICAgICBcInN1cHBvcnQuY2xhc3MuY29jb2FcIjogXCJOU1J1bkxvb3B8TlNSdWxlck1hcmtlcnxOU1J1bGVyVmlld3xOU1Jlc3BvbmRlcnxOU1JlY3Vyc2l2ZUxvY2t8TlNSZWxhdGl2ZVNwZWNpZmllcnxOU1JhbmRvbVNwZWNpZmllcnxOU1JhbmdlU3BlY2lmaWVyfE5TR2V0Q29tbWFuZHxOU0dseXBoR2VuZXJhdG9yfE5TR2x5cGhTdG9yYWdlfE5TR2x5cGhJbmZvfE5TR3JhcGhpY3NDb250ZXh0fE5TWE1MTm9kZXxOU1hNTERvY3VtZW50fE5TWE1MRFREfE5TWE1MRFRETm9kZXxOU1hNTFBhcnNlcnxOU1hNTEVsZW1lbnR8TlNNaWRkbGVTcGVjaWZpZXJ8TlNNb3ZpZXxOU01vdmllVmlld3xOU01vdmVDb21tYW5kfE5TTXV0YWJsZVN0cmluZ3xOU011dGFibGVTZXR8TlNNdXRhYmxlQ2hhcmFjdGVyU2V0fE5TTXV0YWJsZUNvcHlpbmd8TlNNdXRhYmxlSW5kZXhTZXR8TlNNdXRhYmxlRGljdGlvbmFyeXxOU011dGFibGVEYXRhfE5TTXV0YWJsZVVSTFJlcXVlc3R8TlNNdXRhYmxlUGFyYWdyYXBoU3R5bGV8TlNNdXRhYmxlQXR0cmlidXRlZFN0cmluZ3xOU011dGFibGVBcnJheXxOU01lc3NhZ2VQb3J0fE5TTWVzc2FnZVBvcnROYW1lU2VydmVyfE5TTWVudXxOU01lbnVJdGVtfE5TTWVudUl0ZW1DZWxsfE5TTWVudVZpZXd8TlNNZXRob2RTaWduYXR1cmV8TlNNZXRhZGF0YUl0ZW18TlNNZXRhZGF0YVF1ZXJ5fE5TTWV0YWRhdGFRdWVyeVJlc3VsdEdyb3VwfE5TTWV0YWRhdGFRdWVyeUF0dHJpYnV0ZVZhbHVlVHVwbGV8TlNNYWNoQm9vdHN0cmFwU2VydmVyfE5TTWFjaFBvcnR8TlNNYXRyaXh8TlNCaXRtYXBJbWFnZVJlcHxOU0JveHxOU0J1bmRsZXxOU0J1dHRvbnxOU0J1dHRvbkNlbGx8TlNCZXppZXJQYXRofE5TQnJvd3NlcnxOU0Jyb3dzZXJDZWxsfE5TU2hhZG93fE5TU2Nhbm5lcnxOU1NjcmlwdFN1aXRlUmVnaXN0cnl8TlNTY3JpcHRDb2VyY2lvbkhhbmRsZXJ8TlNTY3JpcHRDb21tYW5kfE5TU2NyaXB0Q29tbWFuZERlc2NyaXB0aW9ufE5TU2NyaXB0Q2xhc3NEZXNjcmlwdGlvbnxOU1NjcmlwdE9iamVjdFNwZWNpZmllcnxOU1NjcmlwdEV4ZWN1dGlvbkNvbnRleHR8TlNTY3JpcHRXaG9zZVRlc3R8TlNTY3JvbGxlcnxOU1Njcm9sbFZpZXd8TlNTY3JlZW58TlNTdGVwcGVyfE5TU3RlcHBlckNlbGx8TlNTdGF0dXNCYXJ8TlNTdGF0dXNJdGVtfE5TU3RyaW5nfE5TU3RyZWFtfE5TU2ltcGxlSG9yaXpvbnRhbFR5cGVzZXR0ZXJ8TlNTaW1wbGVDU3RyaW5nfE5TU29ja2V0UG9ydHxOU1NvY2tldFBvcnROYW1lU2VydmVyfE5TU291bmR8TlNTb3J0RGVzY3JpcHRvcnxOU1NwZWNpZmllclRlc3R8TlNTcGVlY2hSZWNvZ25pemVyfE5TU3BlZWNoU3ludGhlc2l6ZXJ8TlNTcGVsbFNlcnZlcnxOU1NwZWxsQ2hlY2tlcnxOU1NwbGl0Vmlld3xOU1NlY3VyZVRleHRGaWVsZHxOU1NlY3VyZVRleHRGaWVsZENlbGx8TlNTZXR8TlNTZXRDb21tYW5kfE5TU2VhcmNoRmllbGR8TlNTZWFyY2hGaWVsZENlbGx8TlNTZXJpYWxpemVyfE5TU2VnbWVudGVkQ29udHJvbHxOU1NlZ21lbnRlZENlbGx8TlNTbGlkZXJ8TlNTbGlkZXJDZWxsfE5TU2F2ZVBhbmVsfE5TSG9zdHxOU0hUVFBDb29raWV8TlNIVFRQQ29va2llU3RvcmFnZXxOU0hUVFBVUkxSZXNwb25zZXxOU0hlbHBNYW5hZ2VyfE5TTmlifE5TTmliQ29ubmVjdG9yfE5TTmliQ29udHJvbENvbm5lY3RvcnxOU05pYk91dGxldENvbm5lY3RvcnxOU05vdGlmaWNhdGlvbnxOU05vdGlmaWNhdGlvbkNlbnRlcnxOU05vdGlmaWNhdGlvblF1ZXVlfE5TTnVsbHxOU051bWJlcnxOU051bWJlckZvcm1hdHRlcnxOU05ldFNlcnZpY2V8TlNOZXRTZXJ2aWNlQnJvd3NlcnxOU05hbWVTcGVjaWZpZXJ8TlNDaGFuZ2VTcGVsbGluZ3xOU0NoYXJhY3RlclNldHxOU0NvbnN0YW50U3RyaW5nfE5TQ29ubmVjdGlvbnxOU0NvbnRyb2x8TlNDb250cm9sbGVyfE5TQ29uZGl0aW9uTG9ja3xOU0NvZGluZ3xOU0NvZGVyfE5TQ291bnRDb21tYW5kfE5TQ291bnRlZFNldHxOU0NvcHlpbmd8TlNDb2xvcnxOU0NvbG9yU3BhY2V8TlNDb2xvclBpY2tpbmdDdXN0b218TlNDb2xvclBpY2tpbmdEZWZhdWx0fE5TQ29sb3JQaWNrZXJ8TlNDb2xvclBhbmVsfE5TQ29sb3JXZWxsfE5TQ29sb3JMaXN0fE5TQ29tcG91bmRQcmVkaWNhdGV8TlNDb21wYXJpc29uUHJlZGljYXRlfE5TQ29tYm9Cb3h8TlNDb21ib0JveENlbGx8TlNDdXN0b21JbWFnZVJlcHxOU0N1cnNvcnxOU0NJSW1hZ2VSZXB8TlNDZWxsfE5TQ2xpcFZpZXd8TlNDbG9zZUNvbW1hbmR8TlNDbG9uZUNvbW1hbmR8TlNDbGFzc0Rlc2NyaXB0aW9ufE5TQ2FjaGVkSW1hZ2VSZXB8TlNDYWNoZWRVUkxSZXNwb25zZXxOU0NhbGVuZGFyfE5TQ2FsZW5kYXJEYXRlfE5TQ3JlYXRlQ29tbWFuZHxOU1RocmVhZHxOU1R5cGVzZXR0ZXJ8TlNUaW1lWm9uZXxOU1RpbWVyfE5TVG9vbGJhcnxOU1Rvb2xiYXJJdGVtfE5TVG9vbGJhckl0ZW1WYWxpZGF0aW9uc3xOU1Rva2VuRmllbGR8TlNUb2tlbkZpZWxkQ2VsbHxOU1RleHR8TlNUZXh0QmxvY2t8TlNUZXh0U3RvcmFnZXxOU1RleHRDb250YWluZXJ8TlNUZXh0VGFifE5TVGV4dFRhYmxlfE5TVGV4dFRhYmxlQmxvY2t8TlNUZXh0SW5wdXR8TlNUZXh0Vmlld3xOU1RleHRGaWVsZHxOU1RleHRGaWVsZENlbGx8TlNUZXh0TGlzdHxOU1RleHRBdHRhY2htZW50fE5TVGV4dEF0dGFjaG1lbnRDZWxsfE5TVGFza3xOU1RhYmxlSGVhZGVyQ2VsbHxOU1RhYmxlSGVhZGVyVmlld3xOU1RhYmxlQ29sdW1ufE5TVGFibGVWaWV3fE5TVGFiVmlld3xOU1RhYlZpZXdJdGVtfE5TVHJlZUNvbnRyb2xsZXJ8TlNJbmRleFNwZWNpZmllcnxOU0luZGV4U2V0fE5TSW5kZXhQYXRofE5TSW5wdXRNYW5hZ2VyfE5TSW5wdXRTdHJlYW18TlNJbnB1dFNlcnZpY2VQcm92aWRlcnxOU0lucHV0U2VydmVyfE5TSW5wdXRTZXJ2ZXJNb3VzZVRyYWNrZXJ8TlNJbnZvY2F0aW9ufE5TSWdub3JlTWlzc3BlbGxlZFdvcmRzfE5TSW1hZ2V8TlNJbWFnZVJlcHxOU0ltYWdlQ2VsbHxOU0ltYWdlVmlld3xOU091dHB1dFN0cmVhbXxOU091dGxpbmVWaWV3fE5TT3BlbkdMQ29udGV4dHxOU09wZW5HTFBpeGVsQnVmZmVyfE5TT3BlbkdMUGl4ZWxGb3JtYXR8TlNPcGVuR0xWaWV3fE5TT3BlblBhbmVsfE5TT2JqQ1R5cGVTZXJpYWxpemF0aW9uQ2FsbEJhY2t8TlNPYmplY3R8TlNPYmplY3RDb250cm9sbGVyfE5TRGlzdGFudE9iamVjdHxOU0Rpc3RhbnRPYmplY3RSZXF1ZXN0fE5TRGlzdHJpYnV0ZWROb3RpZmljYXRpb25DZW50ZXJ8TlNEaXN0cmlidXRlZExvY2t8TlNEaWN0aW9uYXJ5fE5TRGlyZWN0b3J5RW51bWVyYXRvcnxOU0RvY3VtZW50fE5TRG9jdW1lbnRDb250cm9sbGVyfE5TRGVzZXJpYWxpemVyfE5TRGVjaW1hbE51bWJlcnxOU0RlY2ltYWxOdW1iZXJCZWhhdmlvcnN8TlNEZWNpbWFsTnVtYmVySGFuZGxlcnxOU0RlbGV0ZUNvbW1hbmR8TlNEYXRlfE5TRGF0ZUNvbXBvbmVudHN8TlNEYXRlUGlja2VyfE5TRGF0ZVBpY2tlckNlbGx8TlNEYXRlRm9ybWF0dGVyfE5TRGF0YXxOU0RyYXdlcnxOU0RyYWdnaW5nSW5mb3xOU1VzZXJJbnRlcmZhY2VWYWxpZGF0aW9uc3xOU1VzZXJEZWZhdWx0c3xOU1VzZXJEZWZhdWx0c0NvbnRyb2xsZXJ8TlNVUkx8TlNVUkxSZXNwb25zZXxOU1VSTFJlcXVlc3R8TlNVUkxIYW5kbGV8TlNVUkxIYW5kbGVDbGllbnR8TlNVUkxDb25uZWN0aW9ufE5TVVJMQ2FjaGV8TlNVUkxDcmVkZW50aWFsfE5TVVJMQ3JlZGVudGlhbFN0b3JhZ2V8TlNVUkxEb3dubG9hZHxOU1VSTERvd25sb2FkRGVsZWdhdGV8TlNVUkxQcm90b2NvbHxOU1VSTFByb3RvY29sQ2xpZW50fE5TVVJMUHJvdGVjdGlvblNwYWNlfE5TVVJMQXV0aGVudGljYXRpb25DaGFsbGVuZ2V8TlNVUkxBdXRoZW50aWNhdGlvbkNoYWxsZW5nZVNlbmRlcnxOU1VuaXF1ZUlEU3BlY2lmaWVyfE5TVW5kb01hbmFnZXJ8TlNVbmFyY2hpdmVyfE5TUGlwZXxOU1Bvc2l0aW9uYWxTcGVjaWZpZXJ8TlNQb3BVcEJ1dHRvbnxOU1BvcFVwQnV0dG9uQ2VsbHxOU1BvcnR8TlNQb3J0TWVzc2FnZXxOU1BvcnROYW1lU2VydmVyfE5TUG9ydENvZGVyfE5TUElDVEltYWdlUmVwfE5TUGVyc2lzdGVudERvY3VtZW50fE5TUERGSW1hZ2VSZXB8TlNQYXN0ZWJvYXJkfE5TUGFuZWx8TlNQYXJhZ3JhcGhTdHlsZXxOU1BhZ2VMYXlvdXR8TlNQcmludEluZm98TlNQcmludGVyfE5TUHJpbnRPcGVyYXRpb258TlNQcmludFBhbmVsfE5TUHJvY2Vzc0luZm98TlNQcm90b2NvbENoZWNrZXJ8TlNQcm9wZXJ0eVNwZWNpZmllcnxOU1Byb3BlcnR5TGlzdFNlcmlhbGl6YXRpb258TlNQcm9ncmVzc0luZGljYXRvcnxOU1Byb3h5fE5TUHJlZGljYXRlfE5TRW51bWVyYXRvcnxOU0V2ZW50fE5TRVBTSW1hZ2VSZXB8TlNFcnJvcnxOU0V4Y2VwdGlvbnxOU0V4aXN0c0NvbW1hbmR8TlNFeHByZXNzaW9ufE5TVmlld3xOU1ZpZXdBbmltYXRpb258TlNWYWxpZGF0ZWRUb29iYXJJdGVtfE5TVmFsaWRhdGVkVXNlckludGVyZmFjZUl0ZW18TlNWYWx1ZVRyYW5zZm9ybWVyfE5TS2V5ZWRVbmFyY2hpdmVyfE5TS2V5ZWRBcmNoaXZlcnxOU1F1aWNrRHJhd1ZpZXd8TlNRdWl0Q29tbWFuZHxOU0ZpbGVNYW5hZ2VyfE5TRmlsZUhhbmRsZXxOU0ZpbGVXcmFwcGVyfE5TRm9udHxOU0ZvbnRNYW5hZ2VyfE5TRm9udERlc2NyaXB0b3J8TlNGb250UGFuZWx8TlNGb3JtQ2VsbHxOU0Zvcm1hdHRlcnxOU1dob3NlU3BlY2lmaWVyfE5TV2luZG93fE5TV2luZG93Q29udHJvbGxlcnxOU1dvcmtzcGFjZXxOU0xvY2t8TlNMb2NraW5nfE5TTG9jYWxlfE5TTG9naWNhbFRlc3R8TlNMZXZlbEluZGljYXRvcnxOU0xldmVsSW5kaWNhdG9yQ2VsbHxOU0xheW91dE1hbmFnZXJ8TlNBc3NlcnRpb25IYW5kbGVyfE5TQW5pbWF0aW9ufE5TQWN0aW9uQ2VsbHxOU0F0dHJpYnV0ZWRTdHJpbmd8TlNBdXRvcmVsZWFzZVBvb2x8TlNBVFNUeXBlc2V0dGVyfE5TQXBwbGljYXRpb258TlNBcHBsZVNjcmlwdHxOU0FwcGxlRXZlbnRNYW5hZ2VyfE5TQXBwbGVFdmVudERlc2NyaXB0b3J8TlNBZmZpbmVUcmFuc2Zvcm18TlNBbGVydHxOU0FyY2hpdmVyfE5TQXJyYXl8TlNBcnJheUNvbnRyb2xsZXJcIixcbiAgICAgICAgXCJzdXBwb3J0LnR5cGUuY29jb2EubGVvcGFyZFwiOiBcIlwiLFxuICAgICAgICBcInN1cHBvcnQuY2xhc3MucXVhcnR6XCI6IFwiQ0lTYW1wbGVyfENJQ29udGV4dHxDSUNvbG9yfENJSW1hZ2V8Q0lJbWFnZUFjY3VtdWxhdG9yfENJUGx1Z0lufENJUGx1Z0luUmVnaXN0cmF0aW9ufENJVmVjdG9yfENJS2VybmVsfENJRmlsdGVyfENJRmlsdGVyR2VuZXJhdG9yfENJRmlsdGVyU2hhcGV8Q0FSZW5kZXJlcnxDQU1lZGlhVGltaW5nfENBTWVkaWFUaW1pbmdGdW5jdGlvbnxDQUJhc2ljQW5pbWF0aW9ufENBU2Nyb2xsTGF5ZXJ8Q0FDb25zdHJhaW50fENBQ29uc3RyYWludExheW91dE1hbmFnZXJ8Q0FUaWxlZExheWVyfENBVGV4dExheWVyfENBVHJhbnNpdGlvbnxDQVRyYW5zYWN0aW9ufENBT3BlbkdMTGF5ZXJ8Q0FQcm9wZXJ0eUFuaW1hdGlvbnxDQUtleWZyYW1lQW5pbWF0aW9ufENBTGF5ZXJ8Q0FBbmltYXRpb258Q0FBbmltYXRpb25Hcm91cHxDQUFjdGlvblwiLFxuICAgICAgICBcInN1cHBvcnQudHlwZS5xdWFydHpcIjogXCJDR0Zsb2F0fENHUG9pbnR8Q0dTaXplfENHUmVjdHxDSUZvcm1hdHxDQUNvbnN0cmFpbnRBdHRyaWJ1dGVcIixcbiAgICAgICAgXCJzdXBwb3J0LnR5cGUuY29jb2FcIjogXCJOU1JlY3R8TlNSZWN0RWRnZXxOU1JhbmdlfE5TR2x5cGh8TlNHbHlwaFJlbGF0aW9ufE5TR2x5cGhMYXlvdXRNb2RlfE5TR3JhZGllbnRUeXBlfE5TTW9kYWxTZXNzaW9ufE5TTWF0cml4TW9kZXxOU01hcEVudW1lcmF0b3J8TlNCaXRtYXBJbWFnZUZpbGVUeXBlfE5TQm9yZGVyVHlwZXxOU0J1dHRvblR5cGV8TlNCZXplbFN0eWxlfE5TQmFja2luZ1N0b3JlVHlwZXxOU0Jyb3dzZXJDb2x1bW5SZXNpemluZ1R5cGV8TlNTY3JvbGxlclBhcnR8TlNTY3JvbGxlckFycm93fE5TU2Nyb2xsQXJyb3dQb3NpdGlvbnxOU1NjcmVlbkF1eGlsaWFyeU9wYXF1ZXxOU1N0cmluZ0VuY29kaW5nfE5TU2l6ZXxOU1NvY2tldE5hdGl2ZUhhbmRsZXxOU1NlbGVjdGlvbkdyYW51bGFyaXR5fE5TU2VsZWN0aW9uRGlyZWN0aW9ufE5TU2VsZWN0aW9uQWZmaW5pdHl8TlNTd2FwcGVkRG91YmxlfE5TU3dhcHBlZEZsb2F0fE5TU2F2ZU9wZXJhdGlvblR5cGV8TlNIYXNoRW51bWVyYXRvcnxOU0hhbmRsZXJ8TlNIYW5kbGVyMnxOU0NvbnRyb2xTaXplfE5TQ29udHJvbFRpbnR8TlNDb21wb3NpdGluZ09wZXJhdGlvbnxOU0NvbXBhcmlzb25SZXN1bHR8TlNDZWxsU3RhdGV8TlNDZWxsVHlwZXxOU0NlbGxJbWFnZVBvc2l0aW9ufE5TQ2VsbEF0dHJpYnV0ZXxOU1RocmVhZFByaXZhdGV8TlNUeXBlc2V0dGVyR2x5cGhJbmZvfE5TVGlja01hcmtQb3NpdGlvbnxOU1RpdGxlUG9zaXRpb258TlNUaW1lSW50ZXJ2YWx8TlNUb29sVGlwVGFnfE5TVG9vbGJhclNpemVNb2RlfE5TVG9vbGJhckRpc3BsYXlNb2RlfE5TVG9rZW5TdHlsZXxOU1RJRkZDb21wcmVzc2lvbnxOU1RleHRUYWJUeXBlfE5TVGV4dEFsaWdubWVudHxOU1RhYlN0YXRlfE5TVGFibGVWaWV3RHJvcE9wZXJhdGlvbnxOU1RhYlZpZXdUeXBlfE5TVHJhY2tpbmdSZWN0VGFnfE5TSW1hZ2VJbnRlcnBvbGF0aW9ufE5TWm9uZXxOU09wZW5HTENvbnRleHRBdXhpbGlhcnl8TlNPcGVuR0xQaXhlbEZvcm1hdEF1eGlsaWFyeXxOU0RvY3VtZW50Q2hhbmdlVHlwZXxOU0RhdGVQaWNrZXJFbGVtZW50RmxhZ3N8TlNEcmF3ZXJTdGF0ZXxOU0RyYWdPcGVyYXRpb258TlNVc2FibGVTY3JvbGxlclBhcnRzfE5TUG9pbnR8TlNQcmludGluZ1BhZ2VPcmRlcnxOU1Byb2dyZXNzSW5kaWNhdG9yU3R5bGV8TlNQcm9ncmVzc0luZGljYXRvclRoaWNrbmVzc3xOU1Byb2dyZXNzSW5kaWNhdG9yVGhyZWFkSW5mb3xOU0V2ZW50VHlwZXxOU0tleVZhbHVlT2JzZXJ2aW5nT3B0aW9uc3xOU0ZvbnRTeW1ib2xpY1RyYWl0c3xOU0ZvbnRUcmFpdE1hc2t8TlNGb250QWN0aW9ufE5TRm9jdXNSaW5nVHlwZXxOU1dpbmRvd09yZGVyaW5nTW9kZXxOU1dpbmRvd0RlcHRofE5TV29ya3NwYWNlSWNvbkNyZWF0aW9uT3B0aW9uc3xOU1dvcmtzcGFjZUxhdW5jaE9wdGlvbnN8TlNXcml0aW5nRGlyZWN0aW9ufE5TTGluZUJyZWFrTW9kZXxOU0xheW91dFN0YXR1c3xOU0xheW91dERpcmVjdGlvbnxOU0FuaW1hdGlvblByb2dyZXNzfE5TQW5pbWF0aW9uRWZmZWN0fE5TQXBwbGljYXRpb25UZXJtaW5hdGVSZXBseXxOU0FwcGxpY2F0aW9uRGVsZWdhdGVSZXBseXxOU0FwcGxpY2F0aW9uUHJpbnRSZXBseXxOU0FwcGxlRXZlbnRNYW5hZ2VyU3VzcGVuc2lvbklEfE5TQWZmaW5lVHJhbnNmb3JtU3RydWN0fE5TQWxlcnRTdHlsZVwiLFxuICAgICAgICBcInN1cHBvcnQuY29uc3RhbnQuY29jb2FcIjogXCJOU1JHQk1vZGVDb2xvclBhbmVsfE5TUkdCQ29sb3JTcGFjZU1vZGVsfE5TUmlnaHRNb3VzZURvd258TlNSaWdodE1vdXNlRG93bk1hc2t8TlNSaWdodE1vdXNlRHJhZ2dlZHxOU1JpZ2h0TW91c2VEcmFnZ2VkTWFza3xOU1JpZ2h0TW91c2VVcHxOU1JpZ2h0TW91c2VVcE1hc2t8TlNSaWdodFRleHRNb3ZlbWVudHxOU1JpZ2h0VGV4dEFsaWdubWVudHxOU1JpZ2h0VGFic0JlemVsQm9yZGVyfE5TUmlnaHRUYWJTdG9wVHlwZXxOU1JpZ2h0QXJyb3dGdW5jdGlvbktleXxOU1JvdW5kUmVjdEJlemVsU3R5bGV8TlNSb3VuZEJhbmtlcnN8TlNSb3VuZGVkQmV6ZWxTdHlsZXxOU1JvdW5kZWRUb2tlblN0eWxlfE5TUm91bmRlZERpc2Nsb3N1cmVCZXplbFN0eWxlfE5TUm91bmREb3dufE5TUm91bmRVcHxOU1JvdW5kUGxhaW58TlNSb3VuZExpbmVDYXBTdHlsZXxOU1JvdW5kTGluZUpvaW5TdHlsZXxOU1J1blN0b3BwZWRSZXNwb25zZXxOU1J1bkNvbnRpbnVlc1Jlc3BvbnNlfE5TUnVuQWJvcnRlZFJlc3BvbnNlfE5TUmVzaXphYmxlV2luZG93TWFza3xOU1Jlc2V0Q3Vyc29yUmVjdHNSdW5Mb29wT3JkZXJpbmd8TlNSZXNldEZ1bmN0aW9uS2V5fE5TUmVjZXNzZWRCZXplbFN0eWxlfE5TUmVjZWl2ZXJzQ2FudEhhbmRsZUNvbW1hbmRTY3JpcHRFcnJvcnxOU1JlY2VpdmVyRXZhbHVhdGlvblNjcmlwdEVycm9yfE5TUmV0dXJuVGV4dE1vdmVtZW50fE5TUmVkb0Z1bmN0aW9uS2V5fE5TUmVxdWlyZWRBcmd1bWVudHNNaXNzaW5nU2NyaXB0RXJyb3J8TlNSZWxldmFuY3lMZXZlbEluZGljYXRvclN0eWxlfE5TUmVsYXRpdmVCZWZvcmV8TlNSZWxhdGl2ZUFmdGVyfE5TUmVndWxhclNxdWFyZUJlemVsU3R5bGV8TlNSZWd1bGFyQ29udHJvbFNpemV8TlNSZW1vdmVUcmFpdEZvbnRBY3Rpb258TlNSYW5kb21TdWJlbGVtZW50fE5TUmFuZ2VEYXRlTW9kZXxOU1JhdGluZ0xldmVsSW5kaWNhdG9yU3R5bGV8TlNSYWRpb01vZGVNYXRyaXh8TlNSYWRpb0J1dHRvbnxOU0dJRkZpbGVUeXBlfE5TR2x5cGhCZWxvd3xOU0dseXBoSW5zY3JpYmVCZWxvd3xOU0dseXBoSW5zY3JpYmVCYXNlfE5TR2x5cGhJbnNjcmliZU92ZXJzdHJpa2V8TlNHbHlwaEluc2NyaWJlT3ZlckJlbG93fE5TR2x5cGhJbnNjcmliZUFib3ZlfE5TR2x5cGhMYXlvdXRXaXRoUHJldmlvdXN8TlNHbHlwaExheW91dEF0QVBvaW50fE5TR2x5cGhMYXlvdXRBZ2FpbnN0QVBvaW50fE5TR2x5cGhBdHRyaWJ1dGVCaWRpTGV2ZWx8TlNHbHlwaEF0dHJpYnV0ZVNvZnR8TlNHbHlwaEF0dHJpYnV0ZUluc2NyaWJlfE5TR2x5cGhBdHRyaWJ1dGVFbGFzdGljfE5TR2x5cGhBYm92ZXxOU0dyb292ZUJvcmRlcnxOU0dyZWF0ZXJUaGFuQ29tcGFyaXNvbnxOU0dyZWF0ZXJUaGFuT3JFcXVhbFRvQ29tcGFyaXNvbnxOU0dyZWF0ZXJUaGFuT3JFcXVhbFRvUHJlZGljYXRlT3BlcmF0b3JUeXBlfE5TR3JlYXRlclRoYW5QcmVkaWNhdGVPcGVyYXRvclR5cGV8TlNHcmF5TW9kZUNvbG9yUGFuZWx8TlNHcmF5Q29sb3JTcGFjZU1vZGVsfE5TR3JhZGllbnROb25lfE5TR3JhZGllbnRDb25jYXZlU3Ryb25nfE5TR3JhZGllbnRDb25jYXZlV2Vha3xOU0dyYWRpZW50Q29udmV4U3Ryb25nfE5TR3JhZGllbnRDb252ZXhXZWFrfE5TR3JhcGhpdGVDb250cm9sVGludHxOU1hNTE5vdGF0aW9uRGVjbGFyYXRpb25LaW5kfE5TWE1MTm9kZUNvbXBhY3RFbXB0eUVsZW1lbnR8TlNYTUxOb2RlSXNDREFUQXxOU1hNTE5vZGVPcHRpb25zTm9uZXxOU1hNTE5vZGVVc2VTaW5nbGVRdW90ZXN8TlNYTUxOb2RlVXNlRG91YmxlUXVvdGVzfE5TWE1MTm9kZVByZXNlcnZlTmFtZXNwYWNlT3JkZXJ8TlNYTUxOb2RlUHJlc2VydmVDaGFyYWN0ZXJSZWZlcmVuY2VzfE5TWE1MTm9kZVByZXNlcnZlQ0RBVEF8TlNYTUxOb2RlUHJlc2VydmVEVER8TlNYTUxOb2RlUHJlc2VydmVQcmVmaXhlc3xOU1hNTE5vZGVQcmVzZXJ2ZUVudGl0aWVzfE5TWE1MTm9kZVByZXNlcnZlRW1wdHlFbGVtZW50c3xOU1hNTE5vZGVQcmVzZXJ2ZVF1b3Rlc3xOU1hNTE5vZGVQcmVzZXJ2ZVdoaXRlc3BhY2V8TlNYTUxOb2RlUHJlc2VydmVBdHRyaWJ1dGVPcmRlcnxOU1hNTE5vZGVQcmVzZXJ2ZUFsbHxOU1hNTE5vZGVQcmV0dHlQcmludHxOU1hNTE5vZGVFeHBhbmRFbXB0eUVsZW1lbnR8TlNYTUxOYW1lc3BhY2VLaW5kfE5TWE1MQ29tbWVudEtpbmR8TlNYTUxUZXh0S2luZHxOU1hNTEludmFsaWRLaW5kfE5TWE1MRG9jdW1lbnRYTUxLaW5kfE5TWE1MRG9jdW1lbnRYSFRNTEtpbmR8TlNYTUxEb2N1bWVudFhJbmNsdWRlfE5TWE1MRG9jdW1lbnRIVE1MS2luZHxOU1hNTERvY3VtZW50VGlkeVhNTHxOU1hNTERvY3VtZW50VGlkeUhUTUx8TlNYTUxEb2N1bWVudFRleHRLaW5kfE5TWE1MRG9jdW1lbnRJbmNsdWRlQ29udGVudFR5cGVEZWNsYXJhdGlvbnxOU1hNTERvY3VtZW50VmFsaWRhdGV8TlNYTUxEb2N1bWVudEtpbmR8TlNYTUxEVERLaW5kfE5TWE1MUGFyc2VyR1RSZXF1aXJlZEVycm9yfE5TWE1MUGFyc2VyWE1MRGVjbE5vdFN0YXJ0ZWRFcnJvcnxOU1hNTFBhcnNlclhNTERlY2xOb3RGaW5pc2hlZEVycm9yfE5TWE1MUGFyc2VyTWlzcGxhY2VkWE1MRGVjbGFyYXRpb25FcnJvcnxOU1hNTFBhcnNlck1pc3BsYWNlZENEQVRBRW5kU3RyaW5nRXJyb3J8TlNYTUxQYXJzZXJNaXhlZENvbnRlbnREZWNsTm90U3RhcnRlZEVycm9yfE5TWE1MUGFyc2VyTWl4ZWRDb250ZW50RGVjbE5vdEZpbmlzaGVkRXJyb3J8TlNYTUxQYXJzZXJTdGFuZGFsb25lVmFsdWVFcnJvcnxOU1hNTFBhcnNlclN0cmluZ05vdFN0YXJ0ZWRFcnJvcnxOU1hNTFBhcnNlclN0cmluZ05vdENsb3NlZEVycm9yfE5TWE1MUGFyc2VyU3BhY2VSZXF1aXJlZEVycm9yfE5TWE1MUGFyc2VyU2VwYXJhdG9yUmVxdWlyZWRFcnJvcnxOU1hNTFBhcnNlck5NVE9LRU5SZXF1aXJlZEVycm9yfE5TWE1MUGFyc2VyTm90YXRpb25Ob3RTdGFydGVkRXJyb3J8TlNYTUxQYXJzZXJOb3RhdGlvbk5vdEZpbmlzaGVkRXJyb3J8TlNYTUxQYXJzZXJOb3RXZWxsQmFsYW5jZWRFcnJvcnxOU1hNTFBhcnNlck5vRFRERXJyb3J8TlNYTUxQYXJzZXJOYW1lc3BhY2VEZWNsYXJhdGlvbkVycm9yfE5TWE1MUGFyc2VyTkFNRVJlcXVpcmVkRXJyb3J8TlNYTUxQYXJzZXJDaGFyYWN0ZXJSZWZJbkRUREVycm9yfE5TWE1MUGFyc2VyQ2hhcmFjdGVyUmVmSW5Qcm9sb2dFcnJvcnxOU1hNTFBhcnNlckNoYXJhY3RlclJlZkluRXBpbG9nRXJyb3J8TlNYTUxQYXJzZXJDaGFyYWN0ZXJSZWZBdEVPRkVycm9yfE5TWE1MUGFyc2VyQ29uZGl0aW9uYWxTZWN0aW9uTm90U3RhcnRlZEVycm9yfE5TWE1MUGFyc2VyQ29uZGl0aW9uYWxTZWN0aW9uTm90RmluaXNoZWRFcnJvcnxOU1hNTFBhcnNlckNvbW1lbnROb3RGaW5pc2hlZEVycm9yfE5TWE1MUGFyc2VyQ29tbWVudENvbnRhaW5zRG91YmxlSHlwaGVuRXJyb3J8TlNYTUxQYXJzZXJDREFUQU5vdEZpbmlzaGVkRXJyb3J8TlNYTUxQYXJzZXJUYWdOYW1lTWlzbWF0Y2hFcnJvcnxOU1hNTFBhcnNlckludGVybmFsRXJyb3J8TlNYTUxQYXJzZXJJbnZhbGlkSGV4Q2hhcmFjdGVyUmVmRXJyb3J8TlNYTUxQYXJzZXJJbnZhbGlkQ2hhcmFjdGVyUmVmRXJyb3J8TlNYTUxQYXJzZXJJbnZhbGlkQ2hhcmFjdGVySW5FbnRpdHlFcnJvcnxOU1hNTFBhcnNlckludmFsaWRDaGFyYWN0ZXJFcnJvcnxOU1hNTFBhcnNlckludmFsaWRDb25kaXRpb25hbFNlY3Rpb25FcnJvcnxOU1hNTFBhcnNlckludmFsaWREZWNpbWFsQ2hhcmFjdGVyUmVmRXJyb3J8TlNYTUxQYXJzZXJJbnZhbGlkVVJJRXJyb3J8TlNYTUxQYXJzZXJJbnZhbGlkRW5jb2RpbmdOYW1lRXJyb3J8TlNYTUxQYXJzZXJJbnZhbGlkRW5jb2RpbmdFcnJvcnxOU1hNTFBhcnNlck91dE9mTWVtb3J5RXJyb3J8TlNYTUxQYXJzZXJEb2N1bWVudFN0YXJ0RXJyb3J8TlNYTUxQYXJzZXJEZWxlZ2F0ZUFib3J0ZWRQYXJzZUVycm9yfE5TWE1MUGFyc2VyRE9DVFlQRURlY2xOb3RGaW5pc2hlZEVycm9yfE5TWE1MUGFyc2VyVVJJUmVxdWlyZWRFcnJvcnxOU1hNTFBhcnNlclVSSUZyYWdtZW50RXJyb3J8TlNYTUxQYXJzZXJVbmRlY2xhcmVkRW50aXR5RXJyb3J8TlNYTUxQYXJzZXJVbnBhcnNlZEVudGl0eUVycm9yfE5TWE1MUGFyc2VyVW5rbm93bkVuY29kaW5nRXJyb3J8TlNYTUxQYXJzZXJVbmZpbmlzaGVkVGFnRXJyb3J8TlNYTUxQYXJzZXJQQ0RBVEFSZXF1aXJlZEVycm9yfE5TWE1MUGFyc2VyUHVibGljSWRlbnRpZmllclJlcXVpcmVkRXJyb3J8TlNYTUxQYXJzZXJQYXJzZWRFbnRpdHlSZWZNaXNzaW5nU2VtaUVycm9yfE5TWE1MUGFyc2VyUGFyc2VkRW50aXR5UmVmTm9OYW1lRXJyb3J8TlNYTUxQYXJzZXJQYXJzZWRFbnRpdHlSZWZJbkludGVybmFsU3Vic2V0RXJyb3J8TlNYTUxQYXJzZXJQYXJzZWRFbnRpdHlSZWZJbkludGVybmFsRXJyb3J8TlNYTUxQYXJzZXJQYXJzZWRFbnRpdHlSZWZJblByb2xvZ0Vycm9yfE5TWE1MUGFyc2VyUGFyc2VkRW50aXR5UmVmSW5FcGlsb2dFcnJvcnxOU1hNTFBhcnNlclBhcnNlZEVudGl0eVJlZkF0RU9GRXJyb3J8TlNYTUxQYXJzZXJQcm9jZXNzaW5nSW5zdHJ1Y3Rpb25Ob3RTdGFydGVkRXJyb3J8TlNYTUxQYXJzZXJQcm9jZXNzaW5nSW5zdHJ1Y3Rpb25Ob3RGaW5pc2hlZEVycm9yfE5TWE1MUGFyc2VyUHJlbWF0dXJlRG9jdW1lbnRFbmRFcnJvcnxOU1hNTFBhcnNlckVuY29kaW5nTm90U3VwcG9ydGVkRXJyb3J8TlNYTUxQYXJzZXJFbnRpdHlSZWZJbkRUREVycm9yfE5TWE1MUGFyc2VyRW50aXR5UmVmSW5Qcm9sb2dFcnJvcnxOU1hNTFBhcnNlckVudGl0eVJlZkluRXBpbG9nRXJyb3J8TlNYTUxQYXJzZXJFbnRpdHlSZWZlcmVuY2VNaXNzaW5nU2VtaUVycm9yfE5TWE1MUGFyc2VyRW50aXR5UmVmZXJlbmNlV2l0aG91dE5hbWVFcnJvcnxOU1hNTFBhcnNlckVudGl0eVJlZkxvb3BFcnJvcnxOU1hNTFBhcnNlckVudGl0eVJlZkF0RU9GRXJyb3J8TlNYTUxQYXJzZXJFbnRpdHlCb3VuZGFyeUVycm9yfE5TWE1MUGFyc2VyRW50aXR5Tm90U3RhcnRlZEVycm9yfE5TWE1MUGFyc2VyRW50aXR5Tm90RmluaXNoZWRFcnJvcnxOU1hNTFBhcnNlckVudGl0eUlzUGFyYW1ldGVyRXJyb3J8TlNYTUxQYXJzZXJFbnRpdHlJc0V4dGVybmFsRXJyb3J8TlNYTUxQYXJzZXJFbnRpdHlWYWx1ZVJlcXVpcmVkRXJyb3J8TlNYTUxQYXJzZXJFcXVhbEV4cGVjdGVkRXJyb3J8TlNYTUxQYXJzZXJFbGVtZW50Q29udGVudERlY2xOb3RTdGFydGVkRXJyb3J8TlNYTUxQYXJzZXJFbGVtZW50Q29udGVudERlY2xOb3RGaW5pc2hlZEVycm9yfE5TWE1MUGFyc2VyRXh0ZXJuYWxTdGFuZGFsb25lRW50aXR5RXJyb3J8TlNYTUxQYXJzZXJFeHRlcm5hbFN1YnNldE5vdEZpbmlzaGVkRXJyb3J8TlNYTUxQYXJzZXJFeHRyYUNvbnRlbnRFcnJvcnxOU1hNTFBhcnNlckVtcHR5RG9jdW1lbnRFcnJvcnxOU1hNTFBhcnNlckxpdGVyYWxOb3RTdGFydGVkRXJyb3J8TlNYTUxQYXJzZXJMaXRlcmFsTm90RmluaXNoZWRFcnJvcnxOU1hNTFBhcnNlckxUUmVxdWlyZWRFcnJvcnxOU1hNTFBhcnNlckxUU2xhc2hSZXF1aXJlZEVycm9yfE5TWE1MUGFyc2VyTGVzc1RoYW5TeW1ib2xJbkF0dHJpYnV0ZUVycm9yfE5TWE1MUGFyc2VyQXR0cmlidXRlUmVkZWZpbmVkRXJyb3J8TlNYTUxQYXJzZXJBdHRyaWJ1dGVIYXNOb1ZhbHVlRXJyb3J8TlNYTUxQYXJzZXJBdHRyaWJ1dGVOb3RTdGFydGVkRXJyb3J8TlNYTUxQYXJzZXJBdHRyaWJ1dGVOb3RGaW5pc2hlZEVycm9yfE5TWE1MUGFyc2VyQXR0cmlidXRlTGlzdE5vdFN0YXJ0ZWRFcnJvcnxOU1hNTFBhcnNlckF0dHJpYnV0ZUxpc3ROb3RGaW5pc2hlZEVycm9yfE5TWE1MUHJvY2Vzc2luZ0luc3RydWN0aW9uS2luZHxOU1hNTEVudGl0eUdlbmVyYWxLaW5kfE5TWE1MRW50aXR5RGVjbGFyYXRpb25LaW5kfE5TWE1MRW50aXR5VW5wYXJzZWRLaW5kfE5TWE1MRW50aXR5UGFyc2VkS2luZHxOU1hNTEVudGl0eVBhcmFtZXRlcktpbmR8TlNYTUxFbnRpdHlQcmVkZWZpbmVkfE5TWE1MRWxlbWVudERlY2xhcmF0aW9uTWl4ZWRLaW5kfE5TWE1MRWxlbWVudERlY2xhcmF0aW9uVW5kZWZpbmVkS2luZHxOU1hNTEVsZW1lbnREZWNsYXJhdGlvbkVsZW1lbnRLaW5kfE5TWE1MRWxlbWVudERlY2xhcmF0aW9uRW1wdHlLaW5kfE5TWE1MRWxlbWVudERlY2xhcmF0aW9uS2luZHxOU1hNTEVsZW1lbnREZWNsYXJhdGlvbkFueUtpbmR8TlNYTUxFbGVtZW50S2luZHxOU1hNTEF0dHJpYnV0ZU5NVG9rZW5zS2luZHxOU1hNTEF0dHJpYnV0ZU5NVG9rZW5LaW5kfE5TWE1MQXR0cmlidXRlTm90YXRpb25LaW5kfE5TWE1MQXR0cmlidXRlQ0RBVEFLaW5kfE5TWE1MQXR0cmlidXRlSURSZWZzS2luZHxOU1hNTEF0dHJpYnV0ZUlEUmVmS2luZHxOU1hNTEF0dHJpYnV0ZUlES2luZHxOU1hNTEF0dHJpYnV0ZURlY2xhcmF0aW9uS2luZHxOU1hNTEF0dHJpYnV0ZUVudGl0eUtpbmR8TlNYTUxBdHRyaWJ1dGVFbnRpdGllc0tpbmR8TlNYTUxBdHRyaWJ1dGVFbnVtZXJhdGlvbktpbmR8TlNYTUxBdHRyaWJ1dGVLaW5kfE5TTWluWEVkZ2V8TlNNaW5pYXR1cml6YWJsZVdpbmRvd01hc2t8TlNNaW5ZRWRnZXxOU01pbnV0ZUNhbGVuZGFyVW5pdHxOU01pdGVyTGluZUpvaW5TdHlsZXxOU01pZGRsZVN1YmVsZW1lbnR8TlNNaXhlZFN0YXRlfE5TTW9udGhDYWxlbmRhclVuaXR8TlNNb2RlU3dpdGNoRnVuY3Rpb25LZXl8TlNNb3VzZU1vdmVkfE5TTW91c2VNb3ZlZE1hc2t8TlNNb3VzZUVudGVyZWR8TlNNb3VzZUVudGVyZWRNYXNrfE5TTW91c2VFdmVudFN1YnR5cGV8TlNNb3VzZUV4aXRlZHxOU01vdXNlRXhpdGVkTWFza3xOU01vdmVUb0JlemllclBhdGhFbGVtZW50fE5TTW9tZW50YXJ5Q2hhbmdlQnV0dG9ufE5TTW9tZW50YXJ5UHVzaEJ1dHRvbnxOU01vbWVudGFyeVB1c2hJbkJ1dHRvbnxOU01vbWVudGFyeUxpZ2h0fE5TTW9tZW50YXJ5TGlnaHRCdXR0b258TlNNZW51RnVuY3Rpb25LZXl8TlNNYWNpbnRvc2hJbnRlcmZhY2VTdHlsZXxOU01hY09TUm9tYW5TdHJpbmdFbmNvZGluZ3xOU01hdGNoZXNQcmVkaWNhdGVPcGVyYXRvclR5cGV8TlNNYXBwZWRSZWFkfE5TTWF4WEVkZ2V8TlNNYXhZRWRnZXxOU01BQ0hPcGVyYXRpbmdTeXN0ZW18TlNCTVBGaWxlVHlwZXxOU0JvdHRvbVRhYnNCZXplbEJvcmRlcnxOU0JvbGRGb250TWFza3xOU0JvcmRlcmxlc3NXaW5kb3dNYXNrfE5TQm94U2Vjb25kYXJ5fE5TQm94U2VwYXJhdG9yfE5TQm94T2xkU3R5bGV8TlNCb3hQcmltYXJ5fE5TQnV0dExpbmVDYXBTdHlsZXxOU0JlemVsQm9yZGVyfE5TQmV2ZWxMaW5lSm9pblN0eWxlfE5TQmVsb3dCb3R0b218TlNCZWxvd1RvcHxOU0JlZ2luc1dpdGhDb21wYXJpc29ufE5TQmVnaW5zV2l0aFByZWRpY2F0ZU9wZXJhdG9yVHlwZXxOU0JlZ2luRnVuY3Rpb25LZXl8TlNCbHVlQ29udHJvbFRpbnR8TlNCYWNrc3BhY2VDaGFyYWN0ZXJ8TlNCYWNrdGFiVGV4dE1vdmVtZW50fE5TQmFja2luZ1N0b3JlUmV0YWluZWR8TlNCYWNraW5nU3RvcmVCdWZmZXJlZHxOU0JhY2tpbmdTdG9yZU5vbnJldGFpbmVkfE5TQmFja1RhYkNoYXJhY3RlcnxOU0JhY2t3YXJkc1NlYXJjaHxOU0JhY2tncm91bmRUYWJ8TlNCcm93c2VyTm9Db2x1bW5SZXNpemluZ3xOU0Jyb3dzZXJVc2VyQ29sdW1uUmVzaXppbmd8TlNCcm93c2VyQXV0b0NvbHVtblJlc2l6aW5nfE5TQnJlYWtGdW5jdGlvbktleXxOU1NoaWZ0SklTU3RyaW5nRW5jb2Rpbmd8TlNTaGlmdEtleU1hc2t8TlNTaG93Q29udHJvbEdseXBoc3xOU1Nob3dJbnZpc2libGVHbHlwaHN8TlNTaGFkb3dsZXNzU3F1YXJlQmV6ZWxTdHlsZXxOU1N5c1JlcUZ1bmN0aW9uS2V5fE5TU3lzdGVtRG9tYWluTWFza3xOU1N5c3RlbURlZmluZWR8TlNTeXN0ZW1EZWZpbmVkTWFza3xOU1N5c3RlbUZ1bmN0aW9uS2V5fE5TU3ltYm9sU3RyaW5nRW5jb2Rpbmd8TlNTY2FubmVkT3B0aW9ufE5TU2NhbGVOb25lfE5TU2NhbGVUb0ZpdHxOU1NjYWxlUHJvcG9ydGlvbmFsbHl8TlNTY3JvbGxlck5vUGFydHxOU1Njcm9sbGVySW5jcmVtZW50UGFnZXxOU1Njcm9sbGVySW5jcmVtZW50TGluZXxOU1Njcm9sbGVySW5jcmVtZW50QXJyb3d8TlNTY3JvbGxlckRlY3JlbWVudFBhZ2V8TlNTY3JvbGxlckRlY3JlbWVudExpbmV8TlNTY3JvbGxlckRlY3JlbWVudEFycm93fE5TU2Nyb2xsZXJLbm9ifE5TU2Nyb2xsZXJLbm9iU2xvdHxOU1Njcm9sbGVyQXJyb3dzTWluRW5kfE5TU2Nyb2xsZXJBcnJvd3NNYXhFbmR8TlNTY3JvbGxlckFycm93c05vbmV8TlNTY3JvbGxlckFycm93c0RlZmF1bHRTZXR0aW5nfE5TU2Nyb2xsV2hlZWx8TlNTY3JvbGxXaGVlbE1hc2t8TlNTY3JvbGxMb2NrRnVuY3Rpb25LZXl8TlNTY3JlZW5DaGFuZ2VkRXZlbnRUeXBlfE5TU3RvcEZ1bmN0aW9uS2V5fE5TU3RyaW5nRHJhd2luZ09uZVNob3R8TlNTdHJpbmdEcmF3aW5nRGlzYWJsZVNjcmVlbkZvbnRTdWJzdGl0dXRpb258TlNTdHJpbmdEcmF3aW5nVXNlc0RldmljZU1ldHJpY3N8TlNTdHJpbmdEcmF3aW5nVXNlc0ZvbnRMZWFkaW5nfE5TU3RyaW5nRHJhd2luZ1VzZXNMaW5lRnJhZ21lbnRPcmlnaW58TlNTdHJlYW1TdGF0dXNSZWFkaW5nfE5TU3RyZWFtU3RhdHVzTm90T3BlbnxOU1N0cmVhbVN0YXR1c0Nsb3NlZHxOU1N0cmVhbVN0YXR1c09wZW58TlNTdHJlYW1TdGF0dXNPcGVuaW5nfE5TU3RyZWFtU3RhdHVzRXJyb3J8TlNTdHJlYW1TdGF0dXNXcml0aW5nfE5TU3RyZWFtU3RhdHVzQXRFbmR8TlNTdHJlYW1FdmVudEhhc0J5dGVzQXZhaWxhYmxlfE5TU3RyZWFtRXZlbnRIYXNTcGFjZUF2YWlsYWJsZXxOU1N0cmVhbUV2ZW50Tm9uZXxOU1N0cmVhbUV2ZW50T3BlbkNvbXBsZXRlZHxOU1N0cmVhbUV2ZW50RW5kRW5jb3VudGVyZWR8TlNTdHJlYW1FdmVudEVycm9yT2NjdXJyZWR8TlNTaW5nbGVEYXRlTW9kZXxOU1NpbmdsZVVuZGVybGluZVN0eWxlfE5TU2l6ZURvd25Gb250QWN0aW9ufE5TU2l6ZVVwRm9udEFjdGlvbnxOU1NvbGFyaXNPcGVyYXRpbmdTeXN0ZW18TlNTdW5PU09wZXJhdGluZ1N5c3RlbXxOU1NwZWNpYWxQYWdlT3JkZXJ8TlNTZWNvbmRDYWxlbmRhclVuaXR8TlNTZWxlY3RCeUNoYXJhY3RlcnxOU1NlbGVjdEJ5UGFyYWdyYXBofE5TU2VsZWN0QnlXb3JkfE5TU2VsZWN0aW5nTmV4dHxOU1NlbGVjdGluZ1ByZXZpb3VzfE5TU2VsZWN0aW9uQWZmaW5pdHlEb3duc3RyZWFtfE5TU2VsZWN0aW9uQWZmaW5pdHlVcHN0cmVhbXxOU1NlbGVjdGVkVGFifE5TU2VsZWN0RnVuY3Rpb25LZXl8TlNTZWdtZW50U3dpdGNoVHJhY2tpbmdNb21lbnRhcnl8TlNTZWdtZW50U3dpdGNoVHJhY2tpbmdTZWxlY3RPbmV8TlNTZWdtZW50U3dpdGNoVHJhY2tpbmdTZWxlY3RBbnl8TlNTcXVhcmVMaW5lQ2FwU3R5bGV8TlNTd2l0Y2hCdXR0b258TlNTYXZlVG9PcGVyYXRpb258TlNTYXZlT3B0aW9uc1llc3xOU1NhdmVPcHRpb25zTm98TlNTYXZlT3B0aW9uc0Fza3xOU1NhdmVPcGVyYXRpb258TlNTYXZlQXNPcGVyYXRpb258TlNTbWFsbFNxdWFyZUJlemVsU3R5bGV8TlNTbWFsbENvbnRyb2xTaXplfE5TU21hbGxDYXBzRm9udE1hc2t8TlNTbWFsbEljb25CdXR0b25CZXplbFN0eWxlfE5TSGlnaGxpZ2h0TW9kZU1hdHJpeHxOU0hTQk1vZGVDb2xvclBhbmVsfE5TSG91ck1pbnV0ZVNlY29uZERhdGVQaWNrZXJFbGVtZW50RmxhZ3xOU0hvdXJNaW51dGVEYXRlUGlja2VyRWxlbWVudEZsYWd8TlNIb3VyQ2FsZW5kYXJVbml0fE5TSG9yaXpvbnRhbFJ1bGVyfE5TSG9tZUZ1bmN0aW9uS2V5fE5TSFRUUENvb2tpZUFjY2VwdFBvbGljeU5ldmVyfE5TSFRUUENvb2tpZUFjY2VwdFBvbGljeU9ubHlGcm9tTWFpbkRvY3VtZW50RG9tYWlufE5TSFRUUENvb2tpZUFjY2VwdFBvbGljeUFsd2F5c3xOU0hlbHBCdXR0b25CZXplbFN0eWxlfE5TSGVscEtleU1hc2t8TlNIZWxwRnVuY3Rpb25LZXl8TlNIZWF2aWVyRm9udEFjdGlvbnxOU0hQVVhPcGVyYXRpbmdTeXN0ZW18TlNZZWFyTW9udGhEYXlEYXRlUGlja2VyRWxlbWVudEZsYWd8TlNZZWFyTW9udGhEYXRlUGlja2VyRWxlbWVudEZsYWd8TlNZZWFyQ2FsZW5kYXJVbml0fE5TTm9uU3RhbmRhcmRDaGFyYWN0ZXJTZXRGb250TWFza3xOU05vblplcm9XaW5kaW5nUnVsZXxOU05vbmFjdGl2YXRpbmdQYW5lbE1hc2t8TlNOb25Mb3NzeUFTQ0lJU3RyaW5nRW5jb2Rpbmd8TlNOb0JvcmRlcnxOU05vdGlmaWNhdGlvblN1c3BlbnNpb25CZWhhdmlvckhvbGR8TlNOb3RpZmljYXRpb25TdXNwZW5zaW9uQmVoYXZpb3JDb2FsZXNjZXxOU05vdGlmaWNhdGlvblN1c3BlbnNpb25CZWhhdmlvckRlbGl2ZXJJbW1lZGlhdGVseXxOU05vdGlmaWNhdGlvblN1c3BlbnNpb25CZWhhdmlvckRyb3B8TlNOb3RpZmljYXRpb25Ob0NvYWxlc2Npbmd8TlNOb3RpZmljYXRpb25Db2FsZXNjaW5nT25TZW5kZXJ8TlNOb3RpZmljYXRpb25Db2FsZXNjaW5nT25OYW1lfE5TTm90aWZpY2F0aW9uRGVsaXZlckltbWVkaWF0ZWx5fE5TTm90aWZpY2F0aW9uUG9zdFRvQWxsU2Vzc2lvbnN8TlNOb3RQcmVkaWNhdGVUeXBlfE5TTm90RXF1YWxUb1ByZWRpY2F0ZU9wZXJhdG9yVHlwZXxOU05vU2NyaXB0RXJyb3J8TlNOb1Njcm9sbGVyUGFydHN8TlNOb1N1YmVsZW1lbnR8TlNOb1NwZWNpZmllckVycm9yfE5TTm9DZWxsTWFza3xOU05vVGl0bGV8TlNOb1RvcExldmVsQ29udGFpbmVyc1NwZWNpZmllckVycm9yfE5TTm9UYWJzQmV6ZWxCb3JkZXJ8TlNOb1RhYnNOb0JvcmRlcnxOU05vVGFic0xpbmVCb3JkZXJ8TlNOb0ludGVyZmFjZVN0eWxlfE5TTm9JbWFnZXxOU05vVW5kZXJsaW5lU3R5bGV8TlNOb0ZvbnRDaGFuZ2VBY3Rpb258TlNOdWxsR2x5cGh8TlNOdWxsQ2VsbFR5cGV8TlNOdW1lcmljU2VhcmNofE5TTnVtZXJpY1BhZEtleU1hc2t8TlNOdW1iZXJGb3JtYXR0ZXJSb3VuZEhhbGZEb3dufE5TTnVtYmVyRm9ybWF0dGVyUm91bmRIYWxmVXB8TlNOdW1iZXJGb3JtYXR0ZXJSb3VuZEhhbGZFdmVufE5TTnVtYmVyRm9ybWF0dGVyUm91bmRDZWlsaW5nfE5TTnVtYmVyRm9ybWF0dGVyUm91bmREb3dufE5TTnVtYmVyRm9ybWF0dGVyUm91bmRVcHxOU051bWJlckZvcm1hdHRlclJvdW5kRmxvb3J8TlNOdW1iZXJGb3JtYXR0ZXJCZWhhdmlvcjEwfE5TTnVtYmVyRm9ybWF0dGVyQmVoYXZpb3JEZWZhdWx0fE5TTnVtYmVyRm9ybWF0dGVyU2NpZW50aWZpY1N0eWxlfE5TTnVtYmVyRm9ybWF0dGVyU3BlbGxPdXRTdHlsZXxOU051bWJlckZvcm1hdHRlck5vU3R5bGV8TlNOdW1iZXJGb3JtYXR0ZXJDdXJyZW5jeVN0eWxlfE5TTnVtYmVyRm9ybWF0dGVyRGVjaW1hbFN0eWxlfE5TTnVtYmVyRm9ybWF0dGVyUGVyY2VudFN0eWxlfE5TTnVtYmVyRm9ybWF0dGVyUGFkQmVmb3JlU3VmZml4fE5TTnVtYmVyRm9ybWF0dGVyUGFkQmVmb3JlUHJlZml4fE5TTnVtYmVyRm9ybWF0dGVyUGFkQWZ0ZXJTdWZmaXh8TlNOdW1iZXJGb3JtYXR0ZXJQYWRBZnRlclByZWZpeHxOU05ldFNlcnZpY2VzQmFkQXJndW1lbnRFcnJvcnxOU05ldFNlcnZpY2VzTm90Rm91bmRFcnJvcnxOU05ldFNlcnZpY2VzQ29sbGlzaW9uRXJyb3J8TlNOZXRTZXJ2aWNlc0NhbmNlbGxlZEVycm9yfE5TTmV0U2VydmljZXNUaW1lb3V0RXJyb3J8TlNOZXRTZXJ2aWNlc0ludmFsaWRFcnJvcnxOU05ldFNlcnZpY2VzVW5rbm93bkVycm9yfE5TTmV0U2VydmljZXNBY3Rpdml0eUluUHJvZ3Jlc3N8TlNOZXR3b3JrRG9tYWluTWFza3xOU05ld2xpbmVDaGFyYWN0ZXJ8TlNOZXh0U3RlcEludGVyZmFjZVN0eWxlfE5TTmV4dEZ1bmN0aW9uS2V5fE5TTkVYVFNURVBTdHJpbmdFbmNvZGluZ3xOU05hdGl2ZVNob3J0R2x5cGhQYWNraW5nfE5TTmF0dXJhbFRleHRBbGlnbm1lbnR8TlNOYXJyb3dGb250TWFza3xOU0NoYW5nZVJlYWRPdGhlckNvbnRlbnRzfE5TQ2hhbmdlR3JheUNlbGx8TlNDaGFuZ2VHcmF5Q2VsbE1hc2t8TlNDaGFuZ2VCYWNrZ3JvdW5kQ2VsbHxOU0NoYW5nZUJhY2tncm91bmRDZWxsTWFza3xOU0NoYW5nZUNsZWFyZWR8TlNDaGFuZ2VEb25lfE5TQ2hhbmdlVW5kb25lfE5TQ2hhbmdlQXV0b3NhdmVkfE5TQ01ZS01vZGVDb2xvclBhbmVsfE5TQ01ZS0NvbG9yU3BhY2VNb2RlbHxOU0NpcmN1bGFyQmV6ZWxTdHlsZXxOU0NpcmN1bGFyU2xpZGVyfE5TQ29uc3RhbnRWYWx1ZUV4cHJlc3Npb25UeXBlfE5TQ29udGludW91c0NhcGFjaXR5TGV2ZWxJbmRpY2F0b3JTdHlsZXxOU0NvbnRlbnRzQ2VsbE1hc2t8TlNDb250YWluc0NvbXBhcmlzb258TlNDb250YWluZXJTcGVjaWZpZXJFcnJvcnxOU0NvbnRyb2xHbHlwaHxOU0NvbnRyb2xLZXlNYXNrfE5TQ29uZGVuc2VkRm9udE1hc2t8TlNDb2xvclBhbmVsUkdCTW9kZU1hc2t8TlNDb2xvclBhbmVsR3JheU1vZGVNYXNrfE5TQ29sb3JQYW5lbEhTQk1vZGVNYXNrfE5TQ29sb3JQYW5lbENNWUtNb2RlTWFza3xOU0NvbG9yUGFuZWxDb2xvckxpc3RNb2RlTWFza3xOU0NvbG9yUGFuZWxDdXN0b21QYWxldHRlTW9kZU1hc2t8TlNDb2xvclBhbmVsQ3JheW9uTW9kZU1hc2t8TlNDb2xvclBhbmVsV2hlZWxNb2RlTWFza3xOU0NvbG9yUGFuZWxBbGxNb2Rlc01hc2t8TlNDb2xvckxpc3RNb2RlQ29sb3JQYW5lbHxOU0NvcmVTZXJ2aWNlRGlyZWN0b3J5fE5TQ29tcG9zaXRlWE9SfE5TQ29tcG9zaXRlU291cmNlSW58TlNDb21wb3NpdGVTb3VyY2VPdXR8TlNDb21wb3NpdGVTb3VyY2VPdmVyfE5TQ29tcG9zaXRlU291cmNlQXRvcHxOU0NvbXBvc2l0ZUhpZ2hsaWdodHxOU0NvbXBvc2l0ZUNvcHl8TlNDb21wb3NpdGVDbGVhcnxOU0NvbXBvc2l0ZURlc3RpbmF0aW9uSW58TlNDb21wb3NpdGVEZXN0aW5hdGlvbk91dHxOU0NvbXBvc2l0ZURlc3RpbmF0aW9uT3ZlcnxOU0NvbXBvc2l0ZURlc3RpbmF0aW9uQXRvcHxOU0NvbXBvc2l0ZVBsdXNEYXJrZXJ8TlNDb21wb3NpdGVQbHVzTGlnaHRlcnxOU0NvbXByZXNzZWRGb250TWFza3xOU0NvbW1hbmRLZXlNYXNrfE5TQ3VzdG9tU2VsZWN0b3JQcmVkaWNhdGVPcGVyYXRvclR5cGV8TlNDdXN0b21QYWxldHRlTW9kZUNvbG9yUGFuZWx8TlNDdXJzb3JVcGRhdGV8TlNDdXJzb3JVcGRhdGVNYXNrfE5TQ3Vyc29yUG9pbnRpbmdEZXZpY2V8TlNDdXJ2ZVRvQmV6aWVyUGF0aEVsZW1lbnR8TlNDZW50ZXJUZXh0QWxpZ25tZW50fE5TQ2VudGVyVGFiU3RvcFR5cGV8TlNDZWxsSGlnaGxpZ2h0ZWR8TlNDZWxsSGFzSW1hZ2VIb3Jpem9udGFsfE5TQ2VsbEhhc0ltYWdlT25MZWZ0T3JCb3R0b218TlNDZWxsSGFzT3ZlcmxhcHBpbmdJbWFnZXxOU0NlbGxDaGFuZ2VzQ29udGVudHN8TlNDZWxsSXNCb3JkZXJlZHxOU0NlbGxJc0luc2V0QnV0dG9ufE5TQ2VsbERpc2FibGVkfE5TQ2VsbEVkaXRhYmxlfE5TQ2VsbExpZ2h0c0J5R3JheXxOU0NlbGxMaWdodHNCeUJhY2tncm91bmR8TlNDZWxsTGlnaHRzQnlDb250ZW50c3xOU0NlbGxBbGxvd3NNaXhlZFN0YXRlfE5TQ2xpcFBhZ2luYXRpb258TlNDbG9zZVBhdGhCZXppZXJQYXRoRWxlbWVudHxOU0Nsb3NhYmxlV2luZG93TWFza3xOU0Nsb2NrQW5kQ2FsZW5kYXJEYXRlUGlja2VyU3R5bGV8TlNDbGVhckNvbnRyb2xUaW50fE5TQ2xlYXJEaXNwbGF5RnVuY3Rpb25LZXl8TlNDbGVhckxpbmVGdW5jdGlvbktleXxOU0Nhc2VJbnNlbnNpdGl2ZVNlYXJjaHxOU0Nhc2VJbnNlbnNpdGl2ZVByZWRpY2F0ZU9wdGlvbnxOU0Nhbm5vdENyZWF0ZVNjcmlwdENvbW1hbmRFcnJvcnxOU0NhbmNlbEJ1dHRvbnxOU0NhbmNlbFRleHRNb3ZlbWVudHxOU0NhY2hlc0RpcmVjdG9yeXxOU0NhbGN1bGF0aW9uTm9FcnJvcnxOU0NhbGN1bGF0aW9uT3ZlcmZsb3d8TlNDYWxjdWxhdGlvbkRpdmlkZUJ5WmVyb3xOU0NhbGN1bGF0aW9uVW5kZXJmbG93fE5TQ2FsY3VsYXRpb25Mb3NzT2ZQcmVjaXNpb258TlNDYXJyaWFnZVJldHVybkNoYXJhY3RlcnxOU0NyaXRpY2FsUmVxdWVzdHxOU0NyaXRpY2FsQWxlcnRTdHlsZXxOU0NyYXlvbk1vZGVDb2xvclBhbmVsfE5TVGhpY2tTcXVhcmVCZXplbFN0eWxlfE5TVGhpY2tlclNxdWFyZUJlemVsU3R5bGV8TlNUeXBlc2V0dGVyQmVoYXZpb3J8TlNUeXBlc2V0dGVySG9yaXpvbnRhbFRhYkFjdGlvbnxOU1R5cGVzZXR0ZXJDb250YWluZXJCcmVha0FjdGlvbnxOU1R5cGVzZXR0ZXJaZXJvQWR2YW5jZW1lbnRBY3Rpb258TlNUeXBlc2V0dGVyT3JpZ2luYWxCZWhhdmlvcnxOU1R5cGVzZXR0ZXJQYXJhZ3JhcGhCcmVha0FjdGlvbnxOU1R5cGVzZXR0ZXJXaGl0ZXNwYWNlQWN0aW9ufE5TVHlwZXNldHRlckxpbmVCcmVha0FjdGlvbnxOU1R5cGVzZXR0ZXJMYXRlc3RCZWhhdmlvcnxOU1RpY2tNYXJrUmlnaHR8TlNUaWNrTWFya0JlbG93fE5TVGlja01hcmtMZWZ0fE5TVGlja01hcmtBYm92ZXxOU1RpdGxlZFdpbmRvd01hc2t8TlNUaW1lWm9uZURhdGVQaWNrZXJFbGVtZW50RmxhZ3xOU1Rvb2xiYXJJdGVtVmlzaWJpbGl0eVByaW9yaXR5U3RhbmRhcmR8TlNUb29sYmFySXRlbVZpc2liaWxpdHlQcmlvcml0eUhpZ2h8TlNUb29sYmFySXRlbVZpc2liaWxpdHlQcmlvcml0eVVzZXJ8TlNUb29sYmFySXRlbVZpc2liaWxpdHlQcmlvcml0eUxvd3xOU1RvcFRhYnNCZXplbEJvcmRlcnxOU1RvZ2dsZUJ1dHRvbnxOU1RJRkZDb21wcmVzc2lvbk5vbmV8TlNUSUZGQ29tcHJlc3Npb25ORVhUfE5TVElGRkNvbXByZXNzaW9uQ0NJVFRGQVgzfE5TVElGRkNvbXByZXNzaW9uQ0NJVFRGQVg0fE5TVElGRkNvbXByZXNzaW9uT2xkSlBFR3xOU1RJRkZDb21wcmVzc2lvbkpQRUd8TlNUSUZGQ29tcHJlc3Npb25QYWNrQml0c3xOU1RJRkZDb21wcmVzc2lvbkxaV3xOU1RJRkZGaWxlVHlwZXxOU1Rlcm1pbmF0ZU5vd3xOU1Rlcm1pbmF0ZUNhbmNlbHxOU1Rlcm1pbmF0ZUxhdGVyfE5TVGV4dFJlYWRJbmFwcGxpY2FibGVEb2N1bWVudFR5cGVFcnJvcnxOU1RleHRSZWFkV3JpdGVFcnJvck1pbmltdW18TlNUZXh0UmVhZFdyaXRlRXJyb3JNYXhpbXVtfE5TVGV4dEJsb2NrTWluaW11bUhlaWdodHxOU1RleHRCbG9ja01pbmltdW1XaWR0aHxOU1RleHRCbG9ja01pZGRsZUFsaWdubWVudHxOU1RleHRCbG9ja01hcmdpbnxOU1RleHRCbG9ja01heGltdW1IZWlnaHR8TlNUZXh0QmxvY2tNYXhpbXVtV2lkdGh8TlNUZXh0QmxvY2tCb3R0b21BbGlnbm1lbnR8TlNUZXh0QmxvY2tCb3JkZXJ8TlNUZXh0QmxvY2tCYXNlbGluZUFsaWdubWVudHxOU1RleHRCbG9ja0hlaWdodHxOU1RleHRCbG9ja1RvcEFsaWdubWVudHxOU1RleHRCbG9ja1BlcmNlbnRhZ2VWYWx1ZVR5cGV8TlNUZXh0QmxvY2tQYWRkaW5nfE5TVGV4dEJsb2NrV2lkdGh8TlNUZXh0QmxvY2tBYnNvbHV0ZVZhbHVlVHlwZXxOU1RleHRTdG9yYWdlRWRpdGVkQ2hhcmFjdGVyc3xOU1RleHRTdG9yYWdlRWRpdGVkQXR0cmlidXRlc3xOU1RleHRDZWxsVHlwZXxOU1RleHR1cmVkUm91bmRlZEJlemVsU3R5bGV8TlNUZXh0dXJlZEJhY2tncm91bmRXaW5kb3dNYXNrfE5TVGV4dHVyZWRTcXVhcmVCZXplbFN0eWxlfE5TVGV4dFRhYmxlRml4ZWRMYXlvdXRBbGdvcml0aG18TlNUZXh0VGFibGVBdXRvbWF0aWNMYXlvdXRBbGdvcml0aG18TlNUZXh0RmllbGRSb3VuZGVkQmV6ZWx8TlNUZXh0RmllbGRTcXVhcmVCZXplbHxOU1RleHRGaWVsZEFuZFN0ZXBwZXJEYXRlUGlja2VyU3R5bGV8TlNUZXh0V3JpdGVJbmFwcGxpY2FibGVEb2N1bWVudFR5cGVFcnJvcnxOU1RleHRMaXN0UHJlcGVuZEVuY2xvc2luZ01hcmtlcnxOU1R3b0J5dGVHbHlwaFBhY2tpbmd8TlNUYWJDaGFyYWN0ZXJ8TlNUYWJUZXh0TW92ZW1lbnR8TlNUYWJsZXRQb2ludHxOU1RhYmxldFBvaW50TWFza3xOU1RhYmxldFBvaW50RXZlbnRTdWJ0eXBlfE5TVGFibGV0UHJveGltaXR5fE5TVGFibGV0UHJveGltaXR5TWFza3xOU1RhYmxldFByb3hpbWl0eUV2ZW50U3VidHlwZXxOU1RhYmxlQ29sdW1uTm9SZXNpemluZ3xOU1RhYmxlQ29sdW1uVXNlclJlc2l6aW5nTWFza3xOU1RhYmxlQ29sdW1uQXV0b3Jlc2l6aW5nTWFza3xOU1RhYmxlVmlld1JldmVyc2VTZXF1ZW50aWFsQ29sdW1uQXV0b3Jlc2l6aW5nU3R5bGV8TlNUYWJsZVZpZXdHcmlkTm9uZXxOU1RhYmxlVmlld1NvbGlkSG9yaXpvbnRhbEdyaWRMaW5lTWFza3xOU1RhYmxlVmlld1NvbGlkVmVydGljYWxHcmlkTGluZU1hc2t8TlNUYWJsZVZpZXdTZXF1ZW50aWFsQ29sdW1uQXV0b3Jlc2l6aW5nU3R5bGV8TlNUYWJsZVZpZXdOb0NvbHVtbkF1dG9yZXNpemluZ3xOU1RhYmxlVmlld1VuaWZvcm1Db2x1bW5BdXRvcmVzaXppbmdTdHlsZXxOU1RhYmxlVmlld0ZpcnN0Q29sdW1uT25seUF1dG9yZXNpemluZ1N0eWxlfE5TVGFibGVWaWV3TGFzdENvbHVtbk9ubHlBdXRvcmVzaXppbmdTdHlsZXxOU1RyYWNrTW9kZU1hdHJpeHxOU0luc2VydENoYXJGdW5jdGlvbktleXxOU0luc2VydEZ1bmN0aW9uS2V5fE5TSW5zZXJ0TGluZUZ1bmN0aW9uS2V5fE5TSW50VHlwZXxOU0ludGVybmFsU2NyaXB0RXJyb3J8TlNJbnRlcm5hbFNwZWNpZmllckVycm9yfE5TSW5kZXhTdWJlbGVtZW50fE5TSW52YWxpZEluZGV4U3BlY2lmaWVyRXJyb3J8TlNJbmZvcm1hdGlvbmFsUmVxdWVzdHxOU0luZm9ybWF0aW9uYWxBbGVydFN0eWxlfE5TSW5QcmVkaWNhdGVPcGVyYXRvclR5cGV8TlNJdGFsaWNGb250TWFza3xOU0lTTzIwMjJKUFN0cmluZ0VuY29kaW5nfE5TSVNPTGF0aW4xU3RyaW5nRW5jb2Rpbmd8TlNJU09MYXRpbjJTdHJpbmdFbmNvZGluZ3xOU0lkZW50aXR5TWFwcGluZ0NoYXJhY3RlckNvbGxlY3Rpb258TlNJbGxlZ2FsVGV4dE1vdmVtZW50fE5TSW1hZ2VSaWdodHxOU0ltYWdlUmVwTWF0Y2hlc0RldmljZXxOU0ltYWdlUmVwTG9hZFN0YXR1c1JlYWRpbmdIZWFkZXJ8TlNJbWFnZVJlcExvYWRTdGF0dXNDb21wbGV0ZWR8TlNJbWFnZVJlcExvYWRTdGF0dXNJbnZhbGlkRGF0YXxOU0ltYWdlUmVwTG9hZFN0YXR1c1VuZXhwZWN0ZWRFT0Z8TlNJbWFnZVJlcExvYWRTdGF0dXNVbmtub3duVHlwZXxOU0ltYWdlUmVwTG9hZFN0YXR1c1dpbGxOZWVkQWxsRGF0YXxOU0ltYWdlQmVsb3d8TlNJbWFnZUNlbGxUeXBlfE5TSW1hZ2VDYWNoZUJ5U2l6ZXxOU0ltYWdlQ2FjaGVOZXZlcnxOU0ltYWdlQ2FjaGVEZWZhdWx0fE5TSW1hZ2VDYWNoZUFsd2F5c3xOU0ltYWdlSW50ZXJwb2xhdGlvbkhpZ2h8TlNJbWFnZUludGVycG9sYXRpb25Ob25lfE5TSW1hZ2VJbnRlcnBvbGF0aW9uRGVmYXVsdHxOU0ltYWdlSW50ZXJwb2xhdGlvbkxvd3xOU0ltYWdlT25seXxOU0ltYWdlT3ZlcmxhcHN8TlNJbWFnZUZyYW1lR3Jvb3ZlfE5TSW1hZ2VGcmFtZUdyYXlCZXplbHxOU0ltYWdlRnJhbWVCdXR0b258TlNJbWFnZUZyYW1lTm9uZXxOU0ltYWdlRnJhbWVQaG90b3xOU0ltYWdlTG9hZFN0YXR1c1JlYWRFcnJvcnxOU0ltYWdlTG9hZFN0YXR1c0NvbXBsZXRlZHxOU0ltYWdlTG9hZFN0YXR1c0NhbmNlbGxlZHxOU0ltYWdlTG9hZFN0YXR1c0ludmFsaWREYXRhfE5TSW1hZ2VMb2FkU3RhdHVzVW5leHBlY3RlZEVPRnxOU0ltYWdlTGVmdHxOU0ltYWdlQWxpZ25SaWdodHxOU0ltYWdlQWxpZ25Cb3R0b218TlNJbWFnZUFsaWduQm90dG9tUmlnaHR8TlNJbWFnZUFsaWduQm90dG9tTGVmdHxOU0ltYWdlQWxpZ25DZW50ZXJ8TlNJbWFnZUFsaWduVG9wfE5TSW1hZ2VBbGlnblRvcFJpZ2h0fE5TSW1hZ2VBbGlnblRvcExlZnR8TlNJbWFnZUFsaWduTGVmdHxOU0ltYWdlQWJvdmV8TlNPblN0YXRlfE5TT25lQnl0ZUdseXBoUGFja2luZ3xOU09uT2ZmQnV0dG9ufE5TT25seVNjcm9sbGVyQXJyb3dzfE5TT3RoZXJNb3VzZURvd258TlNPdGhlck1vdXNlRG93bk1hc2t8TlNPdGhlck1vdXNlRHJhZ2dlZHxOU090aGVyTW91c2VEcmFnZ2VkTWFza3xOU090aGVyTW91c2VVcHxOU090aGVyTW91c2VVcE1hc2t8TlNPdGhlclRleHRNb3ZlbWVudHxOU09TRjFPcGVyYXRpbmdTeXN0ZW18TlNPcGVuR0xHT1Jlc2V0TGlicmFyeXxOU09wZW5HTEdPUmV0YWluUmVuZGVyZXJzfE5TT3BlbkdMR09DbGVhckZvcm1hdENhY2hlfE5TT3BlbkdMR09Gb3JtYXRDYWNoZVNpemV8TlNPcGVuR0xQRkFSb2J1c3R8TlNPcGVuR0xQRkFSZW5kZXJlcklEfE5TT3BlbkdMUEZBTWluaW11bVBvbGljeXxOU09wZW5HTFBGQU11bHRpc2FtcGxlfE5TT3BlbkdMUEZBTXVsdGlTY3JlZW58TlNPcGVuR0xQRkFNUFNhZmV8TlNPcGVuR0xQRkFNYXhpbXVtUG9saWN5fE5TT3BlbkdMUEZBQmFja2luZ1N0b3JlfE5TT3BlbkdMUEZBU2NyZWVuTWFza3xOU09wZW5HTFBGQVN0ZW5jaWxTaXplfE5TT3BlbkdMUEZBU3RlcmVvfE5TT3BlbkdMUEZBU2luZ2xlUmVuZGVyZXJ8TlNPcGVuR0xQRkFTdXBlcnNhbXBsZXxOU09wZW5HTFBGQVNhbXBsZXN8TlNPcGVuR0xQRkFTYW1wbGVCdWZmZXJzfE5TT3BlbkdMUEZBU2FtcGxlQWxwaGF8TlNPcGVuR0xQRkFOb1JlY292ZXJ5fE5TT3BlbkdMUEZBQ29sb3JTaXplfE5TT3BlbkdMUEZBQ29sb3JGbG9hdHxOU09wZW5HTFBGQUNvbXBsaWFudHxOU09wZW5HTFBGQUNsb3Nlc3RQb2xpY3l8TlNPcGVuR0xQRkFPZmZTY3JlZW58TlNPcGVuR0xQRkFEb3VibGVCdWZmZXJ8TlNPcGVuR0xQRkFEZXB0aFNpemV8TlNPcGVuR0xQRkFQaXhlbEJ1ZmZlcnxOU09wZW5HTFBGQVZpcnR1YWxTY3JlZW5Db3VudHxOU09wZW5HTFBGQUZ1bGxTY3JlZW58TlNPcGVuR0xQRkFXaW5kb3d8TlNPcGVuR0xQRkFBY2N1bVNpemV8TlNPcGVuR0xQRkFBY2NlbGVyYXRlZHxOU09wZW5HTFBGQUF1eEJ1ZmZlcnN8TlNPcGVuR0xQRkFBdXhEZXB0aFN0ZW5jaWx8TlNPcGVuR0xQRkFBbHBoYVNpemV8TlNPcGVuR0xQRkFBbGxSZW5kZXJlcnN8TlNPcGVuU3RlcFVuaWNvZGVSZXNlcnZlZEJhc2V8TlNPcGVyYXRpb25Ob3RTdXBwb3J0ZWRGb3JLZXlTY3JpcHRFcnJvcnxOU09wZXJhdGlvbk5vdFN1cHBvcnRlZEZvcktleVNwZWNpZmllckVycm9yfE5TT2ZmU3RhdGV8TlNPS0J1dHRvbnxOU09yUHJlZGljYXRlVHlwZXxOU09iakNCaXRmaWVsZHxOU09iakNCb29sVHlwZXxOU09iakNTaG9ydFR5cGV8TlNPYmpDU3RyaW5nVHlwZXxOU09iakNTdHJ1Y3RUeXBlfE5TT2JqQ1NlbGVjdG9yVHlwZXxOU09iakNOb1R5cGV8TlNPYmpDQ2hhclR5cGV8TlNPYmpDT2JqZWN0VHlwZXxOU09iakNEb3VibGVUeXBlfE5TT2JqQ1VuaW9uVHlwZXxOU09iakNQb2ludGVyVHlwZXxOU09iakNWb2lkVHlwZXxOU09iakNGbG9hdFR5cGV8TlNPYmpDTG9uZ1R5cGV8TlNPYmpDTG9uZ2xvbmdUeXBlfE5TT2JqQ0FycmF5VHlwZXxOU0Rpc2Nsb3N1cmVCZXplbFN0eWxlfE5TRGlzY3JldGVDYXBhY2l0eUxldmVsSW5kaWNhdG9yU3R5bGV8TlNEaXNwbGF5V2luZG93UnVuTG9vcE9yZGVyaW5nfE5TRGlhY3JpdGljSW5zZW5zaXRpdmVQcmVkaWNhdGVPcHRpb258TlNEaXJlY3RTZWxlY3Rpb258TlNEaXJlY3RQcmVkaWNhdGVNb2RpZmllcnxOU0RvY01vZGFsV2luZG93TWFza3xOU0RvY3VtZW50RGlyZWN0b3J5fE5TRG9jdW1lbnRhdGlvbkRpcmVjdG9yeXxOU0RvdWJsZVR5cGV8TlNEb3duVGV4dE1vdmVtZW50fE5TRG93bkFycm93RnVuY3Rpb25LZXl8TlNEZXNjZW5kaW5nUGFnZU9yZGVyfE5TRGVza3RvcERpcmVjdG9yeXxOU0RlY2ltYWxUYWJTdG9wVHlwZXxOU0RldmljZU5Db2xvclNwYWNlTW9kZWx8TlNEZXZpY2VJbmRlcGVuZGVudE1vZGlmaWVyRmxhZ3NNYXNrfE5TRGV2ZWxvcGVyRGlyZWN0b3J5fE5TRGV2ZWxvcGVyQXBwbGljYXRpb25EaXJlY3Rvcnl8TlNEZWZhdWx0Q29udHJvbFRpbnR8TlNEZWZhdWx0VG9rZW5TdHlsZXxOU0RlbGV0ZUNoYXJhY3RlcnxOU0RlbGV0ZUNoYXJGdW5jdGlvbktleXxOU0RlbGV0ZUZ1bmN0aW9uS2V5fE5TRGVsZXRlTGluZUZ1bmN0aW9uS2V5fE5TRGVtb0FwcGxpY2F0aW9uRGlyZWN0b3J5fE5TRGF5Q2FsZW5kYXJVbml0fE5TRGF0ZUZvcm1hdHRlck1lZGl1bVN0eWxlfE5TRGF0ZUZvcm1hdHRlckJlaGF2aW9yMTB8TlNEYXRlRm9ybWF0dGVyQmVoYXZpb3JEZWZhdWx0fE5TRGF0ZUZvcm1hdHRlclNob3J0U3R5bGV8TlNEYXRlRm9ybWF0dGVyTm9TdHlsZXxOU0RhdGVGb3JtYXR0ZXJGdWxsU3R5bGV8TlNEYXRlRm9ybWF0dGVyTG9uZ1N0eWxlfE5TRHJhd2VyQ2xvc2luZ1N0YXRlfE5TRHJhd2VyQ2xvc2VkU3RhdGV8TlNEcmF3ZXJPcGVuaW5nU3RhdGV8TlNEcmF3ZXJPcGVuU3RhdGV8TlNEcmFnT3BlcmF0aW9uR2VuZXJpY3xOU0RyYWdPcGVyYXRpb25Nb3ZlfE5TRHJhZ09wZXJhdGlvbk5vbmV8TlNEcmFnT3BlcmF0aW9uQ29weXxOU0RyYWdPcGVyYXRpb25EZWxldGV8TlNEcmFnT3BlcmF0aW9uUHJpdmF0ZXxOU0RyYWdPcGVyYXRpb25FdmVyeXxOU0RyYWdPcGVyYXRpb25MaW5rfE5TRHJhZ09wZXJhdGlvbkFsbHxOU1VzZXJDYW5jZWxsZWRFcnJvcnxOU1VzZXJEaXJlY3Rvcnl8TlNVc2VyRG9tYWluTWFza3xOU1VzZXJGdW5jdGlvbktleXxOU1VSTEhhbmRsZU5vdExvYWRlZHxOU1VSTEhhbmRsZUxvYWRTdWNjZWVkZWR8TlNVUkxIYW5kbGVMb2FkSW5Qcm9ncmVzc3xOU1VSTEhhbmRsZUxvYWRGYWlsZWR8TlNVUkxDcmVkZW50aWFsUGVyc2lzdGVuY2VOb25lfE5TVVJMQ3JlZGVudGlhbFBlcnNpc3RlbmNlUGVybWFuZW50fE5TVVJMQ3JlZGVudGlhbFBlcnNpc3RlbmNlRm9yU2Vzc2lvbnxOU1Vuc2NhbGVkV2luZG93TWFza3xOU1VuY2FjaGVkUmVhZHxOU1VuaWNvZGVTdHJpbmdFbmNvZGluZ3xOU1VuaXRhbGljRm9udE1hc2t8TlNVbmlmaWVkVGl0bGVBbmRUb29sYmFyV2luZG93TWFza3xOU1VuZG9DbG9zZUdyb3VwaW5nUnVuTG9vcE9yZGVyaW5nfE5TVW5kb0Z1bmN0aW9uS2V5fE5TVW5kZWZpbmVkRGF0ZUNvbXBvbmVudHxOU1VuZGVybGluZVN0eWxlU2luZ2xlfE5TVW5kZXJsaW5lU3R5bGVOb25lfE5TVW5kZXJsaW5lU3R5bGVUaGlja3xOU1VuZGVybGluZVN0eWxlRG91YmxlfE5TVW5kZXJsaW5lUGF0dGVyblNvbGlkfE5TVW5kZXJsaW5lUGF0dGVybkRvdHxOU1VuZGVybGluZVBhdHRlcm5EYXNofE5TVW5kZXJsaW5lUGF0dGVybkRhc2hEb3R8TlNVbmRlcmxpbmVQYXR0ZXJuRGFzaERvdERvdHxOU1Vua25vd25Db2xvclNwYWNlTW9kZWx8TlNVbmtub3duUG9pbnRpbmdEZXZpY2V8TlNVbmtub3duUGFnZU9yZGVyfE5TVW5rbm93bktleVNjcmlwdEVycm9yfE5TVW5rbm93bktleVNwZWNpZmllckVycm9yfE5TVW5ib2xkRm9udE1hc2t8TlNVdGlsaXR5V2luZG93TWFza3xOU1VURjhTdHJpbmdFbmNvZGluZ3xOU1VwZGF0ZVdpbmRvd3NSdW5Mb29wT3JkZXJpbmd8TlNVcFRleHRNb3ZlbWVudHxOU1VwQXJyb3dGdW5jdGlvbktleXxOU0p1c3RpZmllZFRleHRBbGlnbm1lbnR8TlNKUEVHMjAwMEZpbGVUeXBlfE5TSlBFR0ZpbGVUeXBlfE5TSmFwYW5lc2VFVUNHbHlwaFBhY2tpbmd8TlNKYXBhbmVzZUVVQ1N0cmluZ0VuY29kaW5nfE5TUG9zdE5vd3xOU1Bvc3RlckZvbnRNYXNrfE5TUG9zdFdoZW5JZGxlfE5TUG9zdEFTQVB8TlNQb3NpdGlvblJlcGxhY2V8TlNQb3NpdGlvbkJlZm9yZXxOU1Bvc2l0aW9uQmVnaW5uaW5nfE5TUG9zaXRpb25FbmR8TlNQb3NpdGlvbkFmdGVyfE5TUG9zaXRpdmVJbnRUeXBlfE5TUG9zaXRpdmVEb3VibGVUeXBlfE5TUG9zaXRpdmVGbG9hdFR5cGV8TlNQb3BVcE5vQXJyb3d8TlNQb3BVcEFycm93QXRCb3R0b218TlNQb3BVcEFycm93QXRDZW50ZXJ8TlNQb3dlck9mZkV2ZW50VHlwZXxOU1BvcnRyYWl0T3JpZW50YXRpb258TlNQTkdGaWxlVHlwZXxOU1B1c2hJbkNlbGx8TlNQdXNoSW5DZWxsTWFza3xOU1B1c2hPblB1c2hPZmZCdXR0b258TlNQZW5UaXBNYXNrfE5TUGVuVXBwZXJTaWRlTWFza3xOU1BlblBvaW50aW5nRGV2aWNlfE5TUGVuTG93ZXJTaWRlTWFza3xOU1BlcmlvZGljfE5TUGVyaW9kaWNNYXNrfE5TUFBTY2FsZUZpZWxkfE5TUFBTdGF0dXNUaXRsZXxOU1BQU3RhdHVzRmllbGR8TlNQUFNhdmVCdXR0b258TlNQUE5vdGVUaXRsZXxOU1BQTm90ZUZpZWxkfE5TUFBOYW1lVGl0bGV8TlNQUE5hbWVGaWVsZHxOU1BQQ29waWVzRmllbGR8TlNQUFRpdGxlRmllbGR8TlNQUEltYWdlQnV0dG9ufE5TUFBPcHRpb25zQnV0dG9ufE5TUFBQYXBlckZlZWRCdXR0b258TlNQUFBhZ2VSYW5nZVRvfE5TUFBQYWdlUmFuZ2VGcm9tfE5TUFBQYWdlQ2hvaWNlTWF0cml4fE5TUFBQcmV2aWV3QnV0dG9ufE5TUFBMYXlvdXRCdXR0b258TlNQbGFpblRleHRUb2tlblN0eWxlfE5TUGF1c2VGdW5jdGlvbktleXxOU1BhcmFncmFwaFNlcGFyYXRvckNoYXJhY3RlcnxOU1BhZ2VEb3duRnVuY3Rpb25LZXl8TlNQYWdlVXBGdW5jdGlvbktleXxOU1ByaW50aW5nUmVwbHlMYXRlcnxOU1ByaW50aW5nU3VjY2Vzc3xOU1ByaW50aW5nQ2FuY2VsbGVkfE5TUHJpbnRpbmdGYWlsdXJlfE5TUHJpbnRTY3JlZW5GdW5jdGlvbktleXxOU1ByaW50ZXJUYWJsZU5vdEZvdW5kfE5TUHJpbnRlclRhYmxlT0t8TlNQcmludGVyVGFibGVFcnJvcnxOU1ByaW50RnVuY3Rpb25LZXl8TlNQcm9wZXJ0eUxpc3RYTUxGb3JtYXR8TlNQcm9wZXJ0eUxpc3RNdXRhYmxlQ29udGFpbmVyc3xOU1Byb3BlcnR5TGlzdE11dGFibGVDb250YWluZXJzQW5kTGVhdmVzfE5TUHJvcGVydHlMaXN0QmluYXJ5Rm9ybWF0fE5TUHJvcGVydHlMaXN0SW1tdXRhYmxlfE5TUHJvcGVydHlMaXN0T3BlblN0ZXBGb3JtYXR8TlNQcm9wcmlldGFyeVN0cmluZ0VuY29kaW5nfE5TUHJvZ3Jlc3NJbmRpY2F0b3JCYXJTdHlsZXxOU1Byb2dyZXNzSW5kaWNhdG9yU3Bpbm5pbmdTdHlsZXxOU1Byb2dyZXNzSW5kaWNhdG9yUHJlZmVycmVkU21hbGxUaGlja25lc3N8TlNQcm9ncmVzc0luZGljYXRvclByZWZlcnJlZFRoaWNrbmVzc3xOU1Byb2dyZXNzSW5kaWNhdG9yUHJlZmVycmVkTGFyZ2VUaGlja25lc3N8TlNQcm9ncmVzc0luZGljYXRvclByZWZlcnJlZEFxdWFUaGlja25lc3N8TlNQcmVzc2VkVGFifE5TUHJldkZ1bmN0aW9uS2V5fE5TUExIZWlnaHRGb3JtfE5TUExDYW5jZWxCdXR0b258TlNQTFRpdGxlRmllbGR8TlNQTEltYWdlQnV0dG9ufE5TUExPS0J1dHRvbnxOU1BMT3JpZW50YXRpb25NYXRyaXh8TlNQTFVuaXRzQnV0dG9ufE5TUExQYXBlck5hbWVCdXR0b258TlNQTFdpZHRoRm9ybXxOU0VudGVyQ2hhcmFjdGVyfE5TRW5kc1dpdGhDb21wYXJpc29ufE5TRW5kc1dpdGhQcmVkaWNhdGVPcGVyYXRvclR5cGV8TlNFbmRGdW5jdGlvbktleXxOU0V2ZW5PZGRXaW5kaW5nUnVsZXxOU0V2ZXJ5U3ViZWxlbWVudHxOU0V2YWx1YXRlZE9iamVjdEV4cHJlc3Npb25UeXBlfE5TRXF1YWxUb0NvbXBhcmlzb258TlNFcXVhbFRvUHJlZGljYXRlT3BlcmF0b3JUeXBlfE5TRXJhc2VyUG9pbnRpbmdEZXZpY2V8TlNFcmFDYWxlbmRhclVuaXR8TlNFcmFEYXRlUGlja2VyRWxlbWVudEZsYWd8TlNFeGNsdWRlMTB8TlNFeGNsdWRlUXVpY2tEcmF3RWxlbWVudHNJY29uQ3JlYXRpb25PcHRpb258TlNFeHBhbmRlZEZvbnRNYXNrfE5TRXhlY3V0ZUZ1bmN0aW9uS2V5fE5TVmlld01pblhNYXJnaW58TlNWaWV3TWluWU1hcmdpbnxOU1ZpZXdNYXhYTWFyZ2lufE5TVmlld01heFlNYXJnaW58TlNWaWV3SGVpZ2h0U2l6YWJsZXxOU1ZpZXdOb3RTaXphYmxlfE5TVmlld1dpZHRoU2l6YWJsZXxOU1ZpYVBhbmVsRm9udEFjdGlvbnxOU1ZlcnRpY2FsUnVsZXJ8TlNWYWxpZGF0aW9uRXJyb3JNaW5pbXVtfE5TVmFsaWRhdGlvbkVycm9yTWF4aW11bXxOU1ZhcmlhYmxlRXhwcmVzc2lvblR5cGV8TlNLZXlTcGVjaWZpZXJFdmFsdWF0aW9uU2NyaXB0RXJyb3J8TlNLZXlEb3dufE5TS2V5RG93bk1hc2t8TlNLZXlVcHxOU0tleVVwTWFza3xOU0tleVBhdGhFeHByZXNzaW9uVHlwZXxOU0tleVZhbHVlTWludXNTZXRNdXRhdGlvbnxOU0tleVZhbHVlU2V0U2V0TXV0YXRpb258TlNLZXlWYWx1ZUNoYW5nZVJlcGxhY2VtZW50fE5TS2V5VmFsdWVDaGFuZ2VSZW1vdmFsfE5TS2V5VmFsdWVDaGFuZ2VTZXR0aW5nfE5TS2V5VmFsdWVDaGFuZ2VJbnNlcnRpb258TlNLZXlWYWx1ZUludGVyc2VjdFNldE11dGF0aW9ufE5TS2V5VmFsdWVPYnNlcnZpbmdPcHRpb25OZXd8TlNLZXlWYWx1ZU9ic2VydmluZ09wdGlvbk9sZHxOU0tleVZhbHVlVW5pb25TZXRNdXRhdGlvbnxOU0tleVZhbHVlVmFsaWRhdGlvbkVycm9yfE5TUVRNb3ZpZU5vcm1hbFBsYXliYWNrfE5TUVRNb3ZpZUxvb3BpbmdCYWNrQW5kRm9ydGhQbGF5YmFja3xOU1FUTW92aWVMb29waW5nUGxheWJhY2t8TlNGMTFGdW5jdGlvbktleXxOU0YxN0Z1bmN0aW9uS2V5fE5TRjEyRnVuY3Rpb25LZXl8TlNGMThGdW5jdGlvbktleXxOU0YxM0Z1bmN0aW9uS2V5fE5TRjE5RnVuY3Rpb25LZXl8TlNGMTRGdW5jdGlvbktleXxOU0YxNUZ1bmN0aW9uS2V5fE5TRjFGdW5jdGlvbktleXxOU0YxMEZ1bmN0aW9uS2V5fE5TRjE2RnVuY3Rpb25LZXl8TlNGN0Z1bmN0aW9uS2V5fE5TRmluZFBhbmVsQWN0aW9uUmVwbGFjZXxOU0ZpbmRQYW5lbEFjdGlvblJlcGxhY2VBbmRGaW5kfE5TRmluZFBhbmVsQWN0aW9uUmVwbGFjZUFsbHxOU0ZpbmRQYW5lbEFjdGlvblJlcGxhY2VBbGxJblNlbGVjdGlvbnxOU0ZpbmRQYW5lbEFjdGlvblNob3dGaW5kUGFuZWx8TlNGaW5kUGFuZWxBY3Rpb25TZXRGaW5kU3RyaW5nfE5TRmluZFBhbmVsQWN0aW9uU2VsZWN0QWxsfE5TRmluZFBhbmVsQWN0aW9uU2VsZWN0QWxsSW5TZWxlY3Rpb258TlNGaW5kUGFuZWxBY3Rpb25OZXh0fE5TRmluZFBhbmVsQWN0aW9uUHJldmlvdXN8TlNGaW5kRnVuY3Rpb25LZXl8TlNGaXRQYWdpbmF0aW9ufE5TRmlsZVJlYWROb1N1Y2hGaWxlRXJyb3J8TlNGaWxlUmVhZE5vUGVybWlzc2lvbkVycm9yfE5TRmlsZVJlYWRDb3JydXB0RmlsZUVycm9yfE5TRmlsZVJlYWRJbnZhbGlkRmlsZU5hbWVFcnJvcnxOU0ZpbGVSZWFkSW5hcHBsaWNhYmxlU3RyaW5nRW5jb2RpbmdFcnJvcnxOU0ZpbGVSZWFkVW5zdXBwb3J0ZWRTY2hlbWVFcnJvcnxOU0ZpbGVSZWFkVW5rbm93bkVycm9yfE5TRmlsZUhhbmRsaW5nUGFuZWxDYW5jZWxCdXR0b258TlNGaWxlSGFuZGxpbmdQYW5lbE9LQnV0dG9ufE5TRmlsZU5vU3VjaEZpbGVFcnJvcnxOU0ZpbGVFcnJvck1pbmltdW18TlNGaWxlRXJyb3JNYXhpbXVtfE5TRmlsZVdyaXRlTm9QZXJtaXNzaW9uRXJyb3J8TlNGaWxlV3JpdGVJbnZhbGlkRmlsZU5hbWVFcnJvcnxOU0ZpbGVXcml0ZUluYXBwbGljYWJsZVN0cmluZ0VuY29kaW5nRXJyb3J8TlNGaWxlV3JpdGVPdXRPZlNwYWNlRXJyb3J8TlNGaWxlV3JpdGVVbnN1cHBvcnRlZFNjaGVtZUVycm9yfE5TRmlsZVdyaXRlVW5rbm93bkVycm9yfE5TRmlsZUxvY2tpbmdFcnJvcnxOU0ZpeGVkUGl0Y2hGb250TWFza3xOU0YyMUZ1bmN0aW9uS2V5fE5TRjI3RnVuY3Rpb25LZXl8TlNGMjJGdW5jdGlvbktleXxOU0YyOEZ1bmN0aW9uS2V5fE5TRjIzRnVuY3Rpb25LZXl8TlNGMjlGdW5jdGlvbktleXxOU0YyNEZ1bmN0aW9uS2V5fE5TRjI1RnVuY3Rpb25LZXl8TlNGMkZ1bmN0aW9uS2V5fE5TRjIwRnVuY3Rpb25LZXl8TlNGMjZGdW5jdGlvbktleXxOU0ZvbnRNb25vU3BhY2VUcmFpdHxOU0ZvbnRNb2Rlcm5TZXJpZnNDbGFzc3xOU0ZvbnRCb2xkVHJhaXR8TlNGb250U3ltYm9saWNDbGFzc3xOU0ZvbnRTY3JpcHRzQ2xhc3N8TlNGb250U2xhYlNlcmlmc0NsYXNzfE5TRm9udFNhbnNTZXJpZkNsYXNzfE5TRm9udENvbmRlbnNlZFRyYWl0fE5TRm9udENvbGxlY3Rpb25BcHBsaWNhdGlvbk9ubHlNYXNrfE5TRm9udENsYXJlbmRvblNlcmlmc0NsYXNzfE5TRm9udFRyYW5zaXRpb25hbFNlcmlmc0NsYXNzfE5TRm9udEludGVnZXJBZHZhbmNlbWVudHNSZW5kZXJpbmdNb2RlfE5TRm9udEl0YWxpY1RyYWl0fE5TRm9udE9sZFN0eWxlU2VyaWZzQ2xhc3N8TlNGb250T3JuYW1lbnRhbHNDbGFzc3xOU0ZvbnREZWZhdWx0UmVuZGVyaW5nTW9kZXxOU0ZvbnRVbmtub3duQ2xhc3N8TlNGb250VUlPcHRpbWl6ZWRUcmFpdHxOU0ZvbnRQYW5lbFNoYWRvd0VmZmVjdE1vZGVNYXNrfE5TRm9udFBhbmVsU3RhbmRhcmRNb2Rlc01hc2t8TlNGb250UGFuZWxTdHJpa2V0aHJvdWdoRWZmZWN0TW9kZU1hc2t8TlNGb250UGFuZWxTaXplTW9kZU1hc2t8TlNGb250UGFuZWxDb2xsZWN0aW9uTW9kZU1hc2t8TlNGb250UGFuZWxUZXh0Q29sb3JFZmZlY3RNb2RlTWFza3xOU0ZvbnRQYW5lbERvY3VtZW50Q29sb3JFZmZlY3RNb2RlTWFza3xOU0ZvbnRQYW5lbFVuZGVybGluZUVmZmVjdE1vZGVNYXNrfE5TRm9udFBhbmVsRmFjZU1vZGVNYXNrfE5TRm9udFBhbmVsQWxsTW9kZXNNYXNrfE5TRm9udFBhbmVsQWxsRWZmZWN0c01vZGVNYXNrfE5TRm9udEV4cGFuZGVkVHJhaXR8TlNGb250VmVydGljYWxUcmFpdHxOU0ZvbnRGYW1pbHlDbGFzc01hc2t8TlNGb250RnJlZWZvcm1TZXJpZnNDbGFzc3xOU0ZvbnRBbnRpYWxpYXNlZFJlbmRlcmluZ01vZGV8TlNGb250QW50aWFsaWFzZWRJbnRlZ2VyQWR2YW5jZW1lbnRzUmVuZGVyaW5nTW9kZXxOU0ZvY3VzUmluZ0JlbG93fE5TRm9jdXNSaW5nVHlwZU5vbmV8TlNGb2N1c1JpbmdUeXBlRGVmYXVsdHxOU0ZvY3VzUmluZ1R5cGVFeHRlcmlvcnxOU0ZvY3VzUmluZ09ubHl8TlNGb2N1c1JpbmdBYm92ZXxOU0ZvdXJCeXRlR2x5cGhQYWNraW5nfE5TRm9ybWF0dGluZ0Vycm9yfE5TRm9ybWF0dGluZ0Vycm9yTWluaW11bXxOU0Zvcm1hdHRpbmdFcnJvck1heGltdW18TlNGb3JtRmVlZENoYXJhY3RlcnxOU0Y4RnVuY3Rpb25LZXl8TlNGdW5jdGlvbkV4cHJlc3Npb25UeXBlfE5TRnVuY3Rpb25LZXlNYXNrfE5TRjMxRnVuY3Rpb25LZXl8TlNGMzJGdW5jdGlvbktleXxOU0YzM0Z1bmN0aW9uS2V5fE5TRjM0RnVuY3Rpb25LZXl8TlNGMzVGdW5jdGlvbktleXxOU0YzRnVuY3Rpb25LZXl8TlNGMzBGdW5jdGlvbktleXxOU0Y5RnVuY3Rpb25LZXl8TlNGNEZ1bmN0aW9uS2V5fE5TRlBSZXZlcnRCdXR0b258TlNGUFNpemVUaXRsZXxOU0ZQU2l6ZUZpZWxkfE5TRlBTZXRCdXR0b258TlNGUEN1cnJlbnRGaWVsZHxOU0ZQUHJldmlld0J1dHRvbnxOU0ZQUHJldmlld0ZpZWxkfE5TRmxvYXRpbmdQb2ludFNhbXBsZXNCaXRtYXBGb3JtYXR8TlNGbG9hdFR5cGV8TlNGbGFnc0NoYW5nZWR8TlNGbGFnc0NoYW5nZWRNYXNrfE5TRmF4QnV0dG9ufE5TRjVGdW5jdGlvbktleXxOU0Y2RnVuY3Rpb25LZXl8TlNXaGVlbE1vZGVDb2xvclBhbmVsfE5TV2luZG93c05UT3BlcmF0aW5nU3lzdGVtfE5TV2luZG93c0NQMTI1MVN0cmluZ0VuY29kaW5nfE5TV2luZG93c0NQMTI1MlN0cmluZ0VuY29kaW5nfE5TV2luZG93c0NQMTI1M1N0cmluZ0VuY29kaW5nfE5TV2luZG93c0NQMTI1NFN0cmluZ0VuY29kaW5nfE5TV2luZG93c0NQMTI1MFN0cmluZ0VuY29kaW5nfE5TV2luZG93czk1SW50ZXJmYWNlU3R5bGV8TlNXaW5kb3dzOTVPcGVyYXRpbmdTeXN0ZW18TlNXaW5kb3dNaW5pYXR1cml6ZUJ1dHRvbnxOU1dpbmRvd01vdmVkRXZlbnRUeXBlfE5TV2luZG93QmVsb3d8TlNXaW5kb3dDbG9zZUJ1dHRvbnxOU1dpbmRvd1Rvb2xiYXJCdXR0b258TlNXaW5kb3dab29tQnV0dG9ufE5TV2luZG93T3V0fE5TV2luZG93RG9jdW1lbnRJY29uQnV0dG9ufE5TV2luZG93RXhwb3NlZEV2ZW50VHlwZXxOU1dpbmRvd0Fib3ZlfE5TV29ya3NwYWNlTGF1bmNoTmV3SW5zdGFuY2V8TlNXb3Jrc3BhY2VMYXVuY2hJbmhpYml0aW5nQmFja2dyb3VuZE9ubHl8TlNXb3Jrc3BhY2VMYXVuY2hEZWZhdWx0fE5TV29ya3NwYWNlTGF1bmNoUHJlZmVycmluZ0NsYXNzaWN8TlNXb3Jrc3BhY2VMYXVuY2hXaXRob3V0QWN0aXZhdGlvbnxOU1dvcmtzcGFjZUxhdW5jaFdpdGhvdXRBZGRpbmdUb1JlY2VudHN8TlNXb3Jrc3BhY2VMYXVuY2hBc3luY3xOU1dvcmtzcGFjZUxhdW5jaEFuZEhpZGV8TlNXb3Jrc3BhY2VMYXVuY2hBbmRIaWRlT3RoZXJzfE5TV29ya3NwYWNlTGF1bmNoQW5kUHJpbnR8TlNXb3Jrc3BhY2VMYXVuY2hBbGxvd2luZ0NsYXNzaWNTdGFydHVwfE5TV2Vla2RheUNhbGVuZGFyVW5pdHxOU1dlZWtkYXlPcmRpbmFsQ2FsZW5kYXJVbml0fE5TV2Vla0NhbGVuZGFyVW5pdHxOU1dhbnRzQmlkaUxldmVsc3xOU1dhcm5pbmdBbGVydFN0eWxlfE5TV3JpdGluZ0RpcmVjdGlvblJpZ2h0VG9MZWZ0fE5TV3JpdGluZ0RpcmVjdGlvbk5hdHVyYWx8TlNXcml0aW5nRGlyZWN0aW9uTGVmdFRvUmlnaHR8TlNXcmFwQ2FsZW5kYXJDb21wb25lbnRzfE5TTGlzdE1vZGVNYXRyaXh8TlNMaW5lTW92ZXNSaWdodHxOU0xpbmVNb3Zlc0Rvd258TlNMaW5lTW92ZXNVcHxOU0xpbmVNb3Zlc0xlZnR8TlNMaW5lQm9yZGVyfE5TTGluZUJyZWFrQnlDaGFyV3JhcHBpbmd8TlNMaW5lQnJlYWtCeUNsaXBwaW5nfE5TTGluZUJyZWFrQnlUcnVuY2F0aW5nTWlkZGxlfE5TTGluZUJyZWFrQnlUcnVuY2F0aW5nSGVhZHxOU0xpbmVCcmVha0J5VHJ1bmNhdGluZ1RhaWx8TlNMaW5lQnJlYWtCeVdvcmRXcmFwcGluZ3xOU0xpbmVTZXBhcmF0b3JDaGFyYWN0ZXJ8TlNMaW5lU3dlZXBSaWdodHxOU0xpbmVTd2VlcERvd258TlNMaW5lU3dlZXBVcHxOU0xpbmVTd2VlcExlZnR8TlNMaW5lVG9CZXppZXJQYXRoRWxlbWVudHxOU0xpbmVEb2VzbnRNb3ZlfE5TTGluZWFyU2xpZGVyfE5TTGl0ZXJhbFNlYXJjaHxOU0xpa2VQcmVkaWNhdGVPcGVyYXRvclR5cGV8TlNMaWdodGVyRm9udEFjdGlvbnxOU0xpYnJhcnlEaXJlY3Rvcnl8TlNMb2NhbERvbWFpbk1hc2t8TlNMZXNzVGhhbkNvbXBhcmlzb258TlNMZXNzVGhhbk9yRXF1YWxUb0NvbXBhcmlzb258TlNMZXNzVGhhbk9yRXF1YWxUb1ByZWRpY2F0ZU9wZXJhdG9yVHlwZXxOU0xlc3NUaGFuUHJlZGljYXRlT3BlcmF0b3JUeXBlfE5TTGVmdE1vdXNlRG93bnxOU0xlZnRNb3VzZURvd25NYXNrfE5TTGVmdE1vdXNlRHJhZ2dlZHxOU0xlZnRNb3VzZURyYWdnZWRNYXNrfE5TTGVmdE1vdXNlVXB8TlNMZWZ0TW91c2VVcE1hc2t8TlNMZWZ0VGV4dE1vdmVtZW50fE5TTGVmdFRleHRBbGlnbm1lbnR8TlNMZWZ0VGFic0JlemVsQm9yZGVyfE5TTGVmdFRhYlN0b3BUeXBlfE5TTGVmdEFycm93RnVuY3Rpb25LZXl8TlNMYXlvdXRSaWdodFRvTGVmdHxOU0xheW91dE5vdERvbmV8TlNMYXlvdXRDYW50Rml0fE5TTGF5b3V0T3V0T2ZHbHlwaHN8TlNMYXlvdXREb25lfE5TTGF5b3V0TGVmdFRvUmlnaHR8TlNMYW5kc2NhcGVPcmllbnRhdGlvbnxOU0xBQkNvbG9yU3BhY2VNb2RlbHxOU0FzY2lpV2l0aERvdWJsZUJ5dGVFVUNHbHlwaFBhY2tpbmd8TlNBc2NlbmRpbmdQYWdlT3JkZXJ8TlNBbnlUeXBlfE5TQW55UHJlZGljYXRlTW9kaWZpZXJ8TlNBbnlFdmVudE1hc2t8TlNBbmNob3JlZFNlYXJjaHxOU0FuaW1hdGlvbkJsb2NraW5nfE5TQW5pbWF0aW9uTm9uYmxvY2tpbmd8TlNBbmltYXRpb25Ob25ibG9ja2luZ1RocmVhZGVkfE5TQW5pbWF0aW9uRWZmZWN0RGlzYXBwZWFyaW5nSXRlbURlZmF1bHR8TlNBbmltYXRpb25FZmZlY3RQb29mfE5TQW5pbWF0aW9uRWFzZUlufE5TQW5pbWF0aW9uRWFzZUluT3V0fE5TQW5pbWF0aW9uRWFzZU91dHxOU0FuaW1hdGlvbkxpbmVhcnxOU0FuZFByZWRpY2F0ZVR5cGV8TlNBdEJvdHRvbXxOU0F0dGFjaG1lbnRDaGFyYWN0ZXJ8TlNBdG9taWNXcml0ZXxOU0F0VG9wfE5TQVNDSUlTdHJpbmdFbmNvZGluZ3xOU0Fkb2JlR0IxQ2hhcmFjdGVyQ29sbGVjdGlvbnxOU0Fkb2JlQ05TMUNoYXJhY3RlckNvbGxlY3Rpb258TlNBZG9iZUphcGFuMUNoYXJhY3RlckNvbGxlY3Rpb258TlNBZG9iZUphcGFuMkNoYXJhY3RlckNvbGxlY3Rpb258TlNBZG9iZUtvcmVhMUNoYXJhY3RlckNvbGxlY3Rpb258TlNBZGRUcmFpdEZvbnRBY3Rpb258TlNBZG1pbkFwcGxpY2F0aW9uRGlyZWN0b3J5fE5TQXV0b3NhdmVPcGVyYXRpb258TlNBdXRvUGFnaW5hdGlvbnxOU0FwcGxpY2F0aW9uU3VwcG9ydERpcmVjdG9yeXxOU0FwcGxpY2F0aW9uRGlyZWN0b3J5fE5TQXBwbGljYXRpb25EZWZpbmVkfE5TQXBwbGljYXRpb25EZWZpbmVkTWFza3xOU0FwcGxpY2F0aW9uRGVsZWdhdGVSZXBseVN1Y2Nlc3N8TlNBcHBsaWNhdGlvbkRlbGVnYXRlUmVwbHlDYW5jZWx8TlNBcHBsaWNhdGlvbkRlbGVnYXRlUmVwbHlGYWlsdXJlfE5TQXBwbGljYXRpb25EZWFjdGl2YXRlZEV2ZW50VHlwZXxOU0FwcGxpY2F0aW9uQWN0aXZhdGVkRXZlbnRUeXBlfE5TQXBwS2l0RGVmaW5lZHxOU0FwcEtpdERlZmluZWRNYXNrfE5TQWx0ZXJuYXRlS2V5TWFza3xOU0FscGhhU2hpZnRLZXlNYXNrfE5TQWxwaGFOb25wcmVtdWx0aXBsaWVkQml0bWFwRm9ybWF0fE5TQWxwaGFGaXJzdEJpdG1hcEZvcm1hdHxOU0FsZXJ0U2Vjb25kQnV0dG9uUmV0dXJufE5TQWxlcnRUaGlyZEJ1dHRvblJldHVybnxOU0FsZXJ0T3RoZXJSZXR1cm58TlNBbGVydERlZmF1bHRSZXR1cm58TlNBbGVydEVycm9yUmV0dXJufE5TQWxlcnRGaXJzdEJ1dHRvblJldHVybnxOU0FsZXJ0QWx0ZXJuYXRlUmV0dXJufE5TQWxsU2Nyb2xsZXJQYXJ0c3xOU0FsbERvbWFpbnNNYXNrfE5TQWxsUHJlZGljYXRlTW9kaWZpZXJ8TlNBbGxMaWJyYXJpZXNEaXJlY3Rvcnl8TlNBbGxBcHBsaWNhdGlvbnNEaXJlY3Rvcnl8TlNBcmd1bWVudHNXcm9uZ1NjcmlwdEVycm9yfE5TQXJndW1lbnRFdmFsdWF0aW9uU2NyaXB0RXJyb3J8TlNBYm92ZUJvdHRvbXxOU0Fib3ZlVG9wfE5TQVdURXZlbnRUeXBlXCIsXG4gICAgICAgIFwic3VwcG9ydC5jb25zdGFudC5ub3RpZmljYXRpb24uY29jb2EubGVvcGFyZFwiOiBcIk5TTWVudURpZEJlZ2luVHJhY2tpbmdOb3RpZmljYXRpb258TlNWaWV3RGlkVXBkYXRlVHJhY2tpbmdBcmVhc05vdGlmaWNhdGlvblwiLFxuICAgICAgICBcInN1cHBvcnQuY29uc3RhbnQubm90aWZpY2F0aW9uLmNvY29hXCI6IFwiTlNNZW51RGlkUmVtb3ZlSXRlbU5vdGlmaWNhdGlvbnxOU01lbnVEaWRTZW5kQWN0aW9uTm90aWZpY2F0aW9ufE5TTWVudURpZENoYW5nZUl0ZW1Ob3RpZmljYXRpb258TlNNZW51RGlkRW5kVHJhY2tpbmdOb3RpZmljYXRpb258TlNNZW51RGlkQWRkSXRlbU5vdGlmaWNhdGlvbnxOU01lbnVXaWxsU2VuZEFjdGlvbk5vdGlmaWNhdGlvbnxOU1N5c3RlbUNvbG9yc0RpZENoYW5nZU5vdGlmaWNhdGlvbnxOU1NwbGl0Vmlld0RpZFJlc2l6ZVN1YnZpZXdzTm90aWZpY2F0aW9ufE5TU3BsaXRWaWV3V2lsbFJlc2l6ZVN1YnZpZXdzTm90aWZpY2F0aW9ufE5TQ29udGV4dEhlbHBNb2RlRGlkRGVhY3RpdmF0ZU5vdGlmaWNhdGlvbnxOU0NvbnRleHRIZWxwTW9kZURpZEFjdGl2YXRlTm90aWZpY2F0aW9ufE5TQ29udHJvbFRpbnREaWRDaGFuZ2VOb3RpZmljYXRpb258TlNDb250cm9sVGV4dERpZEJlZ2luRWRpdGluZ05vdGlmaWNhdGlvbnxOU0NvbnRyb2xUZXh0RGlkQ2hhbmdlTm90aWZpY2F0aW9ufE5TQ29udHJvbFRleHREaWRFbmRFZGl0aW5nTm90aWZpY2F0aW9ufE5TQ29sb3JQYW5lbENvbG9yRGlkQ2hhbmdlTm90aWZpY2F0aW9ufE5TQ29sb3JMaXN0RGlkQ2hhbmdlTm90aWZpY2F0aW9ufE5TQ29tYm9Cb3hTZWxlY3Rpb25Jc0NoYW5naW5nTm90aWZpY2F0aW9ufE5TQ29tYm9Cb3hTZWxlY3Rpb25EaWRDaGFuZ2VOb3RpZmljYXRpb258TlNDb21ib0JveFdpbGxEaXNtaXNzTm90aWZpY2F0aW9ufE5TQ29tYm9Cb3hXaWxsUG9wVXBOb3RpZmljYXRpb258TlNDbGFzc0Rlc2NyaXB0aW9uTmVlZGVkRm9yQ2xhc3NOb3RpZmljYXRpb258TlNUb29sYmFyRGlkUmVtb3ZlSXRlbU5vdGlmaWNhdGlvbnxOU1Rvb2xiYXJXaWxsQWRkSXRlbU5vdGlmaWNhdGlvbnxOU1RleHRTdG9yYWdlRGlkUHJvY2Vzc0VkaXRpbmdOb3RpZmljYXRpb258TlNUZXh0U3RvcmFnZVdpbGxQcm9jZXNzRWRpdGluZ05vdGlmaWNhdGlvbnxOU1RleHREaWRCZWdpbkVkaXRpbmdOb3RpZmljYXRpb258TlNUZXh0RGlkQ2hhbmdlTm90aWZpY2F0aW9ufE5TVGV4dERpZEVuZEVkaXRpbmdOb3RpZmljYXRpb258TlNUZXh0Vmlld0RpZENoYW5nZVNlbGVjdGlvbk5vdGlmaWNhdGlvbnxOU1RleHRWaWV3RGlkQ2hhbmdlVHlwaW5nQXR0cmlidXRlc05vdGlmaWNhdGlvbnxOU1RleHRWaWV3V2lsbENoYW5nZU5vdGlmeWluZ1RleHRWaWV3Tm90aWZpY2F0aW9ufE5TVGFibGVWaWV3U2VsZWN0aW9uSXNDaGFuZ2luZ05vdGlmaWNhdGlvbnxOU1RhYmxlVmlld1NlbGVjdGlvbkRpZENoYW5nZU5vdGlmaWNhdGlvbnxOU1RhYmxlVmlld0NvbHVtbkRpZFJlc2l6ZU5vdGlmaWNhdGlvbnxOU1RhYmxlVmlld0NvbHVtbkRpZE1vdmVOb3RpZmljYXRpb258TlNJbWFnZVJlcFJlZ2lzdHJ5RGlkQ2hhbmdlTm90aWZpY2F0aW9ufE5TT3V0bGluZVZpZXdTZWxlY3Rpb25Jc0NoYW5naW5nTm90aWZpY2F0aW9ufE5TT3V0bGluZVZpZXdTZWxlY3Rpb25EaWRDaGFuZ2VOb3RpZmljYXRpb258TlNPdXRsaW5lVmlld0NvbHVtbkRpZFJlc2l6ZU5vdGlmaWNhdGlvbnxOU091dGxpbmVWaWV3Q29sdW1uRGlkTW92ZU5vdGlmaWNhdGlvbnxOU091dGxpbmVWaWV3SXRlbURpZENvbGxhcHNlTm90aWZpY2F0aW9ufE5TT3V0bGluZVZpZXdJdGVtRGlkRXhwYW5kTm90aWZpY2F0aW9ufE5TT3V0bGluZVZpZXdJdGVtV2lsbENvbGxhcHNlTm90aWZpY2F0aW9ufE5TT3V0bGluZVZpZXdJdGVtV2lsbEV4cGFuZE5vdGlmaWNhdGlvbnxOU0RyYXdlckRpZENsb3NlTm90aWZpY2F0aW9ufE5TRHJhd2VyRGlkT3Blbk5vdGlmaWNhdGlvbnxOU0RyYXdlcldpbGxDbG9zZU5vdGlmaWNhdGlvbnxOU0RyYXdlcldpbGxPcGVuTm90aWZpY2F0aW9ufE5TUG9wVXBCdXR0b25DZWxsV2lsbFBvcFVwTm90aWZpY2F0aW9ufE5TUG9wVXBCdXR0b25XaWxsUG9wVXBOb3RpZmljYXRpb258TlNWaWV3R2xvYmFsRnJhbWVEaWRDaGFuZ2VOb3RpZmljYXRpb258TlNWaWV3Qm91bmRzRGlkQ2hhbmdlTm90aWZpY2F0aW9ufE5TVmlld0ZvY3VzRGlkQ2hhbmdlTm90aWZpY2F0aW9ufE5TVmlld0ZyYW1lRGlkQ2hhbmdlTm90aWZpY2F0aW9ufE5TRm9udFNldENoYW5nZWROb3RpZmljYXRpb258TlNXaW5kb3dEaWRSZXNpemVOb3RpZmljYXRpb258TlNXaW5kb3dEaWRSZXNpZ25NYWluTm90aWZpY2F0aW9ufE5TV2luZG93RGlkUmVzaWduS2V5Tm90aWZpY2F0aW9ufE5TV2luZG93RGlkTWluaWF0dXJpemVOb3RpZmljYXRpb258TlNXaW5kb3dEaWRNb3ZlTm90aWZpY2F0aW9ufE5TV2luZG93RGlkQmVjb21lTWFpbk5vdGlmaWNhdGlvbnxOU1dpbmRvd0RpZEJlY29tZUtleU5vdGlmaWNhdGlvbnxOU1dpbmRvd0RpZENoYW5nZVNjcmVlbk5vdGlmaWNhdGlvbnxOU1dpbmRvd0RpZENoYW5nZVNjcmVlblByb2ZpbGVOb3RpZmljYXRpb258TlNXaW5kb3dEaWREZW1pbmlhdHVyaXplTm90aWZpY2F0aW9ufE5TV2luZG93RGlkVXBkYXRlTm90aWZpY2F0aW9ufE5TV2luZG93RGlkRW5kU2hlZXROb3RpZmljYXRpb258TlNXaW5kb3dEaWRFeHBvc2VOb3RpZmljYXRpb258TlNXaW5kb3dXaWxsTWluaWF0dXJpemVOb3RpZmljYXRpb258TlNXaW5kb3dXaWxsTW92ZU5vdGlmaWNhdGlvbnxOU1dpbmRvd1dpbGxCZWdpblNoZWV0Tm90aWZpY2F0aW9ufE5TV2luZG93V2lsbENsb3NlTm90aWZpY2F0aW9ufE5TV29ya3NwYWNlU2Vzc2lvbkRpZFJlc2lnbkFjdGl2ZU5vdGlmaWNhdGlvbnxOU1dvcmtzcGFjZVNlc3Npb25EaWRCZWNvbWVBY3RpdmVOb3RpZmljYXRpb258TlNXb3Jrc3BhY2VEaWRNb3VudE5vdGlmaWNhdGlvbnxOU1dvcmtzcGFjZURpZFRlcm1pbmF0ZUFwcGxpY2F0aW9uTm90aWZpY2F0aW9ufE5TV29ya3NwYWNlRGlkVW5tb3VudE5vdGlmaWNhdGlvbnxOU1dvcmtzcGFjZURpZFBlcmZvcm1GaWxlT3BlcmF0aW9uTm90aWZpY2F0aW9ufE5TV29ya3NwYWNlRGlkV2FrZU5vdGlmaWNhdGlvbnxOU1dvcmtzcGFjZURpZExhdW5jaEFwcGxpY2F0aW9uTm90aWZpY2F0aW9ufE5TV29ya3NwYWNlV2lsbFNsZWVwTm90aWZpY2F0aW9ufE5TV29ya3NwYWNlV2lsbFVubW91bnROb3RpZmljYXRpb258TlNXb3Jrc3BhY2VXaWxsUG93ZXJPZmZOb3RpZmljYXRpb258TlNXb3Jrc3BhY2VXaWxsTGF1bmNoQXBwbGljYXRpb25Ob3RpZmljYXRpb258TlNBbnRpYWxpYXNUaHJlc2hvbGRDaGFuZ2VkTm90aWZpY2F0aW9ufE5TQXBwbGljYXRpb25EaWRSZXNpZ25BY3RpdmVOb3RpZmljYXRpb258TlNBcHBsaWNhdGlvbkRpZEJlY29tZUFjdGl2ZU5vdGlmaWNhdGlvbnxOU0FwcGxpY2F0aW9uRGlkSGlkZU5vdGlmaWNhdGlvbnxOU0FwcGxpY2F0aW9uRGlkQ2hhbmdlU2NyZWVuUGFyYW1ldGVyc05vdGlmaWNhdGlvbnxOU0FwcGxpY2F0aW9uRGlkVW5oaWRlTm90aWZpY2F0aW9ufE5TQXBwbGljYXRpb25EaWRVcGRhdGVOb3RpZmljYXRpb258TlNBcHBsaWNhdGlvbkRpZEZpbmlzaExhdW5jaGluZ05vdGlmaWNhdGlvbnxOU0FwcGxpY2F0aW9uV2lsbFJlc2lnbkFjdGl2ZU5vdGlmaWNhdGlvbnxOU0FwcGxpY2F0aW9uV2lsbEJlY29tZUFjdGl2ZU5vdGlmaWNhdGlvbnxOU0FwcGxpY2F0aW9uV2lsbEhpZGVOb3RpZmljYXRpb258TlNBcHBsaWNhdGlvbldpbGxUZXJtaW5hdGVOb3RpZmljYXRpb258TlNBcHBsaWNhdGlvbldpbGxVbmhpZGVOb3RpZmljYXRpb258TlNBcHBsaWNhdGlvbldpbGxVcGRhdGVOb3RpZmljYXRpb258TlNBcHBsaWNhdGlvbldpbGxGaW5pc2hMYXVuY2hpbmdOb3RpZmljYXRpb258TlNBcHBsZUV2ZW50TWFuYWdlcldpbGxQcm9jZXNzRmlyc3RFdmVudE5vdGlmaWNhdGlvblwiLFxuICAgICAgICBcInN1cHBvcnQuY29uc3RhbnQuY29jb2EubGVvcGFyZFwiOiBcIk5TUnVsZUVkaXRvclJvd1R5cGVTaW1wbGV8TlNSdWxlRWRpdG9yUm93VHlwZUNvbXBvdW5kfE5TUnVsZUVkaXRvck5lc3RpbmdNb2RlU2luZ2xlfE5TUnVsZUVkaXRvck5lc3RpbmdNb2RlU2ltcGxlfE5TUnVsZUVkaXRvck5lc3RpbmdNb2RlQ29tcG91bmR8TlNSdWxlRWRpdG9yTmVzdGluZ01vZGVMaXN0fE5TR3JhZGllbnREcmF3c0JlZm9yZVN0YXJ0aW5nTG9jYXRpb258TlNHcmFkaWVudERyYXdzQWZ0ZXJFbmRpbmdMb2NhdGlvbnxOU01pbnVzU2V0RXhwcmVzc2lvblR5cGV8TlNNYWNoUG9ydERlYWxsb2NhdGVSZWNlaXZlUmlnaHR8TlNNYWNoUG9ydERlYWxsb2NhdGVTZW5kUmlnaHR8TlNNYWNoUG9ydERlYWxsb2NhdGVOb25lfE5TTWFwVGFibGVTdHJvbmdNZW1vcnl8TlNNYXBUYWJsZUNvcHlJbnxOU01hcFRhYmxlWmVyb2luZ1dlYWtNZW1vcnl8TlNNYXBUYWJsZU9iamVjdFBvaW50ZXJQZXJzb25hbGl0eXxOU0JveEN1c3RvbXxOU0J1bmRsZUV4ZWN1dGFibGVBcmNoaXRlY3R1cmVYODZ8TlNCdW5kbGVFeGVjdXRhYmxlQXJjaGl0ZWN0dXJlSTM4NnxOU0J1bmRsZUV4ZWN1dGFibGVBcmNoaXRlY3R1cmVQUEN8TlNCdW5kbGVFeGVjdXRhYmxlQXJjaGl0ZWN0dXJlUFBDNjR8TlNCZXR3ZWVuUHJlZGljYXRlT3BlcmF0b3JUeXBlfE5TQmFja2dyb3VuZFN0eWxlUmFpc2VkfE5TQmFja2dyb3VuZFN0eWxlRGFya3xOU0JhY2tncm91bmRTdHlsZUxpZ2h0fE5TQmFja2dyb3VuZFN0eWxlTG93ZXJlZHxOU1N0cmluZ0RyYXdpbmdUcnVuY2F0ZXNMYXN0VmlzaWJsZUxpbmV8TlNTdHJpbmdFbmNvZGluZ0NvbnZlcnNpb25FeHRlcm5hbFJlcHJlc2VudGF0aW9ufE5TU3RyaW5nRW5jb2RpbmdDb252ZXJzaW9uQWxsb3dMb3NzeXxOU1N1YnF1ZXJ5RXhwcmVzc2lvblR5cGV8TlNTcGVlY2hTZW50ZW5jZUJvdW5kYXJ5fE5TU3BlZWNoSW1tZWRpYXRlQm91bmRhcnl8TlNTcGVlY2hXb3JkQm91bmRhcnl8TlNTcGVsbGluZ1N0YXRlR3JhbW1hckZsYWd8TlNTcGVsbGluZ1N0YXRlU3BlbGxpbmdGbGFnfE5TU3BsaXRWaWV3RGl2aWRlclN0eWxlVGhpbnxOU1NwbGl0Vmlld0RpdmlkZXJTdHlsZVRoaWNrfE5TU2VydmljZVJlcXVlc3RUaW1lZE91dEVycm9yfE5TU2VydmljZU1pc2NlbGxhbmVvdXNFcnJvcnxOU1NlcnZpY2VNYWxmb3JtZWRTZXJ2aWNlRGljdGlvbmFyeUVycm9yfE5TU2VydmljZUludmFsaWRQYXN0ZWJvYXJkRGF0YUVycm9yfE5TU2VydmljZUVycm9yTWluaW11bXxOU1NlcnZpY2VFcnJvck1heGltdW18TlNTZXJ2aWNlQXBwbGljYXRpb25Ob3RGb3VuZEVycm9yfE5TU2VydmljZUFwcGxpY2F0aW9uTGF1bmNoRmFpbGVkRXJyb3J8TlNTZWdtZW50U3R5bGVSb3VuZFJlY3R8TlNTZWdtZW50U3R5bGVSb3VuZGVkfE5TU2VnbWVudFN0eWxlU21hbGxTcXVhcmV8TlNTZWdtZW50U3R5bGVDYXBzdWxlfE5TU2VnbWVudFN0eWxlVGV4dHVyZWRSb3VuZGVkfE5TU2VnbWVudFN0eWxlVGV4dHVyZWRTcXVhcmV8TlNTZWdtZW50U3R5bGVBdXRvbWF0aWN8TlNIVURXaW5kb3dNYXNrfE5TSGFzaFRhYmxlU3Ryb25nTWVtb3J5fE5TSGFzaFRhYmxlQ29weUlufE5TSGFzaFRhYmxlWmVyb2luZ1dlYWtNZW1vcnl8TlNIYXNoVGFibGVPYmplY3RQb2ludGVyUGVyc29uYWxpdHl8TlNOb01vZGVDb2xvclBhbmVsfE5TTmV0U2VydmljZU5vQXV0b1JlbmFtZXxOU0NoYW5nZVJlZG9uZXxOU0NvbnRhaW5zUHJlZGljYXRlT3BlcmF0b3JUeXBlfE5TQ29sb3JSZW5kZXJpbmdJbnRlbnRSZWxhdGl2ZUNvbG9yaW1ldHJpY3xOU0NvbG9yUmVuZGVyaW5nSW50ZW50U2F0dXJhdGlvbnxOU0NvbG9yUmVuZGVyaW5nSW50ZW50RGVmYXVsdHxOU0NvbG9yUmVuZGVyaW5nSW50ZW50UGVyY2VwdHVhbHxOU0NvbG9yUmVuZGVyaW5nSW50ZW50QWJzb2x1dGVDb2xvcmltZXRyaWN8TlNDb2xsZWN0b3JEaXNhYmxlZE9wdGlvbnxOU0NlbGxIaXROb25lfE5TQ2VsbEhpdENvbnRlbnRBcmVhfE5TQ2VsbEhpdFRyYWNrYWJsZUFyZWF8TlNDZWxsSGl0RWRpdGFibGVUZXh0QXJlYXxOU1RpbWVab25lTmFtZVN0eWxlU2hvcnRTdGFuZGFyZHxOU1RpbWVab25lTmFtZVN0eWxlU2hvcnREYXlsaWdodFNhdmluZ3xOU1RpbWVab25lTmFtZVN0eWxlU3RhbmRhcmR8TlNUaW1lWm9uZU5hbWVTdHlsZURheWxpZ2h0U2F2aW5nfE5TVGV4dEZpZWxkRGF0ZVBpY2tlclN0eWxlfE5TVGFibGVWaWV3U2VsZWN0aW9uSGlnaGxpZ2h0U3R5bGVSZWd1bGFyfE5TVGFibGVWaWV3U2VsZWN0aW9uSGlnaGxpZ2h0U3R5bGVTb3VyY2VMaXN0fE5TVHJhY2tpbmdNb3VzZU1vdmVkfE5TVHJhY2tpbmdNb3VzZUVudGVyZWRBbmRFeGl0ZWR8TlNUcmFja2luZ0N1cnNvclVwZGF0ZXxOU1RyYWNraW5nSW5WaXNpYmxlUmVjdHxOU1RyYWNraW5nRW5hYmxlZER1cmluZ01vdXNlRHJhZ3xOU1RyYWNraW5nQXNzdW1lSW5zaWRlfE5TVHJhY2tpbmdBY3RpdmVJbktleVdpbmRvd3xOU1RyYWNraW5nQWN0aXZlSW5BY3RpdmVBcHB8TlNUcmFja2luZ0FjdGl2ZVdoZW5GaXJzdFJlc3BvbmRlcnxOU1RyYWNraW5nQWN0aXZlQWx3YXlzfE5TSW50ZXJzZWN0U2V0RXhwcmVzc2lvblR5cGV8TlNJbmRleGVkQ29sb3JTcGFjZU1vZGVsfE5TSW1hZ2VTY2FsZU5vbmV8TlNJbWFnZVNjYWxlUHJvcG9ydGlvbmFsbHlEb3dufE5TSW1hZ2VTY2FsZVByb3BvcnRpb25hbGx5VXBPckRvd258TlNJbWFnZVNjYWxlQXhlc0luZGVwZW5kZW50bHl8TlNPcGVuR0xQRkFBbGxvd09mZmxpbmVSZW5kZXJlcnN8TlNPcGVyYXRpb25RdWV1ZURlZmF1bHRNYXhDb25jdXJyZW50T3BlcmF0aW9uQ291bnR8TlNPcGVyYXRpb25RdWV1ZVByaW9yaXR5SGlnaHxOU09wZXJhdGlvblF1ZXVlUHJpb3JpdHlOb3JtYWx8TlNPcGVyYXRpb25RdWV1ZVByaW9yaXR5VmVyeUhpZ2h8TlNPcGVyYXRpb25RdWV1ZVByaW9yaXR5VmVyeUxvd3xOU09wZXJhdGlvblF1ZXVlUHJpb3JpdHlMb3d8TlNEaWFjcml0aWNJbnNlbnNpdGl2ZVNlYXJjaHxOU0Rvd25sb2Fkc0RpcmVjdG9yeXxOU1VuaW9uU2V0RXhwcmVzc2lvblR5cGV8TlNVVEYxNkJpZ0VuZGlhblN0cmluZ0VuY29kaW5nfE5TVVRGMTZTdHJpbmdFbmNvZGluZ3xOU1VURjE2TGl0dGxlRW5kaWFuU3RyaW5nRW5jb2Rpbmd8TlNVVEYzMkJpZ0VuZGlhblN0cmluZ0VuY29kaW5nfE5TVVRGMzJTdHJpbmdFbmNvZGluZ3xOU1VURjMyTGl0dGxlRW5kaWFuU3RyaW5nRW5jb2Rpbmd8TlNQb2ludGVyRnVuY3Rpb25zTWFjaFZpcnR1YWxNZW1vcnl8TlNQb2ludGVyRnVuY3Rpb25zTWFsbG9jTWVtb3J5fE5TUG9pbnRlckZ1bmN0aW9uc1N0cm9uZ01lbW9yeXxOU1BvaW50ZXJGdW5jdGlvbnNTdHJ1Y3RQZXJzb25hbGl0eXxOU1BvaW50ZXJGdW5jdGlvbnNDU3RyaW5nUGVyc29uYWxpdHl8TlNQb2ludGVyRnVuY3Rpb25zQ29weUlufE5TUG9pbnRlckZ1bmN0aW9uc0ludGVnZXJQZXJzb25hbGl0eXxOU1BvaW50ZXJGdW5jdGlvbnNaZXJvaW5nV2Vha01lbW9yeXxOU1BvaW50ZXJGdW5jdGlvbnNPcGFxdWVNZW1vcnl8TlNQb2ludGVyRnVuY3Rpb25zT3BhcXVlUGVyc29uYWxpdHl8TlNQb2ludGVyRnVuY3Rpb25zT2JqZWN0UG9pbnRlclBlcnNvbmFsaXR5fE5TUG9pbnRlckZ1bmN0aW9uc09iamVjdFBlcnNvbmFsaXR5fE5TUGF0aFN0eWxlU3RhbmRhcmR8TlNQYXRoU3R5bGVOYXZpZ2F0aW9uQmFyfE5TUGF0aFN0eWxlUG9wVXB8TlNQYXR0ZXJuQ29sb3JTcGFjZU1vZGVsfE5TUHJpbnRQYW5lbFNob3dzU2NhbGluZ3xOU1ByaW50UGFuZWxTaG93c0NvcGllc3xOU1ByaW50UGFuZWxTaG93c09yaWVudGF0aW9ufE5TUHJpbnRQYW5lbFNob3dzUGFwZXJTaXplfE5TUHJpbnRQYW5lbFNob3dzUGFnZVJhbmdlfE5TUHJpbnRQYW5lbFNob3dzUGFnZVNldHVwQWNjZXNzb3J5fE5TUHJpbnRQYW5lbFNob3dzUHJldmlld3xOU0V4ZWN1dGFibGVSdW50aW1lTWlzbWF0Y2hFcnJvcnxOU0V4ZWN1dGFibGVOb3RMb2FkYWJsZUVycm9yfE5TRXhlY3V0YWJsZUVycm9yTWluaW11bXxOU0V4ZWN1dGFibGVFcnJvck1heGltdW18TlNFeGVjdXRhYmxlTGlua0Vycm9yfE5TRXhlY3V0YWJsZUxvYWRFcnJvcnxOU0V4ZWN1dGFibGVBcmNoaXRlY3R1cmVNaXNtYXRjaEVycm9yfE5TS2V5VmFsdWVPYnNlcnZpbmdPcHRpb25Jbml0aWFsfE5TS2V5VmFsdWVPYnNlcnZpbmdPcHRpb25QcmlvcnxOU0ZpbmRQYW5lbFN1YnN0cmluZ01hdGNoVHlwZVN0YXJ0c1dpdGh8TlNGaW5kUGFuZWxTdWJzdHJpbmdNYXRjaFR5cGVDb250YWluc3xOU0ZpbmRQYW5lbFN1YnN0cmluZ01hdGNoVHlwZUVuZHNXaXRofE5TRmluZFBhbmVsU3Vic3RyaW5nTWF0Y2hUeXBlRnVsbFdvcmR8TlNGaWxlUmVhZFRvb0xhcmdlRXJyb3J8TlNGaWxlUmVhZFVua25vd25TdHJpbmdFbmNvZGluZ0Vycm9yfE5TRm9yY2VkT3JkZXJpbmdTZWFyY2h8TlNXaW5kb3dCYWNraW5nTG9jYXRpb25NYWluTWVtb3J5fE5TV2luZG93QmFja2luZ0xvY2F0aW9uRGVmYXVsdHxOU1dpbmRvd0JhY2tpbmdMb2NhdGlvblZpZGVvTWVtb3J5fE5TV2luZG93U2hhcmluZ1JlYWRPbmx5fE5TV2luZG93U2hhcmluZ1JlYWRXcml0ZXxOU1dpbmRvd1NoYXJpbmdOb25lfE5TV2luZG93Q29sbGVjdGlvbkJlaGF2aW9yTW92ZVRvQWN0aXZlU3BhY2V8TlNXaW5kb3dDb2xsZWN0aW9uQmVoYXZpb3JDYW5Kb2luQWxsU3BhY2VzfE5TV2luZG93Q29sbGVjdGlvbkJlaGF2aW9yRGVmYXVsdHxOU1dpZHRoSW5zZW5zaXRpdmVTZWFyY2h8TlNBZ2dyZWdhdGVFeHByZXNzaW9uVHlwZVwiXG4gICAgfTtcbiAgICAvLyByZWdleHAgbXVzdCBub3QgaGF2ZSBjYXB0dXJpbmcgcGFyZW50aGVzZXMuIFVzZSAoPzopIGluc3RlYWQuXG4gICAgLy8gcmVnZXhwcyBhcmUgb3JkZXJlZCAtPiB0aGUgZmlyc3QgbWF0Y2ggaXMgdXNlZFxuXG4gICAgdmFyIGVzY2FwZWRDb25zdFJlID0gXCJcXFxcXFxcXCg/OlthYmVmbnJ0didcXFwiP1xcXFxcXFxcXXxcIiArIFxuICAgICAgICAgICAgICAgICAgICAgICAgIFwiWzAtM11cXFxcZHsxLDJ9fFwiICtcbiAgICAgICAgICAgICAgICAgICAgICAgICBcIls0LTddXFxcXGQ/fFwiICtcbiAgICAgICAgICAgICAgICAgICAgICAgICBcIjIyMnxcIiArXG4gICAgICAgICAgICAgICAgICAgICAgICAgXCJ4W2EtekEtWjAtOV0rKVwiO1xuXG4gICAgdmFyIHNwZWNpYWxWYXJpYWJsZXMgPSBbe1xuICAgICAgICAgICAgcmVnZXg6IFwiXFxcXGJfY21kXFxcXGJcIixcbiAgICAgICAgICAgIHRva2VuOiBcInZhcmlhYmxlLm90aGVyLnNlbGVjdG9yLm9iamNcIlxuICAgICAgICB9LCB7XG4gICAgICAgICAgICByZWdleDogXCJcXFxcYig/OnNlbGZ8c3VwZXIpXFxcXGJcIixcbiAgICAgICAgICAgIHRva2VuOiBcInZhcmlhYmxlLmxhbmd1YWdlLm9iamNcIlxuICAgICAgICB9XG4gICAgXTtcblxuICAgIHZhciBjT2JqID0gbmV3IENIaWdobGlnaHRSdWxlcyhOU0tleXdvcmRzKTtcbiAgICB2YXIgY1J1bGVzID0gY09iai5nZXRSdWxlcygpO1xuICAgIHRoaXMuJGtleXdvcmRMaXN0ID0gY09iai4ka2V5d29yZExpc3Q7XG5cbiAgICB0aGlzLiRydWxlcyA9IHtcbiAgICBcInN0YXJ0XCI6IFsgXG4gICAgICAgIHtcbiAgICAgICAgICAgIHRva2VuIDogXCJjb21tZW50XCIsXG4gICAgICAgICAgICByZWdleCA6IFwiXFxcXC9cXFxcLy4qJFwiXG4gICAgICAgIH0sXG4gICAgICAgIERvY0NvbW1lbnRIaWdobGlnaHRSdWxlcy5nZXRTdGFydFJ1bGUoXCJkb2Mtc3RhcnRcIiksXG4gICAgICAgIHtcbiAgICAgICAgICAgIHRva2VuIDogXCJjb21tZW50XCIsIC8vIG11bHRpIGxpbmUgY29tbWVudFxuICAgICAgICAgICAgcmVnZXggOiBcIlxcXFwvXFxcXCpcIixcbiAgICAgICAgICAgIG5leHQgOiBcImNvbW1lbnRcIlxuICAgICAgICB9LCBcbiAgICAgICAge1xuICAgICAgICAgICAgdG9rZW46IFsgXCJzdG9yYWdlLnR5cGUub2JqY1wiLCBcInB1bmN0dWF0aW9uLmRlZmluaXRpb24uc3RvcmFnZS50eXBlLm9iamNcIiwgXG4gICAgICAgICAgICAgICAgICAgICAgIFwiZW50aXR5Lm5hbWUudHlwZS5vYmpjXCIsIFwidGV4dFwiLCBcImVudGl0eS5vdGhlci5pbmhlcml0ZWQtY2xhc3Mub2JqY1wiXG4gICAgICAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgcmVnZXg6IFwiKEApKGludGVyZmFjZXxwcm90b2NvbCkoPyEuKzspKFxcXFxzK1tBLVphLXpfXVtBLVphLXowLTlfXSopKFxcXFxzKjpcXFxccyopKFtBLVphLXpdKylcIlxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICB0b2tlbjogWyBcInN0b3JhZ2UudHlwZS5vYmpjXCIgXSxcbiAgICAgICAgICAgIHJlZ2V4OiBcIihAZW5kKVwiXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIHRva2VuOiBbIFwic3RvcmFnZS50eXBlLm9iamNcIiwgXCJlbnRpdHkubmFtZS50eXBlLm9iamNcIiwgXG4gICAgICAgICAgICAgICAgICAgICAgICBcImVudGl0eS5vdGhlci5pbmhlcml0ZWQtY2xhc3Mub2JqY1wiXG4gICAgICAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgcmVnZXg6IFwiKEBpbXBsZW1lbnRhdGlvbikoXFxcXHMrW0EtWmEtel9dW0EtWmEtejAtOV9dKikoXFxcXHMqPzo6XFxcXHMqKD86W0EtWmEtel1bQS1aYS16MC05XSopKT9cIlxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICB0b2tlbjogXCJzdHJpbmcuYmVnaW4ub2JqY1wiLFxuICAgICAgICAgICAgcmVnZXg6ICdAXCInLFxuICAgICAgICAgICAgbmV4dDogXCJjb25zdGFudF9OU1N0cmluZ1wiXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIHRva2VuOiBcInN0b3JhZ2UudHlwZS5vYmpjXCIsXG4gICAgICAgICAgICByZWdleDogXCJcXFxcYmlkXFxcXHMqPFwiLFxuICAgICAgICAgICAgbmV4dDogXCJwcm90b2NvbF9saXN0XCJcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgdG9rZW46IFwia2V5d29yZC5jb250cm9sLm1hY3JvLm9iamNcIixcbiAgICAgICAgICAgIHJlZ2V4OiBcIlxcXFxiTlNfRFVSSU5HfE5TX0hBTkRMRVJ8TlNfRU5ESEFORExFUlxcXFxiXCJcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgdG9rZW46IFtcInB1bmN0dWF0aW9uLmRlZmluaXRpb24ua2V5d29yZC5vYmpjXCIsIFwia2V5d29yZC5jb250cm9sLmV4Y2VwdGlvbi5vYmpjXCJdLFxuICAgICAgICAgICAgcmVnZXg6IFwiKEApKHRyeXxjYXRjaHxmaW5hbGx5fHRocm93KVxcXFxiXCJcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgdG9rZW46IFtcInB1bmN0dWF0aW9uLmRlZmluaXRpb24ua2V5d29yZC5vYmpjXCIsIFwia2V5d29yZC5vdGhlci5vYmpjXCJdLFxuICAgICAgICAgICAgcmVnZXg6IFwiKEApKGRlZnN8ZW5jb2RlKVxcXFxiXCJcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgdG9rZW46IFtcInN0b3JhZ2UudHlwZS5pZC5vYmpjXCIsIFwidGV4dFwiXSxcbiAgICAgICAgICAgIHJlZ2V4OiBcIihcXFxcYmlkXFxcXGIpKFxcXFxzfFxcXFxuKT9cIlxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICB0b2tlbjogXCJzdG9yYWdlLnR5cGUub2JqY1wiLFxuICAgICAgICAgICAgcmVnZXg6IFwiXFxcXGJJQk91dGxldHxJQkFjdGlvbnxCT09MfFNFTHxpZHx1bmljaGFyfElNUHxDbGFzc1xcXFxiXCJcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgdG9rZW46IFsgXCJwdW5jdHVhdGlvbi5kZWZpbml0aW9uLnN0b3JhZ2UudHlwZS5vYmpjXCIsIFwic3RvcmFnZS50eXBlLm9iamNcIl0sXG4gICAgICAgICAgICByZWdleDogXCIoQCkoY2xhc3N8cHJvdG9jb2wpXFxcXGJcIlxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICB0b2tlbjogWyBcInB1bmN0dWF0aW9uLmRlZmluaXRpb24uc3RvcmFnZS50eXBlLm9iamNcIiwgXCJwdW5jdHVhdGlvblwiXSxcbiAgICAgICAgICAgIHJlZ2V4OiBcIihAc2VsZWN0b3IpKFxcXFxzKlxcXFwoKVwiLFxuICAgICAgICAgICAgbmV4dDogXCJzZWxlY3RvcnNcIlxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICB0b2tlbjogWyBcInB1bmN0dWF0aW9uLmRlZmluaXRpb24uc3RvcmFnZS5tb2RpZmllci5vYmpjXCIsIFwic3RvcmFnZS5tb2RpZmllci5vYmpjXCJdLFxuICAgICAgICAgICAgcmVnZXg6IFwiKEApKHN5bmNocm9uaXplZHxwdWJsaWN8cHJpdmF0ZXxwcm90ZWN0ZWR8cGFja2FnZSlcXFxcYlwiXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIHRva2VuOiBcImNvbnN0YW50Lmxhbmd1YWdlLm9iamNcIixcbiAgICAgICAgICAgIHJlZ2V4OiBcIlxcXFxiWUVTfE5PfE5pbHxuaWxcXFxcYlwiXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIHRva2VuOiAgXCJzdXBwb3J0LnZhcmlhYmxlLmZvdW5kYXRpb25cIixcbiAgICAgICAgICAgIHJlZ2V4OiBcIlxcXFxiTlNBcHBcXFxcYlwiXG4gICAgICAgIH0sXG5cbiAgICAgICAge1xuICAgICAgICAgICAgdG9rZW4gOiBjT2JqLmdldEtleXdvcmRzKCksXG4gICAgICAgICAgICByZWdleCA6IFwiW2EtekEtWl8kXVthLXpBLVowLTlfJF0qXFxcXGJcIlxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICB0b2tlbjogXCJwdW5jdHVhdGlvbi5zZWN0aW9uLnNjb3BlLmJlZ2luLm9iamNcIixcbiAgICAgICAgICAgIHJlZ2V4OiBcIlxcXFxbXCIsXG4gICAgICAgICAgICBuZXh0OiBcImJyYWNrZXRlZF9jb250ZW50XCJcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgdG9rZW46IFwibWV0YS5mdW5jdGlvbi5vYmpjXCIsXG4gICAgICAgICAgICByZWdleDogXCJeKD86LXxcXFxcKylcXFxccypcIlxuICAgICAgICB9XG4gICAgXSxcbiAgICBcImNvbnN0YW50X05TU3RyaW5nXCI6IFtcbiAgICAgICAge1xuICAgICAgICAgICAgdG9rZW46IFwiY29uc3RhbnQuY2hhcmFjdGVyLmVzY2FwZS5vYmpjXCIsXG4gICAgICAgICAgICByZWdleDogZXNjYXBlZENvbnN0UmVcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgdG9rZW46IFwiaW52YWxpZC5pbGxlZ2FsLnVua25vd24tZXNjYXBlLm9iamNcIixcbiAgICAgICAgICAgIHJlZ2V4OiBcIlxcXFxcXFxcLlwiXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIHRva2VuOiBcInN0cmluZ1wiLFxuICAgICAgICAgICAgcmVnZXg6ICdbXlwiXFxcXFxcXFxdKydcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgdG9rZW46IFwicHVuY3R1YXRpb24uZGVmaW5pdGlvbi5zdHJpbmcuZW5kXCIsXG4gICAgICAgICAgICByZWdleDogXCJcXFwiXCIsXG4gICAgICAgICAgICBuZXh0OiBcInN0YXJ0XCJcbiAgICAgICAgfVxuICAgIF0sXG4gICAgXCJwcm90b2NvbF9saXN0XCI6IFtcbiAgICAgICAge1xuICAgICAgICAgICAgdG9rZW46IFwicHVuY3R1YXRpb24uc2VjdGlvbi5zY29wZS5lbmQub2JqY1wiLFxuICAgICAgICAgICAgcmVnZXg6IFwiPlwiLFxuICAgICAgICAgICAgbmV4dDogXCJzdGFydFwiXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIHRva2VuOiBcInN1cHBvcnQub3RoZXIucHJvdG9jb2wub2JqY1wiLFxuICAgICAgICAgICAgcmVnZXg6IFwiXFxiTlMoPzpHbHlwaFN0b3JhZ2V8TSg/OnV0YWJsZUNvcHlpbmd8ZW51SXRlbSl8Qyg/OmhhbmdlU3BlbGxpbmd8byg/OmRpbmd8cHlpbmd8bG9yUGlja2luZyg/OkN1c3RvbXxEZWZhdWx0KSkpfFQoPzpvb2xiYXJJdGVtVmFsaWRhdGlvbnN8ZXh0KD86SW5wdXR8QXR0YWNobWVudENlbGwpKXxJKD86bnB1dFNlcnYoPzppY2VQcm92aWRlcnxlck1vdXNlVHJhY2tlcil8Z25vcmVNaXNzcGVsbGVkV29yZHMpfE9iaig/OkNUeXBlU2VyaWFsaXphdGlvbkNhbGxCYWNrfGVjdCl8RCg/OmVjaW1hbE51bWJlckJlaGF2aW9yc3xyYWdnaW5nSW5mbyl8VSg/OnNlckludGVyZmFjZVZhbGlkYXRpb25zfFJMKD86SGFuZGxlQ2xpZW50fERvd25sb2FkRGVsZWdhdGV8UHJvdG9jb2xDbGllbnR8QXV0aGVudGljYXRpb25DaGFsbGVuZ2VTZW5kZXIpKXxWYWxpZGF0ZWQoPzpUb29iYXJJdGVtfFVzZXJJbnRlcmZhY2VJdGVtKXxMb2NraW5nKVxcYlwiXG4gICAgICAgIH1cbiAgICBdLFxuICAgIFwic2VsZWN0b3JzXCI6IFtcbiAgICAgICAge1xuICAgICAgICAgICAgdG9rZW46IFwic3VwcG9ydC5mdW5jdGlvbi5hbnktbWV0aG9kLm5hbWUtb2YtcGFyYW1ldGVyLm9iamNcIixcbiAgICAgICAgICAgIHJlZ2V4OiBcIlxcXFxiKD86W2EtekEtWl86XVtcXFxcd10qKStcIlxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICB0b2tlbjogXCJwdW5jdHVhdGlvblwiLFxuICAgICAgICAgICAgcmVnZXg6IFwiXFxcXClcIixcbiAgICAgICAgICAgIG5leHQ6IFwic3RhcnRcIlxuICAgICAgICB9XG4gICAgXSxcbiAgICBcImJyYWNrZXRlZF9jb250ZW50XCI6IFtcbiAgICAgICAge1xuICAgICAgICAgICAgdG9rZW46IFwicHVuY3R1YXRpb24uc2VjdGlvbi5zY29wZS5lbmQub2JqY1wiLFxuICAgICAgICAgICAgcmVnZXg6IFwiXVwiLFxuICAgICAgICAgICAgbmV4dDogXCJzdGFydFwiXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIHRva2VuOiBbXCJzdXBwb3J0LmZ1bmN0aW9uLmFueS1tZXRob2Qub2JqY1wiXSxcbiAgICAgICAgICAgIHJlZ2V4OiBcIig/OnByZWRpY2F0ZVdpdGhGb3JtYXQ6fCBOU1ByZWRpY2F0ZSBwcmVkaWNhdGVXaXRoRm9ybWF0OilcIixcbiAgICAgICAgICAgIG5leHQ6IFwic3RhcnRcIlxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICB0b2tlbjogXCJzdXBwb3J0LmZ1bmN0aW9uLmFueS1tZXRob2Qub2JqY1wiLFxuICAgICAgICAgICAgcmVnZXg6IFwiXFxcXHcrKD86OnwoPz1dKSlcIixcbiAgICAgICAgICAgIG5leHQ6IFwic3RhcnRcIlxuICAgICAgICB9XG4gICAgXSxcbiAgICBcImJyYWNrZXRlZF9zdHJpbmdzXCI6IFtcbiAgICAgICAge1xuICAgICAgICAgICAgdG9rZW46IFwicHVuY3R1YXRpb24uc2VjdGlvbi5zY29wZS5lbmQub2JqY1wiLFxuICAgICAgICAgICAgcmVnZXg6IFwiXVwiLFxuICAgICAgICAgICAgbmV4dDogXCJzdGFydFwiXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIHRva2VuOiBcImtleXdvcmQub3BlcmF0b3IubG9naWNhbC5wcmVkaWNhdGUuY29jb2FcIixcbiAgICAgICAgICAgIHJlZ2V4OiBcIlxcXFxiKD86QU5EfE9SfE5PVHxJTilcXFxcYlwiXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIHRva2VuOiBbXCJpbnZhbGlkLmlsbGVnYWwudW5rbm93bi1tZXRob2Qub2JqY1wiLCBcInB1bmN0dWF0aW9uLnNlcGFyYXRvci5hcmd1bWVudHMub2JqY1wiXSxcbiAgICAgICAgICAgIHJlZ2V4OiBcIlxcXFxiKFxcXFx3KykoOilcIlxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICByZWdleDogXCJcXFxcYig/OkFMTHxBTll8U09NRXxOT05FKVxcXFxiXCIsXG4gICAgICAgICAgICB0b2tlbjogXCJjb25zdGFudC5sYW5ndWFnZS5wcmVkaWNhdGUuY29jb2FcIlxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICByZWdleDogXCJcXFxcYig/Ok5VTEx8TklMfFNFTEZ8VFJVRXxZRVN8RkFMU0V8Tk98RklSU1R8TEFTVHxTSVpFKVxcXFxiXCIsXG4gICAgICAgICAgICB0b2tlbjogXCJjb25zdGFudC5sYW5ndWFnZS5wcmVkaWNhdGUuY29jb2FcIlxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICByZWdleDogXCJcXFxcYig/Ok1BVENIRVN8Q09OVEFJTlN8QkVHSU5TV0lUSHxFTkRTV0lUSHxCRVRXRUVOKVxcXFxiXCIsXG4gICAgICAgICAgICB0b2tlbjogXCJrZXl3b3JkLm9wZXJhdG9yLmNvbXBhcmlzb24ucHJlZGljYXRlLmNvY29hXCJcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgcmVnZXg6IFwiXFxcXGJDKD86QVNFSU5TRU5TSVRJVkV8SSlcXFxcYlwiLFxuICAgICAgICAgICAgdG9rZW46IFwia2V5d29yZC5vdGhlci5tb2RpZmllci5wcmVkaWNhdGUuY29jb2FcIlxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICByZWdleDogXCJcXFxcYig/OkFOWUtFWXxTVUJRVUVSWXxDQVNUfFRSVUVQUkVESUNBVEV8RkFMU0VQUkVESUNBVEUpXFxcXGJcIixcbiAgICAgICAgICAgIHRva2VuOiBcImtleXdvcmQub3RoZXIucHJlZGljYXRlLmNvY29hXCJcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgcmVnZXg6IGVzY2FwZWRDb25zdFJlLFxuICAgICAgICAgICAgdG9rZW46IFwiY29uc3RhbnQuY2hhcmFjdGVyLmVzY2FwZS5vYmpjXCJcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgcmVnZXg6IFwiXFxcXFxcXFwuXCIsXG4gICAgICAgICAgICB0b2tlbjogXCJpbnZhbGlkLmlsbGVnYWwudW5rbm93bi1lc2NhcGUub2JqY1wiXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIHRva2VuOiBcInN0cmluZ1wiLFxuICAgICAgICAgICAgcmVnZXg6ICdbXlwiXFxcXFxcXFxdJ1xuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICB0b2tlbjogXCJwdW5jdHVhdGlvbi5kZWZpbml0aW9uLnN0cmluZy5lbmQub2JqY1wiLFxuICAgICAgICAgICAgcmVnZXg6IFwiXFxcIlwiLFxuICAgICAgICAgICAgbmV4dDogXCJwcmVkaWNhdGVzXCJcbiAgICAgICAgfVxuICAgIF0sXG4gICAgXCJjb21tZW50XCIgOiBbXG4gICAgICAgIHtcbiAgICAgICAgICAgIHRva2VuIDogXCJjb21tZW50XCIsIC8vIGNsb3NpbmcgY29tbWVudFxuICAgICAgICAgICAgcmVnZXggOiBcIi4qP1xcXFwqXFxcXC9cIixcbiAgICAgICAgICAgIG5leHQgOiBcInN0YXJ0XCJcbiAgICAgICAgfSwge1xuICAgICAgICAgICAgZGVmYXVsdFRva2VuIDogXCJjb21tZW50XCJcbiAgICAgICAgfVxuICAgIF0sXG4gICAgXCJtZXRob2RzXCIgOiBbXG4gICAgICAgIHtcbiAgICAgICAgICAgIHRva2VuIDogXCJtZXRhLmZ1bmN0aW9uLm9iamNcIixcbiAgICAgICAgICAgIHJlZ2V4IDogXCIoPz1cXFxce3wjKXw7XCIsXG4gICAgICAgICAgICBuZXh0IDogXCJzdGFydFwiXG4gICAgICAgIH1cbiAgICBdXG59O1xuXG4gICAgLy8gY29weSBpbiBDLVJ1bGVzIGRpcmVjdGx5XG4gICAgZm9yICh2YXIgciBpbiBjUnVsZXMpIHtcbiAgICAgICAgaWYgKHRoaXMuJHJ1bGVzW3JdKSB7XG4gICAgICAgICAgICBpZiAodGhpcy4kcnVsZXNbcl0ucHVzaClcbiAgICAgICAgICAgICAgICB0aGlzLiRydWxlc1tyXS5wdXNoLmFwcGx5KHRoaXMuJHJ1bGVzW3JdLCBjUnVsZXNbcl0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy4kcnVsZXNbcl0gPSBjUnVsZXNbcl07XG4gICAgICAgIH1cbiAgICB9XG4gICAgXG4gICAgdGhpcy4kcnVsZXMuYnJhY2tldGVkX2NvbnRlbnQgPSB0aGlzLiRydWxlcy5icmFja2V0ZWRfY29udGVudC5jb25jYXQoXG4gICAgICAgIHRoaXMuJHJ1bGVzLnN0YXJ0LCBzcGVjaWFsVmFyaWFibGVzXG4gICAgKTtcblxuICAgIHRoaXMuZW1iZWRSdWxlcyhEb2NDb21tZW50SGlnaGxpZ2h0UnVsZXMsIFwiZG9jLVwiLFxuICAgICAgICBbIERvY0NvbW1lbnRIaWdobGlnaHRSdWxlcy5nZXRFbmRSdWxlKFwic3RhcnRcIikgXSk7XG59O1xuXG5vb3AuaW5oZXJpdHMoT2JqZWN0aXZlQ0hpZ2hsaWdodFJ1bGVzLCBDSGlnaGxpZ2h0UnVsZXMpO1xuXG5leHBvcnRzLk9iamVjdGl2ZUNIaWdobGlnaHRSdWxlcyA9IE9iamVjdGl2ZUNIaWdobGlnaHRSdWxlcztcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==