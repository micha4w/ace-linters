(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else {
		var a = factory();
		for(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];
	}
})(this, () => {
return /******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ 2288:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
Object.defineProperty(exports, "__esModule", ({ value: true }));
//# sourceMappingURL=ANTLRErrorListener.js.map

/***/ }),

/***/ 5041:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
Object.defineProperty(exports, "__esModule", ({ value: true }));
//# sourceMappingURL=ANTLRErrorStrategy.js.map

/***/ }),

/***/ 8820:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
// ConvertTo-TS run at 2016-10-04T11:26:49.0828748-07:00
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ANTLRInputStream = void 0;
const assert = __webpack_require__(1696);
const Decorators_1 = __webpack_require__(681);
const IntStream_1 = __webpack_require__(2628);
const READ_BUFFER_SIZE = 1024;
const INITIAL_BUFFER_SIZE = 1024;
/**
 * Vacuum all input from a {@link Reader}/{@link InputStream} and then treat it
 * like a `char[]` buffer. Can also pass in a {@link String} or
 * `char[]` to use.
 *
 * If you need encoding, pass in stream/reader with correct encoding.
 *
 * @deprecated as of 4.7, please use `CharStreams` interface.
 */
class ANTLRInputStream {
    /** Copy data in string to a local char array */
    constructor(input) {
        /** 0..n-1 index into string of next char */
        this.p = 0;
        this.data = input;
        this.n = input.length;
    }
    /** Reset the stream so that it's in the same state it was
     *  when the object was created *except* the data array is not
     *  touched.
     */
    reset() {
        this.p = 0;
    }
    consume() {
        if (this.p >= this.n) {
            assert(this.LA(1) === IntStream_1.IntStream.EOF);
            throw new Error("cannot consume EOF");
        }
        //System.out.println("prev p="+p+", c="+(char)data[p]);
        if (this.p < this.n) {
            this.p++;
            //System.out.println("p moves to "+p+" (c='"+(char)data[p]+"')");
        }
    }
    LA(i) {
        if (i === 0) {
            return 0; // undefined
        }
        if (i < 0) {
            i++; // e.g., translate LA(-1) to use offset i=0; then data[p+0-1]
            if ((this.p + i - 1) < 0) {
                return IntStream_1.IntStream.EOF; // invalid; no char before first char
            }
        }
        if ((this.p + i - 1) >= this.n) {
            //System.out.println("char LA("+i+")=EOF; p="+p);
            return IntStream_1.IntStream.EOF;
        }
        //System.out.println("char LA("+i+")="+(char)data[p+i-1]+"; p="+p);
        //System.out.println("LA("+i+"); p="+p+" n="+n+" data.length="+data.length);
        return this.data.charCodeAt(this.p + i - 1);
    }
    LT(i) {
        return this.LA(i);
    }
    /** Return the current input symbol index 0..n where n indicates the
     *  last symbol has been read.  The index is the index of char to
     *  be returned from LA(1).
     */
    get index() {
        return this.p;
    }
    get size() {
        return this.n;
    }
    /** mark/release do nothing; we have entire buffer */
    mark() {
        return -1;
    }
    release(marker) {
        // No default implementation since this stream buffers the entire input
    }
    /** consume() ahead until p==index; can't just set p=index as we must
     *  update line and charPositionInLine. If we seek backwards, just set p
     */
    seek(index) {
        if (index <= this.p) {
            this.p = index; // just jump; don't update stream state (line, ...)
            return;
        }
        // seek forward, consume until p hits index or n (whichever comes first)
        index = Math.min(index, this.n);
        while (this.p < index) {
            this.consume();
        }
    }
    getText(interval) {
        let start = interval.a;
        let stop = interval.b;
        if (stop >= this.n) {
            stop = this.n - 1;
        }
        let count = stop - start + 1;
        if (start >= this.n) {
            return "";
        }
        // System.err.println("data: "+Arrays.toString(data)+", n="+n+
        // 				   ", start="+start+
        // 				   ", stop="+stop);
        return this.data.substr(start, count);
    }
    get sourceName() {
        if (!this.name) {
            return IntStream_1.IntStream.UNKNOWN_SOURCE_NAME;
        }
        return this.name;
    }
    toString() { return this.data; }
}
__decorate([
    Decorators_1.Override
], ANTLRInputStream.prototype, "consume", null);
__decorate([
    Decorators_1.Override
], ANTLRInputStream.prototype, "LA", null);
__decorate([
    Decorators_1.Override
], ANTLRInputStream.prototype, "index", null);
__decorate([
    Decorators_1.Override
], ANTLRInputStream.prototype, "size", null);
__decorate([
    Decorators_1.Override
], ANTLRInputStream.prototype, "mark", null);
__decorate([
    Decorators_1.Override
], ANTLRInputStream.prototype, "release", null);
__decorate([
    Decorators_1.Override
], ANTLRInputStream.prototype, "seek", null);
__decorate([
    Decorators_1.Override
], ANTLRInputStream.prototype, "getText", null);
__decorate([
    Decorators_1.Override
], ANTLRInputStream.prototype, "sourceName", null);
__decorate([
    Decorators_1.Override
], ANTLRInputStream.prototype, "toString", null);
exports.ANTLRInputStream = ANTLRInputStream;
//# sourceMappingURL=ANTLRInputStream.js.map

/***/ }),

/***/ 856:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.BailErrorStrategy = void 0;
// ConvertTo-TS run at 2016-10-04T11:26:49.2855056-07:00
const DefaultErrorStrategy_1 = __webpack_require__(4242);
const InputMismatchException_1 = __webpack_require__(7432);
const Decorators_1 = __webpack_require__(681);
const ParseCancellationException_1 = __webpack_require__(7455);
/**
 * This implementation of {@link ANTLRErrorStrategy} responds to syntax errors
 * by immediately canceling the parse operation with a
 * {@link ParseCancellationException}. The implementation ensures that the
 * {@link ParserRuleContext#exception} field is set for all parse tree nodes
 * that were not completed prior to encountering the error.
 *
 * This error strategy is useful in the following scenarios.
 *
 * * **Two-stage parsing:** This error strategy allows the first
 *   stage of two-stage parsing to immediately terminate if an error is
 *   encountered, and immediately fall back to the second stage. In addition to
 *   avoiding wasted work by attempting to recover from errors here, the empty
 *   implementation of {@link BailErrorStrategy#sync} improves the performance of
 *   the first stage.
 * * **Silent validation:** When syntax errors are not being
 *   reported or logged, and the parse result is simply ignored if errors occur,
 *   the {@link BailErrorStrategy} avoids wasting work on recovering from errors
 *   when the result will be ignored either way.
 *
 * ```
 * myparser.errorHandler = new BailErrorStrategy();
 * ```
 *
 * @see Parser.errorHandler
 */
class BailErrorStrategy extends DefaultErrorStrategy_1.DefaultErrorStrategy {
    /** Instead of recovering from exception `e`, re-throw it wrapped
     *  in a {@link ParseCancellationException} so it is not caught by the
     *  rule function catches.  Use {@link Exception#getCause()} to get the
     *  original {@link RecognitionException}.
     */
    recover(recognizer, e) {
        for (let context = recognizer.context; context; context = context.parent) {
            context.exception = e;
        }
        throw new ParseCancellationException_1.ParseCancellationException(e);
    }
    /** Make sure we don't attempt to recover inline; if the parser
     *  successfully recovers, it won't throw an exception.
     */
    recoverInline(recognizer) {
        let e = new InputMismatchException_1.InputMismatchException(recognizer);
        for (let context = recognizer.context; context; context = context.parent) {
            context.exception = e;
        }
        throw new ParseCancellationException_1.ParseCancellationException(e);
    }
    /** Make sure we don't attempt to recover from problems in subrules. */
    sync(recognizer) {
        // intentionally empty
    }
}
__decorate([
    Decorators_1.Override
], BailErrorStrategy.prototype, "recover", null);
__decorate([
    Decorators_1.Override
], BailErrorStrategy.prototype, "recoverInline", null);
__decorate([
    Decorators_1.Override
], BailErrorStrategy.prototype, "sync", null);
exports.BailErrorStrategy = BailErrorStrategy;
//# sourceMappingURL=BailErrorStrategy.js.map

/***/ }),

/***/ 672:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.BufferedTokenStream = void 0;
// ConvertTo-TS run at 2016-10-04T11:26:49.6074365-07:00
const assert = __webpack_require__(1696);
const CommonToken_1 = __webpack_require__(2058);
const Interval_1 = __webpack_require__(4378);
const Lexer_1 = __webpack_require__(8170);
const Decorators_1 = __webpack_require__(681);
const Token_1 = __webpack_require__(8999);
/**
 * This implementation of {@link TokenStream} loads tokens from a
 * {@link TokenSource} on-demand, and places the tokens in a buffer to provide
 * access to any previous token by index.
 *
 * This token stream ignores the value of {@link Token#getChannel}. If your
 * parser requires the token stream filter tokens to only those on a particular
 * channel, such as {@link Token#DEFAULT_CHANNEL} or
 * {@link Token#HIDDEN_CHANNEL}, use a filtering token stream such a
 * {@link CommonTokenStream}.
 */
let BufferedTokenStream = class BufferedTokenStream {
    constructor(tokenSource) {
        /**
         * A collection of all tokens fetched from the token source. The list is
         * considered a complete view of the input once {@link #fetchedEOF} is set
         * to `true`.
         */
        this.tokens = [];
        /**
         * The index into {@link #tokens} of the current token (next token to
         * {@link #consume}). {@link #tokens}`[`{@link #p}`]` should be
         * {@link #LT LT(1)}.
         *
         * This field is set to -1 when the stream is first constructed or when
         * {@link #setTokenSource} is called, indicating that the first token has
         * not yet been fetched from the token source. For additional information,
         * see the documentation of {@link IntStream} for a description of
         * Initializing Methods.
         */
        this.p = -1;
        /**
         * Indicates whether the {@link Token#EOF} token has been fetched from
         * {@link #tokenSource} and added to {@link #tokens}. This field improves
         * performance for the following cases:
         *
         * * {@link #consume}: The lookahead check in {@link #consume} to prevent
         *   consuming the EOF symbol is optimized by checking the values of
         *   {@link #fetchedEOF} and {@link #p} instead of calling {@link #LA}.
         * * {@link #fetch}: The check to prevent adding multiple EOF symbols into
         *   {@link #tokens} is trivial with this field.
         */
        this.fetchedEOF = false;
        if (tokenSource == null) {
            throw new Error("tokenSource cannot be null");
        }
        this._tokenSource = tokenSource;
    }
    get tokenSource() {
        return this._tokenSource;
    }
    /** Reset this token stream by setting its token source. */
    set tokenSource(tokenSource) {
        this._tokenSource = tokenSource;
        this.tokens.length = 0;
        this.p = -1;
        this.fetchedEOF = false;
    }
    get index() {
        return this.p;
    }
    mark() {
        return 0;
    }
    release(marker) {
        // no resources to release
    }
    seek(index) {
        this.lazyInit();
        this.p = this.adjustSeekIndex(index);
    }
    get size() {
        return this.tokens.length;
    }
    consume() {
        let skipEofCheck;
        if (this.p >= 0) {
            if (this.fetchedEOF) {
                // the last token in tokens is EOF. skip check if p indexes any
                // fetched token except the last.
                skipEofCheck = this.p < this.tokens.length - 1;
            }
            else {
                // no EOF token in tokens. skip check if p indexes a fetched token.
                skipEofCheck = this.p < this.tokens.length;
            }
        }
        else {
            // not yet initialized
            skipEofCheck = false;
        }
        if (!skipEofCheck && this.LA(1) === Token_1.Token.EOF) {
            throw new Error("cannot consume EOF");
        }
        if (this.sync(this.p + 1)) {
            this.p = this.adjustSeekIndex(this.p + 1);
        }
    }
    /** Make sure index `i` in tokens has a token.
     *
     * @returns `true` if a token is located at index `i`, otherwise
     *    `false`.
     * @see #get(int i)
     */
    sync(i) {
        assert(i >= 0);
        let n = i - this.tokens.length + 1; // how many more elements we need?
        //System.out.println("sync("+i+") needs "+n);
        if (n > 0) {
            let fetched = this.fetch(n);
            return fetched >= n;
        }
        return true;
    }
    /** Add `n` elements to buffer.
     *
     * @returns The actual number of elements added to the buffer.
     */
    fetch(n) {
        if (this.fetchedEOF) {
            return 0;
        }
        for (let i = 0; i < n; i++) {
            let t = this.tokenSource.nextToken();
            if (this.isWritableToken(t)) {
                t.tokenIndex = this.tokens.length;
            }
            this.tokens.push(t);
            if (t.type === Token_1.Token.EOF) {
                this.fetchedEOF = true;
                return i + 1;
            }
        }
        return n;
    }
    get(i) {
        if (i < 0 || i >= this.tokens.length) {
            throw new RangeError("token index " + i + " out of range 0.." + (this.tokens.length - 1));
        }
        return this.tokens[i];
    }
    /** Get all tokens from start..stop inclusively. */
    getRange(start, stop) {
        if (start < 0 || stop < 0) {
            return [];
        }
        this.lazyInit();
        let subset = new Array();
        if (stop >= this.tokens.length) {
            stop = this.tokens.length - 1;
        }
        for (let i = start; i <= stop; i++) {
            let t = this.tokens[i];
            if (t.type === Token_1.Token.EOF) {
                break;
            }
            subset.push(t);
        }
        return subset;
    }
    LA(i) {
        let token = this.LT(i);
        if (!token) {
            return Token_1.Token.INVALID_TYPE;
        }
        return token.type;
    }
    tryLB(k) {
        if ((this.p - k) < 0) {
            return undefined;
        }
        return this.tokens[this.p - k];
    }
    LT(k) {
        let result = this.tryLT(k);
        if (result === undefined) {
            throw new RangeError("requested lookback index out of range");
        }
        return result;
    }
    tryLT(k) {
        this.lazyInit();
        if (k === 0) {
            throw new RangeError("0 is not a valid lookahead index");
        }
        if (k < 0) {
            return this.tryLB(-k);
        }
        let i = this.p + k - 1;
        this.sync(i);
        if (i >= this.tokens.length) {
            // return EOF token
            // EOF must be last token
            return this.tokens[this.tokens.length - 1];
        }
        //		if ( i>range ) range = i;
        return this.tokens[i];
    }
    /**
     * Allowed derived classes to modify the behavior of operations which change
     * the current stream position by adjusting the target token index of a seek
     * operation. The default implementation simply returns `i`. If an
     * exception is thrown in this method, the current stream index should not be
     * changed.
     *
     * For example, {@link CommonTokenStream} overrides this method to ensure that
     * the seek target is always an on-channel token.
     *
     * @param i The target token index.
     * @returns The adjusted target token index.
     */
    adjustSeekIndex(i) {
        return i;
    }
    lazyInit() {
        if (this.p === -1) {
            this.setup();
        }
    }
    setup() {
        this.sync(0);
        this.p = this.adjustSeekIndex(0);
    }
    /** Given a start and stop index, return a `List` of all tokens in
     *  the token type `BitSet`.  Return an empty array if no tokens were found.  This
     *  method looks at both on and off channel tokens.
     */
    getTokens(start, stop, types) {
        this.lazyInit();
        if (start === undefined) {
            assert(stop === undefined && types === undefined);
            return this.tokens;
        }
        else if (stop === undefined) {
            stop = this.tokens.length - 1;
        }
        if (start < 0 || stop >= this.tokens.length || stop < 0 || start >= this.tokens.length) {
            throw new RangeError("start " + start + " or stop " + stop + " not in 0.." + (this.tokens.length - 1));
        }
        if (start > stop) {
            return [];
        }
        if (types === undefined) {
            return this.tokens.slice(start, stop + 1);
        }
        else if (typeof types === "number") {
            types = new Set().add(types);
        }
        let typesSet = types;
        // list = tokens[start:stop]:{T t, t.type in types}
        let filteredTokens = this.tokens.slice(start, stop + 1);
        filteredTokens = filteredTokens.filter((value) => typesSet.has(value.type));
        return filteredTokens;
    }
    /**
     * Given a starting index, return the index of the next token on channel.
     * Return `i` if `tokens[i]` is on channel. Return the index of
     * the EOF token if there are no tokens on channel between `i` and
     * EOF.
     */
    nextTokenOnChannel(i, channel) {
        this.sync(i);
        if (i >= this.size) {
            return this.size - 1;
        }
        let token = this.tokens[i];
        while (token.channel !== channel) {
            if (token.type === Token_1.Token.EOF) {
                return i;
            }
            i++;
            this.sync(i);
            token = this.tokens[i];
        }
        return i;
    }
    /**
     * Given a starting index, return the index of the previous token on
     * channel. Return `i` if `tokens[i]` is on channel. Return -1
     * if there are no tokens on channel between `i` and 0.
     *
     * If `i` specifies an index at or after the EOF token, the EOF token
     * index is returned. This is due to the fact that the EOF token is treated
     * as though it were on every channel.
     */
    previousTokenOnChannel(i, channel) {
        this.sync(i);
        if (i >= this.size) {
            // the EOF token is on every channel
            return this.size - 1;
        }
        while (i >= 0) {
            let token = this.tokens[i];
            if (token.type === Token_1.Token.EOF || token.channel === channel) {
                return i;
            }
            i--;
        }
        return i;
    }
    /** Collect all tokens on specified channel to the right of
     *  the current token up until we see a token on {@link Lexer#DEFAULT_TOKEN_CHANNEL} or
     *  EOF. If `channel` is `-1`, find any non default channel token.
     */
    getHiddenTokensToRight(tokenIndex, channel = -1) {
        this.lazyInit();
        if (tokenIndex < 0 || tokenIndex >= this.tokens.length) {
            throw new RangeError(tokenIndex + " not in 0.." + (this.tokens.length - 1));
        }
        let nextOnChannel = this.nextTokenOnChannel(tokenIndex + 1, Lexer_1.Lexer.DEFAULT_TOKEN_CHANNEL);
        let to;
        let from = tokenIndex + 1;
        // if none onchannel to right, nextOnChannel=-1 so set to = last token
        if (nextOnChannel === -1) {
            to = this.size - 1;
        }
        else {
            to = nextOnChannel;
        }
        return this.filterForChannel(from, to, channel);
    }
    /** Collect all tokens on specified channel to the left of
     *  the current token up until we see a token on {@link Lexer#DEFAULT_TOKEN_CHANNEL}.
     *  If `channel` is `-1`, find any non default channel token.
     */
    getHiddenTokensToLeft(tokenIndex, channel = -1) {
        this.lazyInit();
        if (tokenIndex < 0 || tokenIndex >= this.tokens.length) {
            throw new RangeError(tokenIndex + " not in 0.." + (this.tokens.length - 1));
        }
        if (tokenIndex === 0) {
            // obviously no tokens can appear before the first token
            return [];
        }
        let prevOnChannel = this.previousTokenOnChannel(tokenIndex - 1, Lexer_1.Lexer.DEFAULT_TOKEN_CHANNEL);
        if (prevOnChannel === tokenIndex - 1) {
            return [];
        }
        // if none onchannel to left, prevOnChannel=-1 then from=0
        let from = prevOnChannel + 1;
        let to = tokenIndex - 1;
        return this.filterForChannel(from, to, channel);
    }
    filterForChannel(from, to, channel) {
        let hidden = new Array();
        for (let i = from; i <= to; i++) {
            let t = this.tokens[i];
            if (channel === -1) {
                if (t.channel !== Lexer_1.Lexer.DEFAULT_TOKEN_CHANNEL) {
                    hidden.push(t);
                }
            }
            else {
                if (t.channel === channel) {
                    hidden.push(t);
                }
            }
        }
        return hidden;
    }
    get sourceName() {
        return this.tokenSource.sourceName;
    }
    getText(interval) {
        if (interval === undefined) {
            interval = Interval_1.Interval.of(0, this.size - 1);
        }
        else if (!(interval instanceof Interval_1.Interval)) {
            // Note: the more obvious check for 'instanceof RuleContext' results in a circular dependency problem
            interval = interval.sourceInterval;
        }
        let start = interval.a;
        let stop = interval.b;
        if (start < 0 || stop < 0) {
            return "";
        }
        this.fill();
        if (stop >= this.tokens.length) {
            stop = this.tokens.length - 1;
        }
        let buf = "";
        for (let i = start; i <= stop; i++) {
            let t = this.tokens[i];
            if (t.type === Token_1.Token.EOF) {
                break;
            }
            buf += t.text;
        }
        return buf.toString();
    }
    getTextFromRange(start, stop) {
        if (this.isToken(start) && this.isToken(stop)) {
            return this.getText(Interval_1.Interval.of(start.tokenIndex, stop.tokenIndex));
        }
        return "";
    }
    /** Get all tokens from lexer until EOF. */
    fill() {
        this.lazyInit();
        const blockSize = 1000;
        while (true) {
            let fetched = this.fetch(blockSize);
            if (fetched < blockSize) {
                return;
            }
        }
    }
    // TODO: Figure out a way to make this more flexible?
    isWritableToken(t) {
        return t instanceof CommonToken_1.CommonToken;
    }
    // TODO: Figure out a way to make this more flexible?
    isToken(t) {
        return t instanceof CommonToken_1.CommonToken;
    }
};
__decorate([
    Decorators_1.NotNull
], BufferedTokenStream.prototype, "_tokenSource", void 0);
__decorate([
    Decorators_1.Override
], BufferedTokenStream.prototype, "tokenSource", null);
__decorate([
    Decorators_1.Override
], BufferedTokenStream.prototype, "index", null);
__decorate([
    Decorators_1.Override
], BufferedTokenStream.prototype, "mark", null);
__decorate([
    Decorators_1.Override
], BufferedTokenStream.prototype, "release", null);
__decorate([
    Decorators_1.Override
], BufferedTokenStream.prototype, "seek", null);
__decorate([
    Decorators_1.Override
], BufferedTokenStream.prototype, "size", null);
__decorate([
    Decorators_1.Override
], BufferedTokenStream.prototype, "consume", null);
__decorate([
    Decorators_1.Override
], BufferedTokenStream.prototype, "get", null);
__decorate([
    Decorators_1.Override
], BufferedTokenStream.prototype, "LA", null);
__decorate([
    Decorators_1.NotNull,
    Decorators_1.Override
], BufferedTokenStream.prototype, "LT", null);
__decorate([
    Decorators_1.Override
], BufferedTokenStream.prototype, "sourceName", null);
__decorate([
    Decorators_1.NotNull,
    Decorators_1.Override
], BufferedTokenStream.prototype, "getText", null);
__decorate([
    Decorators_1.NotNull,
    Decorators_1.Override
], BufferedTokenStream.prototype, "getTextFromRange", null);
BufferedTokenStream = __decorate([
    __param(0, Decorators_1.NotNull)
], BufferedTokenStream);
exports.BufferedTokenStream = BufferedTokenStream;
//# sourceMappingURL=BufferedTokenStream.js.map

/***/ }),

/***/ 6599:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
Object.defineProperty(exports, "__esModule", ({ value: true }));
//# sourceMappingURL=CharStream.js.map

/***/ }),

/***/ 3259:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.CharStreams = void 0;
const CodePointBuffer_1 = __webpack_require__(3421);
const CodePointCharStream_1 = __webpack_require__(1978);
const IntStream_1 = __webpack_require__(2628);
// const DEFAULT_BUFFER_SIZE: number = 4096;
/** This class represents the primary interface for creating {@link CharStream}s
 *  from a variety of sources as of 4.7.  The motivation was to support
 *  Unicode code points > U+FFFF.  {@link ANTLRInputStream} and
 *  {@link ANTLRFileStream} are now deprecated in favor of the streams created
 *  by this interface.
 *
 *  DEPRECATED: {@code new ANTLRFileStream("myinputfile")}
 *  NEW:        {@code CharStreams.fromFileName("myinputfile")}
 *
 *  WARNING: If you use both the deprecated and the new streams, you will see
 *  a nontrivial performance degradation. This speed hit is because the
 *  {@link Lexer}'s internal code goes from a monomorphic to megamorphic
 *  dynamic dispatch to get characters from the input stream. Java's
 *  on-the-fly compiler (JIT) is unable to perform the same optimizations
 *  so stick with either the old or the new streams, if performance is
 *  a primary concern. See the extreme debugging and spelunking
 *  needed to identify this issue in our timing rig:
 *
 *      https://github.com/antlr/antlr4/pull/1781
 *
 *  The ANTLR character streams still buffer all the input when you create
 *  the stream, as they have done for ~20 years. If you need unbuffered
 *  access, please note that it becomes challenging to create
 *  parse trees. The parse tree has to point to tokens which will either
 *  point into a stale location in an unbuffered stream or you have to copy
 *  the characters out of the buffer into the token. That defeats the purpose
 *  of unbuffered input. Per the ANTLR book, unbuffered streams are primarily
 *  useful for processing infinite streams *during the parse.*
 *
 *  The new streams also use 8-bit buffers when possible so this new
 *  interface supports character streams that use half as much memory
 *  as the old {@link ANTLRFileStream}, which assumed 16-bit characters.
 *
 *  A big shout out to Ben Hamilton (github bhamiltoncx) for his superhuman
 *  efforts across all targets to get true Unicode 3.1 support for U+10FFFF.
 *
 *  @since 4.7
 */
var CharStreams;
(function (CharStreams) {
    // /**
    //  * Creates a {@link CharStream} given a path to a UTF-8
    //  * encoded file on disk.
    //  *
    //  * Reads the entire contents of the file into the result before returning.
    //  */
    // export function fromFile(file: File): CharStream;
    // export function fromFile(file: File, charset: Charset): CharStream;
    // export function fromFile(file: File, charset?: Charset): CharStream {
    // 	if (charset === undefined) {
    // 		charset = Charset.forName("UTF-8");
    // 	}
    function fromString(s, sourceName) {
        if (sourceName === undefined || sourceName.length === 0) {
            sourceName = IntStream_1.IntStream.UNKNOWN_SOURCE_NAME;
        }
        // Initial guess assumes no code points > U+FFFF: one code
        // point for each code unit in the string
        let codePointBufferBuilder = CodePointBuffer_1.CodePointBuffer.builder(s.length);
        // TODO: CharBuffer.wrap(String) rightfully returns a read-only buffer
        // which doesn't expose its array, so we make a copy.
        let cb = new Uint16Array(s.length);
        for (let i = 0; i < s.length; i++) {
            cb[i] = s.charCodeAt(i);
        }
        codePointBufferBuilder.append(cb);
        return CodePointCharStream_1.CodePointCharStream.fromBuffer(codePointBufferBuilder.build(), sourceName);
    }
    CharStreams.fromString = fromString;
    // export function bufferFromChannel(
    // 	channel: ReadableByteChannel,
    // 	charset: Charset,
    // 	bufferSize: number,
    // 	decodingErrorAction: CodingErrorAction,
    // 	inputSize: number): CodePointBuffer {
    // 	try {
    // 		let utf8BytesIn: Uint8Array = new Uint8Array(bufferSize);
    // 		let utf16CodeUnitsOut: Uint16Array = new Uint16Array(bufferSize);
    // 		if (inputSize === -1) {
    // 			inputSize = bufferSize;
    // 		} else if (inputSize > Integer.MAX_VALUE) {
    // 			// ByteBuffer et al don't support long sizes
    // 			throw new RangeError(`inputSize ${inputSize} larger than max ${Integer.MAX_VALUE}`);
    // 		}
    // 		let codePointBufferBuilder: CodePointBuffer.Builder = CodePointBuffer.builder(inputSize);
    // 		let decoder: CharsetDecoder = charset
    // 				.newDecoder()
    // 				.onMalformedInput(decodingErrorAction)
    // 				.onUnmappableCharacter(decodingErrorAction);
    // 		let endOfInput: boolean = false;
    // 		while (!endOfInput) {
    // 			let bytesRead: number = channel.read(utf8BytesIn);
    // 			endOfInput = (bytesRead === -1);
    // 			utf8BytesIn.flip();
    // 			let result: CoderResult = decoder.decode(
    // 				utf8BytesIn,
    // 				utf16CodeUnitsOut,
    // 				endOfInput);
    // 			if (result.isError() && decodingErrorAction === CodingErrorAction.REPORT) {
    // 				result.throwException();
    // 			}
    // 			utf16CodeUnitsOut.flip();
    // 			codePointBufferBuilder.append(utf16CodeUnitsOut);
    // 			utf8BytesIn.compact();
    // 			utf16CodeUnitsOut.compact();
    // 		}
    // 		// Handle any bytes at the end of the file which need to
    // 		// be represented as errors or substitution characters.
    // 		let flushResult: CoderResult = decoder.flush(utf16CodeUnitsOut);
    // 		if (flushResult.isError() && decodingErrorAction === CodingErrorAction.REPORT) {
    // 			flushResult.throwException();
    // 		}
    // 		utf16CodeUnitsOut.flip();
    // 		codePointBufferBuilder.append(utf16CodeUnitsOut);
    // 		return codePointBufferBuilder.build();
    // 	}
    // 	finally {
    // 		channel.close();
    // 	}
    // }
})(CharStreams = exports.CharStreams || (exports.CharStreams = {}));
//# sourceMappingURL=CharStreams.js.map

/***/ }),

/***/ 3421:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.CodePointBuffer = void 0;
const assert = __webpack_require__(1696);
const Character = __webpack_require__(4084);
/**
 * Wrapper for `Uint8Array` / `Uint16Array` / `Int32Array`.
 */
class CodePointBuffer {
    constructor(buffer, size) {
        this.buffer = buffer;
        this._position = 0;
        this._size = size;
    }
    static withArray(buffer) {
        return new CodePointBuffer(buffer, buffer.length);
    }
    get position() {
        return this._position;
    }
    set position(newPosition) {
        if (newPosition < 0 || newPosition > this._size) {
            throw new RangeError();
        }
        this._position = newPosition;
    }
    get remaining() {
        return this._size - this.position;
    }
    get(offset) {
        return this.buffer[offset];
    }
    array() {
        return this.buffer.slice(0, this._size);
    }
    static builder(initialBufferSize) {
        return new CodePointBuffer.Builder(initialBufferSize);
    }
}
exports.CodePointBuffer = CodePointBuffer;
(function (CodePointBuffer) {
    let Type;
    (function (Type) {
        Type[Type["BYTE"] = 0] = "BYTE";
        Type[Type["CHAR"] = 1] = "CHAR";
        Type[Type["INT"] = 2] = "INT";
    })(Type || (Type = {}));
    class Builder {
        constructor(initialBufferSize) {
            this.type = 0 /* BYTE */;
            this.buffer = new Uint8Array(initialBufferSize);
            this.prevHighSurrogate = -1;
            this.position = 0;
        }
        build() {
            return new CodePointBuffer(this.buffer, this.position);
        }
        static roundUpToNextPowerOfTwo(i) {
            let nextPowerOfTwo = 32 - Math.clz32(i - 1);
            return Math.pow(2, nextPowerOfTwo);
        }
        ensureRemaining(remainingNeeded) {
            switch (this.type) {
                case 0 /* BYTE */:
                    if (this.buffer.length - this.position < remainingNeeded) {
                        let newCapacity = Builder.roundUpToNextPowerOfTwo(this.buffer.length + remainingNeeded);
                        let newBuffer = new Uint8Array(newCapacity);
                        newBuffer.set(this.buffer.subarray(0, this.position), 0);
                        this.buffer = newBuffer;
                    }
                    break;
                case 1 /* CHAR */:
                    if (this.buffer.length - this.position < remainingNeeded) {
                        let newCapacity = Builder.roundUpToNextPowerOfTwo(this.buffer.length + remainingNeeded);
                        let newBuffer = new Uint16Array(newCapacity);
                        newBuffer.set(this.buffer.subarray(0, this.position), 0);
                        this.buffer = newBuffer;
                    }
                    break;
                case 2 /* INT */:
                    if (this.buffer.length - this.position < remainingNeeded) {
                        let newCapacity = Builder.roundUpToNextPowerOfTwo(this.buffer.length + remainingNeeded);
                        let newBuffer = new Int32Array(newCapacity);
                        newBuffer.set(this.buffer.subarray(0, this.position), 0);
                        this.buffer = newBuffer;
                    }
                    break;
            }
        }
        append(utf16In) {
            this.ensureRemaining(utf16In.length);
            this.appendArray(utf16In);
        }
        appendArray(utf16In) {
            switch (this.type) {
                case 0 /* BYTE */:
                    this.appendArrayByte(utf16In);
                    break;
                case 1 /* CHAR */:
                    this.appendArrayChar(utf16In);
                    break;
                case 2 /* INT */:
                    this.appendArrayInt(utf16In);
                    break;
            }
        }
        appendArrayByte(utf16In) {
            assert(this.prevHighSurrogate === -1);
            let input = utf16In;
            let inOffset = 0;
            let inLimit = utf16In.length;
            let outByte = this.buffer;
            let outOffset = this.position;
            while (inOffset < inLimit) {
                let c = input[inOffset];
                if (c <= 0xFF) {
                    outByte[outOffset] = c;
                }
                else {
                    utf16In = utf16In.subarray(inOffset, inLimit);
                    this.position = outOffset;
                    if (!Character.isHighSurrogate(c)) {
                        this.byteToCharBuffer(utf16In.length);
                        this.appendArrayChar(utf16In);
                        return;
                    }
                    else {
                        this.byteToIntBuffer(utf16In.length);
                        this.appendArrayInt(utf16In);
                        return;
                    }
                }
                inOffset++;
                outOffset++;
            }
            this.position = outOffset;
        }
        appendArrayChar(utf16In) {
            assert(this.prevHighSurrogate === -1);
            let input = utf16In;
            let inOffset = 0;
            let inLimit = utf16In.length;
            let outChar = this.buffer;
            let outOffset = this.position;
            while (inOffset < inLimit) {
                let c = input[inOffset];
                if (!Character.isHighSurrogate(c)) {
                    outChar[outOffset] = c;
                }
                else {
                    utf16In = utf16In.subarray(inOffset, inLimit);
                    this.position = outOffset;
                    this.charToIntBuffer(utf16In.length);
                    this.appendArrayInt(utf16In);
                    return;
                }
                inOffset++;
                outOffset++;
            }
            this.position = outOffset;
        }
        appendArrayInt(utf16In) {
            let input = utf16In;
            let inOffset = 0;
            let inLimit = utf16In.length;
            let outInt = this.buffer;
            let outOffset = this.position;
            while (inOffset < inLimit) {
                let c = input[inOffset];
                inOffset++;
                if (this.prevHighSurrogate !== -1) {
                    if (Character.isLowSurrogate(c)) {
                        outInt[outOffset] = String.fromCharCode(this.prevHighSurrogate, c).codePointAt(0);
                        outOffset++;
                        this.prevHighSurrogate = -1;
                    }
                    else {
                        // Dangling high surrogate
                        outInt[outOffset] = this.prevHighSurrogate;
                        outOffset++;
                        if (Character.isHighSurrogate(c)) {
                            this.prevHighSurrogate = c;
                        }
                        else {
                            outInt[outOffset] = c;
                            outOffset++;
                            this.prevHighSurrogate = -1;
                        }
                    }
                }
                else if (Character.isHighSurrogate(c)) {
                    this.prevHighSurrogate = c;
                }
                else {
                    outInt[outOffset] = c;
                    outOffset++;
                }
            }
            if (this.prevHighSurrogate !== -1) {
                // Dangling high surrogate
                outInt[outOffset] = this.prevHighSurrogate;
                outOffset++;
            }
            this.position = outOffset;
        }
        byteToCharBuffer(toAppend) {
            // CharBuffers hold twice as much per unit as ByteBuffers, so start with half the capacity.
            let newBuffer = new Uint16Array(Math.max(this.position + toAppend, this.buffer.length >> 1));
            newBuffer.set(this.buffer.subarray(0, this.position), 0);
            this.type = 1 /* CHAR */;
            this.buffer = newBuffer;
        }
        byteToIntBuffer(toAppend) {
            // IntBuffers hold four times as much per unit as ByteBuffers, so start with one quarter the capacity.
            let newBuffer = new Int32Array(Math.max(this.position + toAppend, this.buffer.length >> 2));
            newBuffer.set(this.buffer.subarray(0, this.position), 0);
            this.type = 2 /* INT */;
            this.buffer = newBuffer;
        }
        charToIntBuffer(toAppend) {
            // IntBuffers hold two times as much per unit as ByteBuffers, so start with one half the capacity.
            let newBuffer = new Int32Array(Math.max(this.position + toAppend, this.buffer.length >> 1));
            newBuffer.set(this.buffer.subarray(0, this.position), 0);
            this.type = 2 /* INT */;
            this.buffer = newBuffer;
        }
    }
    CodePointBuffer.Builder = Builder;
})(CodePointBuffer = exports.CodePointBuffer || (exports.CodePointBuffer = {}));
//# sourceMappingURL=CodePointBuffer.js.map

/***/ }),

/***/ 1978:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.CodePointCharStream = void 0;
const assert = __webpack_require__(1696);
const IntStream_1 = __webpack_require__(2628);
const Interval_1 = __webpack_require__(4378);
const Decorators_1 = __webpack_require__(681);
/**
 * Alternative to {@link ANTLRInputStream} which treats the input
 * as a series of Unicode code points, instead of a series of UTF-16
 * code units.
 *
 * Use this if you need to parse input which potentially contains
 * Unicode values > U+FFFF.
 */
class CodePointCharStream {
    // Use the factory method {@link #fromBuffer(CodePointBuffer)} to
    // construct instances of this type.
    constructor(array, position, remaining, name) {
        // TODO
        assert(position === 0);
        this._array = array;
        this._size = remaining;
        this._name = name;
        this._position = 0;
    }
    get internalStorage() {
        return this._array;
    }
    static fromBuffer(codePointBuffer, name) {
        if (name === undefined || name.length === 0) {
            name = IntStream_1.IntStream.UNKNOWN_SOURCE_NAME;
        }
        // Java lacks generics on primitive types.
        //
        // To avoid lots of calls to virtual methods in the
        // very hot codepath of LA() below, we construct one
        // of three concrete subclasses.
        //
        // The concrete subclasses directly access the code
        // points stored in the underlying array (byte[],
        // char[], or int[]), so we can avoid lots of virtual
        // method calls to ByteBuffer.get(offset).
        return new CodePointCharStream(codePointBuffer.array(), codePointBuffer.position, codePointBuffer.remaining, name);
    }
    consume() {
        if (this._size - this._position === 0) {
            assert(this.LA(1) === IntStream_1.IntStream.EOF);
            throw new RangeError("cannot consume EOF");
        }
        this._position++;
    }
    get index() {
        return this._position;
    }
    get size() {
        return this._size;
    }
    /** mark/release do nothing; we have entire buffer */
    mark() {
        return -1;
    }
    release(marker) {
        // No default implementation since this stream buffers the entire input
    }
    seek(index) {
        this._position = index;
    }
    get sourceName() {
        return this._name;
    }
    toString() {
        return this.getText(Interval_1.Interval.of(0, this.size - 1));
    }
    LA(i) {
        let offset;
        switch (Math.sign(i)) {
            case -1:
                offset = this.index + i;
                if (offset < 0) {
                    return IntStream_1.IntStream.EOF;
                }
                return this._array[offset];
            case 0:
                // Undefined
                return 0;
            case 1:
                offset = this.index + i - 1;
                if (offset >= this.size) {
                    return IntStream_1.IntStream.EOF;
                }
                return this._array[offset];
        }
        throw new RangeError("Not reached");
    }
    /** Return the UTF-16 encoded string for the given interval */
    getText(interval) {
        const startIdx = Math.min(interval.a, this.size);
        const len = Math.min(interval.b - interval.a + 1, this.size - startIdx);
        if (this._array instanceof Int32Array) {
            return String.fromCodePoint(...Array.from(this._array.subarray(startIdx, startIdx + len)));
        }
        else {
            return String.fromCharCode(...Array.from(this._array.subarray(startIdx, startIdx + len)));
        }
    }
}
__decorate([
    Decorators_1.Override
], CodePointCharStream.prototype, "consume", null);
__decorate([
    Decorators_1.Override
], CodePointCharStream.prototype, "index", null);
__decorate([
    Decorators_1.Override
], CodePointCharStream.prototype, "size", null);
__decorate([
    Decorators_1.Override
], CodePointCharStream.prototype, "mark", null);
__decorate([
    Decorators_1.Override
], CodePointCharStream.prototype, "release", null);
__decorate([
    Decorators_1.Override
], CodePointCharStream.prototype, "seek", null);
__decorate([
    Decorators_1.Override
], CodePointCharStream.prototype, "sourceName", null);
__decorate([
    Decorators_1.Override
], CodePointCharStream.prototype, "toString", null);
__decorate([
    Decorators_1.Override
], CodePointCharStream.prototype, "LA", null);
__decorate([
    Decorators_1.Override
], CodePointCharStream.prototype, "getText", null);
exports.CodePointCharStream = CodePointCharStream;
//# sourceMappingURL=CodePointCharStream.js.map

/***/ }),

/***/ 2058:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.CommonToken = void 0;
const Interval_1 = __webpack_require__(4378);
const Decorators_1 = __webpack_require__(681);
const Token_1 = __webpack_require__(8999);
let CommonToken = class CommonToken {
    constructor(type, text, source = CommonToken.EMPTY_SOURCE, channel = Token_1.Token.DEFAULT_CHANNEL, start = 0, stop = 0) {
        /**
         * This is the backing field for {@link #getLine} and {@link #setLine}.
         */
        this._line = 0;
        /**
         * This is the backing field for {@link #getCharPositionInLine} and
         * {@link #setCharPositionInLine}.
         */
        this._charPositionInLine = -1; // set to invalid position
        /**
         * This is the backing field for {@link #getChannel} and
         * {@link #setChannel}.
         */
        this._channel = Token_1.Token.DEFAULT_CHANNEL;
        /**
         * This is the backing field for `tokenIndex`.
         */
        this.index = -1;
        this._text = text;
        this._type = type;
        this.source = source;
        this._channel = channel;
        this.start = start;
        this.stop = stop;
        if (source.source != null) {
            this._line = source.source.line;
            this._charPositionInLine = source.source.charPositionInLine;
        }
    }
    /**
     * Constructs a new {@link CommonToken} as a copy of another {@link Token}.
     *
     * If `oldToken` is also a {@link CommonToken} instance, the newly
     * constructed token will share a reference to the {@link #text} field and
     * the {@link Tuple2} stored in {@link #source}. Otherwise, {@link #text} will
     * be assigned the result of calling {@link #getText}, and {@link #source}
     * will be constructed from the result of {@link Token#getTokenSource} and
     * {@link Token#getInputStream}.
     *
     * @param oldToken The token to copy.
     */
    static fromToken(oldToken) {
        let result = new CommonToken(oldToken.type, undefined, CommonToken.EMPTY_SOURCE, oldToken.channel, oldToken.startIndex, oldToken.stopIndex);
        result._line = oldToken.line;
        result.index = oldToken.tokenIndex;
        result._charPositionInLine = oldToken.charPositionInLine;
        if (oldToken instanceof CommonToken) {
            result._text = oldToken._text;
            result.source = oldToken.source;
        }
        else {
            result._text = oldToken.text;
            result.source = { source: oldToken.tokenSource, stream: oldToken.inputStream };
        }
        return result;
    }
    get type() {
        return this._type;
    }
    // @Override
    set type(type) {
        this._type = type;
    }
    get line() {
        return this._line;
    }
    // @Override
    set line(line) {
        this._line = line;
    }
    get text() {
        if (this._text != null) {
            return this._text;
        }
        let input = this.inputStream;
        if (input == null) {
            return undefined;
        }
        let n = input.size;
        if (this.start < n && this.stop < n) {
            return input.getText(Interval_1.Interval.of(this.start, this.stop));
        }
        else {
            return "<EOF>";
        }
    }
    /**
     * Explicitly set the text for this token. If {code text} is not
     * `undefined`, then {@link #getText} will return this value rather than
     * extracting the text from the input.
     *
     * @param text The explicit text of the token, or `undefined` if the text
     * should be obtained from the input along with the start and stop indexes
     * of the token.
     */
    // @Override
    set text(text) {
        this._text = text;
    }
    get charPositionInLine() {
        return this._charPositionInLine;
    }
    // @Override
    set charPositionInLine(charPositionInLine) {
        this._charPositionInLine = charPositionInLine;
    }
    get channel() {
        return this._channel;
    }
    // @Override
    set channel(channel) {
        this._channel = channel;
    }
    get startIndex() {
        return this.start;
    }
    set startIndex(start) {
        this.start = start;
    }
    get stopIndex() {
        return this.stop;
    }
    set stopIndex(stop) {
        this.stop = stop;
    }
    get tokenIndex() {
        return this.index;
    }
    // @Override
    set tokenIndex(index) {
        this.index = index;
    }
    get tokenSource() {
        return this.source.source;
    }
    get inputStream() {
        return this.source.stream;
    }
    toString(recognizer) {
        let channelStr = "";
        if (this._channel > 0) {
            channelStr = ",channel=" + this._channel;
        }
        let txt = this.text;
        if (txt != null) {
            txt = txt.replace(/\n/g, "\\n");
            txt = txt.replace(/\r/g, "\\r");
            txt = txt.replace(/\t/g, "\\t");
        }
        else {
            txt = "<no text>";
        }
        let typeString = String(this._type);
        if (recognizer) {
            typeString = recognizer.vocabulary.getDisplayName(this._type);
        }
        return "[@" + this.tokenIndex + "," + this.start + ":" + this.stop + "='" + txt + "',<" + typeString + ">" + channelStr + "," + this._line + ":" + this.charPositionInLine + "]";
    }
};
/**
 * An empty {@link Tuple2} which is used as the default value of
 * {@link #source} for tokens that do not have a source.
 */
CommonToken.EMPTY_SOURCE = { source: undefined, stream: undefined };
__decorate([
    Decorators_1.NotNull
], CommonToken.prototype, "source", void 0);
__decorate([
    Decorators_1.Override
], CommonToken.prototype, "type", null);
__decorate([
    Decorators_1.Override
], CommonToken.prototype, "line", null);
__decorate([
    Decorators_1.Override
], CommonToken.prototype, "text", null);
__decorate([
    Decorators_1.Override
], CommonToken.prototype, "charPositionInLine", null);
__decorate([
    Decorators_1.Override
], CommonToken.prototype, "channel", null);
__decorate([
    Decorators_1.Override
], CommonToken.prototype, "startIndex", null);
__decorate([
    Decorators_1.Override
], CommonToken.prototype, "stopIndex", null);
__decorate([
    Decorators_1.Override
], CommonToken.prototype, "tokenIndex", null);
__decorate([
    Decorators_1.Override
], CommonToken.prototype, "tokenSource", null);
__decorate([
    Decorators_1.Override
], CommonToken.prototype, "inputStream", null);
__decorate([
    Decorators_1.Override
], CommonToken.prototype, "toString", null);
__decorate([
    __param(0, Decorators_1.NotNull)
], CommonToken, "fromToken", null);
CommonToken = __decorate([
    __param(2, Decorators_1.NotNull)
], CommonToken);
exports.CommonToken = CommonToken;
//# sourceMappingURL=CommonToken.js.map

/***/ }),

/***/ 2929:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.CommonTokenFactory = void 0;
const CommonToken_1 = __webpack_require__(2058);
const Interval_1 = __webpack_require__(4378);
const Decorators_1 = __webpack_require__(681);
/**
 * This default implementation of {@link TokenFactory} creates
 * {@link CommonToken} objects.
 */
class CommonTokenFactory {
    /**
     * Constructs a {@link CommonTokenFactory} with the specified value for
     * {@link #copyText}.
     *
     * When `copyText` is `false`, the {@link #DEFAULT} instance
     * should be used instead of constructing a new instance.
     *
     * @param copyText The value for {@link #copyText}.
     */
    constructor(copyText = false) {
        this.copyText = copyText;
    }
    create(source, type, text, channel, start, stop, line, charPositionInLine) {
        let t = new CommonToken_1.CommonToken(type, text, source, channel, start, stop);
        t.line = line;
        t.charPositionInLine = charPositionInLine;
        if (text == null && this.copyText && source.stream != null) {
            t.text = source.stream.getText(Interval_1.Interval.of(start, stop));
        }
        return t;
    }
    createSimple(type, text) {
        return new CommonToken_1.CommonToken(type, text);
    }
}
__decorate([
    Decorators_1.Override
], CommonTokenFactory.prototype, "create", null);
__decorate([
    Decorators_1.Override
], CommonTokenFactory.prototype, "createSimple", null);
exports.CommonTokenFactory = CommonTokenFactory;
(function (CommonTokenFactory) {
    /**
     * The default {@link CommonTokenFactory} instance.
     *
     * This token factory does not explicitly copy token text when constructing
     * tokens.
     */
    CommonTokenFactory.DEFAULT = new CommonTokenFactory();
})(CommonTokenFactory = exports.CommonTokenFactory || (exports.CommonTokenFactory = {}));
//# sourceMappingURL=CommonTokenFactory.js.map

/***/ }),

/***/ 2217:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.CommonTokenStream = void 0;
// ConvertTo-TS run at 2016-10-04T11:26:50.3953157-07:00
const BufferedTokenStream_1 = __webpack_require__(672);
const Decorators_1 = __webpack_require__(681);
const Token_1 = __webpack_require__(8999);
/**
 * This class extends {@link BufferedTokenStream} with functionality to filter
 * token streams to tokens on a particular channel (tokens where
 * {@link Token#getChannel} returns a particular value).
 *
 * This token stream provides access to all tokens by index or when calling
 * methods like {@link #getText}. The channel filtering is only used for code
 * accessing tokens via the lookahead methods {@link #LA}, {@link #LT}, and
 * {@link #LB}.
 *
 * By default, tokens are placed on the default channel
 * ({@link Token#DEFAULT_CHANNEL}), but may be reassigned by using the
 * `->channel(HIDDEN)` lexer command, or by using an embedded action to
 * call {@link Lexer#setChannel}.
 *
 * Note: lexer rules which use the `->skip` lexer command or call
 * {@link Lexer#skip} do not produce tokens at all, so input text matched by
 * such a rule will not be available as part of the token stream, regardless of
 * channel.
 */
let CommonTokenStream = class CommonTokenStream extends BufferedTokenStream_1.BufferedTokenStream {
    /**
     * Constructs a new {@link CommonTokenStream} using the specified token
     * source and filtering tokens to the specified channel. Only tokens whose
     * {@link Token#getChannel} matches `channel` or have the
     * `Token.type` equal to {@link Token#EOF} will be returned by the
     * token stream lookahead methods.
     *
     * @param tokenSource The token source.
     * @param channel The channel to use for filtering tokens.
     */
    constructor(tokenSource, channel = Token_1.Token.DEFAULT_CHANNEL) {
        super(tokenSource);
        this.channel = channel;
    }
    adjustSeekIndex(i) {
        return this.nextTokenOnChannel(i, this.channel);
    }
    tryLB(k) {
        if ((this.p - k) < 0) {
            return undefined;
        }
        let i = this.p;
        let n = 1;
        // find k good tokens looking backwards
        while (n <= k && i > 0) {
            // skip off-channel tokens
            i = this.previousTokenOnChannel(i - 1, this.channel);
            n++;
        }
        if (i < 0) {
            return undefined;
        }
        return this.tokens[i];
    }
    tryLT(k) {
        //System.out.println("enter LT("+k+")");
        this.lazyInit();
        if (k === 0) {
            throw new RangeError("0 is not a valid lookahead index");
        }
        if (k < 0) {
            return this.tryLB(-k);
        }
        let i = this.p;
        let n = 1; // we know tokens[p] is a good one
        // find k good tokens
        while (n < k) {
            // skip off-channel tokens, but make sure to not look past EOF
            if (this.sync(i + 1)) {
                i = this.nextTokenOnChannel(i + 1, this.channel);
            }
            n++;
        }
        //		if ( i>range ) range = i;
        return this.tokens[i];
    }
    /** Count EOF just once. */
    getNumberOfOnChannelTokens() {
        let n = 0;
        this.fill();
        for (let t of this.tokens) {
            if (t.channel === this.channel) {
                n++;
            }
            if (t.type === Token_1.Token.EOF) {
                break;
            }
        }
        return n;
    }
};
__decorate([
    Decorators_1.Override
], CommonTokenStream.prototype, "adjustSeekIndex", null);
__decorate([
    Decorators_1.Override
], CommonTokenStream.prototype, "tryLB", null);
__decorate([
    Decorators_1.Override
], CommonTokenStream.prototype, "tryLT", null);
CommonTokenStream = __decorate([
    __param(0, Decorators_1.NotNull)
], CommonTokenStream);
exports.CommonTokenStream = CommonTokenStream;
//# sourceMappingURL=CommonTokenStream.js.map

/***/ }),

/***/ 8778:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
/* provided dependency */ var console = __webpack_require__(3716);

/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ConsoleErrorListener = void 0;
/**
 *
 * @author Sam Harwell
 */
class ConsoleErrorListener {
    /**
     * {@inheritDoc}
     *
     * This implementation prints messages to {@link System#err} containing the
     * values of `line`, `charPositionInLine`, and `msg` using
     * the following format.
     *
     * <pre>
     * line *line*:*charPositionInLine* *msg*
     * </pre>
     */
    syntaxError(recognizer, offendingSymbol, line, charPositionInLine, msg, e) {
        console.error(`line ${line}:${charPositionInLine} ${msg}`);
    }
}
exports.ConsoleErrorListener = ConsoleErrorListener;
/**
 * Provides a default instance of {@link ConsoleErrorListener}.
 */
ConsoleErrorListener.INSTANCE = new ConsoleErrorListener();
//# sourceMappingURL=ConsoleErrorListener.js.map

/***/ }),

/***/ 681:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.SuppressWarnings = exports.Override = exports.Nullable = exports.NotNull = void 0;
function NotNull(target, propertyKey, propertyDescriptor) {
    // intentionally empty
}
exports.NotNull = NotNull;
function Nullable(target, propertyKey, propertyDescriptor) {
    // intentionally empty
}
exports.Nullable = Nullable;
function Override(target, propertyKey, propertyDescriptor) {
    // do something with 'target' ...
}
exports.Override = Override;
function SuppressWarnings(options) {
    return (target, propertyKey, descriptor) => {
        // intentionally empty
    };
}
exports.SuppressWarnings = SuppressWarnings;
//# sourceMappingURL=Decorators.js.map

/***/ }),

/***/ 4242:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
/* provided dependency */ var console = __webpack_require__(3716);

/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DefaultErrorStrategy = void 0;
const ATNState_1 = __webpack_require__(1971);
const ATNStateType_1 = __webpack_require__(9602);
const FailedPredicateException_1 = __webpack_require__(1103);
const InputMismatchException_1 = __webpack_require__(7432);
const IntervalSet_1 = __webpack_require__(5462);
const NoViableAltException_1 = __webpack_require__(1202);
const PredictionContext_1 = __webpack_require__(1229);
const Token_1 = __webpack_require__(8999);
const Decorators_1 = __webpack_require__(681);
/**
 * This is the default implementation of {@link ANTLRErrorStrategy} used for
 * error reporting and recovery in ANTLR parsers.
 */
class DefaultErrorStrategy {
    constructor() {
        /**
         * Indicates whether the error strategy is currently "recovering from an
         * error". This is used to suppress reporting multiple error messages while
         * attempting to recover from a detected syntax error.
         *
         * @see #inErrorRecoveryMode
         */
        this.errorRecoveryMode = false;
        /** The index into the input stream where the last error occurred.
         * 	This is used to prevent infinite loops where an error is found
         *  but no token is consumed during recovery...another error is found,
         *  ad nauseum.  This is a failsafe mechanism to guarantee that at least
         *  one token/tree node is consumed for two errors.
         */
        this.lastErrorIndex = -1;
        /**
         * @see #nextTokensContext
         */
        this.nextTokensState = ATNState_1.ATNState.INVALID_STATE_NUMBER;
    }
    /**
     * {@inheritDoc}
     *
     * The default implementation simply calls {@link #endErrorCondition} to
     * ensure that the handler is not in error recovery mode.
     */
    reset(recognizer) {
        this.endErrorCondition(recognizer);
    }
    /**
     * This method is called to enter error recovery mode when a recognition
     * exception is reported.
     *
     * @param recognizer the parser instance
     */
    beginErrorCondition(recognizer) {
        this.errorRecoveryMode = true;
    }
    /**
     * {@inheritDoc}
     */
    inErrorRecoveryMode(recognizer) {
        return this.errorRecoveryMode;
    }
    /**
     * This method is called to leave error recovery mode after recovering from
     * a recognition exception.
     *
     * @param recognizer
     */
    endErrorCondition(recognizer) {
        this.errorRecoveryMode = false;
        this.lastErrorStates = undefined;
        this.lastErrorIndex = -1;
    }
    /**
     * {@inheritDoc}
     *
     * The default implementation simply calls {@link #endErrorCondition}.
     */
    reportMatch(recognizer) {
        this.endErrorCondition(recognizer);
    }
    /**
     * {@inheritDoc}
     *
     * The default implementation returns immediately if the handler is already
     * in error recovery mode. Otherwise, it calls {@link #beginErrorCondition}
     * and dispatches the reporting task based on the runtime type of `e`
     * according to the following table.
     *
     * * {@link NoViableAltException}: Dispatches the call to
     *   {@link #reportNoViableAlternative}
     * * {@link InputMismatchException}: Dispatches the call to
     *   {@link #reportInputMismatch}
     * * {@link FailedPredicateException}: Dispatches the call to
     *   {@link #reportFailedPredicate}
     * * All other types: calls {@link Parser#notifyErrorListeners} to report
     *   the exception
     */
    reportError(recognizer, e) {
        // if we've already reported an error and have not matched a token
        // yet successfully, don't report any errors.
        if (this.inErrorRecoveryMode(recognizer)) {
            //			System.err.print("[SPURIOUS] ");
            return; // don't report spurious errors
        }
        this.beginErrorCondition(recognizer);
        if (e instanceof NoViableAltException_1.NoViableAltException) {
            this.reportNoViableAlternative(recognizer, e);
        }
        else if (e instanceof InputMismatchException_1.InputMismatchException) {
            this.reportInputMismatch(recognizer, e);
        }
        else if (e instanceof FailedPredicateException_1.FailedPredicateException) {
            this.reportFailedPredicate(recognizer, e);
        }
        else {
            console.error(`unknown recognition error type: ${e}`);
            this.notifyErrorListeners(recognizer, e.toString(), e);
        }
    }
    notifyErrorListeners(recognizer, message, e) {
        let offendingToken = e.getOffendingToken(recognizer);
        if (offendingToken === undefined) {
            // Pass null to notifyErrorListeners so it in turn calls the error listeners with undefined as the offending
            // token. If we passed undefined, it would instead call the listeners with currentToken from the parser.
            offendingToken = null;
        }
        recognizer.notifyErrorListeners(message, offendingToken, e);
    }
    /**
     * {@inheritDoc}
     *
     * The default implementation resynchronizes the parser by consuming tokens
     * until we find one in the resynchronization set--loosely the set of tokens
     * that can follow the current rule.
     */
    recover(recognizer, e) {
        //		System.out.println("recover in "+recognizer.getRuleInvocationStack()+
        //						   " index="+recognizer.inputStream.index+
        //						   ", lastErrorIndex="+
        //						   lastErrorIndex+
        //						   ", states="+lastErrorStates);
        if (this.lastErrorIndex === recognizer.inputStream.index &&
            this.lastErrorStates &&
            this.lastErrorStates.contains(recognizer.state)) {
            // uh oh, another error at same token index and previously-visited
            // state in ATN; must be a case where LT(1) is in the recovery
            // token set so nothing got consumed. Consume a single token
            // at least to prevent an infinite loop; this is a failsafe.
            //			System.err.println("seen error condition before index="+
            //							   lastErrorIndex+", states="+lastErrorStates);
            //			System.err.println("FAILSAFE consumes "+recognizer.getTokenNames()[recognizer.inputStream.LA(1)]);
            recognizer.consume();
        }
        this.lastErrorIndex = recognizer.inputStream.index;
        if (!this.lastErrorStates) {
            this.lastErrorStates = new IntervalSet_1.IntervalSet();
        }
        this.lastErrorStates.add(recognizer.state);
        let followSet = this.getErrorRecoverySet(recognizer);
        this.consumeUntil(recognizer, followSet);
    }
    /**
     * The default implementation of {@link ANTLRErrorStrategy#sync} makes sure
     * that the current lookahead symbol is consistent with what were expecting
     * at this point in the ATN. You can call this anytime but ANTLR only
     * generates code to check before subrules/loops and each iteration.
     *
     * Implements Jim Idle's magic sync mechanism in closures and optional
     * subrules. E.g.,
     *
     * ```antlr
     * a : sync ( stuff sync )* ;
     * sync : {consume to what can follow sync} ;
     * ```
     *
     * At the start of a sub rule upon error, {@link #sync} performs single
     * token deletion, if possible. If it can't do that, it bails on the current
     * rule and uses the default error recovery, which consumes until the
     * resynchronization set of the current rule.
     *
     * If the sub rule is optional (`(...)?`, `(...)*`, or block
     * with an empty alternative), then the expected set includes what follows
     * the subrule.
     *
     * During loop iteration, it consumes until it sees a token that can start a
     * sub rule or what follows loop. Yes, that is pretty aggressive. We opt to
     * stay in the loop as long as possible.
     *
     * **ORIGINS**
     *
     * Previous versions of ANTLR did a poor job of their recovery within loops.
     * A single mismatch token or missing token would force the parser to bail
     * out of the entire rules surrounding the loop. So, for rule
     *
     * ```antlr
     * classDef : 'class' ID '{' member* '}'
     * ```
     *
     * input with an extra token between members would force the parser to
     * consume until it found the next class definition rather than the next
     * member definition of the current class.
     *
     * This functionality cost a little bit of effort because the parser has to
     * compare token set at the start of the loop and at each iteration. If for
     * some reason speed is suffering for you, you can turn off this
     * functionality by simply overriding this method as a blank { }.
     */
    sync(recognizer) {
        let s = recognizer.interpreter.atn.states[recognizer.state];
        //		System.err.println("sync @ "+s.stateNumber+"="+s.getClass().getSimpleName());
        // If already recovering, don't try to sync
        if (this.inErrorRecoveryMode(recognizer)) {
            return;
        }
        let tokens = recognizer.inputStream;
        let la = tokens.LA(1);
        // try cheaper subset first; might get lucky. seems to shave a wee bit off
        let nextTokens = recognizer.atn.nextTokens(s);
        if (nextTokens.contains(la)) {
            // We are sure the token matches
            this.nextTokensContext = undefined;
            this.nextTokensState = ATNState_1.ATNState.INVALID_STATE_NUMBER;
            return;
        }
        if (nextTokens.contains(Token_1.Token.EPSILON)) {
            if (this.nextTokensContext === undefined) {
                // It's possible the next token won't match; information tracked
                // by sync is restricted for performance.
                this.nextTokensContext = recognizer.context;
                this.nextTokensState = recognizer.state;
            }
            return;
        }
        switch (s.stateType) {
            case ATNStateType_1.ATNStateType.BLOCK_START:
            case ATNStateType_1.ATNStateType.STAR_BLOCK_START:
            case ATNStateType_1.ATNStateType.PLUS_BLOCK_START:
            case ATNStateType_1.ATNStateType.STAR_LOOP_ENTRY:
                // report error and recover if possible
                if (this.singleTokenDeletion(recognizer)) {
                    return;
                }
                throw new InputMismatchException_1.InputMismatchException(recognizer);
            case ATNStateType_1.ATNStateType.PLUS_LOOP_BACK:
            case ATNStateType_1.ATNStateType.STAR_LOOP_BACK:
                //			System.err.println("at loop back: "+s.getClass().getSimpleName());
                this.reportUnwantedToken(recognizer);
                let expecting = recognizer.getExpectedTokens();
                let whatFollowsLoopIterationOrRule = expecting.or(this.getErrorRecoverySet(recognizer));
                this.consumeUntil(recognizer, whatFollowsLoopIterationOrRule);
                break;
            default:
                // do nothing if we can't identify the exact kind of ATN state
                break;
        }
    }
    /**
     * This is called by {@link #reportError} when the exception is a
     * {@link NoViableAltException}.
     *
     * @see #reportError
     *
     * @param recognizer the parser instance
     * @param e the recognition exception
     */
    reportNoViableAlternative(recognizer, e) {
        let tokens = recognizer.inputStream;
        let input;
        if (tokens) {
            if (e.startToken.type === Token_1.Token.EOF) {
                input = "<EOF>";
            }
            else {
                input = tokens.getTextFromRange(e.startToken, e.getOffendingToken());
            }
        }
        else {
            input = "<unknown input>";
        }
        let msg = "no viable alternative at input " + this.escapeWSAndQuote(input);
        this.notifyErrorListeners(recognizer, msg, e);
    }
    /**
     * This is called by {@link #reportError} when the exception is an
     * {@link InputMismatchException}.
     *
     * @see #reportError
     *
     * @param recognizer the parser instance
     * @param e the recognition exception
     */
    reportInputMismatch(recognizer, e) {
        let expected = e.expectedTokens;
        let expectedString = expected ? expected.toStringVocabulary(recognizer.vocabulary) : "";
        let msg = "mismatched input " + this.getTokenErrorDisplay(e.getOffendingToken(recognizer)) +
            " expecting " + expectedString;
        this.notifyErrorListeners(recognizer, msg, e);
    }
    /**
     * This is called by {@link #reportError} when the exception is a
     * {@link FailedPredicateException}.
     *
     * @see #reportError
     *
     * @param recognizer the parser instance
     * @param e the recognition exception
     */
    reportFailedPredicate(recognizer, e) {
        let ruleName = recognizer.ruleNames[recognizer.context.ruleIndex];
        let msg = "rule " + ruleName + " " + e.message;
        this.notifyErrorListeners(recognizer, msg, e);
    }
    /**
     * This method is called to report a syntax error which requires the removal
     * of a token from the input stream. At the time this method is called, the
     * erroneous symbol is current `LT(1)` symbol and has not yet been
     * removed from the input stream. When this method returns,
     * `recognizer` is in error recovery mode.
     *
     * This method is called when {@link #singleTokenDeletion} identifies
     * single-token deletion as a viable recovery strategy for a mismatched
     * input error.
     *
     * The default implementation simply returns if the handler is already in
     * error recovery mode. Otherwise, it calls {@link #beginErrorCondition} to
     * enter error recovery mode, followed by calling
     * {@link Parser#notifyErrorListeners}.
     *
     * @param recognizer the parser instance
     */
    reportUnwantedToken(recognizer) {
        if (this.inErrorRecoveryMode(recognizer)) {
            return;
        }
        this.beginErrorCondition(recognizer);
        let t = recognizer.currentToken;
        let tokenName = this.getTokenErrorDisplay(t);
        let expecting = this.getExpectedTokens(recognizer);
        let msg = "extraneous input " + tokenName + " expecting " +
            expecting.toStringVocabulary(recognizer.vocabulary);
        recognizer.notifyErrorListeners(msg, t, undefined);
    }
    /**
     * This method is called to report a syntax error which requires the
     * insertion of a missing token into the input stream. At the time this
     * method is called, the missing token has not yet been inserted. When this
     * method returns, `recognizer` is in error recovery mode.
     *
     * This method is called when {@link #singleTokenInsertion} identifies
     * single-token insertion as a viable recovery strategy for a mismatched
     * input error.
     *
     * The default implementation simply returns if the handler is already in
     * error recovery mode. Otherwise, it calls {@link #beginErrorCondition} to
     * enter error recovery mode, followed by calling
     * {@link Parser#notifyErrorListeners}.
     *
     * @param recognizer the parser instance
     */
    reportMissingToken(recognizer) {
        if (this.inErrorRecoveryMode(recognizer)) {
            return;
        }
        this.beginErrorCondition(recognizer);
        let t = recognizer.currentToken;
        let expecting = this.getExpectedTokens(recognizer);
        let msg = "missing " + expecting.toStringVocabulary(recognizer.vocabulary) +
            " at " + this.getTokenErrorDisplay(t);
        recognizer.notifyErrorListeners(msg, t, undefined);
    }
    /**
     * {@inheritDoc}
     *
     * The default implementation attempts to recover from the mismatched input
     * by using single token insertion and deletion as described below. If the
     * recovery attempt fails, this method
     * {@link InputMismatchException}.
     *
     * **EXTRA TOKEN** (single token deletion)
     *
     * `LA(1)` is not what we are looking for. If `LA(2)` has the
     * right token, however, then assume `LA(1)` is some extra spurious
     * token and delete it. Then consume and return the next token (which was
     * the `LA(2)` token) as the successful result of the match operation.
     *
     * This recovery strategy is implemented by {@link #singleTokenDeletion}.
     *
     * **MISSING TOKEN** (single token insertion)
     *
     * If current token (at `LA(1)`) is consistent with what could come
     * after the expected `LA(1)` token, then assume the token is missing
     * and use the parser's {@link TokenFactory} to create it on the fly. The
     * "insertion" is performed by returning the created token as the successful
     * result of the match operation.
     *
     * This recovery strategy is implemented by {@link #singleTokenInsertion}.
     *
     * **EXAMPLE**
     *
     * For example, Input `i=(3;` is clearly missing the `')'`. When
     * the parser returns from the nested call to `expr`, it will have
     * call chain:
     *
     * ```
     * stat → expr → atom
     * ```
     *
     * and it will be trying to match the `')'` at this point in the
     * derivation:
     *
     * ```
     * => ID '=' '(' INT ')' ('+' atom)* ';'
     *                    ^
     * ```
     *
     * The attempt to match `')'` will fail when it sees `';'` and
     * call {@link #recoverInline}. To recover, it sees that `LA(1)==';'`
     * is in the set of tokens that can follow the `')'` token reference
     * in rule `atom`. It can assume that you forgot the `')'`.
     */
    recoverInline(recognizer) {
        // SINGLE TOKEN DELETION
        let matchedSymbol = this.singleTokenDeletion(recognizer);
        if (matchedSymbol) {
            // we have deleted the extra token.
            // now, move past ttype token as if all were ok
            recognizer.consume();
            return matchedSymbol;
        }
        // SINGLE TOKEN INSERTION
        if (this.singleTokenInsertion(recognizer)) {
            return this.getMissingSymbol(recognizer);
        }
        // even that didn't work; must throw the exception
        if (this.nextTokensContext === undefined) {
            throw new InputMismatchException_1.InputMismatchException(recognizer);
        }
        else {
            throw new InputMismatchException_1.InputMismatchException(recognizer, this.nextTokensState, this.nextTokensContext);
        }
    }
    /**
     * This method implements the single-token insertion inline error recovery
     * strategy. It is called by {@link #recoverInline} if the single-token
     * deletion strategy fails to recover from the mismatched input. If this
     * method returns `true`, `recognizer` will be in error recovery
     * mode.
     *
     * This method determines whether or not single-token insertion is viable by
     * checking if the `LA(1)` input symbol could be successfully matched
     * if it were instead the `LA(2)` symbol. If this method returns
     * `true`, the caller is responsible for creating and inserting a
     * token with the correct type to produce this behavior.
     *
     * @param recognizer the parser instance
     * @returns `true` if single-token insertion is a viable recovery
     * strategy for the current mismatched input, otherwise `false`
     */
    singleTokenInsertion(recognizer) {
        let currentSymbolType = recognizer.inputStream.LA(1);
        // if current token is consistent with what could come after current
        // ATN state, then we know we're missing a token; error recovery
        // is free to conjure up and insert the missing token
        let currentState = recognizer.interpreter.atn.states[recognizer.state];
        let next = currentState.transition(0).target;
        let atn = recognizer.interpreter.atn;
        let expectingAtLL2 = atn.nextTokens(next, PredictionContext_1.PredictionContext.fromRuleContext(atn, recognizer.context));
        //		console.warn("LT(2) set="+expectingAtLL2.toString(recognizer.getTokenNames()));
        if (expectingAtLL2.contains(currentSymbolType)) {
            this.reportMissingToken(recognizer);
            return true;
        }
        return false;
    }
    /**
     * This method implements the single-token deletion inline error recovery
     * strategy. It is called by {@link #recoverInline} to attempt to recover
     * from mismatched input. If this method returns `undefined`, the parser and error
     * handler state will not have changed. If this method returns non-`undefined`,
     * `recognizer` will *not* be in error recovery mode since the
     * returned token was a successful match.
     *
     * If the single-token deletion is successful, this method calls
     * {@link #reportUnwantedToken} to report the error, followed by
     * {@link Parser#consume} to actually "delete" the extraneous token. Then,
     * before returning {@link #reportMatch} is called to signal a successful
     * match.
     *
     * @param recognizer the parser instance
     * @returns the successfully matched {@link Token} instance if single-token
     * deletion successfully recovers from the mismatched input, otherwise
     * `undefined`
     */
    singleTokenDeletion(recognizer) {
        let nextTokenType = recognizer.inputStream.LA(2);
        let expecting = this.getExpectedTokens(recognizer);
        if (expecting.contains(nextTokenType)) {
            this.reportUnwantedToken(recognizer);
            /*
            System.err.println("recoverFromMismatchedToken deleting "+
                               ((TokenStream)recognizer.inputStream).LT(1)+
                               " since "+((TokenStream)recognizer.inputStream).LT(2)+
                               " is what we want");
            */
            recognizer.consume(); // simply delete extra token
            // we want to return the token we're actually matching
            let matchedSymbol = recognizer.currentToken;
            this.reportMatch(recognizer); // we know current token is correct
            return matchedSymbol;
        }
        return undefined;
    }
    /** Conjure up a missing token during error recovery.
     *
     *  The recognizer attempts to recover from single missing
     *  symbols. But, actions might refer to that missing symbol.
     *  For example, x=ID {f($x);}. The action clearly assumes
     *  that there has been an identifier matched previously and that
     *  $x points at that token. If that token is missing, but
     *  the next token in the stream is what we want we assume that
     *  this token is missing and we keep going. Because we
     *  have to return some token to replace the missing token,
     *  we have to conjure one up. This method gives the user control
     *  over the tokens returned for missing tokens. Mostly,
     *  you will want to create something special for identifier
     *  tokens. For literals such as '{' and ',', the default
     *  action in the parser or tree parser works. It simply creates
     *  a CommonToken of the appropriate type. The text will be the token.
     *  If you change what tokens must be created by the lexer,
     *  override this method to create the appropriate tokens.
     */
    getMissingSymbol(recognizer) {
        let currentSymbol = recognizer.currentToken;
        let expecting = this.getExpectedTokens(recognizer);
        let expectedTokenType = Token_1.Token.INVALID_TYPE;
        if (!expecting.isNil) {
            // get any element
            expectedTokenType = expecting.minElement;
        }
        let tokenText;
        if (expectedTokenType === Token_1.Token.EOF) {
            tokenText = "<missing EOF>";
        }
        else {
            tokenText = "<missing " + recognizer.vocabulary.getDisplayName(expectedTokenType) + ">";
        }
        let current = currentSymbol;
        let lookback = recognizer.inputStream.tryLT(-1);
        if (current.type === Token_1.Token.EOF && lookback != null) {
            current = lookback;
        }
        return this.constructToken(recognizer.inputStream.tokenSource, expectedTokenType, tokenText, current);
    }
    constructToken(tokenSource, expectedTokenType, tokenText, current) {
        let factory = tokenSource.tokenFactory;
        let x = current.tokenSource;
        let stream = x ? x.inputStream : undefined;
        return factory.create({ source: tokenSource, stream }, expectedTokenType, tokenText, Token_1.Token.DEFAULT_CHANNEL, -1, -1, current.line, current.charPositionInLine);
    }
    getExpectedTokens(recognizer) {
        return recognizer.getExpectedTokens();
    }
    /** How should a token be displayed in an error message? The default
     *  is to display just the text, but during development you might
     *  want to have a lot of information spit out.  Override in that case
     *  to use t.toString() (which, for CommonToken, dumps everything about
     *  the token). This is better than forcing you to override a method in
     *  your token objects because you don't have to go modify your lexer
     *  so that it creates a new Java type.
     */
    getTokenErrorDisplay(t) {
        if (!t) {
            return "<no token>";
        }
        let s = this.getSymbolText(t);
        if (!s) {
            if (this.getSymbolType(t) === Token_1.Token.EOF) {
                s = "<EOF>";
            }
            else {
                s = `<${this.getSymbolType(t)}>`;
            }
        }
        return this.escapeWSAndQuote(s);
    }
    getSymbolText(symbol) {
        return symbol.text;
    }
    getSymbolType(symbol) {
        return symbol.type;
    }
    escapeWSAndQuote(s) {
        //		if ( s==null ) return s;
        s = s.replace("\n", "\\n");
        s = s.replace("\r", "\\r");
        s = s.replace("\t", "\\t");
        return "'" + s + "'";
    }
    /*  Compute the error recovery set for the current rule.  During
     *  rule invocation, the parser pushes the set of tokens that can
     *  follow that rule reference on the stack; this amounts to
     *  computing FIRST of what follows the rule reference in the
     *  enclosing rule. See LinearApproximator.FIRST().
     *  This local follow set only includes tokens
     *  from within the rule; i.e., the FIRST computation done by
     *  ANTLR stops at the end of a rule.
     *
     *  EXAMPLE
     *
     *  When you find a "no viable alt exception", the input is not
     *  consistent with any of the alternatives for rule r.  The best
     *  thing to do is to consume tokens until you see something that
     *  can legally follow a call to r *or* any rule that called r.
     *  You don't want the exact set of viable next tokens because the
     *  input might just be missing a token--you might consume the
     *  rest of the input looking for one of the missing tokens.
     *
     *  Consider grammar:
     *
     *  a : '[' b ']'
     *    | '(' b ')'
     *    ;
     *  b : c '^' INT ;
     *  c : ID
     *    | INT
     *    ;
     *
     *  At each rule invocation, the set of tokens that could follow
     *  that rule is pushed on a stack.  Here are the various
     *  context-sensitive follow sets:
     *
     *  FOLLOW(b1_in_a) = FIRST(']') = ']'
     *  FOLLOW(b2_in_a) = FIRST(')') = ')'
     *  FOLLOW(c_in_b) = FIRST('^') = '^'
     *
     *  Upon erroneous input "[]", the call chain is
     *
     *  a -> b -> c
     *
     *  and, hence, the follow context stack is:
     *
     *  depth     follow set       start of rule execution
     *    0         <EOF>                    a (from main())
     *    1          ']'                     b
     *    2          '^'                     c
     *
     *  Notice that ')' is not included, because b would have to have
     *  been called from a different context in rule a for ')' to be
     *  included.
     *
     *  For error recovery, we cannot consider FOLLOW(c)
     *  (context-sensitive or otherwise).  We need the combined set of
     *  all context-sensitive FOLLOW sets--the set of all tokens that
     *  could follow any reference in the call chain.  We need to
     *  resync to one of those tokens.  Note that FOLLOW(c)='^' and if
     *  we resync'd to that token, we'd consume until EOF.  We need to
     *  sync to context-sensitive FOLLOWs for a, b, and c: {']','^'}.
     *  In this case, for input "[]", LA(1) is ']' and in the set, so we would
     *  not consume anything. After printing an error, rule c would
     *  return normally.  Rule b would not find the required '^' though.
     *  At this point, it gets a mismatched token error and
     *  exception (since LA(1) is not in the viable following token
     *  set).  The rule exception handler tries to recover, but finds
     *  the same recovery set and doesn't consume anything.  Rule b
     *  exits normally returning to rule a.  Now it finds the ']' (and
     *  with the successful match exits errorRecovery mode).
     *
     *  So, you can see that the parser walks up the call chain looking
     *  for the token that was a member of the recovery set.
     *
     *  Errors are not generated in errorRecovery mode.
     *
     *  ANTLR's error recovery mechanism is based upon original ideas:
     *
     *  "Algorithms + Data Structures = Programs" by Niklaus Wirth
     *
     *  and
     *
     *  "A note on error recovery in recursive descent parsers":
     *  http://portal.acm.org/citation.cfm?id=947902.947905
     *
     *  Later, Josef Grosch had some good ideas:
     *
     *  "Efficient and Comfortable Error Recovery in Recursive Descent
     *  Parsers":
     *  ftp://www.cocolab.com/products/cocktail/doca4.ps/ell.ps.zip
     *
     *  Like Grosch I implement context-sensitive FOLLOW sets that are combined
     *  at run-time upon error to avoid overhead during parsing.
     */
    getErrorRecoverySet(recognizer) {
        let atn = recognizer.interpreter.atn;
        let ctx = recognizer.context;
        let recoverSet = new IntervalSet_1.IntervalSet();
        while (ctx && ctx.invokingState >= 0) {
            // compute what follows who invoked us
            let invokingState = atn.states[ctx.invokingState];
            let rt = invokingState.transition(0);
            let follow = atn.nextTokens(rt.followState);
            recoverSet.addAll(follow);
            ctx = ctx._parent;
        }
        recoverSet.remove(Token_1.Token.EPSILON);
        //		System.out.println("recover set "+recoverSet.toString(recognizer.getTokenNames()));
        return recoverSet;
    }
    /** Consume tokens until one matches the given token set. */
    consumeUntil(recognizer, set) {
        //		System.err.println("consumeUntil("+set.toString(recognizer.getTokenNames())+")");
        let ttype = recognizer.inputStream.LA(1);
        while (ttype !== Token_1.Token.EOF && !set.contains(ttype)) {
            //System.out.println("consume during recover LA(1)="+getTokenNames()[input.LA(1)]);
            //			recognizer.inputStream.consume();
            recognizer.consume();
            ttype = recognizer.inputStream.LA(1);
        }
    }
}
__decorate([
    Decorators_1.Override
], DefaultErrorStrategy.prototype, "reset", null);
__decorate([
    __param(0, Decorators_1.NotNull)
], DefaultErrorStrategy.prototype, "beginErrorCondition", null);
__decorate([
    Decorators_1.Override
], DefaultErrorStrategy.prototype, "inErrorRecoveryMode", null);
__decorate([
    __param(0, Decorators_1.NotNull)
], DefaultErrorStrategy.prototype, "endErrorCondition", null);
__decorate([
    Decorators_1.Override
], DefaultErrorStrategy.prototype, "reportMatch", null);
__decorate([
    Decorators_1.Override
], DefaultErrorStrategy.prototype, "reportError", null);
__decorate([
    __param(0, Decorators_1.NotNull)
], DefaultErrorStrategy.prototype, "notifyErrorListeners", null);
__decorate([
    Decorators_1.Override
], DefaultErrorStrategy.prototype, "recover", null);
__decorate([
    Decorators_1.Override
], DefaultErrorStrategy.prototype, "sync", null);
__decorate([
    __param(0, Decorators_1.NotNull),
    __param(1, Decorators_1.NotNull)
], DefaultErrorStrategy.prototype, "reportNoViableAlternative", null);
__decorate([
    __param(0, Decorators_1.NotNull),
    __param(1, Decorators_1.NotNull)
], DefaultErrorStrategy.prototype, "reportInputMismatch", null);
__decorate([
    __param(0, Decorators_1.NotNull),
    __param(1, Decorators_1.NotNull)
], DefaultErrorStrategy.prototype, "reportFailedPredicate", null);
__decorate([
    __param(0, Decorators_1.NotNull)
], DefaultErrorStrategy.prototype, "reportUnwantedToken", null);
__decorate([
    __param(0, Decorators_1.NotNull)
], DefaultErrorStrategy.prototype, "reportMissingToken", null);
__decorate([
    Decorators_1.Override
], DefaultErrorStrategy.prototype, "recoverInline", null);
__decorate([
    __param(0, Decorators_1.NotNull)
], DefaultErrorStrategy.prototype, "singleTokenInsertion", null);
__decorate([
    __param(0, Decorators_1.NotNull)
], DefaultErrorStrategy.prototype, "singleTokenDeletion", null);
__decorate([
    Decorators_1.NotNull,
    __param(0, Decorators_1.NotNull)
], DefaultErrorStrategy.prototype, "getMissingSymbol", null);
__decorate([
    Decorators_1.NotNull,
    __param(0, Decorators_1.NotNull)
], DefaultErrorStrategy.prototype, "getExpectedTokens", null);
__decorate([
    __param(0, Decorators_1.NotNull)
], DefaultErrorStrategy.prototype, "getSymbolText", null);
__decorate([
    __param(0, Decorators_1.NotNull)
], DefaultErrorStrategy.prototype, "getSymbolType", null);
__decorate([
    Decorators_1.NotNull,
    __param(0, Decorators_1.NotNull)
], DefaultErrorStrategy.prototype, "escapeWSAndQuote", null);
__decorate([
    Decorators_1.NotNull,
    __param(0, Decorators_1.NotNull)
], DefaultErrorStrategy.prototype, "getErrorRecoverySet", null);
__decorate([
    __param(0, Decorators_1.NotNull), __param(1, Decorators_1.NotNull)
], DefaultErrorStrategy.prototype, "consumeUntil", null);
exports.DefaultErrorStrategy = DefaultErrorStrategy;
//# sourceMappingURL=DefaultErrorStrategy.js.map

/***/ }),

/***/ 8140:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Dependents = void 0;
// ConvertTo-TS run at 2016-10-04T11:26:51.1349829-07:00
/**
 *
 * @author Sam Harwell
 */
var Dependents;
(function (Dependents) {
    /**
     * The element is dependent upon the specified rule.
     */
    Dependents[Dependents["SELF"] = 0] = "SELF";
    /**
     * The element is dependent upon the set of the specified rule's parents
     * (rules which directly reference it).
     */
    Dependents[Dependents["PARENTS"] = 1] = "PARENTS";
    /**
     * The element is dependent upon the set of the specified rule's children
     * (rules which it directly references).
     */
    Dependents[Dependents["CHILDREN"] = 2] = "CHILDREN";
    /**
     * The element is dependent upon the set of the specified rule's ancestors
     * (the transitive closure of `PARENTS` rules).
     */
    Dependents[Dependents["ANCESTORS"] = 3] = "ANCESTORS";
    /**
     * The element is dependent upon the set of the specified rule's descendants
     * (the transitive closure of `CHILDREN` rules).
     */
    Dependents[Dependents["DESCENDANTS"] = 4] = "DESCENDANTS";
    /**
     * The element is dependent upon the set of the specified rule's siblings
     * (the union of `CHILDREN` of its `PARENTS`).
     */
    Dependents[Dependents["SIBLINGS"] = 5] = "SIBLINGS";
    /**
     * The element is dependent upon the set of the specified rule's preceeding
     * siblings (the union of `CHILDREN` of its `PARENTS` which
     * appear before a reference to the rule).
     */
    Dependents[Dependents["PRECEEDING_SIBLINGS"] = 6] = "PRECEEDING_SIBLINGS";
    /**
     * The element is dependent upon the set of the specified rule's following
     * siblings (the union of `CHILDREN` of its `PARENTS` which
     * appear after a reference to the rule).
     */
    Dependents[Dependents["FOLLOWING_SIBLINGS"] = 7] = "FOLLOWING_SIBLINGS";
    /**
     * The element is dependent upon the set of the specified rule's preceeding
     * elements (rules which might end before the start of the specified rule
     * while parsing). This is calculated by taking the
     * `PRECEEDING_SIBLINGS` of the rule and each of its
     * `ANCESTORS`, along with the `DESCENDANTS` of those
     * elements.
     */
    Dependents[Dependents["PRECEEDING"] = 8] = "PRECEEDING";
    /**
     * The element is dependent upon the set of the specified rule's following
     * elements (rules which might start after the end of the specified rule
     * while parsing). This is calculated by taking the
     * `FOLLOWING_SIBLINGS` of the rule and each of its
     * `ANCESTORS`, along with the `DESCENDANTS` of those
     * elements.
     */
    Dependents[Dependents["FOLLOWING"] = 9] = "FOLLOWING";
})(Dependents = exports.Dependents || (exports.Dependents = {}));
//# sourceMappingURL=Dependents.js.map

/***/ }),

/***/ 2155:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DiagnosticErrorListener = void 0;
const BitSet_1 = __webpack_require__(3300);
const Decorators_1 = __webpack_require__(681);
const Interval_1 = __webpack_require__(4378);
/**
 * This implementation of {@link ANTLRErrorListener} can be used to identify
 * certain potential correctness and performance problems in grammars. "Reports"
 * are made by calling {@link Parser#notifyErrorListeners} with the appropriate
 * message.
 *
 * * **Ambiguities**: These are cases where more than one path through the
 *   grammar can match the input.
 * * **Weak context sensitivity**: These are cases where full-context
 *   prediction resolved an SLL conflict to a unique alternative which equaled the
 *   minimum alternative of the SLL conflict.
 * * **Strong (forced) context sensitivity**: These are cases where the
 *   full-context prediction resolved an SLL conflict to a unique alternative,
 *   *and* the minimum alternative of the SLL conflict was found to not be
 *   a truly viable alternative. Two-stage parsing cannot be used for inputs where
 *   this situation occurs.
 *
 * @author Sam Harwell
 */
class DiagnosticErrorListener {
    /**
     * Initializes a new instance of {@link DiagnosticErrorListener}, specifying
     * whether all ambiguities or only exact ambiguities are reported.
     *
     * @param exactOnly `true` to report only exact ambiguities, otherwise
     * `false` to report all ambiguities.  Defaults to true.
     */
    constructor(exactOnly = true) {
        this.exactOnly = exactOnly;
        this.exactOnly = exactOnly;
    }
    syntaxError(
    /*@NotNull*/
    recognizer, offendingSymbol, line, charPositionInLine, 
    /*@NotNull*/
    msg, e) {
        // intentionally empty
    }
    reportAmbiguity(recognizer, dfa, startIndex, stopIndex, exact, ambigAlts, configs) {
        if (this.exactOnly && !exact) {
            return;
        }
        let decision = this.getDecisionDescription(recognizer, dfa);
        let conflictingAlts = this.getConflictingAlts(ambigAlts, configs);
        let text = recognizer.inputStream.getText(Interval_1.Interval.of(startIndex, stopIndex));
        let message = `reportAmbiguity d=${decision}: ambigAlts=${conflictingAlts}, input='${text}'`;
        recognizer.notifyErrorListeners(message);
    }
    reportAttemptingFullContext(recognizer, dfa, startIndex, stopIndex, conflictingAlts, conflictState) {
        let format = "reportAttemptingFullContext d=%s, input='%s'";
        let decision = this.getDecisionDescription(recognizer, dfa);
        let text = recognizer.inputStream.getText(Interval_1.Interval.of(startIndex, stopIndex));
        let message = `reportAttemptingFullContext d=${decision}, input='${text}'`;
        recognizer.notifyErrorListeners(message);
    }
    reportContextSensitivity(recognizer, dfa, startIndex, stopIndex, prediction, acceptState) {
        let format = "reportContextSensitivity d=%s, input='%s'";
        let decision = this.getDecisionDescription(recognizer, dfa);
        let text = recognizer.inputStream.getText(Interval_1.Interval.of(startIndex, stopIndex));
        let message = `reportContextSensitivity d=${decision}, input='${text}'`;
        recognizer.notifyErrorListeners(message);
    }
    getDecisionDescription(recognizer, dfa) {
        let decision = dfa.decision;
        let ruleIndex = dfa.atnStartState.ruleIndex;
        let ruleNames = recognizer.ruleNames;
        if (ruleIndex < 0 || ruleIndex >= ruleNames.length) {
            return decision.toString();
        }
        let ruleName = ruleNames[ruleIndex];
        if (!ruleName) {
            return decision.toString();
        }
        return `${decision} (${ruleName})`;
    }
    /**
     * Computes the set of conflicting or ambiguous alternatives from a
     * configuration set, if that information was not already provided by the
     * parser.
     *
     * @param reportedAlts The set of conflicting or ambiguous alternatives, as
     * reported by the parser.
     * @param configs The conflicting or ambiguous configuration set.
     * @returns Returns `reportedAlts` if it is not `undefined`, otherwise
     * returns the set of alternatives represented in `configs`.
     */
    getConflictingAlts(reportedAlts, configs) {
        if (reportedAlts != null) {
            return reportedAlts;
        }
        let result = new BitSet_1.BitSet();
        for (let config of configs) {
            result.set(config.alt);
        }
        return result;
    }
}
__decorate([
    Decorators_1.Override
], DiagnosticErrorListener.prototype, "syntaxError", null);
__decorate([
    Decorators_1.Override,
    __param(0, Decorators_1.NotNull),
    __param(1, Decorators_1.NotNull),
    __param(6, Decorators_1.NotNull)
], DiagnosticErrorListener.prototype, "reportAmbiguity", null);
__decorate([
    Decorators_1.Override,
    __param(0, Decorators_1.NotNull),
    __param(1, Decorators_1.NotNull),
    __param(5, Decorators_1.NotNull)
], DiagnosticErrorListener.prototype, "reportAttemptingFullContext", null);
__decorate([
    Decorators_1.Override,
    __param(0, Decorators_1.NotNull),
    __param(1, Decorators_1.NotNull),
    __param(5, Decorators_1.NotNull)
], DiagnosticErrorListener.prototype, "reportContextSensitivity", null);
__decorate([
    __param(0, Decorators_1.NotNull),
    __param(1, Decorators_1.NotNull)
], DiagnosticErrorListener.prototype, "getDecisionDescription", null);
__decorate([
    Decorators_1.NotNull,
    __param(1, Decorators_1.NotNull)
], DiagnosticErrorListener.prototype, "getConflictingAlts", null);
exports.DiagnosticErrorListener = DiagnosticErrorListener;
//# sourceMappingURL=DiagnosticErrorListener.js.map

/***/ }),

/***/ 1103:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.FailedPredicateException = void 0;
const RecognitionException_1 = __webpack_require__(1100);
const Decorators_1 = __webpack_require__(681);
const PredicateTransition_1 = __webpack_require__(1290);
/** A semantic predicate failed during validation.  Validation of predicates
 *  occurs when normally parsing the alternative just like matching a token.
 *  Disambiguating predicate evaluation occurs when we test a predicate during
 *  prediction.
 */
let FailedPredicateException = class FailedPredicateException extends RecognitionException_1.RecognitionException {
    constructor(recognizer, predicate, message) {
        super(recognizer, recognizer.inputStream, recognizer.context, FailedPredicateException.formatMessage(predicate, message));
        let s = recognizer.interpreter.atn.states[recognizer.state];
        let trans = s.transition(0);
        if (trans instanceof PredicateTransition_1.PredicateTransition) {
            this._ruleIndex = trans.ruleIndex;
            this._predicateIndex = trans.predIndex;
        }
        else {
            this._ruleIndex = 0;
            this._predicateIndex = 0;
        }
        this._predicate = predicate;
        super.setOffendingToken(recognizer, recognizer.currentToken);
    }
    get ruleIndex() {
        return this._ruleIndex;
    }
    get predicateIndex() {
        return this._predicateIndex;
    }
    get predicate() {
        return this._predicate;
    }
    static formatMessage(predicate, message) {
        if (message) {
            return message;
        }
        return `failed predicate: {${predicate}}?`;
    }
};
__decorate([
    Decorators_1.NotNull
], FailedPredicateException, "formatMessage", null);
FailedPredicateException = __decorate([
    __param(0, Decorators_1.NotNull)
], FailedPredicateException);
exports.FailedPredicateException = FailedPredicateException;
//# sourceMappingURL=FailedPredicateException.js.map

/***/ }),

/***/ 7432:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.InputMismatchException = void 0;
// ConvertTo-TS run at 2016-10-04T11:26:51.5187682-07:00
const RecognitionException_1 = __webpack_require__(1100);
const Decorators_1 = __webpack_require__(681);
/** This signifies any kind of mismatched input exceptions such as
 *  when the current input does not match the expected token.
 */
let InputMismatchException = class InputMismatchException extends RecognitionException_1.RecognitionException {
    constructor(recognizer, state, context) {
        if (context === undefined) {
            context = recognizer.context;
        }
        super(recognizer, recognizer.inputStream, context);
        if (state !== undefined) {
            this.setOffendingState(state);
        }
        this.setOffendingToken(recognizer, recognizer.currentToken);
    }
};
InputMismatchException = __decorate([
    __param(0, Decorators_1.NotNull)
], InputMismatchException);
exports.InputMismatchException = InputMismatchException;
//# sourceMappingURL=InputMismatchException.js.map

/***/ }),

/***/ 2628:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.IntStream = void 0;
// ConvertTo-TS run at 2016-10-04T11:26:51.6934376-07:00
var IntStream;
(function (IntStream) {
    /**
     * The value returned by {@link #LA LA()} when the end of the stream is
     * reached.
     */
    IntStream.EOF = -1;
    /**
     * The value returned by {@link #getSourceName} when the actual name of the
     * underlying source is not known.
     */
    IntStream.UNKNOWN_SOURCE_NAME = "<unknown>";
})(IntStream = exports.IntStream || (exports.IntStream = {}));
//# sourceMappingURL=IntStream.js.map

/***/ }),

/***/ 9725:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.InterpreterRuleContext = void 0;
// ConvertTo-TS run at 2016-10-04T11:26:51.5898546-07:00
const Decorators_1 = __webpack_require__(681);
const ParserRuleContext_1 = __webpack_require__(9248);
/**
 * This class extends {@link ParserRuleContext} by allowing the value of
 * {@link #getRuleIndex} to be explicitly set for the context.
 *
 * {@link ParserRuleContext} does not include field storage for the rule index
 * since the context classes created by the code generator override the
 * {@link #getRuleIndex} method to return the correct value for that context.
 * Since the parser interpreter does not use the context classes generated for a
 * parser, this class (with slightly more memory overhead per node) is used to
 * provide equivalent functionality.
 */
class InterpreterRuleContext extends ParserRuleContext_1.ParserRuleContext {
    constructor(ruleIndex, parent, invokingStateNumber) {
        if (invokingStateNumber !== undefined) {
            super(parent, invokingStateNumber);
        }
        else {
            super();
        }
        this._ruleIndex = ruleIndex;
    }
    get ruleIndex() {
        return this._ruleIndex;
    }
}
__decorate([
    Decorators_1.Override
], InterpreterRuleContext.prototype, "ruleIndex", null);
exports.InterpreterRuleContext = InterpreterRuleContext;
//# sourceMappingURL=InterpreterRuleContext.js.map

/***/ }),

/***/ 8170:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
/* provided dependency */ var console = __webpack_require__(3716);

/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Lexer = void 0;
const CommonTokenFactory_1 = __webpack_require__(2929);
const IntegerStack_1 = __webpack_require__(5555);
const Interval_1 = __webpack_require__(4378);
const IntStream_1 = __webpack_require__(2628);
const LexerATNSimulator_1 = __webpack_require__(9796);
const LexerNoViableAltException_1 = __webpack_require__(5154);
const Decorators_1 = __webpack_require__(681);
const Recognizer_1 = __webpack_require__(4780);
const Token_1 = __webpack_require__(8999);
/** A lexer is recognizer that draws input symbols from a character stream.
 *  lexer grammars result in a subclass of this object. A Lexer object
 *  uses simplified match() and error recovery mechanisms in the interest
 *  of speed.
 */
class Lexer extends Recognizer_1.Recognizer {
    constructor(input) {
        super();
        /** How to create token objects */
        this._factory = CommonTokenFactory_1.CommonTokenFactory.DEFAULT;
        /** What character index in the stream did the current token start at?
         *  Needed, for example, to get the text for current token.  Set at
         *  the start of nextToken.
         */
        this._tokenStartCharIndex = -1;
        /** The line on which the first character of the token resides */
        this._tokenStartLine = 0;
        /** The character position of first character within the line */
        this._tokenStartCharPositionInLine = 0;
        /** Once we see EOF on char stream, next token will be EOF.
         *  If you have DONE : EOF ; then you see DONE EOF.
         */
        this._hitEOF = false;
        /** The channel number for the current token */
        this._channel = 0;
        /** The token type for the current token */
        this._type = 0;
        this._modeStack = new IntegerStack_1.IntegerStack();
        this._mode = Lexer.DEFAULT_MODE;
        this._input = input;
        this._tokenFactorySourcePair = { source: this, stream: input };
    }
    static get DEFAULT_TOKEN_CHANNEL() {
        return Token_1.Token.DEFAULT_CHANNEL;
    }
    static get HIDDEN() {
        return Token_1.Token.HIDDEN_CHANNEL;
    }
    reset(resetInput) {
        // wack Lexer state variables
        if (resetInput === undefined || resetInput) {
            this._input.seek(0); // rewind the input
        }
        this._token = undefined;
        this._type = Token_1.Token.INVALID_TYPE;
        this._channel = Token_1.Token.DEFAULT_CHANNEL;
        this._tokenStartCharIndex = -1;
        this._tokenStartCharPositionInLine = -1;
        this._tokenStartLine = -1;
        this._text = undefined;
        this._hitEOF = false;
        this._mode = Lexer.DEFAULT_MODE;
        this._modeStack.clear();
        this.interpreter.reset();
    }
    /** Return a token from this source; i.e., match a token on the char
     *  stream.
     */
    nextToken() {
        if (this._input == null) {
            throw new Error("nextToken requires a non-null input stream.");
        }
        // Mark start location in char stream so unbuffered streams are
        // guaranteed at least have text of current token
        let tokenStartMarker = this._input.mark();
        try {
            outer: while (true) {
                if (this._hitEOF) {
                    return this.emitEOF();
                }
                this._token = undefined;
                this._channel = Token_1.Token.DEFAULT_CHANNEL;
                this._tokenStartCharIndex = this._input.index;
                this._tokenStartCharPositionInLine = this.interpreter.charPositionInLine;
                this._tokenStartLine = this.interpreter.line;
                this._text = undefined;
                do {
                    this._type = Token_1.Token.INVALID_TYPE;
                    //				System.out.println("nextToken line "+tokenStartLine+" at "+((char)input.LA(1))+
                    //								   " in mode "+mode+
                    //								   " at index "+input.index);
                    let ttype;
                    try {
                        ttype = this.interpreter.match(this._input, this._mode);
                    }
                    catch (e) {
                        if (e instanceof LexerNoViableAltException_1.LexerNoViableAltException) {
                            this.notifyListeners(e); // report error
                            this.recover(e);
                            ttype = Lexer.SKIP;
                        }
                        else {
                            throw e;
                        }
                    }
                    if (this._input.LA(1) === IntStream_1.IntStream.EOF) {
                        this._hitEOF = true;
                    }
                    if (this._type === Token_1.Token.INVALID_TYPE) {
                        this._type = ttype;
                    }
                    if (this._type === Lexer.SKIP) {
                        continue outer;
                    }
                } while (this._type === Lexer.MORE);
                if (this._token == null) {
                    return this.emit();
                }
                return this._token;
            }
        }
        finally {
            // make sure we release marker after match or
            // unbuffered char stream will keep buffering
            this._input.release(tokenStartMarker);
        }
    }
    /** Instruct the lexer to skip creating a token for current lexer rule
     *  and look for another token.  nextToken() knows to keep looking when
     *  a lexer rule finishes with token set to SKIP_TOKEN.  Recall that
     *  if token==undefined at end of any token rule, it creates one for you
     *  and emits it.
     */
    skip() {
        this._type = Lexer.SKIP;
    }
    more() {
        this._type = Lexer.MORE;
    }
    mode(m) {
        this._mode = m;
    }
    pushMode(m) {
        if (LexerATNSimulator_1.LexerATNSimulator.debug) {
            console.log("pushMode " + m);
        }
        this._modeStack.push(this._mode);
        this.mode(m);
    }
    popMode() {
        if (this._modeStack.isEmpty) {
            throw new Error("EmptyStackException");
        }
        if (LexerATNSimulator_1.LexerATNSimulator.debug) {
            console.log("popMode back to " + this._modeStack.peek());
        }
        this.mode(this._modeStack.pop());
        return this._mode;
    }
    get tokenFactory() {
        return this._factory;
    }
    // @Override
    set tokenFactory(factory) {
        this._factory = factory;
    }
    get inputStream() {
        return this._input;
    }
    /** Set the char stream and reset the lexer */
    set inputStream(input) {
        this.reset(false);
        this._input = input;
        this._tokenFactorySourcePair = { source: this, stream: this._input };
    }
    get sourceName() {
        return this._input.sourceName;
    }
    emit(token) {
        if (!token) {
            token = this._factory.create(this._tokenFactorySourcePair, this._type, this._text, this._channel, this._tokenStartCharIndex, this.charIndex - 1, this._tokenStartLine, this._tokenStartCharPositionInLine);
        }
        this._token = token;
        return token;
    }
    emitEOF() {
        let cpos = this.charPositionInLine;
        let line = this.line;
        let eof = this._factory.create(this._tokenFactorySourcePair, Token_1.Token.EOF, undefined, Token_1.Token.DEFAULT_CHANNEL, this._input.index, this._input.index - 1, line, cpos);
        this.emit(eof);
        return eof;
    }
    get line() {
        return this.interpreter.line;
    }
    set line(line) {
        this.interpreter.line = line;
    }
    get charPositionInLine() {
        return this.interpreter.charPositionInLine;
    }
    set charPositionInLine(charPositionInLine) {
        this.interpreter.charPositionInLine = charPositionInLine;
    }
    /** What is the index of the current character of lookahead? */
    get charIndex() {
        return this._input.index;
    }
    /** Return the text matched so far for the current token or any
     *  text override.
     */
    get text() {
        if (this._text != null) {
            return this._text;
        }
        return this.interpreter.getText(this._input);
    }
    /** Set the complete text of this token; it wipes any previous
     *  changes to the text.
     */
    set text(text) {
        this._text = text;
    }
    /** Override if emitting multiple tokens. */
    get token() { return this._token; }
    set token(_token) {
        this._token = _token;
    }
    set type(ttype) {
        this._type = ttype;
    }
    get type() {
        return this._type;
    }
    set channel(channel) {
        this._channel = channel;
    }
    get channel() {
        return this._channel;
    }
    /** Return a list of all Token objects in input char stream.
     *  Forces load of all tokens. Does not include EOF token.
     */
    getAllTokens() {
        let tokens = [];
        let t = this.nextToken();
        while (t.type !== Token_1.Token.EOF) {
            tokens.push(t);
            t = this.nextToken();
        }
        return tokens;
    }
    notifyListeners(e) {
        let text = this._input.getText(Interval_1.Interval.of(this._tokenStartCharIndex, this._input.index));
        let msg = "token recognition error at: '" +
            this.getErrorDisplay(text) + "'";
        let listener = this.getErrorListenerDispatch();
        if (listener.syntaxError) {
            listener.syntaxError(this, undefined, this._tokenStartLine, this._tokenStartCharPositionInLine, msg, e);
        }
    }
    getErrorDisplay(s) {
        if (typeof s === "number") {
            switch (s) {
                case Token_1.Token.EOF:
                    return "<EOF>";
                case 0x0a:
                    return "\\n";
                case 0x09:
                    return "\\t";
                case 0x0d:
                    return "\\r";
            }
            return String.fromCharCode(s);
        }
        return s.replace(/\n/g, "\\n")
            .replace(/\t/g, "\\t")
            .replace(/\r/g, "\\r");
    }
    getCharErrorDisplay(c) {
        let s = this.getErrorDisplay(c);
        return "'" + s + "'";
    }
    recover(re) {
        if (re instanceof LexerNoViableAltException_1.LexerNoViableAltException) {
            if (this._input.LA(1) !== IntStream_1.IntStream.EOF) {
                // skip a char and try again
                this.interpreter.consume(this._input);
            }
        }
        else {
            //System.out.println("consuming char "+(char)input.LA(1)+" during recovery");
            //re.printStackTrace();
            // TODO: Do we lose character or line position information?
            this._input.consume();
        }
    }
}
Lexer.DEFAULT_MODE = 0;
Lexer.MORE = -2;
Lexer.SKIP = -3;
Lexer.MIN_CHAR_VALUE = 0x0000;
Lexer.MAX_CHAR_VALUE = 0x10FFFF;
__decorate([
    Decorators_1.Override
], Lexer.prototype, "nextToken", null);
__decorate([
    Decorators_1.Override
], Lexer.prototype, "tokenFactory", null);
__decorate([
    Decorators_1.Override
], Lexer.prototype, "inputStream", null);
__decorate([
    Decorators_1.Override
], Lexer.prototype, "sourceName", null);
__decorate([
    Decorators_1.Override
], Lexer.prototype, "line", null);
__decorate([
    Decorators_1.Override
], Lexer.prototype, "charPositionInLine", null);
exports.Lexer = Lexer;
//# sourceMappingURL=Lexer.js.map

/***/ }),

/***/ 573:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.LexerInterpreter = void 0;
const Lexer_1 = __webpack_require__(8170);
const LexerATNSimulator_1 = __webpack_require__(9796);
const Decorators_1 = __webpack_require__(681);
const Decorators_2 = __webpack_require__(681);
let LexerInterpreter = class LexerInterpreter extends Lexer_1.Lexer {
    constructor(grammarFileName, vocabulary, ruleNames, channelNames, modeNames, atn, input) {
        super(input);
        if (atn.grammarType !== 0 /* LEXER */) {
            throw new Error("IllegalArgumentException: The ATN must be a lexer ATN.");
        }
        this._grammarFileName = grammarFileName;
        this._atn = atn;
        this._ruleNames = ruleNames.slice(0);
        this._channelNames = channelNames.slice(0);
        this._modeNames = modeNames.slice(0);
        this._vocabulary = vocabulary;
        this._interp = new LexerATNSimulator_1.LexerATNSimulator(atn, this);
    }
    get atn() {
        return this._atn;
    }
    get grammarFileName() {
        return this._grammarFileName;
    }
    get ruleNames() {
        return this._ruleNames;
    }
    get channelNames() {
        return this._channelNames;
    }
    get modeNames() {
        return this._modeNames;
    }
    get vocabulary() {
        return this._vocabulary;
    }
};
__decorate([
    Decorators_1.NotNull
], LexerInterpreter.prototype, "_vocabulary", void 0);
__decorate([
    Decorators_2.Override
], LexerInterpreter.prototype, "atn", null);
__decorate([
    Decorators_2.Override
], LexerInterpreter.prototype, "grammarFileName", null);
__decorate([
    Decorators_2.Override
], LexerInterpreter.prototype, "ruleNames", null);
__decorate([
    Decorators_2.Override
], LexerInterpreter.prototype, "channelNames", null);
__decorate([
    Decorators_2.Override
], LexerInterpreter.prototype, "modeNames", null);
__decorate([
    Decorators_2.Override
], LexerInterpreter.prototype, "vocabulary", null);
LexerInterpreter = __decorate([
    __param(1, Decorators_1.NotNull)
], LexerInterpreter);
exports.LexerInterpreter = LexerInterpreter;
//# sourceMappingURL=LexerInterpreter.js.map

/***/ }),

/***/ 5154:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.LexerNoViableAltException = void 0;
const RecognitionException_1 = __webpack_require__(1100);
const Decorators_1 = __webpack_require__(681);
const Interval_1 = __webpack_require__(4378);
const Utils = __webpack_require__(3070);
let LexerNoViableAltException = class LexerNoViableAltException extends RecognitionException_1.RecognitionException {
    constructor(lexer, input, startIndex, deadEndConfigs) {
        super(lexer, input);
        this._startIndex = startIndex;
        this._deadEndConfigs = deadEndConfigs;
    }
    get startIndex() {
        return this._startIndex;
    }
    get deadEndConfigs() {
        return this._deadEndConfigs;
    }
    get inputStream() {
        return super.inputStream;
    }
    toString() {
        let symbol = "";
        if (this._startIndex >= 0 && this._startIndex < this.inputStream.size) {
            symbol = this.inputStream.getText(Interval_1.Interval.of(this._startIndex, this._startIndex));
            symbol = Utils.escapeWhitespace(symbol, false);
        }
        // return String.format(Locale.getDefault(), "%s('%s')", LexerNoViableAltException.class.getSimpleName(), symbol);
        return `LexerNoViableAltException('${symbol}')`;
    }
};
__decorate([
    Decorators_1.Override
], LexerNoViableAltException.prototype, "inputStream", null);
__decorate([
    Decorators_1.Override
], LexerNoViableAltException.prototype, "toString", null);
LexerNoViableAltException = __decorate([
    __param(1, Decorators_1.NotNull)
], LexerNoViableAltException);
exports.LexerNoViableAltException = LexerNoViableAltException;
//# sourceMappingURL=LexerNoViableAltException.js.map

/***/ }),

/***/ 4265:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ListTokenSource = void 0;
const CommonTokenFactory_1 = __webpack_require__(2929);
const Decorators_1 = __webpack_require__(681);
const Token_1 = __webpack_require__(8999);
/**
 * Provides an implementation of {@link TokenSource} as a wrapper around a list
 * of {@link Token} objects.
 *
 * If the final token in the list is an {@link Token#EOF} token, it will be used
 * as the EOF token for every call to {@link #nextToken} after the end of the
 * list is reached. Otherwise, an EOF token will be created.
 */
let ListTokenSource = class ListTokenSource {
    /**
     * Constructs a new {@link ListTokenSource} instance from the specified
     * collection of {@link Token} objects and source name.
     *
     * @param tokens The collection of {@link Token} objects to provide as a
     * {@link TokenSource}.
     * @param sourceName The name of the {@link TokenSource}. If this value is
     * `undefined`, {@link #getSourceName} will attempt to infer the name from
     * the next {@link Token} (or the previous token if the end of the input has
     * been reached).
     *
     * @exception NullPointerException if `tokens` is `undefined`
     */
    constructor(tokens, sourceName) {
        /**
         * The index into {@link #tokens} of token to return by the next call to
         * {@link #nextToken}. The end of the input is indicated by this value
         * being greater than or equal to the number of items in {@link #tokens}.
         */
        this.i = 0;
        /**
         * This is the backing field for {@link #getTokenFactory} and
         * {@link setTokenFactory}.
         */
        this._factory = CommonTokenFactory_1.CommonTokenFactory.DEFAULT;
        if (tokens == null) {
            throw new Error("tokens cannot be null");
        }
        this.tokens = tokens;
        this._sourceName = sourceName;
    }
    /**
     * {@inheritDoc}
     */
    get charPositionInLine() {
        if (this.i < this.tokens.length) {
            return this.tokens[this.i].charPositionInLine;
        }
        else if (this.eofToken != null) {
            return this.eofToken.charPositionInLine;
        }
        else if (this.tokens.length > 0) {
            // have to calculate the result from the line/column of the previous
            // token, along with the text of the token.
            let lastToken = this.tokens[this.tokens.length - 1];
            let tokenText = lastToken.text;
            if (tokenText != null) {
                let lastNewLine = tokenText.lastIndexOf("\n");
                if (lastNewLine >= 0) {
                    return tokenText.length - lastNewLine - 1;
                }
            }
            return lastToken.charPositionInLine + lastToken.stopIndex - lastToken.startIndex + 1;
        }
        // only reach this if tokens is empty, meaning EOF occurs at the first
        // position in the input
        return 0;
    }
    /**
     * {@inheritDoc}
     */
    nextToken() {
        if (this.i >= this.tokens.length) {
            if (this.eofToken == null) {
                let start = -1;
                if (this.tokens.length > 0) {
                    let previousStop = this.tokens[this.tokens.length - 1].stopIndex;
                    if (previousStop !== -1) {
                        start = previousStop + 1;
                    }
                }
                let stop = Math.max(-1, start - 1);
                this.eofToken = this._factory.create({ source: this, stream: this.inputStream }, Token_1.Token.EOF, "EOF", Token_1.Token.DEFAULT_CHANNEL, start, stop, this.line, this.charPositionInLine);
            }
            return this.eofToken;
        }
        let t = this.tokens[this.i];
        if (this.i === this.tokens.length - 1 && t.type === Token_1.Token.EOF) {
            this.eofToken = t;
        }
        this.i++;
        return t;
    }
    /**
     * {@inheritDoc}
     */
    get line() {
        if (this.i < this.tokens.length) {
            return this.tokens[this.i].line;
        }
        else if (this.eofToken != null) {
            return this.eofToken.line;
        }
        else if (this.tokens.length > 0) {
            // have to calculate the result from the line/column of the previous
            // token, along with the text of the token.
            let lastToken = this.tokens[this.tokens.length - 1];
            let line = lastToken.line;
            let tokenText = lastToken.text;
            if (tokenText != null) {
                for (let i = 0; i < tokenText.length; i++) {
                    if (tokenText.charAt(i) === "\n") {
                        line++;
                    }
                }
            }
            // if no text is available, assume the token did not contain any newline characters.
            return line;
        }
        // only reach this if tokens is empty, meaning EOF occurs at the first
        // position in the input
        return 1;
    }
    /**
     * {@inheritDoc}
     */
    get inputStream() {
        if (this.i < this.tokens.length) {
            return this.tokens[this.i].inputStream;
        }
        else if (this.eofToken != null) {
            return this.eofToken.inputStream;
        }
        else if (this.tokens.length > 0) {
            return this.tokens[this.tokens.length - 1].inputStream;
        }
        // no input stream information is available
        return undefined;
    }
    /**
     * {@inheritDoc}
     */
    get sourceName() {
        if (this._sourceName) {
            return this._sourceName;
        }
        let inputStream = this.inputStream;
        if (inputStream != null) {
            return inputStream.sourceName;
        }
        return "List";
    }
    /**
     * {@inheritDoc}
     */
    // @Override
    set tokenFactory(factory) {
        this._factory = factory;
    }
    /**
     * {@inheritDoc}
     */
    get tokenFactory() {
        return this._factory;
    }
};
__decorate([
    Decorators_1.Override
], ListTokenSource.prototype, "charPositionInLine", null);
__decorate([
    Decorators_1.Override
], ListTokenSource.prototype, "nextToken", null);
__decorate([
    Decorators_1.Override
], ListTokenSource.prototype, "line", null);
__decorate([
    Decorators_1.Override
], ListTokenSource.prototype, "inputStream", null);
__decorate([
    Decorators_1.Override
], ListTokenSource.prototype, "sourceName", null);
__decorate([
    Decorators_1.Override,
    Decorators_1.NotNull,
    __param(0, Decorators_1.NotNull)
], ListTokenSource.prototype, "tokenFactory", null);
ListTokenSource = __decorate([
    __param(0, Decorators_1.NotNull)
], ListTokenSource);
exports.ListTokenSource = ListTokenSource;
//# sourceMappingURL=ListTokenSource.js.map

/***/ }),

/***/ 1202:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.NoViableAltException = void 0;
const Parser_1 = __webpack_require__(3679);
const RecognitionException_1 = __webpack_require__(1100);
const Decorators_1 = __webpack_require__(681);
/** Indicates that the parser could not decide which of two or more paths
 *  to take based upon the remaining input. It tracks the starting token
 *  of the offending input and also knows where the parser was
 *  in the various paths when the error. Reported by reportNoViableAlternative()
 */
class NoViableAltException extends RecognitionException_1.RecognitionException {
    constructor(recognizer, input, startToken, offendingToken, deadEndConfigs, ctx) {
        if (recognizer instanceof Parser_1.Parser) {
            if (input === undefined) {
                input = recognizer.inputStream;
            }
            if (startToken === undefined) {
                startToken = recognizer.currentToken;
            }
            if (offendingToken === undefined) {
                offendingToken = recognizer.currentToken;
            }
            if (ctx === undefined) {
                ctx = recognizer.context;
            }
        }
        super(recognizer, input, ctx);
        this._deadEndConfigs = deadEndConfigs;
        this._startToken = startToken;
        this.setOffendingToken(recognizer, offendingToken);
    }
    get startToken() {
        return this._startToken;
    }
    get deadEndConfigs() {
        return this._deadEndConfigs;
    }
}
__decorate([
    Decorators_1.NotNull
], NoViableAltException.prototype, "_startToken", void 0);
exports.NoViableAltException = NoViableAltException;
//# sourceMappingURL=NoViableAltException.js.map

/***/ }),

/***/ 3679:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
/* provided dependency */ var console = __webpack_require__(3716);
/* provided dependency */ var process = __webpack_require__(4406);

/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Parser = void 0;
const Utils = __webpack_require__(3070);
const ATNDeserializationOptions_1 = __webpack_require__(4258);
const ATNDeserializer_1 = __webpack_require__(6349);
const DefaultErrorStrategy_1 = __webpack_require__(4242);
const ErrorNode_1 = __webpack_require__(135);
const IntegerStack_1 = __webpack_require__(5555);
const Lexer_1 = __webpack_require__(8170);
const Decorators_1 = __webpack_require__(681);
const ParseInfo_1 = __webpack_require__(8180);
const ParserATNSimulator_1 = __webpack_require__(4217);
const ProxyParserErrorListener_1 = __webpack_require__(4075);
const Recognizer_1 = __webpack_require__(4780);
const TerminalNode_1 = __webpack_require__(9466);
const Token_1 = __webpack_require__(8999);
class TraceListener {
    constructor(ruleNames, tokenStream) {
        this.ruleNames = ruleNames;
        this.tokenStream = tokenStream;
    }
    enterEveryRule(ctx) {
        console.log("enter   " + this.ruleNames[ctx.ruleIndex] +
            ", LT(1)=" + this.tokenStream.LT(1).text);
    }
    exitEveryRule(ctx) {
        console.log("exit    " + this.ruleNames[ctx.ruleIndex] +
            ", LT(1)=" + this.tokenStream.LT(1).text);
    }
    visitErrorNode(node) {
        // intentionally empty
    }
    visitTerminal(node) {
        let parent = node.parent.ruleContext;
        let token = node.symbol;
        console.log("consume " + token + " rule " + this.ruleNames[parent.ruleIndex]);
    }
}
__decorate([
    Decorators_1.Override
], TraceListener.prototype, "enterEveryRule", null);
__decorate([
    Decorators_1.Override
], TraceListener.prototype, "exitEveryRule", null);
__decorate([
    Decorators_1.Override
], TraceListener.prototype, "visitErrorNode", null);
__decorate([
    Decorators_1.Override
], TraceListener.prototype, "visitTerminal", null);
/** This is all the parsing support code essentially; most of it is error recovery stuff. */
class Parser extends Recognizer_1.Recognizer {
    constructor(input) {
        super();
        /**
         * The error handling strategy for the parser. The default value is a new
         * instance of {@link DefaultErrorStrategy}.
         *
         * @see #getErrorHandler
         * @see #setErrorHandler
         */
        this._errHandler = new DefaultErrorStrategy_1.DefaultErrorStrategy();
        this._precedenceStack = new IntegerStack_1.IntegerStack();
        /**
         * Specifies whether or not the parser should construct a parse tree during
         * the parsing process. The default value is `true`.
         *
         * @see `buildParseTree`
         */
        this._buildParseTrees = true;
        /**
         * The list of {@link ParseTreeListener} listeners registered to receive
         * events during the parse.
         *
         * @see #addParseListener
         */
        this._parseListeners = [];
        /**
         * The number of syntax errors reported during parsing. This value is
         * incremented each time {@link #notifyErrorListeners} is called.
         */
        this._syntaxErrors = 0;
        /** Indicates parser has match()ed EOF token. See {@link #exitRule()}. */
        this.matchedEOF = false;
        this._precedenceStack.push(0);
        this.inputStream = input;
    }
    reset(resetInput) {
        // Note: this method executes when not parsing, so _ctx can be undefined
        if (resetInput === undefined || resetInput) {
            this.inputStream.seek(0);
        }
        this._errHandler.reset(this);
        this._ctx = undefined;
        this._syntaxErrors = 0;
        this.matchedEOF = false;
        this.isTrace = false;
        this._precedenceStack.clear();
        this._precedenceStack.push(0);
        let interpreter = this.interpreter;
        if (interpreter != null) {
            interpreter.reset();
        }
    }
    /**
     * Match current input symbol against `ttype`. If the symbol type
     * matches, {@link ANTLRErrorStrategy#reportMatch} and {@link #consume} are
     * called to complete the match process.
     *
     * If the symbol type does not match,
     * {@link ANTLRErrorStrategy#recoverInline} is called on the current error
     * strategy to attempt recovery. If {@link #getBuildParseTree} is
     * `true` and the token index of the symbol returned by
     * {@link ANTLRErrorStrategy#recoverInline} is -1, the symbol is added to
     * the parse tree by calling {@link #createErrorNode(ParserRuleContext, Token)} then
     * {@link ParserRuleContext#addErrorNode(ErrorNode)}.
     *
     * @param ttype the token type to match
     * @returns the matched symbol
     * @ if the current input symbol did not match
     * `ttype` and the error strategy could not recover from the
     * mismatched symbol
     */
    match(ttype) {
        let t = this.currentToken;
        if (t.type === ttype) {
            if (ttype === Token_1.Token.EOF) {
                this.matchedEOF = true;
            }
            this._errHandler.reportMatch(this);
            this.consume();
        }
        else {
            t = this._errHandler.recoverInline(this);
            if (this._buildParseTrees && t.tokenIndex === -1) {
                // we must have conjured up a new token during single token insertion
                // if it's not the current symbol
                this._ctx.addErrorNode(this.createErrorNode(this._ctx, t));
            }
        }
        return t;
    }
    /**
     * Match current input symbol as a wildcard. If the symbol type matches
     * (i.e. has a value greater than 0), {@link ANTLRErrorStrategy#reportMatch}
     * and {@link #consume} are called to complete the match process.
     *
     * If the symbol type does not match,
     * {@link ANTLRErrorStrategy#recoverInline} is called on the current error
     * strategy to attempt recovery. If {@link #getBuildParseTree} is
     * `true` and the token index of the symbol returned by
     * {@link ANTLRErrorStrategy#recoverInline} is -1, the symbol is added to
     * the parse tree by calling {@link Parser#createErrorNode(ParserRuleContext, Token)} then
     * {@link ParserRuleContext#addErrorNode(ErrorNode)}.
     *
     * @returns the matched symbol
     * @ if the current input symbol did not match
     * a wildcard and the error strategy could not recover from the mismatched
     * symbol
     */
    matchWildcard() {
        let t = this.currentToken;
        if (t.type > 0) {
            this._errHandler.reportMatch(this);
            this.consume();
        }
        else {
            t = this._errHandler.recoverInline(this);
            if (this._buildParseTrees && t.tokenIndex === -1) {
                // we must have conjured up a new token during single token insertion
                // if it's not the current symbol
                this._ctx.addErrorNode(this.createErrorNode(this._ctx, t));
            }
        }
        return t;
    }
    /**
     * Track the {@link ParserRuleContext} objects during the parse and hook
     * them up using the {@link ParserRuleContext#children} list so that it
     * forms a parse tree. The {@link ParserRuleContext} returned from the start
     * rule represents the root of the parse tree.
     *
     * Note that if we are not building parse trees, rule contexts only point
     * upwards. When a rule exits, it returns the context but that gets garbage
     * collected if nobody holds a reference. It points upwards but nobody
     * points at it.
     *
     * When we build parse trees, we are adding all of these contexts to
     * {@link ParserRuleContext#children} list. Contexts are then not candidates
     * for garbage collection.
     */
    set buildParseTree(buildParseTrees) {
        this._buildParseTrees = buildParseTrees;
    }
    /**
     * Gets whether or not a complete parse tree will be constructed while
     * parsing. This property is `true` for a newly constructed parser.
     *
     * @returns `true` if a complete parse tree will be constructed while
     * parsing, otherwise `false`
     */
    get buildParseTree() {
        return this._buildParseTrees;
    }
    getParseListeners() {
        return this._parseListeners;
    }
    /**
     * Registers `listener` to receive events during the parsing process.
     *
     * To support output-preserving grammar transformations (including but not
     * limited to left-recursion removal, automated left-factoring, and
     * optimized code generation), calls to listener methods during the parse
     * may differ substantially from calls made by
     * {@link ParseTreeWalker#DEFAULT} used after the parse is complete. In
     * particular, rule entry and exit events may occur in a different order
     * during the parse than after the parser. In addition, calls to certain
     * rule entry methods may be omitted.
     *
     * With the following specific exceptions, calls to listener events are
     * *deterministic*, i.e. for identical input the calls to listener
     * methods will be the same.
     *
     * * Alterations to the grammar used to generate code may change the
     *   behavior of the listener calls.
     * * Alterations to the command line options passed to ANTLR 4 when
     *   generating the parser may change the behavior of the listener calls.
     * * Changing the version of the ANTLR Tool used to generate the parser
     *   may change the behavior of the listener calls.
     *
     * @param listener the listener to add
     *
     * @throws {@link TypeError} if `listener` is `undefined`
     */
    addParseListener(listener) {
        if (listener == null) {
            throw new TypeError("listener cannot be null");
        }
        this._parseListeners.push(listener);
    }
    /**
     * Remove `listener` from the list of parse listeners.
     *
     * If `listener` is `undefined` or has not been added as a parse
     * listener, this method does nothing.
     *
     * @see #addParseListener
     *
     * @param listener the listener to remove
     */
    removeParseListener(listener) {
        let index = this._parseListeners.findIndex((l) => l === listener);
        if (index !== -1) {
            this._parseListeners.splice(index, 1);
        }
    }
    /**
     * Remove all parse listeners.
     *
     * @see #addParseListener
     */
    removeParseListeners() {
        this._parseListeners.length = 0;
    }
    /**
     * Notify any parse listeners of an enter rule event.
     *
     * @see #addParseListener
     */
    triggerEnterRuleEvent() {
        for (let listener of this._parseListeners) {
            if (listener.enterEveryRule) {
                listener.enterEveryRule(this._ctx);
            }
            this._ctx.enterRule(listener);
        }
    }
    /**
     * Notify any parse listeners of an exit rule event.
     *
     * @see #addParseListener
     */
    triggerExitRuleEvent() {
        // reverse order walk of listeners
        for (let i = this._parseListeners.length - 1; i >= 0; i--) {
            let listener = this._parseListeners[i];
            this._ctx.exitRule(listener);
            if (listener.exitEveryRule) {
                listener.exitEveryRule(this._ctx);
            }
        }
    }
    /**
     * Gets the number of syntax errors reported during parsing. This value is
     * incremented each time {@link #notifyErrorListeners} is called.
     *
     * @see #notifyErrorListeners
     */
    get numberOfSyntaxErrors() {
        return this._syntaxErrors;
    }
    get tokenFactory() {
        return this._input.tokenSource.tokenFactory;
    }
    /**
     * The ATN with bypass alternatives is expensive to create so we create it
     * lazily.
     *
     * @ if the current parser does not
     * implement the `serializedATN` property.
     */
    getATNWithBypassAlts() {
        let serializedAtn = this.serializedATN;
        if (serializedAtn == null) {
            throw new Error("The current parser does not support an ATN with bypass alternatives.");
        }
        let result = Parser.bypassAltsAtnCache.get(serializedAtn);
        if (result == null) {
            let deserializationOptions = new ATNDeserializationOptions_1.ATNDeserializationOptions();
            deserializationOptions.isGenerateRuleBypassTransitions = true;
            result = new ATNDeserializer_1.ATNDeserializer(deserializationOptions).deserialize(Utils.toCharArray(serializedAtn));
            Parser.bypassAltsAtnCache.set(serializedAtn, result);
        }
        return result;
    }
    compileParseTreePattern(pattern, patternRuleIndex, lexer) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!lexer) {
                if (this.inputStream) {
                    let tokenSource = this.inputStream.tokenSource;
                    if (tokenSource instanceof Lexer_1.Lexer) {
                        lexer = tokenSource;
                    }
                }
                if (!lexer) {
                    throw new Error("Parser can't discover a lexer to use");
                }
            }
            let currentLexer = lexer;
            let m = yield Promise.resolve().then(() => __webpack_require__(7657));
            let matcher = new m.ParseTreePatternMatcher(currentLexer, this);
            return matcher.compile(pattern, patternRuleIndex);
        });
    }
    get errorHandler() {
        return this._errHandler;
    }
    set errorHandler(handler) {
        this._errHandler = handler;
    }
    get inputStream() {
        return this._input;
    }
    /** Set the token stream and reset the parser. */
    set inputStream(input) {
        this.reset(false);
        this._input = input;
    }
    /** Match needs to return the current input symbol, which gets put
     *  into the label for the associated token ref; e.g., x=ID.
     */
    get currentToken() {
        return this._input.LT(1);
    }
    notifyErrorListeners(msg, offendingToken, e) {
        if (offendingToken === undefined) {
            offendingToken = this.currentToken;
        }
        else if (offendingToken === null) {
            offendingToken = undefined;
        }
        this._syntaxErrors++;
        let line = -1;
        let charPositionInLine = -1;
        if (offendingToken != null) {
            line = offendingToken.line;
            charPositionInLine = offendingToken.charPositionInLine;
        }
        let listener = this.getErrorListenerDispatch();
        if (listener.syntaxError) {
            listener.syntaxError(this, offendingToken, line, charPositionInLine, msg, e);
        }
    }
    /**
     * Consume and return the [current symbol](`currentToken`).
     *
     * E.g., given the following input with `A` being the current
     * lookahead symbol, this function moves the cursor to `B` and returns
     * `A`.
     *
     * ```
     * A B
     * ^
     * ```
     *
     * If the parser is not in error recovery mode, the consumed symbol is added
     * to the parse tree using {@link ParserRuleContext#addChild(TerminalNode)}, and
     * {@link ParseTreeListener#visitTerminal} is called on any parse listeners.
     * If the parser *is* in error recovery mode, the consumed symbol is
     * added to the parse tree using {@link #createErrorNode(ParserRuleContext, Token)} then
     * {@link ParserRuleContext#addErrorNode(ErrorNode)} and
     * {@link ParseTreeListener#visitErrorNode} is called on any parse
     * listeners.
     */
    consume() {
        let o = this.currentToken;
        if (o.type !== Parser.EOF) {
            this.inputStream.consume();
        }
        let hasListener = this._parseListeners.length !== 0;
        if (this._buildParseTrees || hasListener) {
            if (this._errHandler.inErrorRecoveryMode(this)) {
                let node = this._ctx.addErrorNode(this.createErrorNode(this._ctx, o));
                if (hasListener) {
                    for (let listener of this._parseListeners) {
                        if (listener.visitErrorNode) {
                            listener.visitErrorNode(node);
                        }
                    }
                }
            }
            else {
                let node = this.createTerminalNode(this._ctx, o);
                this._ctx.addChild(node);
                if (hasListener) {
                    for (let listener of this._parseListeners) {
                        if (listener.visitTerminal) {
                            listener.visitTerminal(node);
                        }
                    }
                }
            }
        }
        return o;
    }
    /**
     * How to create a token leaf node associated with a parent.
     * Typically, the terminal node to create is not a function of the parent.
     *
     * @since 4.7
     */
    createTerminalNode(parent, t) {
        return new TerminalNode_1.TerminalNode(t);
    }
    /**
     * How to create an error node, given a token, associated with a parent.
     * Typically, the error node to create is not a function of the parent.
     *
     * @since 4.7
     */
    createErrorNode(parent, t) {
        return new ErrorNode_1.ErrorNode(t);
    }
    addContextToParseTree() {
        let parent = this._ctx._parent;
        // add current context to parent if we have a parent
        if (parent != null) {
            parent.addChild(this._ctx);
        }
    }
    /**
     * Always called by generated parsers upon entry to a rule. Access field
     * {@link #_ctx} get the current context.
     */
    enterRule(localctx, state, ruleIndex) {
        this.state = state;
        this._ctx = localctx;
        this._ctx._start = this._input.LT(1);
        if (this._buildParseTrees) {
            this.addContextToParseTree();
        }
        this.triggerEnterRuleEvent();
    }
    enterLeftFactoredRule(localctx, state, ruleIndex) {
        this.state = state;
        if (this._buildParseTrees) {
            let factoredContext = this._ctx.getChild(this._ctx.childCount - 1);
            this._ctx.removeLastChild();
            factoredContext._parent = localctx;
            localctx.addChild(factoredContext);
        }
        this._ctx = localctx;
        this._ctx._start = this._input.LT(1);
        if (this._buildParseTrees) {
            this.addContextToParseTree();
        }
        this.triggerEnterRuleEvent();
    }
    exitRule() {
        if (this.matchedEOF) {
            // if we have matched EOF, it cannot consume past EOF so we use LT(1) here
            this._ctx._stop = this._input.LT(1); // LT(1) will be end of file
        }
        else {
            this._ctx._stop = this._input.tryLT(-1); // stop node is what we just matched
        }
        // trigger event on _ctx, before it reverts to parent
        this.triggerExitRuleEvent();
        this.state = this._ctx.invokingState;
        this._ctx = this._ctx._parent;
    }
    enterOuterAlt(localctx, altNum) {
        localctx.altNumber = altNum;
        // if we have new localctx, make sure we replace existing ctx
        // that is previous child of parse tree
        if (this._buildParseTrees && this._ctx !== localctx) {
            let parent = this._ctx._parent;
            if (parent != null) {
                parent.removeLastChild();
                parent.addChild(localctx);
            }
        }
        this._ctx = localctx;
    }
    /**
     * Get the precedence level for the top-most precedence rule.
     *
     * @returns The precedence level for the top-most precedence rule, or -1 if
     * the parser context is not nested within a precedence rule.
     */
    get precedence() {
        if (this._precedenceStack.isEmpty) {
            return -1;
        }
        return this._precedenceStack.peek();
    }
    enterRecursionRule(localctx, state, ruleIndex, precedence) {
        this.state = state;
        this._precedenceStack.push(precedence);
        this._ctx = localctx;
        this._ctx._start = this._input.LT(1);
        this.triggerEnterRuleEvent(); // simulates rule entry for left-recursive rules
    }
    /** Like {@link #enterRule} but for recursive rules.
     *  Make the current context the child of the incoming localctx.
     */
    pushNewRecursionContext(localctx, state, ruleIndex) {
        let previous = this._ctx;
        previous._parent = localctx;
        previous.invokingState = state;
        previous._stop = this._input.tryLT(-1);
        this._ctx = localctx;
        this._ctx._start = previous._start;
        if (this._buildParseTrees) {
            this._ctx.addChild(previous);
        }
        this.triggerEnterRuleEvent(); // simulates rule entry for left-recursive rules
    }
    unrollRecursionContexts(_parentctx) {
        this._precedenceStack.pop();
        this._ctx._stop = this._input.tryLT(-1);
        let retctx = this._ctx; // save current ctx (return value)
        // unroll so _ctx is as it was before call to recursive method
        if (this._parseListeners.length > 0) {
            while (this._ctx !== _parentctx) {
                this.triggerExitRuleEvent();
                this._ctx = this._ctx._parent;
            }
        }
        else {
            this._ctx = _parentctx;
        }
        // hook into tree
        retctx._parent = _parentctx;
        if (this._buildParseTrees && _parentctx != null) {
            // add return ctx into invoking rule's tree
            _parentctx.addChild(retctx);
        }
    }
    getInvokingContext(ruleIndex) {
        let p = this._ctx;
        while (p && p.ruleIndex !== ruleIndex) {
            p = p._parent;
        }
        return p;
    }
    get context() {
        return this._ctx;
    }
    set context(ctx) {
        this._ctx = ctx;
    }
    precpred(localctx, precedence) {
        return precedence >= this._precedenceStack.peek();
    }
    getErrorListenerDispatch() {
        return new ProxyParserErrorListener_1.ProxyParserErrorListener(this.getErrorListeners());
    }
    inContext(context) {
        // TODO: useful in parser?
        return false;
    }
    /**
     * Checks whether or not `symbol` can follow the current state in the
     * ATN. The behavior of this method is equivalent to the following, but is
     * implemented such that the complete context-sensitive follow set does not
     * need to be explicitly constructed.
     *
     * ```
     * return getExpectedTokens().contains(symbol);
     * ```
     *
     * @param symbol the symbol type to check
     * @returns `true` if `symbol` can follow the current state in
     * the ATN, otherwise `false`.
     */
    isExpectedToken(symbol) {
        //   		return interpreter.atn.nextTokens(_ctx);
        let atn = this.interpreter.atn;
        let ctx = this._ctx;
        let s = atn.states[this.state];
        let following = atn.nextTokens(s);
        if (following.contains(symbol)) {
            return true;
        }
        //        System.out.println("following "+s+"="+following);
        if (!following.contains(Token_1.Token.EPSILON)) {
            return false;
        }
        while (ctx != null && ctx.invokingState >= 0 && following.contains(Token_1.Token.EPSILON)) {
            let invokingState = atn.states[ctx.invokingState];
            let rt = invokingState.transition(0);
            following = atn.nextTokens(rt.followState);
            if (following.contains(symbol)) {
                return true;
            }
            ctx = ctx._parent;
        }
        if (following.contains(Token_1.Token.EPSILON) && symbol === Token_1.Token.EOF) {
            return true;
        }
        return false;
    }
    get isMatchedEOF() {
        return this.matchedEOF;
    }
    /**
     * Computes the set of input symbols which could follow the current parser
     * state and context, as given by {@link #getState} and {@link #getContext},
     * respectively.
     *
     * @see ATN#getExpectedTokens(int, RuleContext)
     */
    getExpectedTokens() {
        return this.atn.getExpectedTokens(this.state, this.context);
    }
    getExpectedTokensWithinCurrentRule() {
        let atn = this.interpreter.atn;
        let s = atn.states[this.state];
        return atn.nextTokens(s);
    }
    /** Get a rule's index (i.e., `RULE_ruleName` field) or -1 if not found. */
    getRuleIndex(ruleName) {
        let ruleIndex = this.getRuleIndexMap().get(ruleName);
        if (ruleIndex != null) {
            return ruleIndex;
        }
        return -1;
    }
    get ruleContext() { return this._ctx; }
    /** Return List&lt;String&gt; of the rule names in your parser instance
     *  leading up to a call to the current rule.  You could override if
     *  you want more details such as the file/line info of where
     *  in the ATN a rule is invoked.
     *
     *  This is very useful for error messages.
     */
    getRuleInvocationStack(ctx = this._ctx) {
        let p = ctx; // Workaround for Microsoft/TypeScript#14487
        let ruleNames = this.ruleNames;
        let stack = [];
        while (p != null) {
            // compute what follows who invoked us
            let ruleIndex = p.ruleIndex;
            if (ruleIndex < 0) {
                stack.push("n/a");
            }
            else {
                stack.push(ruleNames[ruleIndex]);
            }
            p = p._parent;
        }
        return stack;
    }
    /** For debugging and other purposes. */
    getDFAStrings() {
        let s = [];
        for (let dfa of this._interp.atn.decisionToDFA) {
            s.push(dfa.toString(this.vocabulary, this.ruleNames));
        }
        return s;
    }
    /** For debugging and other purposes. */
    dumpDFA() {
        let seenOne = false;
        for (let dfa of this._interp.atn.decisionToDFA) {
            if (!dfa.isEmpty) {
                if (seenOne) {
                    console.log();
                }
                console.log("Decision " + dfa.decision + ":");
                process.stdout.write(dfa.toString(this.vocabulary, this.ruleNames));
                seenOne = true;
            }
        }
    }
    get sourceName() {
        return this._input.sourceName;
    }
    get parseInfo() {
        return Promise.resolve().then(() => __webpack_require__(9696)).then((m) => {
            let interp = this.interpreter;
            if (interp instanceof m.ProfilingATNSimulator) {
                return new ParseInfo_1.ParseInfo(interp);
            }
            return undefined;
        });
    }
    /**
     * @since 4.3
     */
    setProfile(profile) {
        return __awaiter(this, void 0, void 0, function* () {
            let m = yield Promise.resolve().then(() => __webpack_require__(9696));
            let interp = this.interpreter;
            if (profile) {
                if (!(interp instanceof m.ProfilingATNSimulator)) {
                    this.interpreter = new m.ProfilingATNSimulator(this);
                }
            }
            else if (interp instanceof m.ProfilingATNSimulator) {
                this.interpreter = new ParserATNSimulator_1.ParserATNSimulator(this.atn, this);
            }
            this.interpreter.setPredictionMode(interp.getPredictionMode());
        });
    }
    /** During a parse is sometimes useful to listen in on the rule entry and exit
     *  events as well as token matches. This is for quick and dirty debugging.
     */
    set isTrace(trace) {
        if (!trace) {
            if (this._tracer) {
                this.removeParseListener(this._tracer);
                this._tracer = undefined;
            }
        }
        else {
            if (this._tracer) {
                this.removeParseListener(this._tracer);
            }
            else {
                this._tracer = new TraceListener(this.ruleNames, this._input);
            }
            this.addParseListener(this._tracer);
        }
    }
    /**
     * Gets whether a {@link TraceListener} is registered as a parse listener
     * for the parser.
     */
    get isTrace() {
        return this._tracer != null;
    }
}
/**
 * This field maps from the serialized ATN string to the deserialized {@link ATN} with
 * bypass alternatives.
 *
 * @see ATNDeserializationOptions.isGenerateRuleBypassTransitions
 */
Parser.bypassAltsAtnCache = new Map();
__decorate([
    Decorators_1.NotNull
], Parser.prototype, "_errHandler", void 0);
__decorate([
    Decorators_1.NotNull
], Parser.prototype, "match", null);
__decorate([
    Decorators_1.NotNull
], Parser.prototype, "matchWildcard", null);
__decorate([
    Decorators_1.NotNull
], Parser.prototype, "getParseListeners", null);
__decorate([
    __param(0, Decorators_1.NotNull)
], Parser.prototype, "addParseListener", null);
__decorate([
    Decorators_1.NotNull
], Parser.prototype, "getATNWithBypassAlts", null);
__decorate([
    Decorators_1.NotNull,
    __param(0, Decorators_1.NotNull)
], Parser.prototype, "errorHandler", null);
__decorate([
    Decorators_1.Override
], Parser.prototype, "inputStream", null);
__decorate([
    Decorators_1.NotNull
], Parser.prototype, "currentToken", null);
__decorate([
    __param(0, Decorators_1.NotNull)
], Parser.prototype, "enterRule", null);
__decorate([
    Decorators_1.Override,
    __param(0, Decorators_1.Nullable)
], Parser.prototype, "precpred", null);
__decorate([
    Decorators_1.Override
], Parser.prototype, "getErrorListenerDispatch", null);
__decorate([
    Decorators_1.NotNull
], Parser.prototype, "getExpectedTokens", null);
__decorate([
    Decorators_1.NotNull
], Parser.prototype, "getExpectedTokensWithinCurrentRule", null);
__decorate([
    Decorators_1.Override
], Parser.prototype, "parseInfo", null);
exports.Parser = Parser;
//# sourceMappingURL=Parser.js.map

/***/ }),

/***/ 9463:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
Object.defineProperty(exports, "__esModule", ({ value: true }));
//# sourceMappingURL=ParserErrorListener.js.map

/***/ }),

/***/ 2676:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ParserInterpreter = void 0;
const ATNState_1 = __webpack_require__(1971);
const ATNStateType_1 = __webpack_require__(9602);
const BitSet_1 = __webpack_require__(3300);
const FailedPredicateException_1 = __webpack_require__(1103);
const InputMismatchException_1 = __webpack_require__(7432);
const InterpreterRuleContext_1 = __webpack_require__(9725);
const LoopEndState_1 = __webpack_require__(29);
const Decorators_1 = __webpack_require__(681);
const Decorators_2 = __webpack_require__(681);
const Parser_1 = __webpack_require__(3679);
const ParserATNSimulator_1 = __webpack_require__(4217);
const RecognitionException_1 = __webpack_require__(1100);
const StarLoopEntryState_1 = __webpack_require__(4816);
const Token_1 = __webpack_require__(8999);
/** A parser simulator that mimics what ANTLR's generated
 *  parser code does. A ParserATNSimulator is used to make
 *  predictions via adaptivePredict but this class moves a pointer through the
 *  ATN to simulate parsing. ParserATNSimulator just
 *  makes us efficient rather than having to backtrack, for example.
 *
 *  This properly creates parse trees even for left recursive rules.
 *
 *  We rely on the left recursive rule invocation and special predicate
 *  transitions to make left recursive rules work.
 *
 *  See TestParserInterpreter for examples.
 */
let ParserInterpreter = class ParserInterpreter extends Parser_1.Parser {
    constructor(grammarFileName, vocabulary, ruleNames, atn, input) {
        super(grammarFileName instanceof ParserInterpreter ? grammarFileName.inputStream : input);
        /** This stack corresponds to the _parentctx, _parentState pair of locals
         *  that would exist on call stack frames with a recursive descent parser;
         *  in the generated function for a left-recursive rule you'd see:
         *
         *  private EContext e(int _p) {
         *      ParserRuleContext _parentctx = _ctx;    // Pair.a
         *      int _parentState = state;          // Pair.b
         *      ...
         *  }
         *
         *  Those values are used to create new recursive rule invocation contexts
         *  associated with left operand of an alt like "expr '*' expr".
         */
        this._parentContextStack = [];
        /** We need a map from (decision,inputIndex)->forced alt for computing ambiguous
         *  parse trees. For now, we allow exactly one override.
         */
        this.overrideDecision = -1;
        this.overrideDecisionInputIndex = -1;
        this.overrideDecisionAlt = -1;
        this.overrideDecisionReached = false; // latch and only override once; error might trigger infinite loop
        /** What is the current context when we override a decisions?  This tells
         *  us what the root of the parse tree is when using override
         *  for an ambiguity/lookahead check.
         */
        this._overrideDecisionRoot = undefined;
        if (grammarFileName instanceof ParserInterpreter) {
            let old = grammarFileName;
            this._grammarFileName = old._grammarFileName;
            this._atn = old._atn;
            this.pushRecursionContextStates = old.pushRecursionContextStates;
            this._ruleNames = old._ruleNames;
            this._vocabulary = old._vocabulary;
            this.interpreter = new ParserATNSimulator_1.ParserATNSimulator(this._atn, this);
        }
        else {
            // The second constructor requires non-null arguments
            vocabulary = vocabulary;
            ruleNames = ruleNames;
            atn = atn;
            this._grammarFileName = grammarFileName;
            this._atn = atn;
            this._ruleNames = ruleNames.slice(0);
            this._vocabulary = vocabulary;
            // identify the ATN states where pushNewRecursionContext() must be called
            this.pushRecursionContextStates = new BitSet_1.BitSet(atn.states.length);
            for (let state of atn.states) {
                if (!(state instanceof StarLoopEntryState_1.StarLoopEntryState)) {
                    continue;
                }
                if (state.precedenceRuleDecision) {
                    this.pushRecursionContextStates.set(state.stateNumber);
                }
            }
            // get atn simulator that knows how to do predictions
            this.interpreter = new ParserATNSimulator_1.ParserATNSimulator(atn, this);
        }
    }
    reset(resetInput) {
        if (resetInput === undefined) {
            super.reset();
        }
        else {
            super.reset(resetInput);
        }
        this.overrideDecisionReached = false;
        this._overrideDecisionRoot = undefined;
    }
    get atn() {
        return this._atn;
    }
    get vocabulary() {
        return this._vocabulary;
    }
    get ruleNames() {
        return this._ruleNames;
    }
    get grammarFileName() {
        return this._grammarFileName;
    }
    /** Begin parsing at startRuleIndex */
    parse(startRuleIndex) {
        let startRuleStartState = this._atn.ruleToStartState[startRuleIndex];
        this._rootContext = this.createInterpreterRuleContext(undefined, ATNState_1.ATNState.INVALID_STATE_NUMBER, startRuleIndex);
        if (startRuleStartState.isPrecedenceRule) {
            this.enterRecursionRule(this._rootContext, startRuleStartState.stateNumber, startRuleIndex, 0);
        }
        else {
            this.enterRule(this._rootContext, startRuleStartState.stateNumber, startRuleIndex);
        }
        while (true) {
            let p = this.atnState;
            switch (p.stateType) {
                case ATNStateType_1.ATNStateType.RULE_STOP:
                    // pop; return from rule
                    if (this._ctx.isEmpty) {
                        if (startRuleStartState.isPrecedenceRule) {
                            let result = this._ctx;
                            let parentContext = this._parentContextStack.pop();
                            this.unrollRecursionContexts(parentContext[0]);
                            return result;
                        }
                        else {
                            this.exitRule();
                            return this._rootContext;
                        }
                    }
                    this.visitRuleStopState(p);
                    break;
                default:
                    try {
                        this.visitState(p);
                    }
                    catch (e) {
                        if (e instanceof RecognitionException_1.RecognitionException) {
                            this.state = this._atn.ruleToStopState[p.ruleIndex].stateNumber;
                            this.context.exception = e;
                            this.errorHandler.reportError(this, e);
                            this.recover(e);
                        }
                        else {
                            throw e;
                        }
                    }
                    break;
            }
        }
    }
    enterRecursionRule(localctx, state, ruleIndex, precedence) {
        this._parentContextStack.push([this._ctx, localctx.invokingState]);
        super.enterRecursionRule(localctx, state, ruleIndex, precedence);
    }
    get atnState() {
        return this._atn.states[this.state];
    }
    visitState(p) {
        let predictedAlt = 1;
        if (p.numberOfTransitions > 1) {
            predictedAlt = this.visitDecisionState(p);
        }
        let transition = p.transition(predictedAlt - 1);
        switch (transition.serializationType) {
            case 1 /* EPSILON */:
                if (this.pushRecursionContextStates.get(p.stateNumber) &&
                    !(transition.target instanceof LoopEndState_1.LoopEndState)) {
                    // We are at the start of a left recursive rule's (...)* loop
                    // and we're not taking the exit branch of loop.
                    let parentContext = this._parentContextStack[this._parentContextStack.length - 1];
                    let localctx = this.createInterpreterRuleContext(parentContext[0], parentContext[1], this._ctx.ruleIndex);
                    this.pushNewRecursionContext(localctx, this._atn.ruleToStartState[p.ruleIndex].stateNumber, this._ctx.ruleIndex);
                }
                break;
            case 5 /* ATOM */:
                this.match(transition._label);
                break;
            case 2 /* RANGE */:
            case 7 /* SET */:
            case 8 /* NOT_SET */:
                if (!transition.matches(this._input.LA(1), Token_1.Token.MIN_USER_TOKEN_TYPE, 65535)) {
                    this.recoverInline();
                }
                this.matchWildcard();
                break;
            case 9 /* WILDCARD */:
                this.matchWildcard();
                break;
            case 3 /* RULE */:
                let ruleStartState = transition.target;
                let ruleIndex = ruleStartState.ruleIndex;
                let newctx = this.createInterpreterRuleContext(this._ctx, p.stateNumber, ruleIndex);
                if (ruleStartState.isPrecedenceRule) {
                    this.enterRecursionRule(newctx, ruleStartState.stateNumber, ruleIndex, transition.precedence);
                }
                else {
                    this.enterRule(newctx, transition.target.stateNumber, ruleIndex);
                }
                break;
            case 4 /* PREDICATE */:
                let predicateTransition = transition;
                if (!this.sempred(this._ctx, predicateTransition.ruleIndex, predicateTransition.predIndex)) {
                    throw new FailedPredicateException_1.FailedPredicateException(this);
                }
                break;
            case 6 /* ACTION */:
                let actionTransition = transition;
                this.action(this._ctx, actionTransition.ruleIndex, actionTransition.actionIndex);
                break;
            case 10 /* PRECEDENCE */:
                if (!this.precpred(this._ctx, transition.precedence)) {
                    let precedence = transition.precedence;
                    throw new FailedPredicateException_1.FailedPredicateException(this, `precpred(_ctx, ${precedence})`);
                }
                break;
            default:
                throw new Error("UnsupportedOperationException: Unrecognized ATN transition type.");
        }
        this.state = transition.target.stateNumber;
    }
    /** Method visitDecisionState() is called when the interpreter reaches
     *  a decision state (instance of DecisionState). It gives an opportunity
     *  for subclasses to track interesting things.
     */
    visitDecisionState(p) {
        let predictedAlt;
        this.errorHandler.sync(this);
        let decision = p.decision;
        if (decision === this.overrideDecision && this._input.index === this.overrideDecisionInputIndex && !this.overrideDecisionReached) {
            predictedAlt = this.overrideDecisionAlt;
            this.overrideDecisionReached = true;
        }
        else {
            predictedAlt = this.interpreter.adaptivePredict(this._input, decision, this._ctx);
        }
        return predictedAlt;
    }
    /** Provide simple "factory" for InterpreterRuleContext's.
     *  @since 4.5.1
     */
    createInterpreterRuleContext(parent, invokingStateNumber, ruleIndex) {
        return new InterpreterRuleContext_1.InterpreterRuleContext(ruleIndex, parent, invokingStateNumber);
    }
    visitRuleStopState(p) {
        let ruleStartState = this._atn.ruleToStartState[p.ruleIndex];
        if (ruleStartState.isPrecedenceRule) {
            let parentContext = this._parentContextStack.pop();
            this.unrollRecursionContexts(parentContext[0]);
            this.state = parentContext[1];
        }
        else {
            this.exitRule();
        }
        let ruleTransition = this._atn.states[this.state].transition(0);
        this.state = ruleTransition.followState.stateNumber;
    }
    /** Override this parser interpreters normal decision-making process
     *  at a particular decision and input token index. Instead of
     *  allowing the adaptive prediction mechanism to choose the
     *  first alternative within a block that leads to a successful parse,
     *  force it to take the alternative, 1..n for n alternatives.
     *
     *  As an implementation limitation right now, you can only specify one
     *  override. This is sufficient to allow construction of different
     *  parse trees for ambiguous input. It means re-parsing the entire input
     *  in general because you're never sure where an ambiguous sequence would
     *  live in the various parse trees. For example, in one interpretation,
     *  an ambiguous input sequence would be matched completely in expression
     *  but in another it could match all the way back to the root.
     *
     *  s : e '!'? ;
     *  e : ID
     *    | ID '!'
     *    ;
     *
     *  Here, x! can be matched as (s (e ID) !) or (s (e ID !)). In the first
     *  case, the ambiguous sequence is fully contained only by the root.
     *  In the second case, the ambiguous sequences fully contained within just
     *  e, as in: (e ID !).
     *
     *  Rather than trying to optimize this and make
     *  some intelligent decisions for optimization purposes, I settled on
     *  just re-parsing the whole input and then using
     *  {link Trees#getRootOfSubtreeEnclosingRegion} to find the minimal
     *  subtree that contains the ambiguous sequence. I originally tried to
     *  record the call stack at the point the parser detected and ambiguity but
     *  left recursive rules create a parse tree stack that does not reflect
     *  the actual call stack. That impedance mismatch was enough to make
     *  it it challenging to restart the parser at a deeply nested rule
     *  invocation.
     *
     *  Only parser interpreters can override decisions so as to avoid inserting
     *  override checking code in the critical ALL(*) prediction execution path.
     *
     *  @since 4.5
     */
    addDecisionOverride(decision, tokenIndex, forcedAlt) {
        this.overrideDecision = decision;
        this.overrideDecisionInputIndex = tokenIndex;
        this.overrideDecisionAlt = forcedAlt;
    }
    get overrideDecisionRoot() {
        return this._overrideDecisionRoot;
    }
    /** Rely on the error handler for this parser but, if no tokens are consumed
     *  to recover, add an error node. Otherwise, nothing is seen in the parse
     *  tree.
     */
    recover(e) {
        let i = this._input.index;
        this.errorHandler.recover(this, e);
        if (this._input.index === i) {
            // no input consumed, better add an error node
            let tok = e.getOffendingToken();
            if (!tok) {
                throw new Error("Expected exception to have an offending token");
            }
            let source = tok.tokenSource;
            let stream = source !== undefined ? source.inputStream : undefined;
            let sourcePair = { source, stream };
            if (e instanceof InputMismatchException_1.InputMismatchException) {
                let expectedTokens = e.expectedTokens;
                if (expectedTokens === undefined) {
                    throw new Error("Expected the exception to provide expected tokens");
                }
                let expectedTokenType = Token_1.Token.INVALID_TYPE;
                if (!expectedTokens.isNil) {
                    // get any element
                    expectedTokenType = expectedTokens.minElement;
                }
                let errToken = this.tokenFactory.create(sourcePair, expectedTokenType, tok.text, Token_1.Token.DEFAULT_CHANNEL, -1, -1, // invalid start/stop
                tok.line, tok.charPositionInLine);
                this._ctx.addErrorNode(this.createErrorNode(this._ctx, errToken));
            }
            else { // NoViableAlt
                let source = tok.tokenSource;
                let errToken = this.tokenFactory.create(sourcePair, Token_1.Token.INVALID_TYPE, tok.text, Token_1.Token.DEFAULT_CHANNEL, -1, -1, // invalid start/stop
                tok.line, tok.charPositionInLine);
                this._ctx.addErrorNode(this.createErrorNode(this._ctx, errToken));
            }
        }
    }
    recoverInline() {
        return this._errHandler.recoverInline(this);
    }
    /** Return the root of the parse, which can be useful if the parser
     *  bails out. You still can access the top node. Note that,
     *  because of the way left recursive rules add children, it's possible
     *  that the root will not have any children if the start rule immediately
     *  called and left recursive rule that fails.
     *
     * @since 4.5.1
     */
    get rootContext() {
        return this._rootContext;
    }
};
__decorate([
    Decorators_1.NotNull
], ParserInterpreter.prototype, "_vocabulary", void 0);
__decorate([
    Decorators_2.Override
], ParserInterpreter.prototype, "reset", null);
__decorate([
    Decorators_2.Override
], ParserInterpreter.prototype, "atn", null);
__decorate([
    Decorators_2.Override
], ParserInterpreter.prototype, "vocabulary", null);
__decorate([
    Decorators_2.Override
], ParserInterpreter.prototype, "ruleNames", null);
__decorate([
    Decorators_2.Override
], ParserInterpreter.prototype, "grammarFileName", null);
__decorate([
    Decorators_2.Override
], ParserInterpreter.prototype, "enterRecursionRule", null);
ParserInterpreter = __decorate([
    __param(1, Decorators_1.NotNull)
], ParserInterpreter);
exports.ParserInterpreter = ParserInterpreter;
//# sourceMappingURL=ParserInterpreter.js.map

/***/ }),

/***/ 9248:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ParserRuleContext = void 0;
// ConvertTo-TS run at 2016-10-04T11:26:56.6285494-07:00
const ErrorNode_1 = __webpack_require__(135);
const Interval_1 = __webpack_require__(4378);
const Decorators_1 = __webpack_require__(681);
const RuleContext_1 = __webpack_require__(4224);
const TerminalNode_1 = __webpack_require__(9466);
/** A rule invocation record for parsing.
 *
 *  Contains all of the information about the current rule not stored in the
 *  RuleContext. It handles parse tree children list, Any ATN state
 *  tracing, and the default values available for rule invocations:
 *  start, stop, rule index, current alt number.
 *
 *  Subclasses made for each rule and grammar track the parameters,
 *  return values, locals, and labels specific to that rule. These
 *  are the objects that are returned from rules.
 *
 *  Note text is not an actual field of a rule return value; it is computed
 *  from start and stop using the input stream's toString() method.  I
 *  could add a ctor to this so that we can pass in and store the input
 *  stream, but I'm not sure we want to do that.  It would seem to be undefined
 *  to get the .text property anyway if the rule matches tokens from multiple
 *  input streams.
 *
 *  I do not use getters for fields of objects that are used simply to
 *  group values such as this aggregate.  The getters/setters are there to
 *  satisfy the superclass interface.
 */
class ParserRuleContext extends RuleContext_1.RuleContext {
    constructor(parent, invokingStateNumber) {
        if (invokingStateNumber == null) {
            super();
        }
        else {
            super(parent, invokingStateNumber);
        }
    }
    static emptyContext() {
        return ParserRuleContext.EMPTY;
    }
    /**
     * COPY a ctx (I'm deliberately not using copy constructor) to avoid
     * confusion with creating node with parent. Does not copy children
     * (except error leaves).
     *
     * This is used in the generated parser code to flip a generic XContext
     * node for rule X to a YContext for alt label Y. In that sense, it is not
     * really a generic copy function.
     *
     * If we do an error sync() at start of a rule, we might add error nodes
     * to the generic XContext so this function must copy those nodes to the
     * YContext as well else they are lost!
     */
    copyFrom(ctx) {
        this._parent = ctx._parent;
        this.invokingState = ctx.invokingState;
        this._start = ctx._start;
        this._stop = ctx._stop;
        // copy any error nodes to alt label node
        if (ctx.children) {
            this.children = [];
            // reset parent pointer for any error nodes
            for (let child of ctx.children) {
                if (child instanceof ErrorNode_1.ErrorNode) {
                    this.addChild(child);
                }
            }
        }
    }
    // Double dispatch methods for listeners
    enterRule(listener) {
        // intentionally empty
    }
    exitRule(listener) {
        // intentionally empty
    }
    /** Add a parse tree node to this as a child.  Works for
     *  internal and leaf nodes. Does not set parent link;
     *  other add methods must do that. Other addChild methods
     *  call this.
     *
     *  We cannot set the parent pointer of the incoming node
     *  because the existing interfaces do not have a setParent()
     *  method and I don't want to break backward compatibility for this.
     *
     *  @since 4.7
     */
    addAnyChild(t) {
        if (!this.children) {
            this.children = [t];
        }
        else {
            this.children.push(t);
        }
        return t;
    }
    addChild(t) {
        let result;
        if (t instanceof TerminalNode_1.TerminalNode) {
            t.setParent(this);
            this.addAnyChild(t);
            return;
        }
        else if (t instanceof RuleContext_1.RuleContext) {
            // Does not set parent link
            this.addAnyChild(t);
            return;
        }
        else {
            // Deprecated code path
            t = new TerminalNode_1.TerminalNode(t);
            this.addAnyChild(t);
            t.setParent(this);
            return t;
        }
    }
    addErrorNode(node) {
        if (node instanceof ErrorNode_1.ErrorNode) {
            const errorNode = node;
            errorNode.setParent(this);
            return this.addAnyChild(errorNode);
        }
        else {
            // deprecated path
            const badToken = node;
            let t = new ErrorNode_1.ErrorNode(badToken);
            this.addAnyChild(t);
            t.setParent(this);
            return t;
        }
    }
    //	public void trace(int s) {
    //		if ( states==null ) states = new ArrayList<Integer>();
    //		states.add(s);
    //	}
    /** Used by enterOuterAlt to toss out a RuleContext previously added as
     *  we entered a rule. If we have # label, we will need to remove
     *  generic ruleContext object.
     */
    removeLastChild() {
        if (this.children) {
            this.children.pop();
        }
    }
    get parent() {
        let parent = super.parent;
        if (parent === undefined || parent instanceof ParserRuleContext) {
            return parent;
        }
        throw new TypeError("Invalid parent type for ParserRuleContext");
    }
    // Note: in TypeScript, order or arguments reversed
    getChild(i, ctxType) {
        if (!this.children || i < 0 || i >= this.children.length) {
            throw new RangeError("index parameter must be between >= 0 and <= number of children.");
        }
        if (ctxType == null) {
            return this.children[i];
        }
        let result = this.tryGetChild(i, ctxType);
        if (result === undefined) {
            throw new Error("The specified node does not exist");
        }
        return result;
    }
    tryGetChild(i, ctxType) {
        if (!this.children || i < 0 || i >= this.children.length) {
            return undefined;
        }
        let j = -1; // what node with ctxType have we found?
        for (let o of this.children) {
            if (o instanceof ctxType) {
                j++;
                if (j === i) {
                    return o;
                }
            }
        }
        return undefined;
    }
    getToken(ttype, i) {
        let result = this.tryGetToken(ttype, i);
        if (result === undefined) {
            throw new Error("The specified token does not exist");
        }
        return result;
    }
    tryGetToken(ttype, i) {
        if (!this.children || i < 0 || i >= this.children.length) {
            return undefined;
        }
        let j = -1; // what token with ttype have we found?
        for (let o of this.children) {
            if (o instanceof TerminalNode_1.TerminalNode) {
                let symbol = o.symbol;
                if (symbol.type === ttype) {
                    j++;
                    if (j === i) {
                        return o;
                    }
                }
            }
        }
        return undefined;
    }
    getTokens(ttype) {
        let tokens = [];
        if (!this.children) {
            return tokens;
        }
        for (let o of this.children) {
            if (o instanceof TerminalNode_1.TerminalNode) {
                let symbol = o.symbol;
                if (symbol.type === ttype) {
                    tokens.push(o);
                }
            }
        }
        return tokens;
    }
    get ruleContext() {
        return this;
    }
    // NOTE: argument order change from Java version
    getRuleContext(i, ctxType) {
        return this.getChild(i, ctxType);
    }
    tryGetRuleContext(i, ctxType) {
        return this.tryGetChild(i, ctxType);
    }
    getRuleContexts(ctxType) {
        let contexts = [];
        if (!this.children) {
            return contexts;
        }
        for (let o of this.children) {
            if (o instanceof ctxType) {
                contexts.push(o);
            }
        }
        return contexts;
    }
    get childCount() {
        return this.children ? this.children.length : 0;
    }
    get sourceInterval() {
        if (!this._start) {
            return Interval_1.Interval.INVALID;
        }
        if (!this._stop || this._stop.tokenIndex < this._start.tokenIndex) {
            return Interval_1.Interval.of(this._start.tokenIndex, this._start.tokenIndex - 1); // empty
        }
        return Interval_1.Interval.of(this._start.tokenIndex, this._stop.tokenIndex);
    }
    /**
     * Get the initial token in this context.
     * Note that the range from start to stop is inclusive, so for rules that do not consume anything
     * (for example, zero length or error productions) this token may exceed stop.
     */
    get start() { return this._start; }
    /**
     * Get the final token in this context.
     * Note that the range from start to stop is inclusive, so for rules that do not consume anything
     * (for example, zero length or error productions) this token may precede start.
     */
    get stop() { return this._stop; }
    /** Used for rule context info debugging during parse-time, not so much for ATN debugging */
    toInfoString(recognizer) {
        let rules = recognizer.getRuleInvocationStack(this).reverse();
        return "ParserRuleContext" + rules + "{" +
            "start=" + this._start +
            ", stop=" + this._stop +
            "}";
    }
}
ParserRuleContext.EMPTY = new ParserRuleContext();
__decorate([
    Decorators_1.Override
], ParserRuleContext.prototype, "parent", null);
__decorate([
    Decorators_1.Override
], ParserRuleContext.prototype, "childCount", null);
__decorate([
    Decorators_1.Override
], ParserRuleContext.prototype, "sourceInterval", null);
exports.ParserRuleContext = ParserRuleContext;
//# sourceMappingURL=ParserRuleContext.js.map

/***/ }),

/***/ 7751:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ProxyErrorListener = void 0;
const Decorators_1 = __webpack_require__(681);
/**
 * This implementation of {@link ANTLRErrorListener} dispatches all calls to a
 * collection of delegate listeners. This reduces the effort required to support multiple
 * listeners.
 *
 * @author Sam Harwell
 */
class ProxyErrorListener {
    constructor(delegates) {
        this.delegates = delegates;
        if (!delegates) {
            throw new Error("Invalid delegates");
        }
    }
    getDelegates() {
        return this.delegates;
    }
    syntaxError(recognizer, offendingSymbol, line, charPositionInLine, msg, e) {
        this.delegates.forEach((listener) => {
            if (listener.syntaxError) {
                listener.syntaxError(recognizer, offendingSymbol, line, charPositionInLine, msg, e);
            }
        });
    }
}
__decorate([
    Decorators_1.Override,
    __param(0, Decorators_1.NotNull),
    __param(4, Decorators_1.NotNull)
], ProxyErrorListener.prototype, "syntaxError", null);
exports.ProxyErrorListener = ProxyErrorListener;
//# sourceMappingURL=ProxyErrorListener.js.map

/***/ }),

/***/ 4075:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ProxyParserErrorListener = void 0;
const ProxyErrorListener_1 = __webpack_require__(7751);
const Decorators_1 = __webpack_require__(681);
/**
 * @author Sam Harwell
 */
class ProxyParserErrorListener extends ProxyErrorListener_1.ProxyErrorListener {
    constructor(delegates) {
        super(delegates);
    }
    reportAmbiguity(recognizer, dfa, startIndex, stopIndex, exact, ambigAlts, configs) {
        this.getDelegates()
            .forEach((listener) => {
            if (listener.reportAmbiguity) {
                listener.reportAmbiguity(recognizer, dfa, startIndex, stopIndex, exact, ambigAlts, configs);
            }
        });
    }
    reportAttemptingFullContext(recognizer, dfa, startIndex, stopIndex, conflictingAlts, conflictState) {
        this.getDelegates()
            .forEach((listener) => {
            if (listener.reportAttemptingFullContext) {
                listener.reportAttemptingFullContext(recognizer, dfa, startIndex, stopIndex, conflictingAlts, conflictState);
            }
        });
    }
    reportContextSensitivity(recognizer, dfa, startIndex, stopIndex, prediction, acceptState) {
        this.getDelegates()
            .forEach((listener) => {
            if (listener.reportContextSensitivity) {
                listener.reportContextSensitivity(recognizer, dfa, startIndex, stopIndex, prediction, acceptState);
            }
        });
    }
}
__decorate([
    Decorators_1.Override
], ProxyParserErrorListener.prototype, "reportAmbiguity", null);
__decorate([
    Decorators_1.Override
], ProxyParserErrorListener.prototype, "reportAttemptingFullContext", null);
__decorate([
    Decorators_1.Override
], ProxyParserErrorListener.prototype, "reportContextSensitivity", null);
exports.ProxyParserErrorListener = ProxyParserErrorListener;
//# sourceMappingURL=ProxyParserErrorListener.js.map

/***/ }),

/***/ 1100:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.RecognitionException = void 0;
/** The root of the ANTLR exception hierarchy. In general, ANTLR tracks just
 *  3 kinds of errors: prediction errors, failed predicate errors, and
 *  mismatched input errors. In each case, the parser knows where it is
 *  in the input, where it is in the ATN, the rule invocation stack,
 *  and what kind of problem occurred.
 */
class RecognitionException extends Error {
    constructor(recognizer, input, ctx, message) {
        super(message);
        this._offendingState = -1;
        this._recognizer = recognizer;
        this.input = input;
        this.ctx = ctx;
        if (recognizer) {
            this._offendingState = recognizer.state;
        }
    }
    /**
     * Get the ATN state number the parser was in at the time the error
     * occurred. For {@link NoViableAltException} and
     * {@link LexerNoViableAltException} exceptions, this is the
     * {@link DecisionState} number. For others, it is the state whose outgoing
     * edge we couldn't match.
     *
     * If the state number is not known, this method returns -1.
     */
    get offendingState() {
        return this._offendingState;
    }
    setOffendingState(offendingState) {
        this._offendingState = offendingState;
    }
    /**
     * Gets the set of input symbols which could potentially follow the
     * previously matched symbol at the time this exception was thrown.
     *
     * If the set of expected tokens is not known and could not be computed,
     * this method returns `undefined`.
     *
     * @returns The set of token types that could potentially follow the current
     * state in the ATN, or `undefined` if the information is not available.
     */
    get expectedTokens() {
        if (this._recognizer) {
            return this._recognizer.atn.getExpectedTokens(this._offendingState, this.ctx);
        }
        return undefined;
    }
    /**
     * Gets the {@link RuleContext} at the time this exception was thrown.
     *
     * If the context is not available, this method returns `undefined`.
     *
     * @returns The {@link RuleContext} at the time this exception was thrown.
     * If the context is not available, this method returns `undefined`.
     */
    get context() {
        return this.ctx;
    }
    /**
     * Gets the input stream which is the symbol source for the recognizer where
     * this exception was thrown.
     *
     * If the input stream is not available, this method returns `undefined`.
     *
     * @returns The input stream which is the symbol source for the recognizer
     * where this exception was thrown, or `undefined` if the stream is not
     * available.
     */
    get inputStream() {
        return this.input;
    }
    getOffendingToken(recognizer) {
        if (recognizer && recognizer !== this._recognizer) {
            return undefined;
        }
        return this.offendingToken;
    }
    setOffendingToken(recognizer, offendingToken) {
        if (recognizer === this._recognizer) {
            this.offendingToken = offendingToken;
        }
    }
    /**
     * Gets the {@link Recognizer} where this exception occurred.
     *
     * If the recognizer is not available, this method returns `undefined`.
     *
     * @returns The recognizer where this exception occurred, or `undefined` if
     * the recognizer is not available.
     */
    get recognizer() {
        return this._recognizer;
    }
}
exports.RecognitionException = RecognitionException;
//# sourceMappingURL=RecognitionException.js.map

/***/ }),

/***/ 4780:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Recognizer = void 0;
const ConsoleErrorListener_1 = __webpack_require__(8778);
const ProxyErrorListener_1 = __webpack_require__(7751);
const Decorators_1 = __webpack_require__(681);
const Token_1 = __webpack_require__(8999);
const Utils = __webpack_require__(3070);
class Recognizer {
    constructor() {
        this._listeners = [ConsoleErrorListener_1.ConsoleErrorListener.INSTANCE];
        this._stateNumber = -1;
    }
    /**
     * Get a map from token names to token types.
     *
     * Used for XPath and tree pattern compilation.
     */
    getTokenTypeMap() {
        let vocabulary = this.vocabulary;
        let result = Recognizer.tokenTypeMapCache.get(vocabulary);
        if (result == null) {
            let intermediateResult = new Map();
            for (let i = 0; i <= this.atn.maxTokenType; i++) {
                let literalName = vocabulary.getLiteralName(i);
                if (literalName != null) {
                    intermediateResult.set(literalName, i);
                }
                let symbolicName = vocabulary.getSymbolicName(i);
                if (symbolicName != null) {
                    intermediateResult.set(symbolicName, i);
                }
            }
            intermediateResult.set("EOF", Token_1.Token.EOF);
            result = intermediateResult;
            Recognizer.tokenTypeMapCache.set(vocabulary, result);
        }
        return result;
    }
    /**
     * Get a map from rule names to rule indexes.
     *
     * Used for XPath and tree pattern compilation.
     */
    getRuleIndexMap() {
        let ruleNames = this.ruleNames;
        if (ruleNames == null) {
            throw new Error("The current recognizer does not provide a list of rule names.");
        }
        let result = Recognizer.ruleIndexMapCache.get(ruleNames);
        if (result == null) {
            result = Utils.toMap(ruleNames);
            Recognizer.ruleIndexMapCache.set(ruleNames, result);
        }
        return result;
    }
    getTokenType(tokenName) {
        let ttype = this.getTokenTypeMap().get(tokenName);
        if (ttype != null) {
            return ttype;
        }
        return Token_1.Token.INVALID_TYPE;
    }
    /**
     * If this recognizer was generated, it will have a serialized ATN
     * representation of the grammar.
     *
     * For interpreters, we don't know their serialized ATN despite having
     * created the interpreter from it.
     */
    get serializedATN() {
        throw new Error("there is no serialized ATN");
    }
    /**
     * Get the {@link ATN} used by the recognizer for prediction.
     *
     * @returns The {@link ATN} used by the recognizer for prediction.
     */
    get atn() {
        return this._interp.atn;
    }
    /**
     * Get the ATN interpreter used by the recognizer for prediction.
     *
     * @returns The ATN interpreter used by the recognizer for prediction.
     */
    get interpreter() {
        return this._interp;
    }
    /**
     * Set the ATN interpreter used by the recognizer for prediction.
     *
     * @param interpreter The ATN interpreter used by the recognizer for
     * prediction.
     */
    set interpreter(interpreter) {
        this._interp = interpreter;
    }
    /** If profiling during the parse/lex, this will return DecisionInfo records
     *  for each decision in recognizer in a ParseInfo object.
     *
     * @since 4.3
     */
    get parseInfo() {
        return Promise.resolve(undefined);
    }
    /** What is the error header, normally line/character position information? */
    getErrorHeader(e) {
        let token = e.getOffendingToken();
        if (!token) {
            return "";
        }
        let line = token.line;
        let charPositionInLine = token.charPositionInLine;
        return "line " + line + ":" + charPositionInLine;
    }
    /**
     * @exception NullPointerException if `listener` is `undefined`.
     */
    addErrorListener(listener) {
        if (!listener) {
            throw new TypeError("listener must not be null");
        }
        this._listeners.push(listener);
    }
    removeErrorListener(listener) {
        let position = this._listeners.indexOf(listener);
        if (position !== -1) {
            this._listeners.splice(position, 1);
        }
    }
    removeErrorListeners() {
        this._listeners.length = 0;
    }
    getErrorListeners() {
        return this._listeners.slice(0);
    }
    getErrorListenerDispatch() {
        return new ProxyErrorListener_1.ProxyErrorListener(this.getErrorListeners());
    }
    // subclass needs to override these if there are sempreds or actions
    // that the ATN interp needs to execute
    sempred(_localctx, ruleIndex, actionIndex) {
        return true;
    }
    precpred(localctx, precedence) {
        return true;
    }
    action(_localctx, ruleIndex, actionIndex) {
        // intentionally empty
    }
    get state() {
        return this._stateNumber;
    }
    /** Indicate that the recognizer has changed internal state that is
     *  consistent with the ATN state passed in.  This way we always know
     *  where we are in the ATN as the parser goes along. The rule
     *  context objects form a stack that lets us see the stack of
     *  invoking rules. Combine this and we have complete ATN
     *  configuration information.
     */
    set state(atnState) {
        //		System.err.println("setState "+atnState);
        this._stateNumber = atnState;
        //		if ( traceATNStates ) _ctx.trace(atnState);
    }
}
Recognizer.EOF = -1;
Recognizer.tokenTypeMapCache = new WeakMap();
Recognizer.ruleIndexMapCache = new WeakMap();
__decorate([
    Decorators_1.SuppressWarnings("serial"),
    Decorators_1.NotNull
], Recognizer.prototype, "_listeners", void 0);
__decorate([
    Decorators_1.NotNull
], Recognizer.prototype, "getTokenTypeMap", null);
__decorate([
    Decorators_1.NotNull
], Recognizer.prototype, "getRuleIndexMap", null);
__decorate([
    Decorators_1.NotNull
], Recognizer.prototype, "serializedATN", null);
__decorate([
    Decorators_1.NotNull
], Recognizer.prototype, "atn", null);
__decorate([
    Decorators_1.NotNull,
    __param(0, Decorators_1.NotNull)
], Recognizer.prototype, "interpreter", null);
__decorate([
    Decorators_1.NotNull,
    __param(0, Decorators_1.NotNull)
], Recognizer.prototype, "getErrorHeader", null);
__decorate([
    __param(0, Decorators_1.NotNull)
], Recognizer.prototype, "addErrorListener", null);
__decorate([
    __param(0, Decorators_1.NotNull)
], Recognizer.prototype, "removeErrorListener", null);
__decorate([
    Decorators_1.NotNull
], Recognizer.prototype, "getErrorListeners", null);
exports.Recognizer = Recognizer;
//# sourceMappingURL=Recognizer.js.map

/***/ }),

/***/ 4224:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.RuleContext = void 0;
// ConvertTo-TS run at 2016-10-04T11:26:57.3490837-07:00
const ATN_1 = __webpack_require__(8148);
const Recognizer_1 = __webpack_require__(4780);
const RuleNode_1 = __webpack_require__(9297);
const Interval_1 = __webpack_require__(4378);
const Decorators_1 = __webpack_require__(681);
const Trees_1 = __webpack_require__(1180);
const ParserRuleContext_1 = __webpack_require__(9248);
/** A rule context is a record of a single rule invocation.
 *
 *  We form a stack of these context objects using the parent
 *  pointer. A parent pointer of `undefined` indicates that the current
 *  context is the bottom of the stack. The ParserRuleContext subclass
 *  as a children list so that we can turn this data structure into a
 *  tree.
 *
 *  The root node always has a `undefined` pointer and invokingState of -1.
 *
 *  Upon entry to parsing, the first invoked rule function creates a
 *  context object (a subclass specialized for that rule such as
 *  SContext) and makes it the root of a parse tree, recorded by field
 *  Parser._ctx.
 *
 *  public final SContext s() throws RecognitionException {
 *      SContext _localctx = new SContext(_ctx, state); <-- create new node
 *      enterRule(_localctx, 0, RULE_s);                     <-- push it
 *      ...
 *      exitRule();                                          <-- pop back to _localctx
 *      return _localctx;
 *  }
 *
 *  A subsequent rule invocation of r from the start rule s pushes a
 *  new context object for r whose parent points at s and use invoking
 *  state is the state with r emanating as edge label.
 *
 *  The invokingState fields from a context object to the root
 *  together form a stack of rule indication states where the root
 *  (bottom of the stack) has a -1 sentinel value. If we invoke start
 *  symbol s then call r1, which calls r2, the  would look like
 *  this:
 *
 *     SContext[-1]   <- root node (bottom of the stack)
 *     R1Context[p]   <- p in rule s called r1
 *     R2Context[q]   <- q in rule r1 called r2
 *
 *  So the top of the stack, _ctx, represents a call to the current
 *  rule and it holds the return address from another rule that invoke
 *  to this rule. To invoke a rule, we must always have a current context.
 *
 *  The parent contexts are useful for computing lookahead sets and
 *  getting error information.
 *
 *  These objects are used during parsing and prediction.
 *  For the special case of parsers, we use the subclass
 *  ParserRuleContext.
 *
 *  @see ParserRuleContext
 */
class RuleContext extends RuleNode_1.RuleNode {
    constructor(parent, invokingState) {
        super();
        this._parent = parent;
        this.invokingState = invokingState != null ? invokingState : -1;
    }
    static getChildContext(parent, invokingState) {
        return new RuleContext(parent, invokingState);
    }
    depth() {
        let n = 0;
        let p = this;
        while (p) {
            p = p._parent;
            n++;
        }
        return n;
    }
    /** A context is empty if there is no invoking state; meaning nobody called
     *  current context.
     */
    get isEmpty() {
        return this.invokingState === -1;
    }
    // satisfy the ParseTree / SyntaxTree interface
    get sourceInterval() {
        return Interval_1.Interval.INVALID;
    }
    get ruleContext() { return this; }
    get parent() { return this._parent; }
    /** @since 4.7. {@see ParseTree#setParent} comment */
    setParent(parent) {
        this._parent = parent;
    }
    get payload() { return this; }
    /** Return the combined text of all child nodes. This method only considers
     *  tokens which have been added to the parse tree.
     *
     *  Since tokens on hidden channels (e.g. whitespace or comments) are not
     *  added to the parse trees, they will not appear in the output of this
     *  method.
     */
    get text() {
        if (this.childCount === 0) {
            return "";
        }
        let builder = "";
        for (let i = 0; i < this.childCount; i++) {
            builder += this.getChild(i).text;
        }
        return builder.toString();
    }
    get ruleIndex() { return -1; }
    /** For rule associated with this parse tree internal node, return
     *  the outer alternative number used to match the input. Default
     *  implementation does not compute nor store this alt num. Create
     *  a subclass of ParserRuleContext with backing field and set
     *  option contextSuperClass.
     *  to set it.
     *
     *  @since 4.5.3
     */
    get altNumber() { return ATN_1.ATN.INVALID_ALT_NUMBER; }
    /** Set the outer alternative number for this context node. Default
     *  implementation does nothing to avoid backing field overhead for
     *  trees that don't need it.  Create
     *  a subclass of ParserRuleContext with backing field and set
     *  option contextSuperClass.
     *
     *  @since 4.5.3
     */
    set altNumber(altNumber) {
        // intentionally ignored by the base implementation
    }
    getChild(i) {
        throw new RangeError("i must be greater than or equal to 0 and less than childCount");
    }
    get childCount() {
        return 0;
    }
    accept(visitor) {
        return visitor.visitChildren(this);
    }
    toStringTree(recog) {
        return Trees_1.Trees.toStringTree(this, recog);
    }
    toString(arg1, stop) {
        const ruleNames = (arg1 instanceof Recognizer_1.Recognizer) ? arg1.ruleNames : arg1;
        stop = stop || ParserRuleContext_1.ParserRuleContext.emptyContext();
        let buf = "";
        let p = this;
        buf += ("[");
        while (p && p !== stop) {
            if (!ruleNames) {
                if (!p.isEmpty) {
                    buf += (p.invokingState);
                }
            }
            else {
                let ruleIndex = p.ruleIndex;
                let ruleName = (ruleIndex >= 0 && ruleIndex < ruleNames.length)
                    ? ruleNames[ruleIndex] : ruleIndex.toString();
                buf += (ruleName);
            }
            if (p._parent && (ruleNames || !p._parent.isEmpty)) {
                buf += (" ");
            }
            p = p._parent;
        }
        buf += ("]");
        return buf.toString();
    }
}
__decorate([
    Decorators_1.Override
], RuleContext.prototype, "sourceInterval", null);
__decorate([
    Decorators_1.Override
], RuleContext.prototype, "ruleContext", null);
__decorate([
    Decorators_1.Override
], RuleContext.prototype, "parent", null);
__decorate([
    Decorators_1.Override
], RuleContext.prototype, "setParent", null);
__decorate([
    Decorators_1.Override
], RuleContext.prototype, "payload", null);
__decorate([
    Decorators_1.Override
], RuleContext.prototype, "text", null);
__decorate([
    Decorators_1.Override
], RuleContext.prototype, "getChild", null);
__decorate([
    Decorators_1.Override
], RuleContext.prototype, "childCount", null);
__decorate([
    Decorators_1.Override
], RuleContext.prototype, "accept", null);
__decorate([
    Decorators_1.Override
], RuleContext.prototype, "toStringTree", null);
exports.RuleContext = RuleContext;
//# sourceMappingURL=RuleContext.js.map

/***/ }),

/***/ 7817:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.RuleContextWithAltNum = void 0;
// ConvertTo-TS run at 2016-10-04T11:26:57.4741196-07:00
const ATN_1 = __webpack_require__(8148);
const Decorators_1 = __webpack_require__(681);
const ParserRuleContext_1 = __webpack_require__(9248);
/** A handy class for use with
 *
 *  options {contextSuperClass=org.antlr.v4.runtime.RuleContextWithAltNum;}
 *
 *  that provides a backing field / impl for the outer alternative number
 *  matched for an internal parse tree node.
 *
 *  I'm only putting into Java runtime as I'm certain I'm the only one that
 *  will really every use this.
 */
class RuleContextWithAltNum extends ParserRuleContext_1.ParserRuleContext {
    constructor(parent, invokingStateNumber) {
        if (invokingStateNumber !== undefined) {
            super(parent, invokingStateNumber);
        }
        else {
            super();
        }
        this._altNumber = ATN_1.ATN.INVALID_ALT_NUMBER;
    }
    get altNumber() {
        return this._altNumber;
    }
    // @Override
    set altNumber(altNum) {
        this._altNumber = altNum;
    }
}
__decorate([
    Decorators_1.Override
], RuleContextWithAltNum.prototype, "altNumber", null);
exports.RuleContextWithAltNum = RuleContextWithAltNum;
//# sourceMappingURL=RuleContextWithAltNum.js.map

/***/ }),

/***/ 6032:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.RuleDependency = void 0;
/**
 * Declares a dependency upon a grammar rule, along with a set of zero or more dependent rules.
 *
 * Version numbers within a grammar should be assigned on a monotonically increasing basis to allow for accurate
 * tracking of dependent rules.
 *
 * @author Sam Harwell
 */
function RuleDependency(dependency) {
    return (target, propertyKey, propertyDescriptor) => {
        // intentionally empty
    };
}
exports.RuleDependency = RuleDependency;
//# sourceMappingURL=RuleDependency.js.map

/***/ }),

/***/ 1248:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.RuleVersion = void 0;
/**
 *
 * @author Sam Harwell
 */
function RuleVersion(version) {
    return (target, propertyKey, propertyDescriptor) => {
        // intentionally empty
    };
}
exports.RuleVersion = RuleVersion;
//# sourceMappingURL=RuleVersion.js.map

/***/ }),

/***/ 8999:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Token = void 0;
const IntStream_1 = __webpack_require__(2628);
var Token;
(function (Token) {
    Token.INVALID_TYPE = 0;
    /** During lookahead operations, this "token" signifies we hit rule end ATN state
     *  and did not follow it despite needing to.
     */
    Token.EPSILON = -2;
    Token.MIN_USER_TOKEN_TYPE = 1;
    Token.EOF = IntStream_1.IntStream.EOF;
    /** All tokens go to the parser (unless skip() is called in that rule)
     *  on a particular "channel".  The parser tunes to a particular channel
     *  so that whitespace etc... can go to the parser on a "hidden" channel.
     */
    Token.DEFAULT_CHANNEL = 0;
    /** Anything on different channel than DEFAULT_CHANNEL is not parsed
     *  by parser.
     */
    Token.HIDDEN_CHANNEL = 1;
    /**
     * This is the minimum constant value which can be assigned to a
     * user-defined token channel.
     *
     * The non-negative numbers less than {@link #MIN_USER_CHANNEL_VALUE} are
     * assigned to the predefined channels {@link #DEFAULT_CHANNEL} and
     * {@link #HIDDEN_CHANNEL}.
     *
     * @see `Token.channel`
     */
    Token.MIN_USER_CHANNEL_VALUE = 2;
})(Token = exports.Token || (exports.Token = {}));
//# sourceMappingURL=Token.js.map

/***/ }),

/***/ 9427:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
Object.defineProperty(exports, "__esModule", ({ value: true }));
//# sourceMappingURL=TokenFactory.js.map

/***/ }),

/***/ 7725:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
Object.defineProperty(exports, "__esModule", ({ value: true }));
//# sourceMappingURL=TokenSource.js.map

/***/ }),

/***/ 9234:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
Object.defineProperty(exports, "__esModule", ({ value: true }));
//# sourceMappingURL=TokenStream.js.map

/***/ }),

/***/ 2052:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.RewriteOperation = exports.TokenStreamRewriter = void 0;
// ConvertTo-TS run at 2016-10-04T11:26:58.1768850-07:00
const Interval_1 = __webpack_require__(4378);
const Decorators_1 = __webpack_require__(681);
const Token_1 = __webpack_require__(8999);
/**
 * Useful for rewriting out a buffered input token stream after doing some
 * augmentation or other manipulations on it.
 *
 * You can insert stuff, replace, and delete chunks. Note that the operations
 * are done lazily--only if you convert the buffer to a {@link String} with
 * {@link TokenStream#getText()}. This is very efficient because you are not
 * moving data around all the time. As the buffer of tokens is converted to
 * strings, the {@link #getText()} method(s) scan the input token stream and
 * check to see if there is an operation at the current index. If so, the
 * operation is done and then normal {@link String} rendering continues on the
 * buffer. This is like having multiple Turing machine instruction streams
 * (programs) operating on a single input tape. :)
 *
 * This rewriter makes no modifications to the token stream. It does not ask the
 * stream to fill itself up nor does it advance the input cursor. The token
 * stream `TokenStream.index` will return the same value before and
 * after any {@link #getText()} call.
 *
 * The rewriter only works on tokens that you have in the buffer and ignores the
 * current input cursor. If you are buffering tokens on-demand, calling
 * {@link #getText()} halfway through the input will only do rewrites for those
 * tokens in the first half of the file.
 *
 * Since the operations are done lazily at {@link #getText}-time, operations do
 * not screw up the token index values. That is, an insert operation at token
 * index `i` does not change the index values for tokens
 * `i`+1..n-1.
 *
 * Because operations never actually alter the buffer, you may always get the
 * original token stream back without undoing anything. Since the instructions
 * are queued up, you can easily simulate transactions and roll back any changes
 * if there is an error just by removing instructions. For example,
 *
 * ```
 * CharStream input = new ANTLRFileStream("input");
 * TLexer lex = new TLexer(input);
 * CommonTokenStream tokens = new CommonTokenStream(lex);
 * T parser = new T(tokens);
 * TokenStreamRewriter rewriter = new TokenStreamRewriter(tokens);
 * parser.startRule();
 * ```
 *
 * Then in the rules, you can execute (assuming rewriter is visible):
 *
 * ```
 * Token t,u;
 * ...
 * rewriter.insertAfter(t, "text to put after t");}
 * rewriter.insertAfter(u, "text after u");}
 * System.out.println(rewriter.getText());
 * ```
 *
 * You can also have multiple "instruction streams" and get multiple rewrites
 * from a single pass over the input. Just name the instruction streams and use
 * that name again when printing the buffer. This could be useful for generating
 * a C file and also its header file--all from the same buffer:
 *
 * ```
 * rewriter.insertAfter("pass1", t, "text to put after t");}
 * rewriter.insertAfter("pass2", u, "text after u");}
 * System.out.println(rewriter.getText("pass1"));
 * System.out.println(rewriter.getText("pass2"));
 * ```
 *
 * If you don't use named rewrite streams, a "default" stream is used as the
 * first example shows.
 */
class TokenStreamRewriter {
    constructor(tokens) {
        this.tokens = tokens;
        this.programs = new Map();
        this.programs.set(TokenStreamRewriter.DEFAULT_PROGRAM_NAME, []);
        this.lastRewriteTokenIndexes = new Map();
    }
    getTokenStream() {
        return this.tokens;
    }
    rollback(instructionIndex, programName = TokenStreamRewriter.DEFAULT_PROGRAM_NAME) {
        let is = this.programs.get(programName);
        if (is != null) {
            this.programs.set(programName, is.slice(TokenStreamRewriter.MIN_TOKEN_INDEX, instructionIndex));
        }
    }
    deleteProgram(programName = TokenStreamRewriter.DEFAULT_PROGRAM_NAME) {
        this.rollback(TokenStreamRewriter.MIN_TOKEN_INDEX, programName);
    }
    insertAfter(tokenOrIndex, text, programName = TokenStreamRewriter.DEFAULT_PROGRAM_NAME) {
        let index;
        if (typeof tokenOrIndex === "number") {
            index = tokenOrIndex;
        }
        else {
            index = tokenOrIndex.tokenIndex;
        }
        // to insert after, just insert before next index (even if past end)
        let rewrites = this.getProgram(programName);
        let op = new InsertAfterOp(this.tokens, index, rewrites.length, text);
        rewrites.push(op);
    }
    insertBefore(tokenOrIndex, text, programName = TokenStreamRewriter.DEFAULT_PROGRAM_NAME) {
        let index;
        if (typeof tokenOrIndex === "number") {
            index = tokenOrIndex;
        }
        else {
            index = tokenOrIndex.tokenIndex;
        }
        let rewrites = this.getProgram(programName);
        let op = new InsertBeforeOp(this.tokens, index, rewrites.length, text);
        rewrites.push(op);
    }
    replaceSingle(index, text) {
        if (typeof index === "number") {
            this.replace(index, index, text);
        }
        else {
            this.replace(index, index, text);
        }
    }
    replace(from, to, text, programName = TokenStreamRewriter.DEFAULT_PROGRAM_NAME) {
        if (typeof from !== "number") {
            from = from.tokenIndex;
        }
        if (typeof to !== "number") {
            to = to.tokenIndex;
        }
        if (from > to || from < 0 || to < 0 || to >= this.tokens.size) {
            throw new RangeError(`replace: range invalid: ${from}..${to}(size=${this.tokens.size})`);
        }
        let rewrites = this.getProgram(programName);
        let op = new ReplaceOp(this.tokens, from, to, rewrites.length, text);
        rewrites.push(op);
    }
    delete(from, to, programName = TokenStreamRewriter.DEFAULT_PROGRAM_NAME) {
        if (to === undefined) {
            to = from;
        }
        if (typeof from === "number") {
            this.replace(from, to, "", programName);
        }
        else {
            this.replace(from, to, "", programName);
        }
    }
    getLastRewriteTokenIndex(programName = TokenStreamRewriter.DEFAULT_PROGRAM_NAME) {
        let I = this.lastRewriteTokenIndexes.get(programName);
        if (I == null) {
            return -1;
        }
        return I;
    }
    setLastRewriteTokenIndex(programName, i) {
        this.lastRewriteTokenIndexes.set(programName, i);
    }
    getProgram(name) {
        let is = this.programs.get(name);
        if (is == null) {
            is = this.initializeProgram(name);
        }
        return is;
    }
    initializeProgram(name) {
        let is = [];
        this.programs.set(name, is);
        return is;
    }
    getText(intervalOrProgram, programName = TokenStreamRewriter.DEFAULT_PROGRAM_NAME) {
        let interval;
        if (intervalOrProgram instanceof Interval_1.Interval) {
            interval = intervalOrProgram;
        }
        else {
            interval = Interval_1.Interval.of(0, this.tokens.size - 1);
        }
        if (typeof intervalOrProgram === "string") {
            programName = intervalOrProgram;
        }
        let rewrites = this.programs.get(programName);
        let start = interval.a;
        let stop = interval.b;
        // ensure start/end are in range
        if (stop > this.tokens.size - 1) {
            stop = this.tokens.size - 1;
        }
        if (start < 0) {
            start = 0;
        }
        if (rewrites == null || rewrites.length === 0) {
            return this.tokens.getText(interval); // no instructions to execute
        }
        let buf = [];
        // First, optimize instruction stream
        let indexToOp = this.reduceToSingleOperationPerIndex(rewrites);
        // Walk buffer, executing instructions and emitting tokens
        let i = start;
        while (i <= stop && i < this.tokens.size) {
            let op = indexToOp.get(i);
            indexToOp.delete(i); // remove so any left have index size-1
            let t = this.tokens.get(i);
            if (op == null) {
                // no operation at that index, just dump token
                if (t.type !== Token_1.Token.EOF) {
                    buf.push(String(t.text));
                }
                i++; // move to next token
            }
            else {
                i = op.execute(buf); // execute operation and skip
            }
        }
        // include stuff after end if it's last index in buffer
        // So, if they did an insertAfter(lastValidIndex, "foo"), include
        // foo if end==lastValidIndex.
        if (stop === this.tokens.size - 1) {
            // Scan any remaining operations after last token
            // should be included (they will be inserts).
            for (let op of indexToOp.values()) {
                if (op.index >= this.tokens.size - 1) {
                    buf.push(op.text.toString());
                }
            }
        }
        return buf.join("");
    }
    /** We need to combine operations and report invalid operations (like
     *  overlapping replaces that are not completed nested). Inserts to
     *  same index need to be combined etc...  Here are the cases:
     *
     *  I.i.u I.j.v								leave alone, nonoverlapping
     *  I.i.u I.i.v								combine: Iivu
     *
     *  R.i-j.u R.x-y.v	| i-j in x-y			delete first R
     *  R.i-j.u R.i-j.v							delete first R
     *  R.i-j.u R.x-y.v	| x-y in i-j			ERROR
     *  R.i-j.u R.x-y.v	| boundaries overlap	ERROR
     *
     *  Delete special case of replace (text==undefined):
     *  D.i-j.u D.x-y.v	| boundaries overlap	combine to max(min)..max(right)
     *
     *  I.i.u R.x-y.v | i in (x+1)-y			delete I (since insert before
     * 											we're not deleting i)
     *  I.i.u R.x-y.v | i not in (x+1)-y		leave alone, nonoverlapping
     *  R.x-y.v I.i.u | i in x-y				ERROR
     *  R.x-y.v I.x.u 							R.x-y.uv (combine, delete I)
     *  R.x-y.v I.i.u | i not in x-y			leave alone, nonoverlapping
     *
     *  I.i.u = insert u before op @ index i
     *  R.x-y.u = replace x-y indexed tokens with u
     *
     *  First we need to examine replaces. For any replace op:
     *
     * 		1. wipe out any insertions before op within that range.
     * 		2. Drop any replace op before that is contained completely within
     * 	 that range.
     * 		3. Throw exception upon boundary overlap with any previous replace.
     *
     *  Then we can deal with inserts:
     *
     * 		1. for any inserts to same index, combine even if not adjacent.
     * 		2. for any prior replace with same left boundary, combine this
     * 	 insert with replace and delete this replace.
     * 		3. throw exception if index in same range as previous replace
     *
     *  Don't actually delete; make op undefined in list. Easier to walk list.
     *  Later we can throw as we add to index &rarr; op map.
     *
     *  Note that I.2 R.2-2 will wipe out I.2 even though, technically, the
     *  inserted stuff would be before the replace range. But, if you
     *  add tokens in front of a method body '{' and then delete the method
     *  body, I think the stuff before the '{' you added should disappear too.
     *
     *  Return a map from token index to operation.
     */
    reduceToSingleOperationPerIndex(rewrites) {
        // console.log(`rewrites=[${Utils.join(rewrites, ", ")}]`);
        // WALK REPLACES
        for (let i = 0; i < rewrites.length; i++) {
            let op = rewrites[i];
            if (op == null) {
                continue;
            }
            if (!(op instanceof ReplaceOp)) {
                continue;
            }
            let rop = op;
            // Wipe prior inserts within range
            let inserts = this.getKindOfOps(rewrites, InsertBeforeOp, i);
            for (let iop of inserts) {
                if (iop.index === rop.index) {
                    // E.g., insert before 2, delete 2..2; update replace
                    // text to include insert before, kill insert
                    rewrites[iop.instructionIndex] = undefined;
                    rop.text = iop.text.toString() + (rop.text != null ? rop.text.toString() : "");
                }
                else if (iop.index > rop.index && iop.index <= rop.lastIndex) {
                    // delete insert as it's a no-op.
                    rewrites[iop.instructionIndex] = undefined;
                }
            }
            // Drop any prior replaces contained within
            let prevReplaces = this.getKindOfOps(rewrites, ReplaceOp, i);
            for (let prevRop of prevReplaces) {
                if (prevRop.index >= rop.index && prevRop.lastIndex <= rop.lastIndex) {
                    // delete replace as it's a no-op.
                    rewrites[prevRop.instructionIndex] = undefined;
                    continue;
                }
                // throw exception unless disjoint or identical
                let disjoint = prevRop.lastIndex < rop.index || prevRop.index > rop.lastIndex;
                // Delete special case of replace (text==null):
                // D.i-j.u D.x-y.v	| boundaries overlap	combine to max(min)..max(right)
                if (prevRop.text == null && rop.text == null && !disjoint) {
                    // console.log(`overlapping deletes: ${prevRop}, ${rop}`);
                    rewrites[prevRop.instructionIndex] = undefined; // kill first delete
                    rop.index = Math.min(prevRop.index, rop.index);
                    rop.lastIndex = Math.max(prevRop.lastIndex, rop.lastIndex);
                    // console.log(`new rop ${rop}`);
                }
                else if (!disjoint) {
                    throw new Error(`replace op boundaries of ${rop} overlap with previous ${prevRop}`);
                }
            }
        }
        // WALK INSERTS
        for (let i = 0; i < rewrites.length; i++) {
            let op = rewrites[i];
            if (op == null) {
                continue;
            }
            if (!(op instanceof InsertBeforeOp)) {
                continue;
            }
            let iop = op;
            // combine current insert with prior if any at same index
            let prevInserts = this.getKindOfOps(rewrites, InsertBeforeOp, i);
            for (let prevIop of prevInserts) {
                if (prevIop.index === iop.index) {
                    if (prevIop instanceof InsertAfterOp) {
                        iop.text = this.catOpText(prevIop.text, iop.text);
                        rewrites[prevIop.instructionIndex] = undefined;
                    }
                    else if (prevIop instanceof InsertBeforeOp) { // combine objects
                        // convert to strings...we're in process of toString'ing
                        // whole token buffer so no lazy eval issue with any templates
                        iop.text = this.catOpText(iop.text, prevIop.text);
                        // delete redundant prior insert
                        rewrites[prevIop.instructionIndex] = undefined;
                    }
                }
            }
            // look for replaces where iop.index is in range; error
            let prevReplaces = this.getKindOfOps(rewrites, ReplaceOp, i);
            for (let rop of prevReplaces) {
                if (iop.index === rop.index) {
                    rop.text = this.catOpText(iop.text, rop.text);
                    rewrites[i] = undefined; // delete current insert
                    continue;
                }
                if (iop.index >= rop.index && iop.index <= rop.lastIndex) {
                    throw new Error(`insert op ${iop} within boundaries of previous ${rop}`);
                }
            }
        }
        // console.log(`rewrites after=[${Utils.join(rewrites, ", ")}]`);
        let m = new Map();
        for (let op of rewrites) {
            if (op == null) {
                // ignore deleted ops
                continue;
            }
            if (m.get(op.index) != null) {
                throw new Error("should only be one op per index");
            }
            m.set(op.index, op);
        }
        // console.log(`index to op: ${m}`);
        return m;
    }
    catOpText(a, b) {
        let x = "";
        let y = "";
        if (a != null) {
            x = a.toString();
        }
        if (b != null) {
            y = b.toString();
        }
        return x + y;
    }
    /** Get all operations before an index of a particular kind */
    getKindOfOps(rewrites, kind, before) {
        let ops = [];
        for (let i = 0; i < before && i < rewrites.length; i++) {
            let op = rewrites[i];
            if (op == null) {
                // ignore deleted
                continue;
            }
            if (op instanceof kind) {
                ops.push(op);
            }
        }
        return ops;
    }
}
exports.TokenStreamRewriter = TokenStreamRewriter;
TokenStreamRewriter.DEFAULT_PROGRAM_NAME = "default";
TokenStreamRewriter.PROGRAM_INIT_SIZE = 100;
TokenStreamRewriter.MIN_TOKEN_INDEX = 0;
// Define the rewrite operation hierarchy
class RewriteOperation {
    constructor(tokens, index, instructionIndex, text) {
        this.tokens = tokens;
        this.instructionIndex = instructionIndex;
        this.index = index;
        this.text = text === undefined ? "" : text;
    }
    /** Execute the rewrite operation by possibly adding to the buffer.
     *  Return the index of the next token to operate on.
     */
    execute(buf) {
        return this.index;
    }
    toString() {
        let opName = this.constructor.name;
        let $index = opName.indexOf("$");
        opName = opName.substring($index + 1, opName.length);
        return "<" + opName + "@" + this.tokens.get(this.index) +
            ":\"" + this.text + "\">";
    }
}
__decorate([
    Decorators_1.Override
], RewriteOperation.prototype, "toString", null);
exports.RewriteOperation = RewriteOperation;
class InsertBeforeOp extends RewriteOperation {
    constructor(tokens, index, instructionIndex, text) {
        super(tokens, index, instructionIndex, text);
    }
    execute(buf) {
        buf.push(this.text.toString());
        if (this.tokens.get(this.index).type !== Token_1.Token.EOF) {
            buf.push(String(this.tokens.get(this.index).text));
        }
        return this.index + 1;
    }
}
__decorate([
    Decorators_1.Override
], InsertBeforeOp.prototype, "execute", null);
/** Distinguish between insert after/before to do the "insert afters"
 *  first and then the "insert befores" at same index. Implementation
 *  of "insert after" is "insert before index+1".
 */
class InsertAfterOp extends InsertBeforeOp {
    constructor(tokens, index, instructionIndex, text) {
        super(tokens, index + 1, instructionIndex, text); // insert after is insert before index+1
    }
}
/** I'm going to try replacing range from x..y with (y-x)+1 ReplaceOp
 *  instructions.
 */
class ReplaceOp extends RewriteOperation {
    constructor(tokens, from, to, instructionIndex, text) {
        super(tokens, from, instructionIndex, text);
        this.lastIndex = to;
    }
    execute(buf) {
        if (this.text != null) {
            buf.push(this.text.toString());
        }
        return this.lastIndex + 1;
    }
    toString() {
        if (this.text == null) {
            return "<DeleteOp@" + this.tokens.get(this.index) +
                ".." + this.tokens.get(this.lastIndex) + ">";
        }
        return "<ReplaceOp@" + this.tokens.get(this.index) +
            ".." + this.tokens.get(this.lastIndex) + ":\"" + this.text + "\">";
    }
}
__decorate([
    Decorators_1.Override
], ReplaceOp.prototype, "execute", null);
__decorate([
    Decorators_1.Override
], ReplaceOp.prototype, "toString", null);
//# sourceMappingURL=TokenStreamRewriter.js.map

/***/ }),

/***/ 9269:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
Object.defineProperty(exports, "__esModule", ({ value: true }));
//# sourceMappingURL=Vocabulary.js.map

/***/ }),

/***/ 1434:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.VocabularyImpl = void 0;
// ConvertTo-TS run at 2016-10-04T11:26:59.5829654-07:00
const Decorators_1 = __webpack_require__(681);
const Token_1 = __webpack_require__(8999);
/**
 * This class provides a default implementation of the {@link Vocabulary}
 * interface.
 *
 * @author Sam Harwell
 */
class VocabularyImpl {
    /**
     * Constructs a new instance of {@link VocabularyImpl} from the specified
     * literal, symbolic, and display token names.
     *
     * @param literalNames The literal names assigned to tokens, or an empty array
     * if no literal names are assigned.
     * @param symbolicNames The symbolic names assigned to tokens, or
     * an empty array if no symbolic names are assigned.
     * @param displayNames The display names assigned to tokens, or an empty array
     * to use the values in `literalNames` and `symbolicNames` as
     * the source of display names, as described in
     * {@link #getDisplayName(int)}.
     *
     * @see #getLiteralName(int)
     * @see #getSymbolicName(int)
     * @see #getDisplayName(int)
     */
    constructor(literalNames, symbolicNames, displayNames) {
        this.literalNames = literalNames;
        this.symbolicNames = symbolicNames;
        this.displayNames = displayNames;
        // See note here on -1 part: https://github.com/antlr/antlr4/pull/1146
        this._maxTokenType =
            Math.max(this.displayNames.length, Math.max(this.literalNames.length, this.symbolicNames.length)) - 1;
    }
    get maxTokenType() {
        return this._maxTokenType;
    }
    getLiteralName(tokenType) {
        if (tokenType >= 0 && tokenType < this.literalNames.length) {
            return this.literalNames[tokenType];
        }
        return undefined;
    }
    getSymbolicName(tokenType) {
        if (tokenType >= 0 && tokenType < this.symbolicNames.length) {
            return this.symbolicNames[tokenType];
        }
        if (tokenType === Token_1.Token.EOF) {
            return "EOF";
        }
        return undefined;
    }
    getDisplayName(tokenType) {
        if (tokenType >= 0 && tokenType < this.displayNames.length) {
            let displayName = this.displayNames[tokenType];
            if (displayName) {
                return displayName;
            }
        }
        let literalName = this.getLiteralName(tokenType);
        if (literalName) {
            return literalName;
        }
        let symbolicName = this.getSymbolicName(tokenType);
        if (symbolicName) {
            return symbolicName;
        }
        return String(tokenType);
    }
}
/**
 * Gets an empty {@link Vocabulary} instance.
 *
 * No literal or symbol names are assigned to token types, so
 * {@link #getDisplayName(int)} returns the numeric value for all tokens
 * except {@link Token#EOF}.
 */
VocabularyImpl.EMPTY_VOCABULARY = new VocabularyImpl([], [], []);
__decorate([
    Decorators_1.NotNull
], VocabularyImpl.prototype, "literalNames", void 0);
__decorate([
    Decorators_1.NotNull
], VocabularyImpl.prototype, "symbolicNames", void 0);
__decorate([
    Decorators_1.NotNull
], VocabularyImpl.prototype, "displayNames", void 0);
__decorate([
    Decorators_1.Override
], VocabularyImpl.prototype, "maxTokenType", null);
__decorate([
    Decorators_1.Override
], VocabularyImpl.prototype, "getLiteralName", null);
__decorate([
    Decorators_1.Override
], VocabularyImpl.prototype, "getSymbolicName", null);
__decorate([
    Decorators_1.Override,
    Decorators_1.NotNull
], VocabularyImpl.prototype, "getDisplayName", null);
__decorate([
    Decorators_1.NotNull
], VocabularyImpl, "EMPTY_VOCABULARY", void 0);
exports.VocabularyImpl = VocabularyImpl;
//# sourceMappingURL=VocabularyImpl.js.map

/***/ }),

/***/ 4010:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
Object.defineProperty(exports, "__esModule", ({ value: true }));
//# sourceMappingURL=WritableToken.js.map

/***/ }),

/***/ 8148:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ATN = void 0;
// ConvertTo-TS run at 2016-10-04T11:26:25.1063510-07:00
const Array2DHashMap_1 = __webpack_require__(2835);
const DFA_1 = __webpack_require__(1707);
const IntervalSet_1 = __webpack_require__(5462);
const InvalidState_1 = __webpack_require__(7678);
const LL1Analyzer_1 = __webpack_require__(6181);
const Decorators_1 = __webpack_require__(681);
const ObjectEqualityComparator_1 = __webpack_require__(8578);
const PredictionContext_1 = __webpack_require__(1229);
const Token_1 = __webpack_require__(8999);
const assert = __webpack_require__(1696);
/** */
let ATN = class ATN {
    /** Used for runtime deserialization of ATNs from strings */
    constructor(grammarType, maxTokenType) {
        this.states = [];
        /** Each subrule/rule is a decision point and we must track them so we
         *  can go back later and build DFA predictors for them.  This includes
         *  all the rules, subrules, optional blocks, ()+, ()* etc...
         */
        this.decisionToState = [];
        this.modeNameToStartState = new Map();
        this.modeToStartState = [];
        this.contextCache = new Array2DHashMap_1.Array2DHashMap(ObjectEqualityComparator_1.ObjectEqualityComparator.INSTANCE);
        this.decisionToDFA = [];
        this.modeToDFA = [];
        this.LL1Table = new Map();
        this.grammarType = grammarType;
        this.maxTokenType = maxTokenType;
    }
    clearDFA() {
        this.decisionToDFA = new Array(this.decisionToState.length);
        for (let i = 0; i < this.decisionToDFA.length; i++) {
            this.decisionToDFA[i] = new DFA_1.DFA(this.decisionToState[i], i);
        }
        this.modeToDFA = new Array(this.modeToStartState.length);
        for (let i = 0; i < this.modeToDFA.length; i++) {
            this.modeToDFA[i] = new DFA_1.DFA(this.modeToStartState[i]);
        }
        this.contextCache.clear();
        this.LL1Table.clear();
    }
    get contextCacheSize() {
        return this.contextCache.size;
    }
    getCachedContext(context) {
        return PredictionContext_1.PredictionContext.getCachedContext(context, this.contextCache, new PredictionContext_1.PredictionContext.IdentityHashMap());
    }
    getDecisionToDFA() {
        assert(this.decisionToDFA != null && this.decisionToDFA.length === this.decisionToState.length);
        return this.decisionToDFA;
    }
    nextTokens(s, ctx) {
        if (ctx) {
            let anal = new LL1Analyzer_1.LL1Analyzer(this);
            let next = anal.LOOK(s, ctx);
            return next;
        }
        else {
            if (s.nextTokenWithinRule) {
                return s.nextTokenWithinRule;
            }
            s.nextTokenWithinRule = this.nextTokens(s, PredictionContext_1.PredictionContext.EMPTY_LOCAL);
            s.nextTokenWithinRule.setReadonly(true);
            return s.nextTokenWithinRule;
        }
    }
    addState(state) {
        state.atn = this;
        state.stateNumber = this.states.length;
        this.states.push(state);
    }
    removeState(state) {
        // just replace the state, don't shift states in list
        let invalidState = new InvalidState_1.InvalidState();
        invalidState.atn = this;
        invalidState.stateNumber = state.stateNumber;
        this.states[state.stateNumber] = invalidState;
    }
    defineMode(name, s) {
        this.modeNameToStartState.set(name, s);
        this.modeToStartState.push(s);
        this.modeToDFA.push(new DFA_1.DFA(s));
        this.defineDecisionState(s);
    }
    defineDecisionState(s) {
        this.decisionToState.push(s);
        s.decision = this.decisionToState.length - 1;
        this.decisionToDFA.push(new DFA_1.DFA(s, s.decision));
        return s.decision;
    }
    getDecisionState(decision) {
        if (this.decisionToState.length > 0) {
            return this.decisionToState[decision];
        }
        return undefined;
    }
    get numberOfDecisions() {
        return this.decisionToState.length;
    }
    /**
     * Computes the set of input symbols which could follow ATN state number
     * `stateNumber` in the specified full `context`. This method
     * considers the complete parser context, but does not evaluate semantic
     * predicates (i.e. all predicates encountered during the calculation are
     * assumed true). If a path in the ATN exists from the starting state to the
     * {@link RuleStopState} of the outermost context without matching any
     * symbols, {@link Token#EOF} is added to the returned set.
     *
     * If `context` is `undefined`, it is treated as
     * {@link ParserRuleContext#EMPTY}.
     *
     * Note that this does NOT give you the set of all tokens that could
     * appear at a given token position in the input phrase.  In other words, it
     * does not answer:
     *
     * > Given a specific partial input phrase, return the set of all
     * > tokens that can follow the last token in the input phrase.
     *
     * The big difference is that with just the input, the parser could land
     * right in the middle of a lookahead decision. Getting all
     * *possible* tokens given a partial input stream is a separate
     * computation. See https://github.com/antlr/antlr4/issues/1428
     *
     * For this function, we are specifying an ATN state and call stack to
     * compute what token(s) can come next and specifically: outside of a
     * lookahead decision. That is what you want for error reporting and
     * recovery upon parse error.
     *
     * @param stateNumber the ATN state number
     * @param context the full parse context
     * @returns The set of potentially valid input symbols which could follow the
     * specified state in the specified context.
     * @ if the ATN does not contain a state with
     * number `stateNumber`
     */
    getExpectedTokens(stateNumber, context) {
        if (stateNumber < 0 || stateNumber >= this.states.length) {
            throw new RangeError("Invalid state number.");
        }
        let ctx = context;
        let s = this.states[stateNumber];
        let following = this.nextTokens(s);
        if (!following.contains(Token_1.Token.EPSILON)) {
            return following;
        }
        let expected = new IntervalSet_1.IntervalSet();
        expected.addAll(following);
        expected.remove(Token_1.Token.EPSILON);
        while (ctx != null && ctx.invokingState >= 0 && following.contains(Token_1.Token.EPSILON)) {
            let invokingState = this.states[ctx.invokingState];
            let rt = invokingState.transition(0);
            following = this.nextTokens(rt.followState);
            expected.addAll(following);
            expected.remove(Token_1.Token.EPSILON);
            ctx = ctx._parent;
        }
        if (following.contains(Token_1.Token.EPSILON)) {
            expected.add(Token_1.Token.EOF);
        }
        return expected;
    }
};
__decorate([
    Decorators_1.NotNull
], ATN.prototype, "states", void 0);
__decorate([
    Decorators_1.NotNull
], ATN.prototype, "decisionToState", void 0);
__decorate([
    Decorators_1.NotNull
], ATN.prototype, "modeNameToStartState", void 0);
__decorate([
    Decorators_1.NotNull
], ATN.prototype, "modeToStartState", void 0);
__decorate([
    Decorators_1.NotNull
], ATN.prototype, "decisionToDFA", void 0);
__decorate([
    Decorators_1.NotNull
], ATN.prototype, "modeToDFA", void 0);
__decorate([
    Decorators_1.NotNull
], ATN.prototype, "nextTokens", null);
__decorate([
    __param(0, Decorators_1.NotNull)
], ATN.prototype, "removeState", null);
__decorate([
    __param(0, Decorators_1.NotNull), __param(1, Decorators_1.NotNull)
], ATN.prototype, "defineMode", null);
__decorate([
    __param(0, Decorators_1.NotNull)
], ATN.prototype, "defineDecisionState", null);
__decorate([
    Decorators_1.NotNull
], ATN.prototype, "getExpectedTokens", null);
ATN = __decorate([
    __param(0, Decorators_1.NotNull)
], ATN);
exports.ATN = ATN;
(function (ATN) {
    ATN.INVALID_ALT_NUMBER = 0;
})(ATN = exports.ATN || (exports.ATN = {}));
exports.ATN = ATN;
//# sourceMappingURL=ATN.js.map

/***/ }),

/***/ 735:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ATNConfig = void 0;
// ConvertTo-TS run at 2016-10-04T11:26:25.2796692-07:00
const Array2DHashMap_1 = __webpack_require__(2835);
const DecisionState_1 = __webpack_require__(4993);
const MurmurHash_1 = __webpack_require__(7789);
const Decorators_1 = __webpack_require__(681);
const ObjectEqualityComparator_1 = __webpack_require__(8578);
const PredictionContext_1 = __webpack_require__(1229);
const SemanticContext_1 = __webpack_require__(8300);
const assert = __webpack_require__(1696);
/**
 * This field stores the bit mask for implementing the
 * {@link #isPrecedenceFilterSuppressed} property as a bit within the
 * existing {@link #altAndOuterContextDepth} field.
 */
const SUPPRESS_PRECEDENCE_FILTER = 0x80000000;
/**
 * Represents a location with context in an ATN. The location is identified by the following values:
 *
 * * The current ATN state
 * * The predicted alternative
 * * The semantic context which must be true for this configuration to be enabled
 * * The syntactic context, which is represented as a graph-structured stack whose path(s) lead to the root of the rule
 *   invocations leading to this state
 *
 * In addition to these values, `ATNConfig` stores several properties about paths taken to get to the location which
 * were added over time to help with performance, correctness, and/or debugging.
 *
 * * `reachesIntoOuterContext`:: Used to ensure semantic predicates are not evaluated in the wrong context.
 * * `hasPassedThroughNonGreedyDecision`: Used for enabling first-match-wins instead of longest-match-wins after
 *   crossing a non-greedy decision.
 * * `lexerActionExecutor`: Used for tracking the lexer action(s) to execute should this instance be selected during
 *   lexing.
 * * `isPrecedenceFilterSuppressed`: A state variable for one of the dynamic disambiguation strategies employed by
 *   `ParserATNSimulator.applyPrecedenceFilter`.
 *
 * Due to the use of a graph-structured stack, a single `ATNConfig` is capable of representing many individual ATN
 * configurations which reached the same location in an ATN by following different paths.
 *
 * PERF: To conserve memory, `ATNConfig` is split into several different concrete types. `ATNConfig` itself stores the
 * minimum amount of information typically used to define an `ATNConfig` instance. Various derived types provide
 * additional storage space for cases where a non-default value is used for some of the object properties. The
 * `ATNConfig.create` and `ATNConfig.transform` methods automatically select the smallest concrete type capable of
 * representing the unique information for any given `ATNConfig`.
 */
let ATNConfig = class ATNConfig {
    constructor(state, altOrConfig, context) {
        if (typeof altOrConfig === "number") {
            assert((altOrConfig & 0xFFFFFF) === altOrConfig);
            this._state = state;
            this.altAndOuterContextDepth = altOrConfig;
            this._context = context;
        }
        else {
            this._state = state;
            this.altAndOuterContextDepth = altOrConfig.altAndOuterContextDepth;
            this._context = context;
        }
    }
    static create(state, alt, context, semanticContext = SemanticContext_1.SemanticContext.NONE, lexerActionExecutor) {
        if (semanticContext !== SemanticContext_1.SemanticContext.NONE) {
            if (lexerActionExecutor != null) {
                return new ActionSemanticContextATNConfig(lexerActionExecutor, semanticContext, state, alt, context, false);
            }
            else {
                return new SemanticContextATNConfig(semanticContext, state, alt, context);
            }
        }
        else if (lexerActionExecutor != null) {
            return new ActionATNConfig(lexerActionExecutor, state, alt, context, false);
        }
        else {
            return new ATNConfig(state, alt, context);
        }
    }
    /** Gets the ATN state associated with this configuration */
    get state() {
        return this._state;
    }
    /** What alt (or lexer rule) is predicted by this configuration */
    get alt() {
        return this.altAndOuterContextDepth & 0x00FFFFFF;
    }
    get context() {
        return this._context;
    }
    set context(context) {
        this._context = context;
    }
    get reachesIntoOuterContext() {
        return this.outerContextDepth !== 0;
    }
    /**
     * We cannot execute predicates dependent upon local context unless
     * we know for sure we are in the correct context. Because there is
     * no way to do this efficiently, we simply cannot evaluate
     * dependent predicates unless we are in the rule that initially
     * invokes the ATN simulator.
     *
     * closure() tracks the depth of how far we dip into the outer context:
     * depth &gt; 0.  Note that it may not be totally accurate depth since I
     * don't ever decrement. TODO: make it a boolean then
     */
    get outerContextDepth() {
        return (this.altAndOuterContextDepth >>> 24) & 0x7F;
    }
    set outerContextDepth(outerContextDepth) {
        assert(outerContextDepth >= 0);
        // saturate at 0x7F - everything but zero/positive is only used for debug information anyway
        outerContextDepth = Math.min(outerContextDepth, 0x7F);
        this.altAndOuterContextDepth = ((outerContextDepth << 24) | (this.altAndOuterContextDepth & ~0x7F000000) >>> 0);
    }
    get lexerActionExecutor() {
        return undefined;
    }
    get semanticContext() {
        return SemanticContext_1.SemanticContext.NONE;
    }
    get hasPassedThroughNonGreedyDecision() {
        return false;
    }
    clone() {
        return this.transform(this.state, false);
    }
    transform(/*@NotNull*/ state, checkNonGreedy, arg2) {
        if (arg2 == null) {
            return this.transformImpl(state, this._context, this.semanticContext, checkNonGreedy, this.lexerActionExecutor);
        }
        else if (arg2 instanceof PredictionContext_1.PredictionContext) {
            return this.transformImpl(state, arg2, this.semanticContext, checkNonGreedy, this.lexerActionExecutor);
        }
        else if (arg2 instanceof SemanticContext_1.SemanticContext) {
            return this.transformImpl(state, this._context, arg2, checkNonGreedy, this.lexerActionExecutor);
        }
        else {
            return this.transformImpl(state, this._context, this.semanticContext, checkNonGreedy, arg2);
        }
    }
    transformImpl(state, context, semanticContext, checkNonGreedy, lexerActionExecutor) {
        let passedThroughNonGreedy = checkNonGreedy && ATNConfig.checkNonGreedyDecision(this, state);
        if (semanticContext !== SemanticContext_1.SemanticContext.NONE) {
            if (lexerActionExecutor != null || passedThroughNonGreedy) {
                return new ActionSemanticContextATNConfig(lexerActionExecutor, semanticContext, state, this, context, passedThroughNonGreedy);
            }
            else {
                return new SemanticContextATNConfig(semanticContext, state, this, context);
            }
        }
        else if (lexerActionExecutor != null || passedThroughNonGreedy) {
            return new ActionATNConfig(lexerActionExecutor, state, this, context, passedThroughNonGreedy);
        }
        else {
            return new ATNConfig(state, this, context);
        }
    }
    static checkNonGreedyDecision(source, target) {
        return source.hasPassedThroughNonGreedyDecision
            || target instanceof DecisionState_1.DecisionState && target.nonGreedy;
    }
    appendContext(context, contextCache) {
        if (typeof context === "number") {
            let appendedContext = this.context.appendSingleContext(context, contextCache);
            let result = this.transform(this.state, false, appendedContext);
            return result;
        }
        else {
            let appendedContext = this.context.appendContext(context, contextCache);
            let result = this.transform(this.state, false, appendedContext);
            return result;
        }
    }
    /**
     * Determines if this `ATNConfig` fully contains another `ATNConfig`.
     *
     * An ATN configuration represents a position (including context) in an ATN during parsing. Since `ATNConfig` stores
     * the context as a graph, a single `ATNConfig` instance is capable of representing many ATN configurations which
     * are all in the same "location" but have different contexts. These `ATNConfig` instances are again merged when
     * they are added to an `ATNConfigSet`. This method supports `ATNConfigSet.contains` by evaluating whether a
     * particular `ATNConfig` contains all of the ATN configurations represented by another `ATNConfig`.
     *
     * An `ATNConfig` _a_ contains another `ATNConfig` _b_ if all of the following conditions are met:
     *
     * * The configurations are in the same state (`state`)
     * * The configurations predict the same alternative (`alt`)
     * * The semantic context of _a_ implies the semantic context of _b_ (this method performs a weaker equality check)
     * * Joining the prediction contexts of _a_ and _b_ results in the prediction context of _a_
     *
     * This method implements a conservative approximation of containment. As a result, when this method returns `true`
     * it is known that parsing from `subconfig` can only recognize a subset of the inputs which can be recognized
     * starting at the current `ATNConfig`. However, due to the imprecise evaluation of implication for the semantic
     * contexts, no assumptions can be made about the relationship between the configurations when this method returns
     * `false`.
     *
     * @param subconfig The sub configuration.
     * @returns `true` if this configuration contains `subconfig`; otherwise, `false`.
     */
    contains(subconfig) {
        if (this.state.stateNumber !== subconfig.state.stateNumber
            || this.alt !== subconfig.alt
            || !this.semanticContext.equals(subconfig.semanticContext)) {
            return false;
        }
        let leftWorkList = [];
        let rightWorkList = [];
        leftWorkList.push(this.context);
        rightWorkList.push(subconfig.context);
        while (true) {
            let left = leftWorkList.pop();
            let right = rightWorkList.pop();
            if (!left || !right) {
                break;
            }
            if (left === right) {
                return true;
            }
            if (left.size < right.size) {
                return false;
            }
            if (right.isEmpty) {
                return left.hasEmpty;
            }
            else {
                for (let i = 0; i < right.size; i++) {
                    let index = left.findReturnState(right.getReturnState(i));
                    if (index < 0) {
                        // assumes invokingStates has no duplicate entries
                        return false;
                    }
                    leftWorkList.push(left.getParent(index));
                    rightWorkList.push(right.getParent(i));
                }
            }
        }
        return false;
    }
    get isPrecedenceFilterSuppressed() {
        return (this.altAndOuterContextDepth & SUPPRESS_PRECEDENCE_FILTER) !== 0;
    }
    set isPrecedenceFilterSuppressed(value) {
        if (value) {
            this.altAndOuterContextDepth |= SUPPRESS_PRECEDENCE_FILTER;
        }
        else {
            this.altAndOuterContextDepth &= ~SUPPRESS_PRECEDENCE_FILTER;
        }
    }
    /** An ATN configuration is equal to another if both have
     *  the same state, they predict the same alternative, and
     *  syntactic/semantic contexts are the same.
     */
    equals(o) {
        if (this === o) {
            return true;
        }
        else if (!(o instanceof ATNConfig)) {
            return false;
        }
        return this.state.stateNumber === o.state.stateNumber
            && this.alt === o.alt
            && this.reachesIntoOuterContext === o.reachesIntoOuterContext
            && this.context.equals(o.context)
            && this.semanticContext.equals(o.semanticContext)
            && this.isPrecedenceFilterSuppressed === o.isPrecedenceFilterSuppressed
            && this.hasPassedThroughNonGreedyDecision === o.hasPassedThroughNonGreedyDecision
            && ObjectEqualityComparator_1.ObjectEqualityComparator.INSTANCE.equals(this.lexerActionExecutor, o.lexerActionExecutor);
    }
    hashCode() {
        let hashCode = MurmurHash_1.MurmurHash.initialize(7);
        hashCode = MurmurHash_1.MurmurHash.update(hashCode, this.state.stateNumber);
        hashCode = MurmurHash_1.MurmurHash.update(hashCode, this.alt);
        hashCode = MurmurHash_1.MurmurHash.update(hashCode, this.reachesIntoOuterContext ? 1 : 0);
        hashCode = MurmurHash_1.MurmurHash.update(hashCode, this.context);
        hashCode = MurmurHash_1.MurmurHash.update(hashCode, this.semanticContext);
        hashCode = MurmurHash_1.MurmurHash.update(hashCode, this.hasPassedThroughNonGreedyDecision ? 1 : 0);
        hashCode = MurmurHash_1.MurmurHash.update(hashCode, this.lexerActionExecutor);
        hashCode = MurmurHash_1.MurmurHash.finish(hashCode, 7);
        return hashCode;
    }
    /**
     * Returns a graphical representation of the current `ATNConfig` in Graphviz format. The graph can be stored to a
     * **.dot** file and then rendered to an image using Graphviz.
     *
     * @returns A Graphviz graph representing the current `ATNConfig`.
     *
     * @see http://www.graphviz.org/
     */
    toDotString() {
        let builder = "";
        builder += ("digraph G {\n");
        builder += ("rankdir=LR;\n");
        let visited = new Array2DHashMap_1.Array2DHashMap(PredictionContext_1.PredictionContext.IdentityEqualityComparator.INSTANCE);
        let workList = [];
        function getOrAddContext(context) {
            let newNumber = visited.size;
            let result = visited.putIfAbsent(context, newNumber);
            if (result != null) {
                // Already saw this context
                return result;
            }
            workList.push(context);
            return newNumber;
        }
        workList.push(this.context);
        visited.put(this.context, 0);
        while (true) {
            let current = workList.pop();
            if (!current) {
                break;
            }
            for (let i = 0; i < current.size; i++) {
                builder += ("  s") + (getOrAddContext(current));
                builder += ("->");
                builder += ("s") + (getOrAddContext(current.getParent(i)));
                builder += ("[label=\"") + (current.getReturnState(i)) + ("\"];\n");
            }
        }
        builder += ("}\n");
        return builder.toString();
    }
    toString(recog, showAlt, showContext) {
        // Must check showContext before showAlt to preserve original overload behavior
        if (showContext == null) {
            showContext = showAlt != null;
        }
        if (showAlt == null) {
            showAlt = true;
        }
        let buf = "";
        // if (this.state.ruleIndex >= 0) {
        // 	if (recog != null) {
        // 		buf += (recog.ruleNames[this.state.ruleIndex] + ":");
        // 	} else {
        // 		buf += (this.state.ruleIndex + ":");
        // 	}
        // }
        let contexts;
        if (showContext) {
            contexts = this.context.toStrings(recog, this.state.stateNumber);
        }
        else {
            contexts = ["?"];
        }
        let first = true;
        for (let contextDesc of contexts) {
            if (first) {
                first = false;
            }
            else {
                buf += (", ");
            }
            buf += ("(");
            buf += (this.state);
            if (showAlt) {
                buf += (",");
                buf += (this.alt);
            }
            if (this.context) {
                buf += (",");
                buf += (contextDesc);
            }
            if (this.semanticContext !== SemanticContext_1.SemanticContext.NONE) {
                buf += (",");
                buf += (this.semanticContext);
            }
            if (this.reachesIntoOuterContext) {
                buf += (",up=") + (this.outerContextDepth);
            }
            buf += (")");
        }
        return buf.toString();
    }
};
__decorate([
    Decorators_1.NotNull
], ATNConfig.prototype, "_state", void 0);
__decorate([
    Decorators_1.NotNull
], ATNConfig.prototype, "_context", void 0);
__decorate([
    Decorators_1.NotNull
], ATNConfig.prototype, "state", null);
__decorate([
    Decorators_1.NotNull,
    __param(0, Decorators_1.NotNull)
], ATNConfig.prototype, "context", null);
__decorate([
    Decorators_1.NotNull
], ATNConfig.prototype, "semanticContext", null);
__decorate([
    Decorators_1.Override
], ATNConfig.prototype, "clone", null);
__decorate([
    __param(0, Decorators_1.NotNull), __param(2, Decorators_1.NotNull)
], ATNConfig.prototype, "transformImpl", null);
__decorate([
    Decorators_1.Override
], ATNConfig.prototype, "equals", null);
__decorate([
    Decorators_1.Override
], ATNConfig.prototype, "hashCode", null);
__decorate([
    __param(0, Decorators_1.NotNull), __param(3, Decorators_1.NotNull)
], ATNConfig, "create", null);
ATNConfig = __decorate([
    __param(0, Decorators_1.NotNull), __param(2, Decorators_1.NotNull)
], ATNConfig);
exports.ATNConfig = ATNConfig;
/**
 * This class was derived from `ATNConfig` purely as a memory optimization. It allows for the creation of an `ATNConfig`
 * with a non-default semantic context.
 *
 * See the `ATNConfig` documentation for more information about conserving memory through the use of several concrete
 * types.
 */
let SemanticContextATNConfig = class SemanticContextATNConfig extends ATNConfig {
    constructor(semanticContext, state, altOrConfig, context) {
        if (typeof altOrConfig === "number") {
            super(state, altOrConfig, context);
        }
        else {
            super(state, altOrConfig, context);
        }
        this._semanticContext = semanticContext;
    }
    get semanticContext() {
        return this._semanticContext;
    }
};
__decorate([
    Decorators_1.NotNull
], SemanticContextATNConfig.prototype, "_semanticContext", void 0);
__decorate([
    Decorators_1.Override
], SemanticContextATNConfig.prototype, "semanticContext", null);
SemanticContextATNConfig = __decorate([
    __param(1, Decorators_1.NotNull), __param(2, Decorators_1.NotNull)
], SemanticContextATNConfig);
/**
 * This class was derived from `ATNConfig` purely as a memory optimization. It allows for the creation of an `ATNConfig`
 * with a lexer action.
 *
 * See the `ATNConfig` documentation for more information about conserving memory through the use of several concrete
 * types.
 */
let ActionATNConfig = class ActionATNConfig extends ATNConfig {
    constructor(lexerActionExecutor, state, altOrConfig, context, passedThroughNonGreedyDecision) {
        if (typeof altOrConfig === "number") {
            super(state, altOrConfig, context);
        }
        else {
            super(state, altOrConfig, context);
            if (altOrConfig.semanticContext !== SemanticContext_1.SemanticContext.NONE) {
                throw new Error("Not supported");
            }
        }
        this._lexerActionExecutor = lexerActionExecutor;
        this.passedThroughNonGreedyDecision = passedThroughNonGreedyDecision;
    }
    get lexerActionExecutor() {
        return this._lexerActionExecutor;
    }
    get hasPassedThroughNonGreedyDecision() {
        return this.passedThroughNonGreedyDecision;
    }
};
__decorate([
    Decorators_1.Override
], ActionATNConfig.prototype, "lexerActionExecutor", null);
__decorate([
    Decorators_1.Override
], ActionATNConfig.prototype, "hasPassedThroughNonGreedyDecision", null);
ActionATNConfig = __decorate([
    __param(1, Decorators_1.NotNull), __param(2, Decorators_1.NotNull)
], ActionATNConfig);
/**
 * This class was derived from `SemanticContextATNConfig` purely as a memory optimization. It allows for the creation of
 * an `ATNConfig` with both a lexer action and a non-default semantic context.
 *
 * See the `ATNConfig` documentation for more information about conserving memory through the use of several concrete
 * types.
 */
let ActionSemanticContextATNConfig = class ActionSemanticContextATNConfig extends SemanticContextATNConfig {
    constructor(lexerActionExecutor, semanticContext, state, altOrConfig, context, passedThroughNonGreedyDecision) {
        if (typeof altOrConfig === "number") {
            super(semanticContext, state, altOrConfig, context);
        }
        else {
            super(semanticContext, state, altOrConfig, context);
        }
        this._lexerActionExecutor = lexerActionExecutor;
        this.passedThroughNonGreedyDecision = passedThroughNonGreedyDecision;
    }
    get lexerActionExecutor() {
        return this._lexerActionExecutor;
    }
    get hasPassedThroughNonGreedyDecision() {
        return this.passedThroughNonGreedyDecision;
    }
};
__decorate([
    Decorators_1.Override
], ActionSemanticContextATNConfig.prototype, "lexerActionExecutor", null);
__decorate([
    Decorators_1.Override
], ActionSemanticContextATNConfig.prototype, "hasPassedThroughNonGreedyDecision", null);
ActionSemanticContextATNConfig = __decorate([
    __param(1, Decorators_1.NotNull), __param(2, Decorators_1.NotNull)
], ActionSemanticContextATNConfig);
//# sourceMappingURL=ATNConfig.js.map

/***/ }),

/***/ 256:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ATNConfigSet = void 0;
// ConvertTo-TS run at 2016-10-04T11:26:25.5488013-07:00
const Array2DHashMap_1 = __webpack_require__(2835);
const Array2DHashSet_1 = __webpack_require__(5265);
const ArrayEqualityComparator_1 = __webpack_require__(4339);
const ATN_1 = __webpack_require__(8148);
const ATNConfig_1 = __webpack_require__(735);
const BitSet_1 = __webpack_require__(3300);
const Decorators_1 = __webpack_require__(681);
const ObjectEqualityComparator_1 = __webpack_require__(8578);
const PredictionContext_1 = __webpack_require__(1229);
const PredictionContextCache_1 = __webpack_require__(1435);
const SemanticContext_1 = __webpack_require__(8300);
const assert = __webpack_require__(1696);
const Utils = __webpack_require__(3070);
class KeyTypeEqualityComparer {
    hashCode(key) {
        return key.state ^ key.alt;
    }
    equals(a, b) {
        return a.state === b.state && a.alt === b.alt;
    }
}
KeyTypeEqualityComparer.INSTANCE = new KeyTypeEqualityComparer();
function NewKeyedConfigMap(map) {
    if (map) {
        return new Array2DHashMap_1.Array2DHashMap(map);
    }
    else {
        return new Array2DHashMap_1.Array2DHashMap(KeyTypeEqualityComparer.INSTANCE);
    }
}
/**
 * Represents a set of ATN configurations (see `ATNConfig`). As configurations are added to the set, they are merged
 * with other `ATNConfig` instances already in the set when possible using the graph-structured stack.
 *
 * An instance of this class represents the complete set of positions (with context) in an ATN which would be associated
 * with a single DFA state. Its internal representation is more complex than traditional state used for NFA to DFA
 * conversion due to performance requirements (both improving speed and reducing memory overhead) as well as supporting
 * features such as semantic predicates and non-greedy operators in a form to support ANTLR's prediction algorithm.
 *
 * @author Sam Harwell
 */
class ATNConfigSet {
    constructor(set, readonly) {
        this._uniqueAlt = 0;
        // Used in parser and lexer. In lexer, it indicates we hit a pred
        // while computing a closure operation.  Don't make a DFA state from this.
        this._hasSemanticContext = false;
        this._dipsIntoOuterContext = false;
        /**
         * When `true`, this config set represents configurations where the entire
         * outer context has been consumed by the ATN interpreter. This prevents the
         * {@link ParserATNSimulator#closure} from pursuing the global FOLLOW when a
         * rule stop state is reached with an empty prediction context.
         *
         * Note: `outermostConfigSet` and {@link #dipsIntoOuterContext} should never
         * be true at the same time.
         */
        this.outermostConfigSet = false;
        this.cachedHashCode = -1;
        if (!set) {
            this.mergedConfigs = NewKeyedConfigMap();
            this.unmerged = [];
            this.configs = [];
            this._uniqueAlt = ATN_1.ATN.INVALID_ALT_NUMBER;
        }
        else {
            if (readonly) {
                this.mergedConfigs = undefined;
                this.unmerged = undefined;
            }
            else if (!set.isReadOnly) {
                this.mergedConfigs = NewKeyedConfigMap(set.mergedConfigs);
                this.unmerged = set.unmerged.slice(0);
            }
            else {
                this.mergedConfigs = NewKeyedConfigMap();
                this.unmerged = [];
            }
            this.configs = set.configs.slice(0);
            this._dipsIntoOuterContext = set._dipsIntoOuterContext;
            this._hasSemanticContext = set._hasSemanticContext;
            this.outermostConfigSet = set.outermostConfigSet;
            if (readonly || !set.isReadOnly) {
                this._uniqueAlt = set._uniqueAlt;
                this._conflictInfo = set._conflictInfo;
            }
            // if (!readonly && set.isReadOnly) -> addAll is called from clone()
        }
    }
    /**
     * Get the set of all alternatives represented by configurations in this
     * set.
     */
    getRepresentedAlternatives() {
        if (this._conflictInfo != null) {
            return this._conflictInfo.conflictedAlts.clone();
        }
        let alts = new BitSet_1.BitSet();
        for (let config of this) {
            alts.set(config.alt);
        }
        return alts;
    }
    get isReadOnly() {
        return this.mergedConfigs == null;
    }
    get isOutermostConfigSet() {
        return this.outermostConfigSet;
    }
    set isOutermostConfigSet(outermostConfigSet) {
        if (this.outermostConfigSet && !outermostConfigSet) {
            throw new Error("IllegalStateException");
        }
        assert(!outermostConfigSet || !this._dipsIntoOuterContext);
        this.outermostConfigSet = outermostConfigSet;
    }
    getStates() {
        let states = new Array2DHashSet_1.Array2DHashSet(ObjectEqualityComparator_1.ObjectEqualityComparator.INSTANCE);
        for (let c of this.configs) {
            states.add(c.state);
        }
        return states;
    }
    optimizeConfigs(interpreter) {
        if (this.configs.length === 0) {
            return;
        }
        for (let config of this.configs) {
            config.context = interpreter.atn.getCachedContext(config.context);
        }
    }
    clone(readonly) {
        let copy = new ATNConfigSet(this, readonly);
        if (!readonly && this.isReadOnly) {
            copy.addAll(this.configs);
        }
        return copy;
    }
    get size() {
        return this.configs.length;
    }
    get isEmpty() {
        return this.configs.length === 0;
    }
    contains(o) {
        if (!(o instanceof ATNConfig_1.ATNConfig)) {
            return false;
        }
        if (this.mergedConfigs && this.unmerged) {
            let config = o;
            let configKey = this.getKey(config);
            let mergedConfig = this.mergedConfigs.get(configKey);
            if (mergedConfig != null && this.canMerge(config, configKey, mergedConfig)) {
                return mergedConfig.contains(config);
            }
            for (let c of this.unmerged) {
                if (c.contains(o)) {
                    return true;
                }
            }
        }
        else {
            for (let c of this.configs) {
                if (c.contains(o)) {
                    return true;
                }
            }
        }
        return false;
    }
    *[Symbol.iterator]() {
        yield* this.configs;
    }
    toArray() {
        return this.configs;
    }
    add(e, contextCache) {
        this.ensureWritable();
        if (!this.mergedConfigs || !this.unmerged) {
            throw new Error("Covered by ensureWritable but duplicated here for strict null check limitation");
        }
        assert(!this.outermostConfigSet || !e.reachesIntoOuterContext);
        if (contextCache == null) {
            contextCache = PredictionContextCache_1.PredictionContextCache.UNCACHED;
        }
        let addKey;
        let key = this.getKey(e);
        let mergedConfig = this.mergedConfigs.get(key);
        addKey = (mergedConfig == null);
        if (mergedConfig != null && this.canMerge(e, key, mergedConfig)) {
            mergedConfig.outerContextDepth = Math.max(mergedConfig.outerContextDepth, e.outerContextDepth);
            if (e.isPrecedenceFilterSuppressed) {
                mergedConfig.isPrecedenceFilterSuppressed = true;
            }
            let joined = PredictionContext_1.PredictionContext.join(mergedConfig.context, e.context, contextCache);
            this.updatePropertiesForMergedConfig(e);
            if (mergedConfig.context === joined) {
                return false;
            }
            mergedConfig.context = joined;
            return true;
        }
        for (let i = 0; i < this.unmerged.length; i++) {
            let unmergedConfig = this.unmerged[i];
            if (this.canMerge(e, key, unmergedConfig)) {
                unmergedConfig.outerContextDepth = Math.max(unmergedConfig.outerContextDepth, e.outerContextDepth);
                if (e.isPrecedenceFilterSuppressed) {
                    unmergedConfig.isPrecedenceFilterSuppressed = true;
                }
                let joined = PredictionContext_1.PredictionContext.join(unmergedConfig.context, e.context, contextCache);
                this.updatePropertiesForMergedConfig(e);
                if (unmergedConfig.context === joined) {
                    return false;
                }
                unmergedConfig.context = joined;
                if (addKey) {
                    this.mergedConfigs.put(key, unmergedConfig);
                    this.unmerged.splice(i, 1);
                }
                return true;
            }
        }
        this.configs.push(e);
        if (addKey) {
            this.mergedConfigs.put(key, e);
        }
        else {
            this.unmerged.push(e);
        }
        this.updatePropertiesForAddedConfig(e);
        return true;
    }
    updatePropertiesForMergedConfig(config) {
        // merged configs can't change the alt or semantic context
        this._dipsIntoOuterContext = this._dipsIntoOuterContext || config.reachesIntoOuterContext;
        assert(!this.outermostConfigSet || !this._dipsIntoOuterContext);
    }
    updatePropertiesForAddedConfig(config) {
        if (this.configs.length === 1) {
            this._uniqueAlt = config.alt;
        }
        else if (this._uniqueAlt !== config.alt) {
            this._uniqueAlt = ATN_1.ATN.INVALID_ALT_NUMBER;
        }
        this._hasSemanticContext = this._hasSemanticContext || !SemanticContext_1.SemanticContext.NONE.equals(config.semanticContext);
        this._dipsIntoOuterContext = this._dipsIntoOuterContext || config.reachesIntoOuterContext;
        assert(!this.outermostConfigSet || !this._dipsIntoOuterContext);
    }
    canMerge(left, leftKey, right) {
        if (left.state.stateNumber !== right.state.stateNumber) {
            return false;
        }
        if (leftKey.alt !== right.alt) {
            return false;
        }
        return left.semanticContext.equals(right.semanticContext);
    }
    getKey(e) {
        return { state: e.state.stateNumber, alt: e.alt };
    }
    containsAll(c) {
        for (let o of c) {
            if (!(o instanceof ATNConfig_1.ATNConfig)) {
                return false;
            }
            if (!this.contains(o)) {
                return false;
            }
        }
        return true;
    }
    addAll(c, contextCache) {
        this.ensureWritable();
        let changed = false;
        for (let group of c) {
            if (this.add(group, contextCache)) {
                changed = true;
            }
        }
        return changed;
    }
    clear() {
        this.ensureWritable();
        if (!this.mergedConfigs || !this.unmerged) {
            throw new Error("Covered by ensureWritable but duplicated here for strict null check limitation");
        }
        this.mergedConfigs.clear();
        this.unmerged.length = 0;
        this.configs.length = 0;
        this._dipsIntoOuterContext = false;
        this._hasSemanticContext = false;
        this._uniqueAlt = ATN_1.ATN.INVALID_ALT_NUMBER;
        this._conflictInfo = undefined;
    }
    equals(obj) {
        if (this === obj) {
            return true;
        }
        if (!(obj instanceof ATNConfigSet)) {
            return false;
        }
        return this.outermostConfigSet === obj.outermostConfigSet
            && Utils.equals(this._conflictInfo, obj._conflictInfo)
            && ArrayEqualityComparator_1.ArrayEqualityComparator.INSTANCE.equals(this.configs, obj.configs);
    }
    hashCode() {
        if (this.isReadOnly && this.cachedHashCode !== -1) {
            return this.cachedHashCode;
        }
        let hashCode = 1;
        hashCode = 5 * hashCode ^ (this.outermostConfigSet ? 1 : 0);
        hashCode = 5 * hashCode ^ ArrayEqualityComparator_1.ArrayEqualityComparator.INSTANCE.hashCode(this.configs);
        if (this.isReadOnly) {
            this.cachedHashCode = hashCode;
        }
        return hashCode;
    }
    toString(showContext) {
        if (showContext == null) {
            showContext = false;
        }
        let buf = "";
        let sortedConfigs = this.configs.slice(0);
        sortedConfigs.sort((o1, o2) => {
            if (o1.alt !== o2.alt) {
                return o1.alt - o2.alt;
            }
            else if (o1.state.stateNumber !== o2.state.stateNumber) {
                return o1.state.stateNumber - o2.state.stateNumber;
            }
            else {
                return o1.semanticContext.toString().localeCompare(o2.semanticContext.toString());
            }
        });
        buf += ("[");
        for (let i = 0; i < sortedConfigs.length; i++) {
            if (i > 0) {
                buf += (", ");
            }
            buf += (sortedConfigs[i].toString(undefined, true, showContext));
        }
        buf += ("]");
        if (this._hasSemanticContext) {
            buf += (",hasSemanticContext=") + (this._hasSemanticContext);
        }
        if (this._uniqueAlt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
            buf += (",uniqueAlt=") + (this._uniqueAlt);
        }
        if (this._conflictInfo != null) {
            buf += (",conflictingAlts=") + (this._conflictInfo.conflictedAlts);
            if (!this._conflictInfo.isExact) {
                buf += ("*");
            }
        }
        if (this._dipsIntoOuterContext) {
            buf += (",dipsIntoOuterContext");
        }
        return buf.toString();
    }
    get uniqueAlt() {
        return this._uniqueAlt;
    }
    get hasSemanticContext() {
        return this._hasSemanticContext;
    }
    set hasSemanticContext(value) {
        this.ensureWritable();
        this._hasSemanticContext = value;
    }
    get conflictInfo() {
        return this._conflictInfo;
    }
    set conflictInfo(conflictInfo) {
        this.ensureWritable();
        this._conflictInfo = conflictInfo;
    }
    get conflictingAlts() {
        if (this._conflictInfo == null) {
            return undefined;
        }
        return this._conflictInfo.conflictedAlts;
    }
    get isExactConflict() {
        if (this._conflictInfo == null) {
            return false;
        }
        return this._conflictInfo.isExact;
    }
    get dipsIntoOuterContext() {
        return this._dipsIntoOuterContext;
    }
    get(index) {
        return this.configs[index];
    }
    ensureWritable() {
        if (this.isReadOnly) {
            throw new Error("This ATNConfigSet is read only.");
        }
    }
}
__decorate([
    Decorators_1.NotNull
], ATNConfigSet.prototype, "getRepresentedAlternatives", null);
__decorate([
    Decorators_1.Override
], ATNConfigSet.prototype, "size", null);
__decorate([
    Decorators_1.Override
], ATNConfigSet.prototype, "isEmpty", null);
__decorate([
    Decorators_1.Override
], ATNConfigSet.prototype, "contains", null);
__decorate([
    Decorators_1.Override
], ATNConfigSet.prototype, Symbol.iterator, null);
__decorate([
    Decorators_1.Override
], ATNConfigSet.prototype, "toArray", null);
__decorate([
    Decorators_1.Override
], ATNConfigSet.prototype, "containsAll", null);
__decorate([
    Decorators_1.Override
], ATNConfigSet.prototype, "clear", null);
__decorate([
    Decorators_1.Override
], ATNConfigSet.prototype, "equals", null);
__decorate([
    Decorators_1.Override
], ATNConfigSet.prototype, "hashCode", null);
exports.ATNConfigSet = ATNConfigSet;
//# sourceMappingURL=ATNConfigSet.js.map

/***/ }),

/***/ 4258:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ATNDeserializationOptions = void 0;
// ConvertTo-TS run at 2016-10-04T11:26:25.8187912-07:00
const Decorators_1 = __webpack_require__(681);
/**
 *
 * @author Sam Harwell
 */
class ATNDeserializationOptions {
    constructor(options) {
        this.readOnly = false;
        if (options) {
            this.verifyATN = options.verifyATN;
            this.generateRuleBypassTransitions = options.generateRuleBypassTransitions;
            this.optimize = options.optimize;
        }
        else {
            this.verifyATN = true;
            this.generateRuleBypassTransitions = false;
            this.optimize = true;
        }
    }
    static get defaultOptions() {
        if (ATNDeserializationOptions._defaultOptions == null) {
            ATNDeserializationOptions._defaultOptions = new ATNDeserializationOptions();
            ATNDeserializationOptions._defaultOptions.makeReadOnly();
        }
        return ATNDeserializationOptions._defaultOptions;
    }
    get isReadOnly() {
        return this.readOnly;
    }
    makeReadOnly() {
        this.readOnly = true;
    }
    get isVerifyATN() {
        return this.verifyATN;
    }
    set isVerifyATN(verifyATN) {
        this.throwIfReadOnly();
        this.verifyATN = verifyATN;
    }
    get isGenerateRuleBypassTransitions() {
        return this.generateRuleBypassTransitions;
    }
    set isGenerateRuleBypassTransitions(generateRuleBypassTransitions) {
        this.throwIfReadOnly();
        this.generateRuleBypassTransitions = generateRuleBypassTransitions;
    }
    get isOptimize() {
        return this.optimize;
    }
    set isOptimize(optimize) {
        this.throwIfReadOnly();
        this.optimize = optimize;
    }
    throwIfReadOnly() {
        if (this.isReadOnly) {
            throw new Error("The object is read only.");
        }
    }
}
__decorate([
    Decorators_1.NotNull
], ATNDeserializationOptions, "defaultOptions", null);
exports.ATNDeserializationOptions = ATNDeserializationOptions;
//# sourceMappingURL=ATNDeserializationOptions.js.map

/***/ }),

/***/ 6349:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
/* provided dependency */ var console = __webpack_require__(3716);

/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ATNDeserializer = void 0;
// ConvertTo-TS run at 2016-10-04T11:26:25.9683447-07:00
const ActionTransition_1 = __webpack_require__(7766);
const Array2DHashSet_1 = __webpack_require__(5265);
const ATN_1 = __webpack_require__(8148);
const ATNDeserializationOptions_1 = __webpack_require__(4258);
const ATNStateType_1 = __webpack_require__(9602);
const AtomTransition_1 = __webpack_require__(981);
const BasicBlockStartState_1 = __webpack_require__(6193);
const BasicState_1 = __webpack_require__(4546);
const BitSet_1 = __webpack_require__(3300);
const BlockEndState_1 = __webpack_require__(3328);
const BlockStartState_1 = __webpack_require__(9954);
const DecisionState_1 = __webpack_require__(4993);
const DFA_1 = __webpack_require__(1707);
const EpsilonTransition_1 = __webpack_require__(7973);
const IntervalSet_1 = __webpack_require__(5462);
const InvalidState_1 = __webpack_require__(7678);
const LexerChannelAction_1 = __webpack_require__(2247);
const LexerCustomAction_1 = __webpack_require__(4743);
const LexerModeAction_1 = __webpack_require__(6452);
const LexerMoreAction_1 = __webpack_require__(5974);
const LexerPopModeAction_1 = __webpack_require__(1349);
const LexerPushModeAction_1 = __webpack_require__(38);
const LexerSkipAction_1 = __webpack_require__(8680);
const LexerTypeAction_1 = __webpack_require__(4006);
const LoopEndState_1 = __webpack_require__(29);
const Decorators_1 = __webpack_require__(681);
const NotSetTransition_1 = __webpack_require__(845);
const ParserATNSimulator_1 = __webpack_require__(4217);
const PlusBlockStartState_1 = __webpack_require__(9815);
const PlusLoopbackState_1 = __webpack_require__(1232);
const PrecedencePredicateTransition_1 = __webpack_require__(8889);
const PredicateTransition_1 = __webpack_require__(1290);
const RangeTransition_1 = __webpack_require__(1369);
const RuleStartState_1 = __webpack_require__(8128);
const RuleStopState_1 = __webpack_require__(3776);
const RuleTransition_1 = __webpack_require__(5239);
const SetTransition_1 = __webpack_require__(4442);
const StarBlockStartState_1 = __webpack_require__(9678);
const StarLoopbackState_1 = __webpack_require__(4542);
const StarLoopEntryState_1 = __webpack_require__(4816);
const Token_1 = __webpack_require__(8999);
const TokensStartState_1 = __webpack_require__(3998);
const UUID_1 = __webpack_require__(8992);
const WildcardTransition_1 = __webpack_require__(401);
var UnicodeDeserializingMode;
(function (UnicodeDeserializingMode) {
    UnicodeDeserializingMode[UnicodeDeserializingMode["UNICODE_BMP"] = 0] = "UNICODE_BMP";
    UnicodeDeserializingMode[UnicodeDeserializingMode["UNICODE_SMP"] = 1] = "UNICODE_SMP";
})(UnicodeDeserializingMode || (UnicodeDeserializingMode = {}));
/**
 *
 * @author Sam Harwell
 */
class ATNDeserializer {
    constructor(deserializationOptions) {
        if (deserializationOptions === undefined) {
            deserializationOptions = ATNDeserializationOptions_1.ATNDeserializationOptions.defaultOptions;
        }
        this.deserializationOptions = deserializationOptions;
    }
    static get SERIALIZED_VERSION() {
        /* This value should never change. Updates following this version are
         * reflected as change in the unique ID SERIALIZED_UUID.
         */
        return 3;
    }
    /**
     * Determines if a particular serialized representation of an ATN supports
     * a particular feature, identified by the {@link UUID} used for serializing
     * the ATN at the time the feature was first introduced.
     *
     * @param feature The {@link UUID} marking the first time the feature was
     * supported in the serialized ATN.
     * @param actualUuid The {@link UUID} of the actual serialized ATN which is
     * currently being deserialized.
     * @returns `true` if the `actualUuid` value represents a
     * serialized ATN at or after the feature identified by `feature` was
     * introduced; otherwise, `false`.
     */
    static isFeatureSupported(feature, actualUuid) {
        let featureIndex = ATNDeserializer.SUPPORTED_UUIDS.findIndex((e) => e.equals(feature));
        if (featureIndex < 0) {
            return false;
        }
        return ATNDeserializer.SUPPORTED_UUIDS.findIndex((e) => e.equals(actualUuid)) >= featureIndex;
    }
    static getUnicodeDeserializer(mode) {
        if (mode === 0 /* UNICODE_BMP */) {
            return {
                readUnicode: (data, p) => {
                    return ATNDeserializer.toInt(data[p]);
                },
                size: 1,
            };
        }
        else {
            return {
                readUnicode: (data, p) => {
                    return ATNDeserializer.toInt32(data, p);
                },
                size: 2,
            };
        }
    }
    deserialize(data) {
        data = data.slice(0);
        // Each Uint16 value in data is shifted by +2 at the entry to this method. This is an encoding optimization
        // targeting the serialized values 0 and -1 (serialized to 0xFFFF), each of which are very common in the
        // serialized form of the ATN. In the modified UTF-8 that Java uses for compiled string literals, these two
        // character values have multi-byte forms. By shifting each value by +2, they become characters 2 and 1 prior to
        // writing the string, each of which have single-byte representations. Since the shift occurs in the tool during
        // ATN serialization, each target is responsible for adjusting the values during deserialization.
        //
        // As a special case, note that the first element of data is not adjusted because it contains the major version
        // number of the serialized ATN, which was fixed at 3 at the time the value shifting was implemented.
        for (let i = 1; i < data.length; i++) {
            data[i] = (data[i] - 2) & 0xFFFF;
        }
        let p = 0;
        let version = ATNDeserializer.toInt(data[p++]);
        if (version !== ATNDeserializer.SERIALIZED_VERSION) {
            let reason = `Could not deserialize ATN with version ${version} (expected ${ATNDeserializer.SERIALIZED_VERSION}).`;
            throw new Error(reason);
        }
        let uuid = ATNDeserializer.toUUID(data, p);
        p += 8;
        if (ATNDeserializer.SUPPORTED_UUIDS.findIndex((e) => e.equals(uuid)) < 0) {
            let reason = `Could not deserialize ATN with UUID ${uuid} (expected ${ATNDeserializer.SERIALIZED_UUID} or a legacy UUID).`;
            throw new Error(reason);
        }
        let supportsLexerActions = ATNDeserializer.isFeatureSupported(ATNDeserializer.ADDED_LEXER_ACTIONS, uuid);
        let grammarType = ATNDeserializer.toInt(data[p++]);
        let maxTokenType = ATNDeserializer.toInt(data[p++]);
        let atn = new ATN_1.ATN(grammarType, maxTokenType);
        //
        // STATES
        //
        let loopBackStateNumbers = [];
        let endStateNumbers = [];
        let nstates = ATNDeserializer.toInt(data[p++]);
        for (let i = 0; i < nstates; i++) {
            let stype = ATNDeserializer.toInt(data[p++]);
            // ignore bad type of states
            if (stype === ATNStateType_1.ATNStateType.INVALID_TYPE) {
                atn.addState(new InvalidState_1.InvalidState());
                continue;
            }
            let ruleIndex = ATNDeserializer.toInt(data[p++]);
            if (ruleIndex === 0xFFFF) {
                ruleIndex = -1;
            }
            let s = this.stateFactory(stype, ruleIndex);
            if (stype === ATNStateType_1.ATNStateType.LOOP_END) { // special case
                let loopBackStateNumber = ATNDeserializer.toInt(data[p++]);
                loopBackStateNumbers.push([s, loopBackStateNumber]);
            }
            else if (s instanceof BlockStartState_1.BlockStartState) {
                let endStateNumber = ATNDeserializer.toInt(data[p++]);
                endStateNumbers.push([s, endStateNumber]);
            }
            atn.addState(s);
        }
        // delay the assignment of loop back and end states until we know all the state instances have been initialized
        for (let pair of loopBackStateNumbers) {
            pair[0].loopBackState = atn.states[pair[1]];
        }
        for (let pair of endStateNumbers) {
            pair[0].endState = atn.states[pair[1]];
        }
        let numNonGreedyStates = ATNDeserializer.toInt(data[p++]);
        for (let i = 0; i < numNonGreedyStates; i++) {
            let stateNumber = ATNDeserializer.toInt(data[p++]);
            atn.states[stateNumber].nonGreedy = true;
        }
        let numSllDecisions = ATNDeserializer.toInt(data[p++]);
        for (let i = 0; i < numSllDecisions; i++) {
            let stateNumber = ATNDeserializer.toInt(data[p++]);
            atn.states[stateNumber].sll = true;
        }
        let numPrecedenceStates = ATNDeserializer.toInt(data[p++]);
        for (let i = 0; i < numPrecedenceStates; i++) {
            let stateNumber = ATNDeserializer.toInt(data[p++]);
            atn.states[stateNumber].isPrecedenceRule = true;
        }
        //
        // RULES
        //
        let nrules = ATNDeserializer.toInt(data[p++]);
        if (atn.grammarType === 0 /* LEXER */) {
            atn.ruleToTokenType = new Int32Array(nrules);
        }
        atn.ruleToStartState = new Array(nrules);
        for (let i = 0; i < nrules; i++) {
            let s = ATNDeserializer.toInt(data[p++]);
            let startState = atn.states[s];
            startState.leftFactored = ATNDeserializer.toInt(data[p++]) !== 0;
            atn.ruleToStartState[i] = startState;
            if (atn.grammarType === 0 /* LEXER */) {
                let tokenType = ATNDeserializer.toInt(data[p++]);
                if (tokenType === 0xFFFF) {
                    tokenType = Token_1.Token.EOF;
                }
                atn.ruleToTokenType[i] = tokenType;
                if (!ATNDeserializer.isFeatureSupported(ATNDeserializer.ADDED_LEXER_ACTIONS, uuid)) {
                    // this piece of unused metadata was serialized prior to the
                    // addition of LexerAction
                    let actionIndexIgnored = ATNDeserializer.toInt(data[p++]);
                    if (actionIndexIgnored === 0xFFFF) {
                        actionIndexIgnored = -1;
                    }
                }
            }
        }
        atn.ruleToStopState = new Array(nrules);
        for (let state of atn.states) {
            if (!(state instanceof RuleStopState_1.RuleStopState)) {
                continue;
            }
            atn.ruleToStopState[state.ruleIndex] = state;
            atn.ruleToStartState[state.ruleIndex].stopState = state;
        }
        //
        // MODES
        //
        let nmodes = ATNDeserializer.toInt(data[p++]);
        for (let i = 0; i < nmodes; i++) {
            let s = ATNDeserializer.toInt(data[p++]);
            atn.modeToStartState.push(atn.states[s]);
        }
        atn.modeToDFA = new Array(nmodes);
        for (let i = 0; i < nmodes; i++) {
            atn.modeToDFA[i] = new DFA_1.DFA(atn.modeToStartState[i]);
        }
        //
        // SETS
        //
        let sets = [];
        // First, read all sets with 16-bit Unicode code points <= U+FFFF.
        p = this.deserializeSets(data, p, sets, ATNDeserializer.getUnicodeDeserializer(0 /* UNICODE_BMP */));
        // Next, if the ATN was serialized with the Unicode SMP feature,
        // deserialize sets with 32-bit arguments <= U+10FFFF.
        if (ATNDeserializer.isFeatureSupported(ATNDeserializer.ADDED_UNICODE_SMP, uuid)) {
            p = this.deserializeSets(data, p, sets, ATNDeserializer.getUnicodeDeserializer(1 /* UNICODE_SMP */));
        }
        //
        // EDGES
        //
        let nedges = ATNDeserializer.toInt(data[p++]);
        for (let i = 0; i < nedges; i++) {
            let src = ATNDeserializer.toInt(data[p]);
            let trg = ATNDeserializer.toInt(data[p + 1]);
            let ttype = ATNDeserializer.toInt(data[p + 2]);
            let arg1 = ATNDeserializer.toInt(data[p + 3]);
            let arg2 = ATNDeserializer.toInt(data[p + 4]);
            let arg3 = ATNDeserializer.toInt(data[p + 5]);
            let trans = this.edgeFactory(atn, ttype, src, trg, arg1, arg2, arg3, sets);
            // console.log(`EDGE ${trans.constructor.name} ${src}->${trg} ${Transition.serializationNames[ttype]} ${arg1},${arg2},${arg3}`);
            let srcState = atn.states[src];
            srcState.addTransition(trans);
            p += 6;
        }
        let returnTransitionsSet = new Array2DHashSet_1.Array2DHashSet({
            hashCode: (o) => o.stopState ^ o.returnState ^ o.outermostPrecedenceReturn,
            equals: (a, b) => {
                return a.stopState === b.stopState
                    && a.returnState === b.returnState
                    && a.outermostPrecedenceReturn === b.outermostPrecedenceReturn;
            },
        });
        let returnTransitions = [];
        for (let state of atn.states) {
            let returningToLeftFactored = state.ruleIndex >= 0 && atn.ruleToStartState[state.ruleIndex].leftFactored;
            for (let i = 0; i < state.numberOfTransitions; i++) {
                let t = state.transition(i);
                if (!(t instanceof RuleTransition_1.RuleTransition)) {
                    continue;
                }
                let ruleTransition = t;
                let returningFromLeftFactored = atn.ruleToStartState[ruleTransition.target.ruleIndex].leftFactored;
                if (!returningFromLeftFactored && returningToLeftFactored) {
                    continue;
                }
                let outermostPrecedenceReturn = -1;
                if (atn.ruleToStartState[ruleTransition.target.ruleIndex].isPrecedenceRule) {
                    if (ruleTransition.precedence === 0) {
                        outermostPrecedenceReturn = ruleTransition.target.ruleIndex;
                    }
                }
                let current = { stopState: ruleTransition.target.ruleIndex, returnState: ruleTransition.followState.stateNumber, outermostPrecedenceReturn };
                if (returnTransitionsSet.add(current)) {
                    returnTransitions.push(current);
                }
            }
        }
        // Add all elements from returnTransitions to the ATN
        for (let returnTransition of returnTransitions) {
            let transition = new EpsilonTransition_1.EpsilonTransition(atn.states[returnTransition.returnState], returnTransition.outermostPrecedenceReturn);
            atn.ruleToStopState[returnTransition.stopState].addTransition(transition);
        }
        for (let state of atn.states) {
            if (state instanceof BlockStartState_1.BlockStartState) {
                // we need to know the end state to set its start state
                if (state.endState === undefined) {
                    throw new Error("IllegalStateException");
                }
                // block end states can only be associated to a single block start state
                if (state.endState.startState !== undefined) {
                    throw new Error("IllegalStateException");
                }
                state.endState.startState = state;
            }
            if (state instanceof PlusLoopbackState_1.PlusLoopbackState) {
                let loopbackState = state;
                for (let i = 0; i < loopbackState.numberOfTransitions; i++) {
                    let target = loopbackState.transition(i).target;
                    if (target instanceof PlusBlockStartState_1.PlusBlockStartState) {
                        target.loopBackState = loopbackState;
                    }
                }
            }
            else if (state instanceof StarLoopbackState_1.StarLoopbackState) {
                let loopbackState = state;
                for (let i = 0; i < loopbackState.numberOfTransitions; i++) {
                    let target = loopbackState.transition(i).target;
                    if (target instanceof StarLoopEntryState_1.StarLoopEntryState) {
                        target.loopBackState = loopbackState;
                    }
                }
            }
        }
        //
        // DECISIONS
        //
        let ndecisions = ATNDeserializer.toInt(data[p++]);
        for (let i = 1; i <= ndecisions; i++) {
            let s = ATNDeserializer.toInt(data[p++]);
            let decState = atn.states[s];
            atn.decisionToState.push(decState);
            decState.decision = i - 1;
        }
        //
        // LEXER ACTIONS
        //
        if (atn.grammarType === 0 /* LEXER */) {
            if (supportsLexerActions) {
                atn.lexerActions = new Array(ATNDeserializer.toInt(data[p++]));
                for (let i = 0; i < atn.lexerActions.length; i++) {
                    let actionType = ATNDeserializer.toInt(data[p++]);
                    let data1 = ATNDeserializer.toInt(data[p++]);
                    if (data1 === 0xFFFF) {
                        data1 = -1;
                    }
                    let data2 = ATNDeserializer.toInt(data[p++]);
                    if (data2 === 0xFFFF) {
                        data2 = -1;
                    }
                    let lexerAction = this.lexerActionFactory(actionType, data1, data2);
                    atn.lexerActions[i] = lexerAction;
                }
            }
            else {
                // for compatibility with older serialized ATNs, convert the old
                // serialized action index for action transitions to the new
                // form, which is the index of a LexerCustomAction
                let legacyLexerActions = [];
                for (let state of atn.states) {
                    for (let i = 0; i < state.numberOfTransitions; i++) {
                        let transition = state.transition(i);
                        if (!(transition instanceof ActionTransition_1.ActionTransition)) {
                            continue;
                        }
                        let ruleIndex = transition.ruleIndex;
                        let actionIndex = transition.actionIndex;
                        let lexerAction = new LexerCustomAction_1.LexerCustomAction(ruleIndex, actionIndex);
                        state.setTransition(i, new ActionTransition_1.ActionTransition(transition.target, ruleIndex, legacyLexerActions.length, false));
                        legacyLexerActions.push(lexerAction);
                    }
                }
                atn.lexerActions = legacyLexerActions;
            }
        }
        this.markPrecedenceDecisions(atn);
        atn.decisionToDFA = new Array(ndecisions);
        for (let i = 0; i < ndecisions; i++) {
            atn.decisionToDFA[i] = new DFA_1.DFA(atn.decisionToState[i], i);
        }
        if (this.deserializationOptions.isVerifyATN) {
            this.verifyATN(atn);
        }
        if (this.deserializationOptions.isGenerateRuleBypassTransitions && atn.grammarType === 1 /* PARSER */) {
            atn.ruleToTokenType = new Int32Array(atn.ruleToStartState.length);
            for (let i = 0; i < atn.ruleToStartState.length; i++) {
                atn.ruleToTokenType[i] = atn.maxTokenType + i + 1;
            }
            for (let i = 0; i < atn.ruleToStartState.length; i++) {
                let bypassStart = new BasicBlockStartState_1.BasicBlockStartState();
                bypassStart.ruleIndex = i;
                atn.addState(bypassStart);
                let bypassStop = new BlockEndState_1.BlockEndState();
                bypassStop.ruleIndex = i;
                atn.addState(bypassStop);
                bypassStart.endState = bypassStop;
                atn.defineDecisionState(bypassStart);
                bypassStop.startState = bypassStart;
                let endState;
                let excludeTransition;
                if (atn.ruleToStartState[i].isPrecedenceRule) {
                    // wrap from the beginning of the rule to the StarLoopEntryState
                    endState = undefined;
                    for (let state of atn.states) {
                        if (state.ruleIndex !== i) {
                            continue;
                        }
                        if (!(state instanceof StarLoopEntryState_1.StarLoopEntryState)) {
                            continue;
                        }
                        let maybeLoopEndState = state.transition(state.numberOfTransitions - 1).target;
                        if (!(maybeLoopEndState instanceof LoopEndState_1.LoopEndState)) {
                            continue;
                        }
                        if (maybeLoopEndState.epsilonOnlyTransitions && maybeLoopEndState.transition(0).target instanceof RuleStopState_1.RuleStopState) {
                            endState = state;
                            break;
                        }
                    }
                    if (!endState) {
                        throw new Error("Couldn't identify final state of the precedence rule prefix section.");
                    }
                    excludeTransition = endState.loopBackState.transition(0);
                }
                else {
                    endState = atn.ruleToStopState[i];
                }
                // all non-excluded transitions that currently target end state need to target blockEnd instead
                for (let state of atn.states) {
                    for (let i = 0; i < state.numberOfTransitions; i++) {
                        let transition = state.transition(i);
                        if (transition === excludeTransition) {
                            continue;
                        }
                        if (transition.target === endState) {
                            transition.target = bypassStop;
                        }
                    }
                }
                // all transitions leaving the rule start state need to leave blockStart instead
                while (atn.ruleToStartState[i].numberOfTransitions > 0) {
                    let transition = atn.ruleToStartState[i].removeTransition(atn.ruleToStartState[i].numberOfTransitions - 1);
                    bypassStart.addTransition(transition);
                }
                // link the new states
                atn.ruleToStartState[i].addTransition(new EpsilonTransition_1.EpsilonTransition(bypassStart));
                bypassStop.addTransition(new EpsilonTransition_1.EpsilonTransition(endState));
                let matchState = new BasicState_1.BasicState();
                atn.addState(matchState);
                matchState.addTransition(new AtomTransition_1.AtomTransition(bypassStop, atn.ruleToTokenType[i]));
                bypassStart.addTransition(new EpsilonTransition_1.EpsilonTransition(matchState));
            }
            if (this.deserializationOptions.isVerifyATN) {
                // reverify after modification
                this.verifyATN(atn);
            }
        }
        if (this.deserializationOptions.isOptimize) {
            while (true) {
                let optimizationCount = 0;
                optimizationCount += ATNDeserializer.inlineSetRules(atn);
                optimizationCount += ATNDeserializer.combineChainedEpsilons(atn);
                let preserveOrder = atn.grammarType === 0 /* LEXER */;
                optimizationCount += ATNDeserializer.optimizeSets(atn, preserveOrder);
                if (optimizationCount === 0) {
                    break;
                }
            }
            if (this.deserializationOptions.isVerifyATN) {
                // reverify after modification
                this.verifyATN(atn);
            }
        }
        ATNDeserializer.identifyTailCalls(atn);
        return atn;
    }
    deserializeSets(data, p, sets, unicodeDeserializer) {
        let nsets = ATNDeserializer.toInt(data[p++]);
        for (let i = 0; i < nsets; i++) {
            let nintervals = ATNDeserializer.toInt(data[p]);
            p++;
            let set = new IntervalSet_1.IntervalSet();
            sets.push(set);
            let containsEof = ATNDeserializer.toInt(data[p++]) !== 0;
            if (containsEof) {
                set.add(-1);
            }
            for (let j = 0; j < nintervals; j++) {
                let a = unicodeDeserializer.readUnicode(data, p);
                p += unicodeDeserializer.size;
                let b = unicodeDeserializer.readUnicode(data, p);
                p += unicodeDeserializer.size;
                set.add(a, b);
            }
        }
        return p;
    }
    /**
     * Analyze the {@link StarLoopEntryState} states in the specified ATN to set
     * the {@link StarLoopEntryState#precedenceRuleDecision} field to the
     * correct value.
     *
     * @param atn The ATN.
     */
    markPrecedenceDecisions(atn) {
        // Map rule index -> precedence decision for that rule
        let rulePrecedenceDecisions = new Map();
        for (let state of atn.states) {
            if (!(state instanceof StarLoopEntryState_1.StarLoopEntryState)) {
                continue;
            }
            /* We analyze the ATN to determine if this ATN decision state is the
             * decision for the closure block that determines whether a
             * precedence rule should continue or complete.
             */
            if (atn.ruleToStartState[state.ruleIndex].isPrecedenceRule) {
                let maybeLoopEndState = state.transition(state.numberOfTransitions - 1).target;
                if (maybeLoopEndState instanceof LoopEndState_1.LoopEndState) {
                    if (maybeLoopEndState.epsilonOnlyTransitions && maybeLoopEndState.transition(0).target instanceof RuleStopState_1.RuleStopState) {
                        rulePrecedenceDecisions.set(state.ruleIndex, state);
                        state.precedenceRuleDecision = true;
                        state.precedenceLoopbackStates = new BitSet_1.BitSet(atn.states.length);
                    }
                }
            }
        }
        // After marking precedence decisions, we go back through and fill in
        // StarLoopEntryState.precedenceLoopbackStates.
        for (let precedenceDecision of rulePrecedenceDecisions) {
            for (let transition of atn.ruleToStopState[precedenceDecision[0]].getTransitions()) {
                if (transition.serializationType !== 1 /* EPSILON */) {
                    continue;
                }
                let epsilonTransition = transition;
                if (epsilonTransition.outermostPrecedenceReturn !== -1) {
                    continue;
                }
                precedenceDecision[1].precedenceLoopbackStates.set(transition.target.stateNumber);
            }
        }
    }
    verifyATN(atn) {
        // verify assumptions
        for (let state of atn.states) {
            this.checkCondition(state !== undefined, "ATN states should not be undefined.");
            if (state.stateType === ATNStateType_1.ATNStateType.INVALID_TYPE) {
                continue;
            }
            this.checkCondition(state.onlyHasEpsilonTransitions || state.numberOfTransitions <= 1);
            if (state instanceof PlusBlockStartState_1.PlusBlockStartState) {
                this.checkCondition(state.loopBackState !== undefined);
            }
            if (state instanceof StarLoopEntryState_1.StarLoopEntryState) {
                let starLoopEntryState = state;
                this.checkCondition(starLoopEntryState.loopBackState !== undefined);
                this.checkCondition(starLoopEntryState.numberOfTransitions === 2);
                if (starLoopEntryState.transition(0).target instanceof StarBlockStartState_1.StarBlockStartState) {
                    this.checkCondition(starLoopEntryState.transition(1).target instanceof LoopEndState_1.LoopEndState);
                    this.checkCondition(!starLoopEntryState.nonGreedy);
                }
                else if (starLoopEntryState.transition(0).target instanceof LoopEndState_1.LoopEndState) {
                    this.checkCondition(starLoopEntryState.transition(1).target instanceof StarBlockStartState_1.StarBlockStartState);
                    this.checkCondition(starLoopEntryState.nonGreedy);
                }
                else {
                    throw new Error("IllegalStateException");
                }
            }
            if (state instanceof StarLoopbackState_1.StarLoopbackState) {
                this.checkCondition(state.numberOfTransitions === 1);
                this.checkCondition(state.transition(0).target instanceof StarLoopEntryState_1.StarLoopEntryState);
            }
            if (state instanceof LoopEndState_1.LoopEndState) {
                this.checkCondition(state.loopBackState !== undefined);
            }
            if (state instanceof RuleStartState_1.RuleStartState) {
                this.checkCondition(state.stopState !== undefined);
            }
            if (state instanceof BlockStartState_1.BlockStartState) {
                this.checkCondition(state.endState !== undefined);
            }
            if (state instanceof BlockEndState_1.BlockEndState) {
                this.checkCondition(state.startState !== undefined);
            }
            if (state instanceof DecisionState_1.DecisionState) {
                let decisionState = state;
                this.checkCondition(decisionState.numberOfTransitions <= 1 || decisionState.decision >= 0);
            }
            else {
                this.checkCondition(state.numberOfTransitions <= 1 || state instanceof RuleStopState_1.RuleStopState);
            }
        }
    }
    checkCondition(condition, message) {
        if (!condition) {
            throw new Error("IllegalStateException: " + message);
        }
    }
    static inlineSetRules(atn) {
        let inlinedCalls = 0;
        let ruleToInlineTransition = new Array(atn.ruleToStartState.length);
        for (let i = 0; i < atn.ruleToStartState.length; i++) {
            let startState = atn.ruleToStartState[i];
            let middleState = startState;
            while (middleState.onlyHasEpsilonTransitions
                && middleState.numberOfOptimizedTransitions === 1
                && middleState.getOptimizedTransition(0).serializationType === 1 /* EPSILON */) {
                middleState = middleState.getOptimizedTransition(0).target;
            }
            if (middleState.numberOfOptimizedTransitions !== 1) {
                continue;
            }
            let matchTransition = middleState.getOptimizedTransition(0);
            let matchTarget = matchTransition.target;
            if (matchTransition.isEpsilon
                || !matchTarget.onlyHasEpsilonTransitions
                || matchTarget.numberOfOptimizedTransitions !== 1
                || !(matchTarget.getOptimizedTransition(0).target instanceof RuleStopState_1.RuleStopState)) {
                continue;
            }
            switch (matchTransition.serializationType) {
                case 5 /* ATOM */:
                case 2 /* RANGE */:
                case 7 /* SET */:
                    ruleToInlineTransition[i] = matchTransition;
                    break;
                case 8 /* NOT_SET */:
                case 9 /* WILDCARD */:
                    // not implemented yet
                    continue;
                default:
                    continue;
            }
        }
        for (let state of atn.states) {
            if (state.ruleIndex < 0) {
                continue;
            }
            let optimizedTransitions;
            for (let i = 0; i < state.numberOfOptimizedTransitions; i++) {
                let transition = state.getOptimizedTransition(i);
                if (!(transition instanceof RuleTransition_1.RuleTransition)) {
                    if (optimizedTransitions !== undefined) {
                        optimizedTransitions.push(transition);
                    }
                    continue;
                }
                let ruleTransition = transition;
                let effective = ruleToInlineTransition[ruleTransition.target.ruleIndex];
                if (effective === undefined) {
                    if (optimizedTransitions !== undefined) {
                        optimizedTransitions.push(transition);
                    }
                    continue;
                }
                if (optimizedTransitions === undefined) {
                    optimizedTransitions = [];
                    for (let j = 0; j < i; j++) {
                        optimizedTransitions.push(state.getOptimizedTransition(i));
                    }
                }
                inlinedCalls++;
                let target = ruleTransition.followState;
                let intermediateState = new BasicState_1.BasicState();
                intermediateState.setRuleIndex(target.ruleIndex);
                atn.addState(intermediateState);
                optimizedTransitions.push(new EpsilonTransition_1.EpsilonTransition(intermediateState));
                switch (effective.serializationType) {
                    case 5 /* ATOM */:
                        intermediateState.addTransition(new AtomTransition_1.AtomTransition(target, effective._label));
                        break;
                    case 2 /* RANGE */:
                        intermediateState.addTransition(new RangeTransition_1.RangeTransition(target, effective.from, effective.to));
                        break;
                    case 7 /* SET */:
                        intermediateState.addTransition(new SetTransition_1.SetTransition(target, effective.label));
                        break;
                    default:
                        throw new Error("UnsupportedOperationException");
                }
            }
            if (optimizedTransitions !== undefined) {
                if (state.isOptimized) {
                    while (state.numberOfOptimizedTransitions > 0) {
                        state.removeOptimizedTransition(state.numberOfOptimizedTransitions - 1);
                    }
                }
                for (let transition of optimizedTransitions) {
                    state.addOptimizedTransition(transition);
                }
            }
        }
        if (ParserATNSimulator_1.ParserATNSimulator.debug) {
            console.log("ATN runtime optimizer removed " + inlinedCalls + " rule invocations by inlining sets.");
        }
        return inlinedCalls;
    }
    static combineChainedEpsilons(atn) {
        let removedEdges = 0;
        for (let state of atn.states) {
            if (!state.onlyHasEpsilonTransitions || state instanceof RuleStopState_1.RuleStopState) {
                continue;
            }
            let optimizedTransitions;
            nextTransition: for (let i = 0; i < state.numberOfOptimizedTransitions; i++) {
                let transition = state.getOptimizedTransition(i);
                let intermediate = transition.target;
                if (transition.serializationType !== 1 /* EPSILON */
                    || transition.outermostPrecedenceReturn !== -1
                    || intermediate.stateType !== ATNStateType_1.ATNStateType.BASIC
                    || !intermediate.onlyHasEpsilonTransitions) {
                    if (optimizedTransitions !== undefined) {
                        optimizedTransitions.push(transition);
                    }
                    continue nextTransition;
                }
                for (let j = 0; j < intermediate.numberOfOptimizedTransitions; j++) {
                    if (intermediate.getOptimizedTransition(j).serializationType !== 1 /* EPSILON */
                        || intermediate.getOptimizedTransition(j).outermostPrecedenceReturn !== -1) {
                        if (optimizedTransitions !== undefined) {
                            optimizedTransitions.push(transition);
                        }
                        continue nextTransition;
                    }
                }
                removedEdges++;
                if (optimizedTransitions === undefined) {
                    optimizedTransitions = [];
                    for (let j = 0; j < i; j++) {
                        optimizedTransitions.push(state.getOptimizedTransition(j));
                    }
                }
                for (let j = 0; j < intermediate.numberOfOptimizedTransitions; j++) {
                    let target = intermediate.getOptimizedTransition(j).target;
                    optimizedTransitions.push(new EpsilonTransition_1.EpsilonTransition(target));
                }
            }
            if (optimizedTransitions !== undefined) {
                if (state.isOptimized) {
                    while (state.numberOfOptimizedTransitions > 0) {
                        state.removeOptimizedTransition(state.numberOfOptimizedTransitions - 1);
                    }
                }
                for (let transition of optimizedTransitions) {
                    state.addOptimizedTransition(transition);
                }
            }
        }
        if (ParserATNSimulator_1.ParserATNSimulator.debug) {
            console.log("ATN runtime optimizer removed " + removedEdges + " transitions by combining chained epsilon transitions.");
        }
        return removedEdges;
    }
    static optimizeSets(atn, preserveOrder) {
        if (preserveOrder) {
            // this optimization currently doesn't preserve edge order.
            return 0;
        }
        let removedPaths = 0;
        let decisions = atn.decisionToState;
        for (let decision of decisions) {
            let setTransitions = new IntervalSet_1.IntervalSet();
            for (let i = 0; i < decision.numberOfOptimizedTransitions; i++) {
                let epsTransition = decision.getOptimizedTransition(i);
                if (!(epsTransition instanceof EpsilonTransition_1.EpsilonTransition)) {
                    continue;
                }
                if (epsTransition.target.numberOfOptimizedTransitions !== 1) {
                    continue;
                }
                let transition = epsTransition.target.getOptimizedTransition(0);
                if (!(transition.target instanceof BlockEndState_1.BlockEndState)) {
                    continue;
                }
                if (transition instanceof NotSetTransition_1.NotSetTransition) {
                    // TODO: not yet implemented
                    continue;
                }
                if (transition instanceof AtomTransition_1.AtomTransition
                    || transition instanceof RangeTransition_1.RangeTransition
                    || transition instanceof SetTransition_1.SetTransition) {
                    setTransitions.add(i);
                }
            }
            if (setTransitions.size <= 1) {
                continue;
            }
            let optimizedTransitions = [];
            for (let i = 0; i < decision.numberOfOptimizedTransitions; i++) {
                if (!setTransitions.contains(i)) {
                    optimizedTransitions.push(decision.getOptimizedTransition(i));
                }
            }
            let blockEndState = decision.getOptimizedTransition(setTransitions.minElement).target.getOptimizedTransition(0).target;
            let matchSet = new IntervalSet_1.IntervalSet();
            for (let interval of setTransitions.intervals) {
                for (let j = interval.a; j <= interval.b; j++) {
                    let matchTransition = decision.getOptimizedTransition(j).target.getOptimizedTransition(0);
                    if (matchTransition instanceof NotSetTransition_1.NotSetTransition) {
                        throw new Error("Not yet implemented.");
                    }
                    else {
                        matchSet.addAll(matchTransition.label);
                    }
                }
            }
            let newTransition;
            if (matchSet.intervals.length === 1) {
                if (matchSet.size === 1) {
                    newTransition = new AtomTransition_1.AtomTransition(blockEndState, matchSet.minElement);
                }
                else {
                    let matchInterval = matchSet.intervals[0];
                    newTransition = new RangeTransition_1.RangeTransition(blockEndState, matchInterval.a, matchInterval.b);
                }
            }
            else {
                newTransition = new SetTransition_1.SetTransition(blockEndState, matchSet);
            }
            let setOptimizedState = new BasicState_1.BasicState();
            setOptimizedState.setRuleIndex(decision.ruleIndex);
            atn.addState(setOptimizedState);
            setOptimizedState.addTransition(newTransition);
            optimizedTransitions.push(new EpsilonTransition_1.EpsilonTransition(setOptimizedState));
            removedPaths += decision.numberOfOptimizedTransitions - optimizedTransitions.length;
            if (decision.isOptimized) {
                while (decision.numberOfOptimizedTransitions > 0) {
                    decision.removeOptimizedTransition(decision.numberOfOptimizedTransitions - 1);
                }
            }
            for (let transition of optimizedTransitions) {
                decision.addOptimizedTransition(transition);
            }
        }
        if (ParserATNSimulator_1.ParserATNSimulator.debug) {
            console.log("ATN runtime optimizer removed " + removedPaths + " paths by collapsing sets.");
        }
        return removedPaths;
    }
    static identifyTailCalls(atn) {
        for (let state of atn.states) {
            for (let i = 0; i < state.numberOfTransitions; i++) {
                let transition = state.transition(i);
                if (!(transition instanceof RuleTransition_1.RuleTransition)) {
                    continue;
                }
                transition.tailCall = this.testTailCall(atn, transition, false);
                transition.optimizedTailCall = this.testTailCall(atn, transition, true);
            }
            if (!state.isOptimized) {
                continue;
            }
            for (let i = 0; i < state.numberOfOptimizedTransitions; i++) {
                let transition = state.getOptimizedTransition(i);
                if (!(transition instanceof RuleTransition_1.RuleTransition)) {
                    continue;
                }
                transition.tailCall = this.testTailCall(atn, transition, false);
                transition.optimizedTailCall = this.testTailCall(atn, transition, true);
            }
        }
    }
    static testTailCall(atn, transition, optimizedPath) {
        if (!optimizedPath && transition.tailCall) {
            return true;
        }
        if (optimizedPath && transition.optimizedTailCall) {
            return true;
        }
        let reachable = new BitSet_1.BitSet(atn.states.length);
        let worklist = [];
        worklist.push(transition.followState);
        while (true) {
            let state = worklist.pop();
            if (!state) {
                break;
            }
            if (reachable.get(state.stateNumber)) {
                continue;
            }
            if (state instanceof RuleStopState_1.RuleStopState) {
                continue;
            }
            if (!state.onlyHasEpsilonTransitions) {
                return false;
            }
            let transitionCount = optimizedPath ? state.numberOfOptimizedTransitions : state.numberOfTransitions;
            for (let i = 0; i < transitionCount; i++) {
                let t = optimizedPath ? state.getOptimizedTransition(i) : state.transition(i);
                if (t.serializationType !== 1 /* EPSILON */) {
                    return false;
                }
                worklist.push(t.target);
            }
        }
        return true;
    }
    static toInt(c) {
        return c;
    }
    static toInt32(data, offset) {
        return (data[offset] | (data[offset + 1] << 16)) >>> 0;
    }
    static toUUID(data, offset) {
        let leastSigBits = ATNDeserializer.toInt32(data, offset);
        let lessSigBits = ATNDeserializer.toInt32(data, offset + 2);
        let moreSigBits = ATNDeserializer.toInt32(data, offset + 4);
        let mostSigBits = ATNDeserializer.toInt32(data, offset + 6);
        return new UUID_1.UUID(mostSigBits, moreSigBits, lessSigBits, leastSigBits);
    }
    edgeFactory(atn, type, src, trg, arg1, arg2, arg3, sets) {
        let target = atn.states[trg];
        switch (type) {
            case 1 /* EPSILON */: return new EpsilonTransition_1.EpsilonTransition(target);
            case 2 /* RANGE */:
                if (arg3 !== 0) {
                    return new RangeTransition_1.RangeTransition(target, Token_1.Token.EOF, arg2);
                }
                else {
                    return new RangeTransition_1.RangeTransition(target, arg1, arg2);
                }
            case 3 /* RULE */:
                let rt = new RuleTransition_1.RuleTransition(atn.states[arg1], arg2, arg3, target);
                return rt;
            case 4 /* PREDICATE */:
                let pt = new PredicateTransition_1.PredicateTransition(target, arg1, arg2, arg3 !== 0);
                return pt;
            case 10 /* PRECEDENCE */:
                return new PrecedencePredicateTransition_1.PrecedencePredicateTransition(target, arg1);
            case 5 /* ATOM */:
                if (arg3 !== 0) {
                    return new AtomTransition_1.AtomTransition(target, Token_1.Token.EOF);
                }
                else {
                    return new AtomTransition_1.AtomTransition(target, arg1);
                }
            case 6 /* ACTION */:
                let a = new ActionTransition_1.ActionTransition(target, arg1, arg2, arg3 !== 0);
                return a;
            case 7 /* SET */: return new SetTransition_1.SetTransition(target, sets[arg1]);
            case 8 /* NOT_SET */: return new NotSetTransition_1.NotSetTransition(target, sets[arg1]);
            case 9 /* WILDCARD */: return new WildcardTransition_1.WildcardTransition(target);
        }
        throw new Error("The specified transition type is not valid.");
    }
    stateFactory(type, ruleIndex) {
        let s;
        switch (type) {
            case ATNStateType_1.ATNStateType.INVALID_TYPE: return new InvalidState_1.InvalidState();
            case ATNStateType_1.ATNStateType.BASIC:
                s = new BasicState_1.BasicState();
                break;
            case ATNStateType_1.ATNStateType.RULE_START:
                s = new RuleStartState_1.RuleStartState();
                break;
            case ATNStateType_1.ATNStateType.BLOCK_START:
                s = new BasicBlockStartState_1.BasicBlockStartState();
                break;
            case ATNStateType_1.ATNStateType.PLUS_BLOCK_START:
                s = new PlusBlockStartState_1.PlusBlockStartState();
                break;
            case ATNStateType_1.ATNStateType.STAR_BLOCK_START:
                s = new StarBlockStartState_1.StarBlockStartState();
                break;
            case ATNStateType_1.ATNStateType.TOKEN_START:
                s = new TokensStartState_1.TokensStartState();
                break;
            case ATNStateType_1.ATNStateType.RULE_STOP:
                s = new RuleStopState_1.RuleStopState();
                break;
            case ATNStateType_1.ATNStateType.BLOCK_END:
                s = new BlockEndState_1.BlockEndState();
                break;
            case ATNStateType_1.ATNStateType.STAR_LOOP_BACK:
                s = new StarLoopbackState_1.StarLoopbackState();
                break;
            case ATNStateType_1.ATNStateType.STAR_LOOP_ENTRY:
                s = new StarLoopEntryState_1.StarLoopEntryState();
                break;
            case ATNStateType_1.ATNStateType.PLUS_LOOP_BACK:
                s = new PlusLoopbackState_1.PlusLoopbackState();
                break;
            case ATNStateType_1.ATNStateType.LOOP_END:
                s = new LoopEndState_1.LoopEndState();
                break;
            default:
                let message = `The specified state type ${type} is not valid.`;
                throw new Error(message);
        }
        s.ruleIndex = ruleIndex;
        return s;
    }
    lexerActionFactory(type, data1, data2) {
        switch (type) {
            case 0 /* CHANNEL */:
                return new LexerChannelAction_1.LexerChannelAction(data1);
            case 1 /* CUSTOM */:
                return new LexerCustomAction_1.LexerCustomAction(data1, data2);
            case 2 /* MODE */:
                return new LexerModeAction_1.LexerModeAction(data1);
            case 3 /* MORE */:
                return LexerMoreAction_1.LexerMoreAction.INSTANCE;
            case 4 /* POP_MODE */:
                return LexerPopModeAction_1.LexerPopModeAction.INSTANCE;
            case 5 /* PUSH_MODE */:
                return new LexerPushModeAction_1.LexerPushModeAction(data1);
            case 6 /* SKIP */:
                return LexerSkipAction_1.LexerSkipAction.INSTANCE;
            case 7 /* TYPE */:
                return new LexerTypeAction_1.LexerTypeAction(data1);
            default:
                let message = `The specified lexer action type ${type} is not valid.`;
                throw new Error(message);
        }
    }
}
/* WARNING: DO NOT MERGE THESE LINES. If UUIDs differ during a merge,
 * resolve the conflict by generating a new ID!
 */
/**
 * This is the earliest supported serialized UUID.
 */
ATNDeserializer.BASE_SERIALIZED_UUID = UUID_1.UUID.fromString("E4178468-DF95-44D0-AD87-F22A5D5FB6D3");
/**
 * This UUID indicates an extension of {@link #ADDED_PRECEDENCE_TRANSITIONS}
 * for the addition of lexer actions encoded as a sequence of
 * {@link LexerAction} instances.
 */
ATNDeserializer.ADDED_LEXER_ACTIONS = UUID_1.UUID.fromString("AB35191A-1603-487E-B75A-479B831EAF6D");
/**
 * This UUID indicates the serialized ATN contains two sets of
 * IntervalSets, where the second set's values are encoded as
 * 32-bit integers to support the full Unicode SMP range up to U+10FFFF.
 */
ATNDeserializer.ADDED_UNICODE_SMP = UUID_1.UUID.fromString("C23FEA89-0605-4f51-AFB8-058BCAB8C91B");
/**
 * This list contains all of the currently supported UUIDs, ordered by when
 * the feature first appeared in this branch.
 */
ATNDeserializer.SUPPORTED_UUIDS = [
    ATNDeserializer.BASE_SERIALIZED_UUID,
    ATNDeserializer.ADDED_LEXER_ACTIONS,
    ATNDeserializer.ADDED_UNICODE_SMP,
];
/**
 * This is the current serialized UUID.
 */
ATNDeserializer.SERIALIZED_UUID = ATNDeserializer.ADDED_UNICODE_SMP;
__decorate([
    Decorators_1.NotNull
], ATNDeserializer.prototype, "deserializationOptions", void 0);
__decorate([
    __param(0, Decorators_1.NotNull)
], ATNDeserializer.prototype, "deserialize", null);
__decorate([
    __param(0, Decorators_1.NotNull)
], ATNDeserializer.prototype, "markPrecedenceDecisions", null);
__decorate([
    Decorators_1.NotNull,
    __param(0, Decorators_1.NotNull)
], ATNDeserializer.prototype, "edgeFactory", null);
exports.ATNDeserializer = ATNDeserializer;
//# sourceMappingURL=ATNDeserializer.js.map

/***/ }),

/***/ 3296:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ATNSimulator = void 0;
const ATNConfigSet_1 = __webpack_require__(256);
const DFAState_1 = __webpack_require__(4981);
const Decorators_1 = __webpack_require__(681);
const PredictionContext_1 = __webpack_require__(1229);
let ATNSimulator = class ATNSimulator {
    constructor(atn) {
        this.atn = atn;
    }
    static get ERROR() {
        if (!ATNSimulator._ERROR) {
            ATNSimulator._ERROR = new DFAState_1.DFAState(new ATNConfigSet_1.ATNConfigSet());
            ATNSimulator._ERROR.stateNumber = PredictionContext_1.PredictionContext.EMPTY_FULL_STATE_KEY;
        }
        return ATNSimulator._ERROR;
    }
    /**
     * Clear the DFA cache used by the current instance. Since the DFA cache may
     * be shared by multiple ATN simulators, this method may affect the
     * performance (but not accuracy) of other parsers which are being used
     * concurrently.
     *
     * @ if the current instance does not
     * support clearing the DFA.
     *
     * @since 4.3
     */
    clearDFA() {
        this.atn.clearDFA();
    }
};
__decorate([
    Decorators_1.NotNull
], ATNSimulator.prototype, "atn", void 0);
__decorate([
    Decorators_1.NotNull
], ATNSimulator, "ERROR", null);
ATNSimulator = __decorate([
    __param(0, Decorators_1.NotNull)
], ATNSimulator);
exports.ATNSimulator = ATNSimulator;
(function (ATNSimulator) {
    const RULE_VARIANT_DELIMITER = "$";
    const RULE_LF_VARIANT_MARKER = "$lf$";
    const RULE_NOLF_VARIANT_MARKER = "$nolf$";
})(ATNSimulator = exports.ATNSimulator || (exports.ATNSimulator = {}));
exports.ATNSimulator = ATNSimulator;
//# sourceMappingURL=ATNSimulator.js.map

/***/ }),

/***/ 1971:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ATNState = void 0;
const Decorators_1 = __webpack_require__(681);
const INITIAL_NUM_TRANSITIONS = 4;
/**
 * The following images show the relation of states and
 * {@link ATNState#transitions} for various grammar constructs.
 *
 * * Solid edges marked with an &#0949; indicate a required
 *   {@link EpsilonTransition}.
 *
 * * Dashed edges indicate locations where any transition derived from
 *   {@link Transition} might appear.
 *
 * * Dashed nodes are place holders for either a sequence of linked
 *   {@link BasicState} states or the inclusion of a block representing a nested
 *   construct in one of the forms below.
 *
 * * Nodes showing multiple outgoing alternatives with a `...` support
 *   any number of alternatives (one or more). Nodes without the `...` only
 *   support the exact number of alternatives shown in the diagram.
 *
 * <h2>Basic Blocks</h2>
 *
 * <h3>Rule</h3>
 *
 * <embed src="images/Rule.svg" type="image/svg+xml"/>
 *
 * <h3>Block of 1 or more alternatives</h3>
 *
 * <embed src="images/Block.svg" type="image/svg+xml"/>
 *
 * <h2>Greedy Loops</h2>
 *
 * <h3>Greedy Closure: `(...)*`</h3>
 *
 * <embed src="images/ClosureGreedy.svg" type="image/svg+xml"/>
 *
 * <h3>Greedy Positive Closure: `(...)+`</h3>
 *
 * <embed src="images/PositiveClosureGreedy.svg" type="image/svg+xml"/>
 *
 * <h3>Greedy Optional: `(...)?`</h3>
 *
 * <embed src="images/OptionalGreedy.svg" type="image/svg+xml"/>
 *
 * <h2>Non-Greedy Loops</h2>
 *
 * <h3>Non-Greedy Closure: `(...)*?`</h3>
 *
 * <embed src="images/ClosureNonGreedy.svg" type="image/svg+xml"/>
 *
 * <h3>Non-Greedy Positive Closure: `(...)+?`</h3>
 *
 * <embed src="images/PositiveClosureNonGreedy.svg" type="image/svg+xml"/>
 *
 * <h3>Non-Greedy Optional: `(...)??`</h3>
 *
 * <embed src="images/OptionalNonGreedy.svg" type="image/svg+xml"/>
 */
class ATNState {
    constructor() {
        this.stateNumber = ATNState.INVALID_STATE_NUMBER;
        this.ruleIndex = 0; // at runtime, we don't have Rule objects
        this.epsilonOnlyTransitions = false;
        /** Track the transitions emanating from this ATN state. */
        this.transitions = [];
        this.optimizedTransitions = this.transitions;
    }
    /**
     * Gets the state number.
     *
     * @returns the state number
     */
    getStateNumber() {
        return this.stateNumber;
    }
    /**
     * For all states except {@link RuleStopState}, this returns the state
     * number. Returns -1 for stop states.
     *
     * @returns -1 for {@link RuleStopState}, otherwise the state number
     */
    get nonStopStateNumber() {
        return this.getStateNumber();
    }
    hashCode() {
        return this.stateNumber;
    }
    equals(o) {
        // are these states same object?
        if (o instanceof ATNState) {
            return this.stateNumber === o.stateNumber;
        }
        return false;
    }
    get isNonGreedyExitState() {
        return false;
    }
    toString() {
        return String(this.stateNumber);
    }
    getTransitions() {
        return this.transitions.slice(0);
    }
    get numberOfTransitions() {
        return this.transitions.length;
    }
    addTransition(e, index) {
        if (this.transitions.length === 0) {
            this.epsilonOnlyTransitions = e.isEpsilon;
        }
        else if (this.epsilonOnlyTransitions !== e.isEpsilon) {
            this.epsilonOnlyTransitions = false;
            throw new Error("ATN state " + this.stateNumber + " has both epsilon and non-epsilon transitions.");
        }
        this.transitions.splice(index !== undefined ? index : this.transitions.length, 0, e);
    }
    transition(i) {
        return this.transitions[i];
    }
    setTransition(i, e) {
        this.transitions[i] = e;
    }
    removeTransition(index) {
        return this.transitions.splice(index, 1)[0];
    }
    get onlyHasEpsilonTransitions() {
        return this.epsilonOnlyTransitions;
    }
    setRuleIndex(ruleIndex) {
        this.ruleIndex = ruleIndex;
    }
    get isOptimized() {
        return this.optimizedTransitions !== this.transitions;
    }
    get numberOfOptimizedTransitions() {
        return this.optimizedTransitions.length;
    }
    getOptimizedTransition(i) {
        return this.optimizedTransitions[i];
    }
    addOptimizedTransition(e) {
        if (!this.isOptimized) {
            this.optimizedTransitions = new Array();
        }
        this.optimizedTransitions.push(e);
    }
    setOptimizedTransition(i, e) {
        if (!this.isOptimized) {
            throw new Error("This ATNState is not optimized.");
        }
        this.optimizedTransitions[i] = e;
    }
    removeOptimizedTransition(i) {
        if (!this.isOptimized) {
            throw new Error("This ATNState is not optimized.");
        }
        this.optimizedTransitions.splice(i, 1);
    }
}
__decorate([
    Decorators_1.Override
], ATNState.prototype, "hashCode", null);
__decorate([
    Decorators_1.Override
], ATNState.prototype, "equals", null);
__decorate([
    Decorators_1.Override
], ATNState.prototype, "toString", null);
exports.ATNState = ATNState;
(function (ATNState) {
    ATNState.INVALID_STATE_NUMBER = -1;
})(ATNState = exports.ATNState || (exports.ATNState = {}));
//# sourceMappingURL=ATNState.js.map

/***/ }),

/***/ 9602:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ATNStateType = void 0;
// ConvertTo-TS run at 2016-10-04T11:26:27.4734328-07:00
var ATNStateType;
(function (ATNStateType) {
    ATNStateType[ATNStateType["INVALID_TYPE"] = 0] = "INVALID_TYPE";
    ATNStateType[ATNStateType["BASIC"] = 1] = "BASIC";
    ATNStateType[ATNStateType["RULE_START"] = 2] = "RULE_START";
    ATNStateType[ATNStateType["BLOCK_START"] = 3] = "BLOCK_START";
    ATNStateType[ATNStateType["PLUS_BLOCK_START"] = 4] = "PLUS_BLOCK_START";
    ATNStateType[ATNStateType["STAR_BLOCK_START"] = 5] = "STAR_BLOCK_START";
    ATNStateType[ATNStateType["TOKEN_START"] = 6] = "TOKEN_START";
    ATNStateType[ATNStateType["RULE_STOP"] = 7] = "RULE_STOP";
    ATNStateType[ATNStateType["BLOCK_END"] = 8] = "BLOCK_END";
    ATNStateType[ATNStateType["STAR_LOOP_BACK"] = 9] = "STAR_LOOP_BACK";
    ATNStateType[ATNStateType["STAR_LOOP_ENTRY"] = 10] = "STAR_LOOP_ENTRY";
    ATNStateType[ATNStateType["PLUS_LOOP_BACK"] = 11] = "PLUS_LOOP_BACK";
    ATNStateType[ATNStateType["LOOP_END"] = 12] = "LOOP_END";
})(ATNStateType = exports.ATNStateType || (exports.ATNStateType = {}));
//# sourceMappingURL=ATNStateType.js.map

/***/ }),

/***/ 3904:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ATNType = void 0;
// ConvertTo-TS run at 2016-10-04T11:26:27.6094030-07:00
/**
 * Represents the type of recognizer an ATN applies to.
 *
 * @author Sam Harwell
 */
var ATNType;
(function (ATNType) {
    /**
     * A lexer grammar.
     */
    ATNType[ATNType["LEXER"] = 0] = "LEXER";
    /**
     * A parser grammar.
     */
    ATNType[ATNType["PARSER"] = 1] = "PARSER";
})(ATNType = exports.ATNType || (exports.ATNType = {}));
//# sourceMappingURL=ATNType.js.map

/***/ }),

/***/ 8356:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AbstractPredicateTransition = void 0;
const Transition_1 = __webpack_require__(5922);
/**
 *
 * @author Sam Harwell
 */
class AbstractPredicateTransition extends Transition_1.Transition {
    constructor(target) {
        super(target);
    }
}
exports.AbstractPredicateTransition = AbstractPredicateTransition;
//# sourceMappingURL=AbstractPredicateTransition.js.map

/***/ }),

/***/ 7766:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ActionTransition = void 0;
const Decorators_1 = __webpack_require__(681);
const Transition_1 = __webpack_require__(5922);
let ActionTransition = class ActionTransition extends Transition_1.Transition {
    constructor(target, ruleIndex, actionIndex = -1, isCtxDependent = false) {
        super(target);
        this.ruleIndex = ruleIndex;
        this.actionIndex = actionIndex;
        this.isCtxDependent = isCtxDependent;
    }
    get serializationType() {
        return 6 /* ACTION */;
    }
    get isEpsilon() {
        return true; // we are to be ignored by analysis 'cept for predicates
    }
    matches(symbol, minVocabSymbol, maxVocabSymbol) {
        return false;
    }
    toString() {
        return "action_" + this.ruleIndex + ":" + this.actionIndex;
    }
};
__decorate([
    Decorators_1.Override
], ActionTransition.prototype, "serializationType", null);
__decorate([
    Decorators_1.Override
], ActionTransition.prototype, "isEpsilon", null);
__decorate([
    Decorators_1.Override
], ActionTransition.prototype, "matches", null);
__decorate([
    Decorators_1.Override
], ActionTransition.prototype, "toString", null);
ActionTransition = __decorate([
    __param(0, Decorators_1.NotNull)
], ActionTransition);
exports.ActionTransition = ActionTransition;
//# sourceMappingURL=ActionTransition.js.map

/***/ }),

/***/ 2646:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AmbiguityInfo = void 0;
const DecisionEventInfo_1 = __webpack_require__(1548);
const Decorators_1 = __webpack_require__(681);
/**
 * This class represents profiling event information for an ambiguity.
 * Ambiguities are decisions where a particular input resulted in an SLL
 * conflict, followed by LL prediction also reaching a conflict state
 * (indicating a true ambiguity in the grammar).
 *
 * This event may be reported during SLL prediction in cases where the
 * conflicting SLL configuration set provides sufficient information to
 * determine that the SLL conflict is truly an ambiguity. For example, if none
 * of the ATN configurations in the conflicting SLL configuration set have
 * traversed a global follow transition (i.e.
 * {@link ATNConfig#getReachesIntoOuterContext} is `false` for all
 * configurations), then the result of SLL prediction for that input is known to
 * be equivalent to the result of LL prediction for that input.
 *
 * In some cases, the minimum represented alternative in the conflicting LL
 * configuration set is not equal to the minimum represented alternative in the
 * conflicting SLL configuration set. Grammars and inputs which result in this
 * scenario are unable to use {@link PredictionMode#SLL}, which in turn means
 * they cannot use the two-stage parsing strategy to improve parsing performance
 * for that input.
 *
 * @see ParserATNSimulator#reportAmbiguity
 * @see ParserErrorListener#reportAmbiguity
 *
 * @since 4.3
 */
let AmbiguityInfo = class AmbiguityInfo extends DecisionEventInfo_1.DecisionEventInfo {
    /**
     * Constructs a new instance of the {@link AmbiguityInfo} class with the
     * specified detailed ambiguity information.
     *
     * @param decision The decision number
     * @param state The final simulator state identifying the ambiguous
     * alternatives for the current input
     * @param ambigAlts The set of alternatives in the decision that lead to a valid parse.
     *                  The predicted alt is the min(ambigAlts)
     * @param input The input token stream
     * @param startIndex The start index for the current prediction
     * @param stopIndex The index at which the ambiguity was identified during
     * prediction
     */
    constructor(decision, state, ambigAlts, input, startIndex, stopIndex) {
        super(decision, state, input, startIndex, stopIndex, state.useContext);
        this.ambigAlts = ambigAlts;
    }
    /**
     * Gets the set of alternatives in the decision that lead to a valid parse.
     *
     * @since 4.5
     */
    get ambiguousAlternatives() {
        return this.ambigAlts;
    }
};
__decorate([
    Decorators_1.NotNull
], AmbiguityInfo.prototype, "ambigAlts", void 0);
__decorate([
    Decorators_1.NotNull
], AmbiguityInfo.prototype, "ambiguousAlternatives", null);
AmbiguityInfo = __decorate([
    __param(1, Decorators_1.NotNull),
    __param(2, Decorators_1.NotNull),
    __param(3, Decorators_1.NotNull)
], AmbiguityInfo);
exports.AmbiguityInfo = AmbiguityInfo;
//# sourceMappingURL=AmbiguityInfo.js.map

/***/ }),

/***/ 981:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AtomTransition = void 0;
const IntervalSet_1 = __webpack_require__(5462);
const Decorators_1 = __webpack_require__(681);
const Transition_1 = __webpack_require__(5922);
/** TODO: make all transitions sets? no, should remove set edges */
let AtomTransition = class AtomTransition extends Transition_1.Transition {
    constructor(target, label) {
        super(target);
        this._label = label;
    }
    get serializationType() {
        return 5 /* ATOM */;
    }
    get label() {
        return IntervalSet_1.IntervalSet.of(this._label);
    }
    matches(symbol, minVocabSymbol, maxVocabSymbol) {
        return this._label === symbol;
    }
    toString() {
        return String(this.label);
    }
};
__decorate([
    Decorators_1.Override
], AtomTransition.prototype, "serializationType", null);
__decorate([
    Decorators_1.Override,
    Decorators_1.NotNull
], AtomTransition.prototype, "label", null);
__decorate([
    Decorators_1.Override
], AtomTransition.prototype, "matches", null);
__decorate([
    Decorators_1.Override,
    Decorators_1.NotNull
], AtomTransition.prototype, "toString", null);
AtomTransition = __decorate([
    __param(0, Decorators_1.NotNull)
], AtomTransition);
exports.AtomTransition = AtomTransition;
//# sourceMappingURL=AtomTransition.js.map

/***/ }),

/***/ 6193:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.BasicBlockStartState = void 0;
// ConvertTo-TS run at 2016-10-04T11:26:27.7669801-07:00
const ATNStateType_1 = __webpack_require__(9602);
const BlockStartState_1 = __webpack_require__(9954);
const Decorators_1 = __webpack_require__(681);
/**
 *
 * @author Sam Harwell
 */
class BasicBlockStartState extends BlockStartState_1.BlockStartState {
    get stateType() {
        return ATNStateType_1.ATNStateType.BLOCK_START;
    }
}
__decorate([
    Decorators_1.Override
], BasicBlockStartState.prototype, "stateType", null);
exports.BasicBlockStartState = BasicBlockStartState;
//# sourceMappingURL=BasicBlockStartState.js.map

/***/ }),

/***/ 4546:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.BasicState = void 0;
// ConvertTo-TS run at 2016-10-04T11:26:27.8389930-07:00
const ATNState_1 = __webpack_require__(1971);
const ATNStateType_1 = __webpack_require__(9602);
const Decorators_1 = __webpack_require__(681);
/**
 *
 * @author Sam Harwell
 */
class BasicState extends ATNState_1.ATNState {
    get stateType() {
        return ATNStateType_1.ATNStateType.BASIC;
    }
}
__decorate([
    Decorators_1.Override
], BasicState.prototype, "stateType", null);
exports.BasicState = BasicState;
//# sourceMappingURL=BasicState.js.map

/***/ }),

/***/ 3328:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.BlockEndState = void 0;
// ConvertTo-TS run at 2016-10-04T11:26:27.9125304-07:00
const ATNState_1 = __webpack_require__(1971);
const ATNStateType_1 = __webpack_require__(9602);
const Decorators_1 = __webpack_require__(681);
/** Terminal node of a simple `(a|b|c)` block. */
class BlockEndState extends ATNState_1.ATNState {
    get stateType() {
        return ATNStateType_1.ATNStateType.BLOCK_END;
    }
}
__decorate([
    Decorators_1.Override
], BlockEndState.prototype, "stateType", null);
exports.BlockEndState = BlockEndState;
//# sourceMappingURL=BlockEndState.js.map

/***/ }),

/***/ 9954:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.BlockStartState = void 0;
const DecisionState_1 = __webpack_require__(4993);
/**  The start of a regular `(...)` block. */
class BlockStartState extends DecisionState_1.DecisionState {
}
exports.BlockStartState = BlockStartState;
//# sourceMappingURL=BlockStartState.js.map

/***/ }),

/***/ 4482:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.createWithCodePointRange = exports.createWithCodePoint = void 0;
const Character = __webpack_require__(4084);
const AtomTransition_1 = __webpack_require__(981);
const IntervalSet_1 = __webpack_require__(5462);
const RangeTransition_1 = __webpack_require__(1369);
const SetTransition_1 = __webpack_require__(4442);
/**
 * Utility functions to create {@link AtomTransition}, {@link RangeTransition},
 * and {@link SetTransition} appropriately based on the range of the input.
 *
 * To keep the serialized ATN size small, we only inline atom and
 * range transitions for Unicode code points <= U+FFFF.
 *
 * Whenever we encounter a Unicode code point > U+FFFF, we represent that
 * as a set transition (even if it is logically an atom or a range).
 */
/**
 * If {@code codePoint} is <= U+FFFF, returns a new {@link AtomTransition}.
 * Otherwise, returns a new {@link SetTransition}.
 */
function createWithCodePoint(target, codePoint) {
    if (Character.isSupplementaryCodePoint(codePoint)) {
        return new SetTransition_1.SetTransition(target, IntervalSet_1.IntervalSet.of(codePoint));
    }
    else {
        return new AtomTransition_1.AtomTransition(target, codePoint);
    }
}
exports.createWithCodePoint = createWithCodePoint;
/**
 * If {@code codePointFrom} and {@code codePointTo} are both
 * <= U+FFFF, returns a new {@link RangeTransition}.
 * Otherwise, returns a new {@link SetTransition}.
 */
function createWithCodePointRange(target, codePointFrom, codePointTo) {
    if (Character.isSupplementaryCodePoint(codePointFrom) || Character.isSupplementaryCodePoint(codePointTo)) {
        return new SetTransition_1.SetTransition(target, IntervalSet_1.IntervalSet.of(codePointFrom, codePointTo));
    }
    else {
        return new RangeTransition_1.RangeTransition(target, codePointFrom, codePointTo);
    }
}
exports.createWithCodePointRange = createWithCodePointRange;
//# sourceMappingURL=CodePointTransitions.js.map

/***/ }),

/***/ 977:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ConflictInfo = void 0;
const Decorators_1 = __webpack_require__(681);
const Utils = __webpack_require__(3070);
/**
 * This class stores information about a configuration conflict.
 *
 * @author Sam Harwell
 */
class ConflictInfo {
    constructor(conflictedAlts, exact) {
        this._conflictedAlts = conflictedAlts;
        this.exact = exact;
    }
    /**
     * Gets the set of conflicting alternatives for the configuration set.
     */
    get conflictedAlts() {
        return this._conflictedAlts;
    }
    /**
     * Gets whether or not the configuration conflict is an exact conflict.
     * An exact conflict occurs when the prediction algorithm determines that
     * the represented alternatives for a particular configuration set cannot be
     * further reduced by consuming additional input. After reaching an exact
     * conflict during an SLL prediction, only switch to full-context prediction
     * could reduce the set of viable alternatives. In LL prediction, an exact
     * conflict indicates a true ambiguity in the input.
     *
     * For the {@link PredictionMode#LL_EXACT_AMBIG_DETECTION} prediction mode,
     * accept states are conflicting but not exact are treated as non-accept
     * states.
     */
    get isExact() {
        return this.exact;
    }
    equals(obj) {
        if (obj === this) {
            return true;
        }
        else if (!(obj instanceof ConflictInfo)) {
            return false;
        }
        return this.isExact === obj.isExact
            && Utils.equals(this.conflictedAlts, obj.conflictedAlts);
    }
    hashCode() {
        return this.conflictedAlts.hashCode();
    }
}
__decorate([
    Decorators_1.Override
], ConflictInfo.prototype, "equals", null);
__decorate([
    Decorators_1.Override
], ConflictInfo.prototype, "hashCode", null);
exports.ConflictInfo = ConflictInfo;
//# sourceMappingURL=ConflictInfo.js.map

/***/ }),

/***/ 6744:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ContextSensitivityInfo = void 0;
// ConvertTo-TS run at 2016-10-04T11:26:28.1575933-07:00
const DecisionEventInfo_1 = __webpack_require__(1548);
const Decorators_1 = __webpack_require__(681);
/**
 * This class represents profiling event information for a context sensitivity.
 * Context sensitivities are decisions where a particular input resulted in an
 * SLL conflict, but LL prediction produced a single unique alternative.
 *
 * In some cases, the unique alternative identified by LL prediction is not
 * equal to the minimum represented alternative in the conflicting SLL
 * configuration set. Grammars and inputs which result in this scenario are
 * unable to use {@link PredictionMode#SLL}, which in turn means they cannot use
 * the two-stage parsing strategy to improve parsing performance for that
 * input.
 *
 * @see ParserATNSimulator#reportContextSensitivity
 * @see ParserErrorListener#reportContextSensitivity
 *
 * @since 4.3
 */
let ContextSensitivityInfo = class ContextSensitivityInfo extends DecisionEventInfo_1.DecisionEventInfo {
    /**
     * Constructs a new instance of the {@link ContextSensitivityInfo} class
     * with the specified detailed context sensitivity information.
     *
     * @param decision The decision number
     * @param state The final simulator state containing the unique
     * alternative identified by full-context prediction
     * @param input The input token stream
     * @param startIndex The start index for the current prediction
     * @param stopIndex The index at which the context sensitivity was
     * identified during full-context prediction
     */
    constructor(decision, state, input, startIndex, stopIndex) {
        super(decision, state, input, startIndex, stopIndex, true);
    }
};
ContextSensitivityInfo = __decorate([
    __param(1, Decorators_1.NotNull),
    __param(2, Decorators_1.NotNull)
], ContextSensitivityInfo);
exports.ContextSensitivityInfo = ContextSensitivityInfo;
//# sourceMappingURL=ContextSensitivityInfo.js.map

/***/ }),

/***/ 1548:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DecisionEventInfo = void 0;
// ConvertTo-TS run at 2016-10-04T11:26:28.2401032-07:00
const Decorators_1 = __webpack_require__(681);
/**
 * This is the base class for gathering detailed information about prediction
 * events which occur during parsing.
 *
 * Note that we could record the parser call stack at the time this event
 * occurred but in the presence of left recursive rules, the stack is kind of
 * meaningless. It's better to look at the individual configurations for their
 * individual stacks. Of course that is a {@link PredictionContext} object
 * not a parse tree node and so it does not have information about the extent
 * (start...stop) of the various subtrees. Examining the stack tops of all
 * configurations provide the return states for the rule invocations.
 * From there you can get the enclosing rule.
 *
 * @since 4.3
 */
let DecisionEventInfo = class DecisionEventInfo {
    constructor(decision, state, input, startIndex, stopIndex, fullCtx) {
        this.decision = decision;
        this.fullCtx = fullCtx;
        this.stopIndex = stopIndex;
        this.input = input;
        this.startIndex = startIndex;
        this.state = state;
    }
};
__decorate([
    Decorators_1.NotNull
], DecisionEventInfo.prototype, "input", void 0);
DecisionEventInfo = __decorate([
    __param(2, Decorators_1.NotNull)
], DecisionEventInfo);
exports.DecisionEventInfo = DecisionEventInfo;
//# sourceMappingURL=DecisionEventInfo.js.map

/***/ }),

/***/ 4501:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DecisionInfo = void 0;
const Decorators_1 = __webpack_require__(681);
/**
 * This class contains profiling gathered for a particular decision.
 *
 * Parsing performance in ANTLR 4 is heavily influenced by both static factors
 * (e.g. the form of the rules in the grammar) and dynamic factors (e.g. the
 * choice of input and the state of the DFA cache at the time profiling
 * operations are started). For best results, gather and use aggregate
 * statistics from a large sample of inputs representing the inputs expected in
 * production before using the results to make changes in the grammar.
 *
 * @since 4.3
 */
class DecisionInfo {
    /**
     * Constructs a new instance of the {@link DecisionInfo} class to contain
     * statistics for a particular decision.
     *
     * @param decision The decision number
     */
    constructor(decision) {
        /**
         * The total number of times {@link ParserATNSimulator#adaptivePredict} was
         * invoked for this decision.
         */
        this.invocations = 0;
        /**
         * The total time spent in {@link ParserATNSimulator#adaptivePredict} for
         * this decision, in nanoseconds.
         *
         * The value of this field contains the sum of differential results obtained
         * by {@link System#nanoTime()}, and is not adjusted to compensate for JIT
         * and/or garbage collection overhead. For best accuracy, use a modern JVM
         * implementation that provides precise results from
         * {@link System#nanoTime()}, and perform profiling in a separate process
         * which is warmed up by parsing the input prior to profiling. If desired,
         * call {@link ATNSimulator#clearDFA} to reset the DFA cache to its initial
         * state before starting the profiling measurement pass.
         */
        this.timeInPrediction = 0;
        /**
         * The sum of the lookahead required for SLL prediction for this decision.
         * Note that SLL prediction is used before LL prediction for performance
         * reasons even when {@link PredictionMode#LL} or
         * {@link PredictionMode#LL_EXACT_AMBIG_DETECTION} is used.
         */
        this.SLL_TotalLook = 0;
        /**
         * Gets the minimum lookahead required for any single SLL prediction to
         * complete for this decision, by reaching a unique prediction, reaching an
         * SLL conflict state, or encountering a syntax error.
         */
        this.SLL_MinLook = 0;
        /**
         * Gets the maximum lookahead required for any single SLL prediction to
         * complete for this decision, by reaching a unique prediction, reaching an
         * SLL conflict state, or encountering a syntax error.
         */
        this.SLL_MaxLook = 0;
        /**
         * The sum of the lookahead required for LL prediction for this decision.
         * Note that LL prediction is only used when SLL prediction reaches a
         * conflict state.
         */
        this.LL_TotalLook = 0;
        /**
         * Gets the minimum lookahead required for any single LL prediction to
         * complete for this decision. An LL prediction completes when the algorithm
         * reaches a unique prediction, a conflict state (for
         * {@link PredictionMode#LL}, an ambiguity state (for
         * {@link PredictionMode#LL_EXACT_AMBIG_DETECTION}, or a syntax error.
         */
        this.LL_MinLook = 0;
        /**
         * Gets the maximum lookahead required for any single LL prediction to
         * complete for this decision. An LL prediction completes when the algorithm
         * reaches a unique prediction, a conflict state (for
         * {@link PredictionMode#LL}, an ambiguity state (for
         * {@link PredictionMode#LL_EXACT_AMBIG_DETECTION}, or a syntax error.
         */
        this.LL_MaxLook = 0;
        /**
         * A collection of {@link ContextSensitivityInfo} instances describing the
         * context sensitivities encountered during LL prediction for this decision.
         *
         * @see ContextSensitivityInfo
         */
        this.contextSensitivities = [];
        /**
         * A collection of {@link ErrorInfo} instances describing the parse errors
         * identified during calls to {@link ParserATNSimulator#adaptivePredict} for
         * this decision.
         *
         * @see ErrorInfo
         */
        this.errors = [];
        /**
         * A collection of {@link AmbiguityInfo} instances describing the
         * ambiguities encountered during LL prediction for this decision.
         *
         * @see AmbiguityInfo
         */
        this.ambiguities = [];
        /**
         * A collection of {@link PredicateEvalInfo} instances describing the
         * results of evaluating individual predicates during prediction for this
         * decision.
         *
         * @see PredicateEvalInfo
         */
        this.predicateEvals = [];
        /**
         * The total number of ATN transitions required during SLL prediction for
         * this decision. An ATN transition is determined by the number of times the
         * DFA does not contain an edge that is required for prediction, resulting
         * in on-the-fly computation of that edge.
         *
         * If DFA caching of SLL transitions is employed by the implementation, ATN
         * computation may cache the computed edge for efficient lookup during
         * future parsing of this decision. Otherwise, the SLL parsing algorithm
         * will use ATN transitions exclusively.
         *
         * @see #SLL_ATNTransitions
         * @see ParserATNSimulator#computeTargetState
         * @see LexerATNSimulator#computeTargetState
         */
        this.SLL_ATNTransitions = 0;
        /**
         * The total number of DFA transitions required during SLL prediction for
         * this decision.
         *
         * If the ATN simulator implementation does not use DFA caching for SLL
         * transitions, this value will be 0.
         *
         * @see ParserATNSimulator#getExistingTargetState
         * @see LexerATNSimulator#getExistingTargetState
         */
        this.SLL_DFATransitions = 0;
        /**
         * Gets the total number of times SLL prediction completed in a conflict
         * state, resulting in fallback to LL prediction.
         *
         * Note that this value is not related to whether or not
         * {@link PredictionMode#SLL} may be used successfully with a particular
         * grammar. If the ambiguity resolution algorithm applied to the SLL
         * conflicts for this decision produce the same result as LL prediction for
         * this decision, {@link PredictionMode#SLL} would produce the same overall
         * parsing result as {@link PredictionMode#LL}.
         */
        this.LL_Fallback = 0;
        /**
         * The total number of ATN transitions required during LL prediction for
         * this decision. An ATN transition is determined by the number of times the
         * DFA does not contain an edge that is required for prediction, resulting
         * in on-the-fly computation of that edge.
         *
         * If DFA caching of LL transitions is employed by the implementation, ATN
         * computation may cache the computed edge for efficient lookup during
         * future parsing of this decision. Otherwise, the LL parsing algorithm will
         * use ATN transitions exclusively.
         *
         * @see #LL_DFATransitions
         * @see ParserATNSimulator#computeTargetState
         * @see LexerATNSimulator#computeTargetState
         */
        this.LL_ATNTransitions = 0;
        /**
         * The total number of DFA transitions required during LL prediction for
         * this decision.
         *
         * If the ATN simulator implementation does not use DFA caching for LL
         * transitions, this value will be 0.
         *
         * @see ParserATNSimulator#getExistingTargetState
         * @see LexerATNSimulator#getExistingTargetState
         */
        this.LL_DFATransitions = 0;
        this.decision = decision;
    }
    toString() {
        return "{" +
            "decision=" + this.decision +
            ", contextSensitivities=" + this.contextSensitivities.length +
            ", errors=" + this.errors.length +
            ", ambiguities=" + this.ambiguities.length +
            ", SLL_lookahead=" + this.SLL_TotalLook +
            ", SLL_ATNTransitions=" + this.SLL_ATNTransitions +
            ", SLL_DFATransitions=" + this.SLL_DFATransitions +
            ", LL_Fallback=" + this.LL_Fallback +
            ", LL_lookahead=" + this.LL_TotalLook +
            ", LL_ATNTransitions=" + this.LL_ATNTransitions +
            "}";
    }
}
__decorate([
    Decorators_1.Override
], DecisionInfo.prototype, "toString", null);
exports.DecisionInfo = DecisionInfo;
//# sourceMappingURL=DecisionInfo.js.map

/***/ }),

/***/ 4993:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DecisionState = void 0;
// ConvertTo-TS run at 2016-10-04T11:26:28.4381103-07:00
const ATNState_1 = __webpack_require__(1971);
class DecisionState extends ATNState_1.ATNState {
    constructor() {
        super(...arguments);
        this.decision = -1;
        this.nonGreedy = false;
        this.sll = false;
    }
}
exports.DecisionState = DecisionState;
//# sourceMappingURL=DecisionState.js.map

/***/ }),

/***/ 7973:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.EpsilonTransition = void 0;
const Decorators_1 = __webpack_require__(681);
const Transition_1 = __webpack_require__(5922);
let EpsilonTransition = class EpsilonTransition extends Transition_1.Transition {
    constructor(target, outermostPrecedenceReturn = -1) {
        super(target);
        this._outermostPrecedenceReturn = outermostPrecedenceReturn;
    }
    /**
     * @returns the rule index of a precedence rule for which this transition is
     * returning from, where the precedence value is 0; otherwise, -1.
     *
     * @see ATNConfig.isPrecedenceFilterSuppressed
     * @see ParserATNSimulator#applyPrecedenceFilter(ATNConfigSet, ParserRuleContext, PredictionContextCache)
     * @since 4.4.1
     */
    get outermostPrecedenceReturn() {
        return this._outermostPrecedenceReturn;
    }
    get serializationType() {
        return 1 /* EPSILON */;
    }
    get isEpsilon() {
        return true;
    }
    matches(symbol, minVocabSymbol, maxVocabSymbol) {
        return false;
    }
    toString() {
        return "epsilon";
    }
};
__decorate([
    Decorators_1.Override
], EpsilonTransition.prototype, "serializationType", null);
__decorate([
    Decorators_1.Override
], EpsilonTransition.prototype, "isEpsilon", null);
__decorate([
    Decorators_1.Override
], EpsilonTransition.prototype, "matches", null);
__decorate([
    Decorators_1.Override,
    Decorators_1.NotNull
], EpsilonTransition.prototype, "toString", null);
EpsilonTransition = __decorate([
    __param(0, Decorators_1.NotNull)
], EpsilonTransition);
exports.EpsilonTransition = EpsilonTransition;
//# sourceMappingURL=EpsilonTransition.js.map

/***/ }),

/***/ 544:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ErrorInfo = void 0;
// ConvertTo-TS run at 2016-10-04T11:26:28.7213647-07:00
const DecisionEventInfo_1 = __webpack_require__(1548);
const Decorators_1 = __webpack_require__(681);
/**
 * This class represents profiling event information for a syntax error
 * identified during prediction. Syntax errors occur when the prediction
 * algorithm is unable to identify an alternative which would lead to a
 * successful parse.
 *
 * @see Parser#notifyErrorListeners(Token, String, RecognitionException)
 * @see ANTLRErrorListener#syntaxError
 *
 * @since 4.3
 */
let ErrorInfo = class ErrorInfo extends DecisionEventInfo_1.DecisionEventInfo {
    /**
     * Constructs a new instance of the {@link ErrorInfo} class with the
     * specified detailed syntax error information.
     *
     * @param decision The decision number
     * @param state The final simulator state reached during prediction
     * prior to reaching the {@link ATNSimulator#ERROR} state
     * @param input The input token stream
     * @param startIndex The start index for the current prediction
     * @param stopIndex The index at which the syntax error was identified
     */
    constructor(decision, state, input, startIndex, stopIndex) {
        super(decision, state, input, startIndex, stopIndex, state.useContext);
    }
};
ErrorInfo = __decorate([
    __param(1, Decorators_1.NotNull),
    __param(2, Decorators_1.NotNull)
], ErrorInfo);
exports.ErrorInfo = ErrorInfo;
//# sourceMappingURL=ErrorInfo.js.map

/***/ }),

/***/ 7678:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.InvalidState = void 0;
const ATNStateType_1 = __webpack_require__(9602);
const BasicState_1 = __webpack_require__(4546);
const Decorators_1 = __webpack_require__(681);
/**
 *
 * @author Sam Harwell
 */
class InvalidState extends BasicState_1.BasicState {
    get stateType() {
        return ATNStateType_1.ATNStateType.INVALID_TYPE;
    }
}
__decorate([
    Decorators_1.Override
], InvalidState.prototype, "stateType", null);
exports.InvalidState = InvalidState;
//# sourceMappingURL=InvalidState.js.map

/***/ }),

/***/ 6181:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.LL1Analyzer = void 0;
// ConvertTo-TS run at 2016-10-04T11:26:30.4445360-07:00
const AbstractPredicateTransition_1 = __webpack_require__(8356);
const Array2DHashSet_1 = __webpack_require__(5265);
const ATNConfig_1 = __webpack_require__(735);
const BitSet_1 = __webpack_require__(3300);
const IntervalSet_1 = __webpack_require__(5462);
const Decorators_1 = __webpack_require__(681);
const NotSetTransition_1 = __webpack_require__(845);
const ObjectEqualityComparator_1 = __webpack_require__(8578);
const PredictionContext_1 = __webpack_require__(1229);
const RuleStopState_1 = __webpack_require__(3776);
const RuleTransition_1 = __webpack_require__(5239);
const Token_1 = __webpack_require__(8999);
const WildcardTransition_1 = __webpack_require__(401);
let LL1Analyzer = class LL1Analyzer {
    constructor(atn) { this.atn = atn; }
    /**
     * Calculates the SLL(1) expected lookahead set for each outgoing transition
     * of an {@link ATNState}. The returned array has one element for each
     * outgoing transition in `s`. If the closure from transition
     * *i* leads to a semantic predicate before matching a symbol, the
     * element at index *i* of the result will be `undefined`.
     *
     * @param s the ATN state
     * @returns the expected symbols for each outgoing transition of `s`.
     */
    getDecisionLookahead(s) {
        //		System.out.println("LOOK("+s.stateNumber+")");
        if (s == null) {
            return undefined;
        }
        let look = new Array(s.numberOfTransitions);
        for (let alt = 0; alt < s.numberOfTransitions; alt++) {
            let current = new IntervalSet_1.IntervalSet();
            look[alt] = current;
            let lookBusy = new Array2DHashSet_1.Array2DHashSet(ObjectEqualityComparator_1.ObjectEqualityComparator.INSTANCE);
            let seeThruPreds = false; // fail to get lookahead upon pred
            this._LOOK(s.transition(alt).target, undefined, PredictionContext_1.PredictionContext.EMPTY_LOCAL, current, lookBusy, new BitSet_1.BitSet(), seeThruPreds, false);
            // Wipe out lookahead for this alternative if we found nothing
            // or we had a predicate when we !seeThruPreds
            if (current.size === 0 || current.contains(LL1Analyzer.HIT_PRED)) {
                current = undefined;
                look[alt] = current;
            }
        }
        return look;
    }
    LOOK(s, ctx, stopState) {
        if (stopState === undefined) {
            if (s.atn == null) {
                throw new Error("Illegal state");
            }
            stopState = s.atn.ruleToStopState[s.ruleIndex];
        }
        else if (stopState === null) {
            // This is an explicit request to pass undefined as the stopState to _LOOK. Used to distinguish an overload
            // from the method which simply omits the stopState parameter.
            stopState = undefined;
        }
        let r = new IntervalSet_1.IntervalSet();
        let seeThruPreds = true; // ignore preds; get all lookahead
        let addEOF = true;
        this._LOOK(s, stopState, ctx, r, new Array2DHashSet_1.Array2DHashSet(), new BitSet_1.BitSet(), seeThruPreds, addEOF);
        return r;
    }
    /**
     * Compute set of tokens that can follow `s` in the ATN in the
     * specified `ctx`.
     * <p/>
     * If `ctx` is {@link PredictionContext#EMPTY_LOCAL} and
     * `stopState` or the end of the rule containing `s` is reached,
     * {@link Token#EPSILON} is added to the result set. If `ctx` is not
     * {@link PredictionContext#EMPTY_LOCAL} and `addEOF` is `true`
     * and `stopState` or the end of the outermost rule is reached,
     * {@link Token#EOF} is added to the result set.
     *
     * @param s the ATN state.
     * @param stopState the ATN state to stop at. This can be a
     * {@link BlockEndState} to detect epsilon paths through a closure.
     * @param ctx The outer context, or {@link PredictionContext#EMPTY_LOCAL} if
     * the outer context should not be used.
     * @param look The result lookahead set.
     * @param lookBusy A set used for preventing epsilon closures in the ATN
     * from causing a stack overflow. Outside code should pass
     * `new HashSet<ATNConfig>` for this argument.
     * @param calledRuleStack A set used for preventing left recursion in the
     * ATN from causing a stack overflow. Outside code should pass
     * `new BitSet()` for this argument.
     * @param seeThruPreds `true` to true semantic predicates as
     * implicitly `true` and "see through them", otherwise `false`
     * to treat semantic predicates as opaque and add {@link #HIT_PRED} to the
     * result if one is encountered.
     * @param addEOF Add {@link Token#EOF} to the result if the end of the
     * outermost context is reached. This parameter has no effect if `ctx`
     * is {@link PredictionContext#EMPTY_LOCAL}.
     */
    _LOOK(s, stopState, ctx, look, lookBusy, calledRuleStack, seeThruPreds, addEOF) {
        //		System.out.println("_LOOK("+s.stateNumber+", ctx="+ctx);
        let c = ATNConfig_1.ATNConfig.create(s, 0, ctx);
        if (!lookBusy.add(c)) {
            return;
        }
        if (s === stopState) {
            if (PredictionContext_1.PredictionContext.isEmptyLocal(ctx)) {
                look.add(Token_1.Token.EPSILON);
                return;
            }
            else if (ctx.isEmpty) {
                if (addEOF) {
                    look.add(Token_1.Token.EOF);
                }
                return;
            }
        }
        if (s instanceof RuleStopState_1.RuleStopState) {
            if (ctx.isEmpty && !PredictionContext_1.PredictionContext.isEmptyLocal(ctx)) {
                if (addEOF) {
                    look.add(Token_1.Token.EOF);
                }
                return;
            }
            let removed = calledRuleStack.get(s.ruleIndex);
            try {
                calledRuleStack.clear(s.ruleIndex);
                for (let i = 0; i < ctx.size; i++) {
                    if (ctx.getReturnState(i) === PredictionContext_1.PredictionContext.EMPTY_FULL_STATE_KEY) {
                        continue;
                    }
                    let returnState = this.atn.states[ctx.getReturnState(i)];
                    //					System.out.println("popping back to "+retState);
                    this._LOOK(returnState, stopState, ctx.getParent(i), look, lookBusy, calledRuleStack, seeThruPreds, addEOF);
                }
            }
            finally {
                if (removed) {
                    calledRuleStack.set(s.ruleIndex);
                }
            }
        }
        let n = s.numberOfTransitions;
        for (let i = 0; i < n; i++) {
            let t = s.transition(i);
            if (t instanceof RuleTransition_1.RuleTransition) {
                if (calledRuleStack.get(t.ruleIndex)) {
                    continue;
                }
                let newContext = ctx.getChild(t.followState.stateNumber);
                try {
                    calledRuleStack.set(t.ruleIndex);
                    this._LOOK(t.target, stopState, newContext, look, lookBusy, calledRuleStack, seeThruPreds, addEOF);
                }
                finally {
                    calledRuleStack.clear(t.ruleIndex);
                }
            }
            else if (t instanceof AbstractPredicateTransition_1.AbstractPredicateTransition) {
                if (seeThruPreds) {
                    this._LOOK(t.target, stopState, ctx, look, lookBusy, calledRuleStack, seeThruPreds, addEOF);
                }
                else {
                    look.add(LL1Analyzer.HIT_PRED);
                }
            }
            else if (t.isEpsilon) {
                this._LOOK(t.target, stopState, ctx, look, lookBusy, calledRuleStack, seeThruPreds, addEOF);
            }
            else if (t instanceof WildcardTransition_1.WildcardTransition) {
                look.addAll(IntervalSet_1.IntervalSet.of(Token_1.Token.MIN_USER_TOKEN_TYPE, this.atn.maxTokenType));
            }
            else {
                //				System.out.println("adding "+ t);
                let set = t.label;
                if (set != null) {
                    if (t instanceof NotSetTransition_1.NotSetTransition) {
                        set = set.complement(IntervalSet_1.IntervalSet.of(Token_1.Token.MIN_USER_TOKEN_TYPE, this.atn.maxTokenType));
                    }
                    look.addAll(set);
                }
            }
        }
    }
};
/** Special value added to the lookahead sets to indicate that we hit
 *  a predicate during analysis if `seeThruPreds==false`.
 */
LL1Analyzer.HIT_PRED = Token_1.Token.INVALID_TYPE;
__decorate([
    Decorators_1.NotNull
], LL1Analyzer.prototype, "atn", void 0);
__decorate([
    Decorators_1.NotNull,
    __param(0, Decorators_1.NotNull), __param(1, Decorators_1.NotNull)
], LL1Analyzer.prototype, "LOOK", null);
__decorate([
    __param(0, Decorators_1.NotNull),
    __param(2, Decorators_1.NotNull),
    __param(3, Decorators_1.NotNull),
    __param(4, Decorators_1.NotNull),
    __param(5, Decorators_1.NotNull)
], LL1Analyzer.prototype, "_LOOK", null);
LL1Analyzer = __decorate([
    __param(0, Decorators_1.NotNull)
], LL1Analyzer);
exports.LL1Analyzer = LL1Analyzer;
//# sourceMappingURL=LL1Analyzer.js.map

/***/ }),

/***/ 9796:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
/* provided dependency */ var console = __webpack_require__(3716);

/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.LexerATNSimulator = void 0;
// ConvertTo-TS run at 2016-10-04T11:26:29.1083066-07:00
const AcceptStateInfo_1 = __webpack_require__(1431);
const ATN_1 = __webpack_require__(8148);
const ATNConfig_1 = __webpack_require__(735);
const ATNConfigSet_1 = __webpack_require__(256);
const ATNSimulator_1 = __webpack_require__(3296);
const DFAState_1 = __webpack_require__(4981);
const Interval_1 = __webpack_require__(4378);
const IntStream_1 = __webpack_require__(2628);
const Lexer_1 = __webpack_require__(8170);
const LexerActionExecutor_1 = __webpack_require__(44);
const LexerNoViableAltException_1 = __webpack_require__(5154);
const Decorators_1 = __webpack_require__(681);
const OrderedATNConfigSet_1 = __webpack_require__(4235);
const PredictionContext_1 = __webpack_require__(1229);
const RuleStopState_1 = __webpack_require__(3776);
const Token_1 = __webpack_require__(8999);
const assert = __webpack_require__(1696);
/** "dup" of ParserInterpreter */
let LexerATNSimulator = class LexerATNSimulator extends ATNSimulator_1.ATNSimulator {
    constructor(atn, recog) {
        super(atn);
        this.optimize_tail_calls = true;
        /** The current token's starting index into the character stream.
         *  Shared across DFA to ATN simulation in case the ATN fails and the
         *  DFA did not have a previous accept state. In this case, we use the
         *  ATN-generated exception object.
         */
        this.startIndex = -1;
        /** line number 1..n within the input */
        this._line = 1;
        /** The index of the character relative to the beginning of the line 0..n-1 */
        this._charPositionInLine = 0;
        this.mode = Lexer_1.Lexer.DEFAULT_MODE;
        /** Used during DFA/ATN exec to record the most recent accept configuration info */
        this.prevAccept = new LexerATNSimulator.SimState();
        this.recog = recog;
    }
    copyState(simulator) {
        this._charPositionInLine = simulator.charPositionInLine;
        this._line = simulator._line;
        this.mode = simulator.mode;
        this.startIndex = simulator.startIndex;
    }
    match(input, mode) {
        this.mode = mode;
        let mark = input.mark();
        try {
            this.startIndex = input.index;
            this.prevAccept.reset();
            let s0 = this.atn.modeToDFA[mode].s0;
            if (s0 == null) {
                return this.matchATN(input);
            }
            else {
                return this.execATN(input, s0);
            }
        }
        finally {
            input.release(mark);
        }
    }
    reset() {
        this.prevAccept.reset();
        this.startIndex = -1;
        this._line = 1;
        this._charPositionInLine = 0;
        this.mode = Lexer_1.Lexer.DEFAULT_MODE;
    }
    matchATN(input) {
        let startState = this.atn.modeToStartState[this.mode];
        if (LexerATNSimulator.debug) {
            console.log(`matchATN mode ${this.mode} start: ${startState}`);
        }
        let old_mode = this.mode;
        let s0_closure = this.computeStartState(input, startState);
        let suppressEdge = s0_closure.hasSemanticContext;
        if (suppressEdge) {
            s0_closure.hasSemanticContext = false;
        }
        let next = this.addDFAState(s0_closure);
        if (!suppressEdge) {
            let dfa = this.atn.modeToDFA[this.mode];
            if (!dfa.s0) {
                dfa.s0 = next;
            }
            else {
                next = dfa.s0;
            }
        }
        let predict = this.execATN(input, next);
        if (LexerATNSimulator.debug) {
            console.log(`DFA after matchATN: ${this.atn.modeToDFA[old_mode].toLexerString()}`);
        }
        return predict;
    }
    execATN(input, ds0) {
        // console.log("enter exec index "+input.index+" from "+ds0.configs);
        if (LexerATNSimulator.debug) {
            console.log(`start state closure=${ds0.configs}`);
        }
        if (ds0.isAcceptState) {
            // allow zero-length tokens
            this.captureSimState(this.prevAccept, input, ds0);
        }
        let t = input.LA(1);
        // @NotNull
        let s = ds0; // s is current/from DFA state
        while (true) { // while more work
            if (LexerATNSimulator.debug) {
                console.log(`execATN loop starting closure: ${s.configs}`);
            }
            // As we move src->trg, src->trg, we keep track of the previous trg to
            // avoid looking up the DFA state again, which is expensive.
            // If the previous target was already part of the DFA, we might
            // be able to avoid doing a reach operation upon t. If s!=null,
            // it means that semantic predicates didn't prevent us from
            // creating a DFA state. Once we know s!=null, we check to see if
            // the DFA state has an edge already for t. If so, we can just reuse
            // it's configuration set; there's no point in re-computing it.
            // This is kind of like doing DFA simulation within the ATN
            // simulation because DFA simulation is really just a way to avoid
            // computing reach/closure sets. Technically, once we know that
            // we have a previously added DFA state, we could jump over to
            // the DFA simulator. But, that would mean popping back and forth
            // a lot and making things more complicated algorithmically.
            // This optimization makes a lot of sense for loops within DFA.
            // A character will take us back to an existing DFA state
            // that already has lots of edges out of it. e.g., .* in comments.
            let target = this.getExistingTargetState(s, t);
            if (target == null) {
                target = this.computeTargetState(input, s, t);
            }
            if (target === ATNSimulator_1.ATNSimulator.ERROR) {
                break;
            }
            // If this is a consumable input element, make sure to consume before
            // capturing the accept state so the input index, line, and char
            // position accurately reflect the state of the interpreter at the
            // end of the token.
            if (t !== IntStream_1.IntStream.EOF) {
                this.consume(input);
            }
            if (target.isAcceptState) {
                this.captureSimState(this.prevAccept, input, target);
                if (t === IntStream_1.IntStream.EOF) {
                    break;
                }
            }
            t = input.LA(1);
            s = target; // flip; current DFA target becomes new src/from state
        }
        return this.failOrAccept(this.prevAccept, input, s.configs, t);
    }
    /**
     * Get an existing target state for an edge in the DFA. If the target state
     * for the edge has not yet been computed or is otherwise not available,
     * this method returns `undefined`.
     *
     * @param s The current DFA state
     * @param t The next input symbol
     * @returns The existing target DFA state for the given input symbol
     * `t`, or `undefined` if the target state for this edge is not
     * already cached
     */
    getExistingTargetState(s, t) {
        let target = s.getTarget(t);
        if (LexerATNSimulator.debug && target != null) {
            console.log("reuse state " + s.stateNumber +
                " edge to " + target.stateNumber);
        }
        return target;
    }
    /**
     * Compute a target state for an edge in the DFA, and attempt to add the
     * computed state and corresponding edge to the DFA.
     *
     * @param input The input stream
     * @param s The current DFA state
     * @param t The next input symbol
     *
     * @returns The computed target DFA state for the given input symbol
     * `t`. If `t` does not lead to a valid DFA state, this method
     * returns {@link #ERROR}.
     */
    computeTargetState(input, s, t) {
        let reach = new OrderedATNConfigSet_1.OrderedATNConfigSet();
        // if we don't find an existing DFA state
        // Fill reach starting from closure, following t transitions
        this.getReachableConfigSet(input, s.configs, reach, t);
        if (reach.isEmpty) { // we got nowhere on t from s
            if (!reach.hasSemanticContext) {
                // we got nowhere on t, don't throw out this knowledge; it'd
                // cause a failover from DFA later.
                this.addDFAEdge(s, t, ATNSimulator_1.ATNSimulator.ERROR);
            }
            // stop when we can't match any more char
            return ATNSimulator_1.ATNSimulator.ERROR;
        }
        // Add an edge from s to target DFA found/created for reach
        return this.addDFAEdge(s, t, reach);
    }
    failOrAccept(prevAccept, input, reach, t) {
        if (prevAccept.dfaState != null) {
            let lexerActionExecutor = prevAccept.dfaState.lexerActionExecutor;
            this.accept(input, lexerActionExecutor, this.startIndex, prevAccept.index, prevAccept.line, prevAccept.charPos);
            return prevAccept.dfaState.prediction;
        }
        else {
            // if no accept and EOF is first char, return EOF
            if (t === IntStream_1.IntStream.EOF && input.index === this.startIndex) {
                return Token_1.Token.EOF;
            }
            throw new LexerNoViableAltException_1.LexerNoViableAltException(this.recog, input, this.startIndex, reach);
        }
    }
    /** Given a starting configuration set, figure out all ATN configurations
     *  we can reach upon input `t`. Parameter `reach` is a return
     *  parameter.
     */
    getReachableConfigSet(input, closure, reach, t) {
        // this is used to skip processing for configs which have a lower priority
        // than a config that already reached an accept state for the same rule
        let skipAlt = ATN_1.ATN.INVALID_ALT_NUMBER;
        for (let c of closure) {
            let currentAltReachedAcceptState = c.alt === skipAlt;
            if (currentAltReachedAcceptState && c.hasPassedThroughNonGreedyDecision) {
                continue;
            }
            if (LexerATNSimulator.debug) {
                console.log(`testing ${this.getTokenName(t)} at ${c.toString(this.recog, true)}`);
            }
            let n = c.state.numberOfOptimizedTransitions;
            for (let ti = 0; ti < n; ti++) { // for each optimized transition
                let trans = c.state.getOptimizedTransition(ti);
                let target = this.getReachableTarget(trans, t);
                if (target != null) {
                    let lexerActionExecutor = c.lexerActionExecutor;
                    let config;
                    if (lexerActionExecutor != null) {
                        lexerActionExecutor = lexerActionExecutor.fixOffsetBeforeMatch(input.index - this.startIndex);
                        config = c.transform(target, true, lexerActionExecutor);
                    }
                    else {
                        assert(c.lexerActionExecutor == null);
                        config = c.transform(target, true);
                    }
                    let treatEofAsEpsilon = t === IntStream_1.IntStream.EOF;
                    if (this.closure(input, config, reach, currentAltReachedAcceptState, true, treatEofAsEpsilon)) {
                        // any remaining configs for this alt have a lower priority than
                        // the one that just reached an accept state.
                        skipAlt = c.alt;
                        break;
                    }
                }
            }
        }
    }
    accept(input, lexerActionExecutor, startIndex, index, line, charPos) {
        if (LexerATNSimulator.debug) {
            console.log(`ACTION ${lexerActionExecutor}`);
        }
        // seek to after last char in token
        input.seek(index);
        this._line = line;
        this._charPositionInLine = charPos;
        if (lexerActionExecutor != null && this.recog != null) {
            lexerActionExecutor.execute(this.recog, input, startIndex);
        }
    }
    getReachableTarget(trans, t) {
        if (trans.matches(t, Lexer_1.Lexer.MIN_CHAR_VALUE, Lexer_1.Lexer.MAX_CHAR_VALUE)) {
            return trans.target;
        }
        return undefined;
    }
    computeStartState(input, p) {
        let initialContext = PredictionContext_1.PredictionContext.EMPTY_FULL;
        let configs = new OrderedATNConfigSet_1.OrderedATNConfigSet();
        for (let i = 0; i < p.numberOfTransitions; i++) {
            let target = p.transition(i).target;
            let c = ATNConfig_1.ATNConfig.create(target, i + 1, initialContext);
            this.closure(input, c, configs, false, false, false);
        }
        return configs;
    }
    /**
     * Since the alternatives within any lexer decision are ordered by
     * preference, this method stops pursuing the closure as soon as an accept
     * state is reached. After the first accept state is reached by depth-first
     * search from `config`, all other (potentially reachable) states for
     * this rule would have a lower priority.
     *
     * @returns `true` if an accept state is reached, otherwise
     * `false`.
     */
    closure(input, config, configs, currentAltReachedAcceptState, speculative, treatEofAsEpsilon) {
        if (LexerATNSimulator.debug) {
            console.log("closure(" + config.toString(this.recog, true) + ")");
        }
        if (config.state instanceof RuleStopState_1.RuleStopState) {
            if (LexerATNSimulator.debug) {
                if (this.recog != null) {
                    console.log(`closure at ${this.recog.ruleNames[config.state.ruleIndex]} rule stop ${config}`);
                }
                else {
                    console.log(`closure at rule stop ${config}`);
                }
            }
            let context = config.context;
            if (context.isEmpty) {
                configs.add(config);
                return true;
            }
            else if (context.hasEmpty) {
                configs.add(config.transform(config.state, true, PredictionContext_1.PredictionContext.EMPTY_FULL));
                currentAltReachedAcceptState = true;
            }
            for (let i = 0; i < context.size; i++) {
                let returnStateNumber = context.getReturnState(i);
                if (returnStateNumber === PredictionContext_1.PredictionContext.EMPTY_FULL_STATE_KEY) {
                    continue;
                }
                let newContext = context.getParent(i); // "pop" return state
                let returnState = this.atn.states[returnStateNumber];
                let c = config.transform(returnState, false, newContext);
                currentAltReachedAcceptState = this.closure(input, c, configs, currentAltReachedAcceptState, speculative, treatEofAsEpsilon);
            }
            return currentAltReachedAcceptState;
        }
        // optimization
        if (!config.state.onlyHasEpsilonTransitions) {
            if (!currentAltReachedAcceptState || !config.hasPassedThroughNonGreedyDecision) {
                configs.add(config);
            }
        }
        let p = config.state;
        for (let i = 0; i < p.numberOfOptimizedTransitions; i++) {
            let t = p.getOptimizedTransition(i);
            let c = this.getEpsilonTarget(input, config, t, configs, speculative, treatEofAsEpsilon);
            if (c != null) {
                currentAltReachedAcceptState = this.closure(input, c, configs, currentAltReachedAcceptState, speculative, treatEofAsEpsilon);
            }
        }
        return currentAltReachedAcceptState;
    }
    // side-effect: can alter configs.hasSemanticContext
    getEpsilonTarget(input, config, t, configs, speculative, treatEofAsEpsilon) {
        let c;
        switch (t.serializationType) {
            case 3 /* RULE */:
                let ruleTransition = t;
                if (this.optimize_tail_calls && ruleTransition.optimizedTailCall && !config.context.hasEmpty) {
                    c = config.transform(t.target, true);
                }
                else {
                    let newContext = config.context.getChild(ruleTransition.followState.stateNumber);
                    c = config.transform(t.target, true, newContext);
                }
                break;
            case 10 /* PRECEDENCE */:
                throw new Error("Precedence predicates are not supported in lexers.");
            case 4 /* PREDICATE */:
                /*  Track traversing semantic predicates. If we traverse,
                    we cannot add a DFA state for this "reach" computation
                    because the DFA would not test the predicate again in the
                    future. Rather than creating collections of semantic predicates
                    like v3 and testing them on prediction, v4 will test them on the
                    fly all the time using the ATN not the DFA. This is slower but
                    semantically it's not used that often. One of the key elements to
                    this predicate mechanism is not adding DFA states that see
                    predicates immediately afterwards in the ATN. For example,
    
                    a : ID {p1}? | ID {p2}? ;
    
                    should create the start state for rule 'a' (to save start state
                    competition), but should not create target of ID state. The
                    collection of ATN states the following ID references includes
                    states reached by traversing predicates. Since this is when we
                    test them, we cannot cash the DFA state target of ID.
                */
                let pt = t;
                if (LexerATNSimulator.debug) {
                    console.log("EVAL rule " + pt.ruleIndex + ":" + pt.predIndex);
                }
                configs.hasSemanticContext = true;
                if (this.evaluatePredicate(input, pt.ruleIndex, pt.predIndex, speculative)) {
                    c = config.transform(t.target, true);
                }
                else {
                    c = undefined;
                }
                break;
            case 6 /* ACTION */:
                if (config.context.hasEmpty) {
                    // execute actions anywhere in the start rule for a token.
                    //
                    // TODO: if the entry rule is invoked recursively, some
                    // actions may be executed during the recursive call. The
                    // problem can appear when hasEmpty is true but
                    // isEmpty is false. In this case, the config needs to be
                    // split into two contexts - one with just the empty path
                    // and another with everything but the empty path.
                    // Unfortunately, the current algorithm does not allow
                    // getEpsilonTarget to return two configurations, so
                    // additional modifications are needed before we can support
                    // the split operation.
                    let lexerActionExecutor = LexerActionExecutor_1.LexerActionExecutor.append(config.lexerActionExecutor, this.atn.lexerActions[t.actionIndex]);
                    c = config.transform(t.target, true, lexerActionExecutor);
                    break;
                }
                else {
                    // ignore actions in referenced rules
                    c = config.transform(t.target, true);
                    break;
                }
            case 1 /* EPSILON */:
                c = config.transform(t.target, true);
                break;
            case 5 /* ATOM */:
            case 2 /* RANGE */:
            case 7 /* SET */:
                if (treatEofAsEpsilon) {
                    if (t.matches(IntStream_1.IntStream.EOF, Lexer_1.Lexer.MIN_CHAR_VALUE, Lexer_1.Lexer.MAX_CHAR_VALUE)) {
                        c = config.transform(t.target, false);
                        break;
                    }
                }
                c = undefined;
                break;
            default:
                c = undefined;
                break;
        }
        return c;
    }
    /**
     * Evaluate a predicate specified in the lexer.
     *
     * If `speculative` is `true`, this method was called before
     * {@link #consume} for the matched character. This method should call
     * {@link #consume} before evaluating the predicate to ensure position
     * sensitive values, including {@link Lexer#getText}, {@link Lexer#getLine},
     * and {@link Lexer#getCharPositionInLine}, properly reflect the current
     * lexer state. This method should restore `input` and the simulator
     * to the original state before returning (i.e. undo the actions made by the
     * call to {@link #consume}.
     *
     * @param input The input stream.
     * @param ruleIndex The rule containing the predicate.
     * @param predIndex The index of the predicate within the rule.
     * @param speculative `true` if the current index in `input` is
     * one character before the predicate's location.
     *
     * @returns `true` if the specified predicate evaluates to
     * `true`.
     */
    evaluatePredicate(input, ruleIndex, predIndex, speculative) {
        // assume true if no recognizer was provided
        if (this.recog == null) {
            return true;
        }
        if (!speculative) {
            return this.recog.sempred(undefined, ruleIndex, predIndex);
        }
        let savedCharPositionInLine = this._charPositionInLine;
        let savedLine = this._line;
        let index = input.index;
        let marker = input.mark();
        try {
            this.consume(input);
            return this.recog.sempred(undefined, ruleIndex, predIndex);
        }
        finally {
            this._charPositionInLine = savedCharPositionInLine;
            this._line = savedLine;
            input.seek(index);
            input.release(marker);
        }
    }
    captureSimState(settings, input, dfaState) {
        settings.index = input.index;
        settings.line = this._line;
        settings.charPos = this._charPositionInLine;
        settings.dfaState = dfaState;
    }
    addDFAEdge(p, t, q) {
        if (q instanceof ATNConfigSet_1.ATNConfigSet) {
            /* leading to this call, ATNConfigSet.hasSemanticContext is used as a
            * marker indicating dynamic predicate evaluation makes this edge
            * dependent on the specific input sequence, so the static edge in the
            * DFA should be omitted. The target DFAState is still created since
            * execATN has the ability to resynchronize with the DFA state cache
            * following the predicate evaluation step.
            *
            * TJP notes: next time through the DFA, we see a pred again and eval.
            * If that gets us to a previously created (but dangling) DFA
            * state, we can continue in pure DFA mode from there.
            */
            let suppressEdge = q.hasSemanticContext;
            if (suppressEdge) {
                q.hasSemanticContext = false;
            }
            // @NotNull
            let to = this.addDFAState(q);
            if (suppressEdge) {
                return to;
            }
            this.addDFAEdge(p, t, to);
            return to;
        }
        else {
            if (LexerATNSimulator.debug) {
                console.log("EDGE " + p + " -> " + q + " upon " + String.fromCharCode(t));
            }
            if (p != null) {
                p.setTarget(t, q);
            }
        }
    }
    /** Add a new DFA state if there isn't one with this set of
     * 	configurations already. This method also detects the first
     * 	configuration containing an ATN rule stop state. Later, when
     * 	traversing the DFA, we will know which rule to accept.
     */
    addDFAState(configs) {
        /* the lexer evaluates predicates on-the-fly; by this point configs
         * should not contain any configurations with unevaluated predicates.
         */
        assert(!configs.hasSemanticContext);
        let proposed = new DFAState_1.DFAState(configs);
        let existing = this.atn.modeToDFA[this.mode].states.get(proposed);
        if (existing != null) {
            return existing;
        }
        configs.optimizeConfigs(this);
        let newState = new DFAState_1.DFAState(configs.clone(true));
        let firstConfigWithRuleStopState;
        for (let c of configs) {
            if (c.state instanceof RuleStopState_1.RuleStopState) {
                firstConfigWithRuleStopState = c;
                break;
            }
        }
        if (firstConfigWithRuleStopState != null) {
            let prediction = this.atn.ruleToTokenType[firstConfigWithRuleStopState.state.ruleIndex];
            let lexerActionExecutor = firstConfigWithRuleStopState.lexerActionExecutor;
            newState.acceptStateInfo = new AcceptStateInfo_1.AcceptStateInfo(prediction, lexerActionExecutor);
        }
        return this.atn.modeToDFA[this.mode].addState(newState);
    }
    getDFA(mode) {
        return this.atn.modeToDFA[mode];
    }
    /** Get the text matched so far for the current token.
     */
    getText(input) {
        // index is first lookahead char, don't include.
        return input.getText(Interval_1.Interval.of(this.startIndex, input.index - 1));
    }
    get line() {
        return this._line;
    }
    set line(line) {
        this._line = line;
    }
    get charPositionInLine() {
        return this._charPositionInLine;
    }
    set charPositionInLine(charPositionInLine) {
        this._charPositionInLine = charPositionInLine;
    }
    consume(input) {
        let curChar = input.LA(1);
        if (curChar === "\n".charCodeAt(0)) {
            this._line++;
            this._charPositionInLine = 0;
        }
        else {
            this._charPositionInLine++;
        }
        input.consume();
    }
    getTokenName(t) {
        if (t === -1) {
            return "EOF";
        }
        //if ( atn.g!=null ) return atn.g.getTokenDisplayName(t);
        return "'" + String.fromCharCode(t) + "'";
    }
};
__decorate([
    Decorators_1.NotNull
], LexerATNSimulator.prototype, "prevAccept", void 0);
__decorate([
    __param(0, Decorators_1.NotNull)
], LexerATNSimulator.prototype, "copyState", null);
__decorate([
    __param(0, Decorators_1.NotNull)
], LexerATNSimulator.prototype, "match", null);
__decorate([
    Decorators_1.Override
], LexerATNSimulator.prototype, "reset", null);
__decorate([
    __param(0, Decorators_1.NotNull)
], LexerATNSimulator.prototype, "matchATN", null);
__decorate([
    __param(0, Decorators_1.NotNull), __param(1, Decorators_1.NotNull)
], LexerATNSimulator.prototype, "execATN", null);
__decorate([
    __param(0, Decorators_1.NotNull)
], LexerATNSimulator.prototype, "getExistingTargetState", null);
__decorate([
    Decorators_1.NotNull,
    __param(0, Decorators_1.NotNull), __param(1, Decorators_1.NotNull)
], LexerATNSimulator.prototype, "computeTargetState", null);
__decorate([
    __param(0, Decorators_1.NotNull), __param(1, Decorators_1.NotNull), __param(2, Decorators_1.NotNull)
], LexerATNSimulator.prototype, "getReachableConfigSet", null);
__decorate([
    __param(0, Decorators_1.NotNull)
], LexerATNSimulator.prototype, "accept", null);
__decorate([
    Decorators_1.NotNull,
    __param(0, Decorators_1.NotNull),
    __param(1, Decorators_1.NotNull)
], LexerATNSimulator.prototype, "computeStartState", null);
__decorate([
    __param(0, Decorators_1.NotNull), __param(1, Decorators_1.NotNull), __param(2, Decorators_1.NotNull)
], LexerATNSimulator.prototype, "closure", null);
__decorate([
    __param(0, Decorators_1.NotNull),
    __param(1, Decorators_1.NotNull),
    __param(2, Decorators_1.NotNull),
    __param(3, Decorators_1.NotNull)
], LexerATNSimulator.prototype, "getEpsilonTarget", null);
__decorate([
    __param(0, Decorators_1.NotNull)
], LexerATNSimulator.prototype, "evaluatePredicate", null);
__decorate([
    __param(0, Decorators_1.NotNull),
    __param(1, Decorators_1.NotNull),
    __param(2, Decorators_1.NotNull)
], LexerATNSimulator.prototype, "captureSimState", null);
__decorate([
    Decorators_1.NotNull,
    __param(0, Decorators_1.NotNull)
], LexerATNSimulator.prototype, "addDFAState", null);
__decorate([
    Decorators_1.NotNull
], LexerATNSimulator.prototype, "getDFA", null);
__decorate([
    Decorators_1.NotNull,
    __param(0, Decorators_1.NotNull)
], LexerATNSimulator.prototype, "getText", null);
__decorate([
    __param(0, Decorators_1.NotNull)
], LexerATNSimulator.prototype, "consume", null);
__decorate([
    Decorators_1.NotNull
], LexerATNSimulator.prototype, "getTokenName", null);
LexerATNSimulator = __decorate([
    __param(0, Decorators_1.NotNull)
], LexerATNSimulator);
exports.LexerATNSimulator = LexerATNSimulator;
(function (LexerATNSimulator) {
    LexerATNSimulator.debug = false;
    LexerATNSimulator.dfa_debug = false;
    /** When we hit an accept state in either the DFA or the ATN, we
     *  have to notify the character stream to start buffering characters
     *  via {@link IntStream#mark} and record the current state. The current sim state
     *  includes the current index into the input, the current line,
     *  and current character position in that line. Note that the Lexer is
     *  tracking the starting line and characterization of the token. These
     *  variables track the "state" of the simulator when it hits an accept state.
     *
     *  We track these variables separately for the DFA and ATN simulation
     *  because the DFA simulation often has to fail over to the ATN
     *  simulation. If the ATN simulation fails, we need the DFA to fall
     *  back to its previously accepted state, if any. If the ATN succeeds,
     *  then the ATN does the accept and the DFA simulator that invoked it
     *  can simply return the predicted token type.
     */
    class SimState {
        constructor() {
            this.index = -1;
            this.line = 0;
            this.charPos = -1;
        }
        reset() {
            this.index = -1;
            this.line = 0;
            this.charPos = -1;
            this.dfaState = undefined;
        }
    }
    LexerATNSimulator.SimState = SimState;
})(LexerATNSimulator = exports.LexerATNSimulator || (exports.LexerATNSimulator = {}));
exports.LexerATNSimulator = LexerATNSimulator;
//# sourceMappingURL=LexerATNSimulator.js.map

/***/ }),

/***/ 137:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
Object.defineProperty(exports, "__esModule", ({ value: true }));
//# sourceMappingURL=LexerAction.js.map

/***/ }),

/***/ 44:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.LexerActionExecutor = void 0;
// ConvertTo-TS run at 2016-10-04T11:26:28.8810453-07:00
const ArrayEqualityComparator_1 = __webpack_require__(4339);
const LexerIndexedCustomAction_1 = __webpack_require__(737);
const MurmurHash_1 = __webpack_require__(7789);
const Decorators_1 = __webpack_require__(681);
/**
 * Represents an executor for a sequence of lexer actions which traversed during
 * the matching operation of a lexer rule (token).
 *
 * The executor tracks position information for position-dependent lexer actions
 * efficiently, ensuring that actions appearing only at the end of the rule do
 * not cause bloating of the {@link DFA} created for the lexer.
 *
 * @author Sam Harwell
 * @since 4.2
 */
let LexerActionExecutor = class LexerActionExecutor {
    /**
     * Constructs an executor for a sequence of {@link LexerAction} actions.
     * @param lexerActions The lexer actions to execute.
     */
    constructor(lexerActions) {
        this._lexerActions = lexerActions;
        let hash = MurmurHash_1.MurmurHash.initialize();
        for (let lexerAction of lexerActions) {
            hash = MurmurHash_1.MurmurHash.update(hash, lexerAction);
        }
        this.cachedHashCode = MurmurHash_1.MurmurHash.finish(hash, lexerActions.length);
    }
    /**
     * Creates a {@link LexerActionExecutor} which executes the actions for
     * the input `lexerActionExecutor` followed by a specified
     * `lexerAction`.
     *
     * @param lexerActionExecutor The executor for actions already traversed by
     * the lexer while matching a token within a particular
     * {@link ATNConfig}. If this is `undefined`, the method behaves as though
     * it were an empty executor.
     * @param lexerAction The lexer action to execute after the actions
     * specified in `lexerActionExecutor`.
     *
     * @returns A {@link LexerActionExecutor} for executing the combine actions
     * of `lexerActionExecutor` and `lexerAction`.
     */
    static append(lexerActionExecutor, lexerAction) {
        if (!lexerActionExecutor) {
            return new LexerActionExecutor([lexerAction]);
        }
        let lexerActions = lexerActionExecutor._lexerActions.slice(0);
        lexerActions.push(lexerAction);
        return new LexerActionExecutor(lexerActions);
    }
    /**
     * Creates a {@link LexerActionExecutor} which encodes the current offset
     * for position-dependent lexer actions.
     *
     * Normally, when the executor encounters lexer actions where
     * {@link LexerAction#isPositionDependent} returns `true`, it calls
     * {@link IntStream#seek} on the input {@link CharStream} to set the input
     * position to the *end* of the current token. This behavior provides
     * for efficient DFA representation of lexer actions which appear at the end
     * of a lexer rule, even when the lexer rule matches a variable number of
     * characters.
     *
     * Prior to traversing a match transition in the ATN, the current offset
     * from the token start index is assigned to all position-dependent lexer
     * actions which have not already been assigned a fixed offset. By storing
     * the offsets relative to the token start index, the DFA representation of
     * lexer actions which appear in the middle of tokens remains efficient due
     * to sharing among tokens of the same length, regardless of their absolute
     * position in the input stream.
     *
     * If the current executor already has offsets assigned to all
     * position-dependent lexer actions, the method returns `this`.
     *
     * @param offset The current offset to assign to all position-dependent
     * lexer actions which do not already have offsets assigned.
     *
     * @returns A {@link LexerActionExecutor} which stores input stream offsets
     * for all position-dependent lexer actions.
     */
    fixOffsetBeforeMatch(offset) {
        let updatedLexerActions;
        for (let i = 0; i < this._lexerActions.length; i++) {
            if (this._lexerActions[i].isPositionDependent && !(this._lexerActions[i] instanceof LexerIndexedCustomAction_1.LexerIndexedCustomAction)) {
                if (!updatedLexerActions) {
                    updatedLexerActions = this._lexerActions.slice(0);
                }
                updatedLexerActions[i] = new LexerIndexedCustomAction_1.LexerIndexedCustomAction(offset, this._lexerActions[i]);
            }
        }
        if (!updatedLexerActions) {
            return this;
        }
        return new LexerActionExecutor(updatedLexerActions);
    }
    /**
     * Gets the lexer actions to be executed by this executor.
     * @returns The lexer actions to be executed by this executor.
     */
    get lexerActions() {
        return this._lexerActions;
    }
    /**
     * Execute the actions encapsulated by this executor within the context of a
     * particular {@link Lexer}.
     *
     * This method calls {@link IntStream#seek} to set the position of the
     * `input` {@link CharStream} prior to calling
     * {@link LexerAction#execute} on a position-dependent action. Before the
     * method returns, the input position will be restored to the same position
     * it was in when the method was invoked.
     *
     * @param lexer The lexer instance.
     * @param input The input stream which is the source for the current token.
     * When this method is called, the current {@link IntStream#index} for
     * `input` should be the start of the following token, i.e. 1
     * character past the end of the current token.
     * @param startIndex The token start index. This value may be passed to
     * {@link IntStream#seek} to set the `input` position to the beginning
     * of the token.
     */
    execute(lexer, input, startIndex) {
        let requiresSeek = false;
        let stopIndex = input.index;
        try {
            for (let lexerAction of this._lexerActions) {
                if (lexerAction instanceof LexerIndexedCustomAction_1.LexerIndexedCustomAction) {
                    let offset = lexerAction.offset;
                    input.seek(startIndex + offset);
                    lexerAction = lexerAction.action;
                    requiresSeek = (startIndex + offset) !== stopIndex;
                }
                else if (lexerAction.isPositionDependent) {
                    input.seek(stopIndex);
                    requiresSeek = false;
                }
                lexerAction.execute(lexer);
            }
        }
        finally {
            if (requiresSeek) {
                input.seek(stopIndex);
            }
        }
    }
    hashCode() {
        return this.cachedHashCode;
    }
    equals(obj) {
        if (obj === this) {
            return true;
        }
        else if (!(obj instanceof LexerActionExecutor)) {
            return false;
        }
        return this.cachedHashCode === obj.cachedHashCode
            && ArrayEqualityComparator_1.ArrayEqualityComparator.INSTANCE.equals(this._lexerActions, obj._lexerActions);
    }
};
__decorate([
    Decorators_1.NotNull
], LexerActionExecutor.prototype, "_lexerActions", void 0);
__decorate([
    Decorators_1.NotNull
], LexerActionExecutor.prototype, "lexerActions", null);
__decorate([
    __param(0, Decorators_1.NotNull)
], LexerActionExecutor.prototype, "execute", null);
__decorate([
    Decorators_1.Override
], LexerActionExecutor.prototype, "hashCode", null);
__decorate([
    Decorators_1.Override
], LexerActionExecutor.prototype, "equals", null);
__decorate([
    Decorators_1.NotNull,
    __param(1, Decorators_1.NotNull)
], LexerActionExecutor, "append", null);
LexerActionExecutor = __decorate([
    __param(0, Decorators_1.NotNull)
], LexerActionExecutor);
exports.LexerActionExecutor = LexerActionExecutor;
//# sourceMappingURL=LexerActionExecutor.js.map

/***/ }),

/***/ 8136:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.LexerActionType = void 0;
// ConvertTo-TS run at 2016-10-04T11:26:29.0172086-07:00
/**
 * Represents the serialization type of a {@link LexerAction}.
 *
 * @author Sam Harwell
 * @since 4.2
 */
var LexerActionType;
(function (LexerActionType) {
    /**
     * The type of a {@link LexerChannelAction} action.
     */
    LexerActionType[LexerActionType["CHANNEL"] = 0] = "CHANNEL";
    /**
     * The type of a {@link LexerCustomAction} action.
     */
    LexerActionType[LexerActionType["CUSTOM"] = 1] = "CUSTOM";
    /**
     * The type of a {@link LexerModeAction} action.
     */
    LexerActionType[LexerActionType["MODE"] = 2] = "MODE";
    /**
     * The type of a {@link LexerMoreAction} action.
     */
    LexerActionType[LexerActionType["MORE"] = 3] = "MORE";
    /**
     * The type of a {@link LexerPopModeAction} action.
     */
    LexerActionType[LexerActionType["POP_MODE"] = 4] = "POP_MODE";
    /**
     * The type of a {@link LexerPushModeAction} action.
     */
    LexerActionType[LexerActionType["PUSH_MODE"] = 5] = "PUSH_MODE";
    /**
     * The type of a {@link LexerSkipAction} action.
     */
    LexerActionType[LexerActionType["SKIP"] = 6] = "SKIP";
    /**
     * The type of a {@link LexerTypeAction} action.
     */
    LexerActionType[LexerActionType["TYPE"] = 7] = "TYPE";
})(LexerActionType = exports.LexerActionType || (exports.LexerActionType = {}));
//# sourceMappingURL=LexerActionType.js.map

/***/ }),

/***/ 2247:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.LexerChannelAction = void 0;
const MurmurHash_1 = __webpack_require__(7789);
const Decorators_1 = __webpack_require__(681);
/**
 * Implements the `channel` lexer action by calling
 * {@link Lexer#setChannel} with the assigned channel.
 *
 * @author Sam Harwell
 * @since 4.2
 */
class LexerChannelAction {
    /**
     * Constructs a new `channel` action with the specified channel value.
     * @param channel The channel value to pass to {@link Lexer#setChannel}.
     */
    constructor(channel) {
        this._channel = channel;
    }
    /**
     * Gets the channel to use for the {@link Token} created by the lexer.
     *
     * @returns The channel to use for the {@link Token} created by the lexer.
     */
    get channel() {
        return this._channel;
    }
    /**
     * {@inheritDoc}
     * @returns This method returns {@link LexerActionType#CHANNEL}.
     */
    get actionType() {
        return 0 /* CHANNEL */;
    }
    /**
     * {@inheritDoc}
     * @returns This method returns `false`.
     */
    get isPositionDependent() {
        return false;
    }
    /**
     * {@inheritDoc}
     *
     * This action is implemented by calling {@link Lexer#setChannel} with the
     * value provided by {@link #getChannel}.
     */
    execute(lexer) {
        lexer.channel = this._channel;
    }
    hashCode() {
        let hash = MurmurHash_1.MurmurHash.initialize();
        hash = MurmurHash_1.MurmurHash.update(hash, this.actionType);
        hash = MurmurHash_1.MurmurHash.update(hash, this._channel);
        return MurmurHash_1.MurmurHash.finish(hash, 2);
    }
    equals(obj) {
        if (obj === this) {
            return true;
        }
        else if (!(obj instanceof LexerChannelAction)) {
            return false;
        }
        return this._channel === obj._channel;
    }
    toString() {
        return `channel(${this._channel})`;
    }
}
__decorate([
    Decorators_1.Override
], LexerChannelAction.prototype, "actionType", null);
__decorate([
    Decorators_1.Override
], LexerChannelAction.prototype, "isPositionDependent", null);
__decorate([
    Decorators_1.Override,
    __param(0, Decorators_1.NotNull)
], LexerChannelAction.prototype, "execute", null);
__decorate([
    Decorators_1.Override
], LexerChannelAction.prototype, "hashCode", null);
__decorate([
    Decorators_1.Override
], LexerChannelAction.prototype, "equals", null);
__decorate([
    Decorators_1.Override
], LexerChannelAction.prototype, "toString", null);
exports.LexerChannelAction = LexerChannelAction;
//# sourceMappingURL=LexerChannelAction.js.map

/***/ }),

/***/ 4743:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.LexerCustomAction = void 0;
const MurmurHash_1 = __webpack_require__(7789);
const Decorators_1 = __webpack_require__(681);
/**
 * Executes a custom lexer action by calling {@link Recognizer#action} with the
 * rule and action indexes assigned to the custom action. The implementation of
 * a custom action is added to the generated code for the lexer in an override
 * of {@link Recognizer#action} when the grammar is compiled.
 *
 * This class may represent embedded actions created with the `{...}`
 * syntax in ANTLR 4, as well as actions created for lexer commands where the
 * command argument could not be evaluated when the grammar was compiled.
 *
 * @author Sam Harwell
 * @since 4.2
 */
class LexerCustomAction {
    /**
     * Constructs a custom lexer action with the specified rule and action
     * indexes.
     *
     * @param ruleIndex The rule index to use for calls to
     * {@link Recognizer#action}.
     * @param actionIndex The action index to use for calls to
     * {@link Recognizer#action}.
     */
    constructor(ruleIndex, actionIndex) {
        this._ruleIndex = ruleIndex;
        this._actionIndex = actionIndex;
    }
    /**
     * Gets the rule index to use for calls to {@link Recognizer#action}.
     *
     * @returns The rule index for the custom action.
     */
    get ruleIndex() {
        return this._ruleIndex;
    }
    /**
     * Gets the action index to use for calls to {@link Recognizer#action}.
     *
     * @returns The action index for the custom action.
     */
    get actionIndex() {
        return this._actionIndex;
    }
    /**
     * {@inheritDoc}
     *
     * @returns This method returns {@link LexerActionType#CUSTOM}.
     */
    get actionType() {
        return 1 /* CUSTOM */;
    }
    /**
     * Gets whether the lexer action is position-dependent. Position-dependent
     * actions may have different semantics depending on the {@link CharStream}
     * index at the time the action is executed.
     *
     * Custom actions are position-dependent since they may represent a
     * user-defined embedded action which makes calls to methods like
     * {@link Lexer#getText}.
     *
     * @returns This method returns `true`.
     */
    get isPositionDependent() {
        return true;
    }
    /**
     * {@inheritDoc}
     *
     * Custom actions are implemented by calling {@link Lexer#action} with the
     * appropriate rule and action indexes.
     */
    execute(lexer) {
        lexer.action(undefined, this._ruleIndex, this._actionIndex);
    }
    hashCode() {
        let hash = MurmurHash_1.MurmurHash.initialize();
        hash = MurmurHash_1.MurmurHash.update(hash, this.actionType);
        hash = MurmurHash_1.MurmurHash.update(hash, this._ruleIndex);
        hash = MurmurHash_1.MurmurHash.update(hash, this._actionIndex);
        return MurmurHash_1.MurmurHash.finish(hash, 3);
    }
    equals(obj) {
        if (obj === this) {
            return true;
        }
        else if (!(obj instanceof LexerCustomAction)) {
            return false;
        }
        return this._ruleIndex === obj._ruleIndex
            && this._actionIndex === obj._actionIndex;
    }
}
__decorate([
    Decorators_1.Override
], LexerCustomAction.prototype, "actionType", null);
__decorate([
    Decorators_1.Override
], LexerCustomAction.prototype, "isPositionDependent", null);
__decorate([
    Decorators_1.Override,
    __param(0, Decorators_1.NotNull)
], LexerCustomAction.prototype, "execute", null);
__decorate([
    Decorators_1.Override
], LexerCustomAction.prototype, "hashCode", null);
__decorate([
    Decorators_1.Override
], LexerCustomAction.prototype, "equals", null);
exports.LexerCustomAction = LexerCustomAction;
//# sourceMappingURL=LexerCustomAction.js.map

/***/ }),

/***/ 737:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.LexerIndexedCustomAction = void 0;
const MurmurHash_1 = __webpack_require__(7789);
const Decorators_1 = __webpack_require__(681);
/**
 * This implementation of {@link LexerAction} is used for tracking input offsets
 * for position-dependent actions within a {@link LexerActionExecutor}.
 *
 * This action is not serialized as part of the ATN, and is only required for
 * position-dependent lexer actions which appear at a location other than the
 * end of a rule. For more information about DFA optimizations employed for
 * lexer actions, see {@link LexerActionExecutor#append} and
 * {@link LexerActionExecutor#fixOffsetBeforeMatch}.
 *
 * @author Sam Harwell
 * @since 4.2
 */
let LexerIndexedCustomAction = class LexerIndexedCustomAction {
    /**
     * Constructs a new indexed custom action by associating a character offset
     * with a {@link LexerAction}.
     *
     * Note: This class is only required for lexer actions for which
     * {@link LexerAction#isPositionDependent} returns `true`.
     *
     * @param offset The offset into the input {@link CharStream}, relative to
     * the token start index, at which the specified lexer action should be
     * executed.
     * @param action The lexer action to execute at a particular offset in the
     * input {@link CharStream}.
     */
    constructor(offset, action) {
        this._offset = offset;
        this._action = action;
    }
    /**
     * Gets the location in the input {@link CharStream} at which the lexer
     * action should be executed. The value is interpreted as an offset relative
     * to the token start index.
     *
     * @returns The location in the input {@link CharStream} at which the lexer
     * action should be executed.
     */
    get offset() {
        return this._offset;
    }
    /**
     * Gets the lexer action to execute.
     *
     * @returns A {@link LexerAction} object which executes the lexer action.
     */
    get action() {
        return this._action;
    }
    /**
     * {@inheritDoc}
     *
     * @returns This method returns the result of calling {@link #getActionType}
     * on the {@link LexerAction} returned by {@link #getAction}.
     */
    get actionType() {
        return this._action.actionType;
    }
    /**
     * {@inheritDoc}
     * @returns This method returns `true`.
     */
    get isPositionDependent() {
        return true;
    }
    /**
     * {@inheritDoc}
     *
     * This method calls {@link #execute} on the result of {@link #getAction}
     * using the provided `lexer`.
     */
    execute(lexer) {
        // assume the input stream position was properly set by the calling code
        this._action.execute(lexer);
    }
    hashCode() {
        let hash = MurmurHash_1.MurmurHash.initialize();
        hash = MurmurHash_1.MurmurHash.update(hash, this._offset);
        hash = MurmurHash_1.MurmurHash.update(hash, this._action);
        return MurmurHash_1.MurmurHash.finish(hash, 2);
    }
    equals(obj) {
        if (obj === this) {
            return true;
        }
        else if (!(obj instanceof LexerIndexedCustomAction)) {
            return false;
        }
        return this._offset === obj._offset
            && this._action.equals(obj._action);
    }
};
__decorate([
    Decorators_1.NotNull
], LexerIndexedCustomAction.prototype, "action", null);
__decorate([
    Decorators_1.Override
], LexerIndexedCustomAction.prototype, "actionType", null);
__decorate([
    Decorators_1.Override
], LexerIndexedCustomAction.prototype, "isPositionDependent", null);
__decorate([
    Decorators_1.Override
], LexerIndexedCustomAction.prototype, "execute", null);
__decorate([
    Decorators_1.Override
], LexerIndexedCustomAction.prototype, "hashCode", null);
__decorate([
    Decorators_1.Override
], LexerIndexedCustomAction.prototype, "equals", null);
LexerIndexedCustomAction = __decorate([
    __param(1, Decorators_1.NotNull)
], LexerIndexedCustomAction);
exports.LexerIndexedCustomAction = LexerIndexedCustomAction;
//# sourceMappingURL=LexerIndexedCustomAction.js.map

/***/ }),

/***/ 6452:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.LexerModeAction = void 0;
const MurmurHash_1 = __webpack_require__(7789);
const Decorators_1 = __webpack_require__(681);
/**
 * Implements the `mode` lexer action by calling {@link Lexer#mode} with
 * the assigned mode.
 *
 * @author Sam Harwell
 * @since 4.2
 */
class LexerModeAction {
    /**
     * Constructs a new `mode` action with the specified mode value.
     * @param mode The mode value to pass to {@link Lexer#mode}.
     */
    constructor(mode) {
        this._mode = mode;
    }
    /**
     * Get the lexer mode this action should transition the lexer to.
     *
     * @returns The lexer mode for this `mode` command.
     */
    get mode() {
        return this._mode;
    }
    /**
     * {@inheritDoc}
     * @returns This method returns {@link LexerActionType#MODE}.
     */
    get actionType() {
        return 2 /* MODE */;
    }
    /**
     * {@inheritDoc}
     * @returns This method returns `false`.
     */
    get isPositionDependent() {
        return false;
    }
    /**
     * {@inheritDoc}
     *
     * This action is implemented by calling {@link Lexer#mode} with the
     * value provided by {@link #getMode}.
     */
    execute(lexer) {
        lexer.mode(this._mode);
    }
    hashCode() {
        let hash = MurmurHash_1.MurmurHash.initialize();
        hash = MurmurHash_1.MurmurHash.update(hash, this.actionType);
        hash = MurmurHash_1.MurmurHash.update(hash, this._mode);
        return MurmurHash_1.MurmurHash.finish(hash, 2);
    }
    equals(obj) {
        if (obj === this) {
            return true;
        }
        else if (!(obj instanceof LexerModeAction)) {
            return false;
        }
        return this._mode === obj._mode;
    }
    toString() {
        return `mode(${this._mode})`;
    }
}
__decorate([
    Decorators_1.Override
], LexerModeAction.prototype, "actionType", null);
__decorate([
    Decorators_1.Override
], LexerModeAction.prototype, "isPositionDependent", null);
__decorate([
    Decorators_1.Override,
    __param(0, Decorators_1.NotNull)
], LexerModeAction.prototype, "execute", null);
__decorate([
    Decorators_1.Override
], LexerModeAction.prototype, "hashCode", null);
__decorate([
    Decorators_1.Override
], LexerModeAction.prototype, "equals", null);
__decorate([
    Decorators_1.Override
], LexerModeAction.prototype, "toString", null);
exports.LexerModeAction = LexerModeAction;
//# sourceMappingURL=LexerModeAction.js.map

/***/ }),

/***/ 5974:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.LexerMoreAction = void 0;
const MurmurHash_1 = __webpack_require__(7789);
const Decorators_1 = __webpack_require__(681);
/**
 * Implements the `more` lexer action by calling {@link Lexer#more}.
 *
 * The `more` command does not have any parameters, so this action is
 * implemented as a singleton instance exposed by {@link #INSTANCE}.
 *
 * @author Sam Harwell
 * @since 4.2
 */
class LexerMoreAction {
    /**
     * Constructs the singleton instance of the lexer `more` command.
     */
    constructor() {
        // intentionally empty
    }
    /**
     * {@inheritDoc}
     * @returns This method returns {@link LexerActionType#MORE}.
     */
    get actionType() {
        return 3 /* MORE */;
    }
    /**
     * {@inheritDoc}
     * @returns This method returns `false`.
     */
    get isPositionDependent() {
        return false;
    }
    /**
     * {@inheritDoc}
     *
     * This action is implemented by calling {@link Lexer#more}.
     */
    execute(lexer) {
        lexer.more();
    }
    hashCode() {
        let hash = MurmurHash_1.MurmurHash.initialize();
        hash = MurmurHash_1.MurmurHash.update(hash, this.actionType);
        return MurmurHash_1.MurmurHash.finish(hash, 1);
    }
    equals(obj) {
        return obj === this;
    }
    toString() {
        return "more";
    }
}
__decorate([
    Decorators_1.Override
], LexerMoreAction.prototype, "actionType", null);
__decorate([
    Decorators_1.Override
], LexerMoreAction.prototype, "isPositionDependent", null);
__decorate([
    Decorators_1.Override,
    __param(0, Decorators_1.NotNull)
], LexerMoreAction.prototype, "execute", null);
__decorate([
    Decorators_1.Override
], LexerMoreAction.prototype, "hashCode", null);
__decorate([
    Decorators_1.Override
], LexerMoreAction.prototype, "equals", null);
__decorate([
    Decorators_1.Override
], LexerMoreAction.prototype, "toString", null);
exports.LexerMoreAction = LexerMoreAction;
(function (LexerMoreAction) {
    /**
     * Provides a singleton instance of this parameterless lexer action.
     */
    LexerMoreAction.INSTANCE = new LexerMoreAction();
})(LexerMoreAction = exports.LexerMoreAction || (exports.LexerMoreAction = {}));
//# sourceMappingURL=LexerMoreAction.js.map

/***/ }),

/***/ 1349:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.LexerPopModeAction = void 0;
const MurmurHash_1 = __webpack_require__(7789);
const Decorators_1 = __webpack_require__(681);
/**
 * Implements the `popMode` lexer action by calling {@link Lexer#popMode}.
 *
 * The `popMode` command does not have any parameters, so this action is
 * implemented as a singleton instance exposed by {@link #INSTANCE}.
 *
 * @author Sam Harwell
 * @since 4.2
 */
class LexerPopModeAction {
    /**
     * Constructs the singleton instance of the lexer `popMode` command.
     */
    constructor() {
        // intentionally empty
    }
    /**
     * {@inheritDoc}
     * @returns This method returns {@link LexerActionType#POP_MODE}.
     */
    get actionType() {
        return 4 /* POP_MODE */;
    }
    /**
     * {@inheritDoc}
     * @returns This method returns `false`.
     */
    get isPositionDependent() {
        return false;
    }
    /**
     * {@inheritDoc}
     *
     * This action is implemented by calling {@link Lexer#popMode}.
     */
    execute(lexer) {
        lexer.popMode();
    }
    hashCode() {
        let hash = MurmurHash_1.MurmurHash.initialize();
        hash = MurmurHash_1.MurmurHash.update(hash, this.actionType);
        return MurmurHash_1.MurmurHash.finish(hash, 1);
    }
    equals(obj) {
        return obj === this;
    }
    toString() {
        return "popMode";
    }
}
__decorate([
    Decorators_1.Override
], LexerPopModeAction.prototype, "actionType", null);
__decorate([
    Decorators_1.Override
], LexerPopModeAction.prototype, "isPositionDependent", null);
__decorate([
    Decorators_1.Override,
    __param(0, Decorators_1.NotNull)
], LexerPopModeAction.prototype, "execute", null);
__decorate([
    Decorators_1.Override
], LexerPopModeAction.prototype, "hashCode", null);
__decorate([
    Decorators_1.Override
], LexerPopModeAction.prototype, "equals", null);
__decorate([
    Decorators_1.Override
], LexerPopModeAction.prototype, "toString", null);
exports.LexerPopModeAction = LexerPopModeAction;
(function (LexerPopModeAction) {
    /**
     * Provides a singleton instance of this parameterless lexer action.
     */
    LexerPopModeAction.INSTANCE = new LexerPopModeAction();
})(LexerPopModeAction = exports.LexerPopModeAction || (exports.LexerPopModeAction = {}));
//# sourceMappingURL=LexerPopModeAction.js.map

/***/ }),

/***/ 38:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.LexerPushModeAction = void 0;
const MurmurHash_1 = __webpack_require__(7789);
const Decorators_1 = __webpack_require__(681);
/**
 * Implements the `pushMode` lexer action by calling
 * {@link Lexer#pushMode} with the assigned mode.
 *
 * @author Sam Harwell
 * @since 4.2
 */
class LexerPushModeAction {
    /**
     * Constructs a new `pushMode` action with the specified mode value.
     * @param mode The mode value to pass to {@link Lexer#pushMode}.
     */
    constructor(mode) {
        this._mode = mode;
    }
    /**
     * Get the lexer mode this action should transition the lexer to.
     *
     * @returns The lexer mode for this `pushMode` command.
     */
    get mode() {
        return this._mode;
    }
    /**
     * {@inheritDoc}
     * @returns This method returns {@link LexerActionType#PUSH_MODE}.
     */
    get actionType() {
        return 5 /* PUSH_MODE */;
    }
    /**
     * {@inheritDoc}
     * @returns This method returns `false`.
     */
    get isPositionDependent() {
        return false;
    }
    /**
     * {@inheritDoc}
     *
     * This action is implemented by calling {@link Lexer#pushMode} with the
     * value provided by {@link #getMode}.
     */
    execute(lexer) {
        lexer.pushMode(this._mode);
    }
    hashCode() {
        let hash = MurmurHash_1.MurmurHash.initialize();
        hash = MurmurHash_1.MurmurHash.update(hash, this.actionType);
        hash = MurmurHash_1.MurmurHash.update(hash, this._mode);
        return MurmurHash_1.MurmurHash.finish(hash, 2);
    }
    equals(obj) {
        if (obj === this) {
            return true;
        }
        else if (!(obj instanceof LexerPushModeAction)) {
            return false;
        }
        return this._mode === obj._mode;
    }
    toString() {
        return `pushMode(${this._mode})`;
    }
}
__decorate([
    Decorators_1.Override
], LexerPushModeAction.prototype, "actionType", null);
__decorate([
    Decorators_1.Override
], LexerPushModeAction.prototype, "isPositionDependent", null);
__decorate([
    Decorators_1.Override,
    __param(0, Decorators_1.NotNull)
], LexerPushModeAction.prototype, "execute", null);
__decorate([
    Decorators_1.Override
], LexerPushModeAction.prototype, "hashCode", null);
__decorate([
    Decorators_1.Override
], LexerPushModeAction.prototype, "equals", null);
__decorate([
    Decorators_1.Override
], LexerPushModeAction.prototype, "toString", null);
exports.LexerPushModeAction = LexerPushModeAction;
//# sourceMappingURL=LexerPushModeAction.js.map

/***/ }),

/***/ 8680:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.LexerSkipAction = void 0;
const MurmurHash_1 = __webpack_require__(7789);
const Decorators_1 = __webpack_require__(681);
/**
 * Implements the `skip` lexer action by calling {@link Lexer#skip}.
 *
 * The `skip` command does not have any parameters, so this action is
 * implemented as a singleton instance exposed by {@link #INSTANCE}.
 *
 * @author Sam Harwell
 * @since 4.2
 */
class LexerSkipAction {
    /**
     * Constructs the singleton instance of the lexer `skip` command.
     */
    constructor() {
        // intentionally empty
    }
    /**
     * {@inheritDoc}
     * @returns This method returns {@link LexerActionType#SKIP}.
     */
    get actionType() {
        return 6 /* SKIP */;
    }
    /**
     * {@inheritDoc}
     * @returns This method returns `false`.
     */
    get isPositionDependent() {
        return false;
    }
    /**
     * {@inheritDoc}
     *
     * This action is implemented by calling {@link Lexer#skip}.
     */
    execute(lexer) {
        lexer.skip();
    }
    hashCode() {
        let hash = MurmurHash_1.MurmurHash.initialize();
        hash = MurmurHash_1.MurmurHash.update(hash, this.actionType);
        return MurmurHash_1.MurmurHash.finish(hash, 1);
    }
    equals(obj) {
        return obj === this;
    }
    toString() {
        return "skip";
    }
}
__decorate([
    Decorators_1.Override
], LexerSkipAction.prototype, "actionType", null);
__decorate([
    Decorators_1.Override
], LexerSkipAction.prototype, "isPositionDependent", null);
__decorate([
    Decorators_1.Override,
    __param(0, Decorators_1.NotNull)
], LexerSkipAction.prototype, "execute", null);
__decorate([
    Decorators_1.Override
], LexerSkipAction.prototype, "hashCode", null);
__decorate([
    Decorators_1.Override
], LexerSkipAction.prototype, "equals", null);
__decorate([
    Decorators_1.Override
], LexerSkipAction.prototype, "toString", null);
exports.LexerSkipAction = LexerSkipAction;
(function (LexerSkipAction) {
    /**
     * Provides a singleton instance of this parameterless lexer action.
     */
    LexerSkipAction.INSTANCE = new LexerSkipAction();
})(LexerSkipAction = exports.LexerSkipAction || (exports.LexerSkipAction = {}));
//# sourceMappingURL=LexerSkipAction.js.map

/***/ }),

/***/ 4006:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.LexerTypeAction = void 0;
const MurmurHash_1 = __webpack_require__(7789);
const Decorators_1 = __webpack_require__(681);
/**
 * Implements the `type` lexer action by setting `Lexer.type`
 * with the assigned type.
 *
 * @author Sam Harwell
 * @since 4.2
 */
class LexerTypeAction {
    /**
     * Constructs a new `type` action with the specified token type value.
     * @param type The type to assign to the token using `Lexer.type`.
     */
    constructor(type) {
        this._type = type;
    }
    /**
     * Gets the type to assign to a token created by the lexer.
     * @returns The type to assign to a token created by the lexer.
     */
    get type() {
        return this._type;
    }
    /**
     * {@inheritDoc}
     * @returns This method returns {@link LexerActionType#TYPE}.
     */
    get actionType() {
        return 7 /* TYPE */;
    }
    /**
     * {@inheritDoc}
     * @returns This method returns `false`.
     */
    get isPositionDependent() {
        return false;
    }
    /**
     * {@inheritDoc}
     *
     * This action is implemented by setting `Lexer.type` with the
     * value provided by `type`.
     */
    execute(lexer) {
        lexer.type = this._type;
    }
    hashCode() {
        let hash = MurmurHash_1.MurmurHash.initialize();
        hash = MurmurHash_1.MurmurHash.update(hash, this.actionType);
        hash = MurmurHash_1.MurmurHash.update(hash, this._type);
        return MurmurHash_1.MurmurHash.finish(hash, 2);
    }
    equals(obj) {
        if (obj === this) {
            return true;
        }
        else if (!(obj instanceof LexerTypeAction)) {
            return false;
        }
        return this._type === obj._type;
    }
    toString() {
        return `type(${this._type})`;
    }
}
__decorate([
    Decorators_1.Override
], LexerTypeAction.prototype, "actionType", null);
__decorate([
    Decorators_1.Override
], LexerTypeAction.prototype, "isPositionDependent", null);
__decorate([
    Decorators_1.Override,
    __param(0, Decorators_1.NotNull)
], LexerTypeAction.prototype, "execute", null);
__decorate([
    Decorators_1.Override
], LexerTypeAction.prototype, "hashCode", null);
__decorate([
    Decorators_1.Override
], LexerTypeAction.prototype, "equals", null);
__decorate([
    Decorators_1.Override
], LexerTypeAction.prototype, "toString", null);
exports.LexerTypeAction = LexerTypeAction;
//# sourceMappingURL=LexerTypeAction.js.map

/***/ }),

/***/ 3604:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.LookaheadEventInfo = void 0;
// ConvertTo-TS run at 2016-10-04T11:26:30.6852565-07:00
const DecisionEventInfo_1 = __webpack_require__(1548);
const Decorators_1 = __webpack_require__(681);
/**
 * This class represents profiling event information for tracking the lookahead
 * depth required in order to make a prediction.
 *
 * @since 4.3
 */
let LookaheadEventInfo = class LookaheadEventInfo extends DecisionEventInfo_1.DecisionEventInfo {
    /**
     * Constructs a new instance of the {@link LookaheadEventInfo} class with
     * the specified detailed lookahead information.
     *
     * @param decision The decision number
     * @param state The final simulator state containing the necessary
     * information to determine the result of a prediction, or `undefined` if
     * the final state is not available
     * @param input The input token stream
     * @param startIndex The start index for the current prediction
     * @param stopIndex The index at which the prediction was finally made
     * @param fullCtx `true` if the current lookahead is part of an LL
     * prediction; otherwise, `false` if the current lookahead is part of
     * an SLL prediction
     */
    constructor(decision, state, predictedAlt, input, startIndex, stopIndex, fullCtx) {
        super(decision, state, input, startIndex, stopIndex, fullCtx);
        this.predictedAlt = predictedAlt;
    }
};
LookaheadEventInfo = __decorate([
    __param(3, Decorators_1.NotNull)
], LookaheadEventInfo);
exports.LookaheadEventInfo = LookaheadEventInfo;
//# sourceMappingURL=LookaheadEventInfo.js.map

/***/ }),

/***/ 29:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.LoopEndState = void 0;
// ConvertTo-TS run at 2016-10-04T11:26:30.7737978-07:00
const ATNState_1 = __webpack_require__(1971);
const ATNStateType_1 = __webpack_require__(9602);
const Decorators_1 = __webpack_require__(681);
/** Mark the end of a * or + loop. */
class LoopEndState extends ATNState_1.ATNState {
    get stateType() {
        return ATNStateType_1.ATNStateType.LOOP_END;
    }
}
__decorate([
    Decorators_1.Override
], LoopEndState.prototype, "stateType", null);
exports.LoopEndState = LoopEndState;
//# sourceMappingURL=LoopEndState.js.map

/***/ }),

/***/ 845:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.NotSetTransition = void 0;
const Decorators_1 = __webpack_require__(681);
const SetTransition_1 = __webpack_require__(4442);
let NotSetTransition = class NotSetTransition extends SetTransition_1.SetTransition {
    constructor(target, set) {
        super(target, set);
    }
    get serializationType() {
        return 8 /* NOT_SET */;
    }
    matches(symbol, minVocabSymbol, maxVocabSymbol) {
        return symbol >= minVocabSymbol
            && symbol <= maxVocabSymbol
            && !super.matches(symbol, minVocabSymbol, maxVocabSymbol);
    }
    toString() {
        return "~" + super.toString();
    }
};
__decorate([
    Decorators_1.Override
], NotSetTransition.prototype, "serializationType", null);
__decorate([
    Decorators_1.Override
], NotSetTransition.prototype, "matches", null);
__decorate([
    Decorators_1.Override
], NotSetTransition.prototype, "toString", null);
NotSetTransition = __decorate([
    __param(0, Decorators_1.NotNull), __param(1, Decorators_1.Nullable)
], NotSetTransition);
exports.NotSetTransition = NotSetTransition;
//# sourceMappingURL=NotSetTransition.js.map

/***/ }),

/***/ 4235:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.OrderedATNConfigSet = void 0;
const ATNConfigSet_1 = __webpack_require__(256);
const Decorators_1 = __webpack_require__(681);
/**
 *
 * @author Sam Harwell
 */
class OrderedATNConfigSet extends ATNConfigSet_1.ATNConfigSet {
    constructor(set, readonly) {
        if (set != null && readonly != null) {
            super(set, readonly);
        }
        else {
            super();
        }
    }
    clone(readonly) {
        let copy = new OrderedATNConfigSet(this, readonly);
        if (!readonly && this.isReadOnly) {
            copy.addAll(this);
        }
        return copy;
    }
    getKey(e) {
        // This is a specially crafted key to ensure configurations are only merged if they are equal
        return { state: 0, alt: e.hashCode() };
    }
    canMerge(left, leftKey, right) {
        return left.equals(right);
    }
}
__decorate([
    Decorators_1.Override
], OrderedATNConfigSet.prototype, "clone", null);
__decorate([
    Decorators_1.Override
], OrderedATNConfigSet.prototype, "getKey", null);
__decorate([
    Decorators_1.Override
], OrderedATNConfigSet.prototype, "canMerge", null);
exports.OrderedATNConfigSet = OrderedATNConfigSet;
//# sourceMappingURL=OrderedATNConfigSet.js.map

/***/ }),

/***/ 8180:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ParseInfo = void 0;
const Decorators_1 = __webpack_require__(681);
/**
 * This class provides access to specific and aggregate statistics gathered
 * during profiling of a parser.
 *
 * @since 4.3
 */
let ParseInfo = class ParseInfo {
    constructor(atnSimulator) {
        this.atnSimulator = atnSimulator;
    }
    /**
     * Gets an array of {@link DecisionInfo} instances containing the profiling
     * information gathered for each decision in the ATN.
     *
     * @returns An array of {@link DecisionInfo} instances, indexed by decision
     * number.
     */
    getDecisionInfo() {
        return this.atnSimulator.getDecisionInfo();
    }
    /**
     * Gets the decision numbers for decisions that required one or more
     * full-context predictions during parsing. These are decisions for which
     * {@link DecisionInfo#LL_Fallback} is non-zero.
     *
     * @returns A list of decision numbers which required one or more
     * full-context predictions during parsing.
     */
    getLLDecisions() {
        let decisions = this.atnSimulator.getDecisionInfo();
        let LL = [];
        for (let i = 0; i < decisions.length; i++) {
            let fallBack = decisions[i].LL_Fallback;
            if (fallBack > 0) {
                LL.push(i);
            }
        }
        return LL;
    }
    /**
     * Gets the total time spent during prediction across all decisions made
     * during parsing. This value is the sum of
     * {@link DecisionInfo#timeInPrediction} for all decisions.
     */
    getTotalTimeInPrediction() {
        let decisions = this.atnSimulator.getDecisionInfo();
        let t = 0;
        for (let decision of decisions) {
            t += decision.timeInPrediction;
        }
        return t;
    }
    /**
     * Gets the total number of SLL lookahead operations across all decisions
     * made during parsing. This value is the sum of
     * {@link DecisionInfo#SLL_TotalLook} for all decisions.
     */
    getTotalSLLLookaheadOps() {
        let decisions = this.atnSimulator.getDecisionInfo();
        let k = 0;
        for (let decision of decisions) {
            k += decision.SLL_TotalLook;
        }
        return k;
    }
    /**
     * Gets the total number of LL lookahead operations across all decisions
     * made during parsing. This value is the sum of
     * {@link DecisionInfo#LL_TotalLook} for all decisions.
     */
    getTotalLLLookaheadOps() {
        let decisions = this.atnSimulator.getDecisionInfo();
        let k = 0;
        for (let decision of decisions) {
            k += decision.LL_TotalLook;
        }
        return k;
    }
    /**
     * Gets the total number of ATN lookahead operations for SLL prediction
     * across all decisions made during parsing.
     */
    getTotalSLLATNLookaheadOps() {
        let decisions = this.atnSimulator.getDecisionInfo();
        let k = 0;
        for (let decision of decisions) {
            k += decision.SLL_ATNTransitions;
        }
        return k;
    }
    /**
     * Gets the total number of ATN lookahead operations for LL prediction
     * across all decisions made during parsing.
     */
    getTotalLLATNLookaheadOps() {
        let decisions = this.atnSimulator.getDecisionInfo();
        let k = 0;
        for (let decision of decisions) {
            k += decision.LL_ATNTransitions;
        }
        return k;
    }
    /**
     * Gets the total number of ATN lookahead operations for SLL and LL
     * prediction across all decisions made during parsing.
     *
     * This value is the sum of {@link #getTotalSLLATNLookaheadOps} and
     * {@link #getTotalLLATNLookaheadOps}.
     */
    getTotalATNLookaheadOps() {
        let decisions = this.atnSimulator.getDecisionInfo();
        let k = 0;
        for (let decision of decisions) {
            k += decision.SLL_ATNTransitions;
            k += decision.LL_ATNTransitions;
        }
        return k;
    }
    getDFASize(decision) {
        if (decision) {
            let decisionToDFA = this.atnSimulator.atn.decisionToDFA[decision];
            return decisionToDFA.states.size;
        }
        else {
            let n = 0;
            let decisionToDFA = this.atnSimulator.atn.decisionToDFA;
            for (let i = 0; i < decisionToDFA.length; i++) {
                n += this.getDFASize(i);
            }
            return n;
        }
    }
};
__decorate([
    Decorators_1.NotNull
], ParseInfo.prototype, "getDecisionInfo", null);
__decorate([
    Decorators_1.NotNull
], ParseInfo.prototype, "getLLDecisions", null);
ParseInfo = __decorate([
    __param(0, Decorators_1.NotNull)
], ParseInfo);
exports.ParseInfo = ParseInfo;
//# sourceMappingURL=ParseInfo.js.map

/***/ }),

/***/ 4217:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
/* provided dependency */ var console = __webpack_require__(3716);

/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ParserATNSimulator = void 0;
// ConvertTo-TS run at 2016-10-04T11:26:31.1989835-07:00
const AcceptStateInfo_1 = __webpack_require__(1431);
const ActionTransition_1 = __webpack_require__(7766);
const Array2DHashSet_1 = __webpack_require__(5265);
const Arrays_1 = __webpack_require__(7464);
const ATN_1 = __webpack_require__(8148);
const ATNConfig_1 = __webpack_require__(735);
const ATNConfigSet_1 = __webpack_require__(256);
const ATNSimulator_1 = __webpack_require__(3296);
const ATNStateType_1 = __webpack_require__(9602);
const AtomTransition_1 = __webpack_require__(981);
const BitSet_1 = __webpack_require__(3300);
const ConflictInfo_1 = __webpack_require__(977);
const DecisionState_1 = __webpack_require__(4993);
const DFAState_1 = __webpack_require__(4981);
const IntegerList_1 = __webpack_require__(8163);
const Interval_1 = __webpack_require__(4378);
const IntStream_1 = __webpack_require__(2628);
const Decorators_1 = __webpack_require__(681);
const NotSetTransition_1 = __webpack_require__(845);
const NoViableAltException_1 = __webpack_require__(1202);
const ObjectEqualityComparator_1 = __webpack_require__(8578);
const ParserRuleContext_1 = __webpack_require__(9248);
const PredictionContext_1 = __webpack_require__(1229);
const PredictionContextCache_1 = __webpack_require__(1435);
const PredictionMode_1 = __webpack_require__(118);
const RuleStopState_1 = __webpack_require__(3776);
const RuleTransition_1 = __webpack_require__(5239);
const SemanticContext_1 = __webpack_require__(8300);
const SetTransition_1 = __webpack_require__(4442);
const SimulatorState_1 = __webpack_require__(6965);
const Token_1 = __webpack_require__(8999);
const VocabularyImpl_1 = __webpack_require__(1434);
const assert = __webpack_require__(1696);
const MAX_SHORT_VALUE = 0xFFFF;
const MIN_INTEGER_VALUE = -((1 << 31) >>> 0);
/**
 * The embodiment of the adaptive LL(*), ALL(*), parsing strategy.
 *
 * The basic complexity of the adaptive strategy makes it harder to understand.
 * We begin with ATN simulation to build paths in a DFA. Subsequent prediction
 * requests go through the DFA first. If they reach a state without an edge for
 * the current symbol, the algorithm fails over to the ATN simulation to
 * complete the DFA path for the current input (until it finds a conflict state
 * or uniquely predicting state).
 *
 * All of that is done without using the outer context because we want to create
 * a DFA that is not dependent upon the rule invocation stack when we do a
 * prediction. One DFA works in all contexts. We avoid using context not
 * necessarily because it's slower, although it can be, but because of the DFA
 * caching problem. The closure routine only considers the rule invocation stack
 * created during prediction beginning in the decision rule. For example, if
 * prediction occurs without invoking another rule's ATN, there are no context
 * stacks in the configurations. When lack of context leads to a conflict, we
 * don't know if it's an ambiguity or a weakness in the strong LL(*) parsing
 * strategy (versus full LL(*)).
 *
 * When SLL yields a configuration set with conflict, we rewind the input and
 * retry the ATN simulation, this time using full outer context without adding
 * to the DFA. Configuration context stacks will be the full invocation stacks
 * from the start rule. If we get a conflict using full context, then we can
 * definitively say we have a true ambiguity for that input sequence. If we
 * don't get a conflict, it implies that the decision is sensitive to the outer
 * context. (It is not context-sensitive in the sense of context-sensitive
 * grammars.)
 *
 * The next time we reach this DFA state with an SLL conflict, through DFA
 * simulation, we will again retry the ATN simulation using full context mode.
 * This is slow because we can't save the results and have to "interpret" the
 * ATN each time we get that input.
 *
 * **CACHING FULL CONTEXT PREDICTIONS**
 *
 * We could cache results from full context to predicted alternative easily and
 * that saves a lot of time but doesn't work in presence of predicates. The set
 * of visible predicates from the ATN start state changes depending on the
 * context, because closure can fall off the end of a rule. I tried to cache
 * tuples (stack context, semantic context, predicted alt) but it was slower
 * than interpreting and much more complicated. Also required a huge amount of
 * memory. The goal is not to create the world's fastest parser anyway. I'd like
 * to keep this algorithm simple. By launching multiple threads, we can improve
 * the speed of parsing across a large number of files.
 *
 * There is no strict ordering between the amount of input used by SLL vs LL,
 * which makes it really hard to build a cache for full context. Let's say that
 * we have input A B C that leads to an SLL conflict with full context X. That
 * implies that using X we might only use A B but we could also use A B C D to
 * resolve conflict. Input A B C D could predict alternative 1 in one position
 * in the input and A B C E could predict alternative 2 in another position in
 * input. The conflicting SLL configurations could still be non-unique in the
 * full context prediction, which would lead us to requiring more input than the
 * original A B C.	To make a	prediction cache work, we have to track	the exact
 * input	used during the previous prediction. That amounts to a cache that maps
 * X to a specific DFA for that context.
 *
 * Something should be done for left-recursive expression predictions. They are
 * likely LL(1) + pred eval. Easier to do the whole SLL unless error and retry
 * with full LL thing Sam does.
 *
 * **AVOIDING FULL CONTEXT PREDICTION**
 *
 * We avoid doing full context retry when the outer context is empty, we did not
 * dip into the outer context by falling off the end of the decision state rule,
 * or when we force SLL mode.
 *
 * As an example of the not dip into outer context case, consider as super
 * constructor calls versus function calls. One grammar might look like
 * this:
 *
 * ```antlr
 * ctorBody
 *   : '{' superCall? stat* '}'
 *   ;
 * ```
 *
 * Or, you might see something like
 *
 * ```antlr
 * stat
 *   : superCall ';'
 *   | expression ';'
 *   | ...
 *   ;
 * ```
 *
 * In both cases I believe that no closure operations will dip into the outer
 * context. In the first case ctorBody in the worst case will stop at the '}'.
 * In the 2nd case it should stop at the ';'. Both cases should stay within the
 * entry rule and not dip into the outer context.
 *
 * **PREDICATES**
 *
 * Predicates are always evaluated if present in either SLL or LL both. SLL and
 * LL simulation deals with predicates differently. SLL collects predicates as
 * it performs closure operations like ANTLR v3 did. It delays predicate
 * evaluation until it reaches and accept state. This allows us to cache the SLL
 * ATN simulation whereas, if we had evaluated predicates on-the-fly during
 * closure, the DFA state configuration sets would be different and we couldn't
 * build up a suitable DFA.
 *
 * When building a DFA accept state during ATN simulation, we evaluate any
 * predicates and return the sole semantically valid alternative. If there is
 * more than 1 alternative, we report an ambiguity. If there are 0 alternatives,
 * we throw an exception. Alternatives without predicates act like they have
 * true predicates. The simple way to think about it is to strip away all
 * alternatives with false predicates and choose the minimum alternative that
 * remains.
 *
 * When we start in the DFA and reach an accept state that's predicated, we test
 * those and return the minimum semantically viable alternative. If no
 * alternatives are viable, we throw an exception.
 *
 * During full LL ATN simulation, closure always evaluates predicates and
 * on-the-fly. This is crucial to reducing the configuration set size during
 * closure. It hits a landmine when parsing with the Java grammar, for example,
 * without this on-the-fly evaluation.
 *
 * **SHARING DFA**
 *
 * All instances of the same parser share the same decision DFAs through a
 * static field. Each instance gets its own ATN simulator but they share the
 * same {@link ATN#decisionToDFA} field. They also share a
 * {@link PredictionContextCache} object that makes sure that all
 * {@link PredictionContext} objects are shared among the DFA states. This makes
 * a big size difference.
 *
 * **THREAD SAFETY**
 *
 * The {@link ParserATNSimulator} locks on the {@link ATN#decisionToDFA} field when
 * it adds a new DFA object to that array. {@link #addDFAEdge}
 * locks on the DFA for the current decision when setting the
 * {@link DFAState#edges} field. {@link #addDFAState} locks on
 * the DFA for the current decision when looking up a DFA state to see if it
 * already exists. We must make sure that all requests to add DFA states that
 * are equivalent result in the same shared DFA object. This is because lots of
 * threads will be trying to update the DFA at once. The
 * {@link #addDFAState} method also locks inside the DFA lock
 * but this time on the shared context cache when it rebuilds the
 * configurations' {@link PredictionContext} objects using cached
 * subgraphs/nodes. No other locking occurs, even during DFA simulation. This is
 * safe as long as we can guarantee that all threads referencing
 * `s.edge[t]` get the same physical target {@link DFAState}, or
 * `undefined`. Once into the DFA, the DFA simulation does not reference the
 * {@link DFA#states} map. It follows the {@link DFAState#edges} field to new
 * targets. The DFA simulator will either find {@link DFAState#edges} to be
 * `undefined`, to be non-`undefined` and `dfa.edges[t]` undefined, or
 * `dfa.edges[t]` to be non-undefined. The
 * {@link #addDFAEdge} method could be racing to set the field
 * but in either case the DFA simulator works; if `undefined`, and requests ATN
 * simulation. It could also race trying to get `dfa.edges[t]`, but either
 * way it will work because it's not doing a test and set operation.
 *
 * **Starting with SLL then failing to combined SLL/LL (Two-Stage
 * Parsing)**
 *
 * Sam pointed out that if SLL does not give a syntax error, then there is no
 * point in doing full LL, which is slower. We only have to try LL if we get a
 * syntax error. For maximum speed, Sam starts the parser set to pure SLL
 * mode with the {@link BailErrorStrategy}:
 *
 * ```
 * parser.interpreter.{@link #setPredictionMode setPredictionMode}`(`{@link PredictionMode#SLL}`)`;
 * parser.{@link Parser#setErrorHandler setErrorHandler}(new {@link BailErrorStrategy}());
 * ```
 *
 * If it does not get a syntax error, then we're done. If it does get a syntax
 * error, we need to retry with the combined SLL/LL strategy.
 *
 * The reason this works is as follows. If there are no SLL conflicts, then the
 * grammar is SLL (at least for that input set). If there is an SLL conflict,
 * the full LL analysis must yield a set of viable alternatives which is a
 * subset of the alternatives reported by SLL. If the LL set is a singleton,
 * then the grammar is LL but not SLL. If the LL set is the same size as the SLL
 * set, the decision is SLL. If the LL set has size &gt; 1, then that decision
 * is truly ambiguous on the current input. If the LL set is smaller, then the
 * SLL conflict resolution might choose an alternative that the full LL would
 * rule out as a possibility based upon better context information. If that's
 * the case, then the SLL parse will definitely get an error because the full LL
 * analysis says it's not viable. If SLL conflict resolution chooses an
 * alternative within the LL set, them both SLL and LL would choose the same
 * alternative because they both choose the minimum of multiple conflicting
 * alternatives.
 *
 * Let's say we have a set of SLL conflicting alternatives `{1, 2, 3}` and
 * a smaller LL set called *s*. If *s* is `{2, 3}`, then SLL
 * parsing will get an error because SLL will pursue alternative 1. If
 * *s* is `{1, 2}` or `{1, 3}` then both SLL and LL will
 * choose the same alternative because alternative one is the minimum of either
 * set. If *s* is `{2}` or `{3}` then SLL will get a syntax
 * error. If *s* is `{1}` then SLL will succeed.
 *
 * Of course, if the input is invalid, then we will get an error for sure in
 * both SLL and LL parsing. Erroneous input will therefore require 2 passes over
 * the input.
 */
let ParserATNSimulator = class ParserATNSimulator extends ATNSimulator_1.ATNSimulator {
    constructor(atn, parser) {
        super(atn);
        this.predictionMode = PredictionMode_1.PredictionMode.LL;
        this.force_global_context = false;
        this.always_try_local_context = true;
        /**
         * Determines whether the DFA is used for full-context predictions. When
         * `true`, the DFA stores transition information for both full-context
         * and SLL parsing; otherwise, the DFA only stores SLL transition
         * information.
         *
         * For some grammars, enabling the full-context DFA can result in a
         * substantial performance improvement. However, this improvement typically
         * comes at the expense of memory used for storing the cached DFA states,
         * configuration sets, and prediction contexts.
         *
         * The default value is `false`.
         */
        this.enable_global_context_dfa = false;
        this.optimize_unique_closure = true;
        this.optimize_ll1 = true;
        this.optimize_tail_calls = true;
        this.tail_call_preserves_sll = true;
        this.treat_sllk1_conflict_as_ambiguity = false;
        /**
         * When `true`, ambiguous alternatives are reported when they are
         * encountered within {@link #execATN}. When `false`, these messages
         * are suppressed. The default is `false`.
         *
         * When messages about ambiguous alternatives are not required, setting this
         * to `false` enables additional internal optimizations which may lose
         * this information.
         */
        this.reportAmbiguities = false;
        /** By default we do full context-sensitive LL(*) parsing not
         *  Strong LL(*) parsing. If we fail with Strong LL(*) we
         *  try full LL(*). That means we rewind and use context information
         *  when closure operations fall off the end of the rule that
         *  holds the decision were evaluating.
         */
        this.userWantsCtxSensitive = true;
        this._parser = parser;
    }
    getPredictionMode() {
        return this.predictionMode;
    }
    setPredictionMode(predictionMode) {
        this.predictionMode = predictionMode;
    }
    reset() {
        // intentionally empty
    }
    adaptivePredict(input, decision, outerContext, useContext) {
        if (useContext === undefined) {
            useContext = false;
        }
        let dfa = this.atn.decisionToDFA[decision];
        assert(dfa != null);
        if (this.optimize_ll1 && !dfa.isPrecedenceDfa && !dfa.isEmpty) {
            let ll_1 = input.LA(1);
            if (ll_1 >= 0 && ll_1 <= 0xFFFF) {
                let key = ((decision << 16) >>> 0) + ll_1;
                let alt = this.atn.LL1Table.get(key);
                if (alt != null) {
                    return alt;
                }
            }
        }
        this.dfa = dfa;
        if (this.force_global_context) {
            useContext = true;
        }
        else if (!this.always_try_local_context) {
            useContext = useContext || dfa.isContextSensitive;
        }
        this.userWantsCtxSensitive = useContext || (this.predictionMode !== PredictionMode_1.PredictionMode.SLL && outerContext != null && !this.atn.decisionToState[decision].sll);
        if (outerContext == null) {
            outerContext = ParserRuleContext_1.ParserRuleContext.emptyContext();
        }
        let state;
        if (!dfa.isEmpty) {
            state = this.getStartState(dfa, input, outerContext, useContext);
        }
        if (state == null) {
            if (outerContext == null) {
                outerContext = ParserRuleContext_1.ParserRuleContext.emptyContext();
            }
            if (ParserATNSimulator.debug) {
                console.log("ATN decision " + dfa.decision +
                    " exec LA(1)==" + this.getLookaheadName(input) +
                    ", outerContext=" + outerContext.toString(this._parser));
            }
            state = this.computeStartState(dfa, outerContext, useContext);
        }
        let m = input.mark();
        let index = input.index;
        try {
            let alt = this.execDFA(dfa, input, index, state);
            if (ParserATNSimulator.debug) {
                console.log("DFA after predictATN: " + dfa.toString(this._parser.vocabulary, this._parser.ruleNames));
            }
            return alt;
        }
        finally {
            this.dfa = undefined;
            input.seek(index);
            input.release(m);
        }
    }
    getStartState(dfa, input, outerContext, useContext) {
        if (!useContext) {
            if (dfa.isPrecedenceDfa) {
                // the start state for a precedence DFA depends on the current
                // parser precedence, and is provided by a DFA method.
                let state = dfa.getPrecedenceStartState(this._parser.precedence, false);
                if (state == null) {
                    return undefined;
                }
                return new SimulatorState_1.SimulatorState(outerContext, state, false, outerContext);
            }
            else {
                if (dfa.s0 == null) {
                    return undefined;
                }
                return new SimulatorState_1.SimulatorState(outerContext, dfa.s0, false, outerContext);
            }
        }
        if (!this.enable_global_context_dfa) {
            return undefined;
        }
        let remainingContext = outerContext;
        assert(outerContext != null);
        let s0;
        if (dfa.isPrecedenceDfa) {
            s0 = dfa.getPrecedenceStartState(this._parser.precedence, true);
        }
        else {
            s0 = dfa.s0full;
        }
        while (remainingContext != null && s0 != null && s0.isContextSensitive) {
            remainingContext = this.skipTailCalls(remainingContext);
            s0 = s0.getContextTarget(this.getReturnState(remainingContext));
            if (remainingContext.isEmpty) {
                assert(s0 == null || !s0.isContextSensitive);
            }
            else {
                remainingContext = remainingContext.parent;
            }
        }
        if (s0 == null) {
            return undefined;
        }
        return new SimulatorState_1.SimulatorState(outerContext, s0, useContext, remainingContext);
    }
    execDFA(dfa, input, startIndex, state) {
        let outerContext = state.outerContext;
        if (ParserATNSimulator.dfa_debug) {
            console.log("DFA decision " + dfa.decision +
                " exec LA(1)==" + this.getLookaheadName(input) +
                ", outerContext=" + outerContext.toString(this._parser));
        }
        if (ParserATNSimulator.dfa_debug) {
            console.log(dfa.toString(this._parser.vocabulary, this._parser.ruleNames));
        }
        let s = state.s0;
        let t = input.LA(1);
        let remainingOuterContext = state.remainingOuterContext;
        while (true) {
            if (ParserATNSimulator.dfa_debug) {
                console.log("DFA state " + s.stateNumber + " LA(1)==" + this.getLookaheadName(input));
            }
            if (state.useContext) {
                while (s.isContextSymbol(t)) {
                    let next;
                    if (remainingOuterContext != null) {
                        remainingOuterContext = this.skipTailCalls(remainingOuterContext);
                        next = s.getContextTarget(this.getReturnState(remainingOuterContext));
                    }
                    if (next == null) {
                        // fail over to ATN
                        let initialState = new SimulatorState_1.SimulatorState(state.outerContext, s, state.useContext, remainingOuterContext);
                        return this.execATN(dfa, input, startIndex, initialState);
                    }
                    assert(remainingOuterContext != null);
                    remainingOuterContext = remainingOuterContext.parent;
                    s = next;
                }
            }
            if (this.isAcceptState(s, state.useContext)) {
                if (s.predicates != null) {
                    if (ParserATNSimulator.dfa_debug) {
                        console.log("accept " + s);
                    }
                }
                else {
                    if (ParserATNSimulator.dfa_debug) {
                        console.log("accept; predict " + s.prediction + " in state " + s.stateNumber);
                    }
                }
                // keep going unless we're at EOF or state only has one alt number
                // mentioned in configs; check if something else could match
                // TODO: don't we always stop? only lexer would keep going
                // TODO: v3 dfa don't do this.
                break;
            }
            // t is not updated if one of these states is reached
            assert(!this.isAcceptState(s, state.useContext));
            // if no edge, pop over to ATN interpreter, update DFA and return
            let target = this.getExistingTargetState(s, t);
            if (target == null) {
                if (ParserATNSimulator.dfa_debug && t >= 0) {
                    console.log("no edge for " + this._parser.vocabulary.getDisplayName(t));
                }
                let alt;
                if (ParserATNSimulator.dfa_debug) {
                    let interval = Interval_1.Interval.of(startIndex, this._parser.inputStream.index);
                    console.log("ATN exec upon " +
                        this._parser.inputStream.getText(interval) +
                        " at DFA state " + s.stateNumber);
                }
                let initialState = new SimulatorState_1.SimulatorState(outerContext, s, state.useContext, remainingOuterContext);
                alt = this.execATN(dfa, input, startIndex, initialState);
                if (ParserATNSimulator.dfa_debug) {
                    console.log("back from DFA update, alt=" + alt + ", dfa=\n" + dfa.toString(this._parser.vocabulary, this._parser.ruleNames));
                    //dump(dfa);
                }
                // action already executed
                if (ParserATNSimulator.dfa_debug) {
                    console.log("DFA decision " + dfa.decision +
                        " predicts " + alt);
                }
                return alt; // we've updated DFA, exec'd action, and have our deepest answer
            }
            else if (target === ATNSimulator_1.ATNSimulator.ERROR) {
                let errorState = new SimulatorState_1.SimulatorState(outerContext, s, state.useContext, remainingOuterContext);
                return this.handleNoViableAlt(input, startIndex, errorState);
            }
            s = target;
            if (!this.isAcceptState(s, state.useContext) && t !== IntStream_1.IntStream.EOF) {
                input.consume();
                t = input.LA(1);
            }
        }
        //		if ( acceptState==null ) {
        //			if ( debug ) System.out.println("!!! no viable alt in dfa");
        //			return -1;
        //		}
        if (!state.useContext && s.configs.conflictInfo != null) {
            if (dfa.atnStartState instanceof DecisionState_1.DecisionState) {
                if (!this.userWantsCtxSensitive ||
                    (!s.configs.dipsIntoOuterContext && s.configs.isExactConflict) ||
                    (this.treat_sllk1_conflict_as_ambiguity && input.index === startIndex)) {
                    // we don't report the ambiguity again
                    //if ( !this.acceptState.configset.hasSemanticContext ) {
                    // 	this.reportAmbiguity(dfa, acceptState, startIndex, input.index, acceptState.configset.conflictingAlts, acceptState.configset);
                    //}
                }
                else {
                    assert(!state.useContext);
                    // Before attempting full context prediction, check to see if there are
                    // disambiguating or validating predicates to evaluate which allow an
                    // immediate decision
                    let conflictingAlts;
                    let predicates = s.predicates;
                    if (predicates != null) {
                        let conflictIndex = input.index;
                        if (conflictIndex !== startIndex) {
                            input.seek(startIndex);
                        }
                        conflictingAlts = this.evalSemanticContext(predicates, outerContext, true);
                        if (conflictingAlts.cardinality() === 1) {
                            return conflictingAlts.nextSetBit(0);
                        }
                        if (conflictIndex !== startIndex) {
                            // restore the index so reporting the fallback to full
                            // context occurs with the index at the correct spot
                            input.seek(conflictIndex);
                        }
                    }
                    if (this.reportAmbiguities) {
                        let conflictState = new SimulatorState_1.SimulatorState(outerContext, s, state.useContext, remainingOuterContext);
                        this.reportAttemptingFullContext(dfa, conflictingAlts, conflictState, startIndex, input.index);
                    }
                    input.seek(startIndex);
                    return this.adaptivePredict(input, dfa.decision, outerContext, true);
                }
            }
        }
        // Before jumping to prediction, check to see if there are
        // disambiguating or validating predicates to evaluate
        let predicates = s.predicates;
        if (predicates != null) {
            let stopIndex = input.index;
            if (startIndex !== stopIndex) {
                input.seek(startIndex);
            }
            let alts = this.evalSemanticContext(predicates, outerContext, this.reportAmbiguities && this.predictionMode === PredictionMode_1.PredictionMode.LL_EXACT_AMBIG_DETECTION);
            switch (alts.cardinality()) {
                case 0:
                    throw this.noViableAlt(input, outerContext, s.configs, startIndex);
                case 1:
                    return alts.nextSetBit(0);
                default:
                    // report ambiguity after predicate evaluation to make sure the correct
                    // set of ambig alts is reported.
                    if (startIndex !== stopIndex) {
                        input.seek(stopIndex);
                    }
                    this.reportAmbiguity(dfa, s, startIndex, stopIndex, s.configs.isExactConflict, alts, s.configs);
                    return alts.nextSetBit(0);
            }
        }
        if (ParserATNSimulator.dfa_debug) {
            console.log("DFA decision " + dfa.decision +
                " predicts " + s.prediction);
        }
        return s.prediction;
    }
    /**
     * Determines if a particular DFA state should be treated as an accept state
     * for the current prediction mode. In addition to the `useContext`
     * parameter, the {@link #getPredictionMode()} method provides the
     * prediction mode controlling the prediction algorithm as a whole.
     *
     * The default implementation simply returns the value of
     * `DFAState.isAcceptState` except for conflict states when
     * `useContext` is `true` and {@link #getPredictionMode()} is
     * {@link PredictionMode#LL_EXACT_AMBIG_DETECTION}. In that case, only
     * conflict states where {@link ATNConfigSet#isExactConflict} is
     * `true` are considered accept states.
     *
     * @param state The DFA state to check.
     * @param useContext `true` if the prediction algorithm is currently
     * considering the full parser context; otherwise, `false` if the
     * algorithm is currently performing a local context prediction.
     *
     * @returns `true` if the specified `state` is an accept state;
     * otherwise, `false`.
     */
    isAcceptState(state, useContext) {
        if (!state.isAcceptState) {
            return false;
        }
        if (state.configs.conflictingAlts == null) {
            // unambiguous
            return true;
        }
        // More picky when we need exact conflicts
        if (useContext && this.predictionMode === PredictionMode_1.PredictionMode.LL_EXACT_AMBIG_DETECTION) {
            return state.configs.isExactConflict;
        }
        return true;
    }
    /** Performs ATN simulation to compute a predicted alternative based
     *  upon the remaining input, but also updates the DFA cache to avoid
     *  having to traverse the ATN again for the same input sequence.
     *
     * There are some key conditions we're looking for after computing a new
     * set of ATN configs (proposed DFA state):
     *
     * * if the set is empty, there is no viable alternative for current symbol
     * * does the state uniquely predict an alternative?
     * * does the state have a conflict that would prevent us from
     *   putting it on the work list?
     * * if in non-greedy decision is there a config at a rule stop state?
     *
     * We also have some key operations to do:
     *
     * * add an edge from previous DFA state to potentially new DFA state, D,
     *   upon current symbol but only if adding to work list, which means in all
     *   cases except no viable alternative (and possibly non-greedy decisions?)
     * * collecting predicates and adding semantic context to DFA accept states
     * * adding rule context to context-sensitive DFA accept states
     * * consuming an input symbol
     * * reporting a conflict
     * * reporting an ambiguity
     * * reporting a context sensitivity
     * * reporting insufficient predicates
     *
     * We should isolate those operations, which are side-effecting, to the
     * main work loop. We can isolate lots of code into other functions, but
     * they should be side effect free. They can return package that
     * indicates whether we should report something, whether we need to add a
     * DFA edge, whether we need to augment accept state with semantic
     * context or rule invocation context. Actually, it seems like we always
     * add predicates if they exist, so that can simply be done in the main
     * loop for any accept state creation or modification request.
     *
     * cover these cases:
     *   dead end
     *   single alt
     *   single alt + preds
     *   conflict
     *   conflict + preds
     *
     * TODO: greedy + those
     */
    execATN(dfa, input, startIndex, initialState) {
        if (ParserATNSimulator.debug) {
            console.log("execATN decision " + dfa.decision + " exec LA(1)==" + this.getLookaheadName(input));
        }
        let outerContext = initialState.outerContext;
        let useContext = initialState.useContext;
        let t = input.LA(1);
        let previous = initialState;
        let contextCache = new PredictionContextCache_1.PredictionContextCache();
        while (true) { // while more work
            let nextState = this.computeReachSet(dfa, previous, t, contextCache);
            if (nextState == null) {
                this.setDFAEdge(previous.s0, input.LA(1), ATNSimulator_1.ATNSimulator.ERROR);
                return this.handleNoViableAlt(input, startIndex, previous);
            }
            let D = nextState.s0;
            // predicted alt => accept state
            assert(D.isAcceptState || D.prediction === ATN_1.ATN.INVALID_ALT_NUMBER);
            // conflicted => accept state
            assert(D.isAcceptState || D.configs.conflictInfo == null);
            if (this.isAcceptState(D, useContext)) {
                let conflictingAlts = D.configs.conflictingAlts;
                let predictedAlt = conflictingAlts == null ? D.prediction : ATN_1.ATN.INVALID_ALT_NUMBER;
                if (predictedAlt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                    if (this.optimize_ll1
                        && input.index === startIndex
                        && !dfa.isPrecedenceDfa
                        && nextState.outerContext === nextState.remainingOuterContext
                        && dfa.decision >= 0
                        && !D.configs.hasSemanticContext) {
                        if (t >= 0 && t <= MAX_SHORT_VALUE) {
                            let key = ((dfa.decision << 16) >>> 0) + t;
                            this.atn.LL1Table.set(key, predictedAlt);
                        }
                    }
                    if (useContext && this.always_try_local_context) {
                        this.reportContextSensitivity(dfa, predictedAlt, nextState, startIndex, input.index);
                    }
                }
                predictedAlt = D.prediction;
                //				int k = input.index - startIndex + 1; // how much input we used
                //				System.out.println("used k="+k);
                let attemptFullContext = conflictingAlts != null && this.userWantsCtxSensitive;
                if (attemptFullContext) {
                    // Only exact conflicts are known to be ambiguous when local
                    // prediction does not step out of the decision rule.
                    attemptFullContext = !useContext
                        && (D.configs.dipsIntoOuterContext || !D.configs.isExactConflict)
                        && (!this.treat_sllk1_conflict_as_ambiguity || input.index !== startIndex);
                }
                if (D.configs.hasSemanticContext) {
                    let predPredictions = D.predicates;
                    if (predPredictions != null) {
                        let conflictIndex = input.index;
                        if (conflictIndex !== startIndex) {
                            input.seek(startIndex);
                        }
                        // use complete evaluation here if we'll want to retry with full context if still ambiguous
                        conflictingAlts = this.evalSemanticContext(predPredictions, outerContext, attemptFullContext || this.reportAmbiguities);
                        switch (conflictingAlts.cardinality()) {
                            case 0:
                                throw this.noViableAlt(input, outerContext, D.configs, startIndex);
                            case 1:
                                return conflictingAlts.nextSetBit(0);
                            default:
                                break;
                        }
                        if (conflictIndex !== startIndex) {
                            // restore the index so reporting the fallback to full
                            // context occurs with the index at the correct spot
                            input.seek(conflictIndex);
                        }
                    }
                }
                if (!attemptFullContext) {
                    if (conflictingAlts != null) {
                        if (this.reportAmbiguities && conflictingAlts.cardinality() > 1) {
                            this.reportAmbiguity(dfa, D, startIndex, input.index, D.configs.isExactConflict, conflictingAlts, D.configs);
                        }
                        predictedAlt = conflictingAlts.nextSetBit(0);
                    }
                    return predictedAlt;
                }
                else {
                    assert(!useContext);
                    assert(this.isAcceptState(D, false));
                    if (ParserATNSimulator.debug) {
                        console.log("RETRY with outerContext=" + outerContext);
                    }
                    let fullContextState = this.computeStartState(dfa, outerContext, true);
                    if (this.reportAmbiguities) {
                        this.reportAttemptingFullContext(dfa, conflictingAlts, nextState, startIndex, input.index);
                    }
                    input.seek(startIndex);
                    return this.execATN(dfa, input, startIndex, fullContextState);
                }
            }
            previous = nextState;
            if (t !== IntStream_1.IntStream.EOF) {
                input.consume();
                t = input.LA(1);
            }
        }
    }
    /**
     * This method is used to improve the localization of error messages by
     * choosing an alternative rather than throwing a
     * {@link NoViableAltException} in particular prediction scenarios where the
     * {@link #ERROR} state was reached during ATN simulation.
     *
     * The default implementation of this method uses the following
     * algorithm to identify an ATN configuration which successfully parsed the
     * decision entry rule. Choosing such an alternative ensures that the
     * {@link ParserRuleContext} returned by the calling rule will be complete
     * and valid, and the syntax error will be reported later at a more
     * localized location.
     *
     * * If no configuration in `configs` reached the end of the
     *   decision rule, return {@link ATN#INVALID_ALT_NUMBER}.
     * * If all configurations in `configs` which reached the end of the
     *   decision rule predict the same alternative, return that alternative.
     * * If the configurations in `configs` which reached the end of the
     *   decision rule predict multiple alternatives (call this *S*),
     *   choose an alternative in the following order.
     *
     *     1. Filter the configurations in `configs` to only those
     *        configurations which remain viable after evaluating semantic predicates.
     *        If the set of these filtered configurations which also reached the end of
     *        the decision rule is not empty, return the minimum alternative
     *        represented in this set.
     *     1. Otherwise, choose the minimum alternative in *S*.
     *
     * In some scenarios, the algorithm described above could predict an
     * alternative which will result in a {@link FailedPredicateException} in
     * parser. Specifically, this could occur if the *only* configuration
     * capable of successfully parsing to the end of the decision rule is
     * blocked by a semantic predicate. By choosing this alternative within
     * {@link #adaptivePredict} instead of throwing a
     * {@link NoViableAltException}, the resulting
     * {@link FailedPredicateException} in the parser will identify the specific
     * predicate which is preventing the parser from successfully parsing the
     * decision rule, which helps developers identify and correct logic errors
     * in semantic predicates.
     *
     * @param input The input {@link TokenStream}
     * @param startIndex The start index for the current prediction, which is
     * the input index where any semantic context in `configs` should be
     * evaluated
     * @param previous The ATN simulation state immediately before the
     * {@link #ERROR} state was reached
     *
     * @returns The value to return from {@link #adaptivePredict}, or
     * {@link ATN#INVALID_ALT_NUMBER} if a suitable alternative was not
     * identified and {@link #adaptivePredict} should report an error instead.
     */
    handleNoViableAlt(input, startIndex, previous) {
        if (previous.s0 != null) {
            let alts = new BitSet_1.BitSet();
            let maxAlt = 0;
            for (let config of previous.s0.configs) {
                if (config.reachesIntoOuterContext || config.state instanceof RuleStopState_1.RuleStopState) {
                    alts.set(config.alt);
                    maxAlt = Math.max(maxAlt, config.alt);
                }
            }
            switch (alts.cardinality()) {
                case 0:
                    break;
                case 1:
                    return alts.nextSetBit(0);
                default:
                    if (!previous.s0.configs.hasSemanticContext) {
                        // configs doesn't contain any predicates, so the predicate
                        // filtering code below would be pointless
                        return alts.nextSetBit(0);
                    }
                    /*
                     * Try to find a configuration set that not only dipped into the outer
                     * context, but also isn't eliminated by a predicate.
                     */
                    let filteredConfigs = new ATNConfigSet_1.ATNConfigSet();
                    for (let config of previous.s0.configs) {
                        if (config.reachesIntoOuterContext || config.state instanceof RuleStopState_1.RuleStopState) {
                            filteredConfigs.add(config);
                        }
                    }
                    /* The following code blocks are adapted from predicateDFAState with
                     * the following key changes.
                     *
                     *  1. The code operates on an ATNConfigSet rather than a DFAState.
                     *  2. Predicates are collected for all alternatives represented in
                     *     filteredConfigs, rather than restricting the evaluation to
                     *     conflicting and/or unique configurations.
                     */
                    let altToPred = this.getPredsForAmbigAlts(alts, filteredConfigs, maxAlt);
                    if (altToPred != null) {
                        let predicates = this.getPredicatePredictions(alts, altToPred);
                        if (predicates != null) {
                            let stopIndex = input.index;
                            try {
                                input.seek(startIndex);
                                let filteredAlts = this.evalSemanticContext(predicates, previous.outerContext, false);
                                if (!filteredAlts.isEmpty) {
                                    return filteredAlts.nextSetBit(0);
                                }
                            }
                            finally {
                                input.seek(stopIndex);
                            }
                        }
                    }
                    return alts.nextSetBit(0);
            }
        }
        throw this.noViableAlt(input, previous.outerContext, previous.s0.configs, startIndex);
    }
    computeReachSet(dfa, previous, t, contextCache) {
        let useContext = previous.useContext;
        let remainingGlobalContext = previous.remainingOuterContext;
        let s = previous.s0;
        if (useContext) {
            while (s.isContextSymbol(t)) {
                let next;
                if (remainingGlobalContext != null) {
                    remainingGlobalContext = this.skipTailCalls(remainingGlobalContext);
                    next = s.getContextTarget(this.getReturnState(remainingGlobalContext));
                }
                if (next == null) {
                    break;
                }
                assert(remainingGlobalContext != null);
                remainingGlobalContext = remainingGlobalContext.parent;
                s = next;
            }
        }
        assert(!this.isAcceptState(s, useContext));
        if (this.isAcceptState(s, useContext)) {
            return new SimulatorState_1.SimulatorState(previous.outerContext, s, useContext, remainingGlobalContext);
        }
        let s0 = s;
        let target = this.getExistingTargetState(s0, t);
        if (target == null) {
            let result = this.computeTargetState(dfa, s0, remainingGlobalContext, t, useContext, contextCache);
            target = result[0];
            remainingGlobalContext = result[1];
        }
        if (target === ATNSimulator_1.ATNSimulator.ERROR) {
            return undefined;
        }
        assert(!useContext || !target.configs.dipsIntoOuterContext);
        return new SimulatorState_1.SimulatorState(previous.outerContext, target, useContext, remainingGlobalContext);
    }
    /**
     * Get an existing target state for an edge in the DFA. If the target state
     * for the edge has not yet been computed or is otherwise not available,
     * this method returns `undefined`.
     *
     * @param s The current DFA state
     * @param t The next input symbol
     * @returns The existing target DFA state for the given input symbol
     * `t`, or `undefined` if the target state for this edge is not
     * already cached
     */
    getExistingTargetState(s, t) {
        return s.getTarget(t);
    }
    /**
     * Compute a target state for an edge in the DFA, and attempt to add the
     * computed state and corresponding edge to the DFA.
     *
     * @param dfa
     * @param s The current DFA state
     * @param remainingGlobalContext
     * @param t The next input symbol
     * @param useContext
     * @param contextCache
     *
     * @returns The computed target DFA state for the given input symbol
     * `t`. If `t` does not lead to a valid DFA state, this method
     * returns {@link #ERROR}.
     */
    computeTargetState(dfa, s, remainingGlobalContext, t, useContext, contextCache) {
        let closureConfigs = s.configs.toArray();
        let contextElements;
        let reach = new ATNConfigSet_1.ATNConfigSet();
        let stepIntoGlobal;
        do {
            let hasMoreContext = !useContext || remainingGlobalContext != null;
            if (!hasMoreContext) {
                reach.isOutermostConfigSet = true;
            }
            let reachIntermediate = new ATNConfigSet_1.ATNConfigSet();
            /* Configurations already in a rule stop state indicate reaching the end
             * of the decision rule (local context) or end of the start rule (full
             * context). Once reached, these configurations are never updated by a
             * closure operation, so they are handled separately for the performance
             * advantage of having a smaller intermediate set when calling closure.
             *
             * For full-context reach operations, separate handling is required to
             * ensure that the alternative matching the longest overall sequence is
             * chosen when multiple such configurations can match the input.
             */
            let skippedStopStates;
            for (let c of closureConfigs) {
                if (ParserATNSimulator.debug) {
                    console.log("testing " + this.getTokenName(t) + " at " + c.toString());
                }
                if (c.state instanceof RuleStopState_1.RuleStopState) {
                    assert(c.context.isEmpty);
                    if (useContext && !c.reachesIntoOuterContext || t === IntStream_1.IntStream.EOF) {
                        if (skippedStopStates == null) {
                            skippedStopStates = [];
                        }
                        skippedStopStates.push(c);
                    }
                    continue;
                }
                let n = c.state.numberOfOptimizedTransitions;
                for (let ti = 0; ti < n; ti++) { // for each optimized transition
                    let trans = c.state.getOptimizedTransition(ti);
                    let target = this.getReachableTarget(c, trans, t);
                    if (target != null) {
                        reachIntermediate.add(c.transform(target, false), contextCache);
                    }
                }
            }
            /* This block optimizes the reach operation for intermediate sets which
             * trivially indicate a termination state for the overall
             * adaptivePredict operation.
             *
             * The conditions assume that intermediate
             * contains all configurations relevant to the reach set, but this
             * condition is not true when one or more configurations have been
             * withheld in skippedStopStates, or when the current symbol is EOF.
             */
            if (this.optimize_unique_closure && skippedStopStates == null && t !== Token_1.Token.EOF && reachIntermediate.uniqueAlt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                reachIntermediate.isOutermostConfigSet = reach.isOutermostConfigSet;
                reach = reachIntermediate;
                break;
            }
            /* If the reach set could not be trivially determined, perform a closure
             * operation on the intermediate set to compute its initial value.
             */
            let collectPredicates = false;
            let treatEofAsEpsilon = t === Token_1.Token.EOF;
            this.closure(reachIntermediate, reach, collectPredicates, hasMoreContext, contextCache, treatEofAsEpsilon);
            stepIntoGlobal = reach.dipsIntoOuterContext;
            if (t === IntStream_1.IntStream.EOF) {
                /* After consuming EOF no additional input is possible, so we are
                 * only interested in configurations which reached the end of the
                 * decision rule (local context) or end of the start rule (full
                 * context). Update reach to contain only these configurations. This
                 * handles both explicit EOF transitions in the grammar and implicit
                 * EOF transitions following the end of the decision or start rule.
                 *
                 * This is handled before the configurations in skippedStopStates,
                 * because any configurations potentially added from that list are
                 * already guaranteed to meet this condition whether or not it's
                 * required.
                 */
                reach = this.removeAllConfigsNotInRuleStopState(reach, contextCache);
            }
            /* If skippedStopStates is not undefined, then it contains at least one
             * configuration. For full-context reach operations, these
             * configurations reached the end of the start rule, in which case we
             * only add them back to reach if no configuration during the current
             * closure operation reached such a state. This ensures adaptivePredict
             * chooses an alternative matching the longest overall sequence when
             * multiple alternatives are viable.
             */
            if (skippedStopStates != null && (!useContext || !PredictionMode_1.PredictionMode.hasConfigInRuleStopState(reach))) {
                assert(skippedStopStates.length > 0);
                for (let c of skippedStopStates) {
                    reach.add(c, contextCache);
                }
            }
            if (useContext && stepIntoGlobal) {
                reach.clear();
                // We know remainingGlobalContext is not undefined at this point (why?)
                remainingGlobalContext = remainingGlobalContext;
                remainingGlobalContext = this.skipTailCalls(remainingGlobalContext);
                let nextContextElement = this.getReturnState(remainingGlobalContext);
                if (contextElements == null) {
                    contextElements = new IntegerList_1.IntegerList();
                }
                if (remainingGlobalContext.isEmpty) {
                    remainingGlobalContext = undefined;
                }
                else {
                    remainingGlobalContext = remainingGlobalContext.parent;
                }
                contextElements.add(nextContextElement);
                if (nextContextElement !== PredictionContext_1.PredictionContext.EMPTY_FULL_STATE_KEY) {
                    for (let i = 0; i < closureConfigs.length; i++) {
                        closureConfigs[i] = closureConfigs[i].appendContext(nextContextElement, contextCache);
                    }
                }
            }
        } while (useContext && stepIntoGlobal);
        if (reach.isEmpty) {
            this.setDFAEdge(s, t, ATNSimulator_1.ATNSimulator.ERROR);
            return [ATNSimulator_1.ATNSimulator.ERROR, remainingGlobalContext];
        }
        let result = this.addDFAEdge(dfa, s, t, contextElements, reach, contextCache);
        return [result, remainingGlobalContext];
    }
    /**
     * Return a configuration set containing only the configurations from
     * `configs` which are in a {@link RuleStopState}. If all
     * configurations in `configs` are already in a rule stop state, this
     * method simply returns `configs`.
     *
     * @param configs the configuration set to update
     * @param contextCache the {@link PredictionContext} cache
     *
     * @returns `configs` if all configurations in `configs` are in a
     * rule stop state, otherwise return a new configuration set containing only
     * the configurations from `configs` which are in a rule stop state
     */
    removeAllConfigsNotInRuleStopState(configs, contextCache) {
        if (PredictionMode_1.PredictionMode.allConfigsInRuleStopStates(configs)) {
            return configs;
        }
        let result = new ATNConfigSet_1.ATNConfigSet();
        for (let config of configs) {
            if (!(config.state instanceof RuleStopState_1.RuleStopState)) {
                continue;
            }
            result.add(config, contextCache);
        }
        return result;
    }
    computeStartState(dfa, globalContext, useContext) {
        let s0 = dfa.isPrecedenceDfa ? dfa.getPrecedenceStartState(this._parser.precedence, useContext) :
            useContext ? dfa.s0full :
                dfa.s0;
        if (s0 != null) {
            if (!useContext) {
                return new SimulatorState_1.SimulatorState(globalContext, s0, useContext, globalContext);
            }
            s0.setContextSensitive(this.atn);
        }
        let decision = dfa.decision;
        // @NotNull
        let p = dfa.atnStartState;
        let previousContext = 0;
        let remainingGlobalContext = globalContext;
        let initialContext = useContext ? PredictionContext_1.PredictionContext.EMPTY_FULL : PredictionContext_1.PredictionContext.EMPTY_LOCAL; // always at least the implicit call to start rule
        let contextCache = new PredictionContextCache_1.PredictionContextCache();
        if (useContext) {
            if (!this.enable_global_context_dfa) {
                while (remainingGlobalContext != null) {
                    if (remainingGlobalContext.isEmpty) {
                        previousContext = PredictionContext_1.PredictionContext.EMPTY_FULL_STATE_KEY;
                        remainingGlobalContext = undefined;
                    }
                    else {
                        previousContext = this.getReturnState(remainingGlobalContext);
                        initialContext = initialContext.appendSingleContext(previousContext, contextCache);
                        remainingGlobalContext = remainingGlobalContext.parent;
                    }
                }
            }
            while (s0 != null && s0.isContextSensitive && remainingGlobalContext != null) {
                let next;
                remainingGlobalContext = this.skipTailCalls(remainingGlobalContext);
                if (remainingGlobalContext.isEmpty) {
                    next = s0.getContextTarget(PredictionContext_1.PredictionContext.EMPTY_FULL_STATE_KEY);
                    previousContext = PredictionContext_1.PredictionContext.EMPTY_FULL_STATE_KEY;
                    remainingGlobalContext = undefined;
                }
                else {
                    previousContext = this.getReturnState(remainingGlobalContext);
                    next = s0.getContextTarget(previousContext);
                    initialContext = initialContext.appendSingleContext(previousContext, contextCache);
                    remainingGlobalContext = remainingGlobalContext.parent;
                }
                if (next == null) {
                    break;
                }
                s0 = next;
            }
        }
        if (s0 != null && !s0.isContextSensitive) {
            return new SimulatorState_1.SimulatorState(globalContext, s0, useContext, remainingGlobalContext);
        }
        let configs = new ATNConfigSet_1.ATNConfigSet();
        while (true) {
            let reachIntermediate = new ATNConfigSet_1.ATNConfigSet();
            let n = p.numberOfTransitions;
            for (let ti = 0; ti < n; ti++) {
                // for each transition
                let target = p.transition(ti).target;
                reachIntermediate.add(ATNConfig_1.ATNConfig.create(target, ti + 1, initialContext));
            }
            let hasMoreContext = remainingGlobalContext != null;
            if (!hasMoreContext) {
                configs.isOutermostConfigSet = true;
            }
            let collectPredicates = true;
            this.closure(reachIntermediate, configs, collectPredicates, hasMoreContext, contextCache, false);
            let stepIntoGlobal = configs.dipsIntoOuterContext;
            let next;
            if (useContext && !this.enable_global_context_dfa) {
                s0 = this.addDFAState(dfa, configs, contextCache);
                break;
            }
            else if (s0 == null) {
                if (!dfa.isPrecedenceDfa) {
                    next = this.addDFAState(dfa, configs, contextCache);
                    if (useContext) {
                        if (!dfa.s0full) {
                            dfa.s0full = next;
                        }
                        else {
                            next = dfa.s0full;
                        }
                    }
                    else {
                        if (!dfa.s0) {
                            dfa.s0 = next;
                        }
                        else {
                            next = dfa.s0;
                        }
                    }
                }
                else {
                    /* If this is a precedence DFA, we use applyPrecedenceFilter
                     * to convert the computed start state to a precedence start
                     * state. We then use DFA.setPrecedenceStartState to set the
                     * appropriate start state for the precedence level rather
                     * than simply setting DFA.s0.
                     */
                    configs = this.applyPrecedenceFilter(configs, globalContext, contextCache);
                    next = this.addDFAState(dfa, configs, contextCache);
                    dfa.setPrecedenceStartState(this._parser.precedence, useContext, next);
                }
            }
            else {
                if (dfa.isPrecedenceDfa) {
                    configs = this.applyPrecedenceFilter(configs, globalContext, contextCache);
                }
                next = this.addDFAState(dfa, configs, contextCache);
                s0.setContextTarget(previousContext, next);
            }
            s0 = next;
            if (!useContext || !stepIntoGlobal) {
                break;
            }
            // TODO: make sure it distinguishes empty stack states
            next.setContextSensitive(this.atn);
            // We know remainingGlobalContext is not undefined at this point (why?)
            remainingGlobalContext = remainingGlobalContext;
            configs.clear();
            remainingGlobalContext = this.skipTailCalls(remainingGlobalContext);
            let nextContextElement = this.getReturnState(remainingGlobalContext);
            if (remainingGlobalContext.isEmpty) {
                remainingGlobalContext = undefined;
            }
            else {
                remainingGlobalContext = remainingGlobalContext.parent;
            }
            if (nextContextElement !== PredictionContext_1.PredictionContext.EMPTY_FULL_STATE_KEY) {
                initialContext = initialContext.appendSingleContext(nextContextElement, contextCache);
            }
            previousContext = nextContextElement;
        }
        return new SimulatorState_1.SimulatorState(globalContext, s0, useContext, remainingGlobalContext);
    }
    /**
     * This method transforms the start state computed by
     * {@link #computeStartState} to the special start state used by a
     * precedence DFA for a particular precedence value. The transformation
     * process applies the following changes to the start state's configuration
     * set.
     *
     * 1. Evaluate the precedence predicates for each configuration using
     *    {@link SemanticContext#evalPrecedence}.
     * 1. When {@link ATNConfig#isPrecedenceFilterSuppressed} is `false`,
     *    remove all configurations which predict an alternative greater than 1,
     *    for which another configuration that predicts alternative 1 is in the
     *    same ATN state with the same prediction context. This transformation is
     *    valid for the following reasons:
     *
     *     * The closure block cannot contain any epsilon transitions which bypass
     *       the body of the closure, so all states reachable via alternative 1 are
     *       part of the precedence alternatives of the transformed left-recursive
     *       rule.
     *     * The "primary" portion of a left recursive rule cannot contain an
     *       epsilon transition, so the only way an alternative other than 1 can exist
     *       in a state that is also reachable via alternative 1 is by nesting calls
     *       to the left-recursive rule, with the outer calls not being at the
     *       preferred precedence level. The
     *       {@link ATNConfig#isPrecedenceFilterSuppressed} property marks ATN
     *       configurations which do not meet this condition, and therefore are not
     *       eligible for elimination during the filtering process.
     *
     * The prediction context must be considered by this filter to address
     * situations like the following.
     *
     * ```antlr
     * grammar TA;
     * prog: statement* EOF;
     * statement: letterA | statement letterA 'b' ;
     * letterA: 'a';
     * ```
     *
     * If the above grammar, the ATN state immediately before the token
     * reference `'a'` in `letterA` is reachable from the left edge
     * of both the primary and closure blocks of the left-recursive rule
     * `statement`. The prediction context associated with each of these
     * configurations distinguishes between them, and prevents the alternative
     * which stepped out to `prog` (and then back in to `statement`
     * from being eliminated by the filter.
     *
     * @param configs The configuration set computed by
     * {@link #computeStartState} as the start state for the DFA.
     * @returns The transformed configuration set representing the start state
     * for a precedence DFA at a particular precedence level (determined by
     * calling {@link Parser#getPrecedence}).
     */
    applyPrecedenceFilter(configs, globalContext, contextCache) {
        let statesFromAlt1 = new Map();
        let configSet = new ATNConfigSet_1.ATNConfigSet();
        for (let config of configs) {
            // handle alt 1 first
            if (config.alt !== 1) {
                continue;
            }
            let updatedContext = config.semanticContext.evalPrecedence(this._parser, globalContext);
            if (updatedContext == null) {
                // the configuration was eliminated
                continue;
            }
            statesFromAlt1.set(config.state.stateNumber, config.context);
            if (updatedContext !== config.semanticContext) {
                configSet.add(config.transform(config.state, false, updatedContext), contextCache);
            }
            else {
                configSet.add(config, contextCache);
            }
        }
        for (let config of configs) {
            if (config.alt === 1) {
                // already handled
                continue;
            }
            if (!config.isPrecedenceFilterSuppressed) {
                /* In the future, this elimination step could be updated to also
                 * filter the prediction context for alternatives predicting alt>1
                 * (basically a graph subtraction algorithm).
                 */
                let context = statesFromAlt1.get(config.state.stateNumber);
                if (context != null && context.equals(config.context)) {
                    // eliminated
                    continue;
                }
            }
            configSet.add(config, contextCache);
        }
        return configSet;
    }
    getReachableTarget(source, trans, ttype) {
        if (trans.matches(ttype, 0, this.atn.maxTokenType)) {
            return trans.target;
        }
        return undefined;
    }
    /** collect and set D's semantic context */
    predicateDFAState(D, configs, nalts) {
        let conflictingAlts = this.getConflictingAltsFromConfigSet(configs);
        if (!conflictingAlts) {
            throw new Error("This unhandled scenario is intended to be unreachable, but I'm currently not sure of why we know that's the case.");
        }
        if (ParserATNSimulator.debug) {
            console.log("predicateDFAState " + D);
        }
        let altToPred = this.getPredsForAmbigAlts(conflictingAlts, configs, nalts);
        // altToPred[uniqueAlt] is now our validating predicate (if any)
        let predPredictions;
        if (altToPred != null) {
            // we have a validating predicate; test it
            // Update DFA so reach becomes accept state with predicate
            predPredictions = this.getPredicatePredictions(conflictingAlts, altToPred);
            D.predicates = predPredictions;
        }
        return predPredictions;
    }
    getPredsForAmbigAlts(ambigAlts, configs, nalts) {
        // REACH=[1|1|[]|0:0, 1|2|[]|0:1]
        /* altToPred starts as an array of all undefined contexts. The entry at index i
         * corresponds to alternative i. altToPred[i] may have one of three values:
         *   1. undefined: no ATNConfig c is found such that c.alt===i
         *   2. SemanticContext.NONE: At least one ATNConfig c exists such that
         *      c.alt===i and c.semanticContext===SemanticContext.NONE. In other words,
         *      alt i has at least one unpredicated config.
         *   3. Non-NONE Semantic Context: There exists at least one, and for all
         *      ATNConfig c such that c.alt===i, c.semanticContext!==SemanticContext.NONE.
         *
         * From this, it is clear that NONE||anything==NONE.
         */
        let altToPred = new Array(nalts + 1);
        let n = altToPred.length;
        for (let c of configs) {
            if (ambigAlts.get(c.alt)) {
                altToPred[c.alt] = SemanticContext_1.SemanticContext.or(altToPred[c.alt], c.semanticContext);
            }
        }
        let nPredAlts = 0;
        for (let i = 0; i < n; i++) {
            if (altToPred[i] == null) {
                altToPred[i] = SemanticContext_1.SemanticContext.NONE;
            }
            else if (altToPred[i] !== SemanticContext_1.SemanticContext.NONE) {
                nPredAlts++;
            }
        }
        // At this point we know `altToPred` doesn't contain any undefined entries
        let result = altToPred;
        // nonambig alts are undefined in result
        if (nPredAlts === 0) {
            result = undefined;
        }
        if (ParserATNSimulator.debug) {
            console.log("getPredsForAmbigAlts result " + (result ? Arrays_1.Arrays.toString(result) : "undefined"));
        }
        return result;
    }
    getPredicatePredictions(ambigAlts, altToPred) {
        let pairs = [];
        let containsPredicate = false;
        for (let i = 1; i < altToPred.length; i++) {
            let pred = altToPred[i];
            // unpredicated is indicated by SemanticContext.NONE
            assert(pred != null);
            // find first unpredicated but ambig alternative, if any.
            // Only ambiguous alternatives will have SemanticContext.NONE.
            // Any unambig alts or ambig naked alts after first ambig naked are ignored
            // (undefined, i) means alt i is the default prediction
            // if no (undefined, i), then no default prediction.
            if (ambigAlts != null && ambigAlts.get(i) && pred === SemanticContext_1.SemanticContext.NONE) {
                pairs.push(new DFAState_1.DFAState.PredPrediction(pred, i));
            }
            else if (pred !== SemanticContext_1.SemanticContext.NONE) {
                containsPredicate = true;
                pairs.push(new DFAState_1.DFAState.PredPrediction(pred, i));
            }
        }
        if (!containsPredicate) {
            return undefined;
        }
        //		System.out.println(Arrays.toString(altToPred)+"->"+pairs);
        return pairs;
    }
    /** Look through a list of predicate/alt pairs, returning alts for the
     *  pairs that win. An `undefined` predicate indicates an alt containing an
     *  unpredicated config which behaves as "always true."
     */
    evalSemanticContext(predPredictions, outerContext, complete) {
        let predictions = new BitSet_1.BitSet();
        for (let pair of predPredictions) {
            if (pair.pred === SemanticContext_1.SemanticContext.NONE) {
                predictions.set(pair.alt);
                if (!complete) {
                    break;
                }
                continue;
            }
            let evaluatedResult = this.evalSemanticContextImpl(pair.pred, outerContext, pair.alt);
            if (ParserATNSimulator.debug || ParserATNSimulator.dfa_debug) {
                console.log("eval pred " + pair + "=" + evaluatedResult);
            }
            if (evaluatedResult) {
                if (ParserATNSimulator.debug || ParserATNSimulator.dfa_debug) {
                    console.log("PREDICT " + pair.alt);
                }
                predictions.set(pair.alt);
                if (!complete) {
                    break;
                }
            }
        }
        return predictions;
    }
    /**
     * Evaluate a semantic context within a specific parser context.
     *
     * This method might not be called for every semantic context evaluated
     * during the prediction process. In particular, we currently do not
     * evaluate the following but it may change in the future:
     *
     * * Precedence predicates (represented by
     *   {@link SemanticContext.PrecedencePredicate}) are not currently evaluated
     *   through this method.
     * * Operator predicates (represented by {@link SemanticContext.AND} and
     *   {@link SemanticContext.OR}) are evaluated as a single semantic
     *   context, rather than evaluating the operands individually.
     *   Implementations which require evaluation results from individual
     *   predicates should override this method to explicitly handle evaluation of
     *   the operands within operator predicates.
     *
     * @param pred The semantic context to evaluate
     * @param parserCallStack The parser context in which to evaluate the
     * semantic context
     * @param alt The alternative which is guarded by `pred`
     *
     * @since 4.3
     */
    evalSemanticContextImpl(pred, parserCallStack, alt) {
        return pred.eval(this._parser, parserCallStack);
    }
    /* TODO: If we are doing predicates, there is no point in pursuing
         closure operations if we reach a DFA state that uniquely predicts
         alternative. We will not be caching that DFA state and it is a
         waste to pursue the closure. Might have to advance when we do
         ambig detection thought :(
          */
    closure(sourceConfigs, configs, collectPredicates, hasMoreContext, contextCache, treatEofAsEpsilon) {
        if (contextCache == null) {
            contextCache = PredictionContextCache_1.PredictionContextCache.UNCACHED;
        }
        let currentConfigs = sourceConfigs;
        let closureBusy = new Array2DHashSet_1.Array2DHashSet(ObjectEqualityComparator_1.ObjectEqualityComparator.INSTANCE);
        while (currentConfigs.size > 0) {
            let intermediate = new ATNConfigSet_1.ATNConfigSet();
            for (let config of currentConfigs) {
                this.closureImpl(config, configs, intermediate, closureBusy, collectPredicates, hasMoreContext, contextCache, 0, treatEofAsEpsilon);
            }
            currentConfigs = intermediate;
        }
    }
    closureImpl(config, configs, intermediate, closureBusy, collectPredicates, hasMoreContexts, contextCache, depth, treatEofAsEpsilon) {
        if (ParserATNSimulator.debug) {
            console.log("closure(" + config.toString(this._parser, true) + ")");
        }
        if (config.state instanceof RuleStopState_1.RuleStopState) {
            // We hit rule end. If we have context info, use it
            if (!config.context.isEmpty) {
                let hasEmpty = config.context.hasEmpty;
                let nonEmptySize = config.context.size - (hasEmpty ? 1 : 0);
                for (let i = 0; i < nonEmptySize; i++) {
                    let newContext = config.context.getParent(i); // "pop" return state
                    let returnState = this.atn.states[config.context.getReturnState(i)];
                    let c = ATNConfig_1.ATNConfig.create(returnState, config.alt, newContext, config.semanticContext);
                    // While we have context to pop back from, we may have
                    // gotten that context AFTER having fallen off a rule.
                    // Make sure we track that we are now out of context.
                    c.outerContextDepth = config.outerContextDepth;
                    c.isPrecedenceFilterSuppressed = config.isPrecedenceFilterSuppressed;
                    assert(depth > MIN_INTEGER_VALUE);
                    this.closureImpl(c, configs, intermediate, closureBusy, collectPredicates, hasMoreContexts, contextCache, depth - 1, treatEofAsEpsilon);
                }
                if (!hasEmpty || !hasMoreContexts) {
                    return;
                }
                config = config.transform(config.state, false, PredictionContext_1.PredictionContext.EMPTY_LOCAL);
            }
            else if (!hasMoreContexts) {
                configs.add(config, contextCache);
                return;
            }
            else {
                // else if we have no context info, just chase follow links (if greedy)
                if (ParserATNSimulator.debug) {
                    console.log("FALLING off rule " +
                        this.getRuleName(config.state.ruleIndex));
                }
                if (config.context === PredictionContext_1.PredictionContext.EMPTY_FULL) {
                    // no need to keep full context overhead when we step out
                    config = config.transform(config.state, false, PredictionContext_1.PredictionContext.EMPTY_LOCAL);
                }
                else if (!config.reachesIntoOuterContext && PredictionContext_1.PredictionContext.isEmptyLocal(config.context)) {
                    // add stop state when leaving decision rule for the first time
                    configs.add(config, contextCache);
                }
            }
        }
        let p = config.state;
        // optimization
        if (!p.onlyHasEpsilonTransitions) {
            configs.add(config, contextCache);
            // make sure to not return here, because EOF transitions can act as
            // both epsilon transitions and non-epsilon transitions.
            if (ParserATNSimulator.debug) {
                console.log("added config " + configs);
            }
        }
        for (let i = 0; i < p.numberOfOptimizedTransitions; i++) {
            // This block implements first-edge elimination of ambiguous LR
            // alternatives as part of dynamic disambiguation during prediction.
            // See antlr/antlr4#1398.
            if (i === 0
                && p.stateType === ATNStateType_1.ATNStateType.STAR_LOOP_ENTRY
                && p.precedenceRuleDecision
                && !config.context.hasEmpty) {
                let precedenceDecision = p;
                // When suppress is true, it means the outgoing edge i==0 is
                // ambiguous with the outgoing edge i==1, and thus the closure
                // operation can dynamically disambiguate by suppressing this
                // edge during the closure operation.
                let suppress = true;
                for (let j = 0; j < config.context.size; j++) {
                    if (!precedenceDecision.precedenceLoopbackStates.get(config.context.getReturnState(j))) {
                        suppress = false;
                        break;
                    }
                }
                if (suppress) {
                    continue;
                }
            }
            let t = p.getOptimizedTransition(i);
            let continueCollecting = !(t instanceof ActionTransition_1.ActionTransition) && collectPredicates;
            let c = this.getEpsilonTarget(config, t, continueCollecting, depth === 0, contextCache, treatEofAsEpsilon);
            if (c != null) {
                if (t instanceof RuleTransition_1.RuleTransition) {
                    if (intermediate != null && !collectPredicates) {
                        intermediate.add(c, contextCache);
                        continue;
                    }
                }
                let newDepth = depth;
                if (config.state instanceof RuleStopState_1.RuleStopState) {
                    // target fell off end of rule; mark resulting c as having dipped into outer context
                    // We can't get here if incoming config was rule stop and we had context
                    // track how far we dip into outer context.  Might
                    // come in handy and we avoid evaluating context dependent
                    // preds if this is > 0.
                    if (this.dfa != null && this.dfa.isPrecedenceDfa) {
                        let outermostPrecedenceReturn = t.outermostPrecedenceReturn;
                        if (outermostPrecedenceReturn === this.dfa.atnStartState.ruleIndex) {
                            c.isPrecedenceFilterSuppressed = true;
                        }
                    }
                    c.outerContextDepth = c.outerContextDepth + 1;
                    if (!closureBusy.add(c)) {
                        // avoid infinite recursion for right-recursive rules
                        continue;
                    }
                    assert(newDepth > MIN_INTEGER_VALUE);
                    newDepth--;
                    if (ParserATNSimulator.debug) {
                        console.log("dips into outer ctx: " + c);
                    }
                }
                else if (t instanceof RuleTransition_1.RuleTransition) {
                    if (this.optimize_tail_calls && t.optimizedTailCall && (!this.tail_call_preserves_sll || !PredictionContext_1.PredictionContext.isEmptyLocal(config.context))) {
                        assert(c.context === config.context);
                        if (newDepth === 0) {
                            // the pop/push of a tail call would keep the depth
                            // constant, except we latch if it goes negative
                            newDepth--;
                            if (!this.tail_call_preserves_sll && PredictionContext_1.PredictionContext.isEmptyLocal(config.context)) {
                                // make sure the SLL config "dips into the outer context" or prediction may not fall back to LL on conflict
                                c.outerContextDepth = c.outerContextDepth + 1;
                            }
                        }
                    }
                    else {
                        // latch when newDepth goes negative - once we step out of the entry context we can't return
                        if (newDepth >= 0) {
                            newDepth++;
                        }
                    }
                }
                else {
                    if (!t.isEpsilon && !closureBusy.add(c)) {
                        // avoid infinite recursion for EOF* and EOF+
                        continue;
                    }
                }
                this.closureImpl(c, configs, intermediate, closureBusy, continueCollecting, hasMoreContexts, contextCache, newDepth, treatEofAsEpsilon);
            }
        }
    }
    getRuleName(index) {
        if (this._parser != null && index >= 0) {
            return this._parser.ruleNames[index];
        }
        return "<rule " + index + ">";
    }
    getEpsilonTarget(config, t, collectPredicates, inContext, contextCache, treatEofAsEpsilon) {
        switch (t.serializationType) {
            case 3 /* RULE */:
                return this.ruleTransition(config, t, contextCache);
            case 10 /* PRECEDENCE */:
                return this.precedenceTransition(config, t, collectPredicates, inContext);
            case 4 /* PREDICATE */:
                return this.predTransition(config, t, collectPredicates, inContext);
            case 6 /* ACTION */:
                return this.actionTransition(config, t);
            case 1 /* EPSILON */:
                return config.transform(t.target, false);
            case 5 /* ATOM */:
            case 2 /* RANGE */:
            case 7 /* SET */:
                // EOF transitions act like epsilon transitions after the first EOF
                // transition is traversed
                if (treatEofAsEpsilon) {
                    if (t.matches(Token_1.Token.EOF, 0, 1)) {
                        return config.transform(t.target, false);
                    }
                }
                return undefined;
            default:
                return undefined;
        }
    }
    actionTransition(config, t) {
        if (ParserATNSimulator.debug) {
            console.log("ACTION edge " + t.ruleIndex + ":" + t.actionIndex);
        }
        return config.transform(t.target, false);
    }
    precedenceTransition(config, pt, collectPredicates, inContext) {
        if (ParserATNSimulator.debug) {
            console.log("PRED (collectPredicates=" + collectPredicates + ") " +
                pt.precedence + ">=_p" +
                ", ctx dependent=true");
            if (this._parser != null) {
                console.log("context surrounding pred is " +
                    this._parser.getRuleInvocationStack());
            }
        }
        let c;
        if (collectPredicates && inContext) {
            let newSemCtx = SemanticContext_1.SemanticContext.and(config.semanticContext, pt.predicate);
            c = config.transform(pt.target, false, newSemCtx);
        }
        else {
            c = config.transform(pt.target, false);
        }
        if (ParserATNSimulator.debug) {
            console.log("config from pred transition=" + c);
        }
        return c;
    }
    predTransition(config, pt, collectPredicates, inContext) {
        if (ParserATNSimulator.debug) {
            console.log("PRED (collectPredicates=" + collectPredicates + ") " +
                pt.ruleIndex + ":" + pt.predIndex +
                ", ctx dependent=" + pt.isCtxDependent);
            if (this._parser != null) {
                console.log("context surrounding pred is " +
                    this._parser.getRuleInvocationStack());
            }
        }
        let c;
        if (collectPredicates &&
            (!pt.isCtxDependent || (pt.isCtxDependent && inContext))) {
            let newSemCtx = SemanticContext_1.SemanticContext.and(config.semanticContext, pt.predicate);
            c = config.transform(pt.target, false, newSemCtx);
        }
        else {
            c = config.transform(pt.target, false);
        }
        if (ParserATNSimulator.debug) {
            console.log("config from pred transition=" + c);
        }
        return c;
    }
    ruleTransition(config, t, contextCache) {
        if (ParserATNSimulator.debug) {
            console.log("CALL rule " + this.getRuleName(t.target.ruleIndex) +
                ", ctx=" + config.context);
        }
        let returnState = t.followState;
        let newContext;
        if (this.optimize_tail_calls && t.optimizedTailCall && (!this.tail_call_preserves_sll || !PredictionContext_1.PredictionContext.isEmptyLocal(config.context))) {
            newContext = config.context;
        }
        else if (contextCache != null) {
            newContext = contextCache.getChild(config.context, returnState.stateNumber);
        }
        else {
            newContext = config.context.getChild(returnState.stateNumber);
        }
        return config.transform(t.target, false, newContext);
    }
    isConflicted(configset, contextCache) {
        if (configset.uniqueAlt !== ATN_1.ATN.INVALID_ALT_NUMBER || configset.size <= 1) {
            return undefined;
        }
        let configs = configset.toArray();
        configs.sort(ParserATNSimulator.STATE_ALT_SORT_COMPARATOR);
        let exact = !configset.dipsIntoOuterContext;
        let alts = new BitSet_1.BitSet();
        let minAlt = configs[0].alt;
        alts.set(minAlt);
        /* Quick checks come first (single pass, no context joining):
         *  1. Make sure first config in the sorted list predicts the minimum
         *     represented alternative.
         *  2. Make sure every represented state has at least one configuration
         *     which predicts the minimum represented alternative.
         *  3. (exact only) make sure every represented state has at least one
         *     configuration which predicts each represented alternative.
         */
        // quick check 1 & 2 => if we assume #1 holds and check #2 against the
        // minAlt from the first state, #2 will fail if the assumption was
        // incorrect
        let currentState = configs[0].state.nonStopStateNumber;
        for (let config of configs) {
            let stateNumber = config.state.nonStopStateNumber;
            if (stateNumber !== currentState) {
                if (config.alt !== minAlt) {
                    return undefined;
                }
                currentState = stateNumber;
            }
        }
        let representedAlts;
        if (exact) {
            currentState = configs[0].state.nonStopStateNumber;
            // get the represented alternatives of the first state
            representedAlts = new BitSet_1.BitSet();
            let maxAlt = minAlt;
            for (let config of configs) {
                if (config.state.nonStopStateNumber !== currentState) {
                    break;
                }
                let alt = config.alt;
                representedAlts.set(alt);
                maxAlt = alt;
            }
            // quick check #3:
            currentState = configs[0].state.nonStopStateNumber;
            let currentAlt = minAlt;
            for (let config of configs) {
                let stateNumber = config.state.nonStopStateNumber;
                let alt = config.alt;
                if (stateNumber !== currentState) {
                    if (currentAlt !== maxAlt) {
                        exact = false;
                        break;
                    }
                    currentState = stateNumber;
                    currentAlt = minAlt;
                }
                else if (alt !== currentAlt) {
                    if (alt !== representedAlts.nextSetBit(currentAlt + 1)) {
                        exact = false;
                        break;
                    }
                    currentAlt = alt;
                }
            }
        }
        currentState = configs[0].state.nonStopStateNumber;
        let firstIndexCurrentState = 0;
        let lastIndexCurrentStateMinAlt = 0;
        let joinedCheckContext = configs[0].context;
        for (let i = 1; i < configs.length; i++) {
            let config = configs[i];
            if (config.alt !== minAlt) {
                break;
            }
            if (config.state.nonStopStateNumber !== currentState) {
                break;
            }
            lastIndexCurrentStateMinAlt = i;
            joinedCheckContext = contextCache.join(joinedCheckContext, configs[i].context);
        }
        for (let i = lastIndexCurrentStateMinAlt + 1; i < configs.length; i++) {
            let config = configs[i];
            let state = config.state;
            alts.set(config.alt);
            if (state.nonStopStateNumber !== currentState) {
                currentState = state.nonStopStateNumber;
                firstIndexCurrentState = i;
                lastIndexCurrentStateMinAlt = i;
                joinedCheckContext = config.context;
                for (let j = firstIndexCurrentState + 1; j < configs.length; j++) {
                    let config2 = configs[j];
                    if (config2.alt !== minAlt) {
                        break;
                    }
                    if (config2.state.nonStopStateNumber !== currentState) {
                        break;
                    }
                    lastIndexCurrentStateMinAlt = j;
                    joinedCheckContext = contextCache.join(joinedCheckContext, config2.context);
                }
                i = lastIndexCurrentStateMinAlt;
                continue;
            }
            let joinedCheckContext2 = config.context;
            let currentAlt = config.alt;
            let lastIndexCurrentStateCurrentAlt = i;
            for (let j = lastIndexCurrentStateCurrentAlt + 1; j < configs.length; j++) {
                let config2 = configs[j];
                if (config2.alt !== currentAlt) {
                    break;
                }
                if (config2.state.nonStopStateNumber !== currentState) {
                    break;
                }
                lastIndexCurrentStateCurrentAlt = j;
                joinedCheckContext2 = contextCache.join(joinedCheckContext2, config2.context);
            }
            i = lastIndexCurrentStateCurrentAlt;
            let check = contextCache.join(joinedCheckContext, joinedCheckContext2);
            if (!joinedCheckContext.equals(check)) {
                return undefined;
            }
            // update exact if necessary
            exact = exact && joinedCheckContext.equals(joinedCheckContext2);
        }
        return new ConflictInfo_1.ConflictInfo(alts, exact);
    }
    getConflictingAltsFromConfigSet(configs) {
        let conflictingAlts = configs.conflictingAlts;
        if (conflictingAlts == null && configs.uniqueAlt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
            conflictingAlts = new BitSet_1.BitSet();
            conflictingAlts.set(configs.uniqueAlt);
        }
        return conflictingAlts;
    }
    getTokenName(t) {
        if (t === Token_1.Token.EOF) {
            return "EOF";
        }
        let vocabulary = this._parser != null ? this._parser.vocabulary : VocabularyImpl_1.VocabularyImpl.EMPTY_VOCABULARY;
        let displayName = vocabulary.getDisplayName(t);
        if (displayName === String(t)) {
            return displayName;
        }
        return displayName + "<" + t + ">";
    }
    getLookaheadName(input) {
        return this.getTokenName(input.LA(1));
    }
    dumpDeadEndConfigs(nvae) {
        console.log("dead end configs: ");
        let deadEndConfigs = nvae.deadEndConfigs;
        if (!deadEndConfigs) {
            return;
        }
        for (let c of deadEndConfigs) {
            let trans = "no edges";
            if (c.state.numberOfOptimizedTransitions > 0) {
                let t = c.state.getOptimizedTransition(0);
                if (t instanceof AtomTransition_1.AtomTransition) {
                    trans = "Atom " + this.getTokenName(t._label);
                }
                else if (t instanceof SetTransition_1.SetTransition) {
                    let not = t instanceof NotSetTransition_1.NotSetTransition;
                    trans = (not ? "~" : "") + "Set " + t.set.toString();
                }
            }
            console.log(c.toString(this._parser, true) + ":" + trans);
        }
    }
    noViableAlt(input, outerContext, configs, startIndex) {
        return new NoViableAltException_1.NoViableAltException(this._parser, input, input.get(startIndex), input.LT(1), configs, outerContext);
    }
    getUniqueAlt(configs) {
        let alt = ATN_1.ATN.INVALID_ALT_NUMBER;
        for (let c of configs) {
            if (alt === ATN_1.ATN.INVALID_ALT_NUMBER) {
                alt = c.alt; // found first alt
            }
            else if (c.alt !== alt) {
                return ATN_1.ATN.INVALID_ALT_NUMBER;
            }
        }
        return alt;
    }
    configWithAltAtStopState(configs, alt) {
        for (let c of configs) {
            if (c.alt === alt) {
                if (c.state instanceof RuleStopState_1.RuleStopState) {
                    return true;
                }
            }
        }
        return false;
    }
    addDFAEdge(dfa, fromState, t, contextTransitions, toConfigs, contextCache) {
        assert(contextTransitions == null || contextTransitions.isEmpty || dfa.isContextSensitive);
        let from = fromState;
        let to = this.addDFAState(dfa, toConfigs, contextCache);
        if (contextTransitions != null) {
            for (let context of contextTransitions.toArray()) {
                if (context === PredictionContext_1.PredictionContext.EMPTY_FULL_STATE_KEY) {
                    if (from.configs.isOutermostConfigSet) {
                        continue;
                    }
                }
                from.setContextSensitive(this.atn);
                from.setContextSymbol(t);
                let next = from.getContextTarget(context);
                if (next != null) {
                    from = next;
                    continue;
                }
                next = this.addDFAContextState(dfa, from.configs, context, contextCache);
                assert(context !== PredictionContext_1.PredictionContext.EMPTY_FULL_STATE_KEY || next.configs.isOutermostConfigSet);
                from.setContextTarget(context, next);
                from = next;
            }
        }
        if (ParserATNSimulator.debug) {
            console.log("EDGE " + from + " -> " + to + " upon " + this.getTokenName(t));
        }
        this.setDFAEdge(from, t, to);
        if (ParserATNSimulator.debug) {
            console.log("DFA=\n" + dfa.toString(this._parser != null ? this._parser.vocabulary : VocabularyImpl_1.VocabularyImpl.EMPTY_VOCABULARY, this._parser != null ? this._parser.ruleNames : undefined));
        }
        return to;
    }
    setDFAEdge(p, t, q) {
        if (p != null) {
            p.setTarget(t, q);
        }
    }
    /** See comment on LexerInterpreter.addDFAState. */
    addDFAContextState(dfa, configs, returnContext, contextCache) {
        if (returnContext !== PredictionContext_1.PredictionContext.EMPTY_FULL_STATE_KEY) {
            let contextConfigs = new ATNConfigSet_1.ATNConfigSet();
            for (let config of configs) {
                contextConfigs.add(config.appendContext(returnContext, contextCache));
            }
            return this.addDFAState(dfa, contextConfigs, contextCache);
        }
        else {
            assert(!configs.isOutermostConfigSet, "Shouldn't be adding a duplicate edge.");
            configs = configs.clone(true);
            configs.isOutermostConfigSet = true;
            return this.addDFAState(dfa, configs, contextCache);
        }
    }
    /** See comment on LexerInterpreter.addDFAState. */
    addDFAState(dfa, configs, contextCache) {
        let enableDfa = this.enable_global_context_dfa || !configs.isOutermostConfigSet;
        if (enableDfa) {
            if (!configs.isReadOnly) {
                configs.optimizeConfigs(this);
            }
            let proposed = this.createDFAState(dfa, configs);
            let existing = dfa.states.get(proposed);
            if (existing != null) {
                return existing;
            }
        }
        if (!configs.isReadOnly) {
            if (configs.conflictInfo == null) {
                configs.conflictInfo = this.isConflicted(configs, contextCache);
            }
        }
        let newState = this.createDFAState(dfa, configs.clone(true));
        // getDecisionState won't return undefined when we request a known valid decision
        let decisionState = this.atn.getDecisionState(dfa.decision);
        let predictedAlt = this.getUniqueAlt(configs);
        if (predictedAlt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
            newState.acceptStateInfo = new AcceptStateInfo_1.AcceptStateInfo(predictedAlt);
        }
        else if (configs.conflictingAlts != null) {
            let conflictingAlts = configs.conflictingAlts;
            if (conflictingAlts) {
                newState.acceptStateInfo = new AcceptStateInfo_1.AcceptStateInfo(conflictingAlts.nextSetBit(0));
            }
        }
        if (newState.isAcceptState && configs.hasSemanticContext) {
            this.predicateDFAState(newState, configs, decisionState.numberOfTransitions);
        }
        if (!enableDfa) {
            return newState;
        }
        let added = dfa.addState(newState);
        if (ParserATNSimulator.debug && added === newState) {
            console.log("adding new DFA state: " + newState);
        }
        return added;
    }
    createDFAState(dfa, configs) {
        return new DFAState_1.DFAState(configs);
    }
    reportAttemptingFullContext(dfa, conflictingAlts, conflictState, startIndex, stopIndex) {
        if (ParserATNSimulator.debug || ParserATNSimulator.retry_debug) {
            let interval = Interval_1.Interval.of(startIndex, stopIndex);
            console.log("reportAttemptingFullContext decision=" + dfa.decision + ":" + conflictState.s0.configs +
                ", input=" + this._parser.inputStream.getText(interval));
        }
        if (this._parser != null) {
            let listener = this._parser.getErrorListenerDispatch();
            if (listener.reportAttemptingFullContext) {
                listener.reportAttemptingFullContext(this._parser, dfa, startIndex, stopIndex, conflictingAlts, conflictState);
            }
        }
    }
    reportContextSensitivity(dfa, prediction, acceptState, startIndex, stopIndex) {
        if (ParserATNSimulator.debug || ParserATNSimulator.retry_debug) {
            let interval = Interval_1.Interval.of(startIndex, stopIndex);
            console.log("reportContextSensitivity decision=" + dfa.decision + ":" + acceptState.s0.configs +
                ", input=" + this._parser.inputStream.getText(interval));
        }
        if (this._parser != null) {
            let listener = this._parser.getErrorListenerDispatch();
            if (listener.reportContextSensitivity) {
                listener.reportContextSensitivity(this._parser, dfa, startIndex, stopIndex, prediction, acceptState);
            }
        }
    }
    /** If context sensitive parsing, we know it's ambiguity not conflict */
    reportAmbiguity(dfa, D, // the DFA state from execATN(): void that had SLL conflicts
    startIndex, stopIndex, exact, ambigAlts, configs) {
        if (ParserATNSimulator.debug || ParserATNSimulator.retry_debug) {
            let interval = Interval_1.Interval.of(startIndex, stopIndex);
            console.log("reportAmbiguity " +
                ambigAlts + ":" + configs +
                ", input=" + this._parser.inputStream.getText(interval));
        }
        if (this._parser != null) {
            let listener = this._parser.getErrorListenerDispatch();
            if (listener.reportAmbiguity) {
                listener.reportAmbiguity(this._parser, dfa, startIndex, stopIndex, exact, ambigAlts, configs);
            }
        }
    }
    getReturnState(context) {
        if (context.isEmpty) {
            return PredictionContext_1.PredictionContext.EMPTY_FULL_STATE_KEY;
        }
        let state = this.atn.states[context.invokingState];
        let transition = state.transition(0);
        return transition.followState.stateNumber;
    }
    skipTailCalls(context) {
        if (!this.optimize_tail_calls) {
            return context;
        }
        while (!context.isEmpty) {
            let state = this.atn.states[context.invokingState];
            assert(state.numberOfTransitions === 1 && state.transition(0).serializationType === 3 /* RULE */);
            let transition = state.transition(0);
            if (!transition.tailCall) {
                break;
            }
            // This method requires that the root ancestor of the ParserRuleContext be empty. If we make it to this
            // line, we know the current node is not empty, which means it does have a parent.
            context = context.parent;
        }
        return context;
    }
    /**
     * @since 4.3
     */
    get parser() {
        return this._parser;
    }
};
ParserATNSimulator.debug = false;
ParserATNSimulator.dfa_debug = false;
ParserATNSimulator.retry_debug = false;
ParserATNSimulator.STATE_ALT_SORT_COMPARATOR = (o1, o2) => {
    let diff = o1.state.nonStopStateNumber - o2.state.nonStopStateNumber;
    if (diff !== 0) {
        return diff;
    }
    diff = o1.alt - o2.alt;
    if (diff !== 0) {
        return diff;
    }
    return 0;
};
__decorate([
    Decorators_1.NotNull
], ParserATNSimulator.prototype, "predictionMode", void 0);
__decorate([
    Decorators_1.NotNull
], ParserATNSimulator.prototype, "getPredictionMode", null);
__decorate([
    __param(0, Decorators_1.NotNull)
], ParserATNSimulator.prototype, "setPredictionMode", null);
__decorate([
    Decorators_1.Override
], ParserATNSimulator.prototype, "reset", null);
__decorate([
    __param(0, Decorators_1.NotNull)
], ParserATNSimulator.prototype, "adaptivePredict", null);
__decorate([
    __param(0, Decorators_1.NotNull),
    __param(1, Decorators_1.NotNull),
    __param(2, Decorators_1.NotNull)
], ParserATNSimulator.prototype, "getStartState", null);
__decorate([
    __param(0, Decorators_1.NotNull),
    __param(1, Decorators_1.NotNull),
    __param(3, Decorators_1.NotNull)
], ParserATNSimulator.prototype, "execDFA", null);
__decorate([
    __param(0, Decorators_1.NotNull),
    __param(1, Decorators_1.NotNull),
    __param(3, Decorators_1.NotNull)
], ParserATNSimulator.prototype, "execATN", null);
__decorate([
    __param(0, Decorators_1.NotNull), __param(2, Decorators_1.NotNull)
], ParserATNSimulator.prototype, "handleNoViableAlt", null);
__decorate([
    __param(0, Decorators_1.NotNull)
], ParserATNSimulator.prototype, "getExistingTargetState", null);
__decorate([
    Decorators_1.NotNull,
    __param(0, Decorators_1.NotNull), __param(1, Decorators_1.NotNull)
], ParserATNSimulator.prototype, "computeTargetState", null);
__decorate([
    Decorators_1.NotNull,
    __param(0, Decorators_1.NotNull)
], ParserATNSimulator.prototype, "removeAllConfigsNotInRuleStopState", null);
__decorate([
    Decorators_1.NotNull
], ParserATNSimulator.prototype, "computeStartState", null);
__decorate([
    Decorators_1.NotNull,
    __param(0, Decorators_1.NotNull)
], ParserATNSimulator.prototype, "applyPrecedenceFilter", null);
__decorate([
    __param(0, Decorators_1.NotNull), __param(1, Decorators_1.NotNull)
], ParserATNSimulator.prototype, "getReachableTarget", null);
__decorate([
    __param(0, Decorators_1.NotNull),
    __param(1, Decorators_1.NotNull)
], ParserATNSimulator.prototype, "getPredsForAmbigAlts", null);
__decorate([
    __param(0, Decorators_1.NotNull)
], ParserATNSimulator.prototype, "evalSemanticContext", null);
__decorate([
    __param(0, Decorators_1.NotNull)
], ParserATNSimulator.prototype, "evalSemanticContextImpl", null);
__decorate([
    __param(1, Decorators_1.NotNull),
    __param(4, Decorators_1.Nullable)
], ParserATNSimulator.prototype, "closure", null);
__decorate([
    __param(0, Decorators_1.NotNull),
    __param(1, Decorators_1.NotNull),
    __param(2, Decorators_1.Nullable),
    __param(3, Decorators_1.NotNull),
    __param(6, Decorators_1.NotNull)
], ParserATNSimulator.prototype, "closureImpl", null);
__decorate([
    Decorators_1.NotNull
], ParserATNSimulator.prototype, "getRuleName", null);
__decorate([
    __param(0, Decorators_1.NotNull), __param(1, Decorators_1.NotNull)
], ParserATNSimulator.prototype, "getEpsilonTarget", null);
__decorate([
    Decorators_1.NotNull,
    __param(0, Decorators_1.NotNull), __param(1, Decorators_1.NotNull)
], ParserATNSimulator.prototype, "actionTransition", null);
__decorate([
    Decorators_1.Nullable,
    __param(0, Decorators_1.NotNull),
    __param(1, Decorators_1.NotNull)
], ParserATNSimulator.prototype, "precedenceTransition", null);
__decorate([
    Decorators_1.Nullable,
    __param(0, Decorators_1.NotNull),
    __param(1, Decorators_1.NotNull)
], ParserATNSimulator.prototype, "predTransition", null);
__decorate([
    Decorators_1.NotNull,
    __param(0, Decorators_1.NotNull), __param(1, Decorators_1.NotNull), __param(2, Decorators_1.Nullable)
], ParserATNSimulator.prototype, "ruleTransition", null);
__decorate([
    __param(0, Decorators_1.NotNull)
], ParserATNSimulator.prototype, "isConflicted", null);
__decorate([
    Decorators_1.NotNull
], ParserATNSimulator.prototype, "getTokenName", null);
__decorate([
    __param(0, Decorators_1.NotNull)
], ParserATNSimulator.prototype, "dumpDeadEndConfigs", null);
__decorate([
    Decorators_1.NotNull,
    __param(0, Decorators_1.NotNull),
    __param(1, Decorators_1.NotNull),
    __param(2, Decorators_1.NotNull)
], ParserATNSimulator.prototype, "noViableAlt", null);
__decorate([
    __param(0, Decorators_1.NotNull)
], ParserATNSimulator.prototype, "getUniqueAlt", null);
__decorate([
    __param(0, Decorators_1.NotNull)
], ParserATNSimulator.prototype, "configWithAltAtStopState", null);
__decorate([
    Decorators_1.NotNull,
    __param(0, Decorators_1.NotNull),
    __param(1, Decorators_1.NotNull),
    __param(4, Decorators_1.NotNull)
], ParserATNSimulator.prototype, "addDFAEdge", null);
__decorate([
    __param(0, Decorators_1.Nullable), __param(2, Decorators_1.Nullable)
], ParserATNSimulator.prototype, "setDFAEdge", null);
__decorate([
    Decorators_1.NotNull,
    __param(0, Decorators_1.NotNull), __param(1, Decorators_1.NotNull)
], ParserATNSimulator.prototype, "addDFAContextState", null);
__decorate([
    Decorators_1.NotNull,
    __param(0, Decorators_1.NotNull), __param(1, Decorators_1.NotNull)
], ParserATNSimulator.prototype, "addDFAState", null);
__decorate([
    Decorators_1.NotNull,
    __param(0, Decorators_1.NotNull), __param(1, Decorators_1.NotNull)
], ParserATNSimulator.prototype, "createDFAState", null);
__decorate([
    __param(0, Decorators_1.NotNull), __param(2, Decorators_1.NotNull)
], ParserATNSimulator.prototype, "reportAttemptingFullContext", null);
__decorate([
    __param(0, Decorators_1.NotNull), __param(2, Decorators_1.NotNull)
], ParserATNSimulator.prototype, "reportContextSensitivity", null);
__decorate([
    __param(0, Decorators_1.NotNull),
    __param(5, Decorators_1.NotNull),
    __param(6, Decorators_1.NotNull)
], ParserATNSimulator.prototype, "reportAmbiguity", null);
ParserATNSimulator = __decorate([
    __param(0, Decorators_1.NotNull)
], ParserATNSimulator);
exports.ParserATNSimulator = ParserATNSimulator;
//# sourceMappingURL=ParserATNSimulator.js.map

/***/ }),

/***/ 9815:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PlusBlockStartState = void 0;
// ConvertTo-TS run at 2016-10-04T11:26:34.9572142-07:00
const ATNStateType_1 = __webpack_require__(9602);
const BlockStartState_1 = __webpack_require__(9954);
const Decorators_1 = __webpack_require__(681);
/** Start of `(A|B|...)+` loop. Technically a decision state, but
 *  we don't use for code generation; somebody might need it, so I'm defining
 *  it for completeness. In reality, the {@link PlusLoopbackState} node is the
 *  real decision-making note for `A+`.
 */
class PlusBlockStartState extends BlockStartState_1.BlockStartState {
    get stateType() {
        return ATNStateType_1.ATNStateType.PLUS_BLOCK_START;
    }
}
__decorate([
    Decorators_1.Override
], PlusBlockStartState.prototype, "stateType", null);
exports.PlusBlockStartState = PlusBlockStartState;
//# sourceMappingURL=PlusBlockStartState.js.map

/***/ }),

/***/ 1232:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PlusLoopbackState = void 0;
// ConvertTo-TS run at 2016-10-04T11:26:35.0257730-07:00
const ATNStateType_1 = __webpack_require__(9602);
const DecisionState_1 = __webpack_require__(4993);
const Decorators_1 = __webpack_require__(681);
/** Decision state for `A+` and `(A|B)+`.  It has two transitions:
 *  one to the loop back to start of the block and one to exit.
 */
class PlusLoopbackState extends DecisionState_1.DecisionState {
    get stateType() {
        return ATNStateType_1.ATNStateType.PLUS_LOOP_BACK;
    }
}
__decorate([
    Decorators_1.Override
], PlusLoopbackState.prototype, "stateType", null);
exports.PlusLoopbackState = PlusLoopbackState;
//# sourceMappingURL=PlusLoopbackState.js.map

/***/ }),

/***/ 8889:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PrecedencePredicateTransition = void 0;
// ConvertTo-TS run at 2016-10-04T11:26:35.0994191-07:00
const AbstractPredicateTransition_1 = __webpack_require__(8356);
const Decorators_1 = __webpack_require__(681);
const SemanticContext_1 = __webpack_require__(8300);
/**
 *
 * @author Sam Harwell
 */
let PrecedencePredicateTransition = class PrecedencePredicateTransition extends AbstractPredicateTransition_1.AbstractPredicateTransition {
    constructor(target, precedence) {
        super(target);
        this.precedence = precedence;
    }
    get serializationType() {
        return 10 /* PRECEDENCE */;
    }
    get isEpsilon() {
        return true;
    }
    matches(symbol, minVocabSymbol, maxVocabSymbol) {
        return false;
    }
    get predicate() {
        return new SemanticContext_1.SemanticContext.PrecedencePredicate(this.precedence);
    }
    toString() {
        return this.precedence + " >= _p";
    }
};
__decorate([
    Decorators_1.Override
], PrecedencePredicateTransition.prototype, "serializationType", null);
__decorate([
    Decorators_1.Override
], PrecedencePredicateTransition.prototype, "isEpsilon", null);
__decorate([
    Decorators_1.Override
], PrecedencePredicateTransition.prototype, "matches", null);
__decorate([
    Decorators_1.Override
], PrecedencePredicateTransition.prototype, "toString", null);
PrecedencePredicateTransition = __decorate([
    __param(0, Decorators_1.NotNull)
], PrecedencePredicateTransition);
exports.PrecedencePredicateTransition = PrecedencePredicateTransition;
//# sourceMappingURL=PrecedencePredicateTransition.js.map

/***/ }),

/***/ 7576:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PredicateEvalInfo = void 0;
// ConvertTo-TS run at 2016-10-04T11:26:35.1914305-07:00
const DecisionEventInfo_1 = __webpack_require__(1548);
const Decorators_1 = __webpack_require__(681);
/**
 * This class represents profiling event information for semantic predicate
 * evaluations which occur during prediction.
 *
 * @see ParserATNSimulator#evalSemanticContext
 *
 * @since 4.3
 */
let PredicateEvalInfo = class PredicateEvalInfo extends DecisionEventInfo_1.DecisionEventInfo {
    /**
     * Constructs a new instance of the {@link PredicateEvalInfo} class with the
     * specified detailed predicate evaluation information.
     *
     * @param state The simulator state
     * @param decision The decision number
     * @param input The input token stream
     * @param startIndex The start index for the current prediction
     * @param stopIndex The index at which the predicate evaluation was
     * triggered. Note that the input stream may be reset to other positions for
     * the actual evaluation of individual predicates.
     * @param semctx The semantic context which was evaluated
     * @param evalResult The results of evaluating the semantic context
     * @param predictedAlt The alternative number for the decision which is
     * guarded by the semantic context `semctx`. See {@link #predictedAlt}
     * for more information.
     *
     * @see ParserATNSimulator#evalSemanticContext(SemanticContext, ParserRuleContext, int)
     * @see SemanticContext#eval(Recognizer, RuleContext)
     */
    constructor(state, decision, input, startIndex, stopIndex, semctx, evalResult, predictedAlt) {
        super(decision, state, input, startIndex, stopIndex, state.useContext);
        this.semctx = semctx;
        this.evalResult = evalResult;
        this.predictedAlt = predictedAlt;
    }
};
PredicateEvalInfo = __decorate([
    __param(0, Decorators_1.NotNull),
    __param(2, Decorators_1.NotNull),
    __param(5, Decorators_1.NotNull)
], PredicateEvalInfo);
exports.PredicateEvalInfo = PredicateEvalInfo;
//# sourceMappingURL=PredicateEvalInfo.js.map

/***/ }),

/***/ 1290:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PredicateTransition = void 0;
// ConvertTo-TS run at 2016-10-04T11:26:35.2826960-07:00
const AbstractPredicateTransition_1 = __webpack_require__(8356);
const Decorators_1 = __webpack_require__(681);
const SemanticContext_1 = __webpack_require__(8300);
/** TODO: this is old comment:
 *  A tree of semantic predicates from the grammar AST if label==SEMPRED.
 *  In the ATN, labels will always be exactly one predicate, but the DFA
 *  may have to combine a bunch of them as it collects predicates from
 *  multiple ATN configurations into a single DFA state.
 */
let PredicateTransition = class PredicateTransition extends AbstractPredicateTransition_1.AbstractPredicateTransition {
    constructor(target, ruleIndex, predIndex, isCtxDependent) {
        super(target);
        this.ruleIndex = ruleIndex;
        this.predIndex = predIndex;
        this.isCtxDependent = isCtxDependent;
    }
    get serializationType() {
        return 4 /* PREDICATE */;
    }
    get isEpsilon() { return true; }
    matches(symbol, minVocabSymbol, maxVocabSymbol) {
        return false;
    }
    get predicate() {
        return new SemanticContext_1.SemanticContext.Predicate(this.ruleIndex, this.predIndex, this.isCtxDependent);
    }
    toString() {
        return "pred_" + this.ruleIndex + ":" + this.predIndex;
    }
};
__decorate([
    Decorators_1.Override
], PredicateTransition.prototype, "serializationType", null);
__decorate([
    Decorators_1.Override
], PredicateTransition.prototype, "isEpsilon", null);
__decorate([
    Decorators_1.Override
], PredicateTransition.prototype, "matches", null);
__decorate([
    Decorators_1.Override,
    Decorators_1.NotNull
], PredicateTransition.prototype, "toString", null);
PredicateTransition = __decorate([
    __param(0, Decorators_1.NotNull)
], PredicateTransition);
exports.PredicateTransition = PredicateTransition;
//# sourceMappingURL=PredicateTransition.js.map

/***/ }),

/***/ 1229:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.SingletonPredictionContext = exports.PredictionContext = void 0;
// ConvertTo-TS run at 2016-10-04T11:26:35.3812636-07:00
const Array2DHashMap_1 = __webpack_require__(2835);
const Array2DHashSet_1 = __webpack_require__(5265);
const Arrays_1 = __webpack_require__(7464);
const MurmurHash_1 = __webpack_require__(7789);
const Decorators_1 = __webpack_require__(681);
const PredictionContextCache_1 = __webpack_require__(1435);
const assert = __webpack_require__(1696);
const INITIAL_HASH = 1;
class PredictionContext {
    constructor(cachedHashCode) {
        this.cachedHashCode = cachedHashCode;
    }
    static calculateEmptyHashCode() {
        let hash = MurmurHash_1.MurmurHash.initialize(INITIAL_HASH);
        hash = MurmurHash_1.MurmurHash.finish(hash, 0);
        return hash;
    }
    static calculateSingleHashCode(parent, returnState) {
        let hash = MurmurHash_1.MurmurHash.initialize(INITIAL_HASH);
        hash = MurmurHash_1.MurmurHash.update(hash, parent);
        hash = MurmurHash_1.MurmurHash.update(hash, returnState);
        hash = MurmurHash_1.MurmurHash.finish(hash, 2);
        return hash;
    }
    static calculateHashCode(parents, returnStates) {
        let hash = MurmurHash_1.MurmurHash.initialize(INITIAL_HASH);
        for (let parent of parents) {
            hash = MurmurHash_1.MurmurHash.update(hash, parent);
        }
        for (let returnState of returnStates) {
            hash = MurmurHash_1.MurmurHash.update(hash, returnState);
        }
        hash = MurmurHash_1.MurmurHash.finish(hash, 2 * parents.length);
        return hash;
    }
    static fromRuleContext(atn, outerContext, fullContext = true) {
        if (outerContext.isEmpty) {
            return fullContext ? PredictionContext.EMPTY_FULL : PredictionContext.EMPTY_LOCAL;
        }
        let parent;
        if (outerContext._parent) {
            parent = PredictionContext.fromRuleContext(atn, outerContext._parent, fullContext);
        }
        else {
            parent = fullContext ? PredictionContext.EMPTY_FULL : PredictionContext.EMPTY_LOCAL;
        }
        let state = atn.states[outerContext.invokingState];
        let transition = state.transition(0);
        return parent.getChild(transition.followState.stateNumber);
    }
    static addEmptyContext(context) {
        return context.addEmptyContext();
    }
    static removeEmptyContext(context) {
        return context.removeEmptyContext();
    }
    static join(context0, context1, contextCache = PredictionContextCache_1.PredictionContextCache.UNCACHED) {
        if (context0 === context1) {
            return context0;
        }
        if (context0.isEmpty) {
            return PredictionContext.isEmptyLocal(context0) ? context0 : PredictionContext.addEmptyContext(context1);
        }
        else if (context1.isEmpty) {
            return PredictionContext.isEmptyLocal(context1) ? context1 : PredictionContext.addEmptyContext(context0);
        }
        let context0size = context0.size;
        let context1size = context1.size;
        if (context0size === 1 && context1size === 1 && context0.getReturnState(0) === context1.getReturnState(0)) {
            let merged = contextCache.join(context0.getParent(0), context1.getParent(0));
            if (merged === context0.getParent(0)) {
                return context0;
            }
            else if (merged === context1.getParent(0)) {
                return context1;
            }
            else {
                return merged.getChild(context0.getReturnState(0));
            }
        }
        let count = 0;
        let parentsList = new Array(context0size + context1size);
        let returnStatesList = new Array(parentsList.length);
        let leftIndex = 0;
        let rightIndex = 0;
        let canReturnLeft = true;
        let canReturnRight = true;
        while (leftIndex < context0size && rightIndex < context1size) {
            if (context0.getReturnState(leftIndex) === context1.getReturnState(rightIndex)) {
                parentsList[count] = contextCache.join(context0.getParent(leftIndex), context1.getParent(rightIndex));
                returnStatesList[count] = context0.getReturnState(leftIndex);
                canReturnLeft = canReturnLeft && parentsList[count] === context0.getParent(leftIndex);
                canReturnRight = canReturnRight && parentsList[count] === context1.getParent(rightIndex);
                leftIndex++;
                rightIndex++;
            }
            else if (context0.getReturnState(leftIndex) < context1.getReturnState(rightIndex)) {
                parentsList[count] = context0.getParent(leftIndex);
                returnStatesList[count] = context0.getReturnState(leftIndex);
                canReturnRight = false;
                leftIndex++;
            }
            else {
                assert(context1.getReturnState(rightIndex) < context0.getReturnState(leftIndex));
                parentsList[count] = context1.getParent(rightIndex);
                returnStatesList[count] = context1.getReturnState(rightIndex);
                canReturnLeft = false;
                rightIndex++;
            }
            count++;
        }
        while (leftIndex < context0size) {
            parentsList[count] = context0.getParent(leftIndex);
            returnStatesList[count] = context0.getReturnState(leftIndex);
            leftIndex++;
            canReturnRight = false;
            count++;
        }
        while (rightIndex < context1size) {
            parentsList[count] = context1.getParent(rightIndex);
            returnStatesList[count] = context1.getReturnState(rightIndex);
            rightIndex++;
            canReturnLeft = false;
            count++;
        }
        if (canReturnLeft) {
            return context0;
        }
        else if (canReturnRight) {
            return context1;
        }
        if (count < parentsList.length) {
            parentsList = parentsList.slice(0, count);
            returnStatesList = returnStatesList.slice(0, count);
        }
        if (parentsList.length === 0) {
            // if one of them was EMPTY_LOCAL, it would be empty and handled at the beginning of the method
            return PredictionContext.EMPTY_FULL;
        }
        else if (parentsList.length === 1) {
            return new SingletonPredictionContext(parentsList[0], returnStatesList[0]);
        }
        else {
            return new ArrayPredictionContext(parentsList, returnStatesList);
        }
    }
    static isEmptyLocal(context) {
        return context === PredictionContext.EMPTY_LOCAL;
    }
    static getCachedContext(context, contextCache, visited) {
        if (context.isEmpty) {
            return context;
        }
        let existing = visited.get(context);
        if (existing) {
            return existing;
        }
        existing = contextCache.get(context);
        if (existing) {
            visited.put(context, existing);
            return existing;
        }
        let changed = false;
        let parents = new Array(context.size);
        for (let i = 0; i < parents.length; i++) {
            let parent = PredictionContext.getCachedContext(context.getParent(i), contextCache, visited);
            if (changed || parent !== context.getParent(i)) {
                if (!changed) {
                    parents = new Array(context.size);
                    for (let j = 0; j < context.size; j++) {
                        parents[j] = context.getParent(j);
                    }
                    changed = true;
                }
                parents[i] = parent;
            }
        }
        if (!changed) {
            existing = contextCache.putIfAbsent(context, context);
            visited.put(context, existing != null ? existing : context);
            return context;
        }
        // We know parents.length>0 because context.isEmpty is checked at the beginning of the method.
        let updated;
        if (parents.length === 1) {
            updated = new SingletonPredictionContext(parents[0], context.getReturnState(0));
        }
        else {
            let returnStates = new Array(context.size);
            for (let i = 0; i < context.size; i++) {
                returnStates[i] = context.getReturnState(i);
            }
            updated = new ArrayPredictionContext(parents, returnStates, context.hashCode());
        }
        existing = contextCache.putIfAbsent(updated, updated);
        visited.put(updated, existing || updated);
        visited.put(context, existing || updated);
        return updated;
    }
    appendSingleContext(returnContext, contextCache) {
        return this.appendContext(PredictionContext.EMPTY_FULL.getChild(returnContext), contextCache);
    }
    getChild(returnState) {
        return new SingletonPredictionContext(this, returnState);
    }
    hashCode() {
        return this.cachedHashCode;
    }
    toStrings(recognizer, currentState, stop = PredictionContext.EMPTY_FULL) {
        let result = [];
        outer: for (let perm = 0;; perm++) {
            let offset = 0;
            let last = true;
            let p = this;
            let stateNumber = currentState;
            let localBuffer = "";
            localBuffer += "[";
            while (!p.isEmpty && p !== stop) {
                let index = 0;
                if (p.size > 0) {
                    let bits = 1;
                    while (((1 << bits) >>> 0) < p.size) {
                        bits++;
                    }
                    let mask = ((1 << bits) >>> 0) - 1;
                    index = (perm >> offset) & mask;
                    last = last && index >= p.size - 1;
                    if (index >= p.size) {
                        continue outer;
                    }
                    offset += bits;
                }
                if (recognizer) {
                    if (localBuffer.length > 1) {
                        // first char is '[', if more than that this isn't the first rule
                        localBuffer += " ";
                    }
                    let atn = recognizer.atn;
                    let s = atn.states[stateNumber];
                    let ruleName = recognizer.ruleNames[s.ruleIndex];
                    localBuffer += ruleName;
                }
                else if (p.getReturnState(index) !== PredictionContext.EMPTY_FULL_STATE_KEY) {
                    if (!p.isEmpty) {
                        if (localBuffer.length > 1) {
                            // first char is '[', if more than that this isn't the first rule
                            localBuffer += " ";
                        }
                        localBuffer += p.getReturnState(index);
                    }
                }
                stateNumber = p.getReturnState(index);
                p = p.getParent(index);
            }
            localBuffer += "]";
            result.push(localBuffer);
            if (last) {
                break;
            }
        }
        return result;
    }
}
__decorate([
    Decorators_1.Override
], PredictionContext.prototype, "hashCode", null);
__decorate([
    __param(0, Decorators_1.NotNull), __param(1, Decorators_1.NotNull), __param(2, Decorators_1.NotNull)
], PredictionContext, "join", null);
__decorate([
    __param(0, Decorators_1.NotNull),
    __param(1, Decorators_1.NotNull),
    __param(2, Decorators_1.NotNull)
], PredictionContext, "getCachedContext", null);
exports.PredictionContext = PredictionContext;
class EmptyPredictionContext extends PredictionContext {
    constructor(fullContext) {
        super(PredictionContext.calculateEmptyHashCode());
        this.fullContext = fullContext;
    }
    get isFullContext() {
        return this.fullContext;
    }
    addEmptyContext() {
        return this;
    }
    removeEmptyContext() {
        throw new Error("Cannot remove the empty context from itself.");
    }
    getParent(index) {
        throw new Error("index out of bounds");
    }
    getReturnState(index) {
        throw new Error("index out of bounds");
    }
    findReturnState(returnState) {
        return -1;
    }
    get size() {
        return 0;
    }
    appendSingleContext(returnContext, contextCache) {
        return contextCache.getChild(this, returnContext);
    }
    appendContext(suffix, contextCache) {
        return suffix;
    }
    get isEmpty() {
        return true;
    }
    get hasEmpty() {
        return true;
    }
    equals(o) {
        return this === o;
    }
    toStrings(recognizer, currentState, stop) {
        return ["[]"];
    }
}
__decorate([
    Decorators_1.Override
], EmptyPredictionContext.prototype, "addEmptyContext", null);
__decorate([
    Decorators_1.Override
], EmptyPredictionContext.prototype, "removeEmptyContext", null);
__decorate([
    Decorators_1.Override
], EmptyPredictionContext.prototype, "getParent", null);
__decorate([
    Decorators_1.Override
], EmptyPredictionContext.prototype, "getReturnState", null);
__decorate([
    Decorators_1.Override
], EmptyPredictionContext.prototype, "findReturnState", null);
__decorate([
    Decorators_1.Override
], EmptyPredictionContext.prototype, "size", null);
__decorate([
    Decorators_1.Override
], EmptyPredictionContext.prototype, "appendSingleContext", null);
__decorate([
    Decorators_1.Override
], EmptyPredictionContext.prototype, "appendContext", null);
__decorate([
    Decorators_1.Override
], EmptyPredictionContext.prototype, "isEmpty", null);
__decorate([
    Decorators_1.Override
], EmptyPredictionContext.prototype, "hasEmpty", null);
__decorate([
    Decorators_1.Override
], EmptyPredictionContext.prototype, "equals", null);
__decorate([
    Decorators_1.Override
], EmptyPredictionContext.prototype, "toStrings", null);
let ArrayPredictionContext = class ArrayPredictionContext extends PredictionContext {
    constructor(parents, returnStates, hashCode) {
        super(hashCode || PredictionContext.calculateHashCode(parents, returnStates));
        assert(parents.length === returnStates.length);
        assert(returnStates.length > 1 || returnStates[0] !== PredictionContext.EMPTY_FULL_STATE_KEY, "Should be using PredictionContext.EMPTY instead.");
        this.parents = parents;
        this.returnStates = returnStates;
    }
    getParent(index) {
        return this.parents[index];
    }
    getReturnState(index) {
        return this.returnStates[index];
    }
    findReturnState(returnState) {
        return Arrays_1.Arrays.binarySearch(this.returnStates, returnState);
    }
    get size() {
        return this.returnStates.length;
    }
    get isEmpty() {
        return false;
    }
    get hasEmpty() {
        return this.returnStates[this.returnStates.length - 1] === PredictionContext.EMPTY_FULL_STATE_KEY;
    }
    addEmptyContext() {
        if (this.hasEmpty) {
            return this;
        }
        let parents2 = this.parents.slice(0);
        let returnStates2 = this.returnStates.slice(0);
        parents2.push(PredictionContext.EMPTY_FULL);
        returnStates2.push(PredictionContext.EMPTY_FULL_STATE_KEY);
        return new ArrayPredictionContext(parents2, returnStates2);
    }
    removeEmptyContext() {
        if (!this.hasEmpty) {
            return this;
        }
        if (this.returnStates.length === 2) {
            return new SingletonPredictionContext(this.parents[0], this.returnStates[0]);
        }
        else {
            let parents2 = this.parents.slice(0, this.parents.length - 1);
            let returnStates2 = this.returnStates.slice(0, this.returnStates.length - 1);
            return new ArrayPredictionContext(parents2, returnStates2);
        }
    }
    appendContext(suffix, contextCache) {
        return ArrayPredictionContext.appendContextImpl(this, suffix, new PredictionContext.IdentityHashMap());
    }
    static appendContextImpl(context, suffix, visited) {
        if (suffix.isEmpty) {
            if (PredictionContext.isEmptyLocal(suffix)) {
                if (context.hasEmpty) {
                    return PredictionContext.EMPTY_LOCAL;
                }
                throw new Error("what to do here?");
            }
            return context;
        }
        if (suffix.size !== 1) {
            throw new Error("Appending a tree suffix is not yet supported.");
        }
        let result = visited.get(context);
        if (!result) {
            if (context.isEmpty) {
                result = suffix;
            }
            else {
                let parentCount = context.size;
                if (context.hasEmpty) {
                    parentCount--;
                }
                let updatedParents = new Array(parentCount);
                let updatedReturnStates = new Array(parentCount);
                for (let i = 0; i < parentCount; i++) {
                    updatedReturnStates[i] = context.getReturnState(i);
                }
                for (let i = 0; i < parentCount; i++) {
                    updatedParents[i] = ArrayPredictionContext.appendContextImpl(context.getParent(i), suffix, visited);
                }
                if (updatedParents.length === 1) {
                    result = new SingletonPredictionContext(updatedParents[0], updatedReturnStates[0]);
                }
                else {
                    assert(updatedParents.length > 1);
                    result = new ArrayPredictionContext(updatedParents, updatedReturnStates);
                }
                if (context.hasEmpty) {
                    result = PredictionContext.join(result, suffix);
                }
            }
            visited.put(context, result);
        }
        return result;
    }
    equals(o) {
        if (this === o) {
            return true;
        }
        else if (!(o instanceof ArrayPredictionContext)) {
            return false;
        }
        if (this.hashCode() !== o.hashCode()) {
            // can't be same if hash is different
            return false;
        }
        let other = o;
        return this.equalsImpl(other, new Array2DHashSet_1.Array2DHashSet());
    }
    equalsImpl(other, visited) {
        let selfWorkList = [];
        let otherWorkList = [];
        selfWorkList.push(this);
        otherWorkList.push(other);
        while (true) {
            let currentSelf = selfWorkList.pop();
            let currentOther = otherWorkList.pop();
            if (!currentSelf || !currentOther) {
                break;
            }
            let operands = new PredictionContextCache_1.PredictionContextCache.IdentityCommutativePredictionContextOperands(currentSelf, currentOther);
            if (!visited.add(operands)) {
                continue;
            }
            let selfSize = operands.x.size;
            if (selfSize === 0) {
                if (!operands.x.equals(operands.y)) {
                    return false;
                }
                continue;
            }
            let otherSize = operands.y.size;
            if (selfSize !== otherSize) {
                return false;
            }
            for (let i = 0; i < selfSize; i++) {
                if (operands.x.getReturnState(i) !== operands.y.getReturnState(i)) {
                    return false;
                }
                let selfParent = operands.x.getParent(i);
                let otherParent = operands.y.getParent(i);
                if (selfParent.hashCode() !== otherParent.hashCode()) {
                    return false;
                }
                if (selfParent !== otherParent) {
                    selfWorkList.push(selfParent);
                    otherWorkList.push(otherParent);
                }
            }
        }
        return true;
    }
};
__decorate([
    Decorators_1.NotNull
], ArrayPredictionContext.prototype, "parents", void 0);
__decorate([
    Decorators_1.NotNull
], ArrayPredictionContext.prototype, "returnStates", void 0);
__decorate([
    Decorators_1.Override
], ArrayPredictionContext.prototype, "getParent", null);
__decorate([
    Decorators_1.Override
], ArrayPredictionContext.prototype, "getReturnState", null);
__decorate([
    Decorators_1.Override
], ArrayPredictionContext.prototype, "findReturnState", null);
__decorate([
    Decorators_1.Override
], ArrayPredictionContext.prototype, "size", null);
__decorate([
    Decorators_1.Override
], ArrayPredictionContext.prototype, "isEmpty", null);
__decorate([
    Decorators_1.Override
], ArrayPredictionContext.prototype, "hasEmpty", null);
__decorate([
    Decorators_1.Override
], ArrayPredictionContext.prototype, "addEmptyContext", null);
__decorate([
    Decorators_1.Override
], ArrayPredictionContext.prototype, "removeEmptyContext", null);
__decorate([
    Decorators_1.Override
], ArrayPredictionContext.prototype, "appendContext", null);
__decorate([
    Decorators_1.Override
], ArrayPredictionContext.prototype, "equals", null);
ArrayPredictionContext = __decorate([
    __param(0, Decorators_1.NotNull)
], ArrayPredictionContext);
let SingletonPredictionContext = class SingletonPredictionContext extends PredictionContext {
    constructor(parent, returnState) {
        super(PredictionContext.calculateSingleHashCode(parent, returnState));
        // assert(returnState != PredictionContext.EMPTY_FULL_STATE_KEY && returnState != PredictionContext.EMPTY_LOCAL_STATE_KEY);
        this.parent = parent;
        this.returnState = returnState;
    }
    getParent(index) {
        // assert(index == 0);
        return this.parent;
    }
    getReturnState(index) {
        // assert(index == 0);
        return this.returnState;
    }
    findReturnState(returnState) {
        return this.returnState === returnState ? 0 : -1;
    }
    get size() {
        return 1;
    }
    get isEmpty() {
        return false;
    }
    get hasEmpty() {
        return false;
    }
    appendContext(suffix, contextCache) {
        return contextCache.getChild(this.parent.appendContext(suffix, contextCache), this.returnState);
    }
    addEmptyContext() {
        let parents = [this.parent, PredictionContext.EMPTY_FULL];
        let returnStates = [this.returnState, PredictionContext.EMPTY_FULL_STATE_KEY];
        return new ArrayPredictionContext(parents, returnStates);
    }
    removeEmptyContext() {
        return this;
    }
    equals(o) {
        if (o === this) {
            return true;
        }
        else if (!(o instanceof SingletonPredictionContext)) {
            return false;
        }
        let other = o;
        if (this.hashCode() !== other.hashCode()) {
            return false;
        }
        return this.returnState === other.returnState
            && this.parent.equals(other.parent);
    }
};
__decorate([
    Decorators_1.NotNull
], SingletonPredictionContext.prototype, "parent", void 0);
__decorate([
    Decorators_1.Override
], SingletonPredictionContext.prototype, "getParent", null);
__decorate([
    Decorators_1.Override
], SingletonPredictionContext.prototype, "getReturnState", null);
__decorate([
    Decorators_1.Override
], SingletonPredictionContext.prototype, "findReturnState", null);
__decorate([
    Decorators_1.Override
], SingletonPredictionContext.prototype, "size", null);
__decorate([
    Decorators_1.Override
], SingletonPredictionContext.prototype, "isEmpty", null);
__decorate([
    Decorators_1.Override
], SingletonPredictionContext.prototype, "hasEmpty", null);
__decorate([
    Decorators_1.Override
], SingletonPredictionContext.prototype, "appendContext", null);
__decorate([
    Decorators_1.Override
], SingletonPredictionContext.prototype, "addEmptyContext", null);
__decorate([
    Decorators_1.Override
], SingletonPredictionContext.prototype, "removeEmptyContext", null);
__decorate([
    Decorators_1.Override
], SingletonPredictionContext.prototype, "equals", null);
SingletonPredictionContext = __decorate([
    __param(0, Decorators_1.NotNull)
], SingletonPredictionContext);
exports.SingletonPredictionContext = SingletonPredictionContext;
(function (PredictionContext) {
    PredictionContext.EMPTY_LOCAL = new EmptyPredictionContext(false);
    PredictionContext.EMPTY_FULL = new EmptyPredictionContext(true);
    PredictionContext.EMPTY_LOCAL_STATE_KEY = -((1 << 31) >>> 0);
    PredictionContext.EMPTY_FULL_STATE_KEY = ((1 << 31) >>> 0) - 1;
    class IdentityHashMap extends Array2DHashMap_1.Array2DHashMap {
        constructor() {
            super(IdentityEqualityComparator.INSTANCE);
        }
    }
    PredictionContext.IdentityHashMap = IdentityHashMap;
    class IdentityEqualityComparator {
        IdentityEqualityComparator() {
            // intentionally empty
        }
        hashCode(obj) {
            return obj.hashCode();
        }
        equals(a, b) {
            return a === b;
        }
    }
    IdentityEqualityComparator.INSTANCE = new IdentityEqualityComparator();
    __decorate([
        Decorators_1.Override
    ], IdentityEqualityComparator.prototype, "hashCode", null);
    __decorate([
        Decorators_1.Override
    ], IdentityEqualityComparator.prototype, "equals", null);
    PredictionContext.IdentityEqualityComparator = IdentityEqualityComparator;
})(PredictionContext = exports.PredictionContext || (exports.PredictionContext = {}));
//# sourceMappingURL=PredictionContext.js.map

/***/ }),

/***/ 1435:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PredictionContextCache = void 0;
// ConvertTo-TS run at 2016-10-04T11:26:35.6390614-07:00
const Array2DHashMap_1 = __webpack_require__(2835);
const Decorators_1 = __webpack_require__(681);
const ObjectEqualityComparator_1 = __webpack_require__(8578);
const PredictionContext_1 = __webpack_require__(1229);
const assert = __webpack_require__(1696);
/** Used to cache {@link PredictionContext} objects. Its used for the shared
 *  context cash associated with contexts in DFA states. This cache
 *  can be used for both lexers and parsers.
 *
 * @author Sam Harwell
 */
class PredictionContextCache {
    constructor(enableCache = true) {
        this.contexts = new Array2DHashMap_1.Array2DHashMap(ObjectEqualityComparator_1.ObjectEqualityComparator.INSTANCE);
        this.childContexts = new Array2DHashMap_1.Array2DHashMap(ObjectEqualityComparator_1.ObjectEqualityComparator.INSTANCE);
        this.joinContexts = new Array2DHashMap_1.Array2DHashMap(ObjectEqualityComparator_1.ObjectEqualityComparator.INSTANCE);
        this.enableCache = enableCache;
    }
    getAsCached(context) {
        if (!this.enableCache) {
            return context;
        }
        let result = this.contexts.get(context);
        if (!result) {
            result = context;
            this.contexts.put(context, context);
        }
        return result;
    }
    getChild(context, invokingState) {
        if (!this.enableCache) {
            return context.getChild(invokingState);
        }
        let operands = new PredictionContextCache.PredictionContextAndInt(context, invokingState);
        let result = this.childContexts.get(operands);
        if (!result) {
            result = context.getChild(invokingState);
            result = this.getAsCached(result);
            this.childContexts.put(operands, result);
        }
        return result;
    }
    join(x, y) {
        if (!this.enableCache) {
            return PredictionContext_1.PredictionContext.join(x, y, this);
        }
        let operands = new PredictionContextCache.IdentityCommutativePredictionContextOperands(x, y);
        let result = this.joinContexts.get(operands);
        if (result) {
            return result;
        }
        result = PredictionContext_1.PredictionContext.join(x, y, this);
        result = this.getAsCached(result);
        this.joinContexts.put(operands, result);
        return result;
    }
}
exports.PredictionContextCache = PredictionContextCache;
PredictionContextCache.UNCACHED = new PredictionContextCache(false);
(function (PredictionContextCache) {
    class PredictionContextAndInt {
        constructor(obj, value) {
            this.obj = obj;
            this.value = value;
        }
        equals(obj) {
            if (!(obj instanceof PredictionContextAndInt)) {
                return false;
            }
            else if (obj === this) {
                return true;
            }
            let other = obj;
            return this.value === other.value
                && (this.obj === other.obj || (this.obj != null && this.obj.equals(other.obj)));
        }
        hashCode() {
            let hashCode = 5;
            hashCode = 7 * hashCode + (this.obj != null ? this.obj.hashCode() : 0);
            hashCode = 7 * hashCode + this.value;
            return hashCode;
        }
    }
    __decorate([
        Decorators_1.Override
    ], PredictionContextAndInt.prototype, "equals", null);
    __decorate([
        Decorators_1.Override
    ], PredictionContextAndInt.prototype, "hashCode", null);
    PredictionContextCache.PredictionContextAndInt = PredictionContextAndInt;
    class IdentityCommutativePredictionContextOperands {
        constructor(x, y) {
            assert(x != null);
            assert(y != null);
            this._x = x;
            this._y = y;
        }
        get x() {
            return this._x;
        }
        get y() {
            return this._y;
        }
        equals(o) {
            if (!(o instanceof IdentityCommutativePredictionContextOperands)) {
                return false;
            }
            else if (this === o) {
                return true;
            }
            let other = o;
            return (this._x === other._x && this._y === other._y) || (this._x === other._y && this._y === other._x);
        }
        hashCode() {
            return this._x.hashCode() ^ this._y.hashCode();
        }
    }
    __decorate([
        Decorators_1.Override
    ], IdentityCommutativePredictionContextOperands.prototype, "equals", null);
    __decorate([
        Decorators_1.Override
    ], IdentityCommutativePredictionContextOperands.prototype, "hashCode", null);
    PredictionContextCache.IdentityCommutativePredictionContextOperands = IdentityCommutativePredictionContextOperands;
})(PredictionContextCache = exports.PredictionContextCache || (exports.PredictionContextCache = {}));
//# sourceMappingURL=PredictionContextCache.js.map

/***/ }),

/***/ 118:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PredictionMode = void 0;
// ConvertTo-TS run at 2016-10-04T11:26:36.2673893-07:00
const Array2DHashMap_1 = __webpack_require__(2835);
const MurmurHash_1 = __webpack_require__(7789);
const Decorators_1 = __webpack_require__(681);
const RuleStopState_1 = __webpack_require__(3776);
/**
 * This enumeration defines the prediction modes available in ANTLR 4 along with
 * utility methods for analyzing configuration sets for conflicts and/or
 * ambiguities.
 */
var PredictionMode;
(function (PredictionMode) {
    /**
     * The SLL(*) prediction mode. This prediction mode ignores the current
     * parser context when making predictions. This is the fastest prediction
     * mode, and provides correct results for many grammars. This prediction
     * mode is more powerful than the prediction mode provided by ANTLR 3, but
     * may result in syntax errors for grammar and input combinations which are
     * not SLL.
     *
     * When using this prediction mode, the parser will either return a correct
     * parse tree (i.e. the same parse tree that would be returned with the
     * {@link #LL} prediction mode), or it will report a syntax error. If a
     * syntax error is encountered when using the {@link #SLL} prediction mode,
     * it may be due to either an actual syntax error in the input or indicate
     * that the particular combination of grammar and input requires the more
     * powerful {@link #LL} prediction abilities to complete successfully.
     *
     * This prediction mode does not provide any guarantees for prediction
     * behavior for syntactically-incorrect inputs.
     */
    PredictionMode[PredictionMode["SLL"] = 0] = "SLL";
    /**
     * The LL(*) prediction mode. This prediction mode allows the current parser
     * context to be used for resolving SLL conflicts that occur during
     * prediction. This is the fastest prediction mode that guarantees correct
     * parse results for all combinations of grammars with syntactically correct
     * inputs.
     *
     * When using this prediction mode, the parser will make correct decisions
     * for all syntactically-correct grammar and input combinations. However, in
     * cases where the grammar is truly ambiguous this prediction mode might not
     * report a precise answer for *exactly which* alternatives are
     * ambiguous.
     *
     * This prediction mode does not provide any guarantees for prediction
     * behavior for syntactically-incorrect inputs.
     */
    PredictionMode[PredictionMode["LL"] = 1] = "LL";
    /**
     * The LL(*) prediction mode with exact ambiguity detection. In addition to
     * the correctness guarantees provided by the {@link #LL} prediction mode,
     * this prediction mode instructs the prediction algorithm to determine the
     * complete and exact set of ambiguous alternatives for every ambiguous
     * decision encountered while parsing.
     *
     * This prediction mode may be used for diagnosing ambiguities during
     * grammar development. Due to the performance overhead of calculating sets
     * of ambiguous alternatives, this prediction mode should be avoided when
     * the exact results are not necessary.
     *
     * This prediction mode does not provide any guarantees for prediction
     * behavior for syntactically-incorrect inputs.
     */
    PredictionMode[PredictionMode["LL_EXACT_AMBIG_DETECTION"] = 2] = "LL_EXACT_AMBIG_DETECTION";
})(PredictionMode = exports.PredictionMode || (exports.PredictionMode = {}));
(function (PredictionMode) {
    /** A Map that uses just the state and the stack context as the key. */
    // NOTE: Base type used to be FlexibleHashMap<ATNConfig, BitSet>
    class AltAndContextMap extends Array2DHashMap_1.Array2DHashMap {
        constructor() {
            super(AltAndContextConfigEqualityComparator.INSTANCE);
        }
    }
    class AltAndContextConfigEqualityComparator {
        AltAndContextConfigEqualityComparator() {
            // intentionally empty
        }
        /**
         * The hash code is only a function of the {@link ATNState#stateNumber}
         * and {@link ATNConfig#context}.
         */
        hashCode(o) {
            let hashCode = MurmurHash_1.MurmurHash.initialize(7);
            hashCode = MurmurHash_1.MurmurHash.update(hashCode, o.state.stateNumber);
            hashCode = MurmurHash_1.MurmurHash.update(hashCode, o.context);
            hashCode = MurmurHash_1.MurmurHash.finish(hashCode, 2);
            return hashCode;
        }
        equals(a, b) {
            if (a === b) {
                return true;
            }
            if (a == null || b == null) {
                return false;
            }
            return a.state.stateNumber === b.state.stateNumber
                && a.context.equals(b.context);
        }
    }
    AltAndContextConfigEqualityComparator.INSTANCE = new AltAndContextConfigEqualityComparator();
    __decorate([
        Decorators_1.Override
    ], AltAndContextConfigEqualityComparator.prototype, "hashCode", null);
    __decorate([
        Decorators_1.Override
    ], AltAndContextConfigEqualityComparator.prototype, "equals", null);
    /**
     * Checks if any configuration in `configs` is in a
     * {@link RuleStopState}. Configurations meeting this condition have reached
     * the end of the decision rule (local context) or end of start rule (full
     * context).
     *
     * @param configs the configuration set to test
     * @returns `true` if any configuration in `configs` is in a
     * {@link RuleStopState}, otherwise `false`
     */
    function hasConfigInRuleStopState(configs) {
        for (let c of configs) {
            if (c.state instanceof RuleStopState_1.RuleStopState) {
                return true;
            }
        }
        return false;
    }
    PredictionMode.hasConfigInRuleStopState = hasConfigInRuleStopState;
    /**
     * Checks if all configurations in `configs` are in a
     * {@link RuleStopState}. Configurations meeting this condition have reached
     * the end of the decision rule (local context) or end of start rule (full
     * context).
     *
     * @param configs the configuration set to test
     * @returns `true` if all configurations in `configs` are in a
     * {@link RuleStopState}, otherwise `false`
     */
    function allConfigsInRuleStopStates(/*@NotNull*/ configs) {
        for (let config of configs) {
            if (!(config.state instanceof RuleStopState_1.RuleStopState)) {
                return false;
            }
        }
        return true;
    }
    PredictionMode.allConfigsInRuleStopStates = allConfigsInRuleStopStates;
})(PredictionMode = exports.PredictionMode || (exports.PredictionMode = {}));
//# sourceMappingURL=PredictionMode.js.map

/***/ }),

/***/ 9696:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
/* provided dependency */ var process = __webpack_require__(4406);

/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ProfilingATNSimulator = void 0;
// ConvertTo-TS run at 2016-10-04T11:26:36.4188352-07:00
const AmbiguityInfo_1 = __webpack_require__(2646);
const ATN_1 = __webpack_require__(8148);
const ATNSimulator_1 = __webpack_require__(3296);
const ContextSensitivityInfo_1 = __webpack_require__(6744);
const DecisionInfo_1 = __webpack_require__(4501);
const ErrorInfo_1 = __webpack_require__(544);
const Decorators_1 = __webpack_require__(681);
const LookaheadEventInfo_1 = __webpack_require__(3604);
const ParserATNSimulator_1 = __webpack_require__(4217);
const PredicateEvalInfo_1 = __webpack_require__(7576);
const SemanticContext_1 = __webpack_require__(8300);
const SimulatorState_1 = __webpack_require__(6965);
/**
 * @since 4.3
 */
class ProfilingATNSimulator extends ParserATNSimulator_1.ParserATNSimulator {
    constructor(parser) {
        super(parser.interpreter.atn, parser);
        this._startIndex = 0;
        this._sllStopIndex = 0;
        this._llStopIndex = 0;
        this.currentDecision = 0;
        /** At the point of LL failover, we record how SLL would resolve the conflict so that
         *  we can determine whether or not a decision / input pair is context-sensitive.
         *  If LL gives a different result than SLL's predicted alternative, we have a
         *  context sensitivity for sure. The converse is not necessarily true, however.
         *  It's possible that after conflict resolution chooses minimum alternatives,
         *  SLL could get the same answer as LL. Regardless of whether or not the result indicates
         *  an ambiguity, it is not treated as a context sensitivity because LL prediction
         *  was not required in order to produce a correct prediction for this decision and input sequence.
         *  It may in fact still be a context sensitivity but we don't know by looking at the
         *  minimum alternatives for the current input.
         */
        this.conflictingAltResolvedBySLL = 0;
        this.optimize_ll1 = false;
        this.reportAmbiguities = true;
        this.numDecisions = this.atn.decisionToState.length;
        this.decisions = [];
        for (let i = 0; i < this.numDecisions; i++) {
            this.decisions.push(new DecisionInfo_1.DecisionInfo(i));
        }
    }
    adaptivePredict(input, decision, outerContext, useContext) {
        if (useContext !== undefined) {
            return super.adaptivePredict(input, decision, outerContext, useContext);
        }
        try {
            this._input = input;
            this._startIndex = input.index;
            // it's possible for SLL to reach a conflict state without consuming any input
            this._sllStopIndex = this._startIndex - 1;
            this._llStopIndex = -1;
            this.currentDecision = decision;
            this.currentState = undefined;
            this.conflictingAltResolvedBySLL = ATN_1.ATN.INVALID_ALT_NUMBER;
            let start = process.hrtime();
            let alt = super.adaptivePredict(input, decision, outerContext);
            let stop = process.hrtime();
            let nanoseconds = (stop[0] - start[0]) * 1000000000;
            if (nanoseconds === 0) {
                nanoseconds = stop[1] - start[1];
            }
            else {
                // Add nanoseconds from start to end of that second, plus start of the end second to end
                nanoseconds += (1000000000 - start[1]) + stop[1];
            }
            this.decisions[decision].timeInPrediction += nanoseconds;
            this.decisions[decision].invocations++;
            let SLL_k = this._sllStopIndex - this._startIndex + 1;
            this.decisions[decision].SLL_TotalLook += SLL_k;
            this.decisions[decision].SLL_MinLook = this.decisions[decision].SLL_MinLook === 0 ? SLL_k : Math.min(this.decisions[decision].SLL_MinLook, SLL_k);
            if (SLL_k > this.decisions[decision].SLL_MaxLook) {
                this.decisions[decision].SLL_MaxLook = SLL_k;
                this.decisions[decision].SLL_MaxLookEvent =
                    new LookaheadEventInfo_1.LookaheadEventInfo(decision, undefined, alt, input, this._startIndex, this._sllStopIndex, false);
            }
            if (this._llStopIndex >= 0) {
                let LL_k = this._llStopIndex - this._startIndex + 1;
                this.decisions[decision].LL_TotalLook += LL_k;
                this.decisions[decision].LL_MinLook = this.decisions[decision].LL_MinLook === 0 ? LL_k : Math.min(this.decisions[decision].LL_MinLook, LL_k);
                if (LL_k > this.decisions[decision].LL_MaxLook) {
                    this.decisions[decision].LL_MaxLook = LL_k;
                    this.decisions[decision].LL_MaxLookEvent =
                        new LookaheadEventInfo_1.LookaheadEventInfo(decision, undefined, alt, input, this._startIndex, this._llStopIndex, true);
                }
            }
            return alt;
        }
        finally {
            this._input = undefined;
            this.currentDecision = -1;
        }
    }
    getStartState(dfa, input, outerContext, useContext) {
        let state = super.getStartState(dfa, input, outerContext, useContext);
        this.currentState = state;
        return state;
    }
    computeStartState(dfa, globalContext, useContext) {
        let state = super.computeStartState(dfa, globalContext, useContext);
        this.currentState = state;
        return state;
    }
    computeReachSet(dfa, previous, t, contextCache) {
        if (this._input === undefined) {
            throw new Error("Invalid state");
        }
        let reachState = super.computeReachSet(dfa, previous, t, contextCache);
        if (reachState == null) {
            // no reach on current lookahead symbol. ERROR.
            this.decisions[this.currentDecision].errors.push(new ErrorInfo_1.ErrorInfo(this.currentDecision, previous, this._input, this._startIndex, this._input.index));
        }
        this.currentState = reachState;
        return reachState;
    }
    getExistingTargetState(previousD, t) {
        if (this.currentState === undefined || this._input === undefined) {
            throw new Error("Invalid state");
        }
        // this method is called after each time the input position advances
        if (this.currentState.useContext) {
            this._llStopIndex = this._input.index;
        }
        else {
            this._sllStopIndex = this._input.index;
        }
        let existingTargetState = super.getExistingTargetState(previousD, t);
        if (existingTargetState != null) {
            // this method is directly called by execDFA; must construct a SimulatorState
            // to represent the current state for this case
            this.currentState = new SimulatorState_1.SimulatorState(this.currentState.outerContext, existingTargetState, this.currentState.useContext, this.currentState.remainingOuterContext);
            if (this.currentState.useContext) {
                this.decisions[this.currentDecision].LL_DFATransitions++;
            }
            else {
                this.decisions[this.currentDecision].SLL_DFATransitions++; // count only if we transition over a DFA state
            }
            if (existingTargetState === ATNSimulator_1.ATNSimulator.ERROR) {
                let state = new SimulatorState_1.SimulatorState(this.currentState.outerContext, previousD, this.currentState.useContext, this.currentState.remainingOuterContext);
                this.decisions[this.currentDecision].errors.push(new ErrorInfo_1.ErrorInfo(this.currentDecision, state, this._input, this._startIndex, this._input.index));
            }
        }
        return existingTargetState;
    }
    computeTargetState(dfa, s, remainingGlobalContext, t, useContext, contextCache) {
        let targetState = super.computeTargetState(dfa, s, remainingGlobalContext, t, useContext, contextCache);
        if (useContext) {
            this.decisions[this.currentDecision].LL_ATNTransitions++;
        }
        else {
            this.decisions[this.currentDecision].SLL_ATNTransitions++;
        }
        return targetState;
    }
    evalSemanticContextImpl(pred, parserCallStack, alt) {
        if (this.currentState === undefined || this._input === undefined) {
            throw new Error("Invalid state");
        }
        let result = super.evalSemanticContextImpl(pred, parserCallStack, alt);
        if (!(pred instanceof SemanticContext_1.SemanticContext.PrecedencePredicate)) {
            let fullContext = this._llStopIndex >= 0;
            let stopIndex = fullContext ? this._llStopIndex : this._sllStopIndex;
            this.decisions[this.currentDecision].predicateEvals.push(new PredicateEvalInfo_1.PredicateEvalInfo(this.currentState, this.currentDecision, this._input, this._startIndex, stopIndex, pred, result, alt));
        }
        return result;
    }
    reportContextSensitivity(dfa, prediction, acceptState, startIndex, stopIndex) {
        if (this._input === undefined) {
            throw new Error("Invalid state");
        }
        if (prediction !== this.conflictingAltResolvedBySLL) {
            this.decisions[this.currentDecision].contextSensitivities.push(new ContextSensitivityInfo_1.ContextSensitivityInfo(this.currentDecision, acceptState, this._input, startIndex, stopIndex));
        }
        super.reportContextSensitivity(dfa, prediction, acceptState, startIndex, stopIndex);
    }
    reportAttemptingFullContext(dfa, conflictingAlts, conflictState, startIndex, stopIndex) {
        if (conflictingAlts != null) {
            this.conflictingAltResolvedBySLL = conflictingAlts.nextSetBit(0);
        }
        else {
            this.conflictingAltResolvedBySLL = conflictState.s0.configs.getRepresentedAlternatives().nextSetBit(0);
        }
        this.decisions[this.currentDecision].LL_Fallback++;
        super.reportAttemptingFullContext(dfa, conflictingAlts, conflictState, startIndex, stopIndex);
    }
    reportAmbiguity(dfa, D, startIndex, stopIndex, exact, ambigAlts, configs) {
        if (this.currentState === undefined || this._input === undefined) {
            throw new Error("Invalid state");
        }
        let prediction;
        if (ambigAlts != null) {
            prediction = ambigAlts.nextSetBit(0);
        }
        else {
            prediction = configs.getRepresentedAlternatives().nextSetBit(0);
        }
        if (this.conflictingAltResolvedBySLL !== ATN_1.ATN.INVALID_ALT_NUMBER && prediction !== this.conflictingAltResolvedBySLL) {
            // Even though this is an ambiguity we are reporting, we can
            // still detect some context sensitivities.  Both SLL and LL
            // are showing a conflict, hence an ambiguity, but if they resolve
            // to different minimum alternatives we have also identified a
            // context sensitivity.
            this.decisions[this.currentDecision].contextSensitivities.push(new ContextSensitivityInfo_1.ContextSensitivityInfo(this.currentDecision, this.currentState, this._input, startIndex, stopIndex));
        }
        this.decisions[this.currentDecision].ambiguities.push(new AmbiguityInfo_1.AmbiguityInfo(this.currentDecision, this.currentState, ambigAlts, this._input, startIndex, stopIndex));
        super.reportAmbiguity(dfa, D, startIndex, stopIndex, exact, ambigAlts, configs);
    }
    // ---------------------------------------------------------------------
    getDecisionInfo() {
        return this.decisions;
    }
    getCurrentState() {
        return this.currentState;
    }
}
__decorate([
    Decorators_1.Override,
    __param(0, Decorators_1.NotNull)
], ProfilingATNSimulator.prototype, "adaptivePredict", null);
__decorate([
    Decorators_1.Override
], ProfilingATNSimulator.prototype, "getStartState", null);
__decorate([
    Decorators_1.Override
], ProfilingATNSimulator.prototype, "computeStartState", null);
__decorate([
    Decorators_1.Override
], ProfilingATNSimulator.prototype, "computeReachSet", null);
__decorate([
    Decorators_1.Override
], ProfilingATNSimulator.prototype, "getExistingTargetState", null);
__decorate([
    Decorators_1.Override
], ProfilingATNSimulator.prototype, "computeTargetState", null);
__decorate([
    Decorators_1.Override
], ProfilingATNSimulator.prototype, "evalSemanticContextImpl", null);
__decorate([
    Decorators_1.Override
], ProfilingATNSimulator.prototype, "reportContextSensitivity", null);
__decorate([
    Decorators_1.Override
], ProfilingATNSimulator.prototype, "reportAttemptingFullContext", null);
__decorate([
    Decorators_1.Override,
    __param(0, Decorators_1.NotNull), __param(5, Decorators_1.NotNull), __param(6, Decorators_1.NotNull)
], ProfilingATNSimulator.prototype, "reportAmbiguity", null);
exports.ProfilingATNSimulator = ProfilingATNSimulator;
//# sourceMappingURL=ProfilingATNSimulator.js.map

/***/ }),

/***/ 1369:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.RangeTransition = void 0;
const IntervalSet_1 = __webpack_require__(5462);
const Decorators_1 = __webpack_require__(681);
const Transition_1 = __webpack_require__(5922);
let RangeTransition = class RangeTransition extends Transition_1.Transition {
    constructor(target, from, to) {
        super(target);
        this.from = from;
        this.to = to;
    }
    get serializationType() {
        return 2 /* RANGE */;
    }
    get label() {
        return IntervalSet_1.IntervalSet.of(this.from, this.to);
    }
    matches(symbol, minVocabSymbol, maxVocabSymbol) {
        return symbol >= this.from && symbol <= this.to;
    }
    toString() {
        return "'" + String.fromCodePoint(this.from) + "'..'" + String.fromCodePoint(this.to) + "'";
    }
};
__decorate([
    Decorators_1.Override
], RangeTransition.prototype, "serializationType", null);
__decorate([
    Decorators_1.Override,
    Decorators_1.NotNull
], RangeTransition.prototype, "label", null);
__decorate([
    Decorators_1.Override
], RangeTransition.prototype, "matches", null);
__decorate([
    Decorators_1.Override,
    Decorators_1.NotNull
], RangeTransition.prototype, "toString", null);
RangeTransition = __decorate([
    __param(0, Decorators_1.NotNull)
], RangeTransition);
exports.RangeTransition = RangeTransition;
//# sourceMappingURL=RangeTransition.js.map

/***/ }),

/***/ 8128:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.RuleStartState = void 0;
// ConvertTo-TS run at 2016-10-04T11:26:36.6806851-07:00
const ATNState_1 = __webpack_require__(1971);
const ATNStateType_1 = __webpack_require__(9602);
const Decorators_1 = __webpack_require__(681);
class RuleStartState extends ATNState_1.ATNState {
    constructor() {
        super(...arguments);
        this.isPrecedenceRule = false;
        this.leftFactored = false;
    }
    get stateType() {
        return ATNStateType_1.ATNStateType.RULE_START;
    }
}
__decorate([
    Decorators_1.Override
], RuleStartState.prototype, "stateType", null);
exports.RuleStartState = RuleStartState;
//# sourceMappingURL=RuleStartState.js.map

/***/ }),

/***/ 3776:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.RuleStopState = void 0;
// ConvertTo-TS run at 2016-10-04T11:26:36.7513856-07:00
const ATNState_1 = __webpack_require__(1971);
const ATNStateType_1 = __webpack_require__(9602);
const Decorators_1 = __webpack_require__(681);
/** The last node in the ATN for a rule, unless that rule is the start symbol.
 *  In that case, there is one transition to EOF. Later, we might encode
 *  references to all calls to this rule to compute FOLLOW sets for
 *  error handling.
 */
class RuleStopState extends ATNState_1.ATNState {
    get nonStopStateNumber() {
        return -1;
    }
    get stateType() {
        return ATNStateType_1.ATNStateType.RULE_STOP;
    }
}
__decorate([
    Decorators_1.Override
], RuleStopState.prototype, "nonStopStateNumber", null);
__decorate([
    Decorators_1.Override
], RuleStopState.prototype, "stateType", null);
exports.RuleStopState = RuleStopState;
//# sourceMappingURL=RuleStopState.js.map

/***/ }),

/***/ 5239:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.RuleTransition = void 0;
const Decorators_1 = __webpack_require__(681);
const Transition_1 = __webpack_require__(5922);
/** */
let RuleTransition = class RuleTransition extends Transition_1.Transition {
    constructor(ruleStart, ruleIndex, precedence, followState) {
        super(ruleStart);
        this.tailCall = false;
        this.optimizedTailCall = false;
        this.ruleIndex = ruleIndex;
        this.precedence = precedence;
        this.followState = followState;
    }
    get serializationType() {
        return 3 /* RULE */;
    }
    get isEpsilon() {
        return true;
    }
    matches(symbol, minVocabSymbol, maxVocabSymbol) {
        return false;
    }
};
__decorate([
    Decorators_1.NotNull
], RuleTransition.prototype, "followState", void 0);
__decorate([
    Decorators_1.Override
], RuleTransition.prototype, "serializationType", null);
__decorate([
    Decorators_1.Override
], RuleTransition.prototype, "isEpsilon", null);
__decorate([
    Decorators_1.Override
], RuleTransition.prototype, "matches", null);
RuleTransition = __decorate([
    __param(0, Decorators_1.NotNull), __param(3, Decorators_1.NotNull)
], RuleTransition);
exports.RuleTransition = RuleTransition;
//# sourceMappingURL=RuleTransition.js.map

/***/ }),

/***/ 8300:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.SemanticContext = void 0;
// ConvertTo-TS run at 2016-10-04T11:26:36.9521478-07:00
const Array2DHashSet_1 = __webpack_require__(5265);
const ArrayEqualityComparator_1 = __webpack_require__(4339);
const MurmurHash_1 = __webpack_require__(7789);
const Decorators_1 = __webpack_require__(681);
const ObjectEqualityComparator_1 = __webpack_require__(8578);
const Utils = __webpack_require__(3070);
function max(items) {
    let result;
    for (let current of items) {
        if (result === undefined) {
            result = current;
            continue;
        }
        let comparison = result.compareTo(current);
        if (comparison < 0) {
            result = current;
        }
    }
    return result;
}
function min(items) {
    let result;
    for (let current of items) {
        if (result === undefined) {
            result = current;
            continue;
        }
        let comparison = result.compareTo(current);
        if (comparison > 0) {
            result = current;
        }
    }
    return result;
}
/** A tree structure used to record the semantic context in which
 *  an ATN configuration is valid.  It's either a single predicate,
 *  a conjunction `p1&&p2`, or a sum of products `p1||p2`.
 *
 *  I have scoped the {@link AND}, {@link OR}, and {@link Predicate} subclasses of
 *  {@link SemanticContext} within the scope of this outer class.
 */
class SemanticContext {
    /**
     * The default {@link SemanticContext}, which is semantically equivalent to
     * a predicate of the form `{true}?`.
     */
    static get NONE() {
        if (SemanticContext._NONE === undefined) {
            SemanticContext._NONE = new SemanticContext.Predicate();
        }
        return SemanticContext._NONE;
    }
    /**
     * Evaluate the precedence predicates for the context and reduce the result.
     *
     * @param parser The parser instance.
     * @param parserCallStack
     * @returns The simplified semantic context after precedence predicates are
     * evaluated, which will be one of the following values.
     *
     * * {@link #NONE}: if the predicate simplifies to `true` after
     *   precedence predicates are evaluated.
     * * `undefined`: if the predicate simplifies to `false` after
     *   precedence predicates are evaluated.
     * * `this`: if the semantic context is not changed as a result of
     *   precedence predicate evaluation.
     * * A non-`undefined` {@link SemanticContext}: the new simplified
     *   semantic context after precedence predicates are evaluated.
     */
    evalPrecedence(parser, parserCallStack) {
        return this;
    }
    static and(a, b) {
        if (!a || a === SemanticContext.NONE) {
            return b;
        }
        if (b === SemanticContext.NONE) {
            return a;
        }
        let result = new SemanticContext.AND(a, b);
        if (result.opnds.length === 1) {
            return result.opnds[0];
        }
        return result;
    }
    /**
     *
     *  @see ParserATNSimulator#getPredsForAmbigAlts
     */
    static or(a, b) {
        if (!a) {
            return b;
        }
        if (a === SemanticContext.NONE || b === SemanticContext.NONE) {
            return SemanticContext.NONE;
        }
        let result = new SemanticContext.OR(a, b);
        if (result.opnds.length === 1) {
            return result.opnds[0];
        }
        return result;
    }
}
exports.SemanticContext = SemanticContext;
(function (SemanticContext) {
    /**
     * This random 30-bit prime represents the value of `AND.class.hashCode()`.
     */
    const AND_HASHCODE = 40363613;
    /**
     * This random 30-bit prime represents the value of `OR.class.hashCode()`.
     */
    const OR_HASHCODE = 486279973;
    function filterPrecedencePredicates(collection) {
        let result = [];
        for (let i = 0; i < collection.length; i++) {
            let context = collection[i];
            if (context instanceof SemanticContext.PrecedencePredicate) {
                result.push(context);
                // Remove the item from 'collection' and move i back so we look at the same index again
                collection.splice(i, 1);
                i--;
            }
        }
        return result;
    }
    class Predicate extends SemanticContext {
        constructor(ruleIndex = -1, predIndex = -1, isCtxDependent = false) {
            super();
            this.ruleIndex = ruleIndex;
            this.predIndex = predIndex;
            this.isCtxDependent = isCtxDependent;
        }
        eval(parser, parserCallStack) {
            let localctx = this.isCtxDependent ? parserCallStack : undefined;
            return parser.sempred(localctx, this.ruleIndex, this.predIndex);
        }
        hashCode() {
            let hashCode = MurmurHash_1.MurmurHash.initialize();
            hashCode = MurmurHash_1.MurmurHash.update(hashCode, this.ruleIndex);
            hashCode = MurmurHash_1.MurmurHash.update(hashCode, this.predIndex);
            hashCode = MurmurHash_1.MurmurHash.update(hashCode, this.isCtxDependent ? 1 : 0);
            hashCode = MurmurHash_1.MurmurHash.finish(hashCode, 3);
            return hashCode;
        }
        equals(obj) {
            if (!(obj instanceof Predicate)) {
                return false;
            }
            if (this === obj) {
                return true;
            }
            return this.ruleIndex === obj.ruleIndex &&
                this.predIndex === obj.predIndex &&
                this.isCtxDependent === obj.isCtxDependent;
        }
        toString() {
            return "{" + this.ruleIndex + ":" + this.predIndex + "}?";
        }
    }
    __decorate([
        Decorators_1.Override
    ], Predicate.prototype, "eval", null);
    __decorate([
        Decorators_1.Override
    ], Predicate.prototype, "hashCode", null);
    __decorate([
        Decorators_1.Override
    ], Predicate.prototype, "equals", null);
    __decorate([
        Decorators_1.Override
    ], Predicate.prototype, "toString", null);
    SemanticContext.Predicate = Predicate;
    class PrecedencePredicate extends SemanticContext {
        constructor(precedence) {
            super();
            this.precedence = precedence;
        }
        eval(parser, parserCallStack) {
            return parser.precpred(parserCallStack, this.precedence);
        }
        evalPrecedence(parser, parserCallStack) {
            if (parser.precpred(parserCallStack, this.precedence)) {
                return SemanticContext.NONE;
            }
            else {
                return undefined;
            }
        }
        compareTo(o) {
            return this.precedence - o.precedence;
        }
        hashCode() {
            let hashCode = 1;
            hashCode = 31 * hashCode + this.precedence;
            return hashCode;
        }
        equals(obj) {
            if (!(obj instanceof PrecedencePredicate)) {
                return false;
            }
            if (this === obj) {
                return true;
            }
            return this.precedence === obj.precedence;
        }
        toString() {
            return "{" + this.precedence + ">=prec}?";
        }
    }
    __decorate([
        Decorators_1.Override
    ], PrecedencePredicate.prototype, "eval", null);
    __decorate([
        Decorators_1.Override
    ], PrecedencePredicate.prototype, "evalPrecedence", null);
    __decorate([
        Decorators_1.Override
    ], PrecedencePredicate.prototype, "compareTo", null);
    __decorate([
        Decorators_1.Override
    ], PrecedencePredicate.prototype, "hashCode", null);
    __decorate([
        Decorators_1.Override
    ], PrecedencePredicate.prototype, "equals", null);
    __decorate([
        Decorators_1.Override
    ], PrecedencePredicate.prototype, "toString", null);
    SemanticContext.PrecedencePredicate = PrecedencePredicate;
    /**
     * This is the base class for semantic context "operators", which operate on
     * a collection of semantic context "operands".
     *
     * @since 4.3
     */
    class Operator extends SemanticContext {
    }
    SemanticContext.Operator = Operator;
    /**
     * A semantic context which is true whenever none of the contained contexts
     * is false.
     */
    let AND = class AND extends Operator {
        constructor(a, b) {
            super();
            let operands = new Array2DHashSet_1.Array2DHashSet(ObjectEqualityComparator_1.ObjectEqualityComparator.INSTANCE);
            if (a instanceof AND) {
                operands.addAll(a.opnds);
            }
            else {
                operands.add(a);
            }
            if (b instanceof AND) {
                operands.addAll(b.opnds);
            }
            else {
                operands.add(b);
            }
            this.opnds = operands.toArray();
            let precedencePredicates = filterPrecedencePredicates(this.opnds);
            // interested in the transition with the lowest precedence
            let reduced = min(precedencePredicates);
            if (reduced) {
                this.opnds.push(reduced);
            }
        }
        get operands() {
            return this.opnds;
        }
        equals(obj) {
            if (this === obj) {
                return true;
            }
            if (!(obj instanceof AND)) {
                return false;
            }
            return ArrayEqualityComparator_1.ArrayEqualityComparator.INSTANCE.equals(this.opnds, obj.opnds);
        }
        hashCode() {
            return MurmurHash_1.MurmurHash.hashCode(this.opnds, AND_HASHCODE);
        }
        /**
         * {@inheritDoc}
         *
         * The evaluation of predicates by this context is short-circuiting, but
         * unordered.
         */
        eval(parser, parserCallStack) {
            for (let opnd of this.opnds) {
                if (!opnd.eval(parser, parserCallStack)) {
                    return false;
                }
            }
            return true;
        }
        evalPrecedence(parser, parserCallStack) {
            let differs = false;
            let operands = [];
            for (let context of this.opnds) {
                let evaluated = context.evalPrecedence(parser, parserCallStack);
                differs = differs || (evaluated !== context);
                if (evaluated == null) {
                    // The AND context is false if any element is false
                    return undefined;
                }
                else if (evaluated !== SemanticContext.NONE) {
                    // Reduce the result by skipping true elements
                    operands.push(evaluated);
                }
            }
            if (!differs) {
                return this;
            }
            if (operands.length === 0) {
                // all elements were true, so the AND context is true
                return SemanticContext.NONE;
            }
            let result = operands[0];
            for (let i = 1; i < operands.length; i++) {
                result = SemanticContext.and(result, operands[i]);
            }
            return result;
        }
        toString() {
            return Utils.join(this.opnds, "&&");
        }
    };
    __decorate([
        Decorators_1.Override
    ], AND.prototype, "operands", null);
    __decorate([
        Decorators_1.Override
    ], AND.prototype, "equals", null);
    __decorate([
        Decorators_1.Override
    ], AND.prototype, "hashCode", null);
    __decorate([
        Decorators_1.Override
    ], AND.prototype, "eval", null);
    __decorate([
        Decorators_1.Override
    ], AND.prototype, "evalPrecedence", null);
    __decorate([
        Decorators_1.Override
    ], AND.prototype, "toString", null);
    AND = __decorate([
        __param(0, Decorators_1.NotNull), __param(1, Decorators_1.NotNull)
    ], AND);
    SemanticContext.AND = AND;
    /**
     * A semantic context which is true whenever at least one of the contained
     * contexts is true.
     */
    let OR = class OR extends Operator {
        constructor(a, b) {
            super();
            let operands = new Array2DHashSet_1.Array2DHashSet(ObjectEqualityComparator_1.ObjectEqualityComparator.INSTANCE);
            if (a instanceof OR) {
                operands.addAll(a.opnds);
            }
            else {
                operands.add(a);
            }
            if (b instanceof OR) {
                operands.addAll(b.opnds);
            }
            else {
                operands.add(b);
            }
            this.opnds = operands.toArray();
            let precedencePredicates = filterPrecedencePredicates(this.opnds);
            // interested in the transition with the highest precedence
            let reduced = max(precedencePredicates);
            if (reduced) {
                this.opnds.push(reduced);
            }
        }
        get operands() {
            return this.opnds;
        }
        equals(obj) {
            if (this === obj) {
                return true;
            }
            if (!(obj instanceof OR)) {
                return false;
            }
            return ArrayEqualityComparator_1.ArrayEqualityComparator.INSTANCE.equals(this.opnds, obj.opnds);
        }
        hashCode() {
            return MurmurHash_1.MurmurHash.hashCode(this.opnds, OR_HASHCODE);
        }
        /**
         * {@inheritDoc}
         *
         * The evaluation of predicates by this context is short-circuiting, but
         * unordered.
         */
        eval(parser, parserCallStack) {
            for (let opnd of this.opnds) {
                if (opnd.eval(parser, parserCallStack)) {
                    return true;
                }
            }
            return false;
        }
        evalPrecedence(parser, parserCallStack) {
            let differs = false;
            let operands = [];
            for (let context of this.opnds) {
                let evaluated = context.evalPrecedence(parser, parserCallStack);
                differs = differs || (evaluated !== context);
                if (evaluated === SemanticContext.NONE) {
                    // The OR context is true if any element is true
                    return SemanticContext.NONE;
                }
                else if (evaluated) {
                    // Reduce the result by skipping false elements
                    operands.push(evaluated);
                }
            }
            if (!differs) {
                return this;
            }
            if (operands.length === 0) {
                // all elements were false, so the OR context is false
                return undefined;
            }
            let result = operands[0];
            for (let i = 1; i < operands.length; i++) {
                result = SemanticContext.or(result, operands[i]);
            }
            return result;
        }
        toString() {
            return Utils.join(this.opnds, "||");
        }
    };
    __decorate([
        Decorators_1.Override
    ], OR.prototype, "operands", null);
    __decorate([
        Decorators_1.Override
    ], OR.prototype, "equals", null);
    __decorate([
        Decorators_1.Override
    ], OR.prototype, "hashCode", null);
    __decorate([
        Decorators_1.Override
    ], OR.prototype, "eval", null);
    __decorate([
        Decorators_1.Override
    ], OR.prototype, "evalPrecedence", null);
    __decorate([
        Decorators_1.Override
    ], OR.prototype, "toString", null);
    OR = __decorate([
        __param(0, Decorators_1.NotNull), __param(1, Decorators_1.NotNull)
    ], OR);
    SemanticContext.OR = OR;
})(SemanticContext = exports.SemanticContext || (exports.SemanticContext = {}));
//# sourceMappingURL=SemanticContext.js.map

/***/ }),

/***/ 4442:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.SetTransition = void 0;
const IntervalSet_1 = __webpack_require__(5462);
const Decorators_1 = __webpack_require__(681);
const Token_1 = __webpack_require__(8999);
const Transition_1 = __webpack_require__(5922);
/** A transition containing a set of values. */
let SetTransition = class SetTransition extends Transition_1.Transition {
    // TODO (sam): should we really allow undefined here?
    constructor(target, set) {
        super(target);
        if (set == null) {
            set = IntervalSet_1.IntervalSet.of(Token_1.Token.INVALID_TYPE);
        }
        this.set = set;
    }
    get serializationType() {
        return 7 /* SET */;
    }
    get label() {
        return this.set;
    }
    matches(symbol, minVocabSymbol, maxVocabSymbol) {
        return this.set.contains(symbol);
    }
    toString() {
        return this.set.toString();
    }
};
__decorate([
    Decorators_1.NotNull
], SetTransition.prototype, "set", void 0);
__decorate([
    Decorators_1.Override
], SetTransition.prototype, "serializationType", null);
__decorate([
    Decorators_1.Override,
    Decorators_1.NotNull
], SetTransition.prototype, "label", null);
__decorate([
    Decorators_1.Override
], SetTransition.prototype, "matches", null);
__decorate([
    Decorators_1.Override,
    Decorators_1.NotNull
], SetTransition.prototype, "toString", null);
SetTransition = __decorate([
    __param(0, Decorators_1.NotNull), __param(1, Decorators_1.Nullable)
], SetTransition);
exports.SetTransition = SetTransition;
//# sourceMappingURL=SetTransition.js.map

/***/ }),

/***/ 6965:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.SimulatorState = void 0;
const Decorators_1 = __webpack_require__(681);
const ParserRuleContext_1 = __webpack_require__(9248);
/**
 *
 * @author Sam Harwell
 */
let SimulatorState = class SimulatorState {
    constructor(outerContext, s0, useContext, remainingOuterContext) {
        this.outerContext = outerContext != null ? outerContext : ParserRuleContext_1.ParserRuleContext.emptyContext();
        this.s0 = s0;
        this.useContext = useContext;
        this.remainingOuterContext = remainingOuterContext;
    }
};
SimulatorState = __decorate([
    __param(1, Decorators_1.NotNull)
], SimulatorState);
exports.SimulatorState = SimulatorState;
//# sourceMappingURL=SimulatorState.js.map

/***/ }),

/***/ 9678:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.StarBlockStartState = void 0;
const ATNStateType_1 = __webpack_require__(9602);
const BlockStartState_1 = __webpack_require__(9954);
const Decorators_1 = __webpack_require__(681);
/** The block that begins a closure loop. */
class StarBlockStartState extends BlockStartState_1.BlockStartState {
    get stateType() {
        return ATNStateType_1.ATNStateType.STAR_BLOCK_START;
    }
}
__decorate([
    Decorators_1.Override
], StarBlockStartState.prototype, "stateType", null);
exports.StarBlockStartState = StarBlockStartState;
//# sourceMappingURL=StarBlockStartState.js.map

/***/ }),

/***/ 4816:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.StarLoopEntryState = void 0;
// ConvertTo-TS run at 2016-10-04T11:26:37.7099201-07:00
const ATNStateType_1 = __webpack_require__(9602);
const BitSet_1 = __webpack_require__(3300);
const DecisionState_1 = __webpack_require__(4993);
const Decorators_1 = __webpack_require__(681);
class StarLoopEntryState extends DecisionState_1.DecisionState {
    constructor() {
        super(...arguments);
        /**
         * Indicates whether this state can benefit from a precedence DFA during SLL
         * decision making.
         *
         * This is a computed property that is calculated during ATN deserialization
         * and stored for use in {@link ParserATNSimulator} and
         * {@link ParserInterpreter}.
         *
         * @see `DFA.isPrecedenceDfa`
         */
        this.precedenceRuleDecision = false;
        /**
         * For precedence decisions, this set marks states *S* which have all
         * of the following characteristics:
         *
         * * One or more invocation sites of the current rule returns to
         *   *S*.
         * * The closure from *S* includes the current decision without
         *   passing through any rule invocations or stepping out of the current
         *   rule.
         *
         * This field is not used when {@link #precedenceRuleDecision} is
         * `false`.
         */
        this.precedenceLoopbackStates = new BitSet_1.BitSet();
    }
    get stateType() {
        return ATNStateType_1.ATNStateType.STAR_LOOP_ENTRY;
    }
}
__decorate([
    Decorators_1.Override
], StarLoopEntryState.prototype, "stateType", null);
exports.StarLoopEntryState = StarLoopEntryState;
//# sourceMappingURL=StarLoopEntryState.js.map

/***/ }),

/***/ 4542:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.StarLoopbackState = void 0;
// ConvertTo-TS run at 2016-10-04T11:26:37.6368726-07:00
const ATNState_1 = __webpack_require__(1971);
const ATNStateType_1 = __webpack_require__(9602);
const Decorators_1 = __webpack_require__(681);
class StarLoopbackState extends ATNState_1.ATNState {
    get loopEntryState() {
        return this.transition(0).target;
    }
    get stateType() {
        return ATNStateType_1.ATNStateType.STAR_LOOP_BACK;
    }
}
__decorate([
    Decorators_1.Override
], StarLoopbackState.prototype, "stateType", null);
exports.StarLoopbackState = StarLoopbackState;
//# sourceMappingURL=StarLoopbackState.js.map

/***/ }),

/***/ 3998:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.TokensStartState = void 0;
// ConvertTo-TS run at 2016-10-04T11:26:37.7814046-07:00
const ATNStateType_1 = __webpack_require__(9602);
const DecisionState_1 = __webpack_require__(4993);
const Decorators_1 = __webpack_require__(681);
/** The Tokens rule start state linking to each lexer rule start state */
class TokensStartState extends DecisionState_1.DecisionState {
    get stateType() {
        return ATNStateType_1.ATNStateType.TOKEN_START;
    }
}
__decorate([
    Decorators_1.Override
], TokensStartState.prototype, "stateType", null);
exports.TokensStartState = TokensStartState;
//# sourceMappingURL=TokensStartState.js.map

/***/ }),

/***/ 5922:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Transition = void 0;
const Decorators_1 = __webpack_require__(681);
/** An ATN transition between any two ATN states.  Subclasses define
 *  atom, set, epsilon, action, predicate, rule transitions.
 *
 *  This is a one way link.  It emanates from a state (usually via a list of
 *  transitions) and has a target state.
 *
 *  Since we never have to change the ATN transitions once we construct it,
 *  we can fix these transitions as specific classes. The DFA transitions
 *  on the other hand need to update the labels as it adds transitions to
 *  the states. We'll use the term Edge for the DFA to distinguish them from
 *  ATN transitions.
 */
let Transition = class Transition {
    constructor(target) {
        if (target == null) {
            throw new Error("target cannot be null.");
        }
        this.target = target;
    }
    /**
     * Determines if the transition is an "epsilon" transition.
     *
     * The default implementation returns `false`.
     *
     * @returns `true` if traversing this transition in the ATN does not
     * consume an input symbol; otherwise, `false` if traversing this
     * transition consumes (matches) an input symbol.
     */
    get isEpsilon() {
        return false;
    }
    get label() {
        return undefined;
    }
};
Transition.serializationNames = [
    "INVALID",
    "EPSILON",
    "RANGE",
    "RULE",
    "PREDICATE",
    "ATOM",
    "ACTION",
    "SET",
    "NOT_SET",
    "WILDCARD",
    "PRECEDENCE",
];
__decorate([
    Decorators_1.NotNull
], Transition.prototype, "target", void 0);
Transition = __decorate([
    __param(0, Decorators_1.NotNull)
], Transition);
exports.Transition = Transition;
//# sourceMappingURL=Transition.js.map

/***/ }),

/***/ 9417:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.TransitionType = void 0;
// ConvertTo-TS run at 2016-10-04T11:26:37.8530496-07:00
var TransitionType;
(function (TransitionType) {
    // constants for serialization
    TransitionType[TransitionType["EPSILON"] = 1] = "EPSILON";
    TransitionType[TransitionType["RANGE"] = 2] = "RANGE";
    TransitionType[TransitionType["RULE"] = 3] = "RULE";
    TransitionType[TransitionType["PREDICATE"] = 4] = "PREDICATE";
    TransitionType[TransitionType["ATOM"] = 5] = "ATOM";
    TransitionType[TransitionType["ACTION"] = 6] = "ACTION";
    TransitionType[TransitionType["SET"] = 7] = "SET";
    TransitionType[TransitionType["NOT_SET"] = 8] = "NOT_SET";
    TransitionType[TransitionType["WILDCARD"] = 9] = "WILDCARD";
    TransitionType[TransitionType["PRECEDENCE"] = 10] = "PRECEDENCE";
})(TransitionType = exports.TransitionType || (exports.TransitionType = {}));
//# sourceMappingURL=TransitionType.js.map

/***/ }),

/***/ 401:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.WildcardTransition = void 0;
const Decorators_1 = __webpack_require__(681);
const Transition_1 = __webpack_require__(5922);
let WildcardTransition = class WildcardTransition extends Transition_1.Transition {
    constructor(target) {
        super(target);
    }
    get serializationType() {
        return 9 /* WILDCARD */;
    }
    matches(symbol, minVocabSymbol, maxVocabSymbol) {
        return symbol >= minVocabSymbol && symbol <= maxVocabSymbol;
    }
    toString() {
        return ".";
    }
};
__decorate([
    Decorators_1.Override
], WildcardTransition.prototype, "serializationType", null);
__decorate([
    Decorators_1.Override
], WildcardTransition.prototype, "matches", null);
__decorate([
    Decorators_1.Override,
    Decorators_1.NotNull
], WildcardTransition.prototype, "toString", null);
WildcardTransition = __decorate([
    __param(0, Decorators_1.NotNull)
], WildcardTransition);
exports.WildcardTransition = WildcardTransition;
//# sourceMappingURL=WildcardTransition.js.map

/***/ }),

/***/ 357:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
__exportStar(__webpack_require__(8356), exports);
__exportStar(__webpack_require__(7766), exports);
__exportStar(__webpack_require__(2646), exports);
__exportStar(__webpack_require__(8148), exports);
__exportStar(__webpack_require__(735), exports);
__exportStar(__webpack_require__(256), exports);
__exportStar(__webpack_require__(4258), exports);
__exportStar(__webpack_require__(6349), exports);
// export * from "./ATNSerializer";
__exportStar(__webpack_require__(3296), exports);
__exportStar(__webpack_require__(1971), exports);
__exportStar(__webpack_require__(9602), exports);
__exportStar(__webpack_require__(3904), exports);
__exportStar(__webpack_require__(981), exports);
__exportStar(__webpack_require__(6193), exports);
__exportStar(__webpack_require__(4546), exports);
__exportStar(__webpack_require__(3328), exports);
__exportStar(__webpack_require__(9954), exports);
__exportStar(__webpack_require__(4482), exports);
__exportStar(__webpack_require__(977), exports);
__exportStar(__webpack_require__(6744), exports);
__exportStar(__webpack_require__(1548), exports);
__exportStar(__webpack_require__(4501), exports);
__exportStar(__webpack_require__(4993), exports);
__exportStar(__webpack_require__(7973), exports);
__exportStar(__webpack_require__(544), exports);
__exportStar(__webpack_require__(7678), exports);
__exportStar(__webpack_require__(137), exports);
__exportStar(__webpack_require__(44), exports);
__exportStar(__webpack_require__(8136), exports);
__exportStar(__webpack_require__(9796), exports);
__exportStar(__webpack_require__(2247), exports);
__exportStar(__webpack_require__(4743), exports);
__exportStar(__webpack_require__(737), exports);
__exportStar(__webpack_require__(6452), exports);
__exportStar(__webpack_require__(5974), exports);
__exportStar(__webpack_require__(1349), exports);
__exportStar(__webpack_require__(38), exports);
__exportStar(__webpack_require__(8680), exports);
__exportStar(__webpack_require__(4006), exports);
__exportStar(__webpack_require__(6181), exports);
__exportStar(__webpack_require__(3604), exports);
__exportStar(__webpack_require__(29), exports);
__exportStar(__webpack_require__(845), exports);
__exportStar(__webpack_require__(4235), exports);
__exportStar(__webpack_require__(8180), exports);
__exportStar(__webpack_require__(4217), exports);
__exportStar(__webpack_require__(9815), exports);
__exportStar(__webpack_require__(1232), exports);
__exportStar(__webpack_require__(8889), exports);
__exportStar(__webpack_require__(7576), exports);
__exportStar(__webpack_require__(1290), exports);
__exportStar(__webpack_require__(1229), exports);
__exportStar(__webpack_require__(1435), exports);
__exportStar(__webpack_require__(118), exports);
__exportStar(__webpack_require__(9696), exports);
__exportStar(__webpack_require__(1369), exports);
__exportStar(__webpack_require__(8128), exports);
__exportStar(__webpack_require__(3776), exports);
__exportStar(__webpack_require__(5239), exports);
__exportStar(__webpack_require__(8300), exports);
__exportStar(__webpack_require__(4442), exports);
__exportStar(__webpack_require__(6965), exports);
__exportStar(__webpack_require__(9678), exports);
__exportStar(__webpack_require__(4542), exports);
__exportStar(__webpack_require__(4816), exports);
__exportStar(__webpack_require__(3998), exports);
__exportStar(__webpack_require__(5922), exports);
__exportStar(__webpack_require__(9417), exports);
__exportStar(__webpack_require__(401), exports);
//# sourceMappingURL=index.js.map

/***/ }),

/***/ 1431:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AcceptStateInfo = void 0;
/**
 * Stores information about a {@link DFAState} which is an accept state under
 * some condition. Certain settings, such as
 * {@link ParserATNSimulator#getPredictionMode()}, may be used in addition to
 * this information to determine whether or not a particular state is an accept
 * state.
 *
 * @author Sam Harwell
 */
class AcceptStateInfo {
    constructor(prediction, lexerActionExecutor) {
        this._prediction = prediction;
        this._lexerActionExecutor = lexerActionExecutor;
    }
    /**
     * Gets the prediction made by this accept state. Note that this value
     * assumes the predicates, if any, in the {@link DFAState} evaluate to
     * `true`. If predicate evaluation is enabled, the final prediction of
     * the accept state will be determined by the result of predicate
     * evaluation.
     */
    get prediction() {
        return this._prediction;
    }
    /**
     * Gets the {@link LexerActionExecutor} which can be used to execute actions
     * and/or commands after the lexer matches a token.
     */
    get lexerActionExecutor() {
        return this._lexerActionExecutor;
    }
}
exports.AcceptStateInfo = AcceptStateInfo;
//# sourceMappingURL=AcceptStateInfo.js.map

/***/ }),

/***/ 1707:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DFA = void 0;
// ConvertTo-TS run at 2016-10-04T11:26:38.3567094-07:00
const Array2DHashSet_1 = __webpack_require__(5265);
const ATNConfigSet_1 = __webpack_require__(256);
const DFASerializer_1 = __webpack_require__(4014);
const DFAState_1 = __webpack_require__(4981);
const LexerDFASerializer_1 = __webpack_require__(432);
const Decorators_1 = __webpack_require__(681);
const ObjectEqualityComparator_1 = __webpack_require__(8578);
const StarLoopEntryState_1 = __webpack_require__(4816);
const VocabularyImpl_1 = __webpack_require__(1434);
let DFA = class DFA {
    constructor(atnStartState, decision = 0) {
        /**
         * A set of all states in the `DFA`.
         *
         * Note that this collection of states holds the DFA states for both SLL and LL prediction. Only the start state
         * needs to be differentiated for these cases, which is tracked by the `s0` and `s0full` fields.
         */
        this.states = new Array2DHashSet_1.Array2DHashSet(ObjectEqualityComparator_1.ObjectEqualityComparator.INSTANCE);
        this.nextStateNumber = 0;
        if (!atnStartState.atn) {
            throw new Error("The ATNState must be associated with an ATN");
        }
        this.atnStartState = atnStartState;
        this.atn = atnStartState.atn;
        this.decision = decision;
        // Precedence DFAs are associated with the special precedence decision created for left-recursive rules which
        // evaluate their alternatives using a precedence hierarchy. When such a decision is encountered, we mark this
        // DFA instance as a precedence DFA and initialize the initial states s0 and s0full to special DFAState
        // instances which use outgoing edges to link to the actual start state used for each precedence level.
        let isPrecedenceDfa = false;
        if (atnStartState instanceof StarLoopEntryState_1.StarLoopEntryState) {
            if (atnStartState.precedenceRuleDecision) {
                isPrecedenceDfa = true;
                this.s0 = new DFAState_1.DFAState(new ATNConfigSet_1.ATNConfigSet());
                this.s0full = new DFAState_1.DFAState(new ATNConfigSet_1.ATNConfigSet());
            }
        }
        this.precedenceDfa = isPrecedenceDfa;
    }
    /**
     * Gets whether this DFA is a precedence DFA. Precedence DFAs use a special
     * start state {@link #s0} which is not stored in {@link #states}. The
     * {@link DFAState#edges} array for this start state contains outgoing edges
     * supplying individual start states corresponding to specific precedence
     * values.
     *
     * @returns `true` if this is a precedence DFA; otherwise,
     * `false`.
     * @see Parser.precedence
     */
    get isPrecedenceDfa() {
        return this.precedenceDfa;
    }
    /**
     * Get the start state for a specific precedence value.
     *
     * @param precedence The current precedence.
     * @returns The start state corresponding to the specified precedence, or
     * `undefined` if no start state exists for the specified precedence.
     *
     * @ if this is not a precedence DFA.
     * @see `isPrecedenceDfa`
     */
    getPrecedenceStartState(precedence, fullContext) {
        if (!this.isPrecedenceDfa) {
            throw new Error("Only precedence DFAs may contain a precedence start state.");
        }
        // s0 and s0full are never null for a precedence DFA
        if (fullContext) {
            return this.s0full.getTarget(precedence);
        }
        else {
            return this.s0.getTarget(precedence);
        }
    }
    /**
     * Set the start state for a specific precedence value.
     *
     * @param precedence The current precedence.
     * @param startState The start state corresponding to the specified
     * precedence.
     *
     * @ if this is not a precedence DFA.
     * @see `isPrecedenceDfa`
     */
    setPrecedenceStartState(precedence, fullContext, startState) {
        if (!this.isPrecedenceDfa) {
            throw new Error("Only precedence DFAs may contain a precedence start state.");
        }
        if (precedence < 0) {
            return;
        }
        if (fullContext) {
            // s0full is never null for a precedence DFA
            this.s0full.setTarget(precedence, startState);
        }
        else {
            // s0 is never null for a precedence DFA
            this.s0.setTarget(precedence, startState);
        }
    }
    get isEmpty() {
        if (this.isPrecedenceDfa) {
            // s0 and s0full are never null for a precedence DFA
            return this.s0.getEdgeMap().size === 0 && this.s0full.getEdgeMap().size === 0;
        }
        return this.s0 == null && this.s0full == null;
    }
    get isContextSensitive() {
        if (this.isPrecedenceDfa) {
            // s0full is never null for a precedence DFA
            return this.s0full.getEdgeMap().size > 0;
        }
        return this.s0full != null;
    }
    addState(state) {
        state.stateNumber = this.nextStateNumber++;
        return this.states.getOrAdd(state);
    }
    toString(vocabulary, ruleNames) {
        if (!vocabulary) {
            vocabulary = VocabularyImpl_1.VocabularyImpl.EMPTY_VOCABULARY;
        }
        if (!this.s0) {
            return "";
        }
        let serializer;
        if (ruleNames) {
            serializer = new DFASerializer_1.DFASerializer(this, vocabulary, ruleNames, this.atnStartState.atn);
        }
        else {
            serializer = new DFASerializer_1.DFASerializer(this, vocabulary);
        }
        return serializer.toString();
    }
    toLexerString() {
        if (!this.s0) {
            return "";
        }
        let serializer = new LexerDFASerializer_1.LexerDFASerializer(this);
        return serializer.toString();
    }
};
__decorate([
    Decorators_1.NotNull
], DFA.prototype, "states", void 0);
__decorate([
    Decorators_1.NotNull
], DFA.prototype, "atnStartState", void 0);
__decorate([
    Decorators_1.NotNull
], DFA.prototype, "atn", void 0);
DFA = __decorate([
    __param(0, Decorators_1.NotNull)
], DFA);
exports.DFA = DFA;
//# sourceMappingURL=DFA.js.map

/***/ }),

/***/ 4014:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DFASerializer = void 0;
const ATNSimulator_1 = __webpack_require__(3296);
const Decorators_1 = __webpack_require__(681);
const PredictionContext_1 = __webpack_require__(1229);
const Recognizer_1 = __webpack_require__(4780);
const VocabularyImpl_1 = __webpack_require__(1434);
/** A DFA walker that knows how to dump them to serialized strings. */
class DFASerializer {
    constructor(dfa, vocabulary, ruleNames, atn) {
        if (vocabulary instanceof Recognizer_1.Recognizer) {
            ruleNames = vocabulary.ruleNames;
            atn = vocabulary.atn;
            vocabulary = vocabulary.vocabulary;
        }
        else if (!vocabulary) {
            vocabulary = VocabularyImpl_1.VocabularyImpl.EMPTY_VOCABULARY;
        }
        this.dfa = dfa;
        this.vocabulary = vocabulary;
        this.ruleNames = ruleNames;
        this.atn = atn;
    }
    toString() {
        if (!this.dfa.s0) {
            return "";
        }
        let buf = "";
        if (this.dfa.states) {
            let states = new Array(...this.dfa.states.toArray());
            states.sort((o1, o2) => o1.stateNumber - o2.stateNumber);
            for (let s of states) {
                let edges = s.getEdgeMap();
                let edgeKeys = [...edges.keys()].sort((a, b) => a - b);
                let contextEdges = s.getContextEdgeMap();
                let contextEdgeKeys = [...contextEdges.keys()].sort((a, b) => a - b);
                for (let entry of edgeKeys) {
                    let value = edges.get(entry);
                    if ((value == null || value === ATNSimulator_1.ATNSimulator.ERROR) && !s.isContextSymbol(entry)) {
                        continue;
                    }
                    let contextSymbol = false;
                    buf += (this.getStateString(s)) + ("-") + (this.getEdgeLabel(entry)) + ("->");
                    if (s.isContextSymbol(entry)) {
                        buf += ("!");
                        contextSymbol = true;
                    }
                    let t = value;
                    if (t && t.stateNumber !== ATNSimulator_1.ATNSimulator.ERROR.stateNumber) {
                        buf += (this.getStateString(t)) + ("\n");
                    }
                    else if (contextSymbol) {
                        buf += ("ctx\n");
                    }
                }
                if (s.isContextSensitive) {
                    for (let entry of contextEdgeKeys) {
                        buf += (this.getStateString(s))
                            + ("-")
                            + (this.getContextLabel(entry))
                            + ("->")
                            + (this.getStateString(contextEdges.get(entry)))
                            + ("\n");
                    }
                }
            }
        }
        let output = buf;
        if (output.length === 0) {
            return "";
        }
        //return Utils.sortLinesInString(output);
        return output;
    }
    getContextLabel(i) {
        if (i === PredictionContext_1.PredictionContext.EMPTY_FULL_STATE_KEY) {
            return "ctx:EMPTY_FULL";
        }
        else if (i === PredictionContext_1.PredictionContext.EMPTY_LOCAL_STATE_KEY) {
            return "ctx:EMPTY_LOCAL";
        }
        if (this.atn && i > 0 && i <= this.atn.states.length) {
            let state = this.atn.states[i];
            let ruleIndex = state.ruleIndex;
            if (this.ruleNames && ruleIndex >= 0 && ruleIndex < this.ruleNames.length) {
                return "ctx:" + String(i) + "(" + this.ruleNames[ruleIndex] + ")";
            }
        }
        return "ctx:" + String(i);
    }
    getEdgeLabel(i) {
        return this.vocabulary.getDisplayName(i);
    }
    getStateString(s) {
        if (s === ATNSimulator_1.ATNSimulator.ERROR) {
            return "ERROR";
        }
        let n = s.stateNumber;
        let stateStr = "s" + n;
        if (s.isAcceptState) {
            if (s.predicates) {
                stateStr = ":s" + n + "=>" + s.predicates;
            }
            else {
                stateStr = ":s" + n + "=>" + s.prediction;
            }
        }
        if (s.isContextSensitive) {
            stateStr += "*";
            for (let config of s.configs) {
                if (config.reachesIntoOuterContext) {
                    stateStr += "*";
                    break;
                }
            }
        }
        return stateStr;
    }
}
__decorate([
    Decorators_1.NotNull
], DFASerializer.prototype, "dfa", void 0);
__decorate([
    Decorators_1.NotNull
], DFASerializer.prototype, "vocabulary", void 0);
__decorate([
    Decorators_1.Override
], DFASerializer.prototype, "toString", null);
exports.DFASerializer = DFASerializer;
//# sourceMappingURL=DFASerializer.js.map

/***/ }),

/***/ 4981:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DFAState = void 0;
const ATN_1 = __webpack_require__(8148);
const BitSet_1 = __webpack_require__(3300);
const MurmurHash_1 = __webpack_require__(7789);
const Decorators_1 = __webpack_require__(681);
const PredictionContext_1 = __webpack_require__(1229);
const assert = __webpack_require__(1696);
/** A DFA state represents a set of possible ATN configurations.
 *  As Aho, Sethi, Ullman p. 117 says "The DFA uses its state
 *  to keep track of all possible states the ATN can be in after
 *  reading each input symbol.  That is to say, after reading
 *  input a1a2..an, the DFA is in a state that represents the
 *  subset T of the states of the ATN that are reachable from the
 *  ATN's start state along some path labeled a1a2..an."
 *  In conventional NFA&rarr;DFA conversion, therefore, the subset T
 *  would be a bitset representing the set of states the
 *  ATN could be in.  We need to track the alt predicted by each
 *  state as well, however.  More importantly, we need to maintain
 *  a stack of states, tracking the closure operations as they
 *  jump from rule to rule, emulating rule invocations (method calls).
 *  I have to add a stack to simulate the proper lookahead sequences for
 *  the underlying LL grammar from which the ATN was derived.
 *
 *  I use a set of ATNConfig objects not simple states.  An ATNConfig
 *  is both a state (ala normal conversion) and a RuleContext describing
 *  the chain of rules (if any) followed to arrive at that state.
 *
 *  A DFA state may have multiple references to a particular state,
 *  but with different ATN contexts (with same or different alts)
 *  meaning that state was reached via a different set of rule invocations.
 */
class DFAState {
    /**
     * Constructs a new `DFAState`.
     *
     * @param configs The set of ATN configurations defining this state.
     */
    constructor(configs) {
        this.stateNumber = -1;
        this.configs = configs;
        this.edges = new Map();
        this.contextEdges = new Map();
    }
    get isContextSensitive() {
        return !!this.contextSymbols;
    }
    isContextSymbol(symbol) {
        if (!this.isContextSensitive) {
            return false;
        }
        return this.contextSymbols.get(symbol);
    }
    setContextSymbol(symbol) {
        assert(this.isContextSensitive);
        this.contextSymbols.set(symbol);
    }
    setContextSensitive(atn) {
        assert(!this.configs.isOutermostConfigSet);
        if (this.isContextSensitive) {
            return;
        }
        if (!this.contextSymbols) {
            this.contextSymbols = new BitSet_1.BitSet();
        }
    }
    get acceptStateInfo() {
        return this._acceptStateInfo;
    }
    set acceptStateInfo(acceptStateInfo) {
        this._acceptStateInfo = acceptStateInfo;
    }
    get isAcceptState() {
        return !!this._acceptStateInfo;
    }
    get prediction() {
        if (!this._acceptStateInfo) {
            return ATN_1.ATN.INVALID_ALT_NUMBER;
        }
        return this._acceptStateInfo.prediction;
    }
    get lexerActionExecutor() {
        if (!this._acceptStateInfo) {
            return undefined;
        }
        return this._acceptStateInfo.lexerActionExecutor;
    }
    getTarget(symbol) {
        return this.edges.get(symbol);
    }
    setTarget(symbol, target) {
        this.edges.set(symbol, target);
    }
    getEdgeMap() {
        return this.edges;
    }
    getContextTarget(invokingState) {
        if (invokingState === PredictionContext_1.PredictionContext.EMPTY_FULL_STATE_KEY) {
            invokingState = -1;
        }
        return this.contextEdges.get(invokingState);
    }
    setContextTarget(invokingState, target) {
        if (!this.isContextSensitive) {
            throw new Error("The state is not context sensitive.");
        }
        if (invokingState === PredictionContext_1.PredictionContext.EMPTY_FULL_STATE_KEY) {
            invokingState = -1;
        }
        this.contextEdges.set(invokingState, target);
    }
    getContextEdgeMap() {
        let map = new Map(this.contextEdges);
        let existing = map.get(-1);
        if (existing !== undefined) {
            if (map.size === 1) {
                let result = new Map();
                result.set(PredictionContext_1.PredictionContext.EMPTY_FULL_STATE_KEY, existing);
                return result;
            }
            else {
                map.delete(-1);
                map.set(PredictionContext_1.PredictionContext.EMPTY_FULL_STATE_KEY, existing);
            }
        }
        return map;
    }
    hashCode() {
        let hash = MurmurHash_1.MurmurHash.initialize(7);
        hash = MurmurHash_1.MurmurHash.update(hash, this.configs.hashCode());
        hash = MurmurHash_1.MurmurHash.finish(hash, 1);
        return hash;
    }
    /**
     * Two {@link DFAState} instances are equal if their ATN configuration sets
     * are the same. This method is used to see if a state already exists.
     *
     * Because the number of alternatives and number of ATN configurations are
     * finite, there is a finite number of DFA states that can be processed.
     * This is necessary to show that the algorithm terminates.
     *
     * Cannot test the DFA state numbers here because in
     * {@link ParserATNSimulator#addDFAState} we need to know if any other state
     * exists that has this exact set of ATN configurations. The
     * {@link #stateNumber} is irrelevant.
     */
    equals(o) {
        // compare set of ATN configurations in this set with other
        if (this === o) {
            return true;
        }
        if (!(o instanceof DFAState)) {
            return false;
        }
        let other = o;
        let sameSet = this.configs.equals(other.configs);
        //		System.out.println("DFAState.equals: "+configs+(sameSet?"==":"!=")+other.configs);
        return sameSet;
    }
    toString() {
        let buf = "";
        buf += (this.stateNumber) + (":") + (this.configs);
        if (this.isAcceptState) {
            buf += ("=>");
            if (this.predicates) {
                buf += this.predicates;
            }
            else {
                buf += (this.prediction);
            }
        }
        return buf.toString();
    }
}
__decorate([
    Decorators_1.NotNull
], DFAState.prototype, "configs", void 0);
__decorate([
    Decorators_1.NotNull
], DFAState.prototype, "edges", void 0);
__decorate([
    Decorators_1.NotNull
], DFAState.prototype, "contextEdges", void 0);
__decorate([
    Decorators_1.Override
], DFAState.prototype, "hashCode", null);
__decorate([
    Decorators_1.Override
], DFAState.prototype, "equals", null);
__decorate([
    Decorators_1.Override
], DFAState.prototype, "toString", null);
exports.DFAState = DFAState;
(function (DFAState) {
    /** Map a predicate to a predicted alternative. */
    let PredPrediction = class PredPrediction {
        constructor(pred, alt) {
            this.alt = alt;
            this.pred = pred;
        }
        toString() {
            return "(" + this.pred + ", " + this.alt + ")";
        }
    };
    __decorate([
        Decorators_1.NotNull
    ], PredPrediction.prototype, "pred", void 0);
    __decorate([
        Decorators_1.Override
    ], PredPrediction.prototype, "toString", null);
    PredPrediction = __decorate([
        __param(0, Decorators_1.NotNull)
    ], PredPrediction);
    DFAState.PredPrediction = PredPrediction;
})(DFAState = exports.DFAState || (exports.DFAState = {}));
//# sourceMappingURL=DFAState.js.map

/***/ }),

/***/ 432:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.LexerDFASerializer = void 0;
const DFASerializer_1 = __webpack_require__(4014);
const Decorators_1 = __webpack_require__(681);
const VocabularyImpl_1 = __webpack_require__(1434);
let LexerDFASerializer = class LexerDFASerializer extends DFASerializer_1.DFASerializer {
    constructor(dfa) {
        super(dfa, VocabularyImpl_1.VocabularyImpl.EMPTY_VOCABULARY);
    }
    getEdgeLabel(i) {
        return "'" + String.fromCodePoint(i) + "'";
    }
};
__decorate([
    Decorators_1.Override,
    Decorators_1.NotNull
], LexerDFASerializer.prototype, "getEdgeLabel", null);
LexerDFASerializer = __decorate([
    __param(0, Decorators_1.NotNull)
], LexerDFASerializer);
exports.LexerDFASerializer = LexerDFASerializer;
//# sourceMappingURL=LexerDFASerializer.js.map

/***/ }),

/***/ 5029:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
__exportStar(__webpack_require__(2288), exports);
__exportStar(__webpack_require__(5041), exports);
// export * from "./ANTLRFileStream";
__exportStar(__webpack_require__(8820), exports);
__exportStar(__webpack_require__(856), exports);
__exportStar(__webpack_require__(672), exports);
__exportStar(__webpack_require__(6599), exports);
__exportStar(__webpack_require__(3259), exports);
__exportStar(__webpack_require__(3421), exports);
__exportStar(__webpack_require__(1978), exports);
__exportStar(__webpack_require__(2058), exports);
__exportStar(__webpack_require__(2929), exports);
__exportStar(__webpack_require__(2217), exports);
__exportStar(__webpack_require__(8778), exports);
__exportStar(__webpack_require__(4242), exports);
__exportStar(__webpack_require__(8140), exports);
__exportStar(__webpack_require__(2155), exports);
__exportStar(__webpack_require__(1103), exports);
__exportStar(__webpack_require__(7432), exports);
__exportStar(__webpack_require__(9725), exports);
__exportStar(__webpack_require__(2628), exports);
__exportStar(__webpack_require__(8170), exports);
__exportStar(__webpack_require__(573), exports);
__exportStar(__webpack_require__(5154), exports);
__exportStar(__webpack_require__(4265), exports);
__exportStar(__webpack_require__(1202), exports);
__exportStar(__webpack_require__(3679), exports);
__exportStar(__webpack_require__(9463), exports);
__exportStar(__webpack_require__(2676), exports);
__exportStar(__webpack_require__(9248), exports);
__exportStar(__webpack_require__(7751), exports);
__exportStar(__webpack_require__(4075), exports);
__exportStar(__webpack_require__(1100), exports);
__exportStar(__webpack_require__(4780), exports);
__exportStar(__webpack_require__(4224), exports);
__exportStar(__webpack_require__(7817), exports);
__exportStar(__webpack_require__(6032), exports);
__exportStar(__webpack_require__(1248), exports);
__exportStar(__webpack_require__(8999), exports);
__exportStar(__webpack_require__(9427), exports);
__exportStar(__webpack_require__(7725), exports);
__exportStar(__webpack_require__(9234), exports);
__exportStar(__webpack_require__(2052), exports);
// export * from "./UnbufferedCharStream";
// export * from "./UnbufferedTokenStream";
__exportStar(__webpack_require__(9269), exports);
__exportStar(__webpack_require__(1434), exports);
__exportStar(__webpack_require__(4010), exports);
//# sourceMappingURL=index.js.map

/***/ }),

/***/ 2835:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Array2DHashMap = void 0;
const Array2DHashSet_1 = __webpack_require__(5265);
class MapKeyEqualityComparator {
    constructor(keyComparator) {
        this.keyComparator = keyComparator;
    }
    hashCode(obj) {
        return this.keyComparator.hashCode(obj.key);
    }
    equals(a, b) {
        return this.keyComparator.equals(a.key, b.key);
    }
}
class Array2DHashMap {
    constructor(keyComparer) {
        if (keyComparer instanceof Array2DHashMap) {
            this.backingStore = new Array2DHashSet_1.Array2DHashSet(keyComparer.backingStore);
        }
        else {
            this.backingStore = new Array2DHashSet_1.Array2DHashSet(new MapKeyEqualityComparator(keyComparer));
        }
    }
    clear() {
        this.backingStore.clear();
    }
    containsKey(key) {
        return this.backingStore.contains({ key });
    }
    get(key) {
        let bucket = this.backingStore.get({ key });
        if (!bucket) {
            return undefined;
        }
        return bucket.value;
    }
    get isEmpty() {
        return this.backingStore.isEmpty;
    }
    put(key, value) {
        let element = this.backingStore.get({ key, value });
        let result;
        if (!element) {
            this.backingStore.add({ key, value });
        }
        else {
            result = element.value;
            element.value = value;
        }
        return result;
    }
    putIfAbsent(key, value) {
        let element = this.backingStore.get({ key, value });
        let result;
        if (!element) {
            this.backingStore.add({ key, value });
        }
        else {
            result = element.value;
        }
        return result;
    }
    get size() {
        return this.backingStore.size;
    }
    hashCode() {
        return this.backingStore.hashCode();
    }
    equals(o) {
        if (!(o instanceof Array2DHashMap)) {
            return false;
        }
        return this.backingStore.equals(o.backingStore);
    }
}
exports.Array2DHashMap = Array2DHashMap;
//# sourceMappingURL=Array2DHashMap.js.map

/***/ }),

/***/ 5265:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Array2DHashSet = void 0;
// ConvertTo-TS run at 2016-10-03T02:09:41.7434086-07:00
const assert = __webpack_require__(1696);
const DefaultEqualityComparator_1 = __webpack_require__(2310);
const Decorators_1 = __webpack_require__(681);
const MurmurHash_1 = __webpack_require__(7789);
/** {@link Set} implementation with closed hashing (open addressing). */
// NOTE:  JavaScript's Set interface has on significant different diffrence from Java's:
// 		  e.g. the return type of add() differs!
//        For this reason I've commented tweaked the implements clause
const INITAL_CAPACITY = 16; // must be power of 2
const LOAD_FACTOR = 0.75;
class Array2DHashSet {
    constructor(comparatorOrSet, initialCapacity = INITAL_CAPACITY) {
        /** How many elements in set */
        this.n = 0;
        this.threshold = Math.floor(INITAL_CAPACITY * LOAD_FACTOR); // when to expand
        if (comparatorOrSet instanceof Array2DHashSet) {
            this.comparator = comparatorOrSet.comparator;
            this.buckets = comparatorOrSet.buckets.slice(0);
            for (let i = 0; i < this.buckets.length; i++) {
                let bucket = this.buckets[i];
                if (bucket) {
                    this.buckets[i] = bucket.slice(0);
                }
            }
            this.n = comparatorOrSet.n;
            this.threshold = comparatorOrSet.threshold;
        }
        else {
            this.comparator = comparatorOrSet || DefaultEqualityComparator_1.DefaultEqualityComparator.INSTANCE;
            this.buckets = this.createBuckets(initialCapacity);
        }
    }
    /**
     * Add `o` to set if not there; return existing value if already
     * there. This method performs the same operation as {@link #add} aside from
     * the return value.
     */
    getOrAdd(o) {
        if (this.n > this.threshold) {
            this.expand();
        }
        return this.getOrAddImpl(o);
    }
    getOrAddImpl(o) {
        let b = this.getBucket(o);
        let bucket = this.buckets[b];
        // NEW BUCKET
        if (!bucket) {
            bucket = [o];
            this.buckets[b] = bucket;
            this.n++;
            return o;
        }
        // LOOK FOR IT IN BUCKET
        for (let existing of bucket) {
            if (this.comparator.equals(existing, o)) {
                return existing; // found existing, quit
            }
        }
        // FULL BUCKET, expand and add to end
        bucket.push(o);
        this.n++;
        return o;
    }
    get(o) {
        if (o == null) {
            return o;
        }
        let b = this.getBucket(o);
        let bucket = this.buckets[b];
        if (!bucket) {
            // no bucket
            return undefined;
        }
        for (let e of bucket) {
            if (this.comparator.equals(e, o)) {
                return e;
            }
        }
        return undefined;
    }
    getBucket(o) {
        let hash = this.comparator.hashCode(o);
        let b = hash & (this.buckets.length - 1); // assumes len is power of 2
        return b;
    }
    hashCode() {
        let hash = MurmurHash_1.MurmurHash.initialize();
        for (let bucket of this.buckets) {
            if (bucket == null) {
                continue;
            }
            for (let o of bucket) {
                if (o == null) {
                    break;
                }
                hash = MurmurHash_1.MurmurHash.update(hash, this.comparator.hashCode(o));
            }
        }
        hash = MurmurHash_1.MurmurHash.finish(hash, this.size);
        return hash;
    }
    equals(o) {
        if (o === this) {
            return true;
        }
        if (!(o instanceof Array2DHashSet)) {
            return false;
        }
        if (o.size !== this.size) {
            return false;
        }
        let same = this.containsAll(o);
        return same;
    }
    expand() {
        let old = this.buckets;
        let newCapacity = this.buckets.length * 2;
        let newTable = this.createBuckets(newCapacity);
        this.buckets = newTable;
        this.threshold = Math.floor(newCapacity * LOAD_FACTOR);
        //		System.out.println("new size="+newCapacity+", thres="+threshold);
        // rehash all existing entries
        let oldSize = this.size;
        for (let bucket of old) {
            if (!bucket) {
                continue;
            }
            for (let o of bucket) {
                let b = this.getBucket(o);
                let newBucket = this.buckets[b];
                if (!newBucket) {
                    newBucket = [];
                    this.buckets[b] = newBucket;
                }
                newBucket.push(o);
            }
        }
        assert(this.n === oldSize);
    }
    add(t) {
        let existing = this.getOrAdd(t);
        return existing === t;
    }
    get size() {
        return this.n;
    }
    get isEmpty() {
        return this.n === 0;
    }
    contains(o) {
        return this.containsFast(this.asElementType(o));
    }
    containsFast(obj) {
        if (obj == null) {
            return false;
        }
        return this.get(obj) != null;
    }
    *[Symbol.iterator]() {
        yield* this.toArray();
    }
    toArray() {
        const a = new Array(this.size);
        // Copy elements from the nested arrays into the destination array
        let i = 0; // Position within destination array
        for (let bucket of this.buckets) {
            if (bucket == null) {
                continue;
            }
            for (let o of bucket) {
                if (o == null) {
                    break;
                }
                a[i++] = o;
            }
        }
        return a;
    }
    containsAll(collection) {
        if (collection instanceof Array2DHashSet) {
            let s = collection;
            for (let bucket of s.buckets) {
                if (bucket == null) {
                    continue;
                }
                for (let o of bucket) {
                    if (o == null) {
                        break;
                    }
                    if (!this.containsFast(this.asElementType(o))) {
                        return false;
                    }
                }
            }
        }
        else {
            for (let o of collection) {
                if (!this.containsFast(this.asElementType(o))) {
                    return false;
                }
            }
        }
        return true;
    }
    addAll(c) {
        let changed = false;
        for (let o of c) {
            let existing = this.getOrAdd(o);
            if (existing !== o) {
                changed = true;
            }
        }
        return changed;
    }
    clear() {
        this.buckets = this.createBuckets(INITAL_CAPACITY);
        this.n = 0;
        this.threshold = Math.floor(INITAL_CAPACITY * LOAD_FACTOR);
    }
    toString() {
        if (this.size === 0) {
            return "{}";
        }
        let buf = "{";
        let first = true;
        for (let bucket of this.buckets) {
            if (bucket == null) {
                continue;
            }
            for (let o of bucket) {
                if (o == null) {
                    break;
                }
                if (first) {
                    first = false;
                }
                else {
                    buf += ", ";
                }
                buf += o.toString();
            }
        }
        buf += "}";
        return buf;
    }
    toTableString() {
        let buf = "";
        for (let bucket of this.buckets) {
            if (bucket == null) {
                buf += "null\n";
                continue;
            }
            buf += "[";
            let first = true;
            for (let o of bucket) {
                if (first) {
                    first = false;
                }
                else {
                    buf += " ";
                }
                if (o == null) {
                    buf += "_";
                }
                else {
                    buf += o.toString();
                }
            }
            buf += "]\n";
        }
        return buf;
    }
    /**
     * Return `o` as an instance of the element type `T`. If
     * `o` is non-undefined but known to not be an instance of `T`, this
     * method returns `undefined`. The base implementation does not perform any
     * type checks; override this method to provide strong type checks for the
     * {@link #contains} and {@link #remove} methods to ensure the arguments to
     * the {@link EqualityComparator} for the set always have the expected
     * types.
     *
     * @param o the object to try and cast to the element type of the set
     * @returns `o` if it could be an instance of `T`, otherwise
     * `undefined`.
     */
    asElementType(o) {
        return o;
    }
    /**
     * Return an array of `T[]` with length `capacity`.
     *
     * @param capacity the length of the array to return
     * @returns the newly constructed array
     */
    createBuckets(capacity) {
        return new Array(capacity);
    }
}
__decorate([
    Decorators_1.NotNull
], Array2DHashSet.prototype, "comparator", void 0);
__decorate([
    Decorators_1.Override
], Array2DHashSet.prototype, "hashCode", null);
__decorate([
    Decorators_1.Override
], Array2DHashSet.prototype, "equals", null);
__decorate([
    Decorators_1.Override
], Array2DHashSet.prototype, "add", null);
__decorate([
    Decorators_1.Override
], Array2DHashSet.prototype, "size", null);
__decorate([
    Decorators_1.Override
], Array2DHashSet.prototype, "isEmpty", null);
__decorate([
    Decorators_1.Override
], Array2DHashSet.prototype, "contains", null);
__decorate([
    __param(0, Decorators_1.Nullable)
], Array2DHashSet.prototype, "containsFast", null);
__decorate([
    Decorators_1.Override
], Array2DHashSet.prototype, Symbol.iterator, null);
__decorate([
    Decorators_1.Override
], Array2DHashSet.prototype, "toArray", null);
__decorate([
    Decorators_1.Override
], Array2DHashSet.prototype, "containsAll", null);
__decorate([
    Decorators_1.Override
], Array2DHashSet.prototype, "addAll", null);
__decorate([
    Decorators_1.Override
], Array2DHashSet.prototype, "clear", null);
__decorate([
    Decorators_1.Override
], Array2DHashSet.prototype, "toString", null);
__decorate([
    Decorators_1.SuppressWarnings("unchecked")
], Array2DHashSet.prototype, "asElementType", null);
__decorate([
    Decorators_1.SuppressWarnings("unchecked")
], Array2DHashSet.prototype, "createBuckets", null);
exports.Array2DHashSet = Array2DHashSet;
//# sourceMappingURL=Array2DHashSet.js.map

/***/ }),

/***/ 4339:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ArrayEqualityComparator = void 0;
const Decorators_1 = __webpack_require__(681);
const MurmurHash_1 = __webpack_require__(7789);
const ObjectEqualityComparator_1 = __webpack_require__(8578);
/**
 * This default implementation of {@link EqualityComparator} uses object equality
 * for comparisons by calling {@link Object#hashCode} and {@link Object#equals}.
 *
 * @author Sam Harwell
 */
class ArrayEqualityComparator {
    /**
     * {@inheritDoc}
     *
     * This implementation returns
     * `obj.`{@link Object#hashCode hashCode()}.
     */
    hashCode(obj) {
        if (obj == null) {
            return 0;
        }
        return MurmurHash_1.MurmurHash.hashCode(obj, 0);
    }
    /**
     * {@inheritDoc}
     *
     * This implementation relies on object equality. If both objects are
     * `undefined`, this method returns `true`. Otherwise if only
     * `a` is `undefined`, this method returns `false`. Otherwise,
     * this method returns the result of
     * `a.`{@link Object#equals equals}`(b)`.
     */
    equals(a, b) {
        if (a == null) {
            return b == null;
        }
        else if (b == null) {
            return false;
        }
        if (a.length !== b.length) {
            return false;
        }
        for (let i = 0; i < a.length; i++) {
            if (!ObjectEqualityComparator_1.ObjectEqualityComparator.INSTANCE.equals(a[i], b[i])) {
                return false;
            }
        }
        return true;
    }
}
ArrayEqualityComparator.INSTANCE = new ArrayEqualityComparator();
__decorate([
    Decorators_1.Override
], ArrayEqualityComparator.prototype, "hashCode", null);
__decorate([
    Decorators_1.Override
], ArrayEqualityComparator.prototype, "equals", null);
exports.ArrayEqualityComparator = ArrayEqualityComparator;
//# sourceMappingURL=ArrayEqualityComparator.js.map

/***/ }),

/***/ 7464:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Arrays = void 0;
var Arrays;
(function (Arrays) {
    /**
     * Searches the specified array of numbers for the specified value using the binary search algorithm. The array must
     * be sorted prior to making this call. If it is not sorted, the results are unspecified. If the array contains
     * multiple elements with the specified value, there is no guarantee which one will be found.
     *
     * @returns index of the search key, if it is contained in the array; otherwise, (-(insertion point) - 1). The
     * insertion point is defined as the point at which the key would be inserted into the array: the index of the first
     * element greater than the key, or array.length if all elements in the array are less than the specified key. Note
     * that this guarantees that the return value will be >= 0 if and only if the key is found.
     */
    function binarySearch(array, key, fromIndex, toIndex) {
        return binarySearch0(array, fromIndex !== undefined ? fromIndex : 0, toIndex !== undefined ? toIndex : array.length, key);
    }
    Arrays.binarySearch = binarySearch;
    function binarySearch0(array, fromIndex, toIndex, key) {
        let low = fromIndex;
        let high = toIndex - 1;
        while (low <= high) {
            let mid = (low + high) >>> 1;
            let midVal = array[mid];
            if (midVal < key) {
                low = mid + 1;
            }
            else if (midVal > key) {
                high = mid - 1;
            }
            else {
                // key found
                return mid;
            }
        }
        // key not found.
        return -(low + 1);
    }
    function toString(array) {
        let result = "[";
        let first = true;
        for (let element of array) {
            if (first) {
                first = false;
            }
            else {
                result += ", ";
            }
            if (element === null) {
                result += "null";
            }
            else if (element === undefined) {
                result += "undefined";
            }
            else {
                result += element;
            }
        }
        result += "]";
        return result;
    }
    Arrays.toString = toString;
})(Arrays = exports.Arrays || (exports.Arrays = {}));
//# sourceMappingURL=Arrays.js.map

/***/ }),

/***/ 3300:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.BitSet = void 0;
const util = __webpack_require__(3335);
const MurmurHash_1 = __webpack_require__(7789);
/**
 * Private empty array used to construct empty BitSets
 */
const EMPTY_DATA = new Uint16Array(0);
/**
 * Gets the word index of the `UInt16` element in `BitSet.data` containing the bit with the specified index.
 */
function getIndex(bitNumber) {
    return bitNumber >>> 4;
}
/**
 * Convert a word index into the bit index of the LSB of that word
 */
function unIndex(n) {
    return n * 16;
}
/**
 * Get's the bit number of the least signficant bit set LSB which is set in a word non-zero word;
 * Bit numbers run from LSB to MSB starting with 0.
 */
function findLSBSet(word) {
    let bit = 1;
    for (let i = 0; i < 16; i++) {
        if ((word & bit) !== 0) {
            return i;
        }
        bit = (bit << 1) >>> 0;
    }
    throw new RangeError("No specified bit found");
}
function findMSBSet(word) {
    let bit = (1 << 15) >>> 0;
    for (let i = 15; i >= 0; i--) {
        if ((word & bit) !== 0) {
            return i;
        }
        bit = bit >>> 1;
    }
    throw new RangeError("No specified bit found");
}
/**
 * Gets a 16-bit mask with bit numbers fromBit to toBit (inclusive) set.
 * Bit numbers run from LSB to MSB starting with 0.
 */
function bitsFor(fromBit, toBit) {
    fromBit &= 0xF;
    toBit &= 0xF;
    if (fromBit === toBit) {
        return (1 << fromBit) >>> 0;
    }
    return ((0xFFFF >>> (15 - toBit)) ^ (0xFFFF >>> (16 - fromBit)));
}
/**
 * A lookup table for number of set bits in a 16-bit integer.   This is used to quickly count the cardinality (number of unique elements) of a BitSet.
 */
const POP_CNT = new Uint8Array(65536);
for (let i = 0; i < 16; i++) {
    const stride = (1 << i) >>> 0;
    let index = 0;
    while (index < POP_CNT.length) {
        // skip the numbers where the bit isn't set
        index += stride;
        // increment the ones where the bit is set
        for (let j = 0; j < stride; j++) {
            POP_CNT[index]++;
            index++;
        }
    }
}
class BitSet {
    /*
    ** constructor implementation
    */
    constructor(arg) {
        if (!arg) {
            // covering the case of unspecified and nbits===0
            this.data = EMPTY_DATA;
        }
        else if (typeof arg === "number") {
            if (arg < 0) {
                throw new RangeError("nbits cannot be negative");
            }
            else {
                this.data = new Uint16Array(getIndex(arg - 1) + 1);
            }
        }
        else {
            if (arg instanceof BitSet) {
                this.data = arg.data.slice(0); // Clone the data
            }
            else {
                let max = -1;
                for (let v of arg) {
                    if (max < v) {
                        max = v;
                    }
                }
                this.data = new Uint16Array(getIndex(max - 1) + 1);
                for (let v of arg) {
                    this.set(v);
                }
            }
        }
    }
    /**
     * Performs a logical **AND** of this target bit set with the argument bit set. This bit set is modified so that
     * each bit in it has the value `true` if and only if it both initially had the value `true` and the corresponding
     * bit in the bit set argument also had the value `true`.
     */
    and(set) {
        const data = this.data;
        const other = set.data;
        const words = Math.min(data.length, other.length);
        let lastWord = -1; // Keep track of index of last non-zero word
        for (let i = 0; i < words; i++) {
            let value = data[i] &= other[i];
            if (value !== 0) {
                lastWord = i;
            }
        }
        if (lastWord === -1) {
            this.data = EMPTY_DATA;
        }
        if (lastWord < data.length - 1) {
            this.data = data.slice(0, lastWord + 1);
        }
    }
    /**
     * Clears all of the bits in this `BitSet` whose corresponding bit is set in the specified `BitSet`.
     */
    andNot(set) {
        const data = this.data;
        const other = set.data;
        const words = Math.min(data.length, other.length);
        let lastWord = -1; // Keep track of index of last non-zero word
        for (let i = 0; i < words; i++) {
            let value = data[i] &= (other[i] ^ 0xFFFF);
            if (value !== 0) {
                lastWord = i;
            }
        }
        if (lastWord === -1) {
            this.data = EMPTY_DATA;
        }
        if (lastWord < data.length - 1) {
            this.data = data.slice(0, lastWord + 1);
        }
    }
    /**
     * Returns the number of bits set to `true` in this `BitSet`.
     */
    cardinality() {
        if (this.isEmpty) {
            return 0;
        }
        const data = this.data;
        const length = data.length;
        let result = 0;
        for (let i = 0; i < length; i++) {
            result += POP_CNT[data[i]];
        }
        return result;
    }
    clear(fromIndex, toIndex) {
        if (fromIndex == null) {
            this.data.fill(0);
        }
        else if (toIndex == null) {
            this.set(fromIndex, false);
        }
        else {
            this.set(fromIndex, toIndex, false);
        }
    }
    flip(fromIndex, toIndex) {
        if (toIndex == null) {
            toIndex = fromIndex;
        }
        if (fromIndex < 0 || toIndex < fromIndex) {
            throw new RangeError();
        }
        let word = getIndex(fromIndex);
        const lastWord = getIndex(toIndex);
        if (word === lastWord) {
            this.data[word] ^= bitsFor(fromIndex, toIndex);
        }
        else {
            this.data[word++] ^= bitsFor(fromIndex, 15);
            while (word < lastWord) {
                this.data[word++] ^= 0xFFFF;
            }
            this.data[word++] ^= bitsFor(0, toIndex);
        }
    }
    get(fromIndex, toIndex) {
        if (toIndex === undefined) {
            return !!(this.data[getIndex(fromIndex)] & bitsFor(fromIndex, fromIndex));
        }
        else {
            // return a BitSet
            let result = new BitSet(toIndex + 1);
            for (let i = fromIndex; i <= toIndex; i++) {
                result.set(i, this.get(i));
            }
            return result;
        }
    }
    /**
     * Returns true if the specified `BitSet` has any bits set to `true` that are also set to `true` in this `BitSet`.
     *
     * @param set `BitSet` to intersect with
     */
    intersects(set) {
        let smallerLength = Math.min(this.length(), set.length());
        if (smallerLength === 0) {
            return false;
        }
        let bound = getIndex(smallerLength - 1);
        for (let i = 0; i <= bound; i++) {
            if ((this.data[i] & set.data[i]) !== 0) {
                return true;
            }
        }
        return false;
    }
    /**
     * Returns true if this `BitSet` contains no bits that are set to `true`.
     */
    get isEmpty() {
        return this.length() === 0;
    }
    /**
     * Returns the "logical size" of this `BitSet`: the index of the highest set bit in the `BitSet` plus one. Returns
     * zero if the `BitSet` contains no set bits.
     */
    length() {
        if (!this.data.length) {
            return 0;
        }
        return this.previousSetBit(unIndex(this.data.length) - 1) + 1;
    }
    /**
     * Returns the index of the first bit that is set to `false` that occurs on or after the specified starting index,
     * If no such bit exists then `-1` is returned.
     *
     * @param fromIndex the index to start checking from (inclusive)
     *
     * @throws RangeError if the specified index is negative
     */
    nextClearBit(fromIndex) {
        if (fromIndex < 0) {
            throw new RangeError("fromIndex cannot be negative");
        }
        const data = this.data;
        const length = data.length;
        let word = getIndex(fromIndex);
        if (word > length) {
            return -1;
        }
        let ignore = 0xFFFF ^ bitsFor(fromIndex, 15);
        if ((data[word] | ignore) === 0xFFFF) {
            word++;
            ignore = 0;
            for (; word < length; word++) {
                if (data[word] !== 0xFFFF) {
                    break;
                }
            }
            if (word === length) {
                // Hit the end
                return -1;
            }
        }
        return unIndex(word) + findLSBSet((data[word] | ignore) ^ 0xFFFF);
    }
    /**
     * Returns the index of the first bit that is set to `true` that occurs on or after the specified starting index.
     * If no such bit exists then `-1` is returned.
     *
     * To iterate over the `true` bits in a `BitSet`, use the following loop:
     *
     * ```
     * for (let i = bs.nextSetBit(0); i >= 0; i = bs.nextSetBit(i + 1)) {
     *   // operate on index i here
     * }
     * ```
     *
     * @param fromIndex the index to start checking from (inclusive)
     *
     * @throws RangeError if the specified index is negative
     */
    nextSetBit(fromIndex) {
        if (fromIndex < 0) {
            throw new RangeError("fromIndex cannot be negative");
        }
        const data = this.data;
        const length = data.length;
        let word = getIndex(fromIndex);
        if (word > length) {
            return -1;
        }
        let mask = bitsFor(fromIndex, 15);
        if ((data[word] & mask) === 0) {
            word++;
            mask = 0xFFFF;
            for (; word < length; word++) {
                if (data[word] !== 0) {
                    break;
                }
            }
            if (word >= length) {
                return -1;
            }
        }
        return unIndex(word) + findLSBSet(data[word] & mask);
    }
    /**
     * Performs a logical **OR** of this bit set with the bit set argument. This bit set is modified so that a bit in it
     * has the value `true` if and only if it either already had the value `true` or the corresponding bit in the bit
     * set argument has the value `true`.
     */
    or(set) {
        const data = this.data;
        const other = set.data;
        const minWords = Math.min(data.length, other.length);
        const words = Math.max(data.length, other.length);
        const dest = data.length === words ? data : new Uint16Array(words);
        let lastWord = -1;
        // Or those words both sets have in common
        for (let i = 0; i < minWords; i++) {
            let value = dest[i] = data[i] | other[i];
            if (value !== 0) {
                lastWord = i;
            }
        }
        // Copy words from larger set (if there is one)
        const longer = data.length > other.length ? data : other;
        for (let i = minWords; i < words; i++) {
            let value = dest[i] = longer[i];
            if (value !== 0) {
                lastWord = i;
            }
        }
        if (lastWord === -1) {
            this.data = EMPTY_DATA;
        }
        else if (dest.length === lastWord + 1) {
            this.data = dest;
        }
        else {
            this.data = dest.slice(0, lastWord);
        }
    }
    /**
     * Returns the index of the nearest bit that is set to `false` that occurs on or before the specified starting
     * index. If no such bit exists, or if `-1` is given as the starting index, then `-1` is returned.
     *
     * @param fromIndex the index to start checking from (inclusive)
     *
     * @throws RangeError if the specified index is less than `-1`
     */
    previousClearBit(fromIndex) {
        if (fromIndex < 0) {
            throw new RangeError("fromIndex cannot be negative");
        }
        const data = this.data;
        const length = data.length;
        let word = getIndex(fromIndex);
        if (word >= length) {
            word = length - 1;
        }
        let ignore = 0xFFFF ^ bitsFor(0, fromIndex);
        if ((data[word] | ignore) === 0xFFFF) {
            ignore = 0;
            word--;
            for (; word >= 0; word--) {
                if (data[word] !== 0xFFFF) {
                    break;
                }
            }
            if (word < 0) {
                // Hit the end
                return -1;
            }
        }
        return unIndex(word) + findMSBSet((data[word] | ignore) ^ 0xFFFF);
    }
    /**
     * Returns the index of the nearest bit that is set to `true` that occurs on or before the specified starting index.
     * If no such bit exists, or if `-1` is given as the starting index, then `-1` is returned.
     *
     * To iterate over the `true` bits in a `BitSet`, use the following loop:
     *
     * ```
     * for (let i = bs.length(); (i = bs.previousSetBit(i-1)) >= 0; ) {
     *   // operate on index i here
     * }
     * ```
     *
     * @param fromIndex the index to start checking from (inclusive)
     *
     * @throws RangeError if the specified index is less than `-1`
     */
    previousSetBit(fromIndex) {
        if (fromIndex < 0) {
            throw new RangeError("fromIndex cannot be negative");
        }
        const data = this.data;
        const length = data.length;
        let word = getIndex(fromIndex);
        if (word >= length) {
            word = length - 1;
        }
        let mask = bitsFor(0, fromIndex);
        if ((data[word] & mask) === 0) {
            word--;
            mask = 0xFFFF;
            for (; word >= 0; word--) {
                if (data[word] !== 0) {
                    break;
                }
            }
            if (word < 0) {
                return -1;
            }
        }
        return unIndex(word) + findMSBSet(data[word] & mask);
    }
    set(fromIndex, toIndex, value) {
        if (toIndex === undefined) {
            toIndex = fromIndex;
            value = true;
        }
        else if (typeof toIndex === "boolean") {
            value = toIndex;
            toIndex = fromIndex;
        }
        if (value === undefined) {
            value = true;
        }
        if (fromIndex < 0 || fromIndex > toIndex) {
            throw new RangeError();
        }
        let word = getIndex(fromIndex);
        let lastWord = getIndex(toIndex);
        if (value && lastWord >= this.data.length) {
            // Grow array "just enough" for bits we need to set
            let temp = new Uint16Array(lastWord + 1);
            this.data.forEach((value, index) => temp[index] = value);
            this.data = temp;
        }
        else if (!value) {
            // But there is no need to grow array to clear bits.
            if (word >= this.data.length) {
                // Early exit
                return;
            }
            if (lastWord >= this.data.length) {
                // Adjust work to fit array
                lastWord = this.data.length - 1;
                toIndex = this.data.length * 16 - 1;
            }
        }
        if (word === lastWord) {
            this._setBits(word, value, bitsFor(fromIndex, toIndex));
        }
        else {
            this._setBits(word++, value, bitsFor(fromIndex, 15));
            while (word < lastWord) {
                this.data[word++] = value ? 0xFFFF : 0;
            }
            this._setBits(word, value, bitsFor(0, toIndex));
        }
    }
    _setBits(word, value, mask) {
        if (value) {
            this.data[word] |= mask;
        }
        else {
            this.data[word] &= 0xFFFF ^ mask;
        }
    }
    /**
     * Returns the number of bits of space actually in use by this `BitSet` to represent bit values. The maximum element
     * in the set is the size - 1st element.
     */
    get size() {
        return this.data.byteLength * 8;
    }
    /**
     * Returns a new byte array containing all the bits in this bit set.
     *
     * More precisely, if
     * `let bytes = s.toByteArray();`
     * then `bytes.length === (s.length()+7)/8` and `s.get(n) === ((bytes[n/8] & (1<<(n%8))) != 0)` for all
     * `n < 8 * bytes.length`.
     */
    // toByteArray(): Int8Array {
    // 	throw new Error("NOT IMPLEMENTED");
    // }
    /**
     * Returns a new integer array containing all the bits in this bit set.
     *
     * More precisely, if
     * `let integers = s.toIntegerArray();`
     * then `integers.length === (s.length()+31)/32` and `s.get(n) === ((integers[n/32] & (1<<(n%32))) != 0)` for all
     * `n < 32 * integers.length`.
     */
    // toIntegerArray(): Int32Array {
    // 	throw new Error("NOT IMPLEMENTED");
    // }
    hashCode() {
        return MurmurHash_1.MurmurHash.hashCode(this.data, 22);
    }
    /**
     * Compares this object against the specified object. The result is `true` if and only if the argument is not
     * `undefined` and is a `Bitset` object that has exactly the same set of bits set to `true` as this bit set. That
     * is, for every nonnegative index `k`,
     *
     * ```
     * ((BitSet)obj).get(k) == this.get(k)
     * ```
     *
     * must be true. The current sizes of the two bit sets are not compared.
     */
    equals(obj) {
        if (obj === this) {
            return true;
        }
        else if (!(obj instanceof BitSet)) {
            return false;
        }
        const len = this.length();
        if (len !== obj.length()) {
            return false;
        }
        if (len === 0) {
            return true;
        }
        let bound = getIndex(len - 1);
        for (let i = 0; i <= bound; i++) {
            if (this.data[i] !== obj.data[i]) {
                return false;
            }
        }
        return true;
    }
    /**
     * Returns a string representation of this bit set. For every index for which this `BitSet` contains a bit in the
     * set state, the decimal representation of that index is included in the result. Such indices are listed in order
     * from lowest to highest, separated by ", " (a comma and a space) and surrounded by braces, resulting in the usual
     * mathematical notation for a set of integers.
     *
     * Example:
     *
     *     BitSet drPepper = new BitSet();
     *
     * Now `drPepper.toString()` returns `"{}"`.
     *
     *     drPepper.set(2);
     *
     * Now `drPepper.toString()` returns `"{2}"`.
     *
     *     drPepper.set(4);
     *     drPepper.set(10);
     *
     * Now `drPepper.toString()` returns `"{2, 4, 10}"`.
     */
    toString() {
        let result = "{";
        let first = true;
        for (let i = this.nextSetBit(0); i >= 0; i = this.nextSetBit(i + 1)) {
            if (first) {
                first = false;
            }
            else {
                result += ", ";
            }
            result += i;
        }
        result += "}";
        return result;
    }
    // static valueOf(bytes: Int8Array): BitSet;
    // static valueOf(buffer: ArrayBuffer): BitSet;
    // static valueOf(integers: Int32Array): BitSet;
    // static valueOf(data: Int8Array | Int32Array | ArrayBuffer): BitSet {
    // 	throw new Error("NOT IMPLEMENTED");
    // }
    /**
     * Performs a logical **XOR** of this bit set with the bit set argument. This bit set is modified so that a bit in
     * it has the value `true` if and only if one of the following statements holds:
     *
     * * The bit initially has the value `true`, and the corresponding bit in the argument has the value `false`.
     * * The bit initially has the value `false`, and the corresponding bit in the argument has the value `true`.
     */
    xor(set) {
        const data = this.data;
        const other = set.data;
        const minWords = Math.min(data.length, other.length);
        const words = Math.max(data.length, other.length);
        const dest = data.length === words ? data : new Uint16Array(words);
        let lastWord = -1;
        // Xor those words both sets have in common
        for (let i = 0; i < minWords; i++) {
            let value = dest[i] = data[i] ^ other[i];
            if (value !== 0) {
                lastWord = i;
            }
        }
        // Copy words from larger set (if there is one)
        const longer = data.length > other.length ? data : other;
        for (let i = minWords; i < words; i++) {
            let value = dest[i] = longer[i];
            if (value !== 0) {
                lastWord = i;
            }
        }
        if (lastWord === -1) {
            this.data = EMPTY_DATA;
        }
        else if (dest.length === lastWord + 1) {
            this.data = dest;
        }
        else {
            this.data = dest.slice(0, lastWord + 1);
        }
    }
    clone() {
        return new BitSet(this);
    }
    [Symbol.iterator]() {
        return new BitSetIterator(this.data);
    }
    // Overrides formatting for nodejs assert etc.
    [util.inspect.custom]() {
        return "BitSet " + this.toString();
    }
}
exports.BitSet = BitSet;
class BitSetIterator {
    constructor(data) {
        this.data = data;
        this.index = 0;
        this.mask = 0xFFFF;
    }
    next() {
        while (this.index < this.data.length) {
            const bits = this.data[this.index] & this.mask;
            if (bits !== 0) {
                const bitNumber = unIndex(this.index) + findLSBSet(bits);
                this.mask = bitsFor(bitNumber + 1, 15);
                return { done: false, value: bitNumber };
            }
            this.index++;
            this.mask = 0xFFFF;
        }
        return { done: true, value: -1 };
    }
    [Symbol.iterator]() { return this; }
}
//# sourceMappingURL=BitSet.js.map

/***/ }),

/***/ 4084:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.isSupplementaryCodePoint = exports.isLowSurrogate = exports.isHighSurrogate = void 0;
function isHighSurrogate(ch) {
    return ch >= 0xD800 && ch <= 0xDBFF;
}
exports.isHighSurrogate = isHighSurrogate;
function isLowSurrogate(ch) {
    return ch >= 0xDC00 && ch <= 0xDFFF;
}
exports.isLowSurrogate = isLowSurrogate;
function isSupplementaryCodePoint(ch) {
    return ch >= 0x10000;
}
exports.isSupplementaryCodePoint = isSupplementaryCodePoint;
//# sourceMappingURL=Character.js.map

/***/ }),

/***/ 2310:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DefaultEqualityComparator = void 0;
const Decorators_1 = __webpack_require__(681);
const MurmurHash_1 = __webpack_require__(7789);
const ObjectEqualityComparator_1 = __webpack_require__(8578);
/**
 * This default implementation of {@link EqualityComparator} uses object equality
 * for comparisons by calling {@link Object#hashCode} and {@link Object#equals}.
 *
 * @author Sam Harwell
 */
class DefaultEqualityComparator {
    /**
     * {@inheritDoc}
     *
     * This implementation returns
     * `obj.`{@link Object#hashCode hashCode()}.
     */
    hashCode(obj) {
        if (obj == null) {
            return 0;
        }
        else if (typeof obj === "string" || typeof obj === "number") {
            return MurmurHash_1.MurmurHash.hashCode([obj]);
        }
        else {
            return ObjectEqualityComparator_1.ObjectEqualityComparator.INSTANCE.hashCode(obj);
        }
    }
    /**
     * {@inheritDoc}
     *
     * This implementation relies on object equality. If both objects are
     * `undefined` or `null`, this method returns `true`. Otherwise if only
     * `a` is `undefined` or `null`, this method returns `false`. Otherwise,
     * this method returns the result of
     * `a.`{@link Object#equals equals}`(b)`.
     */
    equals(a, b) {
        if (a == null) {
            return b == null;
        }
        else if (typeof a === "string" || typeof a === "number") {
            return a === b;
        }
        else {
            return ObjectEqualityComparator_1.ObjectEqualityComparator.INSTANCE.equals(a, b);
        }
    }
}
DefaultEqualityComparator.INSTANCE = new DefaultEqualityComparator();
__decorate([
    Decorators_1.Override
], DefaultEqualityComparator.prototype, "hashCode", null);
__decorate([
    Decorators_1.Override
], DefaultEqualityComparator.prototype, "equals", null);
exports.DefaultEqualityComparator = DefaultEqualityComparator;
//# sourceMappingURL=DefaultEqualityComparator.js.map

/***/ }),

/***/ 8163:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.IntegerList = void 0;
// ConvertTo-TS run at 2016-10-04T11:26:40.5099429-07:00
const Arrays_1 = __webpack_require__(7464);
const Decorators_1 = __webpack_require__(681);
const EMPTY_DATA = new Int32Array(0);
const INITIAL_SIZE = 4;
const MAX_ARRAY_SIZE = (((1 << 31) >>> 0) - 1) - 8;
/**
 *
 * @author Sam Harwell
 */
class IntegerList {
    constructor(arg) {
        if (!arg) {
            this._data = EMPTY_DATA;
            this._size = 0;
        }
        else if (arg instanceof IntegerList) {
            this._data = arg._data.slice(0);
            this._size = arg._size;
        }
        else if (typeof arg === "number") {
            if (arg === 0) {
                this._data = EMPTY_DATA;
                this._size = 0;
            }
            else {
                this._data = new Int32Array(arg);
                this._size = 0;
            }
        }
        else {
            // arg is Iterable<number>
            this._data = EMPTY_DATA;
            this._size = 0;
            for (let value of arg) {
                this.add(value);
            }
        }
    }
    add(value) {
        if (this._data.length === this._size) {
            this.ensureCapacity(this._size + 1);
        }
        this._data[this._size] = value;
        this._size++;
    }
    addAll(list) {
        if (Array.isArray(list)) {
            this.ensureCapacity(this._size + list.length);
            this._data.subarray(this._size, this._size + list.length).set(list);
            this._size += list.length;
        }
        else if (list instanceof IntegerList) {
            this.ensureCapacity(this._size + list._size);
            this._data.subarray(this._size, this._size + list.size).set(list._data);
            this._size += list._size;
        }
        else {
            // list is JavaCollection<number>
            this.ensureCapacity(this._size + list.size);
            let current = 0;
            for (let xi of list) {
                this._data[this._size + current] = xi;
                current++;
            }
            this._size += list.size;
        }
    }
    get(index) {
        if (index < 0 || index >= this._size) {
            throw RangeError();
        }
        return this._data[index];
    }
    contains(value) {
        for (let i = 0; i < this._size; i++) {
            if (this._data[i] === value) {
                return true;
            }
        }
        return false;
    }
    set(index, value) {
        if (index < 0 || index >= this._size) {
            throw RangeError();
        }
        let previous = this._data[index];
        this._data[index] = value;
        return previous;
    }
    removeAt(index) {
        let value = this.get(index);
        this._data.copyWithin(index, index + 1, this._size);
        this._data[this._size - 1] = 0;
        this._size--;
        return value;
    }
    removeRange(fromIndex, toIndex) {
        if (fromIndex < 0 || toIndex < 0 || fromIndex > this._size || toIndex > this._size) {
            throw RangeError();
        }
        if (fromIndex > toIndex) {
            throw RangeError();
        }
        this._data.copyWithin(toIndex, fromIndex, this._size);
        this._data.fill(0, this._size - (toIndex - fromIndex), this._size);
        this._size -= (toIndex - fromIndex);
    }
    get isEmpty() {
        return this._size === 0;
    }
    get size() {
        return this._size;
    }
    trimToSize() {
        if (this._data.length === this._size) {
            return;
        }
        this._data = this._data.slice(0, this._size);
    }
    clear() {
        this._data.fill(0, 0, this._size);
        this._size = 0;
    }
    toArray() {
        if (this._size === 0) {
            return [];
        }
        return Array.from(this._data.subarray(0, this._size));
    }
    sort() {
        this._data.subarray(0, this._size).sort();
    }
    /**
     * Compares the specified object with this list for equality.  Returns
     * `true` if and only if the specified object is also an {@link IntegerList},
     * both lists have the same size, and all corresponding pairs of elements in
     * the two lists are equal.  In other words, two lists are defined to be
     * equal if they contain the same elements in the same order.
     *
     * This implementation first checks if the specified object is this
     * list. If so, it returns `true`; if not, it checks if the
     * specified object is an {@link IntegerList}. If not, it returns `false`;
     * if so, it checks the size of both lists. If the lists are not the same size,
     * it returns `false`; otherwise it iterates over both lists, comparing
     * corresponding pairs of elements.  If any comparison returns `false`,
     * this method returns `false`.
     *
     * @param o the object to be compared for equality with this list
     * @returns `true` if the specified object is equal to this list
     */
    equals(o) {
        if (o === this) {
            return true;
        }
        if (!(o instanceof IntegerList)) {
            return false;
        }
        if (this._size !== o._size) {
            return false;
        }
        for (let i = 0; i < this._size; i++) {
            if (this._data[i] !== o._data[i]) {
                return false;
            }
        }
        return true;
    }
    /**
     * Returns the hash code value for this list.
     *
     * This implementation uses exactly the code that is used to define the
     * list hash function in the documentation for the {@link List#hashCode}
     * method.
     *
     * @returns the hash code value for this list
     */
    hashCode() {
        let hashCode = 1;
        for (let i = 0; i < this._size; i++) {
            hashCode = 31 * hashCode + this._data[i];
        }
        return hashCode;
    }
    /**
     * Returns a string representation of this list.
     */
    toString() {
        return this._data.toString();
    }
    binarySearch(key, fromIndex, toIndex) {
        if (fromIndex === undefined) {
            fromIndex = 0;
        }
        if (toIndex === undefined) {
            toIndex = this._size;
        }
        if (fromIndex < 0 || toIndex < 0 || fromIndex > this._size || toIndex > this._size) {
            throw new RangeError();
        }
        if (fromIndex > toIndex) {
            throw new RangeError();
        }
        return Arrays_1.Arrays.binarySearch(this._data, key, fromIndex, toIndex);
    }
    ensureCapacity(capacity) {
        if (capacity < 0 || capacity > MAX_ARRAY_SIZE) {
            throw new RangeError();
        }
        let newLength;
        if (this._data.length === 0) {
            newLength = INITIAL_SIZE;
        }
        else {
            newLength = this._data.length;
        }
        while (newLength < capacity) {
            newLength = newLength * 2;
            if (newLength < 0 || newLength > MAX_ARRAY_SIZE) {
                newLength = MAX_ARRAY_SIZE;
            }
        }
        let tmp = new Int32Array(newLength);
        tmp.set(this._data);
        this._data = tmp;
    }
    /** Convert the list to a UTF-16 encoded char array. If all values are less
     *  than the 0xFFFF 16-bit code point limit then this is just a char array
     *  of 16-bit char as usual. For values in the supplementary range, encode
     * them as two UTF-16 code units.
     */
    toCharArray() {
        // Optimize for the common case (all data values are < 0xFFFF) to avoid an extra scan
        let resultArray = new Uint16Array(this._size);
        let resultIdx = 0;
        let calculatedPreciseResultSize = false;
        for (let i = 0; i < this._size; i++) {
            let codePoint = this._data[i];
            if (codePoint >= 0 && codePoint < 0x10000) {
                resultArray[resultIdx] = codePoint;
                resultIdx++;
                continue;
            }
            // Calculate the precise result size if we encounter a code point > 0xFFFF
            if (!calculatedPreciseResultSize) {
                let newResultArray = new Uint16Array(this.charArraySize());
                newResultArray.set(resultArray, 0);
                resultArray = newResultArray;
                calculatedPreciseResultSize = true;
            }
            // This will throw RangeError if the code point is not a valid Unicode code point
            let pair = String.fromCodePoint(codePoint);
            resultArray[resultIdx] = pair.charCodeAt(0);
            resultArray[resultIdx + 1] = pair.charCodeAt(1);
            resultIdx += 2;
        }
        return resultArray;
    }
    charArraySize() {
        let result = 0;
        for (let i = 0; i < this._size; i++) {
            result += this._data[i] >= 0x10000 ? 2 : 1;
        }
        return result;
    }
}
__decorate([
    Decorators_1.NotNull
], IntegerList.prototype, "_data", void 0);
__decorate([
    Decorators_1.Override
], IntegerList.prototype, "equals", null);
__decorate([
    Decorators_1.Override
], IntegerList.prototype, "hashCode", null);
__decorate([
    Decorators_1.Override
], IntegerList.prototype, "toString", null);
exports.IntegerList = IntegerList;
//# sourceMappingURL=IntegerList.js.map

/***/ }),

/***/ 5555:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.IntegerStack = void 0;
// ConvertTo-TS run at 2016-10-04T11:26:40.6647101-07:00
const IntegerList_1 = __webpack_require__(8163);
/**
 *
 * @author Sam Harwell
 */
class IntegerStack extends IntegerList_1.IntegerList {
    constructor(arg) {
        super(arg);
    }
    push(value) {
        this.add(value);
    }
    pop() {
        return this.removeAt(this.size - 1);
    }
    peek() {
        return this.get(this.size - 1);
    }
}
exports.IntegerStack = IntegerStack;
//# sourceMappingURL=IntegerStack.js.map

/***/ }),

/***/ 4378:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Interval = void 0;
// ConvertTo-TS run at 2016-10-04T11:26:40.7402214-07:00
const Decorators_1 = __webpack_require__(681);
const INTERVAL_POOL_MAX_VALUE = 1000;
/** An immutable inclusive interval a..b */
class Interval {
    /**
     * @param a The start of the interval
     * @param b The end of the interval (inclusive)
     */
    constructor(a, b) {
        this.a = a;
        this.b = b;
    }
    static get INVALID() {
        return Interval._INVALID;
    }
    /** Interval objects are used readonly so share all with the
     *  same single value a==b up to some max size.  Use an array as a perfect hash.
     *  Return shared object for 0..INTERVAL_POOL_MAX_VALUE or a new
     *  Interval object with a..a in it.  On Java.g4, 218623 IntervalSets
     *  have a..a (set with 1 element).
     */
    static of(a, b) {
        // cache just a..a
        if (a !== b || a < 0 || a > INTERVAL_POOL_MAX_VALUE) {
            return new Interval(a, b);
        }
        if (Interval.cache[a] == null) {
            Interval.cache[a] = new Interval(a, a);
        }
        return Interval.cache[a];
    }
    /** return number of elements between a and b inclusively. x..x is length 1.
     *  if b &lt; a, then length is 0.  9..10 has length 2.
     */
    get length() {
        if (this.b < this.a) {
            return 0;
        }
        return this.b - this.a + 1;
    }
    equals(o) {
        if (o === this) {
            return true;
        }
        else if (!(o instanceof Interval)) {
            return false;
        }
        return this.a === o.a && this.b === o.b;
    }
    hashCode() {
        let hash = 23;
        hash = hash * 31 + this.a;
        hash = hash * 31 + this.b;
        return hash;
    }
    /** Does this start completely before other? Disjoint */
    startsBeforeDisjoint(other) {
        return this.a < other.a && this.b < other.a;
    }
    /** Does this start at or before other? Nondisjoint */
    startsBeforeNonDisjoint(other) {
        return this.a <= other.a && this.b >= other.a;
    }
    /** Does this.a start after other.b? May or may not be disjoint */
    startsAfter(other) {
        return this.a > other.a;
    }
    /** Does this start completely after other? Disjoint */
    startsAfterDisjoint(other) {
        return this.a > other.b;
    }
    /** Does this start after other? NonDisjoint */
    startsAfterNonDisjoint(other) {
        return this.a > other.a && this.a <= other.b; // this.b>=other.b implied
    }
    /** Are both ranges disjoint? I.e., no overlap? */
    disjoint(other) {
        return this.startsBeforeDisjoint(other) || this.startsAfterDisjoint(other);
    }
    /** Are two intervals adjacent such as 0..41 and 42..42? */
    adjacent(other) {
        return this.a === other.b + 1 || this.b === other.a - 1;
    }
    properlyContains(other) {
        return other.a >= this.a && other.b <= this.b;
    }
    /** Return the interval computed from combining this and other */
    union(other) {
        return Interval.of(Math.min(this.a, other.a), Math.max(this.b, other.b));
    }
    /** Return the interval in common between this and o */
    intersection(other) {
        return Interval.of(Math.max(this.a, other.a), Math.min(this.b, other.b));
    }
    /** Return the interval with elements from `this` not in `other`;
     *  `other` must not be totally enclosed (properly contained)
     *  within `this`, which would result in two disjoint intervals
     *  instead of the single one returned by this method.
     */
    differenceNotProperlyContained(other) {
        let diff;
        if (other.startsBeforeNonDisjoint(this)) {
            // other.a to left of this.a (or same)
            diff = Interval.of(Math.max(this.a, other.b + 1), this.b);
        }
        else if (other.startsAfterNonDisjoint(this)) {
            // other.a to right of this.a
            diff = Interval.of(this.a, other.a - 1);
        }
        return diff;
    }
    toString() {
        return this.a + ".." + this.b;
    }
}
Interval._INVALID = new Interval(-1, -2);
Interval.cache = new Array(INTERVAL_POOL_MAX_VALUE + 1);
__decorate([
    Decorators_1.Override
], Interval.prototype, "equals", null);
__decorate([
    Decorators_1.Override
], Interval.prototype, "hashCode", null);
__decorate([
    Decorators_1.Override
], Interval.prototype, "toString", null);
exports.Interval = Interval;
//# sourceMappingURL=Interval.js.map

/***/ }),

/***/ 5462:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.IntervalSet = void 0;
// ConvertTo-TS run at 2016-10-04T11:26:40.8683480-07:00
const ArrayEqualityComparator_1 = __webpack_require__(4339);
const IntegerList_1 = __webpack_require__(8163);
const Interval_1 = __webpack_require__(4378);
const Lexer_1 = __webpack_require__(8170);
const MurmurHash_1 = __webpack_require__(7789);
const Decorators_1 = __webpack_require__(681);
const Token_1 = __webpack_require__(8999);
/**
 * This class implements the {@link IntSet} backed by a sorted array of
 * non-overlapping intervals. It is particularly efficient for representing
 * large collections of numbers, where the majority of elements appear as part
 * of a sequential range of numbers that are all part of the set. For example,
 * the set { 1, 2, 3, 4, 7, 8 } may be represented as { [1, 4], [7, 8] }.
 *
 * This class is able to represent sets containing any combination of values in
 * the range {@link Integer#MIN_VALUE} to {@link Integer#MAX_VALUE}
 * (inclusive).
 */
class IntervalSet {
    constructor(intervals) {
        this.readonly = false;
        if (intervals != null) {
            this._intervals = intervals.slice(0);
        }
        else {
            this._intervals = [];
        }
    }
    static get COMPLETE_CHAR_SET() {
        if (IntervalSet._COMPLETE_CHAR_SET === undefined) {
            IntervalSet._COMPLETE_CHAR_SET = IntervalSet.of(Lexer_1.Lexer.MIN_CHAR_VALUE, Lexer_1.Lexer.MAX_CHAR_VALUE);
            IntervalSet._COMPLETE_CHAR_SET.setReadonly(true);
        }
        return IntervalSet._COMPLETE_CHAR_SET;
    }
    static get EMPTY_SET() {
        if (IntervalSet._EMPTY_SET == null) {
            IntervalSet._EMPTY_SET = new IntervalSet();
            IntervalSet._EMPTY_SET.setReadonly(true);
        }
        return IntervalSet._EMPTY_SET;
    }
    /**
     * Create a set with all ints within range [a..b] (inclusive). If b is omitted, the set contains the single element
     * a.
     */
    static of(a, b = a) {
        let s = new IntervalSet();
        s.add(a, b);
        return s;
    }
    clear() {
        if (this.readonly) {
            throw new Error("can't alter readonly IntervalSet");
        }
        this._intervals.length = 0;
    }
    /** Add interval; i.e., add all integers from a to b to set.
     *  If b&lt;a, do nothing.
     *  Keep list in sorted order (by left range value).
     *  If overlap, combine ranges.  For example,
     *  If this is {1..5, 10..20}, adding 6..7 yields
     *  {1..5, 6..7, 10..20}.  Adding 4..8 yields {1..8, 10..20}.
     */
    add(a, b = a) {
        this.addRange(Interval_1.Interval.of(a, b));
    }
    // copy on write so we can cache a..a intervals and sets of that
    addRange(addition) {
        if (this.readonly) {
            throw new Error("can't alter readonly IntervalSet");
        }
        //System.out.println("add "+addition+" to "+intervals.toString());
        if (addition.b < addition.a) {
            return;
        }
        // find position in list
        // Use iterators as we modify list in place
        for (let i = 0; i < this._intervals.length; i++) {
            let r = this._intervals[i];
            if (addition.equals(r)) {
                return;
            }
            if (addition.adjacent(r) || !addition.disjoint(r)) {
                // next to each other, make a single larger interval
                let bigger = addition.union(r);
                this._intervals[i] = bigger;
                // make sure we didn't just create an interval that
                // should be merged with next interval in list
                while (i < this._intervals.length - 1) {
                    i++;
                    let next = this._intervals[i];
                    if (!bigger.adjacent(next) && bigger.disjoint(next)) {
                        break;
                    }
                    // if we bump up against or overlap next, merge
                    // remove this one
                    this._intervals.splice(i, 1);
                    i--;
                    // move backwards to what we just set
                    this._intervals[i] = bigger.union(next);
                    // set to 3 merged ones
                }
                // first call to next after previous duplicates the result
                return;
            }
            if (addition.startsBeforeDisjoint(r)) {
                // insert before r
                this._intervals.splice(i, 0, addition);
                return;
            }
            // if disjoint and after r, a future iteration will handle it
        }
        // ok, must be after last interval (and disjoint from last interval)
        // just add it
        this._intervals.push(addition);
    }
    /** combine all sets in the array returned the or'd value */
    static or(sets) {
        let r = new IntervalSet();
        for (let s of sets) {
            r.addAll(s);
        }
        return r;
    }
    addAll(set) {
        if (set == null) {
            return this;
        }
        if (set instanceof IntervalSet) {
            let other = set;
            // walk set and add each interval
            let n = other._intervals.length;
            for (let i = 0; i < n; i++) {
                let I = other._intervals[i];
                this.add(I.a, I.b);
            }
        }
        else {
            for (let value of set.toArray()) {
                this.add(value);
            }
        }
        return this;
    }
    complementRange(minElement, maxElement) {
        return this.complement(IntervalSet.of(minElement, maxElement));
    }
    /** {@inheritDoc} */
    complement(vocabulary) {
        if (vocabulary.isNil) {
            // nothing in common with null set
            return IntervalSet.EMPTY_SET;
        }
        let vocabularyIS;
        if (vocabulary instanceof IntervalSet) {
            vocabularyIS = vocabulary;
        }
        else {
            vocabularyIS = new IntervalSet();
            vocabularyIS.addAll(vocabulary);
        }
        return vocabularyIS.subtract(this);
    }
    subtract(a) {
        if (a == null || a.isNil) {
            return new IntervalSet(this._intervals);
        }
        if (a instanceof IntervalSet) {
            return IntervalSet.subtract(this, a);
        }
        let other = new IntervalSet();
        other.addAll(a);
        return IntervalSet.subtract(this, other);
    }
    /**
     * Compute the set difference between two interval sets. The specific
     * operation is `left - right`.
     */
    static subtract(left, right) {
        if (left.isNil) {
            return new IntervalSet();
        }
        let result = new IntervalSet(left._intervals);
        if (right.isNil) {
            // right set has no elements; just return the copy of the current set
            return result;
        }
        let resultI = 0;
        let rightI = 0;
        while (resultI < result._intervals.length && rightI < right._intervals.length) {
            let resultInterval = result._intervals[resultI];
            let rightInterval = right._intervals[rightI];
            // operation: (resultInterval - rightInterval) and update indexes
            if (rightInterval.b < resultInterval.a) {
                rightI++;
                continue;
            }
            if (rightInterval.a > resultInterval.b) {
                resultI++;
                continue;
            }
            let beforeCurrent;
            let afterCurrent;
            if (rightInterval.a > resultInterval.a) {
                beforeCurrent = new Interval_1.Interval(resultInterval.a, rightInterval.a - 1);
            }
            if (rightInterval.b < resultInterval.b) {
                afterCurrent = new Interval_1.Interval(rightInterval.b + 1, resultInterval.b);
            }
            if (beforeCurrent) {
                if (afterCurrent) {
                    // split the current interval into two
                    result._intervals[resultI] = beforeCurrent;
                    result._intervals.splice(resultI + 1, 0, afterCurrent);
                    resultI++;
                    rightI++;
                    continue;
                }
                else {
                    // replace the current interval
                    result._intervals[resultI] = beforeCurrent;
                    resultI++;
                    continue;
                }
            }
            else {
                if (afterCurrent) {
                    // replace the current interval
                    result._intervals[resultI] = afterCurrent;
                    rightI++;
                    continue;
                }
                else {
                    // remove the current interval (thus no need to increment resultI)
                    result._intervals.splice(resultI, 1);
                    continue;
                }
            }
        }
        // If rightI reached right.intervals.size, no more intervals to subtract from result.
        // If resultI reached result.intervals.size, we would be subtracting from an empty set.
        // Either way, we are done.
        return result;
    }
    or(a) {
        let o = new IntervalSet();
        o.addAll(this);
        o.addAll(a);
        return o;
    }
    /** {@inheritDoc} */
    and(other) {
        if (other.isNil) { //|| !(other instanceof IntervalSet) ) {
            // nothing in common with null set
            return new IntervalSet();
        }
        let myIntervals = this._intervals;
        let theirIntervals = other._intervals;
        let intersection;
        let mySize = myIntervals.length;
        let theirSize = theirIntervals.length;
        let i = 0;
        let j = 0;
        // iterate down both interval lists looking for nondisjoint intervals
        while (i < mySize && j < theirSize) {
            let mine = myIntervals[i];
            let theirs = theirIntervals[j];
            //System.out.println("mine="+mine+" and theirs="+theirs);
            if (mine.startsBeforeDisjoint(theirs)) {
                // move this iterator looking for interval that might overlap
                i++;
            }
            else if (theirs.startsBeforeDisjoint(mine)) {
                // move other iterator looking for interval that might overlap
                j++;
            }
            else if (mine.properlyContains(theirs)) {
                // overlap, add intersection, get next theirs
                if (!intersection) {
                    intersection = new IntervalSet();
                }
                intersection.addRange(mine.intersection(theirs));
                j++;
            }
            else if (theirs.properlyContains(mine)) {
                // overlap, add intersection, get next mine
                if (!intersection) {
                    intersection = new IntervalSet();
                }
                intersection.addRange(mine.intersection(theirs));
                i++;
            }
            else if (!mine.disjoint(theirs)) {
                // overlap, add intersection
                if (!intersection) {
                    intersection = new IntervalSet();
                }
                intersection.addRange(mine.intersection(theirs));
                // Move the iterator of lower range [a..b], but not
                // the upper range as it may contain elements that will collide
                // with the next iterator. So, if mine=[0..115] and
                // theirs=[115..200], then intersection is 115 and move mine
                // but not theirs as theirs may collide with the next range
                // in thisIter.
                // move both iterators to next ranges
                if (mine.startsAfterNonDisjoint(theirs)) {
                    j++;
                }
                else if (theirs.startsAfterNonDisjoint(mine)) {
                    i++;
                }
            }
        }
        if (!intersection) {
            return new IntervalSet();
        }
        return intersection;
    }
    /** {@inheritDoc} */
    contains(el) {
        let n = this._intervals.length;
        let l = 0;
        let r = n - 1;
        // Binary search for the element in the (sorted, disjoint) array of intervals.
        while (l <= r) {
            let m = (l + r) >> 1;
            let I = this._intervals[m];
            let a = I.a;
            let b = I.b;
            if (b < el) {
                l = m + 1;
            }
            else if (a > el) {
                r = m - 1;
            }
            else {
                // el >= a && el <= b
                return true;
            }
        }
        return false;
    }
    /** {@inheritDoc} */
    get isNil() {
        return this._intervals == null || this._intervals.length === 0;
    }
    /**
     * Returns the maximum value contained in the set if not isNil.
     *
     * @return the maximum value contained in the set.
     * @throws RangeError if set is empty
     */
    get maxElement() {
        if (this.isNil) {
            throw new RangeError("set is empty");
        }
        let last = this._intervals[this._intervals.length - 1];
        return last.b;
    }
    /**
     * Returns the minimum value contained in the set if not isNil.
     *
     * @return the minimum value contained in the set.
     * @throws RangeError if set is empty
     */
    get minElement() {
        if (this.isNil) {
            throw new RangeError("set is empty");
        }
        return this._intervals[0].a;
    }
    /** Return a list of Interval objects. */
    get intervals() {
        return this._intervals;
    }
    hashCode() {
        let hash = MurmurHash_1.MurmurHash.initialize();
        for (let I of this._intervals) {
            hash = MurmurHash_1.MurmurHash.update(hash, I.a);
            hash = MurmurHash_1.MurmurHash.update(hash, I.b);
        }
        hash = MurmurHash_1.MurmurHash.finish(hash, this._intervals.length * 2);
        return hash;
    }
    /** Are two IntervalSets equal?  Because all intervals are sorted
     *  and disjoint, equals is a simple linear walk over both lists
     *  to make sure they are the same.  Interval.equals() is used
     *  by the List.equals() method to check the ranges.
     */
    equals(o) {
        if (o == null || !(o instanceof IntervalSet)) {
            return false;
        }
        return ArrayEqualityComparator_1.ArrayEqualityComparator.INSTANCE.equals(this._intervals, o._intervals);
    }
    toString(elemAreChar = false) {
        let buf = "";
        if (this._intervals == null || this._intervals.length === 0) {
            return "{}";
        }
        if (this.size > 1) {
            buf += "{";
        }
        let first = true;
        for (let I of this._intervals) {
            if (first) {
                first = false;
            }
            else {
                buf += ", ";
            }
            let a = I.a;
            let b = I.b;
            if (a === b) {
                if (a === Token_1.Token.EOF) {
                    buf += "<EOF>";
                }
                else if (elemAreChar) {
                    buf += "'" + String.fromCodePoint(a) + "'";
                }
                else {
                    buf += a;
                }
            }
            else {
                if (elemAreChar) {
                    buf += "'" + String.fromCodePoint(a) + "'..'" + String.fromCodePoint(b) + "'";
                }
                else {
                    buf += a + ".." + b;
                }
            }
        }
        if (this.size > 1) {
            buf += "}";
        }
        return buf;
    }
    toStringVocabulary(vocabulary) {
        if (this._intervals == null || this._intervals.length === 0) {
            return "{}";
        }
        let buf = "";
        if (this.size > 1) {
            buf += "{";
        }
        let first = true;
        for (let I of this._intervals) {
            if (first) {
                first = false;
            }
            else {
                buf += ", ";
            }
            let a = I.a;
            let b = I.b;
            if (a === b) {
                buf += this.elementName(vocabulary, a);
            }
            else {
                for (let i = a; i <= b; i++) {
                    if (i > a) {
                        buf += ", ";
                    }
                    buf += this.elementName(vocabulary, i);
                }
            }
        }
        if (this.size > 1) {
            buf += "}";
        }
        return buf;
    }
    elementName(vocabulary, a) {
        if (a === Token_1.Token.EOF) {
            return "<EOF>";
        }
        else if (a === Token_1.Token.EPSILON) {
            return "<EPSILON>";
        }
        else {
            return vocabulary.getDisplayName(a);
        }
    }
    get size() {
        let n = 0;
        let numIntervals = this._intervals.length;
        if (numIntervals === 1) {
            let firstInterval = this._intervals[0];
            return firstInterval.b - firstInterval.a + 1;
        }
        for (let i = 0; i < numIntervals; i++) {
            let I = this._intervals[i];
            n += (I.b - I.a + 1);
        }
        return n;
    }
    toIntegerList() {
        let values = new IntegerList_1.IntegerList(this.size);
        let n = this._intervals.length;
        for (let i = 0; i < n; i++) {
            let I = this._intervals[i];
            let a = I.a;
            let b = I.b;
            for (let v = a; v <= b; v++) {
                values.add(v);
            }
        }
        return values;
    }
    toSet() {
        let s = new Set();
        for (let I of this._intervals) {
            let a = I.a;
            let b = I.b;
            for (let v = a; v <= b; v++) {
                s.add(v);
            }
        }
        return s;
    }
    toArray() {
        let values = new Array();
        let n = this._intervals.length;
        for (let i = 0; i < n; i++) {
            let I = this._intervals[i];
            let a = I.a;
            let b = I.b;
            for (let v = a; v <= b; v++) {
                values.push(v);
            }
        }
        return values;
    }
    remove(el) {
        if (this.readonly) {
            throw new Error("can't alter readonly IntervalSet");
        }
        let n = this._intervals.length;
        for (let i = 0; i < n; i++) {
            let I = this._intervals[i];
            let a = I.a;
            let b = I.b;
            if (el < a) {
                break; // list is sorted and el is before this interval; not here
            }
            // if whole interval x..x, rm
            if (el === a && el === b) {
                this._intervals.splice(i, 1);
                break;
            }
            // if on left edge x..b, adjust left
            if (el === a) {
                this._intervals[i] = Interval_1.Interval.of(I.a + 1, I.b);
                break;
            }
            // if on right edge a..x, adjust right
            if (el === b) {
                this._intervals[i] = Interval_1.Interval.of(I.a, I.b - 1);
                break;
            }
            // if in middle a..x..b, split interval
            if (el > a && el < b) { // found in this interval
                let oldb = I.b;
                this._intervals[i] = Interval_1.Interval.of(I.a, el - 1); // [a..x-1]
                this.add(el + 1, oldb); // add [x+1..b]
            }
        }
    }
    get isReadonly() {
        return this.readonly;
    }
    setReadonly(readonly) {
        if (this.readonly && !readonly) {
            throw new Error("can't alter readonly IntervalSet");
        }
        this.readonly = readonly;
    }
}
__decorate([
    Decorators_1.Override
], IntervalSet.prototype, "addAll", null);
__decorate([
    Decorators_1.Override
], IntervalSet.prototype, "complement", null);
__decorate([
    Decorators_1.Override
], IntervalSet.prototype, "subtract", null);
__decorate([
    Decorators_1.Override
], IntervalSet.prototype, "or", null);
__decorate([
    Decorators_1.Override
], IntervalSet.prototype, "and", null);
__decorate([
    Decorators_1.Override
], IntervalSet.prototype, "contains", null);
__decorate([
    Decorators_1.Override
], IntervalSet.prototype, "isNil", null);
__decorate([
    Decorators_1.Override
], IntervalSet.prototype, "hashCode", null);
__decorate([
    Decorators_1.Override
], IntervalSet.prototype, "equals", null);
__decorate([
    __param(0, Decorators_1.NotNull)
], IntervalSet.prototype, "toStringVocabulary", null);
__decorate([
    Decorators_1.NotNull,
    __param(0, Decorators_1.NotNull)
], IntervalSet.prototype, "elementName", null);
__decorate([
    Decorators_1.Override
], IntervalSet.prototype, "size", null);
__decorate([
    Decorators_1.Override
], IntervalSet.prototype, "remove", null);
__decorate([
    Decorators_1.NotNull
], IntervalSet, "of", null);
__decorate([
    Decorators_1.NotNull
], IntervalSet, "subtract", null);
exports.IntervalSet = IntervalSet;
//# sourceMappingURL=IntervalSet.js.map

/***/ }),

/***/ 1412:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.MultiMap = void 0;
// ConvertTo-TS run at 2016-10-04T11:26:42.1346951-07:00
class MultiMap extends Map {
    constructor() {
        super();
    }
    map(key, value) {
        let elementsForKey = super.get(key);
        if (!elementsForKey) {
            elementsForKey = [];
            super.set(key, elementsForKey);
        }
        elementsForKey.push(value);
    }
    getPairs() {
        let pairs = [];
        this.forEach((values, key) => {
            values.forEach((v) => {
                pairs.push([key, v]);
            });
        });
        return pairs;
    }
}
exports.MultiMap = MultiMap;
//# sourceMappingURL=MultiMap.js.map

/***/ }),

/***/ 7789:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.MurmurHash = void 0;
/**
 *
 * @author Sam Harwell
 */
var MurmurHash;
(function (MurmurHash) {
    const DEFAULT_SEED = 0;
    /**
     * Initialize the hash using the specified `seed`.
     *
     * @param seed the seed (optional)
     * @returns the intermediate hash value
     */
    function initialize(seed = DEFAULT_SEED) {
        return seed;
    }
    MurmurHash.initialize = initialize;
    /**
     * Update the intermediate hash value for the next input `value`.
     *
     * @param hash the intermediate hash value
     * @param value the value to add to the current hash
     * @returns the updated intermediate hash value
     */
    function update(hash, value) {
        const c1 = 0xCC9E2D51;
        const c2 = 0x1B873593;
        const r1 = 15;
        const r2 = 13;
        const m = 5;
        const n = 0xE6546B64;
        if (value == null) {
            value = 0;
        }
        else if (typeof value === "string") {
            value = hashString(value);
        }
        else if (typeof value === "object") {
            value = value.hashCode();
        }
        let k = value;
        k = Math.imul(k, c1);
        k = (k << r1) | (k >>> (32 - r1));
        k = Math.imul(k, c2);
        hash = hash ^ k;
        hash = (hash << r2) | (hash >>> (32 - r2));
        hash = Math.imul(hash, m) + n;
        return hash & 0xFFFFFFFF;
    }
    MurmurHash.update = update;
    /**
     * Apply the final computation steps to the intermediate value `hash`
     * to form the final result of the MurmurHash 3 hash function.
     *
     * @param hash the intermediate hash value
     * @param numberOfWords the number of integer values added to the hash
     * @returns the final hash result
     */
    function finish(hash, numberOfWords) {
        hash = hash ^ (numberOfWords * 4);
        hash = hash ^ (hash >>> 16);
        hash = Math.imul(hash, 0x85EBCA6B);
        hash = hash ^ (hash >>> 13);
        hash = Math.imul(hash, 0xC2B2AE35);
        hash = hash ^ (hash >>> 16);
        return hash;
    }
    MurmurHash.finish = finish;
    /**
     * Utility function to compute the hash code of an array using the
     * MurmurHash algorithm.
     *
     * @param <T> the array element type
     * @param data the array data
     * @param seed the seed for the MurmurHash algorithm
     * @returns the hash code of the data
     */
    function hashCode(data, seed = DEFAULT_SEED) {
        let hash = initialize(seed);
        let length = 0;
        for (let value of data) {
            hash = update(hash, value);
            length++;
        }
        hash = finish(hash, length);
        return hash;
    }
    MurmurHash.hashCode = hashCode;
    /**
     * Function to hash a string. Based on the implementation found here:
     * http://stackoverflow.com/a/7616484
     */
    function hashString(str) {
        let len = str.length;
        if (len === 0) {
            return 0;
        }
        let hash = 0;
        for (let i = 0; i < len; i++) {
            let c = str.charCodeAt(i);
            hash = (((hash << 5) >>> 0) - hash) + c;
            hash |= 0;
        }
        return hash;
    }
})(MurmurHash = exports.MurmurHash || (exports.MurmurHash = {}));
//# sourceMappingURL=MurmurHash.js.map

/***/ }),

/***/ 8578:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ObjectEqualityComparator = void 0;
const Decorators_1 = __webpack_require__(681);
/**
 * This default implementation of {@link EqualityComparator} uses object equality
 * for comparisons by calling {@link Object#hashCode} and {@link Object#equals}.
 *
 * @author Sam Harwell
 */
class ObjectEqualityComparator {
    /**
     * {@inheritDoc}
     *
     * This implementation returns
     * `obj.`{@link Object#hashCode hashCode()}.
     */
    hashCode(obj) {
        if (obj == null) {
            return 0;
        }
        return obj.hashCode();
    }
    /**
     * {@inheritDoc}
     *
     * This implementation relies on object equality. If both objects are
     * `undefined` or `null`, this method returns `true`. Otherwise if only
     * `a` is `undefined` or `null`, this method returns `false`. Otherwise,
     * this method returns the result of
     * `a.`{@link Object#equals equals}`(b)`.
     */
    equals(a, b) {
        if (a == null) {
            return b == null;
        }
        return a.equals(b);
    }
}
ObjectEqualityComparator.INSTANCE = new ObjectEqualityComparator();
__decorate([
    Decorators_1.Override
], ObjectEqualityComparator.prototype, "hashCode", null);
__decorate([
    Decorators_1.Override
], ObjectEqualityComparator.prototype, "equals", null);
exports.ObjectEqualityComparator = ObjectEqualityComparator;
//# sourceMappingURL=ObjectEqualityComparator.js.map

/***/ }),

/***/ 7455:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ParseCancellationException = void 0;
// ConvertTo-TS run at 2016-10-04T11:26:42.5447085-07:00
/**
 * This exception is thrown to cancel a parsing operation. This exception does
 * not extend {@link RecognitionException}, allowing it to bypass the standard
 * error recovery mechanisms. {@link BailErrorStrategy} throws this exception in
 * response to a parse error.
 *
 * @author Sam Harwell
 */
class ParseCancellationException extends Error {
    constructor(cause) {
        super(cause.message);
        this.cause = cause;
        this.stack = cause.stack;
    }
    getCause() {
        return this.cause;
    }
}
exports.ParseCancellationException = ParseCancellationException;
//# sourceMappingURL=ParseCancellationException.js.map

/***/ }),

/***/ 8992:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.UUID = void 0;
const MurmurHash_1 = __webpack_require__(7789);
class UUID {
    constructor(mostSigBits, moreSigBits, lessSigBits, leastSigBits) {
        this.data = new Uint32Array(4);
        this.data[0] = mostSigBits;
        this.data[1] = moreSigBits;
        this.data[2] = lessSigBits;
        this.data[3] = leastSigBits;
    }
    static fromString(data) {
        if (!/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/.test(data)) {
            throw new Error("Incorrectly formatted UUID");
        }
        let segments = data.split("-");
        let mostSigBits = parseInt(segments[0], 16);
        let moreSigBits = ((parseInt(segments[1], 16) << 16) >>> 0) + parseInt(segments[2], 16);
        let lessSigBits = ((parseInt(segments[3], 16) << 16) >>> 0) + parseInt(segments[4].substr(0, 4), 16);
        let leastSigBits = parseInt(segments[4].substr(-8), 16);
        return new UUID(mostSigBits, moreSigBits, lessSigBits, leastSigBits);
    }
    hashCode() {
        return MurmurHash_1.MurmurHash.hashCode([this.data[0], this.data[1], this.data[2], this.data[3]]);
    }
    equals(obj) {
        if (obj === this) {
            return true;
        }
        else if (!(obj instanceof UUID)) {
            return false;
        }
        return this.data[0] === obj.data[0]
            && this.data[1] === obj.data[1]
            && this.data[2] === obj.data[2]
            && this.data[3] === obj.data[3];
    }
    toString() {
        return ("00000000" + this.data[0].toString(16)).substr(-8)
            + "-" + ("0000" + (this.data[1] >>> 16).toString(16)).substr(-4)
            + "-" + ("0000" + this.data[1].toString(16)).substr(-4)
            + "-" + ("0000" + (this.data[2] >>> 16).toString(16)).substr(-4)
            + "-" + ("0000" + this.data[2].toString(16)).substr(-4)
            + ("00000000" + this.data[3].toString(16)).substr(-8);
    }
}
exports.UUID = UUID;
//# sourceMappingURL=UUID.js.map

/***/ }),

/***/ 3070:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.toCharArray = exports.toMap = exports.equals = exports.join = exports.escapeWhitespace = void 0;
function escapeWhitespace(s, escapeSpaces) {
    return escapeSpaces ? s.replace(/ /, "\u00B7") : s
        .replace(/\t/, "\\t")
        .replace(/\n/, "\\n")
        .replace(/\r/, "\\r");
}
exports.escapeWhitespace = escapeWhitespace;
// Seriously: why isn't this built in to java? ugh!
function join(collection, separator) {
    let buf = "";
    let first = true;
    for (let current of collection) {
        if (first) {
            first = false;
        }
        else {
            buf += separator;
        }
        buf += current;
    }
    return buf;
}
exports.join = join;
function equals(x, y) {
    if (x === y) {
        return true;
    }
    if (x === undefined || y === undefined) {
        return false;
    }
    return x.equals(y);
}
exports.equals = equals;
// export function numNonnull(data: any[]): number {
// 	let n: number =  0;
// 	if ( data == null ) return n;
// 	for (let o of data) {
// 		if ( o!=null ) n++;
// 	}
// 	return n;
// }
// export function removeAllElements<T>(data: Collection<T>, value: T): void {
// 	if ( data==null ) return;
// 	while ( data.contains(value) ) data.remove(value);
// }
// export function writeFile(@NotNull file: File, @NotNull content: Uint8Array): void {
// 	let fos: FileOutputStream = new FileOutputStream(file);
// 	try {
// 		fos.write(content);
// 	} finally {
// 		fos.close();
// 	}
// }
// export function writeFile(@NotNull fileName: string, @NotNull content: string): void {
// 	writeFile(fileName, content, null);
// }
// export function writeFile(@NotNull fileName: string, @NotNull content: string, @Nullable encoding: string): void {
// 	let f: File =  new File(fileName);
// 	let fos: FileOutputStream =  new FileOutputStream(f);
// 	let osw: OutputStreamWriter;
// 	if (encoding != null) {
// 		osw = new OutputStreamWriter(fos, encoding);
// 	}
// 	else {
// 		osw = new OutputStreamWriter(fos);
// 	}
// 	try {
// 		osw.write(content);
// 	}
// 	finally {
// 		osw.close();
// 	}
// }
// @NotNull
// export function readFile(@NotNull fileName: string): char[] {
// 	return readFile(fileName, null);
// }
// @NotNull
// export function readFile(@NotNull fileName: string, @Nullable encoding: string): char[] {
// 	let f: File =  new File(fileName);
// 	let size: number =  (int)f.length();
// 	let isr: InputStreamReader;
// 	let fis: FileInputStream =  new FileInputStream(fileName);
// 	if ( encoding!=null ) {
// 		isr = new InputStreamReader(fis, encoding);
// 	}
// 	else {
// 		isr = new InputStreamReader(fis);
// 	}
// 	let data: char[] =  null;
// 	try {
// 		data = new char[size];
// 		let n: number =  isr.read(data);
// 		if (n < data.length) {
// 			data = Arrays.copyOf(data, n);
// 		}
// 	}
// 	finally {
// 		isr.close();
// 	}
// 	return data;
// }
// export function removeAll<T>(@NotNull predicate: List<T> list,@NotNull Predicate<? super T>): void {
// 	let j: number =  0;
// 	for (let i = 0; i < list.size; i++) {
// 		let item: T =  list.get(i);
// 		if (!predicate.eval(item)) {
// 			if (j != i) {
// 				list.set(j, item);
// 			}
// 			j++;
// 		}
// 	}
// 	if (j < list.size) {
// 		list.subList(j, list.size).clear();
// 	}
// }
// export function removeAll<T>(@NotNull predicate: Iterable<T> iterable,@NotNull Predicate<? super T>): void {
// 	if (iterable instanceof List<?>) {
// 		removeAll((List<T>)iterable, predicate);
// 		return;
// 	}
// 	for (Iterator<T> iterator = iterable.iterator(); iterator.hasNext(); ) {
// 		let item: T =  iterator.next();
// 		if (predicate.eval(item)) {
// 			iterator.remove();
// 		}
// 	}
// }
/** Convert array of strings to string&rarr;index map. Useful for
 *  converting rulenames to name&rarr;ruleindex map.
 */
function toMap(keys) {
    let m = new Map();
    for (let i = 0; i < keys.length; i++) {
        m.set(keys[i], i);
    }
    return m;
}
exports.toMap = toMap;
function toCharArray(str) {
    if (typeof str === "string") {
        let result = new Uint16Array(str.length);
        for (let i = 0; i < str.length; i++) {
            result[i] = str.charCodeAt(i);
        }
        return result;
    }
    else {
        return str.toCharArray();
    }
}
exports.toCharArray = toCharArray;
// /**
// 	* @since 4.5
// 	*/
// @NotNull
// export function toSet(@NotNull bits: BitSet): IntervalSet {
// 	let s: IntervalSet =  new IntervalSet();
// 	let i: number =  bits.nextSetBit(0);
// 	while ( i >= 0 ) {
// 		s.add(i);
// 		i = bits.nextSetBit(i+1);
// 	}
// 	return s;
// }
//# sourceMappingURL=Utils.js.map

/***/ }),

/***/ 4941:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AbstractParseTreeVisitor = void 0;
const Decorators_1 = __webpack_require__(681);
class AbstractParseTreeVisitor {
    /**
     * {@inheritDoc}
     *
     * The default implementation calls {@link ParseTree#accept} on the
     * specified tree.
     */
    visit(tree) {
        return tree.accept(this);
    }
    /**
     * {@inheritDoc}
     *
     * The default implementation initializes the aggregate result to
     * {@link #defaultResult defaultResult()}. Before visiting each child, it
     * calls {@link #shouldVisitNextChild shouldVisitNextChild}; if the result
     * is `false` no more children are visited and the current aggregate
     * result is returned. After visiting a child, the aggregate result is
     * updated by calling {@link #aggregateResult aggregateResult} with the
     * previous aggregate result and the result of visiting the child.
     *
     * The default implementation is not safe for use in visitors that modify
     * the tree structure. Visitors that modify the tree should override this
     * method to behave properly in respect to the specific algorithm in use.
     */
    visitChildren(node) {
        let result = this.defaultResult();
        let n = node.childCount;
        for (let i = 0; i < n; i++) {
            if (!this.shouldVisitNextChild(node, result)) {
                break;
            }
            let c = node.getChild(i);
            let childResult = c.accept(this);
            result = this.aggregateResult(result, childResult);
        }
        return result;
    }
    /**
     * {@inheritDoc}
     *
     * The default implementation returns the result of
     * {@link #defaultResult defaultResult}.
     */
    visitTerminal(node) {
        return this.defaultResult();
    }
    /**
     * {@inheritDoc}
     *
     * The default implementation returns the result of
     * {@link #defaultResult defaultResult}.
     */
    visitErrorNode(node) {
        return this.defaultResult();
    }
    /**
     * Aggregates the results of visiting multiple children of a node. After
     * either all children are visited or {@link #shouldVisitNextChild} returns
     * `false`, the aggregate value is returned as the result of
     * {@link #visitChildren}.
     *
     * The default implementation returns `nextResult`, meaning
     * {@link #visitChildren} will return the result of the last child visited
     * (or return the initial value if the node has no children).
     *
     * @param aggregate The previous aggregate value. In the default
     * implementation, the aggregate value is initialized to
     * {@link #defaultResult}, which is passed as the `aggregate` argument
     * to this method after the first child node is visited.
     * @param nextResult The result of the immediately preceeding call to visit
     * a child node.
     *
     * @returns The updated aggregate result.
     */
    aggregateResult(aggregate, nextResult) {
        return nextResult;
    }
    /**
     * This method is called after visiting each child in
     * {@link #visitChildren}. This method is first called before the first
     * child is visited; at that point `currentResult` will be the initial
     * value (in the default implementation, the initial value is returned by a
     * call to {@link #defaultResult}. This method is not called after the last
     * child is visited.
     *
     * The default implementation always returns `true`, indicating that
     * `visitChildren` should only return after all children are visited.
     * One reason to override this method is to provide a "short circuit"
     * evaluation option for situations where the result of visiting a single
     * child has the potential to determine the result of the visit operation as
     * a whole.
     *
     * @param node The {@link RuleNode} whose children are currently being
     * visited.
     * @param currentResult The current aggregate result of the children visited
     * to the current point.
     *
     * @returns `true` to continue visiting children. Otherwise return
     * `false` to stop visiting children and immediately return the
     * current aggregate result from {@link #visitChildren}.
     */
    shouldVisitNextChild(node, currentResult) {
        return true;
    }
}
__decorate([
    Decorators_1.Override,
    __param(0, Decorators_1.NotNull)
], AbstractParseTreeVisitor.prototype, "visit", null);
__decorate([
    Decorators_1.Override,
    __param(0, Decorators_1.NotNull)
], AbstractParseTreeVisitor.prototype, "visitChildren", null);
__decorate([
    Decorators_1.Override,
    __param(0, Decorators_1.NotNull)
], AbstractParseTreeVisitor.prototype, "visitTerminal", null);
__decorate([
    Decorators_1.Override,
    __param(0, Decorators_1.NotNull)
], AbstractParseTreeVisitor.prototype, "visitErrorNode", null);
__decorate([
    __param(0, Decorators_1.NotNull)
], AbstractParseTreeVisitor.prototype, "shouldVisitNextChild", null);
exports.AbstractParseTreeVisitor = AbstractParseTreeVisitor;
//# sourceMappingURL=AbstractParseTreeVisitor.js.map

/***/ }),

/***/ 135:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ErrorNode = void 0;
// ConvertTo-TS run at 2016-10-04T11:26:47.4646355-07:00
const Decorators_1 = __webpack_require__(681);
const TerminalNode_1 = __webpack_require__(9466);
/** Represents a token that was consumed during resynchronization
 *  rather than during a valid match operation. For example,
 *  we will create this kind of a node during single token insertion
 *  and deletion as well as during "consume until error recovery set"
 *  upon no viable alternative exceptions.
 */
class ErrorNode extends TerminalNode_1.TerminalNode {
    constructor(token) {
        super(token);
    }
    accept(visitor) {
        return visitor.visitErrorNode(this);
    }
}
__decorate([
    Decorators_1.Override
], ErrorNode.prototype, "accept", null);
exports.ErrorNode = ErrorNode;
//# sourceMappingURL=ErrorNode.js.map

/***/ }),

/***/ 9814:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
Object.defineProperty(exports, "__esModule", ({ value: true }));
//# sourceMappingURL=ParseTree.js.map

/***/ }),

/***/ 2099:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
Object.defineProperty(exports, "__esModule", ({ value: true }));
//# sourceMappingURL=ParseTreeListener.js.map

/***/ }),

/***/ 6259:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ParseTreeProperty = void 0;
/**
 * Associate a property with a parse tree node. Useful with parse tree listeners
 * that need to associate values with particular tree nodes, kind of like
 * specifying a return value for the listener event method that visited a
 * particular node. Example:
 *
 * ```
 * ParseTreeProperty<Integer> values = new ParseTreeProperty<Integer>();
 * values.put(tree, 36);
 * int x = values.get(tree);
 * values.removeFrom(tree);
 * ```
 *
 * You would make one decl (values here) in the listener and use lots of times
 * in your event methods.
 */
class ParseTreeProperty {
    constructor(name = "ParseTreeProperty") {
        this._symbol = Symbol(name);
    }
    get(node) {
        return node[this._symbol];
    }
    set(node, value) {
        node[this._symbol] = value;
    }
    removeFrom(node) {
        let result = node[this._symbol];
        delete node[this._symbol];
        return result;
    }
}
exports.ParseTreeProperty = ParseTreeProperty;
//# sourceMappingURL=ParseTreeProperty.js.map

/***/ }),

/***/ 5988:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
Object.defineProperty(exports, "__esModule", ({ value: true }));
//# sourceMappingURL=ParseTreeVisitor.js.map

/***/ }),

/***/ 758:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ParseTreeWalker = void 0;
const ErrorNode_1 = __webpack_require__(135);
const TerminalNode_1 = __webpack_require__(9466);
const RuleNode_1 = __webpack_require__(9297);
class ParseTreeWalker {
    /**
     * Performs a walk on the given parse tree starting at the root and going down recursively
     * with depth-first search. On each node, {@link ParseTreeWalker#enterRule} is called before
     * recursively walking down into child nodes, then
     * {@link ParseTreeWalker#exitRule} is called after the recursive call to wind up.
     * @param listener The listener used by the walker to process grammar rules
     * @param t The parse tree to be walked on
     */
    walk(listener, t) {
        let nodeStack = [];
        let indexStack = [];
        let currentNode = t;
        let currentIndex = 0;
        while (currentNode) {
            // pre-order visit
            if (currentNode instanceof ErrorNode_1.ErrorNode) {
                if (listener.visitErrorNode) {
                    listener.visitErrorNode(currentNode);
                }
            }
            else if (currentNode instanceof TerminalNode_1.TerminalNode) {
                if (listener.visitTerminal) {
                    listener.visitTerminal(currentNode);
                }
            }
            else {
                this.enterRule(listener, currentNode);
            }
            // Move down to first child, if exists
            if (currentNode.childCount > 0) {
                nodeStack.push(currentNode);
                indexStack.push(currentIndex);
                currentIndex = 0;
                currentNode = currentNode.getChild(0);
                continue;
            }
            // No child nodes, so walk tree
            do {
                // post-order visit
                if (currentNode instanceof RuleNode_1.RuleNode) {
                    this.exitRule(listener, currentNode);
                }
                // No parent, so no siblings
                if (nodeStack.length === 0) {
                    currentNode = undefined;
                    currentIndex = 0;
                    break;
                }
                // Move to next sibling if possible
                let last = nodeStack[nodeStack.length - 1];
                currentIndex++;
                currentNode = currentIndex < last.childCount ? last.getChild(currentIndex) : undefined;
                if (currentNode) {
                    break;
                }
                // No next sibling, so move up
                currentNode = nodeStack.pop();
                currentIndex = indexStack.pop();
            } while (currentNode);
        }
    }
    /**
     * Enters a grammar rule by first triggering the generic event {@link ParseTreeListener#enterEveryRule}
     * then by triggering the event specific to the given parse tree node
     * @param listener The listener responding to the trigger events
     * @param r The grammar rule containing the rule context
     */
    enterRule(listener, r) {
        let ctx = r.ruleContext;
        if (listener.enterEveryRule) {
            listener.enterEveryRule(ctx);
        }
        ctx.enterRule(listener);
    }
    /**
     * Exits a grammar rule by first triggering the event specific to the given parse tree node
     * then by triggering the generic event {@link ParseTreeListener#exitEveryRule}
     * @param listener The listener responding to the trigger events
     * @param r The grammar rule containing the rule context
     */
    exitRule(listener, r) {
        let ctx = r.ruleContext;
        ctx.exitRule(listener);
        if (listener.exitEveryRule) {
            listener.exitEveryRule(ctx);
        }
    }
}
exports.ParseTreeWalker = ParseTreeWalker;
(function (ParseTreeWalker) {
    ParseTreeWalker.DEFAULT = new ParseTreeWalker();
})(ParseTreeWalker = exports.ParseTreeWalker || (exports.ParseTreeWalker = {}));
//# sourceMappingURL=ParseTreeWalker.js.map

/***/ }),

/***/ 9297:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.RuleNode = void 0;
class RuleNode {
}
exports.RuleNode = RuleNode;
//# sourceMappingURL=RuleNode.js.map

/***/ }),

/***/ 6347:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
Object.defineProperty(exports, "__esModule", ({ value: true }));
//# sourceMappingURL=SyntaxTree.js.map

/***/ }),

/***/ 9466:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.TerminalNode = void 0;
// ConvertTo-TS run at 2016-10-04T11:26:48.1433686-07:00
const Interval_1 = __webpack_require__(4378);
const Decorators_1 = __webpack_require__(681);
const Token_1 = __webpack_require__(8999);
class TerminalNode {
    constructor(symbol) {
        this._symbol = symbol;
    }
    getChild(i) {
        throw new RangeError("Terminal Node has no children.");
    }
    get symbol() {
        return this._symbol;
    }
    get parent() {
        return this._parent;
    }
    setParent(parent) {
        this._parent = parent;
    }
    get payload() {
        return this._symbol;
    }
    get sourceInterval() {
        let tokenIndex = this._symbol.tokenIndex;
        return new Interval_1.Interval(tokenIndex, tokenIndex);
    }
    get childCount() {
        return 0;
    }
    accept(visitor) {
        return visitor.visitTerminal(this);
    }
    get text() {
        return this._symbol.text || "";
    }
    toStringTree(parser) {
        return this.toString();
    }
    toString() {
        if (this._symbol.type === Token_1.Token.EOF) {
            return "<EOF>";
        }
        return this._symbol.text || "";
    }
}
__decorate([
    Decorators_1.Override
], TerminalNode.prototype, "getChild", null);
__decorate([
    Decorators_1.Override
], TerminalNode.prototype, "parent", null);
__decorate([
    Decorators_1.Override
], TerminalNode.prototype, "setParent", null);
__decorate([
    Decorators_1.Override
], TerminalNode.prototype, "payload", null);
__decorate([
    Decorators_1.Override
], TerminalNode.prototype, "sourceInterval", null);
__decorate([
    Decorators_1.Override
], TerminalNode.prototype, "childCount", null);
__decorate([
    Decorators_1.Override
], TerminalNode.prototype, "accept", null);
__decorate([
    Decorators_1.Override
], TerminalNode.prototype, "text", null);
__decorate([
    Decorators_1.Override
], TerminalNode.prototype, "toStringTree", null);
__decorate([
    Decorators_1.Override
], TerminalNode.prototype, "toString", null);
exports.TerminalNode = TerminalNode;
//# sourceMappingURL=TerminalNode.js.map

/***/ }),

/***/ 1756:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
Object.defineProperty(exports, "__esModule", ({ value: true }));
//# sourceMappingURL=Tree.js.map

/***/ }),

/***/ 1180:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Trees = void 0;
const ATN_1 = __webpack_require__(8148);
const CommonToken_1 = __webpack_require__(2058);
const ErrorNode_1 = __webpack_require__(135);
const Decorators_1 = __webpack_require__(681);
const Parser_1 = __webpack_require__(3679);
const ParserRuleContext_1 = __webpack_require__(9248);
const RuleNode_1 = __webpack_require__(9297);
const TerminalNode_1 = __webpack_require__(9466);
const Token_1 = __webpack_require__(8999);
const Utils = __webpack_require__(3070);
/** A set of utility routines useful for all kinds of ANTLR trees. */
class Trees {
    static toStringTree(t, arg2) {
        let ruleNames;
        if (arg2 instanceof Parser_1.Parser) {
            ruleNames = arg2.ruleNames;
        }
        else {
            ruleNames = arg2;
        }
        let s = Utils.escapeWhitespace(this.getNodeText(t, ruleNames), false);
        if (t.childCount === 0) {
            return s;
        }
        let buf = "";
        buf += ("(");
        s = Utils.escapeWhitespace(this.getNodeText(t, ruleNames), false);
        buf += (s);
        buf += (" ");
        for (let i = 0; i < t.childCount; i++) {
            if (i > 0) {
                buf += (" ");
            }
            buf += (this.toStringTree(t.getChild(i), ruleNames));
        }
        buf += (")");
        return buf;
    }
    static getNodeText(t, arg2) {
        let ruleNames;
        if (arg2 instanceof Parser_1.Parser) {
            ruleNames = arg2.ruleNames;
        }
        else if (arg2) {
            ruleNames = arg2;
        }
        else {
            // no recog or rule names
            let payload = t.payload;
            if (typeof payload.text === "string") {
                return payload.text;
            }
            return t.payload.toString();
        }
        if (t instanceof RuleNode_1.RuleNode) {
            let ruleContext = t.ruleContext;
            let ruleIndex = ruleContext.ruleIndex;
            let ruleName = ruleNames[ruleIndex];
            let altNumber = ruleContext.altNumber;
            if (altNumber !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                return ruleName + ":" + altNumber;
            }
            return ruleName;
        }
        else if (t instanceof ErrorNode_1.ErrorNode) {
            return t.toString();
        }
        else if (t instanceof TerminalNode_1.TerminalNode) {
            let symbol = t.symbol;
            return symbol.text || "";
        }
        throw new TypeError("Unexpected node type");
    }
    static getChildren(t) {
        let kids = [];
        for (let i = 0; i < t.childCount; i++) {
            kids.push(t.getChild(i));
        }
        return kids;
    }
    static getAncestors(t) {
        let ancestors = [];
        let p = t.parent;
        while (p) {
            ancestors.unshift(p); // insert at start
            p = p.parent;
        }
        return ancestors;
    }
    /** Return true if t is u's parent or a node on path to root from u.
     *  Use === not equals().
     *
     *  @since 4.5.1
     */
    static isAncestorOf(t, u) {
        if (!t || !u || !t.parent) {
            return false;
        }
        let p = u.parent;
        while (p) {
            if (t === p) {
                return true;
            }
            p = p.parent;
        }
        return false;
    }
    static findAllTokenNodes(t, ttype) {
        return Trees.findAllNodes(t, ttype, true);
    }
    static findAllRuleNodes(t, ruleIndex) {
        return Trees.findAllNodes(t, ruleIndex, false);
    }
    static findAllNodes(t, index, findTokens) {
        let nodes = [];
        Trees._findAllNodes(t, index, findTokens, nodes);
        return nodes;
    }
    static _findAllNodes(t, index, findTokens, nodes) {
        // check this node (the root) first
        if (findTokens && t instanceof TerminalNode_1.TerminalNode) {
            if (t.symbol.type === index) {
                nodes.push(t);
            }
        }
        else if (!findTokens && t instanceof ParserRuleContext_1.ParserRuleContext) {
            if (t.ruleIndex === index) {
                nodes.push(t);
            }
        }
        // check children
        for (let i = 0; i < t.childCount; i++) {
            Trees._findAllNodes(t.getChild(i), index, findTokens, nodes);
        }
    }
    /** Get all descendents; includes t itself.
     *
     * @since 4.5.1
     */
    static getDescendants(t) {
        let nodes = [];
        function recurse(e) {
            nodes.push(e);
            const n = e.childCount;
            for (let i = 0; i < n; i++) {
                recurse(e.getChild(i));
            }
        }
        recurse(t);
        return nodes;
    }
    /** Find smallest subtree of t enclosing range startTokenIndex..stopTokenIndex
     *  inclusively using postorder traversal.  Recursive depth-first-search.
     *
     *  @since 4.5
     */
    static getRootOfSubtreeEnclosingRegion(t, startTokenIndex, // inclusive
    stopTokenIndex) {
        let n = t.childCount;
        for (let i = 0; i < n; i++) {
            let child = t.getChild(i);
            let r = Trees.getRootOfSubtreeEnclosingRegion(child, startTokenIndex, stopTokenIndex);
            if (r) {
                return r;
            }
        }
        if (t instanceof ParserRuleContext_1.ParserRuleContext) {
            let stopToken = t.stop;
            if (startTokenIndex >= t.start.tokenIndex && // is range fully contained in t?
                (stopToken == null || stopTokenIndex <= stopToken.tokenIndex)) {
                // note: r.stop==null likely implies that we bailed out of parser and there's nothing to the right
                return t;
            }
        }
        return undefined;
    }
    /** Replace any subtree siblings of root that are completely to left
     *  or right of lookahead range with a CommonToken(Token.INVALID_TYPE,"...")
     *  node. The source interval for t is not altered to suit smaller range!
     *
     *  WARNING: destructive to t.
     *
     *  @since 4.5.1
     */
    static stripChildrenOutOfRange(t, root, startIndex, stopIndex) {
        if (!t) {
            return;
        }
        let count = t.childCount;
        for (let i = 0; i < count; i++) {
            let child = t.getChild(i);
            let range = child.sourceInterval;
            if (child instanceof ParserRuleContext_1.ParserRuleContext && (range.b < startIndex || range.a > stopIndex)) {
                if (Trees.isAncestorOf(child, root)) { // replace only if subtree doesn't have displayed root
                    let abbrev = new CommonToken_1.CommonToken(Token_1.Token.INVALID_TYPE, "...");
                    t.children[i] = new TerminalNode_1.TerminalNode(abbrev); // HACK access to private
                }
            }
        }
    }
    static findNodeSuchThat(t, pred) {
        // No type check needed as long as users only use one of the available overloads
        if (pred(t)) {
            return t;
        }
        let n = t.childCount;
        for (let i = 0; i < n; i++) {
            let u = Trees.findNodeSuchThat(t.getChild(i), pred);
            if (u !== undefined) {
                return u;
            }
        }
        return undefined;
    }
}
__decorate([
    __param(0, Decorators_1.NotNull)
], Trees, "toStringTree", null);
__decorate([
    Decorators_1.NotNull,
    __param(0, Decorators_1.NotNull)
], Trees, "getAncestors", null);
__decorate([
    __param(0, Decorators_1.NotNull)
], Trees, "getRootOfSubtreeEnclosingRegion", null);
exports.Trees = Trees;
//# sourceMappingURL=Trees.js.map

/***/ }),

/***/ 1410:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
__exportStar(__webpack_require__(4941), exports);
__exportStar(__webpack_require__(135), exports);
__exportStar(__webpack_require__(9814), exports);
__exportStar(__webpack_require__(2099), exports);
__exportStar(__webpack_require__(6259), exports);
__exportStar(__webpack_require__(5988), exports);
__exportStar(__webpack_require__(758), exports);
__exportStar(__webpack_require__(9297), exports);
__exportStar(__webpack_require__(6347), exports);
__exportStar(__webpack_require__(9466), exports);
__exportStar(__webpack_require__(1756), exports);
__exportStar(__webpack_require__(1180), exports);
//# sourceMappingURL=index.js.map

/***/ }),

/***/ 3588:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Chunk = void 0;
// ConvertTo-TS run at 2016-10-04T11:26:45.2799060-07:00
/**
 * A chunk is either a token tag, a rule tag, or a span of literal text within a
 * tree pattern.
 *
 * The method {@link ParseTreePatternMatcher#split(String)} returns a list of
 * chunks in preparation for creating a token stream by
 * {@link ParseTreePatternMatcher#tokenize(String)}. From there, we get a parse
 * tree from with {@link ParseTreePatternMatcher#compile(String, int)}. These
 * chunks are converted to {@link RuleTagToken}, {@link TokenTagToken}, or the
 * regular tokens of the text surrounding the tags.
 */
class Chunk {
}
exports.Chunk = Chunk;
//# sourceMappingURL=Chunk.js.map

/***/ }),

/***/ 9728:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ParseTreeMatch = void 0;
const Decorators_1 = __webpack_require__(681);
/**
 * Represents the result of matching a {@link ParseTree} against a tree pattern.
 */
let ParseTreeMatch = class ParseTreeMatch {
    /**
     * Constructs a new instance of {@link ParseTreeMatch} from the specified
     * parse tree and pattern.
     *
     * @param tree The parse tree to match against the pattern.
     * @param pattern The parse tree pattern.
     * @param labels A mapping from label names to collections of
     * {@link ParseTree} objects located by the tree pattern matching process.
     * @param mismatchedNode The first node which failed to match the tree
     * pattern during the matching process.
     *
     * @throws {@link Error} if `tree` is not defined
     * @throws {@link Error} if `pattern` is not defined
     * @throws {@link Error} if `labels` is not defined
     */
    constructor(tree, pattern, labels, mismatchedNode) {
        if (!tree) {
            throw new Error("tree cannot be null");
        }
        if (!pattern) {
            throw new Error("pattern cannot be null");
        }
        if (!labels) {
            throw new Error("labels cannot be null");
        }
        this._tree = tree;
        this._pattern = pattern;
        this._labels = labels;
        this._mismatchedNode = mismatchedNode;
    }
    /**
     * Get the last node associated with a specific `label`.
     *
     * For example, for pattern `<id:ID>`, `get("id")` returns the
     * node matched for that `ID`. If more than one node
     * matched the specified label, only the last is returned. If there is
     * no node associated with the label, this returns `undefined`.
     *
     * Pattern tags like `<ID>` and `<expr>` without labels are
     * considered to be labeled with `ID` and `expr`, respectively.
     *
     * @param label The label to check.
     *
     * @returns The last {@link ParseTree} to match a tag with the specified
     * label, or `undefined` if no parse tree matched a tag with the label.
     */
    get(label) {
        let parseTrees = this._labels.get(label);
        if (!parseTrees || parseTrees.length === 0) {
            return undefined;
        }
        return parseTrees[parseTrees.length - 1]; // return last if multiple
    }
    /**
     * Return all nodes matching a rule or token tag with the specified label.
     *
     * If the `label` is the name of a parser rule or token in the
     * grammar, the resulting list will contain both the parse trees matching
     * rule or tags explicitly labeled with the label and the complete set of
     * parse trees matching the labeled and unlabeled tags in the pattern for
     * the parser rule or token. For example, if `label` is `"foo"`,
     * the result will contain *all* of the following.
     *
     * * Parse tree nodes matching tags of the form `<foo:anyRuleName>` and
     *   `<foo:AnyTokenName>`.
     * * Parse tree nodes matching tags of the form `<anyLabel:foo>`.
     * * Parse tree nodes matching tags of the form `<foo>`.
     *
     * @param label The label.
     *
     * @returns A collection of all {@link ParseTree} nodes matching tags with
     * the specified `label`. If no nodes matched the label, an empty list
     * is returned.
     */
    getAll(label) {
        const nodes = this._labels.get(label);
        if (!nodes) {
            return [];
        }
        return nodes;
    }
    /**
     * Return a mapping from label &rarr; [list of nodes].
     *
     * The map includes special entries corresponding to the names of rules and
     * tokens referenced in tags in the original pattern. For additional
     * information, see the description of {@link #getAll(String)}.
     *
     * @returns A mapping from labels to parse tree nodes. If the parse tree
     * pattern did not contain any rule or token tags, this map will be empty.
     */
    get labels() {
        return this._labels;
    }
    /**
     * Get the node at which we first detected a mismatch.
     *
     * @returns the node at which we first detected a mismatch, or `undefined`
     * if the match was successful.
     */
    get mismatchedNode() {
        return this._mismatchedNode;
    }
    /**
     * Gets a value indicating whether the match operation succeeded.
     *
     * @returns `true` if the match operation succeeded; otherwise,
     * `false`.
     */
    get succeeded() {
        return !this._mismatchedNode;
    }
    /**
     * Get the tree pattern we are matching against.
     *
     * @returns The tree pattern we are matching against.
     */
    get pattern() {
        return this._pattern;
    }
    /**
     * Get the parse tree we are trying to match to a pattern.
     *
     * @returns The {@link ParseTree} we are trying to match to a pattern.
     */
    get tree() {
        return this._tree;
    }
    /**
     * {@inheritDoc}
     */
    toString() {
        return `Match ${this.succeeded ? "succeeded" : "failed"}; found ${this.labels.size} labels`;
    }
};
__decorate([
    Decorators_1.NotNull,
    __param(0, Decorators_1.NotNull)
], ParseTreeMatch.prototype, "getAll", null);
__decorate([
    Decorators_1.NotNull
], ParseTreeMatch.prototype, "labels", null);
__decorate([
    Decorators_1.NotNull
], ParseTreeMatch.prototype, "pattern", null);
__decorate([
    Decorators_1.NotNull
], ParseTreeMatch.prototype, "tree", null);
__decorate([
    Decorators_1.Override
], ParseTreeMatch.prototype, "toString", null);
ParseTreeMatch = __decorate([
    __param(0, Decorators_1.NotNull),
    __param(1, Decorators_1.NotNull),
    __param(2, Decorators_1.NotNull)
], ParseTreeMatch);
exports.ParseTreeMatch = ParseTreeMatch;
//# sourceMappingURL=ParseTreeMatch.js.map

/***/ }),

/***/ 1024:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ParseTreePattern = void 0;
// CONVERSTION complete, Burt Harris 10/14/2016
const Decorators_1 = __webpack_require__(681);
const XPath_1 = __webpack_require__(6512);
/**
 * A pattern like `<ID> = <expr>;` converted to a {@link ParseTree} by
 * {@link ParseTreePatternMatcher#compile(String, int)}.
 */
let ParseTreePattern = class ParseTreePattern {
    /**
     * Construct a new instance of the {@link ParseTreePattern} class.
     *
     * @param matcher The {@link ParseTreePatternMatcher} which created this
     * tree pattern.
     * @param pattern The tree pattern in concrete syntax form.
     * @param patternRuleIndex The parser rule which serves as the root of the
     * tree pattern.
     * @param patternTree The tree pattern in {@link ParseTree} form.
     */
    constructor(matcher, pattern, patternRuleIndex, patternTree) {
        this._matcher = matcher;
        this._patternRuleIndex = patternRuleIndex;
        this._pattern = pattern;
        this._patternTree = patternTree;
    }
    /**
     * Match a specific parse tree against this tree pattern.
     *
     * @param tree The parse tree to match against this tree pattern.
     * @returns A {@link ParseTreeMatch} object describing the result of the
     * match operation. The `ParseTreeMatch.succeeded` method can be
     * used to determine whether or not the match was successful.
     */
    match(tree) {
        return this._matcher.match(tree, this);
    }
    /**
     * Determine whether or not a parse tree matches this tree pattern.
     *
     * @param tree The parse tree to match against this tree pattern.
     * @returns `true` if `tree` is a match for the current tree
     * pattern; otherwise, `false`.
     */
    matches(tree) {
        return this._matcher.match(tree, this).succeeded;
    }
    /**
     * Find all nodes using XPath and then try to match those subtrees against
     * this tree pattern.
     *
     * @param tree The {@link ParseTree} to match against this pattern.
     * @param xpath An expression matching the nodes
     *
     * @returns A collection of {@link ParseTreeMatch} objects describing the
     * successful matches. Unsuccessful matches are omitted from the result,
     * regardless of the reason for the failure.
     */
    findAll(tree, xpath) {
        let subtrees = XPath_1.XPath.findAll(tree, xpath, this._matcher.parser);
        let matches = [];
        for (let t of subtrees) {
            let match = this.match(t);
            if (match.succeeded) {
                matches.push(match);
            }
        }
        return matches;
    }
    /**
     * Get the {@link ParseTreePatternMatcher} which created this tree pattern.
     *
     * @returns The {@link ParseTreePatternMatcher} which created this tree
     * pattern.
     */
    get matcher() {
        return this._matcher;
    }
    /**
     * Get the tree pattern in concrete syntax form.
     *
     * @returns The tree pattern in concrete syntax form.
     */
    get pattern() {
        return this._pattern;
    }
    /**
     * Get the parser rule which serves as the outermost rule for the tree
     * pattern.
     *
     * @returns The parser rule which serves as the outermost rule for the tree
     * pattern.
     */
    get patternRuleIndex() {
        return this._patternRuleIndex;
    }
    /**
     * Get the tree pattern as a {@link ParseTree}. The rule and token tags from
     * the pattern are present in the parse tree as terminal nodes with a symbol
     * of type {@link RuleTagToken} or {@link TokenTagToken}.
     *
     * @returns The tree pattern as a {@link ParseTree}.
     */
    get patternTree() {
        return this._patternTree;
    }
};
__decorate([
    Decorators_1.NotNull
], ParseTreePattern.prototype, "_pattern", void 0);
__decorate([
    Decorators_1.NotNull
], ParseTreePattern.prototype, "_patternTree", void 0);
__decorate([
    Decorators_1.NotNull
], ParseTreePattern.prototype, "_matcher", void 0);
__decorate([
    Decorators_1.NotNull,
    __param(0, Decorators_1.NotNull)
], ParseTreePattern.prototype, "match", null);
__decorate([
    __param(0, Decorators_1.NotNull)
], ParseTreePattern.prototype, "matches", null);
__decorate([
    Decorators_1.NotNull,
    __param(0, Decorators_1.NotNull), __param(1, Decorators_1.NotNull)
], ParseTreePattern.prototype, "findAll", null);
__decorate([
    Decorators_1.NotNull
], ParseTreePattern.prototype, "matcher", null);
__decorate([
    Decorators_1.NotNull
], ParseTreePattern.prototype, "pattern", null);
__decorate([
    Decorators_1.NotNull
], ParseTreePattern.prototype, "patternTree", null);
ParseTreePattern = __decorate([
    __param(0, Decorators_1.NotNull),
    __param(1, Decorators_1.NotNull),
    __param(3, Decorators_1.NotNull)
], ParseTreePattern);
exports.ParseTreePattern = ParseTreePattern;
//# sourceMappingURL=ParseTreePattern.js.map

/***/ }),

/***/ 7657:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ParseTreePatternMatcher = void 0;
// CONVERSTION complete, Burt Harris 10/14/2016
const BailErrorStrategy_1 = __webpack_require__(856);
const CharStreams_1 = __webpack_require__(3259);
const CommonTokenStream_1 = __webpack_require__(2217);
const ListTokenSource_1 = __webpack_require__(4265);
const MultiMap_1 = __webpack_require__(1412);
const Decorators_1 = __webpack_require__(681);
const ParseCancellationException_1 = __webpack_require__(7455);
const ParserInterpreter_1 = __webpack_require__(2676);
const ParserRuleContext_1 = __webpack_require__(9248);
const ParseTreeMatch_1 = __webpack_require__(9728);
const ParseTreePattern_1 = __webpack_require__(1024);
const RecognitionException_1 = __webpack_require__(1100);
const RuleNode_1 = __webpack_require__(9297);
const RuleTagToken_1 = __webpack_require__(452);
const TagChunk_1 = __webpack_require__(6885);
const TerminalNode_1 = __webpack_require__(9466);
const TextChunk_1 = __webpack_require__(6351);
const Token_1 = __webpack_require__(8999);
const TokenTagToken_1 = __webpack_require__(6723);
/**
 * A tree pattern matching mechanism for ANTLR {@link ParseTree}s.
 *
 * Patterns are strings of source input text with special tags representing
 * token or rule references such as:
 *
 * ```
 * <ID> = <expr>;
 * ```
 *
 * Given a pattern start rule such as `statement`, this object constructs
 * a {@link ParseTree} with placeholders for the `ID` and `expr`
 * subtree. Then the {@link #match} routines can compare an actual
 * {@link ParseTree} from a parse with this pattern. Tag `<ID>` matches
 * any `ID` token and tag `<expr>` references the result of the
 * `expr` rule (generally an instance of `ExprContext`.
 *
 * Pattern `x = 0;` is a similar pattern that matches the same pattern
 * except that it requires the identifier to be `x` and the expression to
 * be `0`.
 *
 * The {@link #matches} routines return `true` or `false` based
 * upon a match for the tree rooted at the parameter sent in. The
 * {@link #match} routines return a {@link ParseTreeMatch} object that
 * contains the parse tree, the parse tree pattern, and a map from tag name to
 * matched nodes (more below). A subtree that fails to match, returns with
 * {@link ParseTreeMatch#mismatchedNode} set to the first tree node that did not
 * match.
 *
 * For efficiency, you can compile a tree pattern in string form to a
 * {@link ParseTreePattern} object.
 *
 * See `TestParseTreeMatcher` for lots of examples.
 * {@link ParseTreePattern} has two static helper methods:
 * {@link ParseTreePattern#findAll} and {@link ParseTreePattern#match} that
 * are easy to use but not super efficient because they create new
 * {@link ParseTreePatternMatcher} objects each time and have to compile the
 * pattern in string form before using it.
 *
 * The lexer and parser that you pass into the {@link ParseTreePatternMatcher}
 * constructor are used to parse the pattern in string form. The lexer converts
 * the `<ID> = <expr>;` into a sequence of four tokens (assuming lexer
 * throws out whitespace or puts it on a hidden channel). Be aware that the
 * input stream is reset for the lexer (but not the parser; a
 * {@link ParserInterpreter} is created to parse the input.). Any user-defined
 * fields you have put into the lexer might get changed when this mechanism asks
 * it to scan the pattern string.
 *
 * Normally a parser does not accept token `<expr>` as a valid
 * `expr` but, from the parser passed in, we create a special version of
 * the underlying grammar representation (an {@link ATN}) that allows imaginary
 * tokens representing rules (`<expr>`) to match entire rules. We call
 * these *bypass alternatives*.
 *
 * Delimiters are `<`} and `>`}, with `\` as the escape string
 * by default, but you can set them to whatever you want using
 * {@link #setDelimiters}. You must escape both start and stop strings
 * `\<` and `\>`.
 */
class ParseTreePatternMatcher {
    /**
     * Constructs a {@link ParseTreePatternMatcher} or from a {@link Lexer} and
     * {@link Parser} object. The lexer input stream is altered for tokenizing
     * the tree patterns. The parser is used as a convenient mechanism to get
     * the grammar name, plus token, rule names.
     */
    constructor(lexer, parser) {
        this.start = "<";
        this.stop = ">";
        this.escape = "\\"; // e.g., \< and \> must escape BOTH!
        /**
         * Regular expression corresponding to escape, for global replace
         */
        this.escapeRE = /\\/g;
        this._lexer = lexer;
        this._parser = parser;
    }
    /**
     * Set the delimiters used for marking rule and token tags within concrete
     * syntax used by the tree pattern parser.
     *
     * @param start The start delimiter.
     * @param stop The stop delimiter.
     * @param escapeLeft The escape sequence to use for escaping a start or stop delimiter.
     *
     * @throws {@link Error} if `start` is not defined or empty.
     * @throws {@link Error} if `stop` is not defined or empty.
     */
    setDelimiters(start, stop, escapeLeft) {
        if (!start) {
            throw new Error("start cannot be null or empty");
        }
        if (!stop) {
            throw new Error("stop cannot be null or empty");
        }
        this.start = start;
        this.stop = stop;
        this.escape = escapeLeft;
        this.escapeRE = new RegExp(escapeLeft.replace(/[.*+?^${}()|[\]\\]/g, "\\$&"), "g");
    }
    matches(tree, pattern, patternRuleIndex = 0) {
        if (typeof pattern === "string") {
            let p = this.compile(pattern, patternRuleIndex);
            return this.matches(tree, p);
        }
        else {
            let labels = new MultiMap_1.MultiMap();
            let mismatchedNode = this.matchImpl(tree, pattern.patternTree, labels);
            return !mismatchedNode;
        }
    }
    // Implementation of match
    match(tree, pattern, patternRuleIndex = 0) {
        if (typeof pattern === "string") {
            let p = this.compile(pattern, patternRuleIndex);
            return this.match(tree, p);
        }
        else {
            let labels = new MultiMap_1.MultiMap();
            let mismatchedNode = this.matchImpl(tree, pattern.patternTree, labels);
            return new ParseTreeMatch_1.ParseTreeMatch(tree, pattern, labels, mismatchedNode);
        }
    }
    /**
     * For repeated use of a tree pattern, compile it to a
     * {@link ParseTreePattern} using this method.
     */
    compile(pattern, patternRuleIndex) {
        let tokenList = this.tokenize(pattern);
        let tokenSrc = new ListTokenSource_1.ListTokenSource(tokenList);
        let tokens = new CommonTokenStream_1.CommonTokenStream(tokenSrc);
        const parser = this._parser;
        let parserInterp = new ParserInterpreter_1.ParserInterpreter(parser.grammarFileName, parser.vocabulary, parser.ruleNames, parser.getATNWithBypassAlts(), tokens);
        let tree;
        try {
            parserInterp.errorHandler = new BailErrorStrategy_1.BailErrorStrategy();
            tree = parserInterp.parse(patternRuleIndex);
            //			System.out.println("pattern tree = "+tree.toStringTree(parserInterp));
        }
        catch (e) {
            if (e instanceof ParseCancellationException_1.ParseCancellationException) {
                throw e.getCause();
            }
            else if (e instanceof RecognitionException_1.RecognitionException) {
                throw e;
            }
            else if (e instanceof Error) {
                throw new ParseTreePatternMatcher.CannotInvokeStartRule(e);
            }
            else {
                throw e;
            }
        }
        // Make sure tree pattern compilation checks for a complete parse
        if (tokens.LA(1) !== Token_1.Token.EOF) {
            throw new ParseTreePatternMatcher.StartRuleDoesNotConsumeFullPattern();
        }
        return new ParseTreePattern_1.ParseTreePattern(this, pattern, patternRuleIndex, tree);
    }
    /**
     * Used to convert the tree pattern string into a series of tokens. The
     * input stream is reset.
     */
    get lexer() {
        return this._lexer;
    }
    /**
     * Used to collect to the grammar file name, token names, rule names for
     * used to parse the pattern into a parse tree.
     */
    get parser() {
        return this._parser;
    }
    // ---- SUPPORT CODE ----
    /**
     * Recursively walk `tree` against `patternTree`, filling
     * `match.`{@link ParseTreeMatch#labels labels}.
     *
     * @returns the first node encountered in `tree` which does not match
     * a corresponding node in `patternTree`, or `undefined` if the match
     * was successful. The specific node returned depends on the matching
     * algorithm used by the implementation, and may be overridden.
     */
    matchImpl(tree, patternTree, labels) {
        if (!tree) {
            throw new TypeError("tree cannot be null");
        }
        if (!patternTree) {
            throw new TypeError("patternTree cannot be null");
        }
        // x and <ID>, x and y, or x and x; or could be mismatched types
        if (tree instanceof TerminalNode_1.TerminalNode && patternTree instanceof TerminalNode_1.TerminalNode) {
            let mismatchedNode;
            // both are tokens and they have same type
            if (tree.symbol.type === patternTree.symbol.type) {
                if (patternTree.symbol instanceof TokenTagToken_1.TokenTagToken) { // x and <ID>
                    let tokenTagToken = patternTree.symbol;
                    // track label->list-of-nodes for both token name and label (if any)
                    labels.map(tokenTagToken.tokenName, tree);
                    const l = tokenTagToken.label;
                    if (l) {
                        labels.map(l, tree);
                    }
                }
                else if (tree.text === patternTree.text) {
                    // x and x
                }
                else {
                    // x and y
                    if (!mismatchedNode) {
                        mismatchedNode = tree;
                    }
                }
            }
            else {
                if (!mismatchedNode) {
                    mismatchedNode = tree;
                }
            }
            return mismatchedNode;
        }
        if (tree instanceof ParserRuleContext_1.ParserRuleContext
            && patternTree instanceof ParserRuleContext_1.ParserRuleContext) {
            let mismatchedNode;
            // (expr ...) and <expr>
            let ruleTagToken = this.getRuleTagToken(patternTree);
            if (ruleTagToken) {
                let m;
                if (tree.ruleContext.ruleIndex === patternTree.ruleContext.ruleIndex) {
                    // track label->list-of-nodes for both rule name and label (if any)
                    labels.map(ruleTagToken.ruleName, tree);
                    const l = ruleTagToken.label;
                    if (l) {
                        labels.map(l, tree);
                    }
                }
                else {
                    if (!mismatchedNode) {
                        mismatchedNode = tree;
                    }
                }
                return mismatchedNode;
            }
            // (expr ...) and (expr ...)
            if (tree.childCount !== patternTree.childCount) {
                if (!mismatchedNode) {
                    mismatchedNode = tree;
                }
                return mismatchedNode;
            }
            let n = tree.childCount;
            for (let i = 0; i < n; i++) {
                let childMatch = this.matchImpl(tree.getChild(i), patternTree.getChild(i), labels);
                if (childMatch) {
                    return childMatch;
                }
            }
            return mismatchedNode;
        }
        // if nodes aren't both tokens or both rule nodes, can't match
        return tree;
    }
    /** Is `t` `(expr <expr>)` subtree? */
    getRuleTagToken(t) {
        if (t instanceof RuleNode_1.RuleNode) {
            if (t.childCount === 1 && t.getChild(0) instanceof TerminalNode_1.TerminalNode) {
                let c = t.getChild(0);
                if (c.symbol instanceof RuleTagToken_1.RuleTagToken) {
                    //					System.out.println("rule tag subtree "+t.toStringTree(parser));
                    return c.symbol;
                }
            }
        }
        return undefined;
    }
    tokenize(pattern) {
        // split pattern into chunks: sea (raw input) and islands (<ID>, <expr>)
        let chunks = this.split(pattern);
        // create token stream from text and tags
        let tokens = [];
        for (let chunk of chunks) {
            if (chunk instanceof TagChunk_1.TagChunk) {
                let tagChunk = chunk;
                const firstChar = tagChunk.tag.substr(0, 1);
                // add special rule token or conjure up new token from name
                if (firstChar === firstChar.toUpperCase()) {
                    let ttype = this._parser.getTokenType(tagChunk.tag);
                    if (ttype === Token_1.Token.INVALID_TYPE) {
                        throw new Error("Unknown token " + tagChunk.tag + " in pattern: " + pattern);
                    }
                    let t = new TokenTagToken_1.TokenTagToken(tagChunk.tag, ttype, tagChunk.label);
                    tokens.push(t);
                }
                else if (firstChar === firstChar.toLowerCase()) {
                    let ruleIndex = this._parser.getRuleIndex(tagChunk.tag);
                    if (ruleIndex === -1) {
                        throw new Error("Unknown rule " + tagChunk.tag + " in pattern: " + pattern);
                    }
                    let ruleImaginaryTokenType = this._parser.getATNWithBypassAlts().ruleToTokenType[ruleIndex];
                    tokens.push(new RuleTagToken_1.RuleTagToken(tagChunk.tag, ruleImaginaryTokenType, tagChunk.label));
                }
                else {
                    throw new Error("invalid tag: " + tagChunk.tag + " in pattern: " + pattern);
                }
            }
            else {
                let textChunk = chunk;
                this._lexer.inputStream = CharStreams_1.CharStreams.fromString(textChunk.text);
                let t = this._lexer.nextToken();
                while (t.type !== Token_1.Token.EOF) {
                    tokens.push(t);
                    t = this._lexer.nextToken();
                }
            }
        }
        //		System.out.println("tokens="+tokens);
        return tokens;
    }
    /** Split `<ID> = <e:expr> ;` into 4 chunks for tokenizing by {@link #tokenize}. */
    split(pattern) {
        let p = 0;
        let n = pattern.length;
        let chunks = [];
        let buf;
        // find all start and stop indexes first, then collect
        let starts = [];
        let stops = [];
        while (p < n) {
            if (p === pattern.indexOf(this.escape + this.start, p)) {
                p += this.escape.length + this.start.length;
            }
            else if (p === pattern.indexOf(this.escape + this.stop, p)) {
                p += this.escape.length + this.stop.length;
            }
            else if (p === pattern.indexOf(this.start, p)) {
                starts.push(p);
                p += this.start.length;
            }
            else if (p === pattern.indexOf(this.stop, p)) {
                stops.push(p);
                p += this.stop.length;
            }
            else {
                p++;
            }
        }
        //		System.out.println("");
        //		System.out.println(starts);
        //		System.out.println(stops);
        if (starts.length > stops.length) {
            throw new Error("unterminated tag in pattern: " + pattern);
        }
        if (starts.length < stops.length) {
            throw new Error("missing start tag in pattern: " + pattern);
        }
        let ntags = starts.length;
        for (let i = 0; i < ntags; i++) {
            if (starts[i] >= stops[i]) {
                throw new Error("tag delimiters out of order in pattern: " + pattern);
            }
        }
        // collect into chunks now
        if (ntags === 0) {
            let text = pattern.substring(0, n);
            chunks.push(new TextChunk_1.TextChunk(text));
        }
        if (ntags > 0 && starts[0] > 0) { // copy text up to first tag into chunks
            let text = pattern.substring(0, starts[0]);
            chunks.push(new TextChunk_1.TextChunk(text));
        }
        for (let i = 0; i < ntags; i++) {
            // copy inside of <tag>
            let tag = pattern.substring(starts[i] + this.start.length, stops[i]);
            let ruleOrToken = tag;
            let label;
            let colon = tag.indexOf(":");
            if (colon >= 0) {
                label = tag.substring(0, colon);
                ruleOrToken = tag.substring(colon + 1, tag.length);
            }
            chunks.push(new TagChunk_1.TagChunk(ruleOrToken, label));
            if (i + 1 < ntags) {
                // copy from end of <tag> to start of next
                let text = pattern.substring(stops[i] + this.stop.length, starts[i + 1]);
                chunks.push(new TextChunk_1.TextChunk(text));
            }
        }
        if (ntags > 0) {
            let afterLastTag = stops[ntags - 1] + this.stop.length;
            if (afterLastTag < n) { // copy text from end of last tag to end
                let text = pattern.substring(afterLastTag, n);
                chunks.push(new TextChunk_1.TextChunk(text));
            }
        }
        // strip out the escape sequences from text chunks but not tags
        for (let i = 0; i < chunks.length; i++) {
            let c = chunks[i];
            if (c instanceof TextChunk_1.TextChunk) {
                let unescaped = c.text.replace(this.escapeRE, "");
                if (unescaped.length < c.text.length) {
                    chunks[i] = new TextChunk_1.TextChunk(unescaped);
                }
            }
        }
        return chunks;
    }
}
__decorate([
    Decorators_1.NotNull,
    __param(1, Decorators_1.NotNull)
], ParseTreePatternMatcher.prototype, "match", null);
__decorate([
    Decorators_1.NotNull
], ParseTreePatternMatcher.prototype, "lexer", null);
__decorate([
    Decorators_1.NotNull
], ParseTreePatternMatcher.prototype, "parser", null);
__decorate([
    __param(0, Decorators_1.NotNull),
    __param(1, Decorators_1.NotNull),
    __param(2, Decorators_1.NotNull)
], ParseTreePatternMatcher.prototype, "matchImpl", null);
exports.ParseTreePatternMatcher = ParseTreePatternMatcher;
(function (ParseTreePatternMatcher) {
    class CannotInvokeStartRule extends Error {
        constructor(error) {
            super(`CannotInvokeStartRule: ${error}`);
            this.error = error;
        }
    }
    ParseTreePatternMatcher.CannotInvokeStartRule = CannotInvokeStartRule;
    // Fixes https://github.com/antlr/antlr4/issues/413
    // "Tree pattern compilation doesn't check for a complete parse"
    class StartRuleDoesNotConsumeFullPattern extends Error {
        constructor() {
            super("StartRuleDoesNotConsumeFullPattern");
        }
    }
    ParseTreePatternMatcher.StartRuleDoesNotConsumeFullPattern = StartRuleDoesNotConsumeFullPattern;
})(ParseTreePatternMatcher = exports.ParseTreePatternMatcher || (exports.ParseTreePatternMatcher = {}));
//# sourceMappingURL=ParseTreePatternMatcher.js.map

/***/ }),

/***/ 452:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.RuleTagToken = void 0;
const Decorators_1 = __webpack_require__(681);
const Token_1 = __webpack_require__(8999);
/**
 * A {@link Token} object representing an entire subtree matched by a parser
 * rule; e.g., `<expr>`. These tokens are created for {@link TagChunk}
 * chunks where the tag corresponds to a parser rule.
 */
let RuleTagToken = class RuleTagToken {
    /**
     * Constructs a new instance of {@link RuleTagToken} with the specified rule
     * name, bypass token type, and label.
     *
     * @param ruleName The name of the parser rule this rule tag matches.
     * @param bypassTokenType The bypass token type assigned to the parser rule.
     * @param label The label associated with the rule tag, or `undefined` if
     * the rule tag is unlabeled.
     *
     * @exception IllegalArgumentException if `ruleName` is not defined
     * or empty.
     */
    constructor(ruleName, bypassTokenType, label) {
        if (ruleName == null || ruleName.length === 0) {
            throw new Error("ruleName cannot be null or empty.");
        }
        this._ruleName = ruleName;
        this.bypassTokenType = bypassTokenType;
        this._label = label;
    }
    /**
     * Gets the name of the rule associated with this rule tag.
     *
     * @returns The name of the parser rule associated with this rule tag.
     */
    get ruleName() {
        return this._ruleName;
    }
    /**
     * Gets the label associated with the rule tag.
     *
     * @returns The name of the label associated with the rule tag, or
     * `undefined` if this is an unlabeled rule tag.
     */
    get label() {
        return this._label;
    }
    /**
     * {@inheritDoc}
     *
     * Rule tag tokens are always placed on the {@link #DEFAULT_CHANNEL}.
     */
    get channel() {
        return Token_1.Token.DEFAULT_CHANNEL;
    }
    /**
     * {@inheritDoc}
     *
     * This method returns the rule tag formatted with `<` and `>`
     * delimiters.
     */
    get text() {
        if (this._label != null) {
            return "<" + this._label + ":" + this._ruleName + ">";
        }
        return "<" + this._ruleName + ">";
    }
    /**
     * {@inheritDoc}
     *
     * Rule tag tokens have types assigned according to the rule bypass
     * transitions created during ATN deserialization.
     */
    get type() {
        return this.bypassTokenType;
    }
    /**
     * {@inheritDoc}
     *
     * The implementation for {@link RuleTagToken} always returns 0.
     */
    get line() {
        return 0;
    }
    /**
     * {@inheritDoc}
     *
     * The implementation for {@link RuleTagToken} always returns -1.
     */
    get charPositionInLine() {
        return -1;
    }
    /**
     * {@inheritDoc}
     *
     * The implementation for {@link RuleTagToken} always returns -1.
     */
    get tokenIndex() {
        return -1;
    }
    /**
     * {@inheritDoc}
     *
     * The implementation for {@link RuleTagToken} always returns -1.
     */
    get startIndex() {
        return -1;
    }
    /**
     * {@inheritDoc}
     *
     * The implementation for {@link RuleTagToken} always returns -1.
     */
    get stopIndex() {
        return -1;
    }
    /**
     * {@inheritDoc}
     *
     * The implementation for {@link RuleTagToken} always returns `undefined`.
     */
    get tokenSource() {
        return undefined;
    }
    /**
     * {@inheritDoc}
     *
     * The implementation for {@link RuleTagToken} always returns `undefined`.
     */
    get inputStream() {
        return undefined;
    }
    /**
     * {@inheritDoc}
     *
     * The implementation for {@link RuleTagToken} returns a string of the form
     * `ruleName:bypassTokenType`.
     */
    toString() {
        return this._ruleName + ":" + this.bypassTokenType;
    }
};
__decorate([
    Decorators_1.NotNull
], RuleTagToken.prototype, "ruleName", null);
__decorate([
    Decorators_1.Override
], RuleTagToken.prototype, "channel", null);
__decorate([
    Decorators_1.Override
], RuleTagToken.prototype, "text", null);
__decorate([
    Decorators_1.Override
], RuleTagToken.prototype, "type", null);
__decorate([
    Decorators_1.Override
], RuleTagToken.prototype, "line", null);
__decorate([
    Decorators_1.Override
], RuleTagToken.prototype, "charPositionInLine", null);
__decorate([
    Decorators_1.Override
], RuleTagToken.prototype, "tokenIndex", null);
__decorate([
    Decorators_1.Override
], RuleTagToken.prototype, "startIndex", null);
__decorate([
    Decorators_1.Override
], RuleTagToken.prototype, "stopIndex", null);
__decorate([
    Decorators_1.Override
], RuleTagToken.prototype, "tokenSource", null);
__decorate([
    Decorators_1.Override
], RuleTagToken.prototype, "inputStream", null);
__decorate([
    Decorators_1.Override
], RuleTagToken.prototype, "toString", null);
RuleTagToken = __decorate([
    __param(0, Decorators_1.NotNull)
], RuleTagToken);
exports.RuleTagToken = RuleTagToken;
//# sourceMappingURL=RuleTagToken.js.map

/***/ }),

/***/ 6885:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.TagChunk = void 0;
// ConvertTo-TS run at 2016-10-04T11:26:46.1670669-07:00
const Chunk_1 = __webpack_require__(3588);
const Decorators_1 = __webpack_require__(681);
/**
 * Represents a placeholder tag in a tree pattern. A tag can have any of the
 * following forms.
 *
 * * `expr`: An unlabeled placeholder for a parser rule `expr`.
 * * `ID`: An unlabeled placeholder for a token of type `ID`.
 * * `e:expr`: A labeled placeholder for a parser rule `expr`.
 * * `id:ID`: A labeled placeholder for a token of type `ID`.
 *
 * This class does not perform any validation on the tag or label names aside
 * from ensuring that the tag is a defined, non-empty string.
 */
class TagChunk extends Chunk_1.Chunk {
    /**
     * Construct a new instance of {@link TagChunk} using the specified label
     * and tag.
     *
     * @param label The label for the tag. If this is `undefined`, the
     * {@link TagChunk} represents an unlabeled tag.
     * @param tag The tag, which should be the name of a parser rule or token
     * type.
     *
     * @exception IllegalArgumentException if `tag` is not defined or
     * empty.
     */
    constructor(tag, label) {
        super();
        if (tag == null || tag.length === 0) {
            throw new Error("tag cannot be null or empty");
        }
        this._tag = tag;
        this._label = label;
    }
    /**
     * Get the tag for this chunk.
     *
     * @returns The tag for the chunk.
     */
    get tag() {
        return this._tag;
    }
    /**
     * Get the label, if any, assigned to this chunk.
     *
     * @returns The label assigned to this chunk, or `undefined` if no label is
     * assigned to the chunk.
     */
    get label() {
        return this._label;
    }
    /**
     * This method returns a text representation of the tag chunk. Labeled tags
     * are returned in the form `label:tag`, and unlabeled tags are
     * returned as just the tag name.
     */
    toString() {
        if (this._label != null) {
            return this._label + ":" + this._tag;
        }
        return this._tag;
    }
}
__decorate([
    Decorators_1.NotNull
], TagChunk.prototype, "tag", null);
__decorate([
    Decorators_1.Override
], TagChunk.prototype, "toString", null);
exports.TagChunk = TagChunk;
//# sourceMappingURL=TagChunk.js.map

/***/ }),

/***/ 6351:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.TextChunk = void 0;
// ConvertTo-TS run at 2016-10-04T11:26:46.2521448-07:00
const Chunk_1 = __webpack_require__(3588);
const Decorators_1 = __webpack_require__(681);
/**
 * Represents a span of raw text (concrete syntax) between tags in a tree
 * pattern string.
 */
let TextChunk = class TextChunk extends Chunk_1.Chunk {
    /**
     * Constructs a new instance of {@link TextChunk} with the specified text.
     *
     * @param text The text of this chunk.
     * @exception IllegalArgumentException if `text` is not defined.
     */
    constructor(text) {
        super();
        if (text == null) {
            throw new Error("text cannot be null");
        }
        this._text = text;
    }
    /**
     * Gets the raw text of this chunk.
     *
     * @returns The text of the chunk.
     */
    get text() {
        return this._text;
    }
    /**
     * {@inheritDoc}
     *
     * The implementation for {@link TextChunk} returns the result of
     * `text` in single quotes.
     */
    toString() {
        return "'" + this._text + "'";
    }
};
__decorate([
    Decorators_1.NotNull
], TextChunk.prototype, "_text", void 0);
__decorate([
    Decorators_1.NotNull
], TextChunk.prototype, "text", null);
__decorate([
    Decorators_1.Override
], TextChunk.prototype, "toString", null);
TextChunk = __decorate([
    __param(0, Decorators_1.NotNull)
], TextChunk);
exports.TextChunk = TextChunk;
//# sourceMappingURL=TextChunk.js.map

/***/ }),

/***/ 6723:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.TokenTagToken = void 0;
// ConvertTo-TS run at 2016-10-04T11:26:46.3281988-07:00
const CommonToken_1 = __webpack_require__(2058);
const Decorators_1 = __webpack_require__(681);
/**
 * A {@link Token} object representing a token of a particular type; e.g.,
 * `<ID>`. These tokens are created for {@link TagChunk} chunks where the
 * tag corresponds to a lexer rule or token type.
 */
let TokenTagToken = class TokenTagToken extends CommonToken_1.CommonToken {
    /**
     * Constructs a new instance of {@link TokenTagToken} with the specified
     * token name, type, and label.
     *
     * @param tokenName The token name.
     * @param type The token type.
     * @param label The label associated with the token tag, or `undefined` if
     * the token tag is unlabeled.
     */
    constructor(tokenName, type, label) {
        super(type);
        this._tokenName = tokenName;
        this._label = label;
    }
    /**
     * Gets the token name.
     * @returns The token name.
     */
    get tokenName() {
        return this._tokenName;
    }
    /**
     * Gets the label associated with the rule tag.
     *
     * @returns The name of the label associated with the rule tag, or
     * `undefined` if this is an unlabeled rule tag.
     */
    get label() {
        return this._label;
    }
    /**
     * {@inheritDoc}
     *
     * The implementation for {@link TokenTagToken} returns the token tag
     * formatted with `<` and `>` delimiters.
     */
    get text() {
        if (this._label != null) {
            return "<" + this._label + ":" + this._tokenName + ">";
        }
        return "<" + this._tokenName + ">";
    }
    /**
     * {@inheritDoc}
     *
     * The implementation for {@link TokenTagToken} returns a string of the form
     * `tokenName:type`.
     */
    toString() {
        return this._tokenName + ":" + this.type;
    }
};
__decorate([
    Decorators_1.NotNull
], TokenTagToken.prototype, "_tokenName", void 0);
__decorate([
    Decorators_1.NotNull
], TokenTagToken.prototype, "tokenName", null);
__decorate([
    Decorators_1.Override
], TokenTagToken.prototype, "text", null);
__decorate([
    Decorators_1.Override
], TokenTagToken.prototype, "toString", null);
TokenTagToken = __decorate([
    __param(0, Decorators_1.NotNull)
], TokenTagToken);
exports.TokenTagToken = TokenTagToken;
//# sourceMappingURL=TokenTagToken.js.map

/***/ }),

/***/ 6512:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.XPath = void 0;
// ConvertTo-TS run at 2016-10-04T11:26:46.4373888-07:00
const CharStreams_1 = __webpack_require__(3259);
const CommonTokenStream_1 = __webpack_require__(2217);
const LexerNoViableAltException_1 = __webpack_require__(5154);
const ParserRuleContext_1 = __webpack_require__(9248);
const Token_1 = __webpack_require__(8999);
const XPathLexer_1 = __webpack_require__(9203);
const XPathLexerErrorListener_1 = __webpack_require__(9142);
const XPathRuleAnywhereElement_1 = __webpack_require__(5573);
const XPathRuleElement_1 = __webpack_require__(5405);
const XPathTokenAnywhereElement_1 = __webpack_require__(9216);
const XPathTokenElement_1 = __webpack_require__(285);
const XPathWildcardAnywhereElement_1 = __webpack_require__(630);
const XPathWildcardElement_1 = __webpack_require__(8879);
/**
 * Represent a subset of XPath XML path syntax for use in identifying nodes in
 * parse trees.
 *
 * Split path into words and separators `/` and `//` via ANTLR
 * itself then walk path elements from left to right. At each separator-word
 * pair, find set of nodes. Next stage uses those as work list.
 *
 * The basic interface is
 * {@link XPath#findAll ParseTree.findAll}`(tree, pathString, parser)`.
 * But that is just shorthand for:
 *
 * ```
 * let p = new XPath(parser, pathString);
 * return p.evaluate(tree);
 * ```
 *
 * See `TestXPath` for descriptions. In short, this
 * allows operators:
 *
 * | | |
 * | --- | --- |
 * | `/` | root |
 * | `//` | anywhere |
 * | `!` | invert; this much appear directly after root or anywhere operator |
 *
 * and path elements:
 *
 * | | |
 * | --- | --- |
 * | `ID` | token name |
 * | `'string'` | any string literal token from the grammar |
 * | `expr` | rule name |
 * | `*` | wildcard matching any node |
 *
 * Whitespace is not allowed.
 */
class XPath {
    constructor(parser, path) {
        this.parser = parser;
        this.path = path;
        this.elements = this.split(path);
        // console.log(this.elements.toString());
    }
    // TODO: check for invalid token/rule names, bad syntax
    split(path) {
        let lexer = new XPathLexer_1.XPathLexer(CharStreams_1.CharStreams.fromString(path));
        lexer.recover = (e) => { throw e; };
        lexer.removeErrorListeners();
        lexer.addErrorListener(new XPathLexerErrorListener_1.XPathLexerErrorListener());
        let tokenStream = new CommonTokenStream_1.CommonTokenStream(lexer);
        try {
            tokenStream.fill();
        }
        catch (e) {
            if (e instanceof LexerNoViableAltException_1.LexerNoViableAltException) {
                let pos = lexer.charPositionInLine;
                let msg = "Invalid tokens or characters at index " + pos + " in path '" + path + "' -- " + e.message;
                throw new RangeError(msg);
            }
            throw e;
        }
        let tokens = tokenStream.getTokens();
        // console.log("path=" + path + "=>" + tokens);
        let elements = [];
        let n = tokens.length;
        let i = 0;
        loop: while (i < n) {
            let el = tokens[i];
            let next;
            switch (el.type) {
                case XPathLexer_1.XPathLexer.ROOT:
                case XPathLexer_1.XPathLexer.ANYWHERE:
                    let anywhere = el.type === XPathLexer_1.XPathLexer.ANYWHERE;
                    i++;
                    next = tokens[i];
                    let invert = next.type === XPathLexer_1.XPathLexer.BANG;
                    if (invert) {
                        i++;
                        next = tokens[i];
                    }
                    let pathElement = this.getXPathElement(next, anywhere);
                    pathElement.invert = invert;
                    elements.push(pathElement);
                    i++;
                    break;
                case XPathLexer_1.XPathLexer.TOKEN_REF:
                case XPathLexer_1.XPathLexer.RULE_REF:
                case XPathLexer_1.XPathLexer.WILDCARD:
                    elements.push(this.getXPathElement(el, false));
                    i++;
                    break;
                case Token_1.Token.EOF:
                    break loop;
                default:
                    throw new Error("Unknowth path element " + el);
            }
        }
        return elements;
    }
    /**
     * Convert word like `*` or `ID` or `expr` to a path
     * element. `anywhere` is `true` if `//` precedes the
     * word.
     */
    getXPathElement(wordToken, anywhere) {
        if (wordToken.type === Token_1.Token.EOF) {
            throw new Error("Missing path element at end of path");
        }
        let word = wordToken.text;
        if (word == null) {
            throw new Error("Expected wordToken to have text content.");
        }
        let ttype = this.parser.getTokenType(word);
        let ruleIndex = this.parser.getRuleIndex(word);
        switch (wordToken.type) {
            case XPathLexer_1.XPathLexer.WILDCARD:
                return anywhere ?
                    new XPathWildcardAnywhereElement_1.XPathWildcardAnywhereElement() :
                    new XPathWildcardElement_1.XPathWildcardElement();
            case XPathLexer_1.XPathLexer.TOKEN_REF:
            case XPathLexer_1.XPathLexer.STRING:
                if (ttype === Token_1.Token.INVALID_TYPE) {
                    throw new Error(word + " at index " +
                        wordToken.startIndex +
                        " isn't a valid token name");
                }
                return anywhere ?
                    new XPathTokenAnywhereElement_1.XPathTokenAnywhereElement(word, ttype) :
                    new XPathTokenElement_1.XPathTokenElement(word, ttype);
            default:
                if (ruleIndex === -1) {
                    throw new Error(word + " at index " +
                        wordToken.startIndex +
                        " isn't a valid rule name");
                }
                return anywhere ?
                    new XPathRuleAnywhereElement_1.XPathRuleAnywhereElement(word, ruleIndex) :
                    new XPathRuleElement_1.XPathRuleElement(word, ruleIndex);
        }
    }
    static findAll(tree, xpath, parser) {
        let p = new XPath(parser, xpath);
        return p.evaluate(tree);
    }
    /**
     * Return a list of all nodes starting at `t` as root that satisfy the
     * path. The root `/` is relative to the node passed to {@link evaluate}.
     */
    evaluate(t) {
        let dummyRoot = new ParserRuleContext_1.ParserRuleContext();
        dummyRoot.addChild(t);
        let work = new Set([dummyRoot]);
        let i = 0;
        while (i < this.elements.length) {
            let next = new Set();
            for (let node of work) {
                if (node.childCount > 0) {
                    // only try to match next element if it has children
                    // e.g., //func/*/stat might have a token node for which
                    // we can't go looking for stat nodes.
                    let matching = this.elements[i].evaluate(node);
                    matching.forEach(next.add, next);
                }
            }
            i++;
            work = next;
        }
        return work;
    }
}
exports.XPath = XPath;
XPath.WILDCARD = "*"; // word not operator/separator
XPath.NOT = "!"; // word for invert operator
//# sourceMappingURL=XPath.js.map

/***/ }),

/***/ 7643:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.XPathElement = void 0;
// CONVERSTION complete, Burt Harris 10/14/2016
const Decorators_1 = __webpack_require__(681);
class XPathElement {
    /** Construct element like `/ID` or `ID` or `/*` etc...
     *  op is null if just node
     */
    constructor(nodeName) {
        this.nodeName = nodeName;
        this.invert = false;
    }
    toString() {
        let inv = this.invert ? "!" : "";
        let className = Object.constructor.name;
        return className + "[" + inv + this.nodeName + "]";
    }
}
__decorate([
    Decorators_1.Override
], XPathElement.prototype, "toString", null);
exports.XPathElement = XPathElement;
//# sourceMappingURL=XPathElement.js.map

/***/ }),

/***/ 9203:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// Generated from XPathLexer.g4 by ANTLR 4.9.0-SNAPSHOT
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.XPathLexer = void 0;
const ATNDeserializer_1 = __webpack_require__(6349);
const Lexer_1 = __webpack_require__(8170);
const LexerATNSimulator_1 = __webpack_require__(9796);
const VocabularyImpl_1 = __webpack_require__(1434);
const Utils = __webpack_require__(3070);
class XPathLexer extends Lexer_1.Lexer {
    // tslint:enable:no-trailing-whitespace
    constructor(input) {
        super(input);
        this._interp = new LexerATNSimulator_1.LexerATNSimulator(XPathLexer._ATN, this);
    }
    // @Override
    // @NotNull
    get vocabulary() {
        return XPathLexer.VOCABULARY;
    }
    // @Override
    get grammarFileName() { return "XPathLexer.g4"; }
    // @Override
    get ruleNames() { return XPathLexer.ruleNames; }
    // @Override
    get serializedATN() { return XPathLexer._serializedATN; }
    // @Override
    get channelNames() { return XPathLexer.channelNames; }
    // @Override
    get modeNames() { return XPathLexer.modeNames; }
    // @Override
    action(_localctx, ruleIndex, actionIndex) {
        switch (ruleIndex) {
            case 4:
                this.ID_action(_localctx, actionIndex);
                break;
        }
    }
    ID_action(_localctx, actionIndex) {
        switch (actionIndex) {
            case 0:
                let text = this.text;
                if (text.charAt(0) === text.charAt(0).toUpperCase()) {
                    this.type = XPathLexer.TOKEN_REF;
                }
                else {
                    this.type = XPathLexer.RULE_REF;
                }
                break;
        }
    }
    static get _ATN() {
        if (!XPathLexer.__ATN) {
            XPathLexer.__ATN = new ATNDeserializer_1.ATNDeserializer().deserialize(Utils.toCharArray(XPathLexer._serializedATN));
        }
        return XPathLexer.__ATN;
    }
}
exports.XPathLexer = XPathLexer;
XPathLexer.TOKEN_REF = 1;
XPathLexer.RULE_REF = 2;
XPathLexer.ANYWHERE = 3;
XPathLexer.ROOT = 4;
XPathLexer.WILDCARD = 5;
XPathLexer.BANG = 6;
XPathLexer.ID = 7;
XPathLexer.STRING = 8;
// tslint:disable:no-trailing-whitespace
XPathLexer.channelNames = [
    "DEFAULT_TOKEN_CHANNEL", "HIDDEN",
];
// tslint:disable:no-trailing-whitespace
XPathLexer.modeNames = [
    "DEFAULT_MODE",
];
XPathLexer.ruleNames = [
    "ANYWHERE", "ROOT", "WILDCARD", "BANG", "ID", "NameChar", "NameStartChar",
    "STRING",
];
XPathLexer._LITERAL_NAMES = [
    undefined, undefined, undefined, "'//'", "'/'", "'*'", "'!'",
];
XPathLexer._SYMBOLIC_NAMES = [
    undefined, "TOKEN_REF", "RULE_REF", "ANYWHERE", "ROOT", "WILDCARD", "BANG",
    "ID", "STRING",
];
XPathLexer.VOCABULARY = new VocabularyImpl_1.VocabularyImpl(XPathLexer._LITERAL_NAMES, XPathLexer._SYMBOLIC_NAMES, []);
XPathLexer._serializedATNSegments = 2;
XPathLexer._serializedATNSegment0 = "\x03\uC91D\uCABA\u058D\uAFBA\u4F53\u0607\uEA8B\uC241\x02\n2\b\x01\x04" +
    "\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06\x04" +
    "\x07\t\x07\x04\b\t\b\x04\t\t\t\x03\x02\x03\x02\x03\x02\x03\x03\x03\x03" +
    "\x03\x04\x03\x04\x03\x05\x03\x05\x03\x06\x03\x06\x07\x06\x1F\n\x06\f\x06" +
    "\x0E\x06\"\v\x06\x03\x06\x03\x06\x03\x07\x03\x07\x03\b\x03\b\x03\t\x03" +
    "\t\x07\t,\n\t\f\t\x0E\t/\v\t\x03\t\x03\t\x03-\x02\x02\n\x03\x02\x05\x05" +
    "\x02\x06\x07\x02\x07\t\x02\b\v\x02\t\r\x02\x02\x0F\x02\x02\x11\x02\n\x03" +
    "\x02\x02\x04\u02B6\x02\x02\x02\n\x02\x10\x02\x1D\x022\x02;\x02C\x02\\" +
    "\x02a\x02a\x02c\x02|\x02\x81\x02\xA1\x02\xAC\x02\xAC\x02\xAF\x02\xAF\x02" +
    "\xB7\x02\xB7\x02\xBC\x02\xBC\x02\xC2\x02\xD8\x02\xDA\x02\xF8\x02\xFA\x02" +
    "\u02C3\x02\u02C8\x02\u02D3\x02\u02E2\x02\u02E6\x02\u02EE\x02\u02EE\x02" +
    "\u02F0\x02\u02F0\x02\u0302\x02\u0376\x02\u0378\x02\u0379\x02\u037C\x02" +
    "\u037F\x02\u0381\x02\u0381\x02\u0388\x02\u0388\x02\u038A\x02\u038C\x02" +
    "\u038E\x02\u038E\x02\u0390\x02\u03A3\x02\u03A5\x02\u03F7\x02\u03F9\x02" +
    "\u0483\x02\u0485\x02\u0489\x02\u048C\x02\u0531\x02\u0533\x02\u0558\x02" +
    "\u055B\x02\u055B\x02\u0563\x02\u0589\x02\u0593\x02\u05BF\x02\u05C1\x02" +
    "\u05C1\x02\u05C3\x02\u05C4\x02\u05C6\x02\u05C7\x02\u05C9\x02\u05C9\x02" +
    "\u05D2\x02\u05EC\x02\u05F2\x02\u05F4\x02\u0602\x02\u0607\x02\u0612\x02" +
    "\u061C\x02\u061E\x02\u061E\x02\u0622\x02\u066B\x02\u0670\x02\u06D5\x02" +
    "\u06D7\x02\u06DF\x02\u06E1\x02\u06EA\x02\u06EC\x02\u06FE\x02\u0701\x02" +
    "\u0701\x02\u0711\x02\u074C\x02\u074F\x02\u07B3\x02\u07C2\x02\u07F7\x02" +
    "\u07FC\x02\u07FC\x02\u0802\x02\u082F\x02\u0842\x02\u085D\x02\u08A2\x02" +
    "\u08B6\x02\u08B8\x02\u08BF\x02\u08D6\x02\u0965\x02\u0968\x02\u0971\x02" +
    "\u0973\x02\u0985\x02\u0987\x02\u098E\x02\u0991\x02\u0992\x02\u0995\x02" +
    "\u09AA\x02\u09AC\x02\u09B2\x02\u09B4\x02\u09B4\x02\u09B8\x02\u09BB\x02" +
    "\u09BE\x02\u09C6\x02\u09C9\x02\u09CA\x02\u09CD\x02\u09D0\x02\u09D9\x02" +
    "\u09D9\x02\u09DE\x02\u09DF\x02\u09E1\x02\u09E5\x02\u09E8\x02\u09F3\x02" +
    "\u0A03\x02\u0A05\x02\u0A07\x02\u0A0C\x02\u0A11\x02\u0A12\x02\u0A15\x02" +
    "\u0A2A\x02\u0A2C\x02\u0A32\x02\u0A34\x02\u0A35\x02\u0A37\x02\u0A38\x02" +
    "\u0A3A\x02\u0A3B\x02\u0A3E\x02\u0A3E\x02\u0A40\x02\u0A44\x02\u0A49\x02" +
    "\u0A4A\x02\u0A4D\x02\u0A4F\x02\u0A53\x02\u0A53\x02\u0A5B\x02\u0A5E\x02" +
    "\u0A60\x02\u0A60\x02\u0A68\x02\u0A77\x02\u0A83\x02\u0A85\x02\u0A87\x02" +
    "\u0A8F\x02\u0A91\x02\u0A93\x02\u0A95\x02\u0AAA\x02\u0AAC\x02\u0AB2\x02" +
    "\u0AB4\x02\u0AB5\x02\u0AB7\x02\u0ABB\x02\u0ABE\x02\u0AC7\x02\u0AC9\x02" +
    "\u0ACB\x02\u0ACD\x02\u0ACF\x02\u0AD2\x02\u0AD2\x02\u0AE2\x02\u0AE5\x02" +
    "\u0AE8\x02\u0AF1\x02\u0AFB\x02\u0AFB\x02\u0B03\x02\u0B05\x02\u0B07\x02" +
    "\u0B0E\x02\u0B11\x02\u0B12\x02\u0B15\x02\u0B2A\x02\u0B2C\x02\u0B32\x02" +
    "\u0B34\x02\u0B35\x02\u0B37\x02\u0B3B\x02\u0B3E\x02\u0B46\x02\u0B49\x02" +
    "\u0B4A\x02\u0B4D\x02\u0B4F\x02\u0B58\x02\u0B59\x02\u0B5E\x02\u0B5F\x02" +
    "\u0B61\x02\u0B65\x02\u0B68\x02\u0B71\x02\u0B73\x02\u0B73\x02\u0B84\x02" +
    "\u0B85\x02\u0B87\x02\u0B8C\x02\u0B90\x02\u0B92\x02\u0B94\x02\u0B97\x02" +
    "\u0B9B\x02\u0B9C\x02\u0B9E\x02\u0B9E\x02\u0BA0\x02\u0BA1\x02\u0BA5\x02" +
    "\u0BA6\x02\u0BAA\x02\u0BAC\x02\u0BB0\x02\u0BBB\x02\u0BC0\x02\u0BC4\x02" +
    "\u0BC8\x02\u0BCA\x02\u0BCC\x02\u0BCF\x02\u0BD2\x02\u0BD2\x02\u0BD9\x02" +
    "\u0BD9\x02\u0BE8\x02\u0BF1\x02\u0C02\x02\u0C05\x02\u0C07\x02\u0C0E\x02" +
    "\u0C10\x02\u0C12\x02\u0C14\x02\u0C2A\x02\u0C2C\x02\u0C3B\x02\u0C3F\x02" +
    "\u0C46\x02\u0C48\x02\u0C4A\x02\u0C4C\x02\u0C4F\x02\u0C57\x02\u0C58\x02" +
    "\u0C5A\x02\u0C5C\x02\u0C62\x02\u0C65\x02\u0C68\x02\u0C71\x02\u0C82\x02" +
    "\u0C85\x02\u0C87\x02\u0C8E\x02\u0C90\x02\u0C92\x02\u0C94\x02\u0CAA\x02" +
    "\u0CAC\x02\u0CB5\x02\u0CB7\x02\u0CBB\x02\u0CBE\x02\u0CC6\x02\u0CC8\x02" +
    "\u0CCA\x02\u0CCC\x02\u0CCF\x02\u0CD7\x02\u0CD8\x02\u0CE0\x02\u0CE0\x02" +
    "\u0CE2\x02\u0CE5\x02\u0CE8\x02\u0CF1\x02\u0CF3\x02\u0CF4\x02\u0D03\x02" +
    "\u0D05\x02\u0D07\x02\u0D0E\x02\u0D10\x02\u0D12\x02\u0D14\x02\u0D3C\x02" +
    "\u0D3F\x02\u0D46\x02\u0D48\x02\u0D4A\x02\u0D4C\x02\u0D50\x02\u0D56\x02" +
    "\u0D59\x02\u0D61\x02\u0D65\x02\u0D68\x02\u0D71\x02\u0D7C\x02\u0D81\x02" +
    "\u0D84\x02\u0D85\x02\u0D87\x02\u0D98\x02\u0D9C\x02\u0DB3\x02\u0DB5\x02" +
    "\u0DBD\x02\u0DBF\x02\u0DBF\x02\u0DC2\x02\u0DC8\x02\u0DCC\x02\u0DCC\x02" +
    "\u0DD1\x02\u0DD6\x02\u0DD8\x02\u0DD8\x02\u0DDA\x02\u0DE1\x02\u0DE8\x02" +
    "\u0DF1\x02\u0DF4\x02\u0DF5\x02\u0E03\x02\u0E3C\x02\u0E42\x02\u0E50\x02" +
    "\u0E52\x02\u0E5B\x02\u0E83\x02\u0E84\x02\u0E86\x02\u0E86\x02\u0E89\x02" +
    "\u0E8A\x02\u0E8C\x02\u0E8C\x02\u0E8F\x02\u0E8F\x02\u0E96\x02\u0E99\x02" +
    "\u0E9B\x02\u0EA1\x02\u0EA3\x02\u0EA5\x02\u0EA7\x02\u0EA7\x02\u0EA9\x02" +
    "\u0EA9\x02\u0EAC\x02\u0EAD\x02\u0EAF\x02\u0EBB\x02\u0EBD\x02\u0EBF\x02" +
    "\u0EC2\x02\u0EC6\x02\u0EC8\x02\u0EC8\x02\u0ECA\x02\u0ECF\x02\u0ED2\x02" +
    "\u0EDB\x02\u0EDE\x02\u0EE1\x02\u0F02\x02\u0F02\x02\u0F1A\x02\u0F1B\x02" +
    "\u0F22\x02\u0F2B\x02\u0F37\x02\u0F37\x02\u0F39\x02\u0F39\x02\u0F3B\x02" +
    "\u0F3B\x02\u0F40\x02\u0F49\x02\u0F4B\x02\u0F6E\x02\u0F73\x02\u0F86\x02" +
    "\u0F88\x02\u0F99\x02\u0F9B\x02\u0FBE\x02\u0FC8\x02\u0FC8\x02\u1002\x02" +
    "\u104B\x02\u1052\x02\u109F\x02\u10A2\x02\u10C7\x02\u10C9\x02\u10C9\x02" +
    "\u10CF\x02\u10CF\x02\u10D2\x02\u10FC\x02\u10FE\x02\u124A\x02\u124C\x02" +
    "\u124F\x02\u1252\x02\u1258\x02\u125A\x02\u125A\x02\u125C\x02\u125F\x02" +
    "\u1262\x02\u128A\x02\u128C\x02\u128F\x02\u1292\x02\u12B2\x02\u12B4\x02" +
    "\u12B7\x02\u12BA\x02\u12C0\x02\u12C2\x02\u12C2\x02\u12C4\x02\u12C7\x02" +
    "\u12CA\x02\u12D8\x02\u12DA\x02\u1312\x02\u1314\x02\u1317\x02\u131A\x02" +
    "\u135C\x02\u135F\x02\u1361\x02\u1382\x02\u1391\x02\u13A2\x02\u13F7\x02" +
    "\u13FA\x02\u13FF\x02\u1403\x02\u166E\x02\u1671\x02\u1681\x02\u1683\x02" +
    "\u169C\x02\u16A2\x02\u16EC\x02\u16F0\x02\u16FA\x02\u1702\x02\u170E\x02" +
    "\u1710\x02\u1716\x02\u1722\x02\u1736\x02\u1742\x02\u1755\x02\u1762\x02" +
    "\u176E\x02\u1770\x02\u1772\x02\u1774\x02\u1775\x02\u1782\x02\u17D5\x02" +
    "\u17D9\x02\u17D9\x02\u17DE\x02\u17DF\x02\u17E2\x02\u17EB\x02\u180D\x02" +
    "\u1810\x02\u1812\x02\u181B\x02\u1822\x02\u1879\x02\u1882\x02\u18AC\x02" +
    "\u18B2\x02\u18F7\x02\u1902\x02\u1920\x02\u1922\x02\u192D\x02\u1932\x02" +
    "\u193D\x02\u1948\x02\u196F\x02\u1972\x02\u1976\x02\u1982\x02\u19AD\x02" +
    "\u19B2\x02\u19CB\x02\u19D2\x02\u19DB\x02\u1A02\x02\u1A1D\x02\u1A22\x02" +
    "\u1A60\x02\u1A62\x02\u1A7E\x02\u1A81\x02\u1A8B\x02\u1A92\x02\u1A9B\x02" +
    "\u1AA9\x02\u1AA9\x02\u1AB2\x02\u1ABF\x02\u1B02\x02\u1B4D\x02\u1B52\x02" +
    "\u1B5B\x02\u1B6D\x02\u1B75\x02\u1B82\x02\u1BF5\x02\u1C02\x02\u1C39\x02" +
    "\u1C42\x02\u1C4B\x02\u1C4F\x02\u1C7F\x02\u1C82\x02\u1C8A\x02\u1CD2\x02" +
    "\u1CD4\x02\u1CD6\x02\u1CF8\x02\u1CFA\x02\u1CFB\x02\u1D02\x02\u1DF7\x02" +
    "\u1DFD\x02\u1F17\x02\u1F1A\x02\u1F1F\x02\u1F22\x02\u1F47\x02\u1F4A\x02" +
    "\u1F4F\x02\u1F52\x02\u1F59\x02\u1F5B\x02\u1F5B\x02\u1F5D\x02\u1F5D\x02" +
    "\u1F5F\x02\u1F5F\x02\u1F61\x02\u1F7F\x02\u1F82\x02\u1FB6\x02\u1FB8\x02" +
    "\u1FBE\x02\u1FC0\x02\u1FC0\x02\u1FC4\x02\u1FC6\x02\u1FC8\x02\u1FCE\x02" +
    "\u1FD2\x02\u1FD5\x02\u1FD8\x02\u1FDD\x02\u1FE2\x02\u1FEE\x02\u1FF4\x02" +
    "\u1FF6\x02\u1FF8\x02\u1FFE\x02\u200D\x02\u2011\x02\u202C\x02\u2030\x02" +
    "\u2041\x02\u2042\x02\u2056\x02\u2056\x02\u2062\x02\u2066\x02\u2068\x02" +
    "\u2071\x02\u2073\x02\u2073\x02\u2081\x02\u2081\x02\u2092\x02\u209E\x02" +
    "\u20D2\x02\u20DE\x02\u20E3\x02\u20E3\x02\u20E7\x02\u20F2\x02\u2104\x02" +
    "\u2104\x02\u2109\x02\u2109\x02\u210C\x02\u2115\x02\u2117\x02\u2117\x02" +
    "\u211B\x02\u211F\x02\u2126\x02\u2126\x02\u2128\x02\u2128\x02\u212A\x02" +
    "\u212A\x02\u212C\x02\u212F\x02\u2131\x02\u213B\x02\u213E\x02\u2141\x02" +
    "\u2147\x02\u214B\x02\u2150\x02\u2150\x02\u2162\x02\u218A\x02\u2C02\x02" +
    "\u2C30\x02\u2C32\x02\u2C60\x02\u2C62\x02\u2CE6\x02\u2CED\x02\u2CF5\x02" +
    "\u2D02\x02\u2D27\x02\u2D29\x02\u2D29\x02\u2D2F\x02\u2D2F\x02\u2D32\x02" +
    "\u2D69\x02\u2D71\x02\u2D71\x02\u2D81\x02\u2D98\x02\u2DA2\x02\u2DA8\x02" +
    "\u2DAA\x02\u2DB0\x02\u2DB2\x02\u2DB8\x02\u2DBA\x02\u2DC0\x02\u2DC2\x02" +
    "\u2DC8\x02\u2DCA\x02\u2DD0\x02\u2DD2\x02\u2DD8\x02\u2DDA\x02\u2DE0\x02" +
    "\u2DE2\x02\u2E01\x02\u2E31\x02\u2E31\x02\u3007\x02\u3009\x02\u3023\x02" +
    "\u3031\x02\u3033\x02\u3037\x02\u303A\x02\u303E\x02\u3043\x02\u3098\x02" +
    "\u309B\x02\u309C\x02\u309F\x02\u30A1\x02\u30A3\x02\u30FC\x02\u30FE\x02" +
    "\u3101\x02\u3107\x02\u312F\x02\u3133\x02\u3190\x02\u31A2\x02\u31BC\x02" +
    "\u31F2\x02\u3201\x02\u3402\x02\u4DB7\x02\u4E02\x02\u9FD7\x02\uA002\x02" +
    "\uA48E\x02\uA4D2\x02\uA4FF\x02\uA502\x02\uA60E\x02\uA612\x02\uA62D\x02" +
    "\uA642\x02\uA671\x02\uA676\x02\uA67F\x02\uA681\x02\uA6F3\x02\uA719\x02" +
    "\uA721\x02\uA724\x02\uA78A\x02\uA78D\x02\uA7B0\x02\uA7B2\x02\uA7B9\x02" +
    "\uA7F9\x02\uA829\x02\uA842\x02\uA875\x02\uA882\x02\uA8C7\x02\uA8D2\x02" +
    "\uA8DB\x02\uA8E2\x02\uA8F9\x02\uA8FD\x02\uA8FD\x02\uA8FF\x02\uA8FF\x02" +
    "\uA902\x02\uA92F\x02\uA932\x02\uA955\x02\uA962\x02\uA97E\x02\uA982\x02" +
    "\uA9C2\x02\uA9D1\x02\uA9DB\x02\uA9E2\x02\uAA00\x02\uAA02\x02\uAA38\x02" +
    "\uAA42\x02\uAA4F\x02\uAA52\x02\uAA5B\x02\uAA62\x02\uAA78\x02\uAA7C\x02" +
    "\uAAC4\x02\uAADD\x02\uAADF\x02\uAAE2\x02\uAAF1\x02\uAAF4\x02\uAAF8\x02" +
    "\uAB03\x02\uAB08\x02\uAB0B\x02\uAB10\x02\uAB13\x02\uAB18\x02\uAB22\x02" +
    "\uAB28\x02\uAB2A\x02\uAB30\x02\uAB32\x02\uAB5C\x02\uAB5E\x02\uAB67\x02" +
    "\uAB72\x02\uABEC\x02\uABEE\x02\uABEF\x02\uABF2\x02\uABFB\x02\uAC02\x02" +
    "\uD7A5\x02\uD7B2\x02\uD7C8\x02\uD7CD\x02\uD7FD\x02\uF902\x02\uFA6F\x02" +
    "\uFA72\x02\uFADB\x02\uFB02\x02\uFB08\x02\uFB15\x02\uFB19\x02\uFB1F\x02" +
    "\uFB2A\x02\uFB2C\x02\uFB38\x02\uFB3A\x02\uFB3E\x02\uFB40\x02\uFB40\x02" +
    "\uFB42\x02\uFB43\x02\uFB45\x02\uFB46\x02\uFB48\x02\uFBB3\x02\uFBD5\x02" +
    "\uFD3F\x02\uFD52\x02\uFD91\x02\uFD94\x02\uFDC9\x02\uFDF2\x02\uFDFD\x02" +
    "\uFE02\x02\uFE11\x02\uFE22\x02\uFE31\x02\uFE35\x02\uFE36\x02\uFE4F\x02" +
    "\uFE51\x02\uFE72\x02\uFE76\x02\uFE78\x02\uFEFE\x02\uFF01\x02\uFF01\x02" +
    "\uFF12\x02\uFF1B\x02\uFF23\x02\uFF3C\x02\uFF41\x02\uFF41\x02\uFF43\x02" +
    "\uFF5C\x02\uFF68\x02\uFFC0\x02\uFFC4\x02\uFFC9\x02\uFFCC\x02\uFFD1\x02" +
    "\uFFD4\x02\uFFD9\x02\uFFDC\x02\uFFDE\x02\uFFFB\x02\uFFFD\x02\x02\x03\r" +
    "\x03\x0F\x03(\x03*\x03<\x03>\x03?\x03A\x03O\x03R\x03_\x03\x82\x03\xFC" +
    "\x03\u0142\x03\u0176\x03\u01FF\x03\u01FF\x03\u0282\x03\u029E\x03\u02A2" +
    "\x03\u02D2\x03\u02E2\x03\u02E2\x03\u0302\x03\u0321\x03\u0332\x03\u034C" +
    "\x03\u0352\x03\u037C\x03\u0382\x03\u039F\x03\u03A2\x03\u03C5\x03\u03CA" +
    "\x03\u03D1\x03\u03D3\x03\u03D7\x03\u0402\x03\u049F\x03\u04A2\x03\u04AB" +
    "\x03\u04B2\x03\u04D5\x03\u04DA\x03\u04FD\x03\u0502\x03\u0529\x03\u0532" +
    "\x03\u0565\x03\u0602\x03\u0738\x03\u0742\x03\u0757\x03\u0762\x03\u0769" +
    "\x03\u0802\x03\u0807\x03\u080A\x03\u080A\x03\u080C\x03\u0837\x03\u0839" +
    "\x03\u083A\x03\u083E\x03\u083E\x03\u0841\x03\u0857\x03\u0862\x03\u0878" +
    "\x03\u0882\x03\u08A0\x03\u08E2\x03\u08F4\x03\u08F6\x03\u08F7\x03\u0902" +
    "\x03\u0917\x03\u0922\x03\u093B\x03\u0982\x03\u09B9\x03\u09C0\x03\u09C1" +
    "\x03\u0A02\x03\u0A05\x03\u0A07\x03\u0A08\x03\u0A0E\x03\u0A15\x03\u0A17" +
    "\x03\u0A19\x03\u0A1B\x03\u0A35\x03\u0A3A\x03\u0A3C\x03\u0A41\x03\u0A41" +
    "\x03\u0A62\x03\u0A7E\x03\u0A82\x03\u0A9E\x03\u0AC2\x03\u0AC9\x03\u0ACB" +
    "\x03\u0AE8\x03\u0B02\x03\u0B37\x03\u0B42\x03\u0B57\x03\u0B62\x03\u0B74" +
    "\x03\u0B82\x03\u0B93\x03\u0C02\x03\u0C4A\x03\u0C82\x03\u0CB4\x03\u0CC2" +
    "\x03\u0CF4\x03\u1002\x03\u1048\x03\u1068\x03\u1071\x03\u1081\x03\u10BC" +
    "\x03\u10BF\x03\u10BF\x03\u10D2\x03\u10EA\x03\u10F2\x03\u10FB\x03\u1102" +
    "\x03\u1136\x03\u1138\x03\u1141\x03\u1152\x03\u1175\x03\u1178\x03\u1178" +
    "\x03\u1182\x03\u11C6\x03\u11CC\x03\u11CE\x03\u11D2\x03\u11DC\x03\u11DE" +
    "\x03\u11DE\x03\u1202\x03\u1213\x03\u1215\x03\u1239\x03\u1240\x03\u1240" +
    "\x03\u1282\x03\u1288\x03\u128A\x03\u128A\x03\u128C\x03\u128F\x03\u1291" +
    "\x03\u129F\x03\u12A1\x03\u12AA\x03\u12B2\x03\u12EC\x03\u12F2\x03\u12FB" +
    "\x03\u1302\x03\u1305\x03\u1307\x03\u130E\x03\u1311\x03\u1312\x03\u1315" +
    "\x03\u132A\x03\u132C\x03\u1332\x03\u1334\x03\u1335\x03\u1337\x03\u133B" +
    "\x03\u133E\x03\u1346\x03\u1349\x03\u134A\x03\u134D\x03\u134F\x03\u1352" +
    "\x03\u1352\x03\u1359\x03\u1359\x03\u135F\x03\u1365\x03\u1368\x03\u136E" +
    "\x03\u1372\x03\u1376\x03\u1402\x03\u144C\x03\u1452\x03\u145B\x03\u1482" +
    "\x03\u14C7\x03\u14C9\x03\u14C9\x03\u14D2\x03\u14DB\x03\u1582\x03\u15B7" +
    "\x03\u15BA\x03\u15C2\x03\u15DA\x03\u15DF\x03\u1602\x03\u1642\x03\u1646" +
    "\x03\u1646\x03\u1652\x03\u165B\x03\u1682\x03\u16B9\x03\u16C2\x03\u16CB" +
    "\x03\u1702\x03\u171B\x03\u171F\x03\u172D\x03\u1732\x03\u173B\x03\u18A2" +
    "\x03\u18EB\x03\u1901\x03\u1901\x03\u1AC2\x03\u1AFA\x03\u1C02\x03\u1C0A" +
    "\x03\u1C0C\x03\u1C38\x03\u1C3A\x03\u1C42\x03\u1C52\x03\u1C5B\x03\u1C74" +
    "\x03\u1C91\x03\u1C94\x03\u1CA9\x03\u1CAB\x03\u1CB8\x03\u2002\x03\u239B" +
    "\x03\u2402\x03\u2470\x03\u2482\x03\u2545\x03\u3002\x03\u3430\x03\u4402" +
    "\x03\u4648\x03\u6802\x03\u6A3A\x03\u6A42\x03\u6A60\x03\u6A62\x03\u6A6B" +
    "\x03\u6AD2\x03\u6AEF\x03\u6AF2\x03\u6AF6\x03\u6B02\x03\u6B38\x03\u6B42" +
    "\x03\u6B45\x03\u6B52\x03\u6B5B\x03\u6B65\x03\u6B79\x03\u6B7F\x03\u6B91" +
    "\x03\u6F02\x03\u6F46\x03\u6F52\x03\u6F80\x03\u6F91\x03\u6FA1\x03\u6FE2" +
    "\x03\u6FE2\x03\u7002\x03\u87EE\x03\u8802\x03\u8AF4\x03\uB002\x03\uB003" +
    "\x03\uBC02\x03\uBC6C\x03\uBC72\x03\uBC7E\x03\uBC82\x03\uBC8A\x03\uBC92" +
    "\x03\uBC9B\x03\uBC9F\x03\uBCA0\x03\uBCA2\x03\uBCA5\x03\uD167\x03\uD16B" +
    "\x03\uD16F\x03\uD184\x03\uD187\x03\uD18D\x03\uD1AC\x03\uD1AF\x03\uD244" +
    "\x03\uD246\x03\uD402\x03\uD456\x03\uD458\x03\uD49E\x03\uD4A0\x03\uD4A1" +
    "\x03\uD4A4\x03\uD4A4\x03\uD4A7\x03\uD4A8\x03\uD4AB\x03\uD4AE\x03\uD4B0" +
    "\x03\uD4BB\x03\uD4BD\x03\uD4BD\x03\uD4BF\x03\uD4C5\x03\uD4C7\x03\uD507" +
    "\x03\uD509\x03\uD50C\x03\uD50F\x03\uD516\x03\uD518\x03\uD51E\x03\uD520" +
    "\x03\uD53B\x03\uD53D\x03\uD540\x03\uD542\x03\uD546\x03\uD548\x03\uD548" +
    "\x03\uD54C\x03\uD552\x03\uD554\x03\uD6A7\x03\uD6AA\x03\uD6C2\x03\uD6C4" +
    "\x03\uD6DC\x03\uD6DE\x03\uD6FC\x03\uD6FE\x03\uD716\x03\uD718\x03\uD736" +
    "\x03\uD738\x03\uD750\x03\uD752\x03\uD770\x03\uD772\x03\uD78A\x03\uD78C" +
    "\x03\uD7AA\x03\uD7AC\x03\uD7C4\x03\uD7C6\x03\uD7CD\x03\uD7D0\x03\uD801" +
    "\x03\uDA02\x03\uDA38\x03\uDA3D\x03\uDA6E\x03\uDA77\x03\uDA77\x03\uDA86" +
    "\x03\uDA86\x03\uDA9D\x03\uDAA1\x03\uDAA3\x03\uDAB1\x03\uE002\x03\uE008" +
    "\x03\uE00A\x03\uE01A\x03\uE01D\x03\uE023\x03\uE025\x03\uE026\x03\uE028" +
    "\x03\uE02C\x03\uE802\x03\uE8C6\x03\uE8D2\x03\uE8D8\x03\uE902\x03\uE94C" +
    "\x03\uE952\x03\uE95B\x03\uEE02\x03\uEE05\x03\uEE07\x03\uEE21\x03\uEE23" +
    "\x03\uEE24\x03\uEE26\x03\uEE26\x03\uEE29\x03\uEE29\x03\uEE2B\x03\uEE34" +
    "\x03\uEE36\x03\uEE39\x03\uEE3B\x03\uEE3B\x03\uEE3D\x03\uEE3D\x03\uEE44" +
    "\x03\uEE44\x03\uEE49\x03\uEE49\x03\uEE4B\x03\uEE4B\x03\uEE4D\x03\uEE4D" +
    "\x03\uEE4F\x03\uEE51\x03\uEE53\x03\uEE54\x03\uEE56\x03\uEE56\x03\uEE59" +
    "\x03\uEE59\x03\uEE5B\x03\uEE5B\x03\uEE5D\x03\uEE5D\x03\uEE5F\x03\uEE5F" +
    "\x03\uEE61\x03\uEE61\x03\uEE63\x03\uEE64\x03\uEE66\x03\uEE66\x03\uEE69" +
    "\x03\uEE6C\x03\uEE6E\x03\uEE74\x03\uEE76\x03\uEE79\x03\uEE7B\x03\uEE7E" +
    "\x03\uEE80\x03\uEE80\x03\uEE82\x03\uEE8B\x03\uEE8D\x03\uEE9D\x03\uEEA3" +
    "\x03\uEEA5\x03\uEEA7\x03\uEEAB\x03\uEEAD\x03\uEEBD\x03\x02\x04\uA6D8\x04" +
    "\uA702\x04\uB736\x04\uB742\x04\uB81F\x04\uB822\x04\uCEA3\x04\uF802\x04" +
    "\uFA1F\x04\x03\x10\x03\x10\"\x10\x81\x10\u0102\x10\u01F1\x10\u0240\x02" +
    "C\x02\\\x02c\x02|\x02\xAC\x02\xAC\x02\xB7\x02\xB7\x02\xBC\x02\xBC\x02" +
    "\xC2\x02\xD8\x02\xDA\x02\xF8\x02\xFA\x02\u02C3\x02\u02C8\x02\u02D3\x02" +
    "\u02E2\x02\u02E6\x02\u02EE\x02\u02EE\x02\u02F0\x02\u02F0\x02\u0372\x02" +
    "\u0376\x02\u0378\x02\u0379\x02\u037C\x02\u037F\x02\u0381\x02\u0381\x02" +
    "\u0388\x02\u0388\x02\u038A\x02\u038C\x02\u038E\x02\u038E\x02\u0390\x02" +
    "\u03A3\x02\u03A5\x02\u03F7\x02\u03F9\x02\u0483\x02\u048C\x02\u0531\x02" +
    "\u0533\x02\u0558\x02\u055B\x02\u055B\x02\u0563\x02\u0589\x02\u05D2\x02" +
    "\u05EC\x02\u05F2\x02\u05F4\x02\u0622\x02\u064C\x02\u0670\x02\u0671\x02" +
    "\u0673\x02\u06D5\x02\u06D7\x02\u06D7\x02\u06E7\x02\u06E8\x02\u06F0\x02" +
    "\u06F1\x02\u06FC\x02\u06FE\x02\u0701\x02\u0701\x02\u0712\x02\u0712\x02" +
    "\u0714\x02\u0731\x02\u074F\x02\u07A7\x02\u07B3\x02\u07B3\x02\u07CC\x02" +
    "\u07EC\x02\u07F6\x02\u07F7\x02\u07FC\x02\u07FC\x02\u0802\x02\u0817\x02" +
    "\u081C\x02\u081C\x02\u0826\x02\u0826\x02\u082A\x02\u082A\x02\u0842\x02" +
    "\u085A\x02\u08A2\x02\u08B6\x02\u08B8\x02\u08BF\x02\u0906\x02\u093B\x02" +
    "\u093F\x02\u093F\x02\u0952\x02\u0952\x02\u095A\x02\u0963\x02\u0973\x02" +
    "\u0982\x02\u0987\x02\u098E\x02\u0991\x02\u0992\x02\u0995\x02\u09AA\x02" +
    "\u09AC\x02\u09B2\x02\u09B4\x02\u09B4\x02\u09B8\x02\u09BB\x02\u09BF\x02" +
    "\u09BF\x02\u09D0\x02\u09D0\x02\u09DE\x02\u09DF\x02\u09E1\x02\u09E3\x02" +
    "\u09F2\x02\u09F3\x02\u0A07\x02\u0A0C\x02\u0A11\x02\u0A12\x02\u0A15\x02" +
    "\u0A2A\x02\u0A2C\x02\u0A32\x02\u0A34\x02\u0A35\x02\u0A37\x02\u0A38\x02" +
    "\u0A3A\x02\u0A3B\x02\u0A5B\x02\u0A5E\x02\u0A60\x02\u0A60\x02\u0A74\x02" +
    "\u0A76\x02\u0A87\x02\u0A8F\x02\u0A91\x02\u0A93\x02\u0A95\x02\u0AAA\x02" +
    "\u0AAC\x02\u0AB2\x02\u0AB4\x02\u0AB5\x02\u0AB7\x02\u0ABB\x02\u0ABF\x02" +
    "\u0ABF\x02\u0AD2\x02\u0AD2\x02\u0AE2\x02\u0AE3\x02\u0AFB\x02\u0AFB\x02" +
    "\u0B07\x02\u0B0E\x02\u0B11\x02\u0B12\x02\u0B15\x02\u0B2A\x02\u0B2C\x02" +
    "\u0B32\x02\u0B34\x02\u0B35\x02\u0B37\x02\u0B3B\x02\u0B3F\x02\u0B3F\x02" +
    "\u0B5E\x02\u0B5F\x02\u0B61\x02\u0B63\x02\u0B73\x02\u0B73\x02\u0B85\x02" +
    "\u0B85\x02\u0B87\x02\u0B8C\x02\u0B90\x02\u0B92\x02\u0B94\x02\u0B97\x02" +
    "\u0B9B\x02\u0B9C\x02\u0B9E\x02\u0B9E\x02\u0BA0\x02\u0BA1\x02\u0BA5\x02" +
    "\u0BA6\x02\u0BAA\x02\u0BAC\x02\u0BB0\x02\u0BBB\x02\u0BD2\x02\u0BD2\x02" +
    "\u0C07\x02\u0C0E\x02\u0C10\x02\u0C12\x02\u0C14\x02\u0C2A\x02\u0C2C\x02" +
    "\u0C3B\x02\u0C3F\x02\u0C3F\x02\u0C5A\x02\u0C5C\x02\u0C62\x02\u0C63\x02" +
    "\u0C82\x02\u0C82\x02\u0C87\x02\u0C8E\x02\u0C90\x02\u0C92\x02\u0C94\x02" +
    "\u0CAA\x02\u0CAC\x02\u0CB5\x02\u0CB7\x02\u0CBB\x02\u0CBF\x02\u0CBF\x02" +
    "\u0CE0\x02\u0CE0\x02\u0CE2\x02\u0CE3\x02\u0CF3\x02\u0CF4\x02\u0D07\x02" +
    "\u0D0E\x02\u0D10\x02\u0D12\x02\u0D14\x02\u0D3C\x02\u0D3F\x02\u0D3F\x02" +
    "\u0D50\x02\u0D50\x02\u0D56\x02\u0D58\x02\u0D61\x02\u0D63\x02\u0D7C\x02" +
    "\u0D81\x02\u0D87\x02\u0D98\x02\u0D9C\x02\u0DB3\x02\u0DB5\x02\u0DBD\x02" +
    "\u0DBF\x02\u0DBF\x02\u0DC2\x02\u0DC8\x02\u0E03\x02\u0E32\x02\u0E34\x02" +
    "\u0E35\x02\u0E42\x02\u0E48\x02\u0E83\x02\u0E84\x02\u0E86\x02\u0E86\x02" +
    "\u0E89\x02\u0E8A\x02\u0E8C\x02\u0E8C\x02\u0E8F\x02\u0E8F\x02\u0E96\x02" +
    "\u0E99\x02\u0E9B\x02\u0EA1\x02\u0EA3\x02\u0EA5\x02\u0EA7\x02\u0EA7\x02" +
    "\u0EA9\x02\u0EA9\x02\u0EAC\x02\u0EAD\x02\u0EAF\x02\u0EB2\x02\u0EB4\x02" +
    "\u0EB5\x02\u0EBF\x02\u0EBF\x02\u0EC2\x02\u0EC6\x02\u0EC8\x02\u0EC8\x02" +
    "\u0EDE\x02\u0EE1\x02\u0F02\x02\u0F02\x02\u0F42\x02\u0F49\x02\u0F4B\x02" +
    "\u0F6E\x02\u0F8A\x02\u0F8E\x02\u1002\x02\u102C\x02\u1041\x02\u1041\x02" +
    "\u1052\x02\u1057\x02\u105C\x02\u105F\x02\u1063\x02\u1063\x02\u1067\x02" +
    "\u1068\x02\u1070\x02\u1072\x02\u1077\x02\u1083\x02\u1090\x02\u1090\x02" +
    "\u10A2\x02\u10C7\x02\u10C9\x02\u10C9\x02\u10CF\x02\u10CF\x02\u10D2\x02" +
    "\u10FC\x02\u10FE\x02\u124A\x02\u124C\x02\u124F\x02\u1252\x02\u1258\x02" +
    "\u125A\x02\u125A\x02\u125C\x02\u125F\x02\u1262\x02\u128A\x02\u128C\x02" +
    "\u128F\x02\u1292\x02\u12B2\x02\u12B4\x02\u12B7\x02\u12BA\x02\u12C0\x02" +
    "\u12C2\x02\u12C2\x02\u12C4\x02\u12C7\x02\u12CA\x02\u12D8\x02\u12DA\x02" +
    "\u1312\x02\u1314\x02\u1317\x02\u131A\x02\u135C\x02\u1382\x02\u1391\x02" +
    "\u13A2\x02\u13F7\x02\u13FA\x02\u13FF\x02\u1403\x02\u166E\x02\u1671\x02" +
    "\u1681\x02\u1683\x02\u169C\x02\u16A2\x02\u16EC\x02\u16F0\x02\u16FA\x02" +
    "\u1702\x02\u170E\x02\u1710\x02\u1713\x02\u1722\x02\u1733\x02\u1742\x02" +
    "\u1753\x02\u1762\x02\u176E\x02\u1770\x02\u1772\x02\u1782\x02\u17B5\x02" +
    "\u17D9\x02\u17D9\x02\u17DE\x02\u17DE\x02\u1822\x02\u1879\x02\u1882\x02" +
    "\u1886\x02\u1889\x02\u18AA\x02\u18AC\x02\u18AC\x02\u18B2\x02\u18F7\x02" +
    "\u1902\x02\u1920\x02\u1952\x02\u196F\x02\u1972\x02\u1976\x02\u1982\x02" +
    "\u19AD\x02\u19B2\x02\u19CB\x02\u1A02\x02\u1A18\x02\u1A22\x02\u1A56\x02" +
    "\u1AA9\x02\u1AA9\x02\u1B07\x02\u1B35\x02\u1B47\x02\u1B4D\x02\u1B85\x02" +
    "\u1BA2\x02\u1BB0\x02\u1BB1\x02\u1BBC\x02\u1BE7\x02\u1C02\x02\u1C25\x02" +
    "\u1C4F\x02\u1C51\x02\u1C5C\x02\u1C7F\x02\u1C82\x02\u1C8A\x02\u1CEB\x02" +
    "\u1CEE\x02\u1CF0\x02\u1CF3\x02\u1CF7\x02\u1CF8\x02\u1D02\x02\u1DC1\x02" +
    "\u1E02\x02\u1F17\x02\u1F1A\x02\u1F1F\x02\u1F22\x02\u1F47\x02\u1F4A\x02" +
    "\u1F4F\x02\u1F52\x02\u1F59\x02\u1F5B\x02\u1F5B\x02\u1F5D\x02\u1F5D\x02" +
    "\u1F5F\x02\u1F5F\x02\u1F61\x02\u1F7F\x02\u1F82\x02\u1FB6\x02\u1FB8\x02" +
    "\u1FBE\x02\u1FC0\x02\u1FC0\x02\u1FC4\x02\u1FC6\x02\u1FC8\x02\u1FCE\x02" +
    "\u1FD2\x02\u1FD5\x02\u1FD8\x02\u1FDD\x02\u1FE2\x02\u1FEE\x02\u1FF4\x02" +
    "\u1FF6\x02\u1FF8\x02\u1FFE\x02\u2073\x02\u2073\x02\u2081\x02\u2081\x02" +
    "\u2092\x02\u209E\x02\u2104\x02\u2104\x02\u2109\x02\u2109\x02\u210C\x02" +
    "\u2115\x02\u2117\x02\u2117\x02\u211B\x02\u211F\x02\u2126\x02\u2126\x02" +
    "\u2128\x02\u2128\x02\u212A\x02\u212A\x02\u212C\x02\u212F\x02\u2131\x02" +
    "\u213B\x02\u213E\x02\u2141\x02\u2147\x02\u214B\x02\u2150\x02\u2150\x02" +
    "\u2162\x02\u218A\x02\u2C02\x02\u2C30\x02\u2C32\x02\u2C60\x02\u2C62\x02" +
    "\u2CE6\x02\u2CED\x02\u2CF0\x02\u2CF4\x02\u2CF5\x02\u2D02\x02\u2D27\x02" +
    "\u2D29\x02\u2D29\x02\u2D2F\x02\u2D2F\x02\u2D32\x02\u2D69\x02\u2D71\x02" +
    "\u2D71\x02\u2D82\x02\u2D98\x02\u2DA2\x02\u2DA8\x02\u2DAA\x02\u2DB0\x02" +
    "\u2DB2\x02\u2DB8\x02\u2DBA\x02\u2DC0\x02\u2DC2\x02\u2DC8\x02\u2DCA\x02" +
    "\u2DD0\x02\u2DD2\x02\u2DD8\x02\u2DDA\x02\u2DE0\x02\u2E31\x02\u2E31\x02" +
    "\u3007\x02\u3009\x02\u3023\x02\u302B\x02\u3033\x02\u3037\x02\u303A\x02" +
    "\u303E\x02\u3043\x02\u3098\x02\u309F\x02\u30A1\x02\u30A3\x02\u30FC\x02" +
    "\u30FE\x02\u3101\x02\u3107\x02\u312F\x02\u3133\x02\u3190\x02\u31A2\x02" +
    "\u31BC\x02\u31F2\x02\u3201\x02\u3402\x02\u4DB7\x02\u4E02\x02\u9FD7\x02" +
    "\uA002\x02\uA48E\x02\uA4D2\x02\uA4FF\x02\uA502\x02\uA60E\x02\uA612\x02" +
    "\uA621\x02\uA62C\x02\uA62D\x02\uA642\x02\uA670\x02\uA681\x02\uA69F\x02" +
    "\uA6A2\x02\uA6F1\x02\uA719\x02\uA721\x02\uA724\x02\uA78A\x02\uA78D\x02" +
    "\uA7B0\x02\uA7B2\x02\uA7B9\x02\uA7F9\x02\uA803\x02\uA805\x02\uA807\x02" +
    "\uA809\x02\uA80C\x02\uA80E\x02\uA824\x02\uA842\x02\uA875\x02\uA884\x02" +
    "\uA8B5\x02\uA8F4\x02\uA8F9\x02\uA8FD\x02\uA8FD\x02\uA8FF\x02\uA8FF\x02" +
    "\uA90C\x02\uA927\x02\uA932\x02\uA948\x02\uA962\x02\uA97E\x02\uA986\x02" +
    "\uA9B4\x02\uA9D1\x02\uA9D1\x02\uA9E2\x02\uA9E6\x02\uA9E8\x02\uA9F1\x02" +
    "\uA9FC\x02\uAA00\x02\uAA02\x02\uAA2A\x02\uAA42\x02\uAA44\x02\uAA46\x02" +
    "\uAA4D\x02\uAA62\x02\uAA78\x02\uAA7C\x02\uAA7C\x02\uAA80\x02\uAAB1\x02" +
    "\uAAB3\x02\uAAB3\x02\uAAB7\x02\uAAB8\x02\uAABB\x02\uAABF\x02\uAAC2\x02" +
    "\uAAC2\x02\uAAC4\x02\uAAC4\x02\uAADD\x02\uAADF\x02\uAAE2\x02\uAAEC\x02" +
    "\uAAF4\x02\uAAF6\x02\uAB03\x02\uAB08\x02\uAB0B\x02\uAB10\x02\uAB13\x02" +
    "\uAB18\x02\uAB22\x02\uAB28\x02\uAB2A\x02\uAB30\x02\uAB32\x02\uAB5C\x02" +
    "\uAB5E\x02\uAB67\x02\uAB72\x02\uABE4\x02\uAC02\x02\uD7A5\x02\uD7B2\x02" +
    "\uD7C8\x02\uD7CD\x02\uD7FD\x02\uF902\x02\uFA6F\x02\uFA72\x02\uFADB\x02" +
    "\uFB02\x02\uFB08\x02\uFB15\x02\uFB19\x02\uFB1F\x02\uFB1F\x02\uFB21\x02" +
    "\uFB2A\x02\uFB2C\x02\uFB38\x02\uFB3A\x02\uFB3E\x02\uFB40\x02\uFB40\x02" +
    "\uFB42\x02\uFB43\x02\uFB45\x02\uFB46\x02\uFB48\x02\uFBB3\x02\uFBD5\x02" +
    "\uFD3F\x02\uFD52\x02\uFD91\x02\uFD94\x02\uFDC9\x02\uFDF2\x02\uFDFD\x02" +
    "\uFE72\x02\uFE76\x02\uFE78\x02\uFEFE\x02\uFF23\x02\uFF3C\x02\uFF43\x02" +
    "\uFF5C\x02\uFF68\x02\uFFC0\x02\uFFC4\x02\uFFC9\x02\uFFCC\x02\uFFD1\x02" +
    "\uFFD4\x02\uFFD9\x02\uFFDC\x02\uFFDE\x02\x02\x03\r\x03\x0F\x03(\x03*\x03" +
    "<\x03>\x03?\x03A\x03O\x03R\x03_\x03\x82\x03\xFC\x03\u0142\x03\u0176\x03" +
    "\u0282\x03\u029E\x03\u02A2\x03\u02D2\x03\u0302\x03\u0321\x03\u0332\x03" +
    "\u034C\x03\u0352\x03\u0377\x03\u0382\x03\u039F\x03\u03A2\x03\u03C5\x03" +
    "\u03CA\x03\u03D1\x03\u03D3\x03\u03D7\x03\u0402\x03\u049F\x03\u04B2\x03" +
    "\u04D5\x03\u04DA\x03\u04FD\x03\u0502\x03\u0529\x03\u0532\x03\u0565\x03" +
    "\u0602\x03\u0738\x03\u0742\x03\u0757\x03\u0762\x03\u0769\x03\u0802\x03" +
    "\u0807\x03\u080A\x03\u080A\x03\u080C\x03\u0837\x03\u0839\x03\u083A\x03" +
    "\u083E\x03\u083E\x03\u0841\x03\u0857\x03\u0862\x03\u0878\x03\u0882\x03" +
    "\u08A0\x03\u08E2\x03\u08F4\x03\u08F6\x03\u08F7\x03\u0902\x03\u0917\x03" +
    "\u0922\x03\u093B\x03\u0982\x03\u09B9\x03\u09C0\x03\u09C1\x03\u0A02\x03" +
    "\u0A02\x03\u0A12\x03\u0A15\x03\u0A17\x03\u0A19\x03\u0A1B\x03\u0A35\x03" +
    "\u0A62\x03\u0A7E\x03\u0A82\x03\u0A9E\x03\u0AC2\x03\u0AC9\x03\u0ACB\x03" +
    "\u0AE6\x03\u0B02\x03\u0B37\x03\u0B42\x03\u0B57\x03\u0B62\x03\u0B74\x03" +
    "\u0B82\x03\u0B93\x03\u0C02\x03\u0C4A\x03\u0C82\x03\u0CB4\x03\u0CC2\x03" +
    "\u0CF4\x03\u1005\x03\u1039\x03\u1085\x03\u10B1\x03\u10D2\x03\u10EA\x03" +
    "\u1105\x03\u1128\x03\u1152\x03\u1174\x03\u1178\x03\u1178\x03\u1185\x03" +
    "\u11B4\x03\u11C3\x03\u11C6\x03\u11DC\x03\u11DC\x03\u11DE\x03\u11DE\x03" +
    "\u1202\x03\u1213\x03\u1215\x03\u122D\x03\u1282\x03\u1288\x03\u128A\x03" +
    "\u128A\x03\u128C\x03\u128F\x03\u1291\x03\u129F\x03\u12A1\x03\u12AA\x03" +
    "\u12B2\x03\u12E0\x03\u1307\x03\u130E\x03\u1311\x03\u1312\x03\u1315\x03" +
    "\u132A\x03\u132C\x03\u1332\x03\u1334\x03\u1335\x03\u1337\x03\u133B\x03" +
    "\u133F\x03\u133F\x03\u1352\x03\u1352\x03\u135F\x03\u1363\x03\u1402\x03" +
    "\u1436\x03\u1449\x03\u144C\x03\u1482\x03\u14B1\x03\u14C6\x03\u14C7\x03" +
    "\u14C9\x03\u14C9\x03\u1582\x03\u15B0\x03\u15DA\x03\u15DD\x03\u1602\x03" +
    "\u1631\x03\u1646\x03\u1646\x03\u1682\x03\u16AC\x03\u1702\x03\u171B\x03" +
    "\u18A2\x03\u18E1\x03\u1901\x03\u1901\x03\u1AC2\x03\u1AFA\x03\u1C02\x03" +
    "\u1C0A\x03\u1C0C\x03\u1C30\x03\u1C42\x03\u1C42\x03\u1C74\x03\u1C91\x03" +
    "\u2002\x03\u239B\x03\u2402\x03\u2470\x03\u2482\x03\u2545\x03\u3002\x03" +
    "\u3430\x03\u4402\x03\u4648\x03\u6802\x03\u6A3A\x03\u6A42\x03\u6A60\x03" +
    "\u6AD2\x03\u6AEF\x03\u6B02\x03\u6B31\x03\u6B42\x03\u6B45\x03\u6B65\x03" +
    "\u6B79\x03\u6B7F\x03\u6B91\x03\u6F02\x03\u6F46\x03\u6F52\x03\u6F52\x03" +
    "\u6F95\x03\u6FA1\x03\u6FE2\x03\u6FE2\x03\u7002\x03\u87EE\x03\u8802\x03" +
    "\u8AF4\x03\uB002\x03\uB003\x03\uBC02\x03\uBC6C\x03\uBC72\x03\uBC7E\x03" +
    "\uBC82\x03\uBC8A\x03\uBC92\x03\uBC9B\x03\uD402\x03\uD456\x03\uD458\x03" +
    "\uD49E\x03\uD4A0\x03\uD4A1\x03\uD4A4\x03\uD4A4\x03\uD4A7\x03\uD4A8\x03" +
    "\uD4AB\x03\uD4AE\x03\uD4B0\x03\uD4BB\x03\uD4BD\x03\uD4BD\x03\uD4BF\x03" +
    "\uD4C5\x03\uD4C7\x03\uD507\x03\uD509\x03\uD50C\x03\uD50F\x03\uD516\x03" +
    "\uD518\x03\uD51E\x03\uD520\x03\uD53B\x03\uD53D\x03\uD540\x03\uD542\x03" +
    "\uD546\x03\uD548\x03\uD548";
XPathLexer._serializedATNSegment1 = "\x03\uD54C\x03\uD552\x03\uD554\x03\uD6A7\x03\uD6AA\x03\uD6C2\x03\uD6C4" +
    "\x03\uD6DC\x03\uD6DE\x03\uD6FC\x03\uD6FE\x03\uD716\x03\uD718\x03\uD736" +
    "\x03\uD738\x03\uD750\x03\uD752\x03\uD770\x03\uD772\x03\uD78A\x03\uD78C" +
    "\x03\uD7AA\x03\uD7AC\x03\uD7C4\x03\uD7C6\x03\uD7CD\x03\uE802\x03\uE8C6" +
    "\x03\uE902\x03\uE945\x03\uEE02\x03\uEE05\x03\uEE07\x03\uEE21\x03\uEE23" +
    "\x03\uEE24\x03\uEE26\x03\uEE26\x03\uEE29\x03\uEE29\x03\uEE2B\x03\uEE34" +
    "\x03\uEE36\x03\uEE39\x03\uEE3B\x03\uEE3B\x03\uEE3D\x03\uEE3D\x03\uEE44" +
    "\x03\uEE44\x03\uEE49\x03\uEE49\x03\uEE4B\x03\uEE4B\x03\uEE4D\x03\uEE4D" +
    "\x03\uEE4F\x03\uEE51\x03\uEE53\x03\uEE54\x03\uEE56\x03\uEE56\x03\uEE59" +
    "\x03\uEE59\x03\uEE5B\x03\uEE5B\x03\uEE5D\x03\uEE5D\x03\uEE5F\x03\uEE5F" +
    "\x03\uEE61\x03\uEE61\x03\uEE63\x03\uEE64\x03\uEE66\x03\uEE66\x03\uEE69" +
    "\x03\uEE6C\x03\uEE6E\x03\uEE74\x03\uEE76\x03\uEE79\x03\uEE7B\x03\uEE7E" +
    "\x03\uEE80\x03\uEE80\x03\uEE82\x03\uEE8B\x03\uEE8D\x03\uEE9D\x03\uEEA3" +
    "\x03\uEEA5\x03\uEEA7\x03\uEEAB\x03\uEEAD\x03\uEEBD\x03\x02\x04\uA6D8\x04" +
    "\uA702\x04\uB736\x04\uB742\x04\uB81F\x04\uB822\x04\uCEA3\x04\uF802\x04" +
    "\uFA1F\x041\x02\x03\x03\x02\x02\x02\x02\x05\x03\x02\x02\x02\x02\x07\x03" +
    "\x02\x02\x02\x02\t\x03\x02\x02\x02\x02\v\x03\x02\x02\x02\x02\x11\x03\x02" +
    "\x02\x02\x03\x13\x03\x02\x02\x02\x05\x16\x03\x02\x02\x02\x07\x18\x03\x02" +
    "\x02\x02\t\x1A\x03\x02\x02\x02\v\x1C\x03\x02\x02\x02\r%\x03\x02\x02\x02" +
    "\x0F\'\x03\x02\x02\x02\x11)\x03\x02\x02\x02\x13\x14\x071\x02\x02\x14\x15" +
    "\x071\x02\x02\x15\x04\x03\x02\x02\x02\x16\x17\x071\x02\x02\x17\x06\x03" +
    "\x02\x02\x02\x18\x19\x07,\x02\x02\x19\b\x03\x02\x02\x02\x1A\x1B\x07#\x02" +
    "\x02\x1B\n\x03\x02\x02\x02\x1C \x05\x0F\b\x02\x1D\x1F\x05\r\x07\x02\x1E" +
    "\x1D\x03\x02\x02\x02\x1F\"\x03\x02\x02\x02 \x1E\x03\x02\x02\x02 !\x03" +
    "\x02\x02\x02!#\x03\x02\x02\x02\" \x03\x02\x02\x02#$\b\x06\x02\x02$\f\x03" +
    "\x02\x02\x02%&\t\x02\x02\x02&\x0E\x03\x02\x02\x02\'(\t\x03\x02\x02(\x10" +
    "\x03\x02\x02\x02)-\x07)\x02\x02*,\v\x02\x02\x02+*\x03\x02\x02\x02,/\x03" +
    "\x02\x02\x02-.\x03\x02\x02\x02-+\x03\x02\x02\x02.0\x03\x02\x02\x02/-\x03" +
    "\x02\x02\x0201\x07)\x02\x021\x12\x03\x02\x02\x02\x05\x02 -\x03\x03\x06" +
    "\x02";
XPathLexer._serializedATN = Utils.join([
    XPathLexer._serializedATNSegment0,
    XPathLexer._serializedATNSegment1,
], "");
//# sourceMappingURL=XPathLexer.js.map

/***/ }),

/***/ 9142:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.XPathLexerErrorListener = void 0;
const Decorators_1 = __webpack_require__(681);
class XPathLexerErrorListener {
    syntaxError(recognizer, offendingSymbol, line, charPositionInLine, msg, e) {
        // intentionally empty
    }
}
__decorate([
    Decorators_1.Override
], XPathLexerErrorListener.prototype, "syntaxError", null);
exports.XPathLexerErrorListener = XPathLexerErrorListener;
//# sourceMappingURL=XPathLexerErrorListener.js.map

/***/ }),

/***/ 5573:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.XPathRuleAnywhereElement = void 0;
const Decorators_1 = __webpack_require__(681);
const Trees_1 = __webpack_require__(1180);
const XPathElement_1 = __webpack_require__(7643);
/**
 * Either `ID` at start of path or `...//ID` in middle of path.
 */
class XPathRuleAnywhereElement extends XPathElement_1.XPathElement {
    constructor(ruleName, ruleIndex) {
        super(ruleName);
        this.ruleIndex = ruleIndex;
    }
    evaluate(t) {
        return Trees_1.Trees.findAllRuleNodes(t, this.ruleIndex);
    }
}
__decorate([
    Decorators_1.Override
], XPathRuleAnywhereElement.prototype, "evaluate", null);
exports.XPathRuleAnywhereElement = XPathRuleAnywhereElement;
//# sourceMappingURL=XPathRuleAnywhereElement.js.map

/***/ }),

/***/ 5405:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.XPathRuleElement = void 0;
// CONVERSTION complete, Burt Harris 10/14/2016
const ParserRuleContext_1 = __webpack_require__(9248);
const Decorators_1 = __webpack_require__(681);
const Trees_1 = __webpack_require__(1180);
const XPathElement_1 = __webpack_require__(7643);
class XPathRuleElement extends XPathElement_1.XPathElement {
    constructor(ruleName, ruleIndex) {
        super(ruleName);
        this.ruleIndex = ruleIndex;
    }
    evaluate(t) {
        // return all children of t that match nodeName
        let nodes = [];
        for (let c of Trees_1.Trees.getChildren(t)) {
            if (c instanceof ParserRuleContext_1.ParserRuleContext) {
                if ((c.ruleIndex === this.ruleIndex && !this.invert) ||
                    (c.ruleIndex !== this.ruleIndex && this.invert)) {
                    nodes.push(c);
                }
            }
        }
        return nodes;
    }
}
__decorate([
    Decorators_1.Override
], XPathRuleElement.prototype, "evaluate", null);
exports.XPathRuleElement = XPathRuleElement;
//# sourceMappingURL=XPathRuleElement.js.map

/***/ }),

/***/ 9216:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.XPathTokenAnywhereElement = void 0;
// CONVERSTION complete, Burt Harris 10/14/2016
const Decorators_1 = __webpack_require__(681);
const Trees_1 = __webpack_require__(1180);
const XPathElement_1 = __webpack_require__(7643);
class XPathTokenAnywhereElement extends XPathElement_1.XPathElement {
    constructor(tokenName, tokenType) {
        super(tokenName);
        this.tokenType = tokenType;
    }
    evaluate(t) {
        return Trees_1.Trees.findAllTokenNodes(t, this.tokenType);
    }
}
__decorate([
    Decorators_1.Override
], XPathTokenAnywhereElement.prototype, "evaluate", null);
exports.XPathTokenAnywhereElement = XPathTokenAnywhereElement;
//# sourceMappingURL=XPathTokenAnywhereElement.js.map

/***/ }),

/***/ 285:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.XPathTokenElement = void 0;
// CONVERSTION complete, Burt Harris 10/14/2016
const Decorators_1 = __webpack_require__(681);
const TerminalNode_1 = __webpack_require__(9466);
const Trees_1 = __webpack_require__(1180);
const XPathElement_1 = __webpack_require__(7643);
class XPathTokenElement extends XPathElement_1.XPathElement {
    constructor(tokenName, tokenType) {
        super(tokenName);
        this.tokenType = tokenType;
    }
    evaluate(t) {
        // return all children of t that match nodeName
        let nodes = [];
        for (let c of Trees_1.Trees.getChildren(t)) {
            if (c instanceof TerminalNode_1.TerminalNode) {
                if ((c.symbol.type === this.tokenType && !this.invert) ||
                    (c.symbol.type !== this.tokenType && this.invert)) {
                    nodes.push(c);
                }
            }
        }
        return nodes;
    }
}
__decorate([
    Decorators_1.Override
], XPathTokenElement.prototype, "evaluate", null);
exports.XPathTokenElement = XPathTokenElement;
//# sourceMappingURL=XPathTokenElement.js.map

/***/ }),

/***/ 630:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.XPathWildcardAnywhereElement = void 0;
// CONVERSTION complete, Burt Harris 10/14/2016
const Decorators_1 = __webpack_require__(681);
const Trees_1 = __webpack_require__(1180);
const XPath_1 = __webpack_require__(6512);
const XPathElement_1 = __webpack_require__(7643);
class XPathWildcardAnywhereElement extends XPathElement_1.XPathElement {
    constructor() {
        super(XPath_1.XPath.WILDCARD);
    }
    evaluate(t) {
        if (this.invert) {
            // !* is weird but valid (empty)
            return [];
        }
        return Trees_1.Trees.getDescendants(t);
    }
}
__decorate([
    Decorators_1.Override
], XPathWildcardAnywhereElement.prototype, "evaluate", null);
exports.XPathWildcardAnywhereElement = XPathWildcardAnywhereElement;
//# sourceMappingURL=XPathWildcardAnywhereElement.js.map

/***/ }),

/***/ 8879:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.XPathWildcardElement = void 0;
// CONVERSTION complete, Burt Harris 10/14/2016
const Decorators_1 = __webpack_require__(681);
const Trees_1 = __webpack_require__(1180);
const XPath_1 = __webpack_require__(6512);
const XPathElement_1 = __webpack_require__(7643);
class XPathWildcardElement extends XPathElement_1.XPathElement {
    constructor() {
        super(XPath_1.XPath.WILDCARD);
    }
    evaluate(t) {
        let kids = [];
        if (this.invert) {
            // !* is weird but valid (empty)
            return kids;
        }
        for (let c of Trees_1.Trees.getChildren(t)) {
            kids.push(c);
        }
        return kids;
    }
}
__decorate([
    Decorators_1.Override
], XPathWildcardElement.prototype, "evaluate", null);
exports.XPathWildcardElement = XPathWildcardElement;
//# sourceMappingURL=XPathWildcardElement.js.map

/***/ }),

/***/ 1696:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
/* provided dependency */ var process = __webpack_require__(4406);
/* provided dependency */ var console = __webpack_require__(3716);
// Currently in sync with Node.js lib/assert.js
// https://github.com/nodejs/node/commit/2a51ae424a513ec9a6aa3466baa0cc1d55dd4f3b
// Originally from narwhal.js (http://narwhaljs.org)
// Copyright (c) 2009 Thomas Robinson <280north.com>
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the 'Software'), to
// deal in the Software without restriction, including without limitation the
// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
// sell copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
// ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.


function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var _require = __webpack_require__(7515),
    _require$codes = _require.codes,
    ERR_AMBIGUOUS_ARGUMENT = _require$codes.ERR_AMBIGUOUS_ARGUMENT,
    ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE,
    ERR_INVALID_ARG_VALUE = _require$codes.ERR_INVALID_ARG_VALUE,
    ERR_INVALID_RETURN_VALUE = _require$codes.ERR_INVALID_RETURN_VALUE,
    ERR_MISSING_ARGS = _require$codes.ERR_MISSING_ARGS;

var AssertionError = __webpack_require__(4082);

var _require2 = __webpack_require__(3335),
    inspect = _require2.inspect;

var _require$types = (__webpack_require__(3335).types),
    isPromise = _require$types.isPromise,
    isRegExp = _require$types.isRegExp;

var objectAssign = Object.assign ? Object.assign : (__webpack_require__(4956).assign);
var objectIs = Object.is ? Object.is : __webpack_require__(4679);
var errorCache = new Map();
var isDeepEqual;
var isDeepStrictEqual;
var parseExpressionAt;
var findNodeAround;
var decoder;

function lazyLoadComparison() {
  var comparison = __webpack_require__(6796);

  isDeepEqual = comparison.isDeepEqual;
  isDeepStrictEqual = comparison.isDeepStrictEqual;
} // Escape control characters but not \n and \t to keep the line breaks and
// indentation intact.
// eslint-disable-next-line no-control-regex


var escapeSequencesRegExp = /[\x00-\x08\x0b\x0c\x0e-\x1f]/g;
var meta = (/* unused pure expression or super */ null && (["\\u0000", "\\u0001", "\\u0002", "\\u0003", "\\u0004", "\\u0005", "\\u0006", "\\u0007", '\\b', '', '', "\\u000b", '\\f', '', "\\u000e", "\\u000f", "\\u0010", "\\u0011", "\\u0012", "\\u0013", "\\u0014", "\\u0015", "\\u0016", "\\u0017", "\\u0018", "\\u0019", "\\u001a", "\\u001b", "\\u001c", "\\u001d", "\\u001e", "\\u001f"]));

var escapeFn = function escapeFn(str) {
  return meta[str.charCodeAt(0)];
};

var warned = false; // The assert module provides functions that throw
// AssertionError's when particular conditions are not met. The
// assert module must conform to the following interface.

var assert = module.exports = ok;
var NO_EXCEPTION_SENTINEL = {}; // All of the following functions must throw an AssertionError
// when a corresponding condition is not met, with a message that
// may be undefined if not provided. All assertion methods provide
// both the actual and expected values to the assertion error for
// display purposes.

function innerFail(obj) {
  if (obj.message instanceof Error) throw obj.message;
  throw new AssertionError(obj);
}

function fail(actual, expected, message, operator, stackStartFn) {
  var argsLen = arguments.length;
  var internalMessage;

  if (argsLen === 0) {
    internalMessage = 'Failed';
  } else if (argsLen === 1) {
    message = actual;
    actual = undefined;
  } else {
    if (warned === false) {
      warned = true;
      var warn = process.emitWarning ? process.emitWarning : console.warn.bind(console);
      warn('assert.fail() with more than one argument is deprecated. ' + 'Please use assert.strictEqual() instead or only pass a message.', 'DeprecationWarning', 'DEP0094');
    }

    if (argsLen === 2) operator = '!=';
  }

  if (message instanceof Error) throw message;
  var errArgs = {
    actual: actual,
    expected: expected,
    operator: operator === undefined ? 'fail' : operator,
    stackStartFn: stackStartFn || fail
  };

  if (message !== undefined) {
    errArgs.message = message;
  }

  var err = new AssertionError(errArgs);

  if (internalMessage) {
    err.message = internalMessage;
    err.generatedMessage = true;
  }

  throw err;
}

assert.fail = fail; // The AssertionError is defined in internal/error.

assert.AssertionError = AssertionError;

function innerOk(fn, argLen, value, message) {
  if (!value) {
    var generatedMessage = false;

    if (argLen === 0) {
      generatedMessage = true;
      message = 'No value argument passed to `assert.ok()`';
    } else if (message instanceof Error) {
      throw message;
    }

    var err = new AssertionError({
      actual: value,
      expected: true,
      message: message,
      operator: '==',
      stackStartFn: fn
    });
    err.generatedMessage = generatedMessage;
    throw err;
  }
} // Pure assertion tests whether a value is truthy, as determined
// by !!value.


function ok() {
  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }

  innerOk.apply(void 0, [ok, args.length].concat(args));
}

assert.ok = ok; // The equality assertion tests shallow, coercive equality with ==.

/* eslint-disable no-restricted-properties */

assert.equal = function equal(actual, expected, message) {
  if (arguments.length < 2) {
    throw new ERR_MISSING_ARGS('actual', 'expected');
  } // eslint-disable-next-line eqeqeq


  if (actual != expected) {
    innerFail({
      actual: actual,
      expected: expected,
      message: message,
      operator: '==',
      stackStartFn: equal
    });
  }
}; // The non-equality assertion tests for whether two objects are not
// equal with !=.


assert.notEqual = function notEqual(actual, expected, message) {
  if (arguments.length < 2) {
    throw new ERR_MISSING_ARGS('actual', 'expected');
  } // eslint-disable-next-line eqeqeq


  if (actual == expected) {
    innerFail({
      actual: actual,
      expected: expected,
      message: message,
      operator: '!=',
      stackStartFn: notEqual
    });
  }
}; // The equivalence assertion tests a deep equality relation.


assert.deepEqual = function deepEqual(actual, expected, message) {
  if (arguments.length < 2) {
    throw new ERR_MISSING_ARGS('actual', 'expected');
  }

  if (isDeepEqual === undefined) lazyLoadComparison();

  if (!isDeepEqual(actual, expected)) {
    innerFail({
      actual: actual,
      expected: expected,
      message: message,
      operator: 'deepEqual',
      stackStartFn: deepEqual
    });
  }
}; // The non-equivalence assertion tests for any deep inequality.


assert.notDeepEqual = function notDeepEqual(actual, expected, message) {
  if (arguments.length < 2) {
    throw new ERR_MISSING_ARGS('actual', 'expected');
  }

  if (isDeepEqual === undefined) lazyLoadComparison();

  if (isDeepEqual(actual, expected)) {
    innerFail({
      actual: actual,
      expected: expected,
      message: message,
      operator: 'notDeepEqual',
      stackStartFn: notDeepEqual
    });
  }
};
/* eslint-enable */


assert.deepStrictEqual = function deepStrictEqual(actual, expected, message) {
  if (arguments.length < 2) {
    throw new ERR_MISSING_ARGS('actual', 'expected');
  }

  if (isDeepEqual === undefined) lazyLoadComparison();

  if (!isDeepStrictEqual(actual, expected)) {
    innerFail({
      actual: actual,
      expected: expected,
      message: message,
      operator: 'deepStrictEqual',
      stackStartFn: deepStrictEqual
    });
  }
};

assert.notDeepStrictEqual = notDeepStrictEqual;

function notDeepStrictEqual(actual, expected, message) {
  if (arguments.length < 2) {
    throw new ERR_MISSING_ARGS('actual', 'expected');
  }

  if (isDeepEqual === undefined) lazyLoadComparison();

  if (isDeepStrictEqual(actual, expected)) {
    innerFail({
      actual: actual,
      expected: expected,
      message: message,
      operator: 'notDeepStrictEqual',
      stackStartFn: notDeepStrictEqual
    });
  }
}

assert.strictEqual = function strictEqual(actual, expected, message) {
  if (arguments.length < 2) {
    throw new ERR_MISSING_ARGS('actual', 'expected');
  }

  if (!objectIs(actual, expected)) {
    innerFail({
      actual: actual,
      expected: expected,
      message: message,
      operator: 'strictEqual',
      stackStartFn: strictEqual
    });
  }
};

assert.notStrictEqual = function notStrictEqual(actual, expected, message) {
  if (arguments.length < 2) {
    throw new ERR_MISSING_ARGS('actual', 'expected');
  }

  if (objectIs(actual, expected)) {
    innerFail({
      actual: actual,
      expected: expected,
      message: message,
      operator: 'notStrictEqual',
      stackStartFn: notStrictEqual
    });
  }
};

var Comparison = function Comparison(obj, keys, actual) {
  var _this = this;

  _classCallCheck(this, Comparison);

  keys.forEach(function (key) {
    if (key in obj) {
      if (actual !== undefined && typeof actual[key] === 'string' && isRegExp(obj[key]) && obj[key].test(actual[key])) {
        _this[key] = actual[key];
      } else {
        _this[key] = obj[key];
      }
    }
  });
};

function compareExceptionKey(actual, expected, key, message, keys, fn) {
  if (!(key in actual) || !isDeepStrictEqual(actual[key], expected[key])) {
    if (!message) {
      // Create placeholder objects to create a nice output.
      var a = new Comparison(actual, keys);
      var b = new Comparison(expected, keys, actual);
      var err = new AssertionError({
        actual: a,
        expected: b,
        operator: 'deepStrictEqual',
        stackStartFn: fn
      });
      err.actual = actual;
      err.expected = expected;
      err.operator = fn.name;
      throw err;
    }

    innerFail({
      actual: actual,
      expected: expected,
      message: message,
      operator: fn.name,
      stackStartFn: fn
    });
  }
}

function expectedException(actual, expected, msg, fn) {
  if (typeof expected !== 'function') {
    if (isRegExp(expected)) return expected.test(actual); // assert.doesNotThrow does not accept objects.

    if (arguments.length === 2) {
      throw new ERR_INVALID_ARG_TYPE('expected', ['Function', 'RegExp'], expected);
    } // Handle primitives properly.


    if (_typeof(actual) !== 'object' || actual === null) {
      var err = new AssertionError({
        actual: actual,
        expected: expected,
        message: msg,
        operator: 'deepStrictEqual',
        stackStartFn: fn
      });
      err.operator = fn.name;
      throw err;
    }

    var keys = Object.keys(expected); // Special handle errors to make sure the name and the message are compared
    // as well.

    if (expected instanceof Error) {
      keys.push('name', 'message');
    } else if (keys.length === 0) {
      throw new ERR_INVALID_ARG_VALUE('error', expected, 'may not be an empty object');
    }

    if (isDeepEqual === undefined) lazyLoadComparison();
    keys.forEach(function (key) {
      if (typeof actual[key] === 'string' && isRegExp(expected[key]) && expected[key].test(actual[key])) {
        return;
      }

      compareExceptionKey(actual, expected, key, msg, keys, fn);
    });
    return true;
  } // Guard instanceof against arrow functions as they don't have a prototype.


  if (expected.prototype !== undefined && actual instanceof expected) {
    return true;
  }

  if (Error.isPrototypeOf(expected)) {
    return false;
  }

  return expected.call({}, actual) === true;
}

function getActual(fn) {
  if (typeof fn !== 'function') {
    throw new ERR_INVALID_ARG_TYPE('fn', 'Function', fn);
  }

  try {
    fn();
  } catch (e) {
    return e;
  }

  return NO_EXCEPTION_SENTINEL;
}

function checkIsPromise(obj) {
  // Accept native ES6 promises and promises that are implemented in a similar
  // way. Do not accept thenables that use a function as `obj` and that have no
  // `catch` handler.
  // TODO: thenables are checked up until they have the correct methods,
  // but according to documentation, the `then` method should receive
  // the `fulfill` and `reject` arguments as well or it may be never resolved.
  return isPromise(obj) || obj !== null && _typeof(obj) === 'object' && typeof obj.then === 'function' && typeof obj.catch === 'function';
}

function waitForActual(promiseFn) {
  return Promise.resolve().then(function () {
    var resultPromise;

    if (typeof promiseFn === 'function') {
      // Return a rejected promise if `promiseFn` throws synchronously.
      resultPromise = promiseFn(); // Fail in case no promise is returned.

      if (!checkIsPromise(resultPromise)) {
        throw new ERR_INVALID_RETURN_VALUE('instance of Promise', 'promiseFn', resultPromise);
      }
    } else if (checkIsPromise(promiseFn)) {
      resultPromise = promiseFn;
    } else {
      throw new ERR_INVALID_ARG_TYPE('promiseFn', ['Function', 'Promise'], promiseFn);
    }

    return Promise.resolve().then(function () {
      return resultPromise;
    }).then(function () {
      return NO_EXCEPTION_SENTINEL;
    }).catch(function (e) {
      return e;
    });
  });
}

function expectsError(stackStartFn, actual, error, message) {
  if (typeof error === 'string') {
    if (arguments.length === 4) {
      throw new ERR_INVALID_ARG_TYPE('error', ['Object', 'Error', 'Function', 'RegExp'], error);
    }

    if (_typeof(actual) === 'object' && actual !== null) {
      if (actual.message === error) {
        throw new ERR_AMBIGUOUS_ARGUMENT('error/message', "The error message \"".concat(actual.message, "\" is identical to the message."));
      }
    } else if (actual === error) {
      throw new ERR_AMBIGUOUS_ARGUMENT('error/message', "The error \"".concat(actual, "\" is identical to the message."));
    }

    message = error;
    error = undefined;
  } else if (error != null && _typeof(error) !== 'object' && typeof error !== 'function') {
    throw new ERR_INVALID_ARG_TYPE('error', ['Object', 'Error', 'Function', 'RegExp'], error);
  }

  if (actual === NO_EXCEPTION_SENTINEL) {
    var details = '';

    if (error && error.name) {
      details += " (".concat(error.name, ")");
    }

    details += message ? ": ".concat(message) : '.';
    var fnType = stackStartFn.name === 'rejects' ? 'rejection' : 'exception';
    innerFail({
      actual: undefined,
      expected: error,
      operator: stackStartFn.name,
      message: "Missing expected ".concat(fnType).concat(details),
      stackStartFn: stackStartFn
    });
  }

  if (error && !expectedException(actual, error, message, stackStartFn)) {
    throw actual;
  }
}

function expectsNoError(stackStartFn, actual, error, message) {
  if (actual === NO_EXCEPTION_SENTINEL) return;

  if (typeof error === 'string') {
    message = error;
    error = undefined;
  }

  if (!error || expectedException(actual, error)) {
    var details = message ? ": ".concat(message) : '.';
    var fnType = stackStartFn.name === 'doesNotReject' ? 'rejection' : 'exception';
    innerFail({
      actual: actual,
      expected: error,
      operator: stackStartFn.name,
      message: "Got unwanted ".concat(fnType).concat(details, "\n") + "Actual message: \"".concat(actual && actual.message, "\""),
      stackStartFn: stackStartFn
    });
  }

  throw actual;
}

assert.throws = function throws(promiseFn) {
  for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
    args[_key2 - 1] = arguments[_key2];
  }

  expectsError.apply(void 0, [throws, getActual(promiseFn)].concat(args));
};

assert.rejects = function rejects(promiseFn) {
  for (var _len3 = arguments.length, args = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {
    args[_key3 - 1] = arguments[_key3];
  }

  return waitForActual(promiseFn).then(function (result) {
    return expectsError.apply(void 0, [rejects, result].concat(args));
  });
};

assert.doesNotThrow = function doesNotThrow(fn) {
  for (var _len4 = arguments.length, args = new Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {
    args[_key4 - 1] = arguments[_key4];
  }

  expectsNoError.apply(void 0, [doesNotThrow, getActual(fn)].concat(args));
};

assert.doesNotReject = function doesNotReject(fn) {
  for (var _len5 = arguments.length, args = new Array(_len5 > 1 ? _len5 - 1 : 0), _key5 = 1; _key5 < _len5; _key5++) {
    args[_key5 - 1] = arguments[_key5];
  }

  return waitForActual(fn).then(function (result) {
    return expectsNoError.apply(void 0, [doesNotReject, result].concat(args));
  });
};

assert.ifError = function ifError(err) {
  if (err !== null && err !== undefined) {
    var message = 'ifError got unwanted exception: ';

    if (_typeof(err) === 'object' && typeof err.message === 'string') {
      if (err.message.length === 0 && err.constructor) {
        message += err.constructor.name;
      } else {
        message += err.message;
      }
    } else {
      message += inspect(err);
    }

    var newErr = new AssertionError({
      actual: err,
      expected: null,
      operator: 'ifError',
      message: message,
      stackStartFn: ifError
    }); // Make sure we actually have a stack trace!

    var origStack = err.stack;

    if (typeof origStack === 'string') {
      // This will remove any duplicated frames from the error frames taken
      // from within `ifError` and add the original error frames to the newly
      // created ones.
      var tmp2 = origStack.split('\n');
      tmp2.shift(); // Filter all frames existing in err.stack.

      var tmp1 = newErr.stack.split('\n');

      for (var i = 0; i < tmp2.length; i++) {
        // Find the first occurrence of the frame.
        var pos = tmp1.indexOf(tmp2[i]);

        if (pos !== -1) {
          // Only keep new frames.
          tmp1 = tmp1.slice(0, pos);
          break;
        }
      }

      newErr.stack = "".concat(tmp1.join('\n'), "\n").concat(tmp2.join('\n'));
    }

    throw newErr;
  }
}; // Expose a strict only variant of assert


function strict() {
  for (var _len6 = arguments.length, args = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {
    args[_key6] = arguments[_key6];
  }

  innerOk.apply(void 0, [strict, args.length].concat(args));
}

assert.strict = objectAssign(strict, assert, {
  equal: assert.strictEqual,
  deepEqual: assert.deepStrictEqual,
  notEqual: assert.notStrictEqual,
  notDeepEqual: assert.notDeepStrictEqual
});
assert.strict.strict = assert.strict;

/***/ }),

/***/ 4082:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
/* provided dependency */ var process = __webpack_require__(4406);
// Currently in sync with Node.js lib/internal/assert/assertion_error.js
// https://github.com/nodejs/node/commit/0817840f775032169ddd70c85ac059f18ffcc81c


function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _wrapNativeSuper(Class) { var _cache = typeof Map === "function" ? new Map() : undefined; _wrapNativeSuper = function _wrapNativeSuper(Class) { if (Class === null || !_isNativeFunction(Class)) return Class; if (typeof Class !== "function") { throw new TypeError("Super expression must either be null or a function"); } if (typeof _cache !== "undefined") { if (_cache.has(Class)) return _cache.get(Class); _cache.set(Class, Wrapper); } function Wrapper() { return _construct(Class, arguments, _getPrototypeOf(this).constructor); } Wrapper.prototype = Object.create(Class.prototype, { constructor: { value: Wrapper, enumerable: false, writable: true, configurable: true } }); return _setPrototypeOf(Wrapper, Class); }; return _wrapNativeSuper(Class); }

function isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _construct(Parent, args, Class) { if (isNativeReflectConstruct()) { _construct = Reflect.construct; } else { _construct = function _construct(Parent, args, Class) { var a = [null]; a.push.apply(a, args); var Constructor = Function.bind.apply(Parent, a); var instance = new Constructor(); if (Class) _setPrototypeOf(instance, Class.prototype); return instance; }; } return _construct.apply(null, arguments); }

function _isNativeFunction(fn) { return Function.toString.call(fn).indexOf("[native code]") !== -1; }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var _require = __webpack_require__(3335),
    inspect = _require.inspect;

var _require2 = __webpack_require__(7515),
    ERR_INVALID_ARG_TYPE = _require2.codes.ERR_INVALID_ARG_TYPE; // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/endsWith


function endsWith(str, search, this_len) {
  if (this_len === undefined || this_len > str.length) {
    this_len = str.length;
  }

  return str.substring(this_len - search.length, this_len) === search;
} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/repeat


function repeat(str, count) {
  count = Math.floor(count);
  if (str.length == 0 || count == 0) return '';
  var maxCount = str.length * count;
  count = Math.floor(Math.log(count) / Math.log(2));

  while (count) {
    str += str;
    count--;
  }

  str += str.substring(0, maxCount - str.length);
  return str;
}

var blue = '';
var green = '';
var red = '';
var white = '';
var kReadableOperator = {
  deepStrictEqual: 'Expected values to be strictly deep-equal:',
  strictEqual: 'Expected values to be strictly equal:',
  strictEqualObject: 'Expected "actual" to be reference-equal to "expected":',
  deepEqual: 'Expected values to be loosely deep-equal:',
  equal: 'Expected values to be loosely equal:',
  notDeepStrictEqual: 'Expected "actual" not to be strictly deep-equal to:',
  notStrictEqual: 'Expected "actual" to be strictly unequal to:',
  notStrictEqualObject: 'Expected "actual" not to be reference-equal to "expected":',
  notDeepEqual: 'Expected "actual" not to be loosely deep-equal to:',
  notEqual: 'Expected "actual" to be loosely unequal to:',
  notIdentical: 'Values identical but not reference-equal:'
}; // Comparing short primitives should just show === / !== instead of using the
// diff.

var kMaxShortLength = 10;

function copyError(source) {
  var keys = Object.keys(source);
  var target = Object.create(Object.getPrototypeOf(source));
  keys.forEach(function (key) {
    target[key] = source[key];
  });
  Object.defineProperty(target, 'message', {
    value: source.message
  });
  return target;
}

function inspectValue(val) {
  // The util.inspect default values could be changed. This makes sure the
  // error messages contain the necessary information nevertheless.
  return inspect(val, {
    compact: false,
    customInspect: false,
    depth: 1000,
    maxArrayLength: Infinity,
    // Assert compares only enumerable properties (with a few exceptions).
    showHidden: false,
    // Having a long line as error is better than wrapping the line for
    // comparison for now.
    // TODO(BridgeAR): `breakLength` should be limited as soon as soon as we
    // have meta information about the inspected properties (i.e., know where
    // in what line the property starts and ends).
    breakLength: Infinity,
    // Assert does not detect proxies currently.
    showProxy: false,
    sorted: true,
    // Inspect getters as we also check them when comparing entries.
    getters: true
  });
}

function createErrDiff(actual, expected, operator) {
  var other = '';
  var res = '';
  var lastPos = 0;
  var end = '';
  var skipped = false;
  var actualInspected = inspectValue(actual);
  var actualLines = actualInspected.split('\n');
  var expectedLines = inspectValue(expected).split('\n');
  var i = 0;
  var indicator = ''; // In case both values are objects explicitly mark them as not reference equal
  // for the `strictEqual` operator.

  if (operator === 'strictEqual' && _typeof(actual) === 'object' && _typeof(expected) === 'object' && actual !== null && expected !== null) {
    operator = 'strictEqualObject';
  } // If "actual" and "expected" fit on a single line and they are not strictly
  // equal, check further special handling.


  if (actualLines.length === 1 && expectedLines.length === 1 && actualLines[0] !== expectedLines[0]) {
    var inputLength = actualLines[0].length + expectedLines[0].length; // If the character length of "actual" and "expected" together is less than
    // kMaxShortLength and if neither is an object and at least one of them is
    // not `zero`, use the strict equal comparison to visualize the output.

    if (inputLength <= kMaxShortLength) {
      if ((_typeof(actual) !== 'object' || actual === null) && (_typeof(expected) !== 'object' || expected === null) && (actual !== 0 || expected !== 0)) {
        // -0 === +0
        return "".concat(kReadableOperator[operator], "\n\n") + "".concat(actualLines[0], " !== ").concat(expectedLines[0], "\n");
      }
    } else if (operator !== 'strictEqualObject') {
      // If the stderr is a tty and the input length is lower than the current
      // columns per line, add a mismatch indicator below the output. If it is
      // not a tty, use a default value of 80 characters.
      var maxLength = process.stderr && process.stderr.isTTY ? process.stderr.columns : 80;

      if (inputLength < maxLength) {
        while (actualLines[0][i] === expectedLines[0][i]) {
          i++;
        } // Ignore the first characters.


        if (i > 2) {
          // Add position indicator for the first mismatch in case it is a
          // single line and the input length is less than the column length.
          indicator = "\n  ".concat(repeat(' ', i), "^");
          i = 0;
        }
      }
    }
  } // Remove all ending lines that match (this optimizes the output for
  // readability by reducing the number of total changed lines).


  var a = actualLines[actualLines.length - 1];
  var b = expectedLines[expectedLines.length - 1];

  while (a === b) {
    if (i++ < 2) {
      end = "\n  ".concat(a).concat(end);
    } else {
      other = a;
    }

    actualLines.pop();
    expectedLines.pop();
    if (actualLines.length === 0 || expectedLines.length === 0) break;
    a = actualLines[actualLines.length - 1];
    b = expectedLines[expectedLines.length - 1];
  }

  var maxLines = Math.max(actualLines.length, expectedLines.length); // Strict equal with identical objects that are not identical by reference.
  // E.g., assert.deepStrictEqual({ a: Symbol() }, { a: Symbol() })

  if (maxLines === 0) {
    // We have to get the result again. The lines were all removed before.
    var _actualLines = actualInspected.split('\n'); // Only remove lines in case it makes sense to collapse those.
    // TODO: Accept env to always show the full error.


    if (_actualLines.length > 30) {
      _actualLines[26] = "".concat(blue, "...").concat(white);

      while (_actualLines.length > 27) {
        _actualLines.pop();
      }
    }

    return "".concat(kReadableOperator.notIdentical, "\n\n").concat(_actualLines.join('\n'), "\n");
  }

  if (i > 3) {
    end = "\n".concat(blue, "...").concat(white).concat(end);
    skipped = true;
  }

  if (other !== '') {
    end = "\n  ".concat(other).concat(end);
    other = '';
  }

  var printedLines = 0;
  var msg = kReadableOperator[operator] + "\n".concat(green, "+ actual").concat(white, " ").concat(red, "- expected").concat(white);
  var skippedMsg = " ".concat(blue, "...").concat(white, " Lines skipped");

  for (i = 0; i < maxLines; i++) {
    // Only extra expected lines exist
    var cur = i - lastPos;

    if (actualLines.length < i + 1) {
      // If the last diverging line is more than one line above and the
      // current line is at least line three, add some of the former lines and
      // also add dots to indicate skipped entries.
      if (cur > 1 && i > 2) {
        if (cur > 4) {
          res += "\n".concat(blue, "...").concat(white);
          skipped = true;
        } else if (cur > 3) {
          res += "\n  ".concat(expectedLines[i - 2]);
          printedLines++;
        }

        res += "\n  ".concat(expectedLines[i - 1]);
        printedLines++;
      } // Mark the current line as the last diverging one.


      lastPos = i; // Add the expected line to the cache.

      other += "\n".concat(red, "-").concat(white, " ").concat(expectedLines[i]);
      printedLines++; // Only extra actual lines exist
    } else if (expectedLines.length < i + 1) {
      // If the last diverging line is more than one line above and the
      // current line is at least line three, add some of the former lines and
      // also add dots to indicate skipped entries.
      if (cur > 1 && i > 2) {
        if (cur > 4) {
          res += "\n".concat(blue, "...").concat(white);
          skipped = true;
        } else if (cur > 3) {
          res += "\n  ".concat(actualLines[i - 2]);
          printedLines++;
        }

        res += "\n  ".concat(actualLines[i - 1]);
        printedLines++;
      } // Mark the current line as the last diverging one.


      lastPos = i; // Add the actual line to the result.

      res += "\n".concat(green, "+").concat(white, " ").concat(actualLines[i]);
      printedLines++; // Lines diverge
    } else {
      var expectedLine = expectedLines[i];
      var actualLine = actualLines[i]; // If the lines diverge, specifically check for lines that only diverge by
      // a trailing comma. In that case it is actually identical and we should
      // mark it as such.

      var divergingLines = actualLine !== expectedLine && (!endsWith(actualLine, ',') || actualLine.slice(0, -1) !== expectedLine); // If the expected line has a trailing comma but is otherwise identical,
      // add a comma at the end of the actual line. Otherwise the output could
      // look weird as in:
      //
      //   [
      //     1         // No comma at the end!
      // +   2
      //   ]
      //

      if (divergingLines && endsWith(expectedLine, ',') && expectedLine.slice(0, -1) === actualLine) {
        divergingLines = false;
        actualLine += ',';
      }

      if (divergingLines) {
        // If the last diverging line is more than one line above and the
        // current line is at least line three, add some of the former lines and
        // also add dots to indicate skipped entries.
        if (cur > 1 && i > 2) {
          if (cur > 4) {
            res += "\n".concat(blue, "...").concat(white);
            skipped = true;
          } else if (cur > 3) {
            res += "\n  ".concat(actualLines[i - 2]);
            printedLines++;
          }

          res += "\n  ".concat(actualLines[i - 1]);
          printedLines++;
        } // Mark the current line as the last diverging one.


        lastPos = i; // Add the actual line to the result and cache the expected diverging
        // line so consecutive diverging lines show up as +++--- and not +-+-+-.

        res += "\n".concat(green, "+").concat(white, " ").concat(actualLine);
        other += "\n".concat(red, "-").concat(white, " ").concat(expectedLine);
        printedLines += 2; // Lines are identical
      } else {
        // Add all cached information to the result before adding other things
        // and reset the cache.
        res += other;
        other = ''; // If the last diverging line is exactly one line above or if it is the
        // very first line, add the line to the result.

        if (cur === 1 || i === 0) {
          res += "\n  ".concat(actualLine);
          printedLines++;
        }
      }
    } // Inspected object to big (Show ~20 rows max)


    if (printedLines > 20 && i < maxLines - 2) {
      return "".concat(msg).concat(skippedMsg, "\n").concat(res, "\n").concat(blue, "...").concat(white).concat(other, "\n") + "".concat(blue, "...").concat(white);
    }
  }

  return "".concat(msg).concat(skipped ? skippedMsg : '', "\n").concat(res).concat(other).concat(end).concat(indicator);
}

var AssertionError =
/*#__PURE__*/
function (_Error) {
  _inherits(AssertionError, _Error);

  function AssertionError(options) {
    var _this;

    _classCallCheck(this, AssertionError);

    if (_typeof(options) !== 'object' || options === null) {
      throw new ERR_INVALID_ARG_TYPE('options', 'Object', options);
    }

    var message = options.message,
        operator = options.operator,
        stackStartFn = options.stackStartFn;
    var actual = options.actual,
        expected = options.expected;
    var limit = Error.stackTraceLimit;
    Error.stackTraceLimit = 0;

    if (message != null) {
      _this = _possibleConstructorReturn(this, _getPrototypeOf(AssertionError).call(this, String(message)));
    } else {
      if (process.stderr && process.stderr.isTTY) {
        // Reset on each call to make sure we handle dynamically set environment
        // variables correct.
        if (process.stderr && process.stderr.getColorDepth && process.stderr.getColorDepth() !== 1) {
          blue = "\x1B[34m";
          green = "\x1B[32m";
          white = "\x1B[39m";
          red = "\x1B[31m";
        } else {
          blue = '';
          green = '';
          white = '';
          red = '';
        }
      } // Prevent the error stack from being visible by duplicating the error
      // in a very close way to the original in case both sides are actually
      // instances of Error.


      if (_typeof(actual) === 'object' && actual !== null && _typeof(expected) === 'object' && expected !== null && 'stack' in actual && actual instanceof Error && 'stack' in expected && expected instanceof Error) {
        actual = copyError(actual);
        expected = copyError(expected);
      }

      if (operator === 'deepStrictEqual' || operator === 'strictEqual') {
        _this = _possibleConstructorReturn(this, _getPrototypeOf(AssertionError).call(this, createErrDiff(actual, expected, operator)));
      } else if (operator === 'notDeepStrictEqual' || operator === 'notStrictEqual') {
        // In case the objects are equal but the operator requires unequal, show
        // the first object and say A equals B
        var base = kReadableOperator[operator];
        var res = inspectValue(actual).split('\n'); // In case "actual" is an object, it should not be reference equal.

        if (operator === 'notStrictEqual' && _typeof(actual) === 'object' && actual !== null) {
          base = kReadableOperator.notStrictEqualObject;
        } // Only remove lines in case it makes sense to collapse those.
        // TODO: Accept env to always show the full error.


        if (res.length > 30) {
          res[26] = "".concat(blue, "...").concat(white);

          while (res.length > 27) {
            res.pop();
          }
        } // Only print a single input.


        if (res.length === 1) {
          _this = _possibleConstructorReturn(this, _getPrototypeOf(AssertionError).call(this, "".concat(base, " ").concat(res[0])));
        } else {
          _this = _possibleConstructorReturn(this, _getPrototypeOf(AssertionError).call(this, "".concat(base, "\n\n").concat(res.join('\n'), "\n")));
        }
      } else {
        var _res = inspectValue(actual);

        var other = '';
        var knownOperators = kReadableOperator[operator];

        if (operator === 'notDeepEqual' || operator === 'notEqual') {
          _res = "".concat(kReadableOperator[operator], "\n\n").concat(_res);

          if (_res.length > 1024) {
            _res = "".concat(_res.slice(0, 1021), "...");
          }
        } else {
          other = "".concat(inspectValue(expected));

          if (_res.length > 512) {
            _res = "".concat(_res.slice(0, 509), "...");
          }

          if (other.length > 512) {
            other = "".concat(other.slice(0, 509), "...");
          }

          if (operator === 'deepEqual' || operator === 'equal') {
            _res = "".concat(knownOperators, "\n\n").concat(_res, "\n\nshould equal\n\n");
          } else {
            other = " ".concat(operator, " ").concat(other);
          }
        }

        _this = _possibleConstructorReturn(this, _getPrototypeOf(AssertionError).call(this, "".concat(_res).concat(other)));
      }
    }

    Error.stackTraceLimit = limit;
    _this.generatedMessage = !message;
    Object.defineProperty(_assertThisInitialized(_this), 'name', {
      value: 'AssertionError [ERR_ASSERTION]',
      enumerable: false,
      writable: true,
      configurable: true
    });
    _this.code = 'ERR_ASSERTION';
    _this.actual = actual;
    _this.expected = expected;
    _this.operator = operator;

    if (Error.captureStackTrace) {
      // eslint-disable-next-line no-restricted-syntax
      Error.captureStackTrace(_assertThisInitialized(_this), stackStartFn);
    } // Create error message including the error code in the name.


    _this.stack; // Reset the name.

    _this.name = 'AssertionError';
    return _possibleConstructorReturn(_this);
  }

  _createClass(AssertionError, [{
    key: "toString",
    value: function toString() {
      return "".concat(this.name, " [").concat(this.code, "]: ").concat(this.message);
    }
  }, {
    key: inspect.custom,
    value: function value(recurseTimes, ctx) {
      // This limits the `actual` and `expected` property default inspection to
      // the minimum depth. Otherwise those values would be too verbose compared
      // to the actual error message which contains a combined view of these two
      // input values.
      return inspect(this, _objectSpread({}, ctx, {
        customInspect: false,
        depth: 0
      }));
    }
  }]);

  return AssertionError;
}(_wrapNativeSuper(Error));

module.exports = AssertionError;

/***/ }),

/***/ 7515:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
// Currently in sync with Node.js lib/internal/errors.js
// https://github.com/nodejs/node/commit/3b044962c48fe313905877a96b5d0894a5404f6f

/* eslint node-core/documented-errors: "error" */

/* eslint node-core/alphabetize-errors: "error" */

/* eslint node-core/prefer-util-format-errors: "error" */
 // The whole point behind this internal module is to allow Node.js to no
// longer be forced to treat every error message change as a semver-major
// change. The NodeError classes here all expose a `code` property whose
// value statically and permanently identifies the error. While the error
// message may change, the code should not.

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var codes = {}; // Lazy loaded

var assert;
var util;

function createErrorType(code, message, Base) {
  if (!Base) {
    Base = Error;
  }

  function getMessage(arg1, arg2, arg3) {
    if (typeof message === 'string') {
      return message;
    } else {
      return message(arg1, arg2, arg3);
    }
  }

  var NodeError =
  /*#__PURE__*/
  function (_Base) {
    _inherits(NodeError, _Base);

    function NodeError(arg1, arg2, arg3) {
      var _this;

      _classCallCheck(this, NodeError);

      _this = _possibleConstructorReturn(this, _getPrototypeOf(NodeError).call(this, getMessage(arg1, arg2, arg3)));
      _this.code = code;
      return _this;
    }

    return NodeError;
  }(Base);

  codes[code] = NodeError;
} // https://github.com/nodejs/node/blob/v10.8.0/lib/internal/errors.js


function oneOf(expected, thing) {
  if (Array.isArray(expected)) {
    var len = expected.length;
    expected = expected.map(function (i) {
      return String(i);
    });

    if (len > 2) {
      return "one of ".concat(thing, " ").concat(expected.slice(0, len - 1).join(', '), ", or ") + expected[len - 1];
    } else if (len === 2) {
      return "one of ".concat(thing, " ").concat(expected[0], " or ").concat(expected[1]);
    } else {
      return "of ".concat(thing, " ").concat(expected[0]);
    }
  } else {
    return "of ".concat(thing, " ").concat(String(expected));
  }
} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/startsWith


function startsWith(str, search, pos) {
  return str.substr(!pos || pos < 0 ? 0 : +pos, search.length) === search;
} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/endsWith


function endsWith(str, search, this_len) {
  if (this_len === undefined || this_len > str.length) {
    this_len = str.length;
  }

  return str.substring(this_len - search.length, this_len) === search;
} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/includes


function includes(str, search, start) {
  if (typeof start !== 'number') {
    start = 0;
  }

  if (start + search.length > str.length) {
    return false;
  } else {
    return str.indexOf(search, start) !== -1;
  }
}

createErrorType('ERR_AMBIGUOUS_ARGUMENT', 'The "%s" argument is ambiguous. %s', TypeError);
createErrorType('ERR_INVALID_ARG_TYPE', function (name, expected, actual) {
  if (assert === undefined) assert = __webpack_require__(1696);
  assert(typeof name === 'string', "'name' must be a string"); // determiner: 'must be' or 'must not be'

  var determiner;

  if (typeof expected === 'string' && startsWith(expected, 'not ')) {
    determiner = 'must not be';
    expected = expected.replace(/^not /, '');
  } else {
    determiner = 'must be';
  }

  var msg;

  if (endsWith(name, ' argument')) {
    // For cases like 'first argument'
    msg = "The ".concat(name, " ").concat(determiner, " ").concat(oneOf(expected, 'type'));
  } else {
    var type = includes(name, '.') ? 'property' : 'argument';
    msg = "The \"".concat(name, "\" ").concat(type, " ").concat(determiner, " ").concat(oneOf(expected, 'type'));
  } // TODO(BridgeAR): Improve the output by showing `null` and similar.


  msg += ". Received type ".concat(_typeof(actual));
  return msg;
}, TypeError);
createErrorType('ERR_INVALID_ARG_VALUE', function (name, value) {
  var reason = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'is invalid';
  if (util === undefined) util = __webpack_require__(3335);
  var inspected = util.inspect(value);

  if (inspected.length > 128) {
    inspected = "".concat(inspected.slice(0, 128), "...");
  }

  return "The argument '".concat(name, "' ").concat(reason, ". Received ").concat(inspected);
}, TypeError, RangeError);
createErrorType('ERR_INVALID_RETURN_VALUE', function (input, name, value) {
  var type;

  if (value && value.constructor && value.constructor.name) {
    type = "instance of ".concat(value.constructor.name);
  } else {
    type = "type ".concat(_typeof(value));
  }

  return "Expected ".concat(input, " to be returned from the \"").concat(name, "\"") + " function but got ".concat(type, ".");
}, TypeError);
createErrorType('ERR_MISSING_ARGS', function () {
  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }

  if (assert === undefined) assert = __webpack_require__(1696);
  assert(args.length > 0, 'At least one arg needs to be specified');
  var msg = 'The ';
  var len = args.length;
  args = args.map(function (a) {
    return "\"".concat(a, "\"");
  });

  switch (len) {
    case 1:
      msg += "".concat(args[0], " argument");
      break;

    case 2:
      msg += "".concat(args[0], " and ").concat(args[1], " arguments");
      break;

    default:
      msg += args.slice(0, len - 1).join(', ');
      msg += ", and ".concat(args[len - 1], " arguments");
      break;
  }

  return "".concat(msg, " must be specified");
}, TypeError);
module.exports.codes = codes;

/***/ }),

/***/ 6796:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
// Currently in sync with Node.js lib/internal/util/comparisons.js
// https://github.com/nodejs/node/commit/112cc7c27551254aa2b17098fb774867f05ed0d9


function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var regexFlagsSupported = /a/g.flags !== undefined;

var arrayFromSet = function arrayFromSet(set) {
  var array = [];
  set.forEach(function (value) {
    return array.push(value);
  });
  return array;
};

var arrayFromMap = function arrayFromMap(map) {
  var array = [];
  map.forEach(function (value, key) {
    return array.push([key, value]);
  });
  return array;
};

var objectIs = Object.is ? Object.is : __webpack_require__(4679);
var objectGetOwnPropertySymbols = Object.getOwnPropertySymbols ? Object.getOwnPropertySymbols : function () {
  return [];
};
var numberIsNaN = Number.isNaN ? Number.isNaN : __webpack_require__(4782);

function uncurryThis(f) {
  return f.call.bind(f);
}

var hasOwnProperty = uncurryThis(Object.prototype.hasOwnProperty);
var propertyIsEnumerable = uncurryThis(Object.prototype.propertyIsEnumerable);
var objectToString = uncurryThis(Object.prototype.toString);

var _require$types = (__webpack_require__(3335).types),
    isAnyArrayBuffer = _require$types.isAnyArrayBuffer,
    isArrayBufferView = _require$types.isArrayBufferView,
    isDate = _require$types.isDate,
    isMap = _require$types.isMap,
    isRegExp = _require$types.isRegExp,
    isSet = _require$types.isSet,
    isNativeError = _require$types.isNativeError,
    isBoxedPrimitive = _require$types.isBoxedPrimitive,
    isNumberObject = _require$types.isNumberObject,
    isStringObject = _require$types.isStringObject,
    isBooleanObject = _require$types.isBooleanObject,
    isBigIntObject = _require$types.isBigIntObject,
    isSymbolObject = _require$types.isSymbolObject,
    isFloat32Array = _require$types.isFloat32Array,
    isFloat64Array = _require$types.isFloat64Array;

function isNonIndex(key) {
  if (key.length === 0 || key.length > 10) return true;

  for (var i = 0; i < key.length; i++) {
    var code = key.charCodeAt(i);
    if (code < 48 || code > 57) return true;
  } // The maximum size for an array is 2 ** 32 -1.


  return key.length === 10 && key >= Math.pow(2, 32);
}

function getOwnNonIndexProperties(value) {
  return Object.keys(value).filter(isNonIndex).concat(objectGetOwnPropertySymbols(value).filter(Object.prototype.propertyIsEnumerable.bind(value)));
} // Taken from https://github.com/feross/buffer/blob/680e9e5e488f22aac27599a57dc844a6315928dd/index.js
// original notice:

/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */


function compare(a, b) {
  if (a === b) {
    return 0;
  }

  var x = a.length;
  var y = b.length;

  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
    if (a[i] !== b[i]) {
      x = a[i];
      y = b[i];
      break;
    }
  }

  if (x < y) {
    return -1;
  }

  if (y < x) {
    return 1;
  }

  return 0;
}

var ONLY_ENUMERABLE = undefined;
var kStrict = true;
var kLoose = false;
var kNoIterator = 0;
var kIsArray = 1;
var kIsSet = 2;
var kIsMap = 3; // Check if they have the same source and flags

function areSimilarRegExps(a, b) {
  return regexFlagsSupported ? a.source === b.source && a.flags === b.flags : RegExp.prototype.toString.call(a) === RegExp.prototype.toString.call(b);
}

function areSimilarFloatArrays(a, b) {
  if (a.byteLength !== b.byteLength) {
    return false;
  }

  for (var offset = 0; offset < a.byteLength; offset++) {
    if (a[offset] !== b[offset]) {
      return false;
    }
  }

  return true;
}

function areSimilarTypedArrays(a, b) {
  if (a.byteLength !== b.byteLength) {
    return false;
  }

  return compare(new Uint8Array(a.buffer, a.byteOffset, a.byteLength), new Uint8Array(b.buffer, b.byteOffset, b.byteLength)) === 0;
}

function areEqualArrayBuffers(buf1, buf2) {
  return buf1.byteLength === buf2.byteLength && compare(new Uint8Array(buf1), new Uint8Array(buf2)) === 0;
}

function isEqualBoxedPrimitive(val1, val2) {
  if (isNumberObject(val1)) {
    return isNumberObject(val2) && objectIs(Number.prototype.valueOf.call(val1), Number.prototype.valueOf.call(val2));
  }

  if (isStringObject(val1)) {
    return isStringObject(val2) && String.prototype.valueOf.call(val1) === String.prototype.valueOf.call(val2);
  }

  if (isBooleanObject(val1)) {
    return isBooleanObject(val2) && Boolean.prototype.valueOf.call(val1) === Boolean.prototype.valueOf.call(val2);
  }

  if (isBigIntObject(val1)) {
    return isBigIntObject(val2) && BigInt.prototype.valueOf.call(val1) === BigInt.prototype.valueOf.call(val2);
  }

  return isSymbolObject(val2) && Symbol.prototype.valueOf.call(val1) === Symbol.prototype.valueOf.call(val2);
} // Notes: Type tags are historical [[Class]] properties that can be set by
// FunctionTemplate::SetClassName() in C++ or Symbol.toStringTag in JS
// and retrieved using Object.prototype.toString.call(obj) in JS
// See https://tc39.github.io/ecma262/#sec-object.prototype.tostring
// for a list of tags pre-defined in the spec.
// There are some unspecified tags in the wild too (e.g. typed array tags).
// Since tags can be altered, they only serve fast failures
//
// Typed arrays and buffers are checked by comparing the content in their
// underlying ArrayBuffer. This optimization requires that it's
// reasonable to interpret their underlying memory in the same way,
// which is checked by comparing their type tags.
// (e.g. a Uint8Array and a Uint16Array with the same memory content
// could still be different because they will be interpreted differently).
//
// For strict comparison, objects should have
// a) The same built-in type tags
// b) The same prototypes.


function innerDeepEqual(val1, val2, strict, memos) {
  // All identical values are equivalent, as determined by ===.
  if (val1 === val2) {
    if (val1 !== 0) return true;
    return strict ? objectIs(val1, val2) : true;
  } // Check more closely if val1 and val2 are equal.


  if (strict) {
    if (_typeof(val1) !== 'object') {
      return typeof val1 === 'number' && numberIsNaN(val1) && numberIsNaN(val2);
    }

    if (_typeof(val2) !== 'object' || val1 === null || val2 === null) {
      return false;
    }

    if (Object.getPrototypeOf(val1) !== Object.getPrototypeOf(val2)) {
      return false;
    }
  } else {
    if (val1 === null || _typeof(val1) !== 'object') {
      if (val2 === null || _typeof(val2) !== 'object') {
        // eslint-disable-next-line eqeqeq
        return val1 == val2;
      }

      return false;
    }

    if (val2 === null || _typeof(val2) !== 'object') {
      return false;
    }
  }

  var val1Tag = objectToString(val1);
  var val2Tag = objectToString(val2);

  if (val1Tag !== val2Tag) {
    return false;
  }

  if (Array.isArray(val1)) {
    // Check for sparse arrays and general fast path
    if (val1.length !== val2.length) {
      return false;
    }

    var keys1 = getOwnNonIndexProperties(val1, ONLY_ENUMERABLE);
    var keys2 = getOwnNonIndexProperties(val2, ONLY_ENUMERABLE);

    if (keys1.length !== keys2.length) {
      return false;
    }

    return keyCheck(val1, val2, strict, memos, kIsArray, keys1);
  } // [browserify] This triggers on certain types in IE (Map/Set) so we don't
  // wan't to early return out of the rest of the checks. However we can check
  // if the second value is one of these values and the first isn't.


  if (val1Tag === '[object Object]') {
    // return keyCheck(val1, val2, strict, memos, kNoIterator);
    if (!isMap(val1) && isMap(val2) || !isSet(val1) && isSet(val2)) {
      return false;
    }
  }

  if (isDate(val1)) {
    if (!isDate(val2) || Date.prototype.getTime.call(val1) !== Date.prototype.getTime.call(val2)) {
      return false;
    }
  } else if (isRegExp(val1)) {
    if (!isRegExp(val2) || !areSimilarRegExps(val1, val2)) {
      return false;
    }
  } else if (isNativeError(val1) || val1 instanceof Error) {
    // Do not compare the stack as it might differ even though the error itself
    // is otherwise identical.
    if (val1.message !== val2.message || val1.name !== val2.name) {
      return false;
    }
  } else if (isArrayBufferView(val1)) {
    if (!strict && (isFloat32Array(val1) || isFloat64Array(val1))) {
      if (!areSimilarFloatArrays(val1, val2)) {
        return false;
      }
    } else if (!areSimilarTypedArrays(val1, val2)) {
      return false;
    } // Buffer.compare returns true, so val1.length === val2.length. If they both
    // only contain numeric keys, we don't need to exam further than checking
    // the symbols.


    var _keys = getOwnNonIndexProperties(val1, ONLY_ENUMERABLE);

    var _keys2 = getOwnNonIndexProperties(val2, ONLY_ENUMERABLE);

    if (_keys.length !== _keys2.length) {
      return false;
    }

    return keyCheck(val1, val2, strict, memos, kNoIterator, _keys);
  } else if (isSet(val1)) {
    if (!isSet(val2) || val1.size !== val2.size) {
      return false;
    }

    return keyCheck(val1, val2, strict, memos, kIsSet);
  } else if (isMap(val1)) {
    if (!isMap(val2) || val1.size !== val2.size) {
      return false;
    }

    return keyCheck(val1, val2, strict, memos, kIsMap);
  } else if (isAnyArrayBuffer(val1)) {
    if (!areEqualArrayBuffers(val1, val2)) {
      return false;
    }
  } else if (isBoxedPrimitive(val1) && !isEqualBoxedPrimitive(val1, val2)) {
    return false;
  }

  return keyCheck(val1, val2, strict, memos, kNoIterator);
}

function getEnumerables(val, keys) {
  return keys.filter(function (k) {
    return propertyIsEnumerable(val, k);
  });
}

function keyCheck(val1, val2, strict, memos, iterationType, aKeys) {
  // For all remaining Object pairs, including Array, objects and Maps,
  // equivalence is determined by having:
  // a) The same number of owned enumerable properties
  // b) The same set of keys/indexes (although not necessarily the same order)
  // c) Equivalent values for every corresponding key/index
  // d) For Sets and Maps, equal contents
  // Note: this accounts for both named and indexed properties on Arrays.
  if (arguments.length === 5) {
    aKeys = Object.keys(val1);
    var bKeys = Object.keys(val2); // The pair must have the same number of owned properties.

    if (aKeys.length !== bKeys.length) {
      return false;
    }
  } // Cheap key test


  var i = 0;

  for (; i < aKeys.length; i++) {
    if (!hasOwnProperty(val2, aKeys[i])) {
      return false;
    }
  }

  if (strict && arguments.length === 5) {
    var symbolKeysA = objectGetOwnPropertySymbols(val1);

    if (symbolKeysA.length !== 0) {
      var count = 0;

      for (i = 0; i < symbolKeysA.length; i++) {
        var key = symbolKeysA[i];

        if (propertyIsEnumerable(val1, key)) {
          if (!propertyIsEnumerable(val2, key)) {
            return false;
          }

          aKeys.push(key);
          count++;
        } else if (propertyIsEnumerable(val2, key)) {
          return false;
        }
      }

      var symbolKeysB = objectGetOwnPropertySymbols(val2);

      if (symbolKeysA.length !== symbolKeysB.length && getEnumerables(val2, symbolKeysB).length !== count) {
        return false;
      }
    } else {
      var _symbolKeysB = objectGetOwnPropertySymbols(val2);

      if (_symbolKeysB.length !== 0 && getEnumerables(val2, _symbolKeysB).length !== 0) {
        return false;
      }
    }
  }

  if (aKeys.length === 0 && (iterationType === kNoIterator || iterationType === kIsArray && val1.length === 0 || val1.size === 0)) {
    return true;
  } // Use memos to handle cycles.


  if (memos === undefined) {
    memos = {
      val1: new Map(),
      val2: new Map(),
      position: 0
    };
  } else {
    // We prevent up to two map.has(x) calls by directly retrieving the value
    // and checking for undefined. The map can only contain numbers, so it is
    // safe to check for undefined only.
    var val2MemoA = memos.val1.get(val1);

    if (val2MemoA !== undefined) {
      var val2MemoB = memos.val2.get(val2);

      if (val2MemoB !== undefined) {
        return val2MemoA === val2MemoB;
      }
    }

    memos.position++;
  }

  memos.val1.set(val1, memos.position);
  memos.val2.set(val2, memos.position);
  var areEq = objEquiv(val1, val2, strict, aKeys, memos, iterationType);
  memos.val1.delete(val1);
  memos.val2.delete(val2);
  return areEq;
}

function setHasEqualElement(set, val1, strict, memo) {
  // Go looking.
  var setValues = arrayFromSet(set);

  for (var i = 0; i < setValues.length; i++) {
    var val2 = setValues[i];

    if (innerDeepEqual(val1, val2, strict, memo)) {
      // Remove the matching element to make sure we do not check that again.
      set.delete(val2);
      return true;
    }
  }

  return false;
} // See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Equality_comparisons_and_sameness#Loose_equality_using
// Sadly it is not possible to detect corresponding values properly in case the
// type is a string, number, bigint or boolean. The reason is that those values
// can match lots of different string values (e.g., 1n == '+00001').


function findLooseMatchingPrimitives(prim) {
  switch (_typeof(prim)) {
    case 'undefined':
      return null;

    case 'object':
      // Only pass in null as object!
      return undefined;

    case 'symbol':
      return false;

    case 'string':
      prim = +prim;
    // Loose equal entries exist only if the string is possible to convert to
    // a regular number and not NaN.
    // Fall through

    case 'number':
      if (numberIsNaN(prim)) {
        return false;
      }

  }

  return true;
}

function setMightHaveLoosePrim(a, b, prim) {
  var altValue = findLooseMatchingPrimitives(prim);
  if (altValue != null) return altValue;
  return b.has(altValue) && !a.has(altValue);
}

function mapMightHaveLoosePrim(a, b, prim, item, memo) {
  var altValue = findLooseMatchingPrimitives(prim);

  if (altValue != null) {
    return altValue;
  }

  var curB = b.get(altValue);

  if (curB === undefined && !b.has(altValue) || !innerDeepEqual(item, curB, false, memo)) {
    return false;
  }

  return !a.has(altValue) && innerDeepEqual(item, curB, false, memo);
}

function setEquiv(a, b, strict, memo) {
  // This is a lazily initiated Set of entries which have to be compared
  // pairwise.
  var set = null;
  var aValues = arrayFromSet(a);

  for (var i = 0; i < aValues.length; i++) {
    var val = aValues[i]; // Note: Checking for the objects first improves the performance for object
    // heavy sets but it is a minor slow down for primitives. As they are fast
    // to check this improves the worst case scenario instead.

    if (_typeof(val) === 'object' && val !== null) {
      if (set === null) {
        set = new Set();
      } // If the specified value doesn't exist in the second set its an not null
      // object (or non strict only: a not matching primitive) we'll need to go
      // hunting for something thats deep-(strict-)equal to it. To make this
      // O(n log n) complexity we have to copy these values in a new set first.


      set.add(val);
    } else if (!b.has(val)) {
      if (strict) return false; // Fast path to detect missing string, symbol, undefined and null values.

      if (!setMightHaveLoosePrim(a, b, val)) {
        return false;
      }

      if (set === null) {
        set = new Set();
      }

      set.add(val);
    }
  }

  if (set !== null) {
    var bValues = arrayFromSet(b);

    for (var _i = 0; _i < bValues.length; _i++) {
      var _val = bValues[_i]; // We have to check if a primitive value is already
      // matching and only if it's not, go hunting for it.

      if (_typeof(_val) === 'object' && _val !== null) {
        if (!setHasEqualElement(set, _val, strict, memo)) return false;
      } else if (!strict && !a.has(_val) && !setHasEqualElement(set, _val, strict, memo)) {
        return false;
      }
    }

    return set.size === 0;
  }

  return true;
}

function mapHasEqualEntry(set, map, key1, item1, strict, memo) {
  // To be able to handle cases like:
  //   Map([[{}, 'a'], [{}, 'b']]) vs Map([[{}, 'b'], [{}, 'a']])
  // ... we need to consider *all* matching keys, not just the first we find.
  var setValues = arrayFromSet(set);

  for (var i = 0; i < setValues.length; i++) {
    var key2 = setValues[i];

    if (innerDeepEqual(key1, key2, strict, memo) && innerDeepEqual(item1, map.get(key2), strict, memo)) {
      set.delete(key2);
      return true;
    }
  }

  return false;
}

function mapEquiv(a, b, strict, memo) {
  var set = null;
  var aEntries = arrayFromMap(a);

  for (var i = 0; i < aEntries.length; i++) {
    var _aEntries$i = _slicedToArray(aEntries[i], 2),
        key = _aEntries$i[0],
        item1 = _aEntries$i[1];

    if (_typeof(key) === 'object' && key !== null) {
      if (set === null) {
        set = new Set();
      }

      set.add(key);
    } else {
      // By directly retrieving the value we prevent another b.has(key) check in
      // almost all possible cases.
      var item2 = b.get(key);

      if (item2 === undefined && !b.has(key) || !innerDeepEqual(item1, item2, strict, memo)) {
        if (strict) return false; // Fast path to detect missing string, symbol, undefined and null
        // keys.

        if (!mapMightHaveLoosePrim(a, b, key, item1, memo)) return false;

        if (set === null) {
          set = new Set();
        }

        set.add(key);
      }
    }
  }

  if (set !== null) {
    var bEntries = arrayFromMap(b);

    for (var _i2 = 0; _i2 < bEntries.length; _i2++) {
      var _bEntries$_i = _slicedToArray(bEntries[_i2], 2),
          key = _bEntries$_i[0],
          item = _bEntries$_i[1];

      if (_typeof(key) === 'object' && key !== null) {
        if (!mapHasEqualEntry(set, a, key, item, strict, memo)) return false;
      } else if (!strict && (!a.has(key) || !innerDeepEqual(a.get(key), item, false, memo)) && !mapHasEqualEntry(set, a, key, item, false, memo)) {
        return false;
      }
    }

    return set.size === 0;
  }

  return true;
}

function objEquiv(a, b, strict, keys, memos, iterationType) {
  // Sets and maps don't have their entries accessible via normal object
  // properties.
  var i = 0;

  if (iterationType === kIsSet) {
    if (!setEquiv(a, b, strict, memos)) {
      return false;
    }
  } else if (iterationType === kIsMap) {
    if (!mapEquiv(a, b, strict, memos)) {
      return false;
    }
  } else if (iterationType === kIsArray) {
    for (; i < a.length; i++) {
      if (hasOwnProperty(a, i)) {
        if (!hasOwnProperty(b, i) || !innerDeepEqual(a[i], b[i], strict, memos)) {
          return false;
        }
      } else if (hasOwnProperty(b, i)) {
        return false;
      } else {
        // Array is sparse.
        var keysA = Object.keys(a);

        for (; i < keysA.length; i++) {
          var key = keysA[i];

          if (!hasOwnProperty(b, key) || !innerDeepEqual(a[key], b[key], strict, memos)) {
            return false;
          }
        }

        if (keysA.length !== Object.keys(b).length) {
          return false;
        }

        return true;
      }
    }
  } // The pair must have equivalent values for every corresponding key.
  // Possibly expensive deep test:


  for (i = 0; i < keys.length; i++) {
    var _key = keys[i];

    if (!innerDeepEqual(a[_key], b[_key], strict, memos)) {
      return false;
    }
  }

  return true;
}

function isDeepEqual(val1, val2) {
  return innerDeepEqual(val1, val2, kLoose);
}

function isDeepStrictEqual(val1, val2) {
  return innerDeepEqual(val1, val2, kStrict);
}

module.exports = {
  isDeepEqual: isDeepEqual,
  isDeepStrictEqual: isDeepStrictEqual
};

/***/ }),

/***/ 2680:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var GetIntrinsic = __webpack_require__(7286);

var callBind = __webpack_require__(9429);

var $indexOf = callBind(GetIntrinsic('String.prototype.indexOf'));

module.exports = function callBoundIntrinsic(name, allowMissing) {
	var intrinsic = GetIntrinsic(name, !!allowMissing);
	if (typeof intrinsic === 'function' && $indexOf(name, '.prototype.') > -1) {
		return callBind(intrinsic);
	}
	return intrinsic;
};


/***/ }),

/***/ 9429:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var bind = __webpack_require__(4090);
var GetIntrinsic = __webpack_require__(7286);

var $apply = GetIntrinsic('%Function.prototype.apply%');
var $call = GetIntrinsic('%Function.prototype.call%');
var $reflectApply = GetIntrinsic('%Reflect.apply%', true) || bind.call($call, $apply);

var $gOPD = GetIntrinsic('%Object.getOwnPropertyDescriptor%', true);
var $defineProperty = GetIntrinsic('%Object.defineProperty%', true);
var $max = GetIntrinsic('%Math.max%');

if ($defineProperty) {
	try {
		$defineProperty({}, 'a', { value: 1 });
	} catch (e) {
		// IE 8 has a broken defineProperty
		$defineProperty = null;
	}
}

module.exports = function callBind(originalFunction) {
	var func = $reflectApply(bind, $call, arguments);
	if ($gOPD && $defineProperty) {
		var desc = $gOPD(func, 'length');
		if (desc.configurable) {
			// original length, plus the receiver, minus any additional arguments (after the receiver)
			$defineProperty(
				func,
				'length',
				{ value: 1 + $max(0, originalFunction.length - (arguments.length - 1)) }
			);
		}
	}
	return func;
};

var applyBind = function applyBind() {
	return $reflectApply(bind, $apply, arguments);
};

if ($defineProperty) {
	$defineProperty(module.exports, 'apply', { value: applyBind });
} else {
	module.exports.apply = applyBind;
}


/***/ }),

/***/ 3716:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

/*global window, global*/
var util = __webpack_require__(3335)
var assert = __webpack_require__(1696)
function now() { return new Date().getTime() }

var slice = Array.prototype.slice
var console
var times = {}

if (typeof __webpack_require__.g !== "undefined" && __webpack_require__.g.console) {
    console = __webpack_require__.g.console
} else if (typeof window !== "undefined" && window.console) {
    console = window.console
} else {
    console = {}
}

var functions = [
    [log, "log"],
    [info, "info"],
    [warn, "warn"],
    [error, "error"],
    [time, "time"],
    [timeEnd, "timeEnd"],
    [trace, "trace"],
    [dir, "dir"],
    [consoleAssert, "assert"]
]

for (var i = 0; i < functions.length; i++) {
    var tuple = functions[i]
    var f = tuple[0]
    var name = tuple[1]

    if (!console[name]) {
        console[name] = f
    }
}

module.exports = console

function log() {}

function info() {
    console.log.apply(console, arguments)
}

function warn() {
    console.log.apply(console, arguments)
}

function error() {
    console.warn.apply(console, arguments)
}

function time(label) {
    times[label] = now()
}

function timeEnd(label) {
    var time = times[label]
    if (!time) {
        throw new Error("No such label: " + label)
    }

    delete times[label]
    var duration = now() - time
    console.log(label + ": " + duration + "ms")
}

function trace() {
    var err = new Error()
    err.name = "Trace"
    err.message = util.format.apply(null, arguments)
    console.error(err.stack)
}

function dir(object) {
    console.log(util.inspect(object) + "\n")
}

function consoleAssert(expression) {
    if (!expression) {
        var arr = slice.call(arguments, 1)
        assert.ok(false, util.format.apply(null, arr))
    }
}


/***/ }),

/***/ 4926:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var keys = __webpack_require__(3464);
var hasSymbols = typeof Symbol === 'function' && typeof Symbol('foo') === 'symbol';

var toStr = Object.prototype.toString;
var concat = Array.prototype.concat;
var origDefineProperty = Object.defineProperty;

var isFunction = function (fn) {
	return typeof fn === 'function' && toStr.call(fn) === '[object Function]';
};

var hasPropertyDescriptors = __webpack_require__(1181)();

var supportsDescriptors = origDefineProperty && hasPropertyDescriptors;

var defineProperty = function (object, name, value, predicate) {
	if (name in object) {
		if (predicate === true) {
			if (object[name] === value) {
				return;
			}
		} else if (!isFunction(predicate) || !predicate()) {
			return;
		}
	}
	if (supportsDescriptors) {
		origDefineProperty(object, name, {
			configurable: true,
			enumerable: false,
			value: value,
			writable: true
		});
	} else {
		object[name] = value; // eslint-disable-line no-param-reassign
	}
};

var defineProperties = function (object, map) {
	var predicates = arguments.length > 2 ? arguments[2] : {};
	var props = keys(map);
	if (hasSymbols) {
		props = concat.call(props, Object.getOwnPropertySymbols(map));
	}
	for (var i = 0; i < props.length; i += 1) {
		defineProperty(object, props[i], map[props[i]], predicates[props[i]]);
	}
};

defineProperties.supportsDescriptors = !!supportsDescriptors;

module.exports = defineProperties;


/***/ }),

/***/ 4956:
/***/ ((module) => {

"use strict";
/**
 * Code refactored from Mozilla Developer Network:
 * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign
 */



function assign(target, firstSource) {
  if (target === undefined || target === null) {
    throw new TypeError('Cannot convert first argument to object');
  }

  var to = Object(target);
  for (var i = 1; i < arguments.length; i++) {
    var nextSource = arguments[i];
    if (nextSource === undefined || nextSource === null) {
      continue;
    }

    var keysArray = Object.keys(Object(nextSource));
    for (var nextIndex = 0, len = keysArray.length; nextIndex < len; nextIndex++) {
      var nextKey = keysArray[nextIndex];
      var desc = Object.getOwnPropertyDescriptor(nextSource, nextKey);
      if (desc !== undefined && desc.enumerable) {
        to[nextKey] = nextSource[nextKey];
      }
    }
  }
  return to;
}

function polyfill() {
  if (!Object.assign) {
    Object.defineProperty(Object, 'assign', {
      enumerable: false,
      configurable: true,
      writable: true,
      value: assign
    });
  }
}

module.exports = {
  assign: assign,
  polyfill: polyfill
};


/***/ }),

/***/ 3243:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var isCallable = __webpack_require__(9680);

var toStr = Object.prototype.toString;
var hasOwnProperty = Object.prototype.hasOwnProperty;

var forEachArray = function forEachArray(array, iterator, receiver) {
    for (var i = 0, len = array.length; i < len; i++) {
        if (hasOwnProperty.call(array, i)) {
            if (receiver == null) {
                iterator(array[i], i, array);
            } else {
                iterator.call(receiver, array[i], i, array);
            }
        }
    }
};

var forEachString = function forEachString(string, iterator, receiver) {
    for (var i = 0, len = string.length; i < len; i++) {
        // no such thing as a sparse string.
        if (receiver == null) {
            iterator(string.charAt(i), i, string);
        } else {
            iterator.call(receiver, string.charAt(i), i, string);
        }
    }
};

var forEachObject = function forEachObject(object, iterator, receiver) {
    for (var k in object) {
        if (hasOwnProperty.call(object, k)) {
            if (receiver == null) {
                iterator(object[k], k, object);
            } else {
                iterator.call(receiver, object[k], k, object);
            }
        }
    }
};

var forEach = function forEach(list, iterator, thisArg) {
    if (!isCallable(iterator)) {
        throw new TypeError('iterator must be a function');
    }

    var receiver;
    if (arguments.length >= 3) {
        receiver = thisArg;
    }

    if (toStr.call(list) === '[object Array]') {
        forEachArray(list, iterator, receiver);
    } else if (typeof list === 'string') {
        forEachString(list, iterator, receiver);
    } else {
        forEachObject(list, iterator, receiver);
    }
};

module.exports = forEach;


/***/ }),

/***/ 7795:
/***/ ((module) => {

"use strict";


/* eslint no-invalid-this: 1 */

var ERROR_MESSAGE = 'Function.prototype.bind called on incompatible ';
var slice = Array.prototype.slice;
var toStr = Object.prototype.toString;
var funcType = '[object Function]';

module.exports = function bind(that) {
    var target = this;
    if (typeof target !== 'function' || toStr.call(target) !== funcType) {
        throw new TypeError(ERROR_MESSAGE + target);
    }
    var args = slice.call(arguments, 1);

    var bound;
    var binder = function () {
        if (this instanceof bound) {
            var result = target.apply(
                this,
                args.concat(slice.call(arguments))
            );
            if (Object(result) === result) {
                return result;
            }
            return this;
        } else {
            return target.apply(
                that,
                args.concat(slice.call(arguments))
            );
        }
    };

    var boundLength = Math.max(0, target.length - args.length);
    var boundArgs = [];
    for (var i = 0; i < boundLength; i++) {
        boundArgs.push('$' + i);
    }

    bound = Function('binder', 'return function (' + boundArgs.join(',') + '){ return binder.apply(this,arguments); }')(binder);

    if (target.prototype) {
        var Empty = function Empty() {};
        Empty.prototype = target.prototype;
        bound.prototype = new Empty();
        Empty.prototype = null;
    }

    return bound;
};


/***/ }),

/***/ 4090:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var implementation = __webpack_require__(7795);

module.exports = Function.prototype.bind || implementation;


/***/ }),

/***/ 7286:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var undefined;

var $SyntaxError = SyntaxError;
var $Function = Function;
var $TypeError = TypeError;

// eslint-disable-next-line consistent-return
var getEvalledConstructor = function (expressionSyntax) {
	try {
		return $Function('"use strict"; return (' + expressionSyntax + ').constructor;')();
	} catch (e) {}
};

var $gOPD = Object.getOwnPropertyDescriptor;
if ($gOPD) {
	try {
		$gOPD({}, '');
	} catch (e) {
		$gOPD = null; // this is IE 8, which has a broken gOPD
	}
}

var throwTypeError = function () {
	throw new $TypeError();
};
var ThrowTypeError = $gOPD
	? (function () {
		try {
			// eslint-disable-next-line no-unused-expressions, no-caller, no-restricted-properties
			arguments.callee; // IE 8 does not throw here
			return throwTypeError;
		} catch (calleeThrows) {
			try {
				// IE 8 throws on Object.getOwnPropertyDescriptor(arguments, '')
				return $gOPD(arguments, 'callee').get;
			} catch (gOPDthrows) {
				return throwTypeError;
			}
		}
	}())
	: throwTypeError;

var hasSymbols = __webpack_require__(2636)();
var hasProto = __webpack_require__(8486)();

var getProto = Object.getPrototypeOf || (
	hasProto
		? function (x) { return x.__proto__; } // eslint-disable-line no-proto
		: null
);

var needsEval = {};

var TypedArray = typeof Uint8Array === 'undefined' || !getProto ? undefined : getProto(Uint8Array);

var INTRINSICS = {
	'%AggregateError%': typeof AggregateError === 'undefined' ? undefined : AggregateError,
	'%Array%': Array,
	'%ArrayBuffer%': typeof ArrayBuffer === 'undefined' ? undefined : ArrayBuffer,
	'%ArrayIteratorPrototype%': hasSymbols && getProto ? getProto([][Symbol.iterator]()) : undefined,
	'%AsyncFromSyncIteratorPrototype%': undefined,
	'%AsyncFunction%': needsEval,
	'%AsyncGenerator%': needsEval,
	'%AsyncGeneratorFunction%': needsEval,
	'%AsyncIteratorPrototype%': needsEval,
	'%Atomics%': typeof Atomics === 'undefined' ? undefined : Atomics,
	'%BigInt%': typeof BigInt === 'undefined' ? undefined : BigInt,
	'%BigInt64Array%': typeof BigInt64Array === 'undefined' ? undefined : BigInt64Array,
	'%BigUint64Array%': typeof BigUint64Array === 'undefined' ? undefined : BigUint64Array,
	'%Boolean%': Boolean,
	'%DataView%': typeof DataView === 'undefined' ? undefined : DataView,
	'%Date%': Date,
	'%decodeURI%': decodeURI,
	'%decodeURIComponent%': decodeURIComponent,
	'%encodeURI%': encodeURI,
	'%encodeURIComponent%': encodeURIComponent,
	'%Error%': Error,
	'%eval%': eval, // eslint-disable-line no-eval
	'%EvalError%': EvalError,
	'%Float32Array%': typeof Float32Array === 'undefined' ? undefined : Float32Array,
	'%Float64Array%': typeof Float64Array === 'undefined' ? undefined : Float64Array,
	'%FinalizationRegistry%': typeof FinalizationRegistry === 'undefined' ? undefined : FinalizationRegistry,
	'%Function%': $Function,
	'%GeneratorFunction%': needsEval,
	'%Int8Array%': typeof Int8Array === 'undefined' ? undefined : Int8Array,
	'%Int16Array%': typeof Int16Array === 'undefined' ? undefined : Int16Array,
	'%Int32Array%': typeof Int32Array === 'undefined' ? undefined : Int32Array,
	'%isFinite%': isFinite,
	'%isNaN%': isNaN,
	'%IteratorPrototype%': hasSymbols && getProto ? getProto(getProto([][Symbol.iterator]())) : undefined,
	'%JSON%': typeof JSON === 'object' ? JSON : undefined,
	'%Map%': typeof Map === 'undefined' ? undefined : Map,
	'%MapIteratorPrototype%': typeof Map === 'undefined' || !hasSymbols || !getProto ? undefined : getProto(new Map()[Symbol.iterator]()),
	'%Math%': Math,
	'%Number%': Number,
	'%Object%': Object,
	'%parseFloat%': parseFloat,
	'%parseInt%': parseInt,
	'%Promise%': typeof Promise === 'undefined' ? undefined : Promise,
	'%Proxy%': typeof Proxy === 'undefined' ? undefined : Proxy,
	'%RangeError%': RangeError,
	'%ReferenceError%': ReferenceError,
	'%Reflect%': typeof Reflect === 'undefined' ? undefined : Reflect,
	'%RegExp%': RegExp,
	'%Set%': typeof Set === 'undefined' ? undefined : Set,
	'%SetIteratorPrototype%': typeof Set === 'undefined' || !hasSymbols || !getProto ? undefined : getProto(new Set()[Symbol.iterator]()),
	'%SharedArrayBuffer%': typeof SharedArrayBuffer === 'undefined' ? undefined : SharedArrayBuffer,
	'%String%': String,
	'%StringIteratorPrototype%': hasSymbols && getProto ? getProto(''[Symbol.iterator]()) : undefined,
	'%Symbol%': hasSymbols ? Symbol : undefined,
	'%SyntaxError%': $SyntaxError,
	'%ThrowTypeError%': ThrowTypeError,
	'%TypedArray%': TypedArray,
	'%TypeError%': $TypeError,
	'%Uint8Array%': typeof Uint8Array === 'undefined' ? undefined : Uint8Array,
	'%Uint8ClampedArray%': typeof Uint8ClampedArray === 'undefined' ? undefined : Uint8ClampedArray,
	'%Uint16Array%': typeof Uint16Array === 'undefined' ? undefined : Uint16Array,
	'%Uint32Array%': typeof Uint32Array === 'undefined' ? undefined : Uint32Array,
	'%URIError%': URIError,
	'%WeakMap%': typeof WeakMap === 'undefined' ? undefined : WeakMap,
	'%WeakRef%': typeof WeakRef === 'undefined' ? undefined : WeakRef,
	'%WeakSet%': typeof WeakSet === 'undefined' ? undefined : WeakSet
};

if (getProto) {
	try {
		null.error; // eslint-disable-line no-unused-expressions
	} catch (e) {
		// https://github.com/tc39/proposal-shadowrealm/pull/384#issuecomment-1364264229
		var errorProto = getProto(getProto(e));
		INTRINSICS['%Error.prototype%'] = errorProto;
	}
}

var doEval = function doEval(name) {
	var value;
	if (name === '%AsyncFunction%') {
		value = getEvalledConstructor('async function () {}');
	} else if (name === '%GeneratorFunction%') {
		value = getEvalledConstructor('function* () {}');
	} else if (name === '%AsyncGeneratorFunction%') {
		value = getEvalledConstructor('async function* () {}');
	} else if (name === '%AsyncGenerator%') {
		var fn = doEval('%AsyncGeneratorFunction%');
		if (fn) {
			value = fn.prototype;
		}
	} else if (name === '%AsyncIteratorPrototype%') {
		var gen = doEval('%AsyncGenerator%');
		if (gen && getProto) {
			value = getProto(gen.prototype);
		}
	}

	INTRINSICS[name] = value;

	return value;
};

var LEGACY_ALIASES = {
	'%ArrayBufferPrototype%': ['ArrayBuffer', 'prototype'],
	'%ArrayPrototype%': ['Array', 'prototype'],
	'%ArrayProto_entries%': ['Array', 'prototype', 'entries'],
	'%ArrayProto_forEach%': ['Array', 'prototype', 'forEach'],
	'%ArrayProto_keys%': ['Array', 'prototype', 'keys'],
	'%ArrayProto_values%': ['Array', 'prototype', 'values'],
	'%AsyncFunctionPrototype%': ['AsyncFunction', 'prototype'],
	'%AsyncGenerator%': ['AsyncGeneratorFunction', 'prototype'],
	'%AsyncGeneratorPrototype%': ['AsyncGeneratorFunction', 'prototype', 'prototype'],
	'%BooleanPrototype%': ['Boolean', 'prototype'],
	'%DataViewPrototype%': ['DataView', 'prototype'],
	'%DatePrototype%': ['Date', 'prototype'],
	'%ErrorPrototype%': ['Error', 'prototype'],
	'%EvalErrorPrototype%': ['EvalError', 'prototype'],
	'%Float32ArrayPrototype%': ['Float32Array', 'prototype'],
	'%Float64ArrayPrototype%': ['Float64Array', 'prototype'],
	'%FunctionPrototype%': ['Function', 'prototype'],
	'%Generator%': ['GeneratorFunction', 'prototype'],
	'%GeneratorPrototype%': ['GeneratorFunction', 'prototype', 'prototype'],
	'%Int8ArrayPrototype%': ['Int8Array', 'prototype'],
	'%Int16ArrayPrototype%': ['Int16Array', 'prototype'],
	'%Int32ArrayPrototype%': ['Int32Array', 'prototype'],
	'%JSONParse%': ['JSON', 'parse'],
	'%JSONStringify%': ['JSON', 'stringify'],
	'%MapPrototype%': ['Map', 'prototype'],
	'%NumberPrototype%': ['Number', 'prototype'],
	'%ObjectPrototype%': ['Object', 'prototype'],
	'%ObjProto_toString%': ['Object', 'prototype', 'toString'],
	'%ObjProto_valueOf%': ['Object', 'prototype', 'valueOf'],
	'%PromisePrototype%': ['Promise', 'prototype'],
	'%PromiseProto_then%': ['Promise', 'prototype', 'then'],
	'%Promise_all%': ['Promise', 'all'],
	'%Promise_reject%': ['Promise', 'reject'],
	'%Promise_resolve%': ['Promise', 'resolve'],
	'%RangeErrorPrototype%': ['RangeError', 'prototype'],
	'%ReferenceErrorPrototype%': ['ReferenceError', 'prototype'],
	'%RegExpPrototype%': ['RegExp', 'prototype'],
	'%SetPrototype%': ['Set', 'prototype'],
	'%SharedArrayBufferPrototype%': ['SharedArrayBuffer', 'prototype'],
	'%StringPrototype%': ['String', 'prototype'],
	'%SymbolPrototype%': ['Symbol', 'prototype'],
	'%SyntaxErrorPrototype%': ['SyntaxError', 'prototype'],
	'%TypedArrayPrototype%': ['TypedArray', 'prototype'],
	'%TypeErrorPrototype%': ['TypeError', 'prototype'],
	'%Uint8ArrayPrototype%': ['Uint8Array', 'prototype'],
	'%Uint8ClampedArrayPrototype%': ['Uint8ClampedArray', 'prototype'],
	'%Uint16ArrayPrototype%': ['Uint16Array', 'prototype'],
	'%Uint32ArrayPrototype%': ['Uint32Array', 'prototype'],
	'%URIErrorPrototype%': ['URIError', 'prototype'],
	'%WeakMapPrototype%': ['WeakMap', 'prototype'],
	'%WeakSetPrototype%': ['WeakSet', 'prototype']
};

var bind = __webpack_require__(4090);
var hasOwn = __webpack_require__(3198);
var $concat = bind.call(Function.call, Array.prototype.concat);
var $spliceApply = bind.call(Function.apply, Array.prototype.splice);
var $replace = bind.call(Function.call, String.prototype.replace);
var $strSlice = bind.call(Function.call, String.prototype.slice);
var $exec = bind.call(Function.call, RegExp.prototype.exec);

/* adapted from https://github.com/lodash/lodash/blob/4.17.15/dist/lodash.js#L6735-L6744 */
var rePropName = /[^%.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|%$))/g;
var reEscapeChar = /\\(\\)?/g; /** Used to match backslashes in property paths. */
var stringToPath = function stringToPath(string) {
	var first = $strSlice(string, 0, 1);
	var last = $strSlice(string, -1);
	if (first === '%' && last !== '%') {
		throw new $SyntaxError('invalid intrinsic syntax, expected closing `%`');
	} else if (last === '%' && first !== '%') {
		throw new $SyntaxError('invalid intrinsic syntax, expected opening `%`');
	}
	var result = [];
	$replace(string, rePropName, function (match, number, quote, subString) {
		result[result.length] = quote ? $replace(subString, reEscapeChar, '$1') : number || match;
	});
	return result;
};
/* end adaptation */

var getBaseIntrinsic = function getBaseIntrinsic(name, allowMissing) {
	var intrinsicName = name;
	var alias;
	if (hasOwn(LEGACY_ALIASES, intrinsicName)) {
		alias = LEGACY_ALIASES[intrinsicName];
		intrinsicName = '%' + alias[0] + '%';
	}

	if (hasOwn(INTRINSICS, intrinsicName)) {
		var value = INTRINSICS[intrinsicName];
		if (value === needsEval) {
			value = doEval(intrinsicName);
		}
		if (typeof value === 'undefined' && !allowMissing) {
			throw new $TypeError('intrinsic ' + name + ' exists, but is not available. Please file an issue!');
		}

		return {
			alias: alias,
			name: intrinsicName,
			value: value
		};
	}

	throw new $SyntaxError('intrinsic ' + name + ' does not exist!');
};

module.exports = function GetIntrinsic(name, allowMissing) {
	if (typeof name !== 'string' || name.length === 0) {
		throw new $TypeError('intrinsic name must be a non-empty string');
	}
	if (arguments.length > 1 && typeof allowMissing !== 'boolean') {
		throw new $TypeError('"allowMissing" argument must be a boolean');
	}

	if ($exec(/^%?[^%]*%?$/, name) === null) {
		throw new $SyntaxError('`%` may not be present anywhere but at the beginning and end of the intrinsic name');
	}
	var parts = stringToPath(name);
	var intrinsicBaseName = parts.length > 0 ? parts[0] : '';

	var intrinsic = getBaseIntrinsic('%' + intrinsicBaseName + '%', allowMissing);
	var intrinsicRealName = intrinsic.name;
	var value = intrinsic.value;
	var skipFurtherCaching = false;

	var alias = intrinsic.alias;
	if (alias) {
		intrinsicBaseName = alias[0];
		$spliceApply(parts, $concat([0, 1], alias));
	}

	for (var i = 1, isOwn = true; i < parts.length; i += 1) {
		var part = parts[i];
		var first = $strSlice(part, 0, 1);
		var last = $strSlice(part, -1);
		if (
			(
				(first === '"' || first === "'" || first === '`')
				|| (last === '"' || last === "'" || last === '`')
			)
			&& first !== last
		) {
			throw new $SyntaxError('property names with quotes must have matching quotes');
		}
		if (part === 'constructor' || !isOwn) {
			skipFurtherCaching = true;
		}

		intrinsicBaseName += '.' + part;
		intrinsicRealName = '%' + intrinsicBaseName + '%';

		if (hasOwn(INTRINSICS, intrinsicRealName)) {
			value = INTRINSICS[intrinsicRealName];
		} else if (value != null) {
			if (!(part in value)) {
				if (!allowMissing) {
					throw new $TypeError('base intrinsic for ' + name + ' exists, but the property is not available.');
				}
				return void undefined;
			}
			if ($gOPD && (i + 1) >= parts.length) {
				var desc = $gOPD(value, part);
				isOwn = !!desc;

				// By convention, when a data property is converted to an accessor
				// property to emulate a data property that does not suffer from
				// the override mistake, that accessor's getter is marked with
				// an `originalValue` property. Here, when we detect this, we
				// uphold the illusion by pretending to see that original data
				// property, i.e., returning the value rather than the getter
				// itself.
				if (isOwn && 'get' in desc && !('originalValue' in desc.get)) {
					value = desc.get;
				} else {
					value = value[part];
				}
			} else {
				isOwn = hasOwn(value, part);
				value = value[part];
			}

			if (isOwn && !skipFurtherCaching) {
				INTRINSICS[intrinsicRealName] = value;
			}
		}
	}
	return value;
};


/***/ }),

/***/ 326:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var GetIntrinsic = __webpack_require__(7286);

var $gOPD = GetIntrinsic('%Object.getOwnPropertyDescriptor%', true);

if ($gOPD) {
	try {
		$gOPD([], 'length');
	} catch (e) {
		// IE 8 has a broken gOPD
		$gOPD = null;
	}
}

module.exports = $gOPD;


/***/ }),

/***/ 1181:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var GetIntrinsic = __webpack_require__(7286);

var $defineProperty = GetIntrinsic('%Object.defineProperty%', true);

var hasPropertyDescriptors = function hasPropertyDescriptors() {
	if ($defineProperty) {
		try {
			$defineProperty({}, 'a', { value: 1 });
			return true;
		} catch (e) {
			// IE 8 has a broken defineProperty
			return false;
		}
	}
	return false;
};

hasPropertyDescriptors.hasArrayLengthDefineBug = function hasArrayLengthDefineBug() {
	// node v0.6 has a bug where array lengths can be Set but not Defined
	if (!hasPropertyDescriptors()) {
		return null;
	}
	try {
		return $defineProperty([], 'length', { value: 1 }).length !== 1;
	} catch (e) {
		// In Firefox 4-22, defining length on an array throws an exception.
		return true;
	}
};

module.exports = hasPropertyDescriptors;


/***/ }),

/***/ 8486:
/***/ ((module) => {

"use strict";


var test = {
	foo: {}
};

var $Object = Object;

module.exports = function hasProto() {
	return { __proto__: test }.foo === test.foo && !({ __proto__: null } instanceof $Object);
};


/***/ }),

/***/ 2636:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var origSymbol = typeof Symbol !== 'undefined' && Symbol;
var hasSymbolSham = __webpack_require__(6679);

module.exports = function hasNativeSymbols() {
	if (typeof origSymbol !== 'function') { return false; }
	if (typeof Symbol !== 'function') { return false; }
	if (typeof origSymbol('foo') !== 'symbol') { return false; }
	if (typeof Symbol('bar') !== 'symbol') { return false; }

	return hasSymbolSham();
};


/***/ }),

/***/ 6679:
/***/ ((module) => {

"use strict";


/* eslint complexity: [2, 18], max-statements: [2, 33] */
module.exports = function hasSymbols() {
	if (typeof Symbol !== 'function' || typeof Object.getOwnPropertySymbols !== 'function') { return false; }
	if (typeof Symbol.iterator === 'symbol') { return true; }

	var obj = {};
	var sym = Symbol('test');
	var symObj = Object(sym);
	if (typeof sym === 'string') { return false; }

	if (Object.prototype.toString.call(sym) !== '[object Symbol]') { return false; }
	if (Object.prototype.toString.call(symObj) !== '[object Symbol]') { return false; }

	// temp disabled per https://github.com/ljharb/object.assign/issues/17
	// if (sym instanceof Symbol) { return false; }
	// temp disabled per https://github.com/WebReflection/get-own-property-symbols/issues/4
	// if (!(symObj instanceof Symbol)) { return false; }

	// if (typeof Symbol.prototype.toString !== 'function') { return false; }
	// if (String(sym) !== Symbol.prototype.toString.call(sym)) { return false; }

	var symVal = 42;
	obj[sym] = symVal;
	for (sym in obj) { return false; } // eslint-disable-line no-restricted-syntax, no-unreachable-loop
	if (typeof Object.keys === 'function' && Object.keys(obj).length !== 0) { return false; }

	if (typeof Object.getOwnPropertyNames === 'function' && Object.getOwnPropertyNames(obj).length !== 0) { return false; }

	var syms = Object.getOwnPropertySymbols(obj);
	if (syms.length !== 1 || syms[0] !== sym) { return false; }

	if (!Object.prototype.propertyIsEnumerable.call(obj, sym)) { return false; }

	if (typeof Object.getOwnPropertyDescriptor === 'function') {
		var descriptor = Object.getOwnPropertyDescriptor(obj, sym);
		if (descriptor.value !== symVal || descriptor.enumerable !== true) { return false; }
	}

	return true;
};


/***/ }),

/***/ 7226:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var hasSymbols = __webpack_require__(6679);

module.exports = function hasToStringTagShams() {
	return hasSymbols() && !!Symbol.toStringTag;
};


/***/ }),

/***/ 3198:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var bind = __webpack_require__(4090);

module.exports = bind.call(Function.call, Object.prototype.hasOwnProperty);


/***/ }),

/***/ 1285:
/***/ ((module) => {

if (typeof Object.create === 'function') {
  // implementation from standard node.js 'util' module
  module.exports = function inherits(ctor, superCtor) {
    if (superCtor) {
      ctor.super_ = superCtor
      ctor.prototype = Object.create(superCtor.prototype, {
        constructor: {
          value: ctor,
          enumerable: false,
          writable: true,
          configurable: true
        }
      })
    }
  };
} else {
  // old school shim for old browsers
  module.exports = function inherits(ctor, superCtor) {
    if (superCtor) {
      ctor.super_ = superCtor
      var TempCtor = function () {}
      TempCtor.prototype = superCtor.prototype
      ctor.prototype = new TempCtor()
      ctor.prototype.constructor = ctor
    }
  }
}


/***/ }),

/***/ 2635:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var hasToStringTag = __webpack_require__(7226)();
var callBound = __webpack_require__(2680);

var $toString = callBound('Object.prototype.toString');

var isStandardArguments = function isArguments(value) {
	if (hasToStringTag && value && typeof value === 'object' && Symbol.toStringTag in value) {
		return false;
	}
	return $toString(value) === '[object Arguments]';
};

var isLegacyArguments = function isArguments(value) {
	if (isStandardArguments(value)) {
		return true;
	}
	return value !== null &&
		typeof value === 'object' &&
		typeof value.length === 'number' &&
		value.length >= 0 &&
		$toString(value) !== '[object Array]' &&
		$toString(value.callee) === '[object Function]';
};

var supportsStandardArguments = (function () {
	return isStandardArguments(arguments);
}());

isStandardArguments.isLegacyArguments = isLegacyArguments; // for tests

module.exports = supportsStandardArguments ? isStandardArguments : isLegacyArguments;


/***/ }),

/***/ 9680:
/***/ ((module) => {

"use strict";


var fnToStr = Function.prototype.toString;
var reflectApply = typeof Reflect === 'object' && Reflect !== null && Reflect.apply;
var badArrayLike;
var isCallableMarker;
if (typeof reflectApply === 'function' && typeof Object.defineProperty === 'function') {
	try {
		badArrayLike = Object.defineProperty({}, 'length', {
			get: function () {
				throw isCallableMarker;
			}
		});
		isCallableMarker = {};
		// eslint-disable-next-line no-throw-literal
		reflectApply(function () { throw 42; }, null, badArrayLike);
	} catch (_) {
		if (_ !== isCallableMarker) {
			reflectApply = null;
		}
	}
} else {
	reflectApply = null;
}

var constructorRegex = /^\s*class\b/;
var isES6ClassFn = function isES6ClassFunction(value) {
	try {
		var fnStr = fnToStr.call(value);
		return constructorRegex.test(fnStr);
	} catch (e) {
		return false; // not a function
	}
};

var tryFunctionObject = function tryFunctionToStr(value) {
	try {
		if (isES6ClassFn(value)) { return false; }
		fnToStr.call(value);
		return true;
	} catch (e) {
		return false;
	}
};
var toStr = Object.prototype.toString;
var objectClass = '[object Object]';
var fnClass = '[object Function]';
var genClass = '[object GeneratorFunction]';
var ddaClass = '[object HTMLAllCollection]'; // IE 11
var ddaClass2 = '[object HTML document.all class]';
var ddaClass3 = '[object HTMLCollection]'; // IE 9-10
var hasToStringTag = typeof Symbol === 'function' && !!Symbol.toStringTag; // better: use `has-tostringtag`

var isIE68 = !(0 in [,]); // eslint-disable-line no-sparse-arrays, comma-spacing

var isDDA = function isDocumentDotAll() { return false; };
if (typeof document === 'object') {
	// Firefox 3 canonicalizes DDA to undefined when it's not accessed directly
	var all = document.all;
	if (toStr.call(all) === toStr.call(document.all)) {
		isDDA = function isDocumentDotAll(value) {
			/* globals document: false */
			// in IE 6-8, typeof document.all is "object" and it's truthy
			if ((isIE68 || !value) && (typeof value === 'undefined' || typeof value === 'object')) {
				try {
					var str = toStr.call(value);
					return (
						str === ddaClass
						|| str === ddaClass2
						|| str === ddaClass3 // opera 12.16
						|| str === objectClass // IE 6-8
					) && value('') == null; // eslint-disable-line eqeqeq
				} catch (e) { /**/ }
			}
			return false;
		};
	}
}

module.exports = reflectApply
	? function isCallable(value) {
		if (isDDA(value)) { return true; }
		if (!value) { return false; }
		if (typeof value !== 'function' && typeof value !== 'object') { return false; }
		try {
			reflectApply(value, null, badArrayLike);
		} catch (e) {
			if (e !== isCallableMarker) { return false; }
		}
		return !isES6ClassFn(value) && tryFunctionObject(value);
	}
	: function isCallable(value) {
		if (isDDA(value)) { return true; }
		if (!value) { return false; }
		if (typeof value !== 'function' && typeof value !== 'object') { return false; }
		if (hasToStringTag) { return tryFunctionObject(value); }
		if (isES6ClassFn(value)) { return false; }
		var strClass = toStr.call(value);
		if (strClass !== fnClass && strClass !== genClass && !(/^\[object HTML/).test(strClass)) { return false; }
		return tryFunctionObject(value);
	};


/***/ }),

/***/ 3138:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var toStr = Object.prototype.toString;
var fnToStr = Function.prototype.toString;
var isFnRegex = /^\s*(?:function)?\*/;
var hasToStringTag = __webpack_require__(7226)();
var getProto = Object.getPrototypeOf;
var getGeneratorFunc = function () { // eslint-disable-line consistent-return
	if (!hasToStringTag) {
		return false;
	}
	try {
		return Function('return function*() {}')();
	} catch (e) {
	}
};
var GeneratorFunction;

module.exports = function isGeneratorFunction(fn) {
	if (typeof fn !== 'function') {
		return false;
	}
	if (isFnRegex.test(fnToStr.call(fn))) {
		return true;
	}
	if (!hasToStringTag) {
		var str = toStr.call(fn);
		return str === '[object GeneratorFunction]';
	}
	if (!getProto) {
		return false;
	}
	if (typeof GeneratorFunction === 'undefined') {
		var generatorFunc = getGeneratorFunc();
		GeneratorFunction = generatorFunc ? getProto(generatorFunc) : false;
	}
	return getProto(fn) === GeneratorFunction;
};


/***/ }),

/***/ 7053:
/***/ ((module) => {

"use strict";


/* http://www.ecma-international.org/ecma-262/6.0/#sec-number.isnan */

module.exports = function isNaN(value) {
	return value !== value;
};


/***/ }),

/***/ 4782:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var callBind = __webpack_require__(9429);
var define = __webpack_require__(4926);

var implementation = __webpack_require__(7053);
var getPolyfill = __webpack_require__(755);
var shim = __webpack_require__(5346);

var polyfill = callBind(getPolyfill(), Number);

/* http://www.ecma-international.org/ecma-262/6.0/#sec-number.isnan */

define(polyfill, {
	getPolyfill: getPolyfill,
	implementation: implementation,
	shim: shim
});

module.exports = polyfill;


/***/ }),

/***/ 755:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var implementation = __webpack_require__(7053);

module.exports = function getPolyfill() {
	if (Number.isNaN && Number.isNaN(NaN) && !Number.isNaN('a')) {
		return Number.isNaN;
	}
	return implementation;
};


/***/ }),

/***/ 5346:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var define = __webpack_require__(4926);
var getPolyfill = __webpack_require__(755);

/* http://www.ecma-international.org/ecma-262/6.0/#sec-number.isnan */

module.exports = function shimNumberIsNaN() {
	var polyfill = getPolyfill();
	define(Number, { isNaN: polyfill }, {
		isNaN: function testIsNaN() {
			return Number.isNaN !== polyfill;
		}
	});
	return polyfill;
};


/***/ }),

/***/ 198:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var whichTypedArray = __webpack_require__(2094);

module.exports = function isTypedArray(value) {
	return !!whichTypedArray(value);
};


/***/ }),

/***/ 8169:
/***/ ((module) => {

"use strict";


var numberIsNaN = function (value) {
	return value !== value;
};

module.exports = function is(a, b) {
	if (a === 0 && b === 0) {
		return 1 / a === 1 / b;
	}
	if (a === b) {
		return true;
	}
	if (numberIsNaN(a) && numberIsNaN(b)) {
		return true;
	}
	return false;
};



/***/ }),

/***/ 4679:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var define = __webpack_require__(4926);
var callBind = __webpack_require__(9429);

var implementation = __webpack_require__(8169);
var getPolyfill = __webpack_require__(8070);
var shim = __webpack_require__(191);

var polyfill = callBind(getPolyfill(), Object);

define(polyfill, {
	getPolyfill: getPolyfill,
	implementation: implementation,
	shim: shim
});

module.exports = polyfill;


/***/ }),

/***/ 8070:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var implementation = __webpack_require__(8169);

module.exports = function getPolyfill() {
	return typeof Object.is === 'function' ? Object.is : implementation;
};


/***/ }),

/***/ 191:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var getPolyfill = __webpack_require__(8070);
var define = __webpack_require__(4926);

module.exports = function shimObjectIs() {
	var polyfill = getPolyfill();
	define(Object, { is: polyfill }, {
		is: function testObjectIs() {
			return Object.is !== polyfill;
		}
	});
	return polyfill;
};


/***/ }),

/***/ 5691:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var keysShim;
if (!Object.keys) {
	// modified from https://github.com/es-shims/es5-shim
	var has = Object.prototype.hasOwnProperty;
	var toStr = Object.prototype.toString;
	var isArgs = __webpack_require__(801); // eslint-disable-line global-require
	var isEnumerable = Object.prototype.propertyIsEnumerable;
	var hasDontEnumBug = !isEnumerable.call({ toString: null }, 'toString');
	var hasProtoEnumBug = isEnumerable.call(function () {}, 'prototype');
	var dontEnums = [
		'toString',
		'toLocaleString',
		'valueOf',
		'hasOwnProperty',
		'isPrototypeOf',
		'propertyIsEnumerable',
		'constructor'
	];
	var equalsConstructorPrototype = function (o) {
		var ctor = o.constructor;
		return ctor && ctor.prototype === o;
	};
	var excludedKeys = {
		$applicationCache: true,
		$console: true,
		$external: true,
		$frame: true,
		$frameElement: true,
		$frames: true,
		$innerHeight: true,
		$innerWidth: true,
		$onmozfullscreenchange: true,
		$onmozfullscreenerror: true,
		$outerHeight: true,
		$outerWidth: true,
		$pageXOffset: true,
		$pageYOffset: true,
		$parent: true,
		$scrollLeft: true,
		$scrollTop: true,
		$scrollX: true,
		$scrollY: true,
		$self: true,
		$webkitIndexedDB: true,
		$webkitStorageInfo: true,
		$window: true
	};
	var hasAutomationEqualityBug = (function () {
		/* global window */
		if (typeof window === 'undefined') { return false; }
		for (var k in window) {
			try {
				if (!excludedKeys['$' + k] && has.call(window, k) && window[k] !== null && typeof window[k] === 'object') {
					try {
						equalsConstructorPrototype(window[k]);
					} catch (e) {
						return true;
					}
				}
			} catch (e) {
				return true;
			}
		}
		return false;
	}());
	var equalsConstructorPrototypeIfNotBuggy = function (o) {
		/* global window */
		if (typeof window === 'undefined' || !hasAutomationEqualityBug) {
			return equalsConstructorPrototype(o);
		}
		try {
			return equalsConstructorPrototype(o);
		} catch (e) {
			return false;
		}
	};

	keysShim = function keys(object) {
		var isObject = object !== null && typeof object === 'object';
		var isFunction = toStr.call(object) === '[object Function]';
		var isArguments = isArgs(object);
		var isString = isObject && toStr.call(object) === '[object String]';
		var theKeys = [];

		if (!isObject && !isFunction && !isArguments) {
			throw new TypeError('Object.keys called on a non-object');
		}

		var skipProto = hasProtoEnumBug && isFunction;
		if (isString && object.length > 0 && !has.call(object, 0)) {
			for (var i = 0; i < object.length; ++i) {
				theKeys.push(String(i));
			}
		}

		if (isArguments && object.length > 0) {
			for (var j = 0; j < object.length; ++j) {
				theKeys.push(String(j));
			}
		} else {
			for (var name in object) {
				if (!(skipProto && name === 'prototype') && has.call(object, name)) {
					theKeys.push(String(name));
				}
			}
		}

		if (hasDontEnumBug) {
			var skipConstructor = equalsConstructorPrototypeIfNotBuggy(object);

			for (var k = 0; k < dontEnums.length; ++k) {
				if (!(skipConstructor && dontEnums[k] === 'constructor') && has.call(object, dontEnums[k])) {
					theKeys.push(dontEnums[k]);
				}
			}
		}
		return theKeys;
	};
}
module.exports = keysShim;


/***/ }),

/***/ 3464:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var slice = Array.prototype.slice;
var isArgs = __webpack_require__(801);

var origKeys = Object.keys;
var keysShim = origKeys ? function keys(o) { return origKeys(o); } : __webpack_require__(5691);

var originalKeys = Object.keys;

keysShim.shim = function shimObjectKeys() {
	if (Object.keys) {
		var keysWorksWithArguments = (function () {
			// Safari 5.0 bug
			var args = Object.keys(arguments);
			return args && args.length === arguments.length;
		}(1, 2));
		if (!keysWorksWithArguments) {
			Object.keys = function keys(object) { // eslint-disable-line func-name-matching
				if (isArgs(object)) {
					return originalKeys(slice.call(object));
				}
				return originalKeys(object);
			};
		}
	} else {
		Object.keys = keysShim;
	}
	return Object.keys || keysShim;
};

module.exports = keysShim;


/***/ }),

/***/ 801:
/***/ ((module) => {

"use strict";


var toStr = Object.prototype.toString;

module.exports = function isArguments(value) {
	var str = toStr.call(value);
	var isArgs = str === '[object Arguments]';
	if (!isArgs) {
		isArgs = str !== '[object Array]' &&
			value !== null &&
			typeof value === 'object' &&
			typeof value.length === 'number' &&
			value.length >= 0 &&
			toStr.call(value.callee) === '[object Function]';
	}
	return isArgs;
};


/***/ }),

/***/ 4406:
/***/ ((module) => {

// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) { return [] }

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };


/***/ }),

/***/ 82:
/***/ ((module) => {

module.exports = function isBuffer(arg) {
  return arg && typeof arg === 'object'
    && typeof arg.copy === 'function'
    && typeof arg.fill === 'function'
    && typeof arg.readUInt8 === 'function';
}

/***/ }),

/***/ 4895:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
// Currently in sync with Node.js lib/internal/util/types.js
// https://github.com/nodejs/node/commit/112cc7c27551254aa2b17098fb774867f05ed0d9



var isArgumentsObject = __webpack_require__(2635);
var isGeneratorFunction = __webpack_require__(3138);
var whichTypedArray = __webpack_require__(2094);
var isTypedArray = __webpack_require__(198);

function uncurryThis(f) {
  return f.call.bind(f);
}

var BigIntSupported = typeof BigInt !== 'undefined';
var SymbolSupported = typeof Symbol !== 'undefined';

var ObjectToString = uncurryThis(Object.prototype.toString);

var numberValue = uncurryThis(Number.prototype.valueOf);
var stringValue = uncurryThis(String.prototype.valueOf);
var booleanValue = uncurryThis(Boolean.prototype.valueOf);

if (BigIntSupported) {
  var bigIntValue = uncurryThis(BigInt.prototype.valueOf);
}

if (SymbolSupported) {
  var symbolValue = uncurryThis(Symbol.prototype.valueOf);
}

function checkBoxedPrimitive(value, prototypeValueOf) {
  if (typeof value !== 'object') {
    return false;
  }
  try {
    prototypeValueOf(value);
    return true;
  } catch(e) {
    return false;
  }
}

exports.isArgumentsObject = isArgumentsObject;
exports.isGeneratorFunction = isGeneratorFunction;
exports.isTypedArray = isTypedArray;

// Taken from here and modified for better browser support
// https://github.com/sindresorhus/p-is-promise/blob/cda35a513bda03f977ad5cde3a079d237e82d7ef/index.js
function isPromise(input) {
	return (
		(
			typeof Promise !== 'undefined' &&
			input instanceof Promise
		) ||
		(
			input !== null &&
			typeof input === 'object' &&
			typeof input.then === 'function' &&
			typeof input.catch === 'function'
		)
	);
}
exports.isPromise = isPromise;

function isArrayBufferView(value) {
  if (typeof ArrayBuffer !== 'undefined' && ArrayBuffer.isView) {
    return ArrayBuffer.isView(value);
  }

  return (
    isTypedArray(value) ||
    isDataView(value)
  );
}
exports.isArrayBufferView = isArrayBufferView;


function isUint8Array(value) {
  return whichTypedArray(value) === 'Uint8Array';
}
exports.isUint8Array = isUint8Array;

function isUint8ClampedArray(value) {
  return whichTypedArray(value) === 'Uint8ClampedArray';
}
exports.isUint8ClampedArray = isUint8ClampedArray;

function isUint16Array(value) {
  return whichTypedArray(value) === 'Uint16Array';
}
exports.isUint16Array = isUint16Array;

function isUint32Array(value) {
  return whichTypedArray(value) === 'Uint32Array';
}
exports.isUint32Array = isUint32Array;

function isInt8Array(value) {
  return whichTypedArray(value) === 'Int8Array';
}
exports.isInt8Array = isInt8Array;

function isInt16Array(value) {
  return whichTypedArray(value) === 'Int16Array';
}
exports.isInt16Array = isInt16Array;

function isInt32Array(value) {
  return whichTypedArray(value) === 'Int32Array';
}
exports.isInt32Array = isInt32Array;

function isFloat32Array(value) {
  return whichTypedArray(value) === 'Float32Array';
}
exports.isFloat32Array = isFloat32Array;

function isFloat64Array(value) {
  return whichTypedArray(value) === 'Float64Array';
}
exports.isFloat64Array = isFloat64Array;

function isBigInt64Array(value) {
  return whichTypedArray(value) === 'BigInt64Array';
}
exports.isBigInt64Array = isBigInt64Array;

function isBigUint64Array(value) {
  return whichTypedArray(value) === 'BigUint64Array';
}
exports.isBigUint64Array = isBigUint64Array;

function isMapToString(value) {
  return ObjectToString(value) === '[object Map]';
}
isMapToString.working = (
  typeof Map !== 'undefined' &&
  isMapToString(new Map())
);

function isMap(value) {
  if (typeof Map === 'undefined') {
    return false;
  }

  return isMapToString.working
    ? isMapToString(value)
    : value instanceof Map;
}
exports.isMap = isMap;

function isSetToString(value) {
  return ObjectToString(value) === '[object Set]';
}
isSetToString.working = (
  typeof Set !== 'undefined' &&
  isSetToString(new Set())
);
function isSet(value) {
  if (typeof Set === 'undefined') {
    return false;
  }

  return isSetToString.working
    ? isSetToString(value)
    : value instanceof Set;
}
exports.isSet = isSet;

function isWeakMapToString(value) {
  return ObjectToString(value) === '[object WeakMap]';
}
isWeakMapToString.working = (
  typeof WeakMap !== 'undefined' &&
  isWeakMapToString(new WeakMap())
);
function isWeakMap(value) {
  if (typeof WeakMap === 'undefined') {
    return false;
  }

  return isWeakMapToString.working
    ? isWeakMapToString(value)
    : value instanceof WeakMap;
}
exports.isWeakMap = isWeakMap;

function isWeakSetToString(value) {
  return ObjectToString(value) === '[object WeakSet]';
}
isWeakSetToString.working = (
  typeof WeakSet !== 'undefined' &&
  isWeakSetToString(new WeakSet())
);
function isWeakSet(value) {
  return isWeakSetToString(value);
}
exports.isWeakSet = isWeakSet;

function isArrayBufferToString(value) {
  return ObjectToString(value) === '[object ArrayBuffer]';
}
isArrayBufferToString.working = (
  typeof ArrayBuffer !== 'undefined' &&
  isArrayBufferToString(new ArrayBuffer())
);
function isArrayBuffer(value) {
  if (typeof ArrayBuffer === 'undefined') {
    return false;
  }

  return isArrayBufferToString.working
    ? isArrayBufferToString(value)
    : value instanceof ArrayBuffer;
}
exports.isArrayBuffer = isArrayBuffer;

function isDataViewToString(value) {
  return ObjectToString(value) === '[object DataView]';
}
isDataViewToString.working = (
  typeof ArrayBuffer !== 'undefined' &&
  typeof DataView !== 'undefined' &&
  isDataViewToString(new DataView(new ArrayBuffer(1), 0, 1))
);
function isDataView(value) {
  if (typeof DataView === 'undefined') {
    return false;
  }

  return isDataViewToString.working
    ? isDataViewToString(value)
    : value instanceof DataView;
}
exports.isDataView = isDataView;

// Store a copy of SharedArrayBuffer in case it's deleted elsewhere
var SharedArrayBufferCopy = typeof SharedArrayBuffer !== 'undefined' ? SharedArrayBuffer : undefined;
function isSharedArrayBufferToString(value) {
  return ObjectToString(value) === '[object SharedArrayBuffer]';
}
function isSharedArrayBuffer(value) {
  if (typeof SharedArrayBufferCopy === 'undefined') {
    return false;
  }

  if (typeof isSharedArrayBufferToString.working === 'undefined') {
    isSharedArrayBufferToString.working = isSharedArrayBufferToString(new SharedArrayBufferCopy());
  }

  return isSharedArrayBufferToString.working
    ? isSharedArrayBufferToString(value)
    : value instanceof SharedArrayBufferCopy;
}
exports.isSharedArrayBuffer = isSharedArrayBuffer;

function isAsyncFunction(value) {
  return ObjectToString(value) === '[object AsyncFunction]';
}
exports.isAsyncFunction = isAsyncFunction;

function isMapIterator(value) {
  return ObjectToString(value) === '[object Map Iterator]';
}
exports.isMapIterator = isMapIterator;

function isSetIterator(value) {
  return ObjectToString(value) === '[object Set Iterator]';
}
exports.isSetIterator = isSetIterator;

function isGeneratorObject(value) {
  return ObjectToString(value) === '[object Generator]';
}
exports.isGeneratorObject = isGeneratorObject;

function isWebAssemblyCompiledModule(value) {
  return ObjectToString(value) === '[object WebAssembly.Module]';
}
exports.isWebAssemblyCompiledModule = isWebAssemblyCompiledModule;

function isNumberObject(value) {
  return checkBoxedPrimitive(value, numberValue);
}
exports.isNumberObject = isNumberObject;

function isStringObject(value) {
  return checkBoxedPrimitive(value, stringValue);
}
exports.isStringObject = isStringObject;

function isBooleanObject(value) {
  return checkBoxedPrimitive(value, booleanValue);
}
exports.isBooleanObject = isBooleanObject;

function isBigIntObject(value) {
  return BigIntSupported && checkBoxedPrimitive(value, bigIntValue);
}
exports.isBigIntObject = isBigIntObject;

function isSymbolObject(value) {
  return SymbolSupported && checkBoxedPrimitive(value, symbolValue);
}
exports.isSymbolObject = isSymbolObject;

function isBoxedPrimitive(value) {
  return (
    isNumberObject(value) ||
    isStringObject(value) ||
    isBooleanObject(value) ||
    isBigIntObject(value) ||
    isSymbolObject(value)
  );
}
exports.isBoxedPrimitive = isBoxedPrimitive;

function isAnyArrayBuffer(value) {
  return typeof Uint8Array !== 'undefined' && (
    isArrayBuffer(value) ||
    isSharedArrayBuffer(value)
  );
}
exports.isAnyArrayBuffer = isAnyArrayBuffer;

['isProxy', 'isExternal', 'isModuleNamespaceObject'].forEach(function(method) {
  Object.defineProperty(exports, method, {
    enumerable: false,
    value: function() {
      throw new Error(method + ' is not supported in userland');
    }
  });
});


/***/ }),

/***/ 3335:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

/* provided dependency */ var process = __webpack_require__(4406);
/* provided dependency */ var console = __webpack_require__(3716);
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

var getOwnPropertyDescriptors = Object.getOwnPropertyDescriptors ||
  function getOwnPropertyDescriptors(obj) {
    var keys = Object.keys(obj);
    var descriptors = {};
    for (var i = 0; i < keys.length; i++) {
      descriptors[keys[i]] = Object.getOwnPropertyDescriptor(obj, keys[i]);
    }
    return descriptors;
  };

var formatRegExp = /%[sdj%]/g;
exports.format = function(f) {
  if (!isString(f)) {
    var objects = [];
    for (var i = 0; i < arguments.length; i++) {
      objects.push(inspect(arguments[i]));
    }
    return objects.join(' ');
  }

  var i = 1;
  var args = arguments;
  var len = args.length;
  var str = String(f).replace(formatRegExp, function(x) {
    if (x === '%%') return '%';
    if (i >= len) return x;
    switch (x) {
      case '%s': return String(args[i++]);
      case '%d': return Number(args[i++]);
      case '%j':
        try {
          return JSON.stringify(args[i++]);
        } catch (_) {
          return '[Circular]';
        }
      default:
        return x;
    }
  });
  for (var x = args[i]; i < len; x = args[++i]) {
    if (isNull(x) || !isObject(x)) {
      str += ' ' + x;
    } else {
      str += ' ' + inspect(x);
    }
  }
  return str;
};


// Mark that a method should not be used.
// Returns a modified function which warns once by default.
// If --no-deprecation is set, then it is a no-op.
exports.deprecate = function(fn, msg) {
  if (typeof process !== 'undefined' && process.noDeprecation === true) {
    return fn;
  }

  // Allow for deprecating things in the process of starting up.
  if (typeof process === 'undefined') {
    return function() {
      return exports.deprecate(fn, msg).apply(this, arguments);
    };
  }

  var warned = false;
  function deprecated() {
    if (!warned) {
      if (process.throwDeprecation) {
        throw new Error(msg);
      } else if (process.traceDeprecation) {
        console.trace(msg);
      } else {
        console.error(msg);
      }
      warned = true;
    }
    return fn.apply(this, arguments);
  }

  return deprecated;
};


var debugs = {};
var debugEnvRegex = /^$/;

if (process.env.NODE_DEBUG) {
  var debugEnv = process.env.NODE_DEBUG;
  debugEnv = debugEnv.replace(/[|\\{}()[\]^$+?.]/g, '\\$&')
    .replace(/\*/g, '.*')
    .replace(/,/g, '$|^')
    .toUpperCase();
  debugEnvRegex = new RegExp('^' + debugEnv + '$', 'i');
}
exports.debuglog = function(set) {
  set = set.toUpperCase();
  if (!debugs[set]) {
    if (debugEnvRegex.test(set)) {
      var pid = process.pid;
      debugs[set] = function() {
        var msg = exports.format.apply(exports, arguments);
        console.error('%s %d: %s', set, pid, msg);
      };
    } else {
      debugs[set] = function() {};
    }
  }
  return debugs[set];
};


/**
 * Echos the value of a value. Trys to print the value out
 * in the best way possible given the different types.
 *
 * @param {Object} obj The object to print out.
 * @param {Object} opts Optional options object that alters the output.
 */
/* legacy: obj, showHidden, depth, colors*/
function inspect(obj, opts) {
  // default options
  var ctx = {
    seen: [],
    stylize: stylizeNoColor
  };
  // legacy...
  if (arguments.length >= 3) ctx.depth = arguments[2];
  if (arguments.length >= 4) ctx.colors = arguments[3];
  if (isBoolean(opts)) {
    // legacy...
    ctx.showHidden = opts;
  } else if (opts) {
    // got an "options" object
    exports._extend(ctx, opts);
  }
  // set default options
  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;
  if (isUndefined(ctx.depth)) ctx.depth = 2;
  if (isUndefined(ctx.colors)) ctx.colors = false;
  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;
  if (ctx.colors) ctx.stylize = stylizeWithColor;
  return formatValue(ctx, obj, ctx.depth);
}
exports.inspect = inspect;


// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics
inspect.colors = {
  'bold' : [1, 22],
  'italic' : [3, 23],
  'underline' : [4, 24],
  'inverse' : [7, 27],
  'white' : [37, 39],
  'grey' : [90, 39],
  'black' : [30, 39],
  'blue' : [34, 39],
  'cyan' : [36, 39],
  'green' : [32, 39],
  'magenta' : [35, 39],
  'red' : [31, 39],
  'yellow' : [33, 39]
};

// Don't use 'blue' not visible on cmd.exe
inspect.styles = {
  'special': 'cyan',
  'number': 'yellow',
  'boolean': 'yellow',
  'undefined': 'grey',
  'null': 'bold',
  'string': 'green',
  'date': 'magenta',
  // "name": intentionally not styling
  'regexp': 'red'
};


function stylizeWithColor(str, styleType) {
  var style = inspect.styles[styleType];

  if (style) {
    return '\u001b[' + inspect.colors[style][0] + 'm' + str +
           '\u001b[' + inspect.colors[style][1] + 'm';
  } else {
    return str;
  }
}


function stylizeNoColor(str, styleType) {
  return str;
}


function arrayToHash(array) {
  var hash = {};

  array.forEach(function(val, idx) {
    hash[val] = true;
  });

  return hash;
}


function formatValue(ctx, value, recurseTimes) {
  // Provide a hook for user-specified inspect functions.
  // Check that value is an object with an inspect function on it
  if (ctx.customInspect &&
      value &&
      isFunction(value.inspect) &&
      // Filter out the util module, it's inspect function is special
      value.inspect !== exports.inspect &&
      // Also filter out any prototype objects using the circular check.
      !(value.constructor && value.constructor.prototype === value)) {
    var ret = value.inspect(recurseTimes, ctx);
    if (!isString(ret)) {
      ret = formatValue(ctx, ret, recurseTimes);
    }
    return ret;
  }

  // Primitive types cannot have properties
  var primitive = formatPrimitive(ctx, value);
  if (primitive) {
    return primitive;
  }

  // Look up the keys of the object.
  var keys = Object.keys(value);
  var visibleKeys = arrayToHash(keys);

  if (ctx.showHidden) {
    keys = Object.getOwnPropertyNames(value);
  }

  // IE doesn't make error fields non-enumerable
  // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx
  if (isError(value)
      && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {
    return formatError(value);
  }

  // Some type of object without properties can be shortcutted.
  if (keys.length === 0) {
    if (isFunction(value)) {
      var name = value.name ? ': ' + value.name : '';
      return ctx.stylize('[Function' + name + ']', 'special');
    }
    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
    }
    if (isDate(value)) {
      return ctx.stylize(Date.prototype.toString.call(value), 'date');
    }
    if (isError(value)) {
      return formatError(value);
    }
  }

  var base = '', array = false, braces = ['{', '}'];

  // Make Array say that they are Array
  if (isArray(value)) {
    array = true;
    braces = ['[', ']'];
  }

  // Make functions say that they are functions
  if (isFunction(value)) {
    var n = value.name ? ': ' + value.name : '';
    base = ' [Function' + n + ']';
  }

  // Make RegExps say that they are RegExps
  if (isRegExp(value)) {
    base = ' ' + RegExp.prototype.toString.call(value);
  }

  // Make dates with properties first say the date
  if (isDate(value)) {
    base = ' ' + Date.prototype.toUTCString.call(value);
  }

  // Make error with message first say the error
  if (isError(value)) {
    base = ' ' + formatError(value);
  }

  if (keys.length === 0 && (!array || value.length == 0)) {
    return braces[0] + base + braces[1];
  }

  if (recurseTimes < 0) {
    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
    } else {
      return ctx.stylize('[Object]', 'special');
    }
  }

  ctx.seen.push(value);

  var output;
  if (array) {
    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
  } else {
    output = keys.map(function(key) {
      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
    });
  }

  ctx.seen.pop();

  return reduceToSingleString(output, base, braces);
}


function formatPrimitive(ctx, value) {
  if (isUndefined(value))
    return ctx.stylize('undefined', 'undefined');
  if (isString(value)) {
    var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '')
                                             .replace(/'/g, "\\'")
                                             .replace(/\\"/g, '"') + '\'';
    return ctx.stylize(simple, 'string');
  }
  if (isNumber(value))
    return ctx.stylize('' + value, 'number');
  if (isBoolean(value))
    return ctx.stylize('' + value, 'boolean');
  // For some reason typeof null is "object", so special case here.
  if (isNull(value))
    return ctx.stylize('null', 'null');
}


function formatError(value) {
  return '[' + Error.prototype.toString.call(value) + ']';
}


function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
  var output = [];
  for (var i = 0, l = value.length; i < l; ++i) {
    if (hasOwnProperty(value, String(i))) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
          String(i), true));
    } else {
      output.push('');
    }
  }
  keys.forEach(function(key) {
    if (!key.match(/^\d+$/)) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
          key, true));
    }
  });
  return output;
}


function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
  var name, str, desc;
  desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };
  if (desc.get) {
    if (desc.set) {
      str = ctx.stylize('[Getter/Setter]', 'special');
    } else {
      str = ctx.stylize('[Getter]', 'special');
    }
  } else {
    if (desc.set) {
      str = ctx.stylize('[Setter]', 'special');
    }
  }
  if (!hasOwnProperty(visibleKeys, key)) {
    name = '[' + key + ']';
  }
  if (!str) {
    if (ctx.seen.indexOf(desc.value) < 0) {
      if (isNull(recurseTimes)) {
        str = formatValue(ctx, desc.value, null);
      } else {
        str = formatValue(ctx, desc.value, recurseTimes - 1);
      }
      if (str.indexOf('\n') > -1) {
        if (array) {
          str = str.split('\n').map(function(line) {
            return '  ' + line;
          }).join('\n').slice(2);
        } else {
          str = '\n' + str.split('\n').map(function(line) {
            return '   ' + line;
          }).join('\n');
        }
      }
    } else {
      str = ctx.stylize('[Circular]', 'special');
    }
  }
  if (isUndefined(name)) {
    if (array && key.match(/^\d+$/)) {
      return str;
    }
    name = JSON.stringify('' + key);
    if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
      name = name.slice(1, -1);
      name = ctx.stylize(name, 'name');
    } else {
      name = name.replace(/'/g, "\\'")
                 .replace(/\\"/g, '"')
                 .replace(/(^"|"$)/g, "'");
      name = ctx.stylize(name, 'string');
    }
  }

  return name + ': ' + str;
}


function reduceToSingleString(output, base, braces) {
  var numLinesEst = 0;
  var length = output.reduce(function(prev, cur) {
    numLinesEst++;
    if (cur.indexOf('\n') >= 0) numLinesEst++;
    return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
  }, 0);

  if (length > 60) {
    return braces[0] +
           (base === '' ? '' : base + '\n ') +
           ' ' +
           output.join(',\n  ') +
           ' ' +
           braces[1];
  }

  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
}


// NOTE: These type checking functions intentionally don't use `instanceof`
// because it is fragile and can be easily faked with `Object.create()`.
exports.types = __webpack_require__(4895);

function isArray(ar) {
  return Array.isArray(ar);
}
exports.isArray = isArray;

function isBoolean(arg) {
  return typeof arg === 'boolean';
}
exports.isBoolean = isBoolean;

function isNull(arg) {
  return arg === null;
}
exports.isNull = isNull;

function isNullOrUndefined(arg) {
  return arg == null;
}
exports.isNullOrUndefined = isNullOrUndefined;

function isNumber(arg) {
  return typeof arg === 'number';
}
exports.isNumber = isNumber;

function isString(arg) {
  return typeof arg === 'string';
}
exports.isString = isString;

function isSymbol(arg) {
  return typeof arg === 'symbol';
}
exports.isSymbol = isSymbol;

function isUndefined(arg) {
  return arg === void 0;
}
exports.isUndefined = isUndefined;

function isRegExp(re) {
  return isObject(re) && objectToString(re) === '[object RegExp]';
}
exports.isRegExp = isRegExp;
exports.types.isRegExp = isRegExp;

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}
exports.isObject = isObject;

function isDate(d) {
  return isObject(d) && objectToString(d) === '[object Date]';
}
exports.isDate = isDate;
exports.types.isDate = isDate;

function isError(e) {
  return isObject(e) &&
      (objectToString(e) === '[object Error]' || e instanceof Error);
}
exports.isError = isError;
exports.types.isNativeError = isError;

function isFunction(arg) {
  return typeof arg === 'function';
}
exports.isFunction = isFunction;

function isPrimitive(arg) {
  return arg === null ||
         typeof arg === 'boolean' ||
         typeof arg === 'number' ||
         typeof arg === 'string' ||
         typeof arg === 'symbol' ||  // ES6 symbol
         typeof arg === 'undefined';
}
exports.isPrimitive = isPrimitive;

exports.isBuffer = __webpack_require__(82);

function objectToString(o) {
  return Object.prototype.toString.call(o);
}


function pad(n) {
  return n < 10 ? '0' + n.toString(10) : n.toString(10);
}


var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',
              'Oct', 'Nov', 'Dec'];

// 26 Feb 16:19:34
function timestamp() {
  var d = new Date();
  var time = [pad(d.getHours()),
              pad(d.getMinutes()),
              pad(d.getSeconds())].join(':');
  return [d.getDate(), months[d.getMonth()], time].join(' ');
}


// log is just a thin wrapper to console.log that prepends a timestamp
exports.log = function() {
  console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));
};


/**
 * Inherit the prototype methods from one constructor into another.
 *
 * The Function.prototype.inherits from lang.js rewritten as a standalone
 * function (not on Function.prototype). NOTE: If this file is to be loaded
 * during bootstrapping this function needs to be rewritten using some native
 * functions as prototype setup using normal JavaScript does not work as
 * expected during bootstrapping (see mirror.js in r114903).
 *
 * @param {function} ctor Constructor function which needs to inherit the
 *     prototype.
 * @param {function} superCtor Constructor function to inherit prototype from.
 */
exports.inherits = __webpack_require__(1285);

exports._extend = function(origin, add) {
  // Don't do anything if add isn't an object
  if (!add || !isObject(add)) return origin;

  var keys = Object.keys(add);
  var i = keys.length;
  while (i--) {
    origin[keys[i]] = add[keys[i]];
  }
  return origin;
};

function hasOwnProperty(obj, prop) {
  return Object.prototype.hasOwnProperty.call(obj, prop);
}

var kCustomPromisifiedSymbol = typeof Symbol !== 'undefined' ? Symbol('util.promisify.custom') : undefined;

exports.promisify = function promisify(original) {
  if (typeof original !== 'function')
    throw new TypeError('The "original" argument must be of type Function');

  if (kCustomPromisifiedSymbol && original[kCustomPromisifiedSymbol]) {
    var fn = original[kCustomPromisifiedSymbol];
    if (typeof fn !== 'function') {
      throw new TypeError('The "util.promisify.custom" argument must be of type Function');
    }
    Object.defineProperty(fn, kCustomPromisifiedSymbol, {
      value: fn, enumerable: false, writable: false, configurable: true
    });
    return fn;
  }

  function fn() {
    var promiseResolve, promiseReject;
    var promise = new Promise(function (resolve, reject) {
      promiseResolve = resolve;
      promiseReject = reject;
    });

    var args = [];
    for (var i = 0; i < arguments.length; i++) {
      args.push(arguments[i]);
    }
    args.push(function (err, value) {
      if (err) {
        promiseReject(err);
      } else {
        promiseResolve(value);
      }
    });

    try {
      original.apply(this, args);
    } catch (err) {
      promiseReject(err);
    }

    return promise;
  }

  Object.setPrototypeOf(fn, Object.getPrototypeOf(original));

  if (kCustomPromisifiedSymbol) Object.defineProperty(fn, kCustomPromisifiedSymbol, {
    value: fn, enumerable: false, writable: false, configurable: true
  });
  return Object.defineProperties(
    fn,
    getOwnPropertyDescriptors(original)
  );
}

exports.promisify.custom = kCustomPromisifiedSymbol

function callbackifyOnRejected(reason, cb) {
  // `!reason` guard inspired by bluebird (Ref: https://goo.gl/t5IS6M).
  // Because `null` is a special error value in callbacks which means "no error
  // occurred", we error-wrap so the callback consumer can distinguish between
  // "the promise rejected with null" or "the promise fulfilled with undefined".
  if (!reason) {
    var newReason = new Error('Promise was rejected with a falsy value');
    newReason.reason = reason;
    reason = newReason;
  }
  return cb(reason);
}

function callbackify(original) {
  if (typeof original !== 'function') {
    throw new TypeError('The "original" argument must be of type Function');
  }

  // We DO NOT return the promise as it gives the user a false sense that
  // the promise is actually somehow related to the callback's execution
  // and that the callback throwing will reject the promise.
  function callbackified() {
    var args = [];
    for (var i = 0; i < arguments.length; i++) {
      args.push(arguments[i]);
    }

    var maybeCb = args.pop();
    if (typeof maybeCb !== 'function') {
      throw new TypeError('The last argument must be of type Function');
    }
    var self = this;
    var cb = function() {
      return maybeCb.apply(self, arguments);
    };
    // In true node style we process the callback on `nextTick` with all the
    // implications (stack, `uncaughtException`, `async_hooks`)
    original.apply(this, args)
      .then(function(ret) { process.nextTick(cb.bind(null, null, ret)) },
            function(rej) { process.nextTick(callbackifyOnRejected.bind(null, rej, cb)) });
  }

  Object.setPrototypeOf(callbackified, Object.getPrototypeOf(original));
  Object.defineProperties(callbackified,
                          getOwnPropertyDescriptors(original));
  return callbackified;
}
exports.callbackify = callbackify;


/***/ }),

/***/ 1200:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ----------------------------------------------------------------------------------------- */


module.exports = __webpack_require__(5953);

/***/ }),

/***/ 5953:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.createMessageConnection = exports.BrowserMessageWriter = exports.BrowserMessageReader = void 0;
const ril_1 = __webpack_require__(3632);
// Install the browser runtime abstract.
ril_1.default.install();
const api_1 = __webpack_require__(5247);
__exportStar(__webpack_require__(5247), exports);
class BrowserMessageReader extends api_1.AbstractMessageReader {
    constructor(port) {
        super();
        this._onData = new api_1.Emitter();
        this._messageListener = (event) => {
            this._onData.fire(event.data);
        };
        port.addEventListener('error', (event) => this.fireError(event));
        port.onmessage = this._messageListener;
    }
    listen(callback) {
        return this._onData.event(callback);
    }
}
exports.BrowserMessageReader = BrowserMessageReader;
class BrowserMessageWriter extends api_1.AbstractMessageWriter {
    constructor(port) {
        super();
        this.port = port;
        this.errorCount = 0;
        port.addEventListener('error', (event) => this.fireError(event));
    }
    write(msg) {
        try {
            this.port.postMessage(msg);
            return Promise.resolve();
        }
        catch (error) {
            this.handleError(error, msg);
            return Promise.reject(error);
        }
    }
    handleError(error, msg) {
        this.errorCount++;
        this.fireError(error, msg, this.errorCount);
    }
    end() {
    }
}
exports.BrowserMessageWriter = BrowserMessageWriter;
function createMessageConnection(reader, writer, logger, options) {
    if (logger === undefined) {
        logger = api_1.NullLogger;
    }
    if (api_1.ConnectionStrategy.is(options)) {
        options = { connectionStrategy: options };
    }
    return (0, api_1.createMessageConnection)(reader, writer, logger, options);
}
exports.createMessageConnection = createMessageConnection;


/***/ }),

/***/ 3632:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
/* provided dependency */ var console = __webpack_require__(3716);

/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
Object.defineProperty(exports, "__esModule", ({ value: true }));
const api_1 = __webpack_require__(5247);
class MessageBuffer extends api_1.AbstractMessageBuffer {
    constructor(encoding = 'utf-8') {
        super(encoding);
        this.asciiDecoder = new TextDecoder('ascii');
    }
    emptyBuffer() {
        return MessageBuffer.emptyBuffer;
    }
    fromString(value, _encoding) {
        return (new TextEncoder()).encode(value);
    }
    toString(value, encoding) {
        if (encoding === 'ascii') {
            return this.asciiDecoder.decode(value);
        }
        else {
            return (new TextDecoder(encoding)).decode(value);
        }
    }
    asNative(buffer, length) {
        if (length === undefined) {
            return buffer;
        }
        else {
            return buffer.slice(0, length);
        }
    }
    allocNative(length) {
        return new Uint8Array(length);
    }
}
MessageBuffer.emptyBuffer = new Uint8Array(0);
class ReadableStreamWrapper {
    constructor(socket) {
        this.socket = socket;
        this._onData = new api_1.Emitter();
        this._messageListener = (event) => {
            const blob = event.data;
            blob.arrayBuffer().then((buffer) => {
                this._onData.fire(new Uint8Array(buffer));
            }, () => {
                (0, api_1.RAL)().console.error(`Converting blob to array buffer failed.`);
            });
        };
        this.socket.addEventListener('message', this._messageListener);
    }
    onClose(listener) {
        this.socket.addEventListener('close', listener);
        return api_1.Disposable.create(() => this.socket.removeEventListener('close', listener));
    }
    onError(listener) {
        this.socket.addEventListener('error', listener);
        return api_1.Disposable.create(() => this.socket.removeEventListener('error', listener));
    }
    onEnd(listener) {
        this.socket.addEventListener('end', listener);
        return api_1.Disposable.create(() => this.socket.removeEventListener('end', listener));
    }
    onData(listener) {
        return this._onData.event(listener);
    }
}
class WritableStreamWrapper {
    constructor(socket) {
        this.socket = socket;
    }
    onClose(listener) {
        this.socket.addEventListener('close', listener);
        return api_1.Disposable.create(() => this.socket.removeEventListener('close', listener));
    }
    onError(listener) {
        this.socket.addEventListener('error', listener);
        return api_1.Disposable.create(() => this.socket.removeEventListener('error', listener));
    }
    onEnd(listener) {
        this.socket.addEventListener('end', listener);
        return api_1.Disposable.create(() => this.socket.removeEventListener('end', listener));
    }
    write(data, encoding) {
        if (typeof data === 'string') {
            if (encoding !== undefined && encoding !== 'utf-8') {
                throw new Error(`In a Browser environments only utf-8 text encoding is supported. But got encoding: ${encoding}`);
            }
            this.socket.send(data);
        }
        else {
            this.socket.send(data);
        }
        return Promise.resolve();
    }
    end() {
        this.socket.close();
    }
}
const _textEncoder = new TextEncoder();
const _ril = Object.freeze({
    messageBuffer: Object.freeze({
        create: (encoding) => new MessageBuffer(encoding)
    }),
    applicationJson: Object.freeze({
        encoder: Object.freeze({
            name: 'application/json',
            encode: (msg, options) => {
                if (options.charset !== 'utf-8') {
                    throw new Error(`In a Browser environments only utf-8 text encoding is supported. But got encoding: ${options.charset}`);
                }
                return Promise.resolve(_textEncoder.encode(JSON.stringify(msg, undefined, 0)));
            }
        }),
        decoder: Object.freeze({
            name: 'application/json',
            decode: (buffer, options) => {
                if (!(buffer instanceof Uint8Array)) {
                    throw new Error(`In a Browser environments only Uint8Arrays are supported.`);
                }
                return Promise.resolve(JSON.parse(new TextDecoder(options.charset).decode(buffer)));
            }
        })
    }),
    stream: Object.freeze({
        asReadableStream: (socket) => new ReadableStreamWrapper(socket),
        asWritableStream: (socket) => new WritableStreamWrapper(socket)
    }),
    console: console,
    timer: Object.freeze({
        setTimeout(callback, ms, ...args) {
            const handle = setTimeout(callback, ms, ...args);
            return { dispose: () => clearTimeout(handle) };
        },
        setImmediate(callback, ...args) {
            const handle = setTimeout(callback, 0, ...args);
            return { dispose: () => clearTimeout(handle) };
        },
        setInterval(callback, ms, ...args) {
            const handle = setInterval(callback, ms, ...args);
            return { dispose: () => clearInterval(handle) };
        },
    })
});
function RIL() {
    return _ril;
}
(function (RIL) {
    function install() {
        api_1.RAL.install(_ril);
    }
    RIL.install = install;
})(RIL || (RIL = {}));
exports["default"] = RIL;


/***/ }),

/***/ 5247:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
/// <reference path="../../typings/thenable.d.ts" />
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ProgressType = exports.ProgressToken = exports.createMessageConnection = exports.NullLogger = exports.ConnectionOptions = exports.ConnectionStrategy = exports.AbstractMessageBuffer = exports.WriteableStreamMessageWriter = exports.AbstractMessageWriter = exports.MessageWriter = exports.ReadableStreamMessageReader = exports.AbstractMessageReader = exports.MessageReader = exports.SharedArrayReceiverStrategy = exports.SharedArraySenderStrategy = exports.CancellationToken = exports.CancellationTokenSource = exports.Emitter = exports.Event = exports.Disposable = exports.LRUCache = exports.Touch = exports.LinkedMap = exports.ParameterStructures = exports.NotificationType9 = exports.NotificationType8 = exports.NotificationType7 = exports.NotificationType6 = exports.NotificationType5 = exports.NotificationType4 = exports.NotificationType3 = exports.NotificationType2 = exports.NotificationType1 = exports.NotificationType0 = exports.NotificationType = exports.ErrorCodes = exports.ResponseError = exports.RequestType9 = exports.RequestType8 = exports.RequestType7 = exports.RequestType6 = exports.RequestType5 = exports.RequestType4 = exports.RequestType3 = exports.RequestType2 = exports.RequestType1 = exports.RequestType0 = exports.RequestType = exports.Message = exports.RAL = void 0;
exports.MessageStrategy = exports.CancellationStrategy = exports.CancellationSenderStrategy = exports.CancellationReceiverStrategy = exports.ConnectionError = exports.ConnectionErrors = exports.LogTraceNotification = exports.SetTraceNotification = exports.TraceFormat = exports.TraceValues = exports.Trace = void 0;
const messages_1 = __webpack_require__(9141);
Object.defineProperty(exports, "Message", ({ enumerable: true, get: function () { return messages_1.Message; } }));
Object.defineProperty(exports, "RequestType", ({ enumerable: true, get: function () { return messages_1.RequestType; } }));
Object.defineProperty(exports, "RequestType0", ({ enumerable: true, get: function () { return messages_1.RequestType0; } }));
Object.defineProperty(exports, "RequestType1", ({ enumerable: true, get: function () { return messages_1.RequestType1; } }));
Object.defineProperty(exports, "RequestType2", ({ enumerable: true, get: function () { return messages_1.RequestType2; } }));
Object.defineProperty(exports, "RequestType3", ({ enumerable: true, get: function () { return messages_1.RequestType3; } }));
Object.defineProperty(exports, "RequestType4", ({ enumerable: true, get: function () { return messages_1.RequestType4; } }));
Object.defineProperty(exports, "RequestType5", ({ enumerable: true, get: function () { return messages_1.RequestType5; } }));
Object.defineProperty(exports, "RequestType6", ({ enumerable: true, get: function () { return messages_1.RequestType6; } }));
Object.defineProperty(exports, "RequestType7", ({ enumerable: true, get: function () { return messages_1.RequestType7; } }));
Object.defineProperty(exports, "RequestType8", ({ enumerable: true, get: function () { return messages_1.RequestType8; } }));
Object.defineProperty(exports, "RequestType9", ({ enumerable: true, get: function () { return messages_1.RequestType9; } }));
Object.defineProperty(exports, "ResponseError", ({ enumerable: true, get: function () { return messages_1.ResponseError; } }));
Object.defineProperty(exports, "ErrorCodes", ({ enumerable: true, get: function () { return messages_1.ErrorCodes; } }));
Object.defineProperty(exports, "NotificationType", ({ enumerable: true, get: function () { return messages_1.NotificationType; } }));
Object.defineProperty(exports, "NotificationType0", ({ enumerable: true, get: function () { return messages_1.NotificationType0; } }));
Object.defineProperty(exports, "NotificationType1", ({ enumerable: true, get: function () { return messages_1.NotificationType1; } }));
Object.defineProperty(exports, "NotificationType2", ({ enumerable: true, get: function () { return messages_1.NotificationType2; } }));
Object.defineProperty(exports, "NotificationType3", ({ enumerable: true, get: function () { return messages_1.NotificationType3; } }));
Object.defineProperty(exports, "NotificationType4", ({ enumerable: true, get: function () { return messages_1.NotificationType4; } }));
Object.defineProperty(exports, "NotificationType5", ({ enumerable: true, get: function () { return messages_1.NotificationType5; } }));
Object.defineProperty(exports, "NotificationType6", ({ enumerable: true, get: function () { return messages_1.NotificationType6; } }));
Object.defineProperty(exports, "NotificationType7", ({ enumerable: true, get: function () { return messages_1.NotificationType7; } }));
Object.defineProperty(exports, "NotificationType8", ({ enumerable: true, get: function () { return messages_1.NotificationType8; } }));
Object.defineProperty(exports, "NotificationType9", ({ enumerable: true, get: function () { return messages_1.NotificationType9; } }));
Object.defineProperty(exports, "ParameterStructures", ({ enumerable: true, get: function () { return messages_1.ParameterStructures; } }));
const linkedMap_1 = __webpack_require__(7040);
Object.defineProperty(exports, "LinkedMap", ({ enumerable: true, get: function () { return linkedMap_1.LinkedMap; } }));
Object.defineProperty(exports, "LRUCache", ({ enumerable: true, get: function () { return linkedMap_1.LRUCache; } }));
Object.defineProperty(exports, "Touch", ({ enumerable: true, get: function () { return linkedMap_1.Touch; } }));
const disposable_1 = __webpack_require__(8437);
Object.defineProperty(exports, "Disposable", ({ enumerable: true, get: function () { return disposable_1.Disposable; } }));
const events_1 = __webpack_require__(5165);
Object.defineProperty(exports, "Event", ({ enumerable: true, get: function () { return events_1.Event; } }));
Object.defineProperty(exports, "Emitter", ({ enumerable: true, get: function () { return events_1.Emitter; } }));
const cancellation_1 = __webpack_require__(415);
Object.defineProperty(exports, "CancellationTokenSource", ({ enumerable: true, get: function () { return cancellation_1.CancellationTokenSource; } }));
Object.defineProperty(exports, "CancellationToken", ({ enumerable: true, get: function () { return cancellation_1.CancellationToken; } }));
const sharedArrayCancellation_1 = __webpack_require__(178);
Object.defineProperty(exports, "SharedArraySenderStrategy", ({ enumerable: true, get: function () { return sharedArrayCancellation_1.SharedArraySenderStrategy; } }));
Object.defineProperty(exports, "SharedArrayReceiverStrategy", ({ enumerable: true, get: function () { return sharedArrayCancellation_1.SharedArrayReceiverStrategy; } }));
const messageReader_1 = __webpack_require__(451);
Object.defineProperty(exports, "MessageReader", ({ enumerable: true, get: function () { return messageReader_1.MessageReader; } }));
Object.defineProperty(exports, "AbstractMessageReader", ({ enumerable: true, get: function () { return messageReader_1.AbstractMessageReader; } }));
Object.defineProperty(exports, "ReadableStreamMessageReader", ({ enumerable: true, get: function () { return messageReader_1.ReadableStreamMessageReader; } }));
const messageWriter_1 = __webpack_require__(1251);
Object.defineProperty(exports, "MessageWriter", ({ enumerable: true, get: function () { return messageWriter_1.MessageWriter; } }));
Object.defineProperty(exports, "AbstractMessageWriter", ({ enumerable: true, get: function () { return messageWriter_1.AbstractMessageWriter; } }));
Object.defineProperty(exports, "WriteableStreamMessageWriter", ({ enumerable: true, get: function () { return messageWriter_1.WriteableStreamMessageWriter; } }));
const messageBuffer_1 = __webpack_require__(8652);
Object.defineProperty(exports, "AbstractMessageBuffer", ({ enumerable: true, get: function () { return messageBuffer_1.AbstractMessageBuffer; } }));
const connection_1 = __webpack_require__(1908);
Object.defineProperty(exports, "ConnectionStrategy", ({ enumerable: true, get: function () { return connection_1.ConnectionStrategy; } }));
Object.defineProperty(exports, "ConnectionOptions", ({ enumerable: true, get: function () { return connection_1.ConnectionOptions; } }));
Object.defineProperty(exports, "NullLogger", ({ enumerable: true, get: function () { return connection_1.NullLogger; } }));
Object.defineProperty(exports, "createMessageConnection", ({ enumerable: true, get: function () { return connection_1.createMessageConnection; } }));
Object.defineProperty(exports, "ProgressToken", ({ enumerable: true, get: function () { return connection_1.ProgressToken; } }));
Object.defineProperty(exports, "ProgressType", ({ enumerable: true, get: function () { return connection_1.ProgressType; } }));
Object.defineProperty(exports, "Trace", ({ enumerable: true, get: function () { return connection_1.Trace; } }));
Object.defineProperty(exports, "TraceValues", ({ enumerable: true, get: function () { return connection_1.TraceValues; } }));
Object.defineProperty(exports, "TraceFormat", ({ enumerable: true, get: function () { return connection_1.TraceFormat; } }));
Object.defineProperty(exports, "SetTraceNotification", ({ enumerable: true, get: function () { return connection_1.SetTraceNotification; } }));
Object.defineProperty(exports, "LogTraceNotification", ({ enumerable: true, get: function () { return connection_1.LogTraceNotification; } }));
Object.defineProperty(exports, "ConnectionErrors", ({ enumerable: true, get: function () { return connection_1.ConnectionErrors; } }));
Object.defineProperty(exports, "ConnectionError", ({ enumerable: true, get: function () { return connection_1.ConnectionError; } }));
Object.defineProperty(exports, "CancellationReceiverStrategy", ({ enumerable: true, get: function () { return connection_1.CancellationReceiverStrategy; } }));
Object.defineProperty(exports, "CancellationSenderStrategy", ({ enumerable: true, get: function () { return connection_1.CancellationSenderStrategy; } }));
Object.defineProperty(exports, "CancellationStrategy", ({ enumerable: true, get: function () { return connection_1.CancellationStrategy; } }));
Object.defineProperty(exports, "MessageStrategy", ({ enumerable: true, get: function () { return connection_1.MessageStrategy; } }));
const ral_1 = __webpack_require__(5706);
exports.RAL = ral_1.default;


/***/ }),

/***/ 415:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.CancellationTokenSource = exports.CancellationToken = void 0;
const ral_1 = __webpack_require__(5706);
const Is = __webpack_require__(8811);
const events_1 = __webpack_require__(5165);
var CancellationToken;
(function (CancellationToken) {
    CancellationToken.None = Object.freeze({
        isCancellationRequested: false,
        onCancellationRequested: events_1.Event.None
    });
    CancellationToken.Cancelled = Object.freeze({
        isCancellationRequested: true,
        onCancellationRequested: events_1.Event.None
    });
    function is(value) {
        const candidate = value;
        return candidate && (candidate === CancellationToken.None
            || candidate === CancellationToken.Cancelled
            || (Is.boolean(candidate.isCancellationRequested) && !!candidate.onCancellationRequested));
    }
    CancellationToken.is = is;
})(CancellationToken = exports.CancellationToken || (exports.CancellationToken = {}));
const shortcutEvent = Object.freeze(function (callback, context) {
    const handle = (0, ral_1.default)().timer.setTimeout(callback.bind(context), 0);
    return { dispose() { handle.dispose(); } };
});
class MutableToken {
    constructor() {
        this._isCancelled = false;
    }
    cancel() {
        if (!this._isCancelled) {
            this._isCancelled = true;
            if (this._emitter) {
                this._emitter.fire(undefined);
                this.dispose();
            }
        }
    }
    get isCancellationRequested() {
        return this._isCancelled;
    }
    get onCancellationRequested() {
        if (this._isCancelled) {
            return shortcutEvent;
        }
        if (!this._emitter) {
            this._emitter = new events_1.Emitter();
        }
        return this._emitter.event;
    }
    dispose() {
        if (this._emitter) {
            this._emitter.dispose();
            this._emitter = undefined;
        }
    }
}
class CancellationTokenSource {
    get token() {
        if (!this._token) {
            // be lazy and create the token only when
            // actually needed
            this._token = new MutableToken();
        }
        return this._token;
    }
    cancel() {
        if (!this._token) {
            // save an object by returning the default
            // cancelled token when cancellation happens
            // before someone asks for the token
            this._token = CancellationToken.Cancelled;
        }
        else {
            this._token.cancel();
        }
    }
    dispose() {
        if (!this._token) {
            // ensure to initialize with an empty token if we had none
            this._token = CancellationToken.None;
        }
        else if (this._token instanceof MutableToken) {
            // actually dispose
            this._token.dispose();
        }
    }
}
exports.CancellationTokenSource = CancellationTokenSource;


/***/ }),

/***/ 1908:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.createMessageConnection = exports.ConnectionOptions = exports.MessageStrategy = exports.CancellationStrategy = exports.CancellationSenderStrategy = exports.CancellationReceiverStrategy = exports.RequestCancellationReceiverStrategy = exports.IdCancellationReceiverStrategy = exports.ConnectionStrategy = exports.ConnectionError = exports.ConnectionErrors = exports.LogTraceNotification = exports.SetTraceNotification = exports.TraceFormat = exports.TraceValues = exports.Trace = exports.NullLogger = exports.ProgressType = exports.ProgressToken = void 0;
const ral_1 = __webpack_require__(5706);
const Is = __webpack_require__(8811);
const messages_1 = __webpack_require__(9141);
const linkedMap_1 = __webpack_require__(7040);
const events_1 = __webpack_require__(5165);
const cancellation_1 = __webpack_require__(415);
var CancelNotification;
(function (CancelNotification) {
    CancelNotification.type = new messages_1.NotificationType('$/cancelRequest');
})(CancelNotification || (CancelNotification = {}));
var ProgressToken;
(function (ProgressToken) {
    function is(value) {
        return typeof value === 'string' || typeof value === 'number';
    }
    ProgressToken.is = is;
})(ProgressToken = exports.ProgressToken || (exports.ProgressToken = {}));
var ProgressNotification;
(function (ProgressNotification) {
    ProgressNotification.type = new messages_1.NotificationType('$/progress');
})(ProgressNotification || (ProgressNotification = {}));
class ProgressType {
    constructor() {
    }
}
exports.ProgressType = ProgressType;
var StarRequestHandler;
(function (StarRequestHandler) {
    function is(value) {
        return Is.func(value);
    }
    StarRequestHandler.is = is;
})(StarRequestHandler || (StarRequestHandler = {}));
exports.NullLogger = Object.freeze({
    error: () => { },
    warn: () => { },
    info: () => { },
    log: () => { }
});
var Trace;
(function (Trace) {
    Trace[Trace["Off"] = 0] = "Off";
    Trace[Trace["Messages"] = 1] = "Messages";
    Trace[Trace["Compact"] = 2] = "Compact";
    Trace[Trace["Verbose"] = 3] = "Verbose";
})(Trace = exports.Trace || (exports.Trace = {}));
var TraceValues;
(function (TraceValues) {
    /**
     * Turn tracing off.
     */
    TraceValues.Off = 'off';
    /**
     * Trace messages only.
     */
    TraceValues.Messages = 'messages';
    /**
     * Compact message tracing.
     */
    TraceValues.Compact = 'compact';
    /**
     * Verbose message tracing.
     */
    TraceValues.Verbose = 'verbose';
})(TraceValues = exports.TraceValues || (exports.TraceValues = {}));
(function (Trace) {
    function fromString(value) {
        if (!Is.string(value)) {
            return Trace.Off;
        }
        value = value.toLowerCase();
        switch (value) {
            case 'off':
                return Trace.Off;
            case 'messages':
                return Trace.Messages;
            case 'compact':
                return Trace.Compact;
            case 'verbose':
                return Trace.Verbose;
            default:
                return Trace.Off;
        }
    }
    Trace.fromString = fromString;
    function toString(value) {
        switch (value) {
            case Trace.Off:
                return 'off';
            case Trace.Messages:
                return 'messages';
            case Trace.Compact:
                return 'compact';
            case Trace.Verbose:
                return 'verbose';
            default:
                return 'off';
        }
    }
    Trace.toString = toString;
})(Trace = exports.Trace || (exports.Trace = {}));
var TraceFormat;
(function (TraceFormat) {
    TraceFormat["Text"] = "text";
    TraceFormat["JSON"] = "json";
})(TraceFormat = exports.TraceFormat || (exports.TraceFormat = {}));
(function (TraceFormat) {
    function fromString(value) {
        if (!Is.string(value)) {
            return TraceFormat.Text;
        }
        value = value.toLowerCase();
        if (value === 'json') {
            return TraceFormat.JSON;
        }
        else {
            return TraceFormat.Text;
        }
    }
    TraceFormat.fromString = fromString;
})(TraceFormat = exports.TraceFormat || (exports.TraceFormat = {}));
var SetTraceNotification;
(function (SetTraceNotification) {
    SetTraceNotification.type = new messages_1.NotificationType('$/setTrace');
})(SetTraceNotification = exports.SetTraceNotification || (exports.SetTraceNotification = {}));
var LogTraceNotification;
(function (LogTraceNotification) {
    LogTraceNotification.type = new messages_1.NotificationType('$/logTrace');
})(LogTraceNotification = exports.LogTraceNotification || (exports.LogTraceNotification = {}));
var ConnectionErrors;
(function (ConnectionErrors) {
    /**
     * The connection is closed.
     */
    ConnectionErrors[ConnectionErrors["Closed"] = 1] = "Closed";
    /**
     * The connection got disposed.
     */
    ConnectionErrors[ConnectionErrors["Disposed"] = 2] = "Disposed";
    /**
     * The connection is already in listening mode.
     */
    ConnectionErrors[ConnectionErrors["AlreadyListening"] = 3] = "AlreadyListening";
})(ConnectionErrors = exports.ConnectionErrors || (exports.ConnectionErrors = {}));
class ConnectionError extends Error {
    constructor(code, message) {
        super(message);
        this.code = code;
        Object.setPrototypeOf(this, ConnectionError.prototype);
    }
}
exports.ConnectionError = ConnectionError;
var ConnectionStrategy;
(function (ConnectionStrategy) {
    function is(value) {
        const candidate = value;
        return candidate && Is.func(candidate.cancelUndispatched);
    }
    ConnectionStrategy.is = is;
})(ConnectionStrategy = exports.ConnectionStrategy || (exports.ConnectionStrategy = {}));
var IdCancellationReceiverStrategy;
(function (IdCancellationReceiverStrategy) {
    function is(value) {
        const candidate = value;
        return candidate && (candidate.kind === undefined || candidate.kind === 'id') && Is.func(candidate.createCancellationTokenSource) && (candidate.dispose === undefined || Is.func(candidate.dispose));
    }
    IdCancellationReceiverStrategy.is = is;
})(IdCancellationReceiverStrategy = exports.IdCancellationReceiverStrategy || (exports.IdCancellationReceiverStrategy = {}));
var RequestCancellationReceiverStrategy;
(function (RequestCancellationReceiverStrategy) {
    function is(value) {
        const candidate = value;
        return candidate && candidate.kind === 'request' && Is.func(candidate.createCancellationTokenSource) && (candidate.dispose === undefined || Is.func(candidate.dispose));
    }
    RequestCancellationReceiverStrategy.is = is;
})(RequestCancellationReceiverStrategy = exports.RequestCancellationReceiverStrategy || (exports.RequestCancellationReceiverStrategy = {}));
var CancellationReceiverStrategy;
(function (CancellationReceiverStrategy) {
    CancellationReceiverStrategy.Message = Object.freeze({
        createCancellationTokenSource(_) {
            return new cancellation_1.CancellationTokenSource();
        }
    });
    function is(value) {
        return IdCancellationReceiverStrategy.is(value) || RequestCancellationReceiverStrategy.is(value);
    }
    CancellationReceiverStrategy.is = is;
})(CancellationReceiverStrategy = exports.CancellationReceiverStrategy || (exports.CancellationReceiverStrategy = {}));
var CancellationSenderStrategy;
(function (CancellationSenderStrategy) {
    CancellationSenderStrategy.Message = Object.freeze({
        sendCancellation(conn, id) {
            return conn.sendNotification(CancelNotification.type, { id });
        },
        cleanup(_) { }
    });
    function is(value) {
        const candidate = value;
        return candidate && Is.func(candidate.sendCancellation) && Is.func(candidate.cleanup);
    }
    CancellationSenderStrategy.is = is;
})(CancellationSenderStrategy = exports.CancellationSenderStrategy || (exports.CancellationSenderStrategy = {}));
var CancellationStrategy;
(function (CancellationStrategy) {
    CancellationStrategy.Message = Object.freeze({
        receiver: CancellationReceiverStrategy.Message,
        sender: CancellationSenderStrategy.Message
    });
    function is(value) {
        const candidate = value;
        return candidate && CancellationReceiverStrategy.is(candidate.receiver) && CancellationSenderStrategy.is(candidate.sender);
    }
    CancellationStrategy.is = is;
})(CancellationStrategy = exports.CancellationStrategy || (exports.CancellationStrategy = {}));
var MessageStrategy;
(function (MessageStrategy) {
    function is(value) {
        const candidate = value;
        return candidate && Is.func(candidate.handleMessage);
    }
    MessageStrategy.is = is;
})(MessageStrategy = exports.MessageStrategy || (exports.MessageStrategy = {}));
var ConnectionOptions;
(function (ConnectionOptions) {
    function is(value) {
        const candidate = value;
        return candidate && (CancellationStrategy.is(candidate.cancellationStrategy) || ConnectionStrategy.is(candidate.connectionStrategy) || MessageStrategy.is(candidate.messageStrategy));
    }
    ConnectionOptions.is = is;
})(ConnectionOptions = exports.ConnectionOptions || (exports.ConnectionOptions = {}));
var ConnectionState;
(function (ConnectionState) {
    ConnectionState[ConnectionState["New"] = 1] = "New";
    ConnectionState[ConnectionState["Listening"] = 2] = "Listening";
    ConnectionState[ConnectionState["Closed"] = 3] = "Closed";
    ConnectionState[ConnectionState["Disposed"] = 4] = "Disposed";
})(ConnectionState || (ConnectionState = {}));
function createMessageConnection(messageReader, messageWriter, _logger, options) {
    const logger = _logger !== undefined ? _logger : exports.NullLogger;
    let sequenceNumber = 0;
    let notificationSequenceNumber = 0;
    let unknownResponseSequenceNumber = 0;
    const version = '2.0';
    let starRequestHandler = undefined;
    const requestHandlers = new Map();
    let starNotificationHandler = undefined;
    const notificationHandlers = new Map();
    const progressHandlers = new Map();
    let timer;
    let messageQueue = new linkedMap_1.LinkedMap();
    let responsePromises = new Map();
    let knownCanceledRequests = new Set();
    let requestTokens = new Map();
    let trace = Trace.Off;
    let traceFormat = TraceFormat.Text;
    let tracer;
    let state = ConnectionState.New;
    const errorEmitter = new events_1.Emitter();
    const closeEmitter = new events_1.Emitter();
    const unhandledNotificationEmitter = new events_1.Emitter();
    const unhandledProgressEmitter = new events_1.Emitter();
    const disposeEmitter = new events_1.Emitter();
    const cancellationStrategy = (options && options.cancellationStrategy) ? options.cancellationStrategy : CancellationStrategy.Message;
    function createRequestQueueKey(id) {
        if (id === null) {
            throw new Error(`Can't send requests with id null since the response can't be correlated.`);
        }
        return 'req-' + id.toString();
    }
    function createResponseQueueKey(id) {
        if (id === null) {
            return 'res-unknown-' + (++unknownResponseSequenceNumber).toString();
        }
        else {
            return 'res-' + id.toString();
        }
    }
    function createNotificationQueueKey() {
        return 'not-' + (++notificationSequenceNumber).toString();
    }
    function addMessageToQueue(queue, message) {
        if (messages_1.Message.isRequest(message)) {
            queue.set(createRequestQueueKey(message.id), message);
        }
        else if (messages_1.Message.isResponse(message)) {
            queue.set(createResponseQueueKey(message.id), message);
        }
        else {
            queue.set(createNotificationQueueKey(), message);
        }
    }
    function cancelUndispatched(_message) {
        return undefined;
    }
    function isListening() {
        return state === ConnectionState.Listening;
    }
    function isClosed() {
        return state === ConnectionState.Closed;
    }
    function isDisposed() {
        return state === ConnectionState.Disposed;
    }
    function closeHandler() {
        if (state === ConnectionState.New || state === ConnectionState.Listening) {
            state = ConnectionState.Closed;
            closeEmitter.fire(undefined);
        }
        // If the connection is disposed don't sent close events.
    }
    function readErrorHandler(error) {
        errorEmitter.fire([error, undefined, undefined]);
    }
    function writeErrorHandler(data) {
        errorEmitter.fire(data);
    }
    messageReader.onClose(closeHandler);
    messageReader.onError(readErrorHandler);
    messageWriter.onClose(closeHandler);
    messageWriter.onError(writeErrorHandler);
    function triggerMessageQueue() {
        if (timer || messageQueue.size === 0) {
            return;
        }
        timer = (0, ral_1.default)().timer.setImmediate(() => {
            timer = undefined;
            processMessageQueue();
        });
    }
    function handleMessage(message) {
        if (messages_1.Message.isRequest(message)) {
            handleRequest(message);
        }
        else if (messages_1.Message.isNotification(message)) {
            handleNotification(message);
        }
        else if (messages_1.Message.isResponse(message)) {
            handleResponse(message);
        }
        else {
            handleInvalidMessage(message);
        }
    }
    function processMessageQueue() {
        if (messageQueue.size === 0) {
            return;
        }
        const message = messageQueue.shift();
        try {
            const messageStrategy = options?.messageStrategy;
            if (MessageStrategy.is(messageStrategy)) {
                messageStrategy.handleMessage(message, handleMessage);
            }
            else {
                handleMessage(message);
            }
        }
        finally {
            triggerMessageQueue();
        }
    }
    const callback = (message) => {
        try {
            // We have received a cancellation message. Check if the message is still in the queue
            // and cancel it if allowed to do so.
            if (messages_1.Message.isNotification(message) && message.method === CancelNotification.type.method) {
                const cancelId = message.params.id;
                const key = createRequestQueueKey(cancelId);
                const toCancel = messageQueue.get(key);
                if (messages_1.Message.isRequest(toCancel)) {
                    const strategy = options?.connectionStrategy;
                    const response = (strategy && strategy.cancelUndispatched) ? strategy.cancelUndispatched(toCancel, cancelUndispatched) : cancelUndispatched(toCancel);
                    if (response && (response.error !== undefined || response.result !== undefined)) {
                        messageQueue.delete(key);
                        requestTokens.delete(cancelId);
                        response.id = toCancel.id;
                        traceSendingResponse(response, message.method, Date.now());
                        messageWriter.write(response).catch(() => logger.error(`Sending response for canceled message failed.`));
                        return;
                    }
                }
                const cancellationToken = requestTokens.get(cancelId);
                // The request is already running. Cancel the token
                if (cancellationToken !== undefined) {
                    cancellationToken.cancel();
                    traceReceivedNotification(message);
                    return;
                }
                else {
                    // Remember the cancel but still queue the message to
                    // clean up state in process message.
                    knownCanceledRequests.add(cancelId);
                }
            }
            addMessageToQueue(messageQueue, message);
        }
        finally {
            triggerMessageQueue();
        }
    };
    function handleRequest(requestMessage) {
        if (isDisposed()) {
            // we return here silently since we fired an event when the
            // connection got disposed.
            return;
        }
        function reply(resultOrError, method, startTime) {
            const message = {
                jsonrpc: version,
                id: requestMessage.id
            };
            if (resultOrError instanceof messages_1.ResponseError) {
                message.error = resultOrError.toJson();
            }
            else {
                message.result = resultOrError === undefined ? null : resultOrError;
            }
            traceSendingResponse(message, method, startTime);
            messageWriter.write(message).catch(() => logger.error(`Sending response failed.`));
        }
        function replyError(error, method, startTime) {
            const message = {
                jsonrpc: version,
                id: requestMessage.id,
                error: error.toJson()
            };
            traceSendingResponse(message, method, startTime);
            messageWriter.write(message).catch(() => logger.error(`Sending response failed.`));
        }
        function replySuccess(result, method, startTime) {
            // The JSON RPC defines that a response must either have a result or an error
            // So we can't treat undefined as a valid response result.
            if (result === undefined) {
                result = null;
            }
            const message = {
                jsonrpc: version,
                id: requestMessage.id,
                result: result
            };
            traceSendingResponse(message, method, startTime);
            messageWriter.write(message).catch(() => logger.error(`Sending response failed.`));
        }
        traceReceivedRequest(requestMessage);
        const element = requestHandlers.get(requestMessage.method);
        let type;
        let requestHandler;
        if (element) {
            type = element.type;
            requestHandler = element.handler;
        }
        const startTime = Date.now();
        if (requestHandler || starRequestHandler) {
            const tokenKey = requestMessage.id ?? String(Date.now()); //
            const cancellationSource = IdCancellationReceiverStrategy.is(cancellationStrategy.receiver)
                ? cancellationStrategy.receiver.createCancellationTokenSource(tokenKey)
                : cancellationStrategy.receiver.createCancellationTokenSource(requestMessage);
            if (requestMessage.id !== null && knownCanceledRequests.has(requestMessage.id)) {
                cancellationSource.cancel();
            }
            if (requestMessage.id !== null) {
                requestTokens.set(tokenKey, cancellationSource);
            }
            try {
                let handlerResult;
                if (requestHandler) {
                    if (requestMessage.params === undefined) {
                        if (type !== undefined && type.numberOfParams !== 0) {
                            replyError(new messages_1.ResponseError(messages_1.ErrorCodes.InvalidParams, `Request ${requestMessage.method} defines ${type.numberOfParams} params but received none.`), requestMessage.method, startTime);
                            return;
                        }
                        handlerResult = requestHandler(cancellationSource.token);
                    }
                    else if (Array.isArray(requestMessage.params)) {
                        if (type !== undefined && type.parameterStructures === messages_1.ParameterStructures.byName) {
                            replyError(new messages_1.ResponseError(messages_1.ErrorCodes.InvalidParams, `Request ${requestMessage.method} defines parameters by name but received parameters by position`), requestMessage.method, startTime);
                            return;
                        }
                        handlerResult = requestHandler(...requestMessage.params, cancellationSource.token);
                    }
                    else {
                        if (type !== undefined && type.parameterStructures === messages_1.ParameterStructures.byPosition) {
                            replyError(new messages_1.ResponseError(messages_1.ErrorCodes.InvalidParams, `Request ${requestMessage.method} defines parameters by position but received parameters by name`), requestMessage.method, startTime);
                            return;
                        }
                        handlerResult = requestHandler(requestMessage.params, cancellationSource.token);
                    }
                }
                else if (starRequestHandler) {
                    handlerResult = starRequestHandler(requestMessage.method, requestMessage.params, cancellationSource.token);
                }
                const promise = handlerResult;
                if (!handlerResult) {
                    requestTokens.delete(tokenKey);
                    replySuccess(handlerResult, requestMessage.method, startTime);
                }
                else if (promise.then) {
                    promise.then((resultOrError) => {
                        requestTokens.delete(tokenKey);
                        reply(resultOrError, requestMessage.method, startTime);
                    }, error => {
                        requestTokens.delete(tokenKey);
                        if (error instanceof messages_1.ResponseError) {
                            replyError(error, requestMessage.method, startTime);
                        }
                        else if (error && Is.string(error.message)) {
                            replyError(new messages_1.ResponseError(messages_1.ErrorCodes.InternalError, `Request ${requestMessage.method} failed with message: ${error.message}`), requestMessage.method, startTime);
                        }
                        else {
                            replyError(new messages_1.ResponseError(messages_1.ErrorCodes.InternalError, `Request ${requestMessage.method} failed unexpectedly without providing any details.`), requestMessage.method, startTime);
                        }
                    });
                }
                else {
                    requestTokens.delete(tokenKey);
                    reply(handlerResult, requestMessage.method, startTime);
                }
            }
            catch (error) {
                requestTokens.delete(tokenKey);
                if (error instanceof messages_1.ResponseError) {
                    reply(error, requestMessage.method, startTime);
                }
                else if (error && Is.string(error.message)) {
                    replyError(new messages_1.ResponseError(messages_1.ErrorCodes.InternalError, `Request ${requestMessage.method} failed with message: ${error.message}`), requestMessage.method, startTime);
                }
                else {
                    replyError(new messages_1.ResponseError(messages_1.ErrorCodes.InternalError, `Request ${requestMessage.method} failed unexpectedly without providing any details.`), requestMessage.method, startTime);
                }
            }
        }
        else {
            replyError(new messages_1.ResponseError(messages_1.ErrorCodes.MethodNotFound, `Unhandled method ${requestMessage.method}`), requestMessage.method, startTime);
        }
    }
    function handleResponse(responseMessage) {
        if (isDisposed()) {
            // See handle request.
            return;
        }
        if (responseMessage.id === null) {
            if (responseMessage.error) {
                logger.error(`Received response message without id: Error is: \n${JSON.stringify(responseMessage.error, undefined, 4)}`);
            }
            else {
                logger.error(`Received response message without id. No further error information provided.`);
            }
        }
        else {
            const key = responseMessage.id;
            const responsePromise = responsePromises.get(key);
            traceReceivedResponse(responseMessage, responsePromise);
            if (responsePromise !== undefined) {
                responsePromises.delete(key);
                try {
                    if (responseMessage.error) {
                        const error = responseMessage.error;
                        responsePromise.reject(new messages_1.ResponseError(error.code, error.message, error.data));
                    }
                    else if (responseMessage.result !== undefined) {
                        responsePromise.resolve(responseMessage.result);
                    }
                    else {
                        throw new Error('Should never happen.');
                    }
                }
                catch (error) {
                    if (error.message) {
                        logger.error(`Response handler '${responsePromise.method}' failed with message: ${error.message}`);
                    }
                    else {
                        logger.error(`Response handler '${responsePromise.method}' failed unexpectedly.`);
                    }
                }
            }
        }
    }
    function handleNotification(message) {
        if (isDisposed()) {
            // See handle request.
            return;
        }
        let type = undefined;
        let notificationHandler;
        if (message.method === CancelNotification.type.method) {
            const cancelId = message.params.id;
            knownCanceledRequests.delete(cancelId);
            traceReceivedNotification(message);
            return;
        }
        else {
            const element = notificationHandlers.get(message.method);
            if (element) {
                notificationHandler = element.handler;
                type = element.type;
            }
        }
        if (notificationHandler || starNotificationHandler) {
            try {
                traceReceivedNotification(message);
                if (notificationHandler) {
                    if (message.params === undefined) {
                        if (type !== undefined) {
                            if (type.numberOfParams !== 0 && type.parameterStructures !== messages_1.ParameterStructures.byName) {
                                logger.error(`Notification ${message.method} defines ${type.numberOfParams} params but received none.`);
                            }
                        }
                        notificationHandler();
                    }
                    else if (Array.isArray(message.params)) {
                        // There are JSON-RPC libraries that send progress message as positional params although
                        // specified as named. So convert them if this is the case.
                        const params = message.params;
                        if (message.method === ProgressNotification.type.method && params.length === 2 && ProgressToken.is(params[0])) {
                            notificationHandler({ token: params[0], value: params[1] });
                        }
                        else {
                            if (type !== undefined) {
                                if (type.parameterStructures === messages_1.ParameterStructures.byName) {
                                    logger.error(`Notification ${message.method} defines parameters by name but received parameters by position`);
                                }
                                if (type.numberOfParams !== message.params.length) {
                                    logger.error(`Notification ${message.method} defines ${type.numberOfParams} params but received ${params.length} arguments`);
                                }
                            }
                            notificationHandler(...params);
                        }
                    }
                    else {
                        if (type !== undefined && type.parameterStructures === messages_1.ParameterStructures.byPosition) {
                            logger.error(`Notification ${message.method} defines parameters by position but received parameters by name`);
                        }
                        notificationHandler(message.params);
                    }
                }
                else if (starNotificationHandler) {
                    starNotificationHandler(message.method, message.params);
                }
            }
            catch (error) {
                if (error.message) {
                    logger.error(`Notification handler '${message.method}' failed with message: ${error.message}`);
                }
                else {
                    logger.error(`Notification handler '${message.method}' failed unexpectedly.`);
                }
            }
        }
        else {
            unhandledNotificationEmitter.fire(message);
        }
    }
    function handleInvalidMessage(message) {
        if (!message) {
            logger.error('Received empty message.');
            return;
        }
        logger.error(`Received message which is neither a response nor a notification message:\n${JSON.stringify(message, null, 4)}`);
        // Test whether we find an id to reject the promise
        const responseMessage = message;
        if (Is.string(responseMessage.id) || Is.number(responseMessage.id)) {
            const key = responseMessage.id;
            const responseHandler = responsePromises.get(key);
            if (responseHandler) {
                responseHandler.reject(new Error('The received response has neither a result nor an error property.'));
            }
        }
    }
    function stringifyTrace(params) {
        if (params === undefined || params === null) {
            return undefined;
        }
        switch (trace) {
            case Trace.Verbose:
                return JSON.stringify(params, null, 4);
            case Trace.Compact:
                return JSON.stringify(params);
            default:
                return undefined;
        }
    }
    function traceSendingRequest(message) {
        if (trace === Trace.Off || !tracer) {
            return;
        }
        if (traceFormat === TraceFormat.Text) {
            let data = undefined;
            if ((trace === Trace.Verbose || trace === Trace.Compact) && message.params) {
                data = `Params: ${stringifyTrace(message.params)}\n\n`;
            }
            tracer.log(`Sending request '${message.method} - (${message.id})'.`, data);
        }
        else {
            logLSPMessage('send-request', message);
        }
    }
    function traceSendingNotification(message) {
        if (trace === Trace.Off || !tracer) {
            return;
        }
        if (traceFormat === TraceFormat.Text) {
            let data = undefined;
            if (trace === Trace.Verbose || trace === Trace.Compact) {
                if (message.params) {
                    data = `Params: ${stringifyTrace(message.params)}\n\n`;
                }
                else {
                    data = 'No parameters provided.\n\n';
                }
            }
            tracer.log(`Sending notification '${message.method}'.`, data);
        }
        else {
            logLSPMessage('send-notification', message);
        }
    }
    function traceSendingResponse(message, method, startTime) {
        if (trace === Trace.Off || !tracer) {
            return;
        }
        if (traceFormat === TraceFormat.Text) {
            let data = undefined;
            if (trace === Trace.Verbose || trace === Trace.Compact) {
                if (message.error && message.error.data) {
                    data = `Error data: ${stringifyTrace(message.error.data)}\n\n`;
                }
                else {
                    if (message.result) {
                        data = `Result: ${stringifyTrace(message.result)}\n\n`;
                    }
                    else if (message.error === undefined) {
                        data = 'No result returned.\n\n';
                    }
                }
            }
            tracer.log(`Sending response '${method} - (${message.id})'. Processing request took ${Date.now() - startTime}ms`, data);
        }
        else {
            logLSPMessage('send-response', message);
        }
    }
    function traceReceivedRequest(message) {
        if (trace === Trace.Off || !tracer) {
            return;
        }
        if (traceFormat === TraceFormat.Text) {
            let data = undefined;
            if ((trace === Trace.Verbose || trace === Trace.Compact) && message.params) {
                data = `Params: ${stringifyTrace(message.params)}\n\n`;
            }
            tracer.log(`Received request '${message.method} - (${message.id})'.`, data);
        }
        else {
            logLSPMessage('receive-request', message);
        }
    }
    function traceReceivedNotification(message) {
        if (trace === Trace.Off || !tracer || message.method === LogTraceNotification.type.method) {
            return;
        }
        if (traceFormat === TraceFormat.Text) {
            let data = undefined;
            if (trace === Trace.Verbose || trace === Trace.Compact) {
                if (message.params) {
                    data = `Params: ${stringifyTrace(message.params)}\n\n`;
                }
                else {
                    data = 'No parameters provided.\n\n';
                }
            }
            tracer.log(`Received notification '${message.method}'.`, data);
        }
        else {
            logLSPMessage('receive-notification', message);
        }
    }
    function traceReceivedResponse(message, responsePromise) {
        if (trace === Trace.Off || !tracer) {
            return;
        }
        if (traceFormat === TraceFormat.Text) {
            let data = undefined;
            if (trace === Trace.Verbose || trace === Trace.Compact) {
                if (message.error && message.error.data) {
                    data = `Error data: ${stringifyTrace(message.error.data)}\n\n`;
                }
                else {
                    if (message.result) {
                        data = `Result: ${stringifyTrace(message.result)}\n\n`;
                    }
                    else if (message.error === undefined) {
                        data = 'No result returned.\n\n';
                    }
                }
            }
            if (responsePromise) {
                const error = message.error ? ` Request failed: ${message.error.message} (${message.error.code}).` : '';
                tracer.log(`Received response '${responsePromise.method} - (${message.id})' in ${Date.now() - responsePromise.timerStart}ms.${error}`, data);
            }
            else {
                tracer.log(`Received response ${message.id} without active response promise.`, data);
            }
        }
        else {
            logLSPMessage('receive-response', message);
        }
    }
    function logLSPMessage(type, message) {
        if (!tracer || trace === Trace.Off) {
            return;
        }
        const lspMessage = {
            isLSPMessage: true,
            type,
            message,
            timestamp: Date.now()
        };
        tracer.log(lspMessage);
    }
    function throwIfClosedOrDisposed() {
        if (isClosed()) {
            throw new ConnectionError(ConnectionErrors.Closed, 'Connection is closed.');
        }
        if (isDisposed()) {
            throw new ConnectionError(ConnectionErrors.Disposed, 'Connection is disposed.');
        }
    }
    function throwIfListening() {
        if (isListening()) {
            throw new ConnectionError(ConnectionErrors.AlreadyListening, 'Connection is already listening');
        }
    }
    function throwIfNotListening() {
        if (!isListening()) {
            throw new Error('Call listen() first.');
        }
    }
    function undefinedToNull(param) {
        if (param === undefined) {
            return null;
        }
        else {
            return param;
        }
    }
    function nullToUndefined(param) {
        if (param === null) {
            return undefined;
        }
        else {
            return param;
        }
    }
    function isNamedParam(param) {
        return param !== undefined && param !== null && !Array.isArray(param) && typeof param === 'object';
    }
    function computeSingleParam(parameterStructures, param) {
        switch (parameterStructures) {
            case messages_1.ParameterStructures.auto:
                if (isNamedParam(param)) {
                    return nullToUndefined(param);
                }
                else {
                    return [undefinedToNull(param)];
                }
            case messages_1.ParameterStructures.byName:
                if (!isNamedParam(param)) {
                    throw new Error(`Received parameters by name but param is not an object literal.`);
                }
                return nullToUndefined(param);
            case messages_1.ParameterStructures.byPosition:
                return [undefinedToNull(param)];
            default:
                throw new Error(`Unknown parameter structure ${parameterStructures.toString()}`);
        }
    }
    function computeMessageParams(type, params) {
        let result;
        const numberOfParams = type.numberOfParams;
        switch (numberOfParams) {
            case 0:
                result = undefined;
                break;
            case 1:
                result = computeSingleParam(type.parameterStructures, params[0]);
                break;
            default:
                result = [];
                for (let i = 0; i < params.length && i < numberOfParams; i++) {
                    result.push(undefinedToNull(params[i]));
                }
                if (params.length < numberOfParams) {
                    for (let i = params.length; i < numberOfParams; i++) {
                        result.push(null);
                    }
                }
                break;
        }
        return result;
    }
    const connection = {
        sendNotification: (type, ...args) => {
            throwIfClosedOrDisposed();
            let method;
            let messageParams;
            if (Is.string(type)) {
                method = type;
                const first = args[0];
                let paramStart = 0;
                let parameterStructures = messages_1.ParameterStructures.auto;
                if (messages_1.ParameterStructures.is(first)) {
                    paramStart = 1;
                    parameterStructures = first;
                }
                let paramEnd = args.length;
                const numberOfParams = paramEnd - paramStart;
                switch (numberOfParams) {
                    case 0:
                        messageParams = undefined;
                        break;
                    case 1:
                        messageParams = computeSingleParam(parameterStructures, args[paramStart]);
                        break;
                    default:
                        if (parameterStructures === messages_1.ParameterStructures.byName) {
                            throw new Error(`Received ${numberOfParams} parameters for 'by Name' notification parameter structure.`);
                        }
                        messageParams = args.slice(paramStart, paramEnd).map(value => undefinedToNull(value));
                        break;
                }
            }
            else {
                const params = args;
                method = type.method;
                messageParams = computeMessageParams(type, params);
            }
            const notificationMessage = {
                jsonrpc: version,
                method: method,
                params: messageParams
            };
            traceSendingNotification(notificationMessage);
            return messageWriter.write(notificationMessage).catch((error) => {
                logger.error(`Sending notification failed.`);
                throw error;
            });
        },
        onNotification: (type, handler) => {
            throwIfClosedOrDisposed();
            let method;
            if (Is.func(type)) {
                starNotificationHandler = type;
            }
            else if (handler) {
                if (Is.string(type)) {
                    method = type;
                    notificationHandlers.set(type, { type: undefined, handler });
                }
                else {
                    method = type.method;
                    notificationHandlers.set(type.method, { type, handler });
                }
            }
            return {
                dispose: () => {
                    if (method !== undefined) {
                        notificationHandlers.delete(method);
                    }
                    else {
                        starNotificationHandler = undefined;
                    }
                }
            };
        },
        onProgress: (_type, token, handler) => {
            if (progressHandlers.has(token)) {
                throw new Error(`Progress handler for token ${token} already registered`);
            }
            progressHandlers.set(token, handler);
            return {
                dispose: () => {
                    progressHandlers.delete(token);
                }
            };
        },
        sendProgress: (_type, token, value) => {
            // This should not await but simple return to ensure that we don't have another
            // async scheduling. Otherwise one send could overtake another send.
            return connection.sendNotification(ProgressNotification.type, { token, value });
        },
        onUnhandledProgress: unhandledProgressEmitter.event,
        sendRequest: (type, ...args) => {
            throwIfClosedOrDisposed();
            throwIfNotListening();
            let method;
            let messageParams;
            let token = undefined;
            if (Is.string(type)) {
                method = type;
                const first = args[0];
                const last = args[args.length - 1];
                let paramStart = 0;
                let parameterStructures = messages_1.ParameterStructures.auto;
                if (messages_1.ParameterStructures.is(first)) {
                    paramStart = 1;
                    parameterStructures = first;
                }
                let paramEnd = args.length;
                if (cancellation_1.CancellationToken.is(last)) {
                    paramEnd = paramEnd - 1;
                    token = last;
                }
                const numberOfParams = paramEnd - paramStart;
                switch (numberOfParams) {
                    case 0:
                        messageParams = undefined;
                        break;
                    case 1:
                        messageParams = computeSingleParam(parameterStructures, args[paramStart]);
                        break;
                    default:
                        if (parameterStructures === messages_1.ParameterStructures.byName) {
                            throw new Error(`Received ${numberOfParams} parameters for 'by Name' request parameter structure.`);
                        }
                        messageParams = args.slice(paramStart, paramEnd).map(value => undefinedToNull(value));
                        break;
                }
            }
            else {
                const params = args;
                method = type.method;
                messageParams = computeMessageParams(type, params);
                const numberOfParams = type.numberOfParams;
                token = cancellation_1.CancellationToken.is(params[numberOfParams]) ? params[numberOfParams] : undefined;
            }
            const id = sequenceNumber++;
            let disposable;
            if (token) {
                disposable = token.onCancellationRequested(() => {
                    const p = cancellationStrategy.sender.sendCancellation(connection, id);
                    if (p === undefined) {
                        logger.log(`Received no promise from cancellation strategy when cancelling id ${id}`);
                        return Promise.resolve();
                    }
                    else {
                        return p.catch(() => {
                            logger.log(`Sending cancellation messages for id ${id} failed`);
                        });
                    }
                });
            }
            const requestMessage = {
                jsonrpc: version,
                id: id,
                method: method,
                params: messageParams
            };
            traceSendingRequest(requestMessage);
            if (typeof cancellationStrategy.sender.enableCancellation === 'function') {
                cancellationStrategy.sender.enableCancellation(requestMessage);
            }
            return new Promise(async (resolve, reject) => {
                const resolveWithCleanup = (r) => {
                    resolve(r);
                    cancellationStrategy.sender.cleanup(id);
                    disposable?.dispose();
                };
                const rejectWithCleanup = (r) => {
                    reject(r);
                    cancellationStrategy.sender.cleanup(id);
                    disposable?.dispose();
                };
                const responsePromise = { method: method, timerStart: Date.now(), resolve: resolveWithCleanup, reject: rejectWithCleanup };
                try {
                    await messageWriter.write(requestMessage);
                    responsePromises.set(id, responsePromise);
                }
                catch (error) {
                    logger.error(`Sending request failed.`);
                    // Writing the message failed. So we need to reject the promise.
                    responsePromise.reject(new messages_1.ResponseError(messages_1.ErrorCodes.MessageWriteError, error.message ? error.message : 'Unknown reason'));
                    throw error;
                }
            });
        },
        onRequest: (type, handler) => {
            throwIfClosedOrDisposed();
            let method = null;
            if (StarRequestHandler.is(type)) {
                method = undefined;
                starRequestHandler = type;
            }
            else if (Is.string(type)) {
                method = null;
                if (handler !== undefined) {
                    method = type;
                    requestHandlers.set(type, { handler: handler, type: undefined });
                }
            }
            else {
                if (handler !== undefined) {
                    method = type.method;
                    requestHandlers.set(type.method, { type, handler });
                }
            }
            return {
                dispose: () => {
                    if (method === null) {
                        return;
                    }
                    if (method !== undefined) {
                        requestHandlers.delete(method);
                    }
                    else {
                        starRequestHandler = undefined;
                    }
                }
            };
        },
        hasPendingResponse: () => {
            return responsePromises.size > 0;
        },
        trace: async (_value, _tracer, sendNotificationOrTraceOptions) => {
            let _sendNotification = false;
            let _traceFormat = TraceFormat.Text;
            if (sendNotificationOrTraceOptions !== undefined) {
                if (Is.boolean(sendNotificationOrTraceOptions)) {
                    _sendNotification = sendNotificationOrTraceOptions;
                }
                else {
                    _sendNotification = sendNotificationOrTraceOptions.sendNotification || false;
                    _traceFormat = sendNotificationOrTraceOptions.traceFormat || TraceFormat.Text;
                }
            }
            trace = _value;
            traceFormat = _traceFormat;
            if (trace === Trace.Off) {
                tracer = undefined;
            }
            else {
                tracer = _tracer;
            }
            if (_sendNotification && !isClosed() && !isDisposed()) {
                await connection.sendNotification(SetTraceNotification.type, { value: Trace.toString(_value) });
            }
        },
        onError: errorEmitter.event,
        onClose: closeEmitter.event,
        onUnhandledNotification: unhandledNotificationEmitter.event,
        onDispose: disposeEmitter.event,
        end: () => {
            messageWriter.end();
        },
        dispose: () => {
            if (isDisposed()) {
                return;
            }
            state = ConnectionState.Disposed;
            disposeEmitter.fire(undefined);
            const error = new messages_1.ResponseError(messages_1.ErrorCodes.PendingResponseRejected, 'Pending response rejected since connection got disposed');
            for (const promise of responsePromises.values()) {
                promise.reject(error);
            }
            responsePromises = new Map();
            requestTokens = new Map();
            knownCanceledRequests = new Set();
            messageQueue = new linkedMap_1.LinkedMap();
            // Test for backwards compatibility
            if (Is.func(messageWriter.dispose)) {
                messageWriter.dispose();
            }
            if (Is.func(messageReader.dispose)) {
                messageReader.dispose();
            }
        },
        listen: () => {
            throwIfClosedOrDisposed();
            throwIfListening();
            state = ConnectionState.Listening;
            messageReader.listen(callback);
        },
        inspect: () => {
            // eslint-disable-next-line no-console
            (0, ral_1.default)().console.log('inspect');
        }
    };
    connection.onNotification(LogTraceNotification.type, (params) => {
        if (trace === Trace.Off || !tracer) {
            return;
        }
        const verbose = trace === Trace.Verbose || trace === Trace.Compact;
        tracer.log(params.message, verbose ? params.verbose : undefined);
    });
    connection.onNotification(ProgressNotification.type, (params) => {
        const handler = progressHandlers.get(params.token);
        if (handler) {
            handler(params.value);
        }
        else {
            unhandledProgressEmitter.fire(params);
        }
    });
    return connection;
}
exports.createMessageConnection = createMessageConnection;


/***/ }),

/***/ 8437:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Disposable = void 0;
var Disposable;
(function (Disposable) {
    function create(func) {
        return {
            dispose: func
        };
    }
    Disposable.create = create;
})(Disposable = exports.Disposable || (exports.Disposable = {}));


/***/ }),

/***/ 5165:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Emitter = exports.Event = void 0;
const ral_1 = __webpack_require__(5706);
var Event;
(function (Event) {
    const _disposable = { dispose() { } };
    Event.None = function () { return _disposable; };
})(Event = exports.Event || (exports.Event = {}));
class CallbackList {
    add(callback, context = null, bucket) {
        if (!this._callbacks) {
            this._callbacks = [];
            this._contexts = [];
        }
        this._callbacks.push(callback);
        this._contexts.push(context);
        if (Array.isArray(bucket)) {
            bucket.push({ dispose: () => this.remove(callback, context) });
        }
    }
    remove(callback, context = null) {
        if (!this._callbacks) {
            return;
        }
        let foundCallbackWithDifferentContext = false;
        for (let i = 0, len = this._callbacks.length; i < len; i++) {
            if (this._callbacks[i] === callback) {
                if (this._contexts[i] === context) {
                    // callback & context match => remove it
                    this._callbacks.splice(i, 1);
                    this._contexts.splice(i, 1);
                    return;
                }
                else {
                    foundCallbackWithDifferentContext = true;
                }
            }
        }
        if (foundCallbackWithDifferentContext) {
            throw new Error('When adding a listener with a context, you should remove it with the same context');
        }
    }
    invoke(...args) {
        if (!this._callbacks) {
            return [];
        }
        const ret = [], callbacks = this._callbacks.slice(0), contexts = this._contexts.slice(0);
        for (let i = 0, len = callbacks.length; i < len; i++) {
            try {
                ret.push(callbacks[i].apply(contexts[i], args));
            }
            catch (e) {
                // eslint-disable-next-line no-console
                (0, ral_1.default)().console.error(e);
            }
        }
        return ret;
    }
    isEmpty() {
        return !this._callbacks || this._callbacks.length === 0;
    }
    dispose() {
        this._callbacks = undefined;
        this._contexts = undefined;
    }
}
class Emitter {
    constructor(_options) {
        this._options = _options;
    }
    /**
     * For the public to allow to subscribe
     * to events from this Emitter
     */
    get event() {
        if (!this._event) {
            this._event = (listener, thisArgs, disposables) => {
                if (!this._callbacks) {
                    this._callbacks = new CallbackList();
                }
                if (this._options && this._options.onFirstListenerAdd && this._callbacks.isEmpty()) {
                    this._options.onFirstListenerAdd(this);
                }
                this._callbacks.add(listener, thisArgs);
                const result = {
                    dispose: () => {
                        if (!this._callbacks) {
                            // disposable is disposed after emitter is disposed.
                            return;
                        }
                        this._callbacks.remove(listener, thisArgs);
                        result.dispose = Emitter._noop;
                        if (this._options && this._options.onLastListenerRemove && this._callbacks.isEmpty()) {
                            this._options.onLastListenerRemove(this);
                        }
                    }
                };
                if (Array.isArray(disposables)) {
                    disposables.push(result);
                }
                return result;
            };
        }
        return this._event;
    }
    /**
     * To be kept private to fire an event to
     * subscribers
     */
    fire(event) {
        if (this._callbacks) {
            this._callbacks.invoke.call(this._callbacks, event);
        }
    }
    dispose() {
        if (this._callbacks) {
            this._callbacks.dispose();
            this._callbacks = undefined;
        }
    }
}
exports.Emitter = Emitter;
Emitter._noop = function () { };


/***/ }),

/***/ 8811:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.stringArray = exports.array = exports.func = exports.error = exports.number = exports.string = exports.boolean = void 0;
function boolean(value) {
    return value === true || value === false;
}
exports.boolean = boolean;
function string(value) {
    return typeof value === 'string' || value instanceof String;
}
exports.string = string;
function number(value) {
    return typeof value === 'number' || value instanceof Number;
}
exports.number = number;
function error(value) {
    return value instanceof Error;
}
exports.error = error;
function func(value) {
    return typeof value === 'function';
}
exports.func = func;
function array(value) {
    return Array.isArray(value);
}
exports.array = array;
function stringArray(value) {
    return array(value) && value.every(elem => string(elem));
}
exports.stringArray = stringArray;


/***/ }),

/***/ 7040:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
var _a;
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.LRUCache = exports.LinkedMap = exports.Touch = void 0;
var Touch;
(function (Touch) {
    Touch.None = 0;
    Touch.First = 1;
    Touch.AsOld = Touch.First;
    Touch.Last = 2;
    Touch.AsNew = Touch.Last;
})(Touch = exports.Touch || (exports.Touch = {}));
class LinkedMap {
    constructor() {
        this[_a] = 'LinkedMap';
        this._map = new Map();
        this._head = undefined;
        this._tail = undefined;
        this._size = 0;
        this._state = 0;
    }
    clear() {
        this._map.clear();
        this._head = undefined;
        this._tail = undefined;
        this._size = 0;
        this._state++;
    }
    isEmpty() {
        return !this._head && !this._tail;
    }
    get size() {
        return this._size;
    }
    get first() {
        return this._head?.value;
    }
    get last() {
        return this._tail?.value;
    }
    has(key) {
        return this._map.has(key);
    }
    get(key, touch = Touch.None) {
        const item = this._map.get(key);
        if (!item) {
            return undefined;
        }
        if (touch !== Touch.None) {
            this.touch(item, touch);
        }
        return item.value;
    }
    set(key, value, touch = Touch.None) {
        let item = this._map.get(key);
        if (item) {
            item.value = value;
            if (touch !== Touch.None) {
                this.touch(item, touch);
            }
        }
        else {
            item = { key, value, next: undefined, previous: undefined };
            switch (touch) {
                case Touch.None:
                    this.addItemLast(item);
                    break;
                case Touch.First:
                    this.addItemFirst(item);
                    break;
                case Touch.Last:
                    this.addItemLast(item);
                    break;
                default:
                    this.addItemLast(item);
                    break;
            }
            this._map.set(key, item);
            this._size++;
        }
        return this;
    }
    delete(key) {
        return !!this.remove(key);
    }
    remove(key) {
        const item = this._map.get(key);
        if (!item) {
            return undefined;
        }
        this._map.delete(key);
        this.removeItem(item);
        this._size--;
        return item.value;
    }
    shift() {
        if (!this._head && !this._tail) {
            return undefined;
        }
        if (!this._head || !this._tail) {
            throw new Error('Invalid list');
        }
        const item = this._head;
        this._map.delete(item.key);
        this.removeItem(item);
        this._size--;
        return item.value;
    }
    forEach(callbackfn, thisArg) {
        const state = this._state;
        let current = this._head;
        while (current) {
            if (thisArg) {
                callbackfn.bind(thisArg)(current.value, current.key, this);
            }
            else {
                callbackfn(current.value, current.key, this);
            }
            if (this._state !== state) {
                throw new Error(`LinkedMap got modified during iteration.`);
            }
            current = current.next;
        }
    }
    keys() {
        const state = this._state;
        let current = this._head;
        const iterator = {
            [Symbol.iterator]: () => {
                return iterator;
            },
            next: () => {
                if (this._state !== state) {
                    throw new Error(`LinkedMap got modified during iteration.`);
                }
                if (current) {
                    const result = { value: current.key, done: false };
                    current = current.next;
                    return result;
                }
                else {
                    return { value: undefined, done: true };
                }
            }
        };
        return iterator;
    }
    values() {
        const state = this._state;
        let current = this._head;
        const iterator = {
            [Symbol.iterator]: () => {
                return iterator;
            },
            next: () => {
                if (this._state !== state) {
                    throw new Error(`LinkedMap got modified during iteration.`);
                }
                if (current) {
                    const result = { value: current.value, done: false };
                    current = current.next;
                    return result;
                }
                else {
                    return { value: undefined, done: true };
                }
            }
        };
        return iterator;
    }
    entries() {
        const state = this._state;
        let current = this._head;
        const iterator = {
            [Symbol.iterator]: () => {
                return iterator;
            },
            next: () => {
                if (this._state !== state) {
                    throw new Error(`LinkedMap got modified during iteration.`);
                }
                if (current) {
                    const result = { value: [current.key, current.value], done: false };
                    current = current.next;
                    return result;
                }
                else {
                    return { value: undefined, done: true };
                }
            }
        };
        return iterator;
    }
    [(_a = Symbol.toStringTag, Symbol.iterator)]() {
        return this.entries();
    }
    trimOld(newSize) {
        if (newSize >= this.size) {
            return;
        }
        if (newSize === 0) {
            this.clear();
            return;
        }
        let current = this._head;
        let currentSize = this.size;
        while (current && currentSize > newSize) {
            this._map.delete(current.key);
            current = current.next;
            currentSize--;
        }
        this._head = current;
        this._size = currentSize;
        if (current) {
            current.previous = undefined;
        }
        this._state++;
    }
    addItemFirst(item) {
        // First time Insert
        if (!this._head && !this._tail) {
            this._tail = item;
        }
        else if (!this._head) {
            throw new Error('Invalid list');
        }
        else {
            item.next = this._head;
            this._head.previous = item;
        }
        this._head = item;
        this._state++;
    }
    addItemLast(item) {
        // First time Insert
        if (!this._head && !this._tail) {
            this._head = item;
        }
        else if (!this._tail) {
            throw new Error('Invalid list');
        }
        else {
            item.previous = this._tail;
            this._tail.next = item;
        }
        this._tail = item;
        this._state++;
    }
    removeItem(item) {
        if (item === this._head && item === this._tail) {
            this._head = undefined;
            this._tail = undefined;
        }
        else if (item === this._head) {
            // This can only happened if size === 1 which is handle
            // by the case above.
            if (!item.next) {
                throw new Error('Invalid list');
            }
            item.next.previous = undefined;
            this._head = item.next;
        }
        else if (item === this._tail) {
            // This can only happened if size === 1 which is handle
            // by the case above.
            if (!item.previous) {
                throw new Error('Invalid list');
            }
            item.previous.next = undefined;
            this._tail = item.previous;
        }
        else {
            const next = item.next;
            const previous = item.previous;
            if (!next || !previous) {
                throw new Error('Invalid list');
            }
            next.previous = previous;
            previous.next = next;
        }
        item.next = undefined;
        item.previous = undefined;
        this._state++;
    }
    touch(item, touch) {
        if (!this._head || !this._tail) {
            throw new Error('Invalid list');
        }
        if ((touch !== Touch.First && touch !== Touch.Last)) {
            return;
        }
        if (touch === Touch.First) {
            if (item === this._head) {
                return;
            }
            const next = item.next;
            const previous = item.previous;
            // Unlink the item
            if (item === this._tail) {
                // previous must be defined since item was not head but is tail
                // So there are more than on item in the map
                previous.next = undefined;
                this._tail = previous;
            }
            else {
                // Both next and previous are not undefined since item was neither head nor tail.
                next.previous = previous;
                previous.next = next;
            }
            // Insert the node at head
            item.previous = undefined;
            item.next = this._head;
            this._head.previous = item;
            this._head = item;
            this._state++;
        }
        else if (touch === Touch.Last) {
            if (item === this._tail) {
                return;
            }
            const next = item.next;
            const previous = item.previous;
            // Unlink the item.
            if (item === this._head) {
                // next must be defined since item was not tail but is head
                // So there are more than on item in the map
                next.previous = undefined;
                this._head = next;
            }
            else {
                // Both next and previous are not undefined since item was neither head nor tail.
                next.previous = previous;
                previous.next = next;
            }
            item.next = undefined;
            item.previous = this._tail;
            this._tail.next = item;
            this._tail = item;
            this._state++;
        }
    }
    toJSON() {
        const data = [];
        this.forEach((value, key) => {
            data.push([key, value]);
        });
        return data;
    }
    fromJSON(data) {
        this.clear();
        for (const [key, value] of data) {
            this.set(key, value);
        }
    }
}
exports.LinkedMap = LinkedMap;
class LRUCache extends LinkedMap {
    constructor(limit, ratio = 1) {
        super();
        this._limit = limit;
        this._ratio = Math.min(Math.max(0, ratio), 1);
    }
    get limit() {
        return this._limit;
    }
    set limit(limit) {
        this._limit = limit;
        this.checkTrim();
    }
    get ratio() {
        return this._ratio;
    }
    set ratio(ratio) {
        this._ratio = Math.min(Math.max(0, ratio), 1);
        this.checkTrim();
    }
    get(key, touch = Touch.AsNew) {
        return super.get(key, touch);
    }
    peek(key) {
        return super.get(key, Touch.None);
    }
    set(key, value) {
        super.set(key, value, Touch.Last);
        this.checkTrim();
        return this;
    }
    checkTrim() {
        if (this.size > this._limit) {
            this.trimOld(Math.round(this._limit * this._ratio));
        }
    }
}
exports.LRUCache = LRUCache;


/***/ }),

/***/ 8652:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AbstractMessageBuffer = void 0;
const CR = 13;
const LF = 10;
const CRLF = '\r\n';
class AbstractMessageBuffer {
    constructor(encoding = 'utf-8') {
        this._encoding = encoding;
        this._chunks = [];
        this._totalLength = 0;
    }
    get encoding() {
        return this._encoding;
    }
    append(chunk) {
        const toAppend = typeof chunk === 'string' ? this.fromString(chunk, this._encoding) : chunk;
        this._chunks.push(toAppend);
        this._totalLength += toAppend.byteLength;
    }
    tryReadHeaders(lowerCaseKeys = false) {
        if (this._chunks.length === 0) {
            return undefined;
        }
        let state = 0;
        let chunkIndex = 0;
        let offset = 0;
        let chunkBytesRead = 0;
        row: while (chunkIndex < this._chunks.length) {
            const chunk = this._chunks[chunkIndex];
            offset = 0;
            column: while (offset < chunk.length) {
                const value = chunk[offset];
                switch (value) {
                    case CR:
                        switch (state) {
                            case 0:
                                state = 1;
                                break;
                            case 2:
                                state = 3;
                                break;
                            default:
                                state = 0;
                        }
                        break;
                    case LF:
                        switch (state) {
                            case 1:
                                state = 2;
                                break;
                            case 3:
                                state = 4;
                                offset++;
                                break row;
                            default:
                                state = 0;
                        }
                        break;
                    default:
                        state = 0;
                }
                offset++;
            }
            chunkBytesRead += chunk.byteLength;
            chunkIndex++;
        }
        if (state !== 4) {
            return undefined;
        }
        // The buffer contains the two CRLF at the end. So we will
        // have two empty lines after the split at the end as well.
        const buffer = this._read(chunkBytesRead + offset);
        const result = new Map();
        const headers = this.toString(buffer, 'ascii').split(CRLF);
        if (headers.length < 2) {
            return result;
        }
        for (let i = 0; i < headers.length - 2; i++) {
            const header = headers[i];
            const index = header.indexOf(':');
            if (index === -1) {
                throw new Error('Message header must separate key and value using :');
            }
            const key = header.substr(0, index);
            const value = header.substr(index + 1).trim();
            result.set(lowerCaseKeys ? key.toLowerCase() : key, value);
        }
        return result;
    }
    tryReadBody(length) {
        if (this._totalLength < length) {
            return undefined;
        }
        return this._read(length);
    }
    get numberOfBytes() {
        return this._totalLength;
    }
    _read(byteCount) {
        if (byteCount === 0) {
            return this.emptyBuffer();
        }
        if (byteCount > this._totalLength) {
            throw new Error(`Cannot read so many bytes!`);
        }
        if (this._chunks[0].byteLength === byteCount) {
            // super fast path, precisely first chunk must be returned
            const chunk = this._chunks[0];
            this._chunks.shift();
            this._totalLength -= byteCount;
            return this.asNative(chunk);
        }
        if (this._chunks[0].byteLength > byteCount) {
            // fast path, the reading is entirely within the first chunk
            const chunk = this._chunks[0];
            const result = this.asNative(chunk, byteCount);
            this._chunks[0] = chunk.slice(byteCount);
            this._totalLength -= byteCount;
            return result;
        }
        const result = this.allocNative(byteCount);
        let resultOffset = 0;
        let chunkIndex = 0;
        while (byteCount > 0) {
            const chunk = this._chunks[chunkIndex];
            if (chunk.byteLength > byteCount) {
                // this chunk will survive
                const chunkPart = chunk.slice(0, byteCount);
                result.set(chunkPart, resultOffset);
                resultOffset += byteCount;
                this._chunks[chunkIndex] = chunk.slice(byteCount);
                this._totalLength -= byteCount;
                byteCount -= byteCount;
            }
            else {
                // this chunk will be entirely read
                result.set(chunk, resultOffset);
                resultOffset += chunk.byteLength;
                this._chunks.shift();
                this._totalLength -= chunk.byteLength;
                byteCount -= chunk.byteLength;
            }
        }
        return result;
    }
}
exports.AbstractMessageBuffer = AbstractMessageBuffer;


/***/ }),

/***/ 451:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ReadableStreamMessageReader = exports.AbstractMessageReader = exports.MessageReader = void 0;
const ral_1 = __webpack_require__(5706);
const Is = __webpack_require__(8811);
const events_1 = __webpack_require__(5165);
const semaphore_1 = __webpack_require__(2339);
var MessageReader;
(function (MessageReader) {
    function is(value) {
        let candidate = value;
        return candidate && Is.func(candidate.listen) && Is.func(candidate.dispose) &&
            Is.func(candidate.onError) && Is.func(candidate.onClose) && Is.func(candidate.onPartialMessage);
    }
    MessageReader.is = is;
})(MessageReader = exports.MessageReader || (exports.MessageReader = {}));
class AbstractMessageReader {
    constructor() {
        this.errorEmitter = new events_1.Emitter();
        this.closeEmitter = new events_1.Emitter();
        this.partialMessageEmitter = new events_1.Emitter();
    }
    dispose() {
        this.errorEmitter.dispose();
        this.closeEmitter.dispose();
    }
    get onError() {
        return this.errorEmitter.event;
    }
    fireError(error) {
        this.errorEmitter.fire(this.asError(error));
    }
    get onClose() {
        return this.closeEmitter.event;
    }
    fireClose() {
        this.closeEmitter.fire(undefined);
    }
    get onPartialMessage() {
        return this.partialMessageEmitter.event;
    }
    firePartialMessage(info) {
        this.partialMessageEmitter.fire(info);
    }
    asError(error) {
        if (error instanceof Error) {
            return error;
        }
        else {
            return new Error(`Reader received error. Reason: ${Is.string(error.message) ? error.message : 'unknown'}`);
        }
    }
}
exports.AbstractMessageReader = AbstractMessageReader;
var ResolvedMessageReaderOptions;
(function (ResolvedMessageReaderOptions) {
    function fromOptions(options) {
        let charset;
        let result;
        let contentDecoder;
        const contentDecoders = new Map();
        let contentTypeDecoder;
        const contentTypeDecoders = new Map();
        if (options === undefined || typeof options === 'string') {
            charset = options ?? 'utf-8';
        }
        else {
            charset = options.charset ?? 'utf-8';
            if (options.contentDecoder !== undefined) {
                contentDecoder = options.contentDecoder;
                contentDecoders.set(contentDecoder.name, contentDecoder);
            }
            if (options.contentDecoders !== undefined) {
                for (const decoder of options.contentDecoders) {
                    contentDecoders.set(decoder.name, decoder);
                }
            }
            if (options.contentTypeDecoder !== undefined) {
                contentTypeDecoder = options.contentTypeDecoder;
                contentTypeDecoders.set(contentTypeDecoder.name, contentTypeDecoder);
            }
            if (options.contentTypeDecoders !== undefined) {
                for (const decoder of options.contentTypeDecoders) {
                    contentTypeDecoders.set(decoder.name, decoder);
                }
            }
        }
        if (contentTypeDecoder === undefined) {
            contentTypeDecoder = (0, ral_1.default)().applicationJson.decoder;
            contentTypeDecoders.set(contentTypeDecoder.name, contentTypeDecoder);
        }
        return { charset, contentDecoder, contentDecoders, contentTypeDecoder, contentTypeDecoders };
    }
    ResolvedMessageReaderOptions.fromOptions = fromOptions;
})(ResolvedMessageReaderOptions || (ResolvedMessageReaderOptions = {}));
class ReadableStreamMessageReader extends AbstractMessageReader {
    constructor(readable, options) {
        super();
        this.readable = readable;
        this.options = ResolvedMessageReaderOptions.fromOptions(options);
        this.buffer = (0, ral_1.default)().messageBuffer.create(this.options.charset);
        this._partialMessageTimeout = 10000;
        this.nextMessageLength = -1;
        this.messageToken = 0;
        this.readSemaphore = new semaphore_1.Semaphore(1);
    }
    set partialMessageTimeout(timeout) {
        this._partialMessageTimeout = timeout;
    }
    get partialMessageTimeout() {
        return this._partialMessageTimeout;
    }
    listen(callback) {
        this.nextMessageLength = -1;
        this.messageToken = 0;
        this.partialMessageTimer = undefined;
        this.callback = callback;
        const result = this.readable.onData((data) => {
            this.onData(data);
        });
        this.readable.onError((error) => this.fireError(error));
        this.readable.onClose(() => this.fireClose());
        return result;
    }
    onData(data) {
        this.buffer.append(data);
        while (true) {
            if (this.nextMessageLength === -1) {
                const headers = this.buffer.tryReadHeaders(true);
                if (!headers) {
                    return;
                }
                const contentLength = headers.get('content-length');
                if (!contentLength) {
                    this.fireError(new Error('Header must provide a Content-Length property.'));
                    return;
                }
                const length = parseInt(contentLength);
                if (isNaN(length)) {
                    this.fireError(new Error('Content-Length value must be a number.'));
                    return;
                }
                this.nextMessageLength = length;
            }
            const body = this.buffer.tryReadBody(this.nextMessageLength);
            if (body === undefined) {
                /** We haven't received the full message yet. */
                this.setPartialMessageTimer();
                return;
            }
            this.clearPartialMessageTimer();
            this.nextMessageLength = -1;
            // Make sure that we convert one received message after the
            // other. Otherwise it could happen that a decoding of a second
            // smaller message finished before the decoding of a first larger
            // message and then we would deliver the second message first.
            this.readSemaphore.lock(async () => {
                const bytes = this.options.contentDecoder !== undefined
                    ? await this.options.contentDecoder.decode(body)
                    : body;
                const message = await this.options.contentTypeDecoder.decode(bytes, this.options);
                this.callback(message);
            }).catch((error) => {
                this.fireError(error);
            });
        }
    }
    clearPartialMessageTimer() {
        if (this.partialMessageTimer) {
            this.partialMessageTimer.dispose();
            this.partialMessageTimer = undefined;
        }
    }
    setPartialMessageTimer() {
        this.clearPartialMessageTimer();
        if (this._partialMessageTimeout <= 0) {
            return;
        }
        this.partialMessageTimer = (0, ral_1.default)().timer.setTimeout((token, timeout) => {
            this.partialMessageTimer = undefined;
            if (token === this.messageToken) {
                this.firePartialMessage({ messageToken: token, waitingTime: timeout });
                this.setPartialMessageTimer();
            }
        }, this._partialMessageTimeout, this.messageToken, this._partialMessageTimeout);
    }
}
exports.ReadableStreamMessageReader = ReadableStreamMessageReader;


/***/ }),

/***/ 1251:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.WriteableStreamMessageWriter = exports.AbstractMessageWriter = exports.MessageWriter = void 0;
const ral_1 = __webpack_require__(5706);
const Is = __webpack_require__(8811);
const semaphore_1 = __webpack_require__(2339);
const events_1 = __webpack_require__(5165);
const ContentLength = 'Content-Length: ';
const CRLF = '\r\n';
var MessageWriter;
(function (MessageWriter) {
    function is(value) {
        let candidate = value;
        return candidate && Is.func(candidate.dispose) && Is.func(candidate.onClose) &&
            Is.func(candidate.onError) && Is.func(candidate.write);
    }
    MessageWriter.is = is;
})(MessageWriter = exports.MessageWriter || (exports.MessageWriter = {}));
class AbstractMessageWriter {
    constructor() {
        this.errorEmitter = new events_1.Emitter();
        this.closeEmitter = new events_1.Emitter();
    }
    dispose() {
        this.errorEmitter.dispose();
        this.closeEmitter.dispose();
    }
    get onError() {
        return this.errorEmitter.event;
    }
    fireError(error, message, count) {
        this.errorEmitter.fire([this.asError(error), message, count]);
    }
    get onClose() {
        return this.closeEmitter.event;
    }
    fireClose() {
        this.closeEmitter.fire(undefined);
    }
    asError(error) {
        if (error instanceof Error) {
            return error;
        }
        else {
            return new Error(`Writer received error. Reason: ${Is.string(error.message) ? error.message : 'unknown'}`);
        }
    }
}
exports.AbstractMessageWriter = AbstractMessageWriter;
var ResolvedMessageWriterOptions;
(function (ResolvedMessageWriterOptions) {
    function fromOptions(options) {
        if (options === undefined || typeof options === 'string') {
            return { charset: options ?? 'utf-8', contentTypeEncoder: (0, ral_1.default)().applicationJson.encoder };
        }
        else {
            return { charset: options.charset ?? 'utf-8', contentEncoder: options.contentEncoder, contentTypeEncoder: options.contentTypeEncoder ?? (0, ral_1.default)().applicationJson.encoder };
        }
    }
    ResolvedMessageWriterOptions.fromOptions = fromOptions;
})(ResolvedMessageWriterOptions || (ResolvedMessageWriterOptions = {}));
class WriteableStreamMessageWriter extends AbstractMessageWriter {
    constructor(writable, options) {
        super();
        this.writable = writable;
        this.options = ResolvedMessageWriterOptions.fromOptions(options);
        this.errorCount = 0;
        this.writeSemaphore = new semaphore_1.Semaphore(1);
        this.writable.onError((error) => this.fireError(error));
        this.writable.onClose(() => this.fireClose());
    }
    async write(msg) {
        return this.writeSemaphore.lock(async () => {
            const payload = this.options.contentTypeEncoder.encode(msg, this.options).then((buffer) => {
                if (this.options.contentEncoder !== undefined) {
                    return this.options.contentEncoder.encode(buffer);
                }
                else {
                    return buffer;
                }
            });
            return payload.then((buffer) => {
                const headers = [];
                headers.push(ContentLength, buffer.byteLength.toString(), CRLF);
                headers.push(CRLF);
                return this.doWrite(msg, headers, buffer);
            }, (error) => {
                this.fireError(error);
                throw error;
            });
        });
    }
    async doWrite(msg, headers, data) {
        try {
            await this.writable.write(headers.join(''), 'ascii');
            return this.writable.write(data);
        }
        catch (error) {
            this.handleError(error, msg);
            return Promise.reject(error);
        }
    }
    handleError(error, msg) {
        this.errorCount++;
        this.fireError(error, msg, this.errorCount);
    }
    end() {
        this.writable.end();
    }
}
exports.WriteableStreamMessageWriter = WriteableStreamMessageWriter;


/***/ }),

/***/ 9141:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Message = exports.NotificationType9 = exports.NotificationType8 = exports.NotificationType7 = exports.NotificationType6 = exports.NotificationType5 = exports.NotificationType4 = exports.NotificationType3 = exports.NotificationType2 = exports.NotificationType1 = exports.NotificationType0 = exports.NotificationType = exports.RequestType9 = exports.RequestType8 = exports.RequestType7 = exports.RequestType6 = exports.RequestType5 = exports.RequestType4 = exports.RequestType3 = exports.RequestType2 = exports.RequestType1 = exports.RequestType = exports.RequestType0 = exports.AbstractMessageSignature = exports.ParameterStructures = exports.ResponseError = exports.ErrorCodes = void 0;
const is = __webpack_require__(8811);
/**
 * Predefined error codes.
 */
var ErrorCodes;
(function (ErrorCodes) {
    // Defined by JSON RPC
    ErrorCodes.ParseError = -32700;
    ErrorCodes.InvalidRequest = -32600;
    ErrorCodes.MethodNotFound = -32601;
    ErrorCodes.InvalidParams = -32602;
    ErrorCodes.InternalError = -32603;
    /**
     * This is the start range of JSON RPC reserved error codes.
     * It doesn't denote a real error code. No application error codes should
     * be defined between the start and end range. For backwards
     * compatibility the `ServerNotInitialized` and the `UnknownErrorCode`
     * are left in the range.
     *
     * @since 3.16.0
    */
    ErrorCodes.jsonrpcReservedErrorRangeStart = -32099;
    /** @deprecated use  jsonrpcReservedErrorRangeStart */
    ErrorCodes.serverErrorStart = -32099;
    /**
     * An error occurred when write a message to the transport layer.
     */
    ErrorCodes.MessageWriteError = -32099;
    /**
     * An error occurred when reading a message from the transport layer.
     */
    ErrorCodes.MessageReadError = -32098;
    /**
     * The connection got disposed or lost and all pending responses got
     * rejected.
     */
    ErrorCodes.PendingResponseRejected = -32097;
    /**
     * The connection is inactive and a use of it failed.
     */
    ErrorCodes.ConnectionInactive = -32096;
    /**
     * Error code indicating that a server received a notification or
     * request before the server has received the `initialize` request.
     */
    ErrorCodes.ServerNotInitialized = -32002;
    ErrorCodes.UnknownErrorCode = -32001;
    /**
     * This is the end range of JSON RPC reserved error codes.
     * It doesn't denote a real error code.
     *
     * @since 3.16.0
    */
    ErrorCodes.jsonrpcReservedErrorRangeEnd = -32000;
    /** @deprecated use  jsonrpcReservedErrorRangeEnd */
    ErrorCodes.serverErrorEnd = -32000;
})(ErrorCodes = exports.ErrorCodes || (exports.ErrorCodes = {}));
/**
 * An error object return in a response in case a request
 * has failed.
 */
class ResponseError extends Error {
    constructor(code, message, data) {
        super(message);
        this.code = is.number(code) ? code : ErrorCodes.UnknownErrorCode;
        this.data = data;
        Object.setPrototypeOf(this, ResponseError.prototype);
    }
    toJson() {
        const result = {
            code: this.code,
            message: this.message
        };
        if (this.data !== undefined) {
            result.data = this.data;
        }
        return result;
    }
}
exports.ResponseError = ResponseError;
class ParameterStructures {
    constructor(kind) {
        this.kind = kind;
    }
    static is(value) {
        return value === ParameterStructures.auto || value === ParameterStructures.byName || value === ParameterStructures.byPosition;
    }
    toString() {
        return this.kind;
    }
}
exports.ParameterStructures = ParameterStructures;
/**
 * The parameter structure is automatically inferred on the number of parameters
 * and the parameter type in case of a single param.
 */
ParameterStructures.auto = new ParameterStructures('auto');
/**
 * Forces `byPosition` parameter structure. This is useful if you have a single
 * parameter which has a literal type.
 */
ParameterStructures.byPosition = new ParameterStructures('byPosition');
/**
 * Forces `byName` parameter structure. This is only useful when having a single
 * parameter. The library will report errors if used with a different number of
 * parameters.
 */
ParameterStructures.byName = new ParameterStructures('byName');
/**
 * An abstract implementation of a MessageType.
 */
class AbstractMessageSignature {
    constructor(method, numberOfParams) {
        this.method = method;
        this.numberOfParams = numberOfParams;
    }
    get parameterStructures() {
        return ParameterStructures.auto;
    }
}
exports.AbstractMessageSignature = AbstractMessageSignature;
/**
 * Classes to type request response pairs
 */
class RequestType0 extends AbstractMessageSignature {
    constructor(method) {
        super(method, 0);
    }
}
exports.RequestType0 = RequestType0;
class RequestType extends AbstractMessageSignature {
    constructor(method, _parameterStructures = ParameterStructures.auto) {
        super(method, 1);
        this._parameterStructures = _parameterStructures;
    }
    get parameterStructures() {
        return this._parameterStructures;
    }
}
exports.RequestType = RequestType;
class RequestType1 extends AbstractMessageSignature {
    constructor(method, _parameterStructures = ParameterStructures.auto) {
        super(method, 1);
        this._parameterStructures = _parameterStructures;
    }
    get parameterStructures() {
        return this._parameterStructures;
    }
}
exports.RequestType1 = RequestType1;
class RequestType2 extends AbstractMessageSignature {
    constructor(method) {
        super(method, 2);
    }
}
exports.RequestType2 = RequestType2;
class RequestType3 extends AbstractMessageSignature {
    constructor(method) {
        super(method, 3);
    }
}
exports.RequestType3 = RequestType3;
class RequestType4 extends AbstractMessageSignature {
    constructor(method) {
        super(method, 4);
    }
}
exports.RequestType4 = RequestType4;
class RequestType5 extends AbstractMessageSignature {
    constructor(method) {
        super(method, 5);
    }
}
exports.RequestType5 = RequestType5;
class RequestType6 extends AbstractMessageSignature {
    constructor(method) {
        super(method, 6);
    }
}
exports.RequestType6 = RequestType6;
class RequestType7 extends AbstractMessageSignature {
    constructor(method) {
        super(method, 7);
    }
}
exports.RequestType7 = RequestType7;
class RequestType8 extends AbstractMessageSignature {
    constructor(method) {
        super(method, 8);
    }
}
exports.RequestType8 = RequestType8;
class RequestType9 extends AbstractMessageSignature {
    constructor(method) {
        super(method, 9);
    }
}
exports.RequestType9 = RequestType9;
class NotificationType extends AbstractMessageSignature {
    constructor(method, _parameterStructures = ParameterStructures.auto) {
        super(method, 1);
        this._parameterStructures = _parameterStructures;
    }
    get parameterStructures() {
        return this._parameterStructures;
    }
}
exports.NotificationType = NotificationType;
class NotificationType0 extends AbstractMessageSignature {
    constructor(method) {
        super(method, 0);
    }
}
exports.NotificationType0 = NotificationType0;
class NotificationType1 extends AbstractMessageSignature {
    constructor(method, _parameterStructures = ParameterStructures.auto) {
        super(method, 1);
        this._parameterStructures = _parameterStructures;
    }
    get parameterStructures() {
        return this._parameterStructures;
    }
}
exports.NotificationType1 = NotificationType1;
class NotificationType2 extends AbstractMessageSignature {
    constructor(method) {
        super(method, 2);
    }
}
exports.NotificationType2 = NotificationType2;
class NotificationType3 extends AbstractMessageSignature {
    constructor(method) {
        super(method, 3);
    }
}
exports.NotificationType3 = NotificationType3;
class NotificationType4 extends AbstractMessageSignature {
    constructor(method) {
        super(method, 4);
    }
}
exports.NotificationType4 = NotificationType4;
class NotificationType5 extends AbstractMessageSignature {
    constructor(method) {
        super(method, 5);
    }
}
exports.NotificationType5 = NotificationType5;
class NotificationType6 extends AbstractMessageSignature {
    constructor(method) {
        super(method, 6);
    }
}
exports.NotificationType6 = NotificationType6;
class NotificationType7 extends AbstractMessageSignature {
    constructor(method) {
        super(method, 7);
    }
}
exports.NotificationType7 = NotificationType7;
class NotificationType8 extends AbstractMessageSignature {
    constructor(method) {
        super(method, 8);
    }
}
exports.NotificationType8 = NotificationType8;
class NotificationType9 extends AbstractMessageSignature {
    constructor(method) {
        super(method, 9);
    }
}
exports.NotificationType9 = NotificationType9;
var Message;
(function (Message) {
    /**
     * Tests if the given message is a request message
     */
    function isRequest(message) {
        const candidate = message;
        return candidate && is.string(candidate.method) && (is.string(candidate.id) || is.number(candidate.id));
    }
    Message.isRequest = isRequest;
    /**
     * Tests if the given message is a notification message
     */
    function isNotification(message) {
        const candidate = message;
        return candidate && is.string(candidate.method) && message.id === void 0;
    }
    Message.isNotification = isNotification;
    /**
     * Tests if the given message is a response message
     */
    function isResponse(message) {
        const candidate = message;
        return candidate && (candidate.result !== void 0 || !!candidate.error) && (is.string(candidate.id) || is.number(candidate.id) || candidate.id === null);
    }
    Message.isResponse = isResponse;
})(Message = exports.Message || (exports.Message = {}));


/***/ }),

/***/ 5706:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
Object.defineProperty(exports, "__esModule", ({ value: true }));
let _ral;
function RAL() {
    if (_ral === undefined) {
        throw new Error(`No runtime abstraction layer installed`);
    }
    return _ral;
}
(function (RAL) {
    function install(ral) {
        if (ral === undefined) {
            throw new Error(`No runtime abstraction layer provided`);
        }
        _ral = ral;
    }
    RAL.install = install;
})(RAL || (RAL = {}));
exports["default"] = RAL;


/***/ }),

/***/ 2339:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Semaphore = void 0;
const ral_1 = __webpack_require__(5706);
class Semaphore {
    constructor(capacity = 1) {
        if (capacity <= 0) {
            throw new Error('Capacity must be greater than 0');
        }
        this._capacity = capacity;
        this._active = 0;
        this._waiting = [];
    }
    lock(thunk) {
        return new Promise((resolve, reject) => {
            this._waiting.push({ thunk, resolve, reject });
            this.runNext();
        });
    }
    get active() {
        return this._active;
    }
    runNext() {
        if (this._waiting.length === 0 || this._active === this._capacity) {
            return;
        }
        (0, ral_1.default)().timer.setImmediate(() => this.doRunNext());
    }
    doRunNext() {
        if (this._waiting.length === 0 || this._active === this._capacity) {
            return;
        }
        const next = this._waiting.shift();
        this._active++;
        if (this._active > this._capacity) {
            throw new Error(`To many thunks active`);
        }
        try {
            const result = next.thunk();
            if (result instanceof Promise) {
                result.then((value) => {
                    this._active--;
                    next.resolve(value);
                    this.runNext();
                }, (err) => {
                    this._active--;
                    next.reject(err);
                    this.runNext();
                });
            }
            else {
                this._active--;
                next.resolve(result);
                this.runNext();
            }
        }
        catch (err) {
            this._active--;
            next.reject(err);
            this.runNext();
        }
    }
}
exports.Semaphore = Semaphore;


/***/ }),

/***/ 178:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.SharedArrayReceiverStrategy = exports.SharedArraySenderStrategy = void 0;
const cancellation_1 = __webpack_require__(415);
var CancellationState;
(function (CancellationState) {
    CancellationState.Continue = 0;
    CancellationState.Cancelled = 1;
})(CancellationState || (CancellationState = {}));
class SharedArraySenderStrategy {
    constructor() {
        this.buffers = new Map();
    }
    enableCancellation(request) {
        if (request.id === null) {
            return;
        }
        const buffer = new SharedArrayBuffer(4);
        const data = new Int32Array(buffer, 0, 1);
        data[0] = CancellationState.Continue;
        this.buffers.set(request.id, buffer);
        request.$cancellationData = buffer;
    }
    async sendCancellation(_conn, id) {
        const buffer = this.buffers.get(id);
        if (buffer === undefined) {
            return;
        }
        const data = new Int32Array(buffer, 0, 1);
        Atomics.store(data, 0, CancellationState.Cancelled);
    }
    cleanup(id) {
        this.buffers.delete(id);
    }
    dispose() {
        this.buffers.clear();
    }
}
exports.SharedArraySenderStrategy = SharedArraySenderStrategy;
class SharedArrayBufferCancellationToken {
    constructor(buffer) {
        this.data = new Int32Array(buffer, 0, 1);
    }
    get isCancellationRequested() {
        return Atomics.load(this.data, 0) === CancellationState.Cancelled;
    }
    get onCancellationRequested() {
        throw new Error(`Cancellation over SharedArrayBuffer doesn't support cancellation events`);
    }
}
class SharedArrayBufferCancellationTokenSource {
    constructor(buffer) {
        this.token = new SharedArrayBufferCancellationToken(buffer);
    }
    cancel() {
    }
    dispose() {
    }
}
class SharedArrayReceiverStrategy {
    constructor() {
        this.kind = 'request';
    }
    createCancellationTokenSource(request) {
        const buffer = request.$cancellationData;
        if (buffer === undefined) {
            return new cancellation_1.CancellationTokenSource();
        }
        return new SharedArrayBufferCancellationTokenSource(buffer);
    }
}
exports.SharedArrayReceiverStrategy = SharedArrayReceiverStrategy;


/***/ }),

/***/ 294:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.createProtocolConnection = void 0;
const browser_1 = __webpack_require__(1200);
__exportStar(__webpack_require__(1200), exports);
__exportStar(__webpack_require__(9372), exports);
function createProtocolConnection(reader, writer, logger, options) {
    return (0, browser_1.createMessageConnection)(reader, writer, logger, options);
}
exports.createProtocolConnection = createProtocolConnection;


/***/ }),

/***/ 9372:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.LSPErrorCodes = exports.createProtocolConnection = void 0;
__exportStar(__webpack_require__(5953), exports);
__exportStar(__webpack_require__(4767), exports);
__exportStar(__webpack_require__(8599), exports);
__exportStar(__webpack_require__(6525), exports);
var connection_1 = __webpack_require__(2798);
Object.defineProperty(exports, "createProtocolConnection", ({ enumerable: true, get: function () { return connection_1.createProtocolConnection; } }));
var LSPErrorCodes;
(function (LSPErrorCodes) {
    /**
    * This is the start range of LSP reserved error codes.
    * It doesn't denote a real error code.
    *
    * @since 3.16.0
    */
    LSPErrorCodes.lspReservedErrorRangeStart = -32899;
    /**
     * A request failed but it was syntactically correct, e.g the
     * method name was known and the parameters were valid. The error
     * message should contain human readable information about why
     * the request failed.
     *
     * @since 3.17.0
     */
    LSPErrorCodes.RequestFailed = -32803;
    /**
     * The server cancelled the request. This error code should
     * only be used for requests that explicitly support being
     * server cancellable.
     *
     * @since 3.17.0
     */
    LSPErrorCodes.ServerCancelled = -32802;
    /**
     * The server detected that the content of a document got
     * modified outside normal conditions. A server should
     * NOT send this error code if it detects a content change
     * in it unprocessed messages. The result even computed
     * on an older state might still be useful for the client.
     *
     * If a client decides that a result is not of any use anymore
     * the client should cancel the request.
     */
    LSPErrorCodes.ContentModified = -32801;
    /**
     * The client has canceled a request and a server as detected
     * the cancel.
     */
    LSPErrorCodes.RequestCancelled = -32800;
    /**
    * This is the end range of LSP reserved error codes.
    * It doesn't denote a real error code.
    *
    * @since 3.16.0
    */
    LSPErrorCodes.lspReservedErrorRangeEnd = -32800;
})(LSPErrorCodes = exports.LSPErrorCodes || (exports.LSPErrorCodes = {}));


/***/ }),

/***/ 2798:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.createProtocolConnection = void 0;
const vscode_jsonrpc_1 = __webpack_require__(5953);
function createProtocolConnection(input, output, logger, options) {
    if (vscode_jsonrpc_1.ConnectionStrategy.is(options)) {
        options = { connectionStrategy: options };
    }
    return (0, vscode_jsonrpc_1.createMessageConnection)(input, output, logger, options);
}
exports.createProtocolConnection = createProtocolConnection;


/***/ }),

/***/ 8599:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ProtocolNotificationType = exports.ProtocolNotificationType0 = exports.ProtocolRequestType = exports.ProtocolRequestType0 = exports.RegistrationType = exports.MessageDirection = void 0;
const vscode_jsonrpc_1 = __webpack_require__(5953);
var MessageDirection;
(function (MessageDirection) {
    MessageDirection["clientToServer"] = "clientToServer";
    MessageDirection["serverToClient"] = "serverToClient";
    MessageDirection["both"] = "both";
})(MessageDirection = exports.MessageDirection || (exports.MessageDirection = {}));
class RegistrationType {
    constructor(method) {
        this.method = method;
    }
}
exports.RegistrationType = RegistrationType;
class ProtocolRequestType0 extends vscode_jsonrpc_1.RequestType0 {
    constructor(method) {
        super(method);
    }
}
exports.ProtocolRequestType0 = ProtocolRequestType0;
class ProtocolRequestType extends vscode_jsonrpc_1.RequestType {
    constructor(method) {
        super(method, vscode_jsonrpc_1.ParameterStructures.byName);
    }
}
exports.ProtocolRequestType = ProtocolRequestType;
class ProtocolNotificationType0 extends vscode_jsonrpc_1.NotificationType0 {
    constructor(method) {
        super(method);
    }
}
exports.ProtocolNotificationType0 = ProtocolNotificationType0;
class ProtocolNotificationType extends vscode_jsonrpc_1.NotificationType {
    constructor(method) {
        super(method, vscode_jsonrpc_1.ParameterStructures.byName);
    }
}
exports.ProtocolNotificationType = ProtocolNotificationType;


/***/ }),

/***/ 4434:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/* --------------------------------------------------------------------------------------------
 * Copyright (c) TypeFox, Microsoft and others. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.CallHierarchyOutgoingCallsRequest = exports.CallHierarchyIncomingCallsRequest = exports.CallHierarchyPrepareRequest = void 0;
const messages_1 = __webpack_require__(8599);
/**
 * A request to result a `CallHierarchyItem` in a document at a given position.
 * Can be used as an input to an incoming or outgoing call hierarchy.
 *
 * @since 3.16.0
 */
var CallHierarchyPrepareRequest;
(function (CallHierarchyPrepareRequest) {
    CallHierarchyPrepareRequest.method = 'textDocument/prepareCallHierarchy';
    CallHierarchyPrepareRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    CallHierarchyPrepareRequest.type = new messages_1.ProtocolRequestType(CallHierarchyPrepareRequest.method);
})(CallHierarchyPrepareRequest = exports.CallHierarchyPrepareRequest || (exports.CallHierarchyPrepareRequest = {}));
/**
 * A request to resolve the incoming calls for a given `CallHierarchyItem`.
 *
 * @since 3.16.0
 */
var CallHierarchyIncomingCallsRequest;
(function (CallHierarchyIncomingCallsRequest) {
    CallHierarchyIncomingCallsRequest.method = 'callHierarchy/incomingCalls';
    CallHierarchyIncomingCallsRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    CallHierarchyIncomingCallsRequest.type = new messages_1.ProtocolRequestType(CallHierarchyIncomingCallsRequest.method);
})(CallHierarchyIncomingCallsRequest = exports.CallHierarchyIncomingCallsRequest || (exports.CallHierarchyIncomingCallsRequest = {}));
/**
 * A request to resolve the outgoing calls for a given `CallHierarchyItem`.
 *
 * @since 3.16.0
 */
var CallHierarchyOutgoingCallsRequest;
(function (CallHierarchyOutgoingCallsRequest) {
    CallHierarchyOutgoingCallsRequest.method = 'callHierarchy/outgoingCalls';
    CallHierarchyOutgoingCallsRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    CallHierarchyOutgoingCallsRequest.type = new messages_1.ProtocolRequestType(CallHierarchyOutgoingCallsRequest.method);
})(CallHierarchyOutgoingCallsRequest = exports.CallHierarchyOutgoingCallsRequest || (exports.CallHierarchyOutgoingCallsRequest = {}));


/***/ }),

/***/ 7908:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ColorPresentationRequest = exports.DocumentColorRequest = void 0;
const messages_1 = __webpack_require__(8599);
/**
 * A request to list all color symbols found in a given text document. The request's
 * parameter is of type {@link DocumentColorParams} the
 * response is of type {@link ColorInformation ColorInformation[]} or a Thenable
 * that resolves to such.
 */
var DocumentColorRequest;
(function (DocumentColorRequest) {
    DocumentColorRequest.method = 'textDocument/documentColor';
    DocumentColorRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    DocumentColorRequest.type = new messages_1.ProtocolRequestType(DocumentColorRequest.method);
})(DocumentColorRequest = exports.DocumentColorRequest || (exports.DocumentColorRequest = {}));
/**
 * A request to list all presentation for a color. The request's
 * parameter is of type {@link ColorPresentationParams} the
 * response is of type {@link ColorInformation ColorInformation[]} or a Thenable
 * that resolves to such.
 */
var ColorPresentationRequest;
(function (ColorPresentationRequest) {
    ColorPresentationRequest.method = 'textDocument/colorPresentation';
    ColorPresentationRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    ColorPresentationRequest.type = new messages_1.ProtocolRequestType(ColorPresentationRequest.method);
})(ColorPresentationRequest = exports.ColorPresentationRequest || (exports.ColorPresentationRequest = {}));


/***/ }),

/***/ 5442:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ConfigurationRequest = void 0;
const messages_1 = __webpack_require__(8599);
//---- Get Configuration request ----
/**
 * The 'workspace/configuration' request is sent from the server to the client to fetch a certain
 * configuration setting.
 *
 * This pull model replaces the old push model were the client signaled configuration change via an
 * event. If the server still needs to react to configuration changes (since the server caches the
 * result of `workspace/configuration` requests) the server should register for an empty configuration
 * change event and empty the cache if such an event is received.
 */
var ConfigurationRequest;
(function (ConfigurationRequest) {
    ConfigurationRequest.method = 'workspace/configuration';
    ConfigurationRequest.messageDirection = messages_1.MessageDirection.serverToClient;
    ConfigurationRequest.type = new messages_1.ProtocolRequestType(ConfigurationRequest.method);
})(ConfigurationRequest = exports.ConfigurationRequest || (exports.ConfigurationRequest = {}));


/***/ }),

/***/ 7210:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DeclarationRequest = void 0;
const messages_1 = __webpack_require__(8599);
// @ts-ignore: to avoid inlining LocationLink as dynamic import
let __noDynamicImport;
/**
 * A request to resolve the type definition locations of a symbol at a given text
 * document position. The request's parameter is of type [TextDocumentPositionParams]
 * (#TextDocumentPositionParams) the response is of type {@link Declaration}
 * or a typed array of {@link DeclarationLink} or a Thenable that resolves
 * to such.
 */
var DeclarationRequest;
(function (DeclarationRequest) {
    DeclarationRequest.method = 'textDocument/declaration';
    DeclarationRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    DeclarationRequest.type = new messages_1.ProtocolRequestType(DeclarationRequest.method);
})(DeclarationRequest = exports.DeclarationRequest || (exports.DeclarationRequest = {}));


/***/ }),

/***/ 5692:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DiagnosticRefreshRequest = exports.WorkspaceDiagnosticRequest = exports.DocumentDiagnosticRequest = exports.DocumentDiagnosticReportKind = exports.DiagnosticServerCancellationData = void 0;
const vscode_jsonrpc_1 = __webpack_require__(5953);
const Is = __webpack_require__(2523);
const messages_1 = __webpack_require__(8599);
/**
 * @since 3.17.0
 */
var DiagnosticServerCancellationData;
(function (DiagnosticServerCancellationData) {
    function is(value) {
        const candidate = value;
        return candidate && Is.boolean(candidate.retriggerRequest);
    }
    DiagnosticServerCancellationData.is = is;
})(DiagnosticServerCancellationData = exports.DiagnosticServerCancellationData || (exports.DiagnosticServerCancellationData = {}));
/**
 * The document diagnostic report kinds.
 *
 * @since 3.17.0
 */
var DocumentDiagnosticReportKind;
(function (DocumentDiagnosticReportKind) {
    /**
     * A diagnostic report with a full
     * set of problems.
     */
    DocumentDiagnosticReportKind.Full = 'full';
    /**
     * A report indicating that the last
     * returned report is still accurate.
     */
    DocumentDiagnosticReportKind.Unchanged = 'unchanged';
})(DocumentDiagnosticReportKind = exports.DocumentDiagnosticReportKind || (exports.DocumentDiagnosticReportKind = {}));
/**
 * The document diagnostic request definition.
 *
 * @since 3.17.0
 */
var DocumentDiagnosticRequest;
(function (DocumentDiagnosticRequest) {
    DocumentDiagnosticRequest.method = 'textDocument/diagnostic';
    DocumentDiagnosticRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    DocumentDiagnosticRequest.type = new messages_1.ProtocolRequestType(DocumentDiagnosticRequest.method);
    DocumentDiagnosticRequest.partialResult = new vscode_jsonrpc_1.ProgressType();
})(DocumentDiagnosticRequest = exports.DocumentDiagnosticRequest || (exports.DocumentDiagnosticRequest = {}));
/**
 * The workspace diagnostic request definition.
 *
 * @since 3.17.0
 */
var WorkspaceDiagnosticRequest;
(function (WorkspaceDiagnosticRequest) {
    WorkspaceDiagnosticRequest.method = 'workspace/diagnostic';
    WorkspaceDiagnosticRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    WorkspaceDiagnosticRequest.type = new messages_1.ProtocolRequestType(WorkspaceDiagnosticRequest.method);
    WorkspaceDiagnosticRequest.partialResult = new vscode_jsonrpc_1.ProgressType();
})(WorkspaceDiagnosticRequest = exports.WorkspaceDiagnosticRequest || (exports.WorkspaceDiagnosticRequest = {}));
/**
 * The diagnostic refresh request definition.
 *
 * @since 3.17.0
 */
var DiagnosticRefreshRequest;
(function (DiagnosticRefreshRequest) {
    DiagnosticRefreshRequest.method = `workspace/diagnostic/refresh`;
    DiagnosticRefreshRequest.messageDirection = messages_1.MessageDirection.serverToClient;
    DiagnosticRefreshRequest.type = new messages_1.ProtocolRequestType0(DiagnosticRefreshRequest.method);
})(DiagnosticRefreshRequest = exports.DiagnosticRefreshRequest || (exports.DiagnosticRefreshRequest = {}));


/***/ }),

/***/ 6190:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.WillDeleteFilesRequest = exports.DidDeleteFilesNotification = exports.DidRenameFilesNotification = exports.WillRenameFilesRequest = exports.DidCreateFilesNotification = exports.WillCreateFilesRequest = exports.FileOperationPatternKind = void 0;
const messages_1 = __webpack_require__(8599);
/**
 * A pattern kind describing if a glob pattern matches a file a folder or
 * both.
 *
 * @since 3.16.0
 */
var FileOperationPatternKind;
(function (FileOperationPatternKind) {
    /**
     * The pattern matches a file only.
     */
    FileOperationPatternKind.file = 'file';
    /**
     * The pattern matches a folder only.
     */
    FileOperationPatternKind.folder = 'folder';
})(FileOperationPatternKind = exports.FileOperationPatternKind || (exports.FileOperationPatternKind = {}));
/**
 * The will create files request is sent from the client to the server before files are actually
 * created as long as the creation is triggered from within the client.
 *
 * The request can return a `WorkspaceEdit` which will be applied to workspace before the
 * files are created. Hence the `WorkspaceEdit` can not manipulate the content of the file
 * to be created.
 *
 * @since 3.16.0
 */
var WillCreateFilesRequest;
(function (WillCreateFilesRequest) {
    WillCreateFilesRequest.method = 'workspace/willCreateFiles';
    WillCreateFilesRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    WillCreateFilesRequest.type = new messages_1.ProtocolRequestType(WillCreateFilesRequest.method);
})(WillCreateFilesRequest = exports.WillCreateFilesRequest || (exports.WillCreateFilesRequest = {}));
/**
 * The did create files notification is sent from the client to the server when
 * files were created from within the client.
 *
 * @since 3.16.0
 */
var DidCreateFilesNotification;
(function (DidCreateFilesNotification) {
    DidCreateFilesNotification.method = 'workspace/didCreateFiles';
    DidCreateFilesNotification.messageDirection = messages_1.MessageDirection.clientToServer;
    DidCreateFilesNotification.type = new messages_1.ProtocolNotificationType(DidCreateFilesNotification.method);
})(DidCreateFilesNotification = exports.DidCreateFilesNotification || (exports.DidCreateFilesNotification = {}));
/**
 * The will rename files request is sent from the client to the server before files are actually
 * renamed as long as the rename is triggered from within the client.
 *
 * @since 3.16.0
 */
var WillRenameFilesRequest;
(function (WillRenameFilesRequest) {
    WillRenameFilesRequest.method = 'workspace/willRenameFiles';
    WillRenameFilesRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    WillRenameFilesRequest.type = new messages_1.ProtocolRequestType(WillRenameFilesRequest.method);
})(WillRenameFilesRequest = exports.WillRenameFilesRequest || (exports.WillRenameFilesRequest = {}));
/**
 * The did rename files notification is sent from the client to the server when
 * files were renamed from within the client.
 *
 * @since 3.16.0
 */
var DidRenameFilesNotification;
(function (DidRenameFilesNotification) {
    DidRenameFilesNotification.method = 'workspace/didRenameFiles';
    DidRenameFilesNotification.messageDirection = messages_1.MessageDirection.clientToServer;
    DidRenameFilesNotification.type = new messages_1.ProtocolNotificationType(DidRenameFilesNotification.method);
})(DidRenameFilesNotification = exports.DidRenameFilesNotification || (exports.DidRenameFilesNotification = {}));
/**
 * The will delete files request is sent from the client to the server before files are actually
 * deleted as long as the deletion is triggered from within the client.
 *
 * @since 3.16.0
 */
var DidDeleteFilesNotification;
(function (DidDeleteFilesNotification) {
    DidDeleteFilesNotification.method = 'workspace/didDeleteFiles';
    DidDeleteFilesNotification.messageDirection = messages_1.MessageDirection.clientToServer;
    DidDeleteFilesNotification.type = new messages_1.ProtocolNotificationType(DidDeleteFilesNotification.method);
})(DidDeleteFilesNotification = exports.DidDeleteFilesNotification || (exports.DidDeleteFilesNotification = {}));
/**
 * The did delete files notification is sent from the client to the server when
 * files were deleted from within the client.
 *
 * @since 3.16.0
 */
var WillDeleteFilesRequest;
(function (WillDeleteFilesRequest) {
    WillDeleteFilesRequest.method = 'workspace/willDeleteFiles';
    WillDeleteFilesRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    WillDeleteFilesRequest.type = new messages_1.ProtocolRequestType(WillDeleteFilesRequest.method);
})(WillDeleteFilesRequest = exports.WillDeleteFilesRequest || (exports.WillDeleteFilesRequest = {}));


/***/ }),

/***/ 7029:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.FoldingRangeRequest = void 0;
const messages_1 = __webpack_require__(8599);
/**
 * A request to provide folding ranges in a document. The request's
 * parameter is of type {@link FoldingRangeParams}, the
 * response is of type {@link FoldingRangeList} or a Thenable
 * that resolves to such.
 */
var FoldingRangeRequest;
(function (FoldingRangeRequest) {
    FoldingRangeRequest.method = 'textDocument/foldingRange';
    FoldingRangeRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    FoldingRangeRequest.type = new messages_1.ProtocolRequestType(FoldingRangeRequest.method);
})(FoldingRangeRequest = exports.FoldingRangeRequest || (exports.FoldingRangeRequest = {}));


/***/ }),

/***/ 9380:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ImplementationRequest = void 0;
const messages_1 = __webpack_require__(8599);
// @ts-ignore: to avoid inlining LocationLink as dynamic import
let __noDynamicImport;
/**
 * A request to resolve the implementation locations of a symbol at a given text
 * document position. The request's parameter is of type [TextDocumentPositionParams]
 * (#TextDocumentPositionParams) the response is of type {@link Definition} or a
 * Thenable that resolves to such.
 */
var ImplementationRequest;
(function (ImplementationRequest) {
    ImplementationRequest.method = 'textDocument/implementation';
    ImplementationRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    ImplementationRequest.type = new messages_1.ProtocolRequestType(ImplementationRequest.method);
})(ImplementationRequest = exports.ImplementationRequest || (exports.ImplementationRequest = {}));


/***/ }),

/***/ 6315:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.InlayHintRefreshRequest = exports.InlayHintResolveRequest = exports.InlayHintRequest = void 0;
const messages_1 = __webpack_require__(8599);
/**
 * A request to provide inlay hints in a document. The request's parameter is of
 * type {@link InlayHintsParams}, the response is of type
 * {@link InlayHint InlayHint[]} or a Thenable that resolves to such.
 *
 * @since 3.17.0
 */
var InlayHintRequest;
(function (InlayHintRequest) {
    InlayHintRequest.method = 'textDocument/inlayHint';
    InlayHintRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    InlayHintRequest.type = new messages_1.ProtocolRequestType(InlayHintRequest.method);
})(InlayHintRequest = exports.InlayHintRequest || (exports.InlayHintRequest = {}));
/**
 * A request to resolve additional properties for an inlay hint.
 * The request's parameter is of type {@link InlayHint}, the response is
 * of type {@link InlayHint} or a Thenable that resolves to such.
 *
 * @since 3.17.0
 */
var InlayHintResolveRequest;
(function (InlayHintResolveRequest) {
    InlayHintResolveRequest.method = 'inlayHint/resolve';
    InlayHintResolveRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    InlayHintResolveRequest.type = new messages_1.ProtocolRequestType(InlayHintResolveRequest.method);
})(InlayHintResolveRequest = exports.InlayHintResolveRequest || (exports.InlayHintResolveRequest = {}));
/**
 * @since 3.17.0
 */
var InlayHintRefreshRequest;
(function (InlayHintRefreshRequest) {
    InlayHintRefreshRequest.method = `workspace/inlayHint/refresh`;
    InlayHintRefreshRequest.messageDirection = messages_1.MessageDirection.serverToClient;
    InlayHintRefreshRequest.type = new messages_1.ProtocolRequestType0(InlayHintRefreshRequest.method);
})(InlayHintRefreshRequest = exports.InlayHintRefreshRequest || (exports.InlayHintRefreshRequest = {}));


/***/ }),

/***/ 7425:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.InlineValueRefreshRequest = exports.InlineValueRequest = void 0;
const messages_1 = __webpack_require__(8599);
/**
 * A request to provide inline values in a document. The request's parameter is of
 * type {@link InlineValueParams}, the response is of type
 * {@link InlineValue InlineValue[]} or a Thenable that resolves to such.
 *
 * @since 3.17.0
 */
var InlineValueRequest;
(function (InlineValueRequest) {
    InlineValueRequest.method = 'textDocument/inlineValue';
    InlineValueRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    InlineValueRequest.type = new messages_1.ProtocolRequestType(InlineValueRequest.method);
})(InlineValueRequest = exports.InlineValueRequest || (exports.InlineValueRequest = {}));
/**
 * @since 3.17.0
 */
var InlineValueRefreshRequest;
(function (InlineValueRefreshRequest) {
    InlineValueRefreshRequest.method = `workspace/inlineValue/refresh`;
    InlineValueRefreshRequest.messageDirection = messages_1.MessageDirection.serverToClient;
    InlineValueRefreshRequest.type = new messages_1.ProtocolRequestType0(InlineValueRefreshRequest.method);
})(InlineValueRefreshRequest = exports.InlineValueRefreshRequest || (exports.InlineValueRefreshRequest = {}));


/***/ }),

/***/ 6525:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.WorkspaceSymbolRequest = exports.CodeActionResolveRequest = exports.CodeActionRequest = exports.DocumentSymbolRequest = exports.DocumentHighlightRequest = exports.ReferencesRequest = exports.DefinitionRequest = exports.SignatureHelpRequest = exports.SignatureHelpTriggerKind = exports.HoverRequest = exports.CompletionResolveRequest = exports.CompletionRequest = exports.CompletionTriggerKind = exports.PublishDiagnosticsNotification = exports.WatchKind = exports.RelativePattern = exports.FileChangeType = exports.DidChangeWatchedFilesNotification = exports.WillSaveTextDocumentWaitUntilRequest = exports.WillSaveTextDocumentNotification = exports.TextDocumentSaveReason = exports.DidSaveTextDocumentNotification = exports.DidCloseTextDocumentNotification = exports.DidChangeTextDocumentNotification = exports.TextDocumentContentChangeEvent = exports.DidOpenTextDocumentNotification = exports.TextDocumentSyncKind = exports.TelemetryEventNotification = exports.LogMessageNotification = exports.ShowMessageRequest = exports.ShowMessageNotification = exports.MessageType = exports.DidChangeConfigurationNotification = exports.ExitNotification = exports.ShutdownRequest = exports.InitializedNotification = exports.InitializeErrorCodes = exports.InitializeRequest = exports.WorkDoneProgressOptions = exports.TextDocumentRegistrationOptions = exports.StaticRegistrationOptions = exports.PositionEncodingKind = exports.FailureHandlingKind = exports.ResourceOperationKind = exports.UnregistrationRequest = exports.RegistrationRequest = exports.DocumentSelector = exports.NotebookCellTextDocumentFilter = exports.NotebookDocumentFilter = exports.TextDocumentFilter = void 0;
exports.TypeHierarchySubtypesRequest = exports.TypeHierarchyPrepareRequest = exports.MonikerRequest = exports.MonikerKind = exports.UniquenessLevel = exports.WillDeleteFilesRequest = exports.DidDeleteFilesNotification = exports.WillRenameFilesRequest = exports.DidRenameFilesNotification = exports.WillCreateFilesRequest = exports.DidCreateFilesNotification = exports.FileOperationPatternKind = exports.LinkedEditingRangeRequest = exports.ShowDocumentRequest = exports.SemanticTokensRegistrationType = exports.SemanticTokensRefreshRequest = exports.SemanticTokensRangeRequest = exports.SemanticTokensDeltaRequest = exports.SemanticTokensRequest = exports.TokenFormat = exports.CallHierarchyPrepareRequest = exports.CallHierarchyOutgoingCallsRequest = exports.CallHierarchyIncomingCallsRequest = exports.WorkDoneProgressCancelNotification = exports.WorkDoneProgressCreateRequest = exports.WorkDoneProgress = exports.SelectionRangeRequest = exports.DeclarationRequest = exports.FoldingRangeRequest = exports.ColorPresentationRequest = exports.DocumentColorRequest = exports.ConfigurationRequest = exports.DidChangeWorkspaceFoldersNotification = exports.WorkspaceFoldersRequest = exports.TypeDefinitionRequest = exports.ImplementationRequest = exports.ApplyWorkspaceEditRequest = exports.ExecuteCommandRequest = exports.PrepareRenameRequest = exports.RenameRequest = exports.PrepareSupportDefaultBehavior = exports.DocumentOnTypeFormattingRequest = exports.DocumentRangeFormattingRequest = exports.DocumentFormattingRequest = exports.DocumentLinkResolveRequest = exports.DocumentLinkRequest = exports.CodeLensRefreshRequest = exports.CodeLensResolveRequest = exports.CodeLensRequest = exports.WorkspaceSymbolResolveRequest = void 0;
exports.DidCloseNotebookDocumentNotification = exports.DidSaveNotebookDocumentNotification = exports.DidChangeNotebookDocumentNotification = exports.NotebookCellArrayChange = exports.DidOpenNotebookDocumentNotification = exports.NotebookDocumentSyncRegistrationType = exports.NotebookDocument = exports.NotebookCell = exports.ExecutionSummary = exports.NotebookCellKind = exports.DiagnosticRefreshRequest = exports.WorkspaceDiagnosticRequest = exports.DocumentDiagnosticRequest = exports.DocumentDiagnosticReportKind = exports.DiagnosticServerCancellationData = exports.InlayHintRefreshRequest = exports.InlayHintResolveRequest = exports.InlayHintRequest = exports.InlineValueRefreshRequest = exports.InlineValueRequest = exports.TypeHierarchySupertypesRequest = void 0;
const messages_1 = __webpack_require__(8599);
const vscode_languageserver_types_1 = __webpack_require__(4767);
const Is = __webpack_require__(2523);
const protocol_implementation_1 = __webpack_require__(9380);
Object.defineProperty(exports, "ImplementationRequest", ({ enumerable: true, get: function () { return protocol_implementation_1.ImplementationRequest; } }));
const protocol_typeDefinition_1 = __webpack_require__(8642);
Object.defineProperty(exports, "TypeDefinitionRequest", ({ enumerable: true, get: function () { return protocol_typeDefinition_1.TypeDefinitionRequest; } }));
const protocol_workspaceFolder_1 = __webpack_require__(3402);
Object.defineProperty(exports, "WorkspaceFoldersRequest", ({ enumerable: true, get: function () { return protocol_workspaceFolder_1.WorkspaceFoldersRequest; } }));
Object.defineProperty(exports, "DidChangeWorkspaceFoldersNotification", ({ enumerable: true, get: function () { return protocol_workspaceFolder_1.DidChangeWorkspaceFoldersNotification; } }));
const protocol_configuration_1 = __webpack_require__(5442);
Object.defineProperty(exports, "ConfigurationRequest", ({ enumerable: true, get: function () { return protocol_configuration_1.ConfigurationRequest; } }));
const protocol_colorProvider_1 = __webpack_require__(7908);
Object.defineProperty(exports, "DocumentColorRequest", ({ enumerable: true, get: function () { return protocol_colorProvider_1.DocumentColorRequest; } }));
Object.defineProperty(exports, "ColorPresentationRequest", ({ enumerable: true, get: function () { return protocol_colorProvider_1.ColorPresentationRequest; } }));
const protocol_foldingRange_1 = __webpack_require__(7029);
Object.defineProperty(exports, "FoldingRangeRequest", ({ enumerable: true, get: function () { return protocol_foldingRange_1.FoldingRangeRequest; } }));
const protocol_declaration_1 = __webpack_require__(7210);
Object.defineProperty(exports, "DeclarationRequest", ({ enumerable: true, get: function () { return protocol_declaration_1.DeclarationRequest; } }));
const protocol_selectionRange_1 = __webpack_require__(2392);
Object.defineProperty(exports, "SelectionRangeRequest", ({ enumerable: true, get: function () { return protocol_selectionRange_1.SelectionRangeRequest; } }));
const protocol_progress_1 = __webpack_require__(7895);
Object.defineProperty(exports, "WorkDoneProgress", ({ enumerable: true, get: function () { return protocol_progress_1.WorkDoneProgress; } }));
Object.defineProperty(exports, "WorkDoneProgressCreateRequest", ({ enumerable: true, get: function () { return protocol_progress_1.WorkDoneProgressCreateRequest; } }));
Object.defineProperty(exports, "WorkDoneProgressCancelNotification", ({ enumerable: true, get: function () { return protocol_progress_1.WorkDoneProgressCancelNotification; } }));
const protocol_callHierarchy_1 = __webpack_require__(4434);
Object.defineProperty(exports, "CallHierarchyIncomingCallsRequest", ({ enumerable: true, get: function () { return protocol_callHierarchy_1.CallHierarchyIncomingCallsRequest; } }));
Object.defineProperty(exports, "CallHierarchyOutgoingCallsRequest", ({ enumerable: true, get: function () { return protocol_callHierarchy_1.CallHierarchyOutgoingCallsRequest; } }));
Object.defineProperty(exports, "CallHierarchyPrepareRequest", ({ enumerable: true, get: function () { return protocol_callHierarchy_1.CallHierarchyPrepareRequest; } }));
const protocol_semanticTokens_1 = __webpack_require__(8489);
Object.defineProperty(exports, "TokenFormat", ({ enumerable: true, get: function () { return protocol_semanticTokens_1.TokenFormat; } }));
Object.defineProperty(exports, "SemanticTokensRequest", ({ enumerable: true, get: function () { return protocol_semanticTokens_1.SemanticTokensRequest; } }));
Object.defineProperty(exports, "SemanticTokensDeltaRequest", ({ enumerable: true, get: function () { return protocol_semanticTokens_1.SemanticTokensDeltaRequest; } }));
Object.defineProperty(exports, "SemanticTokensRangeRequest", ({ enumerable: true, get: function () { return protocol_semanticTokens_1.SemanticTokensRangeRequest; } }));
Object.defineProperty(exports, "SemanticTokensRefreshRequest", ({ enumerable: true, get: function () { return protocol_semanticTokens_1.SemanticTokensRefreshRequest; } }));
Object.defineProperty(exports, "SemanticTokensRegistrationType", ({ enumerable: true, get: function () { return protocol_semanticTokens_1.SemanticTokensRegistrationType; } }));
const protocol_showDocument_1 = __webpack_require__(1541);
Object.defineProperty(exports, "ShowDocumentRequest", ({ enumerable: true, get: function () { return protocol_showDocument_1.ShowDocumentRequest; } }));
const protocol_linkedEditingRange_1 = __webpack_require__(527);
Object.defineProperty(exports, "LinkedEditingRangeRequest", ({ enumerable: true, get: function () { return protocol_linkedEditingRange_1.LinkedEditingRangeRequest; } }));
const protocol_fileOperations_1 = __webpack_require__(6190);
Object.defineProperty(exports, "FileOperationPatternKind", ({ enumerable: true, get: function () { return protocol_fileOperations_1.FileOperationPatternKind; } }));
Object.defineProperty(exports, "DidCreateFilesNotification", ({ enumerable: true, get: function () { return protocol_fileOperations_1.DidCreateFilesNotification; } }));
Object.defineProperty(exports, "WillCreateFilesRequest", ({ enumerable: true, get: function () { return protocol_fileOperations_1.WillCreateFilesRequest; } }));
Object.defineProperty(exports, "DidRenameFilesNotification", ({ enumerable: true, get: function () { return protocol_fileOperations_1.DidRenameFilesNotification; } }));
Object.defineProperty(exports, "WillRenameFilesRequest", ({ enumerable: true, get: function () { return protocol_fileOperations_1.WillRenameFilesRequest; } }));
Object.defineProperty(exports, "DidDeleteFilesNotification", ({ enumerable: true, get: function () { return protocol_fileOperations_1.DidDeleteFilesNotification; } }));
Object.defineProperty(exports, "WillDeleteFilesRequest", ({ enumerable: true, get: function () { return protocol_fileOperations_1.WillDeleteFilesRequest; } }));
const protocol_moniker_1 = __webpack_require__(1964);
Object.defineProperty(exports, "UniquenessLevel", ({ enumerable: true, get: function () { return protocol_moniker_1.UniquenessLevel; } }));
Object.defineProperty(exports, "MonikerKind", ({ enumerable: true, get: function () { return protocol_moniker_1.MonikerKind; } }));
Object.defineProperty(exports, "MonikerRequest", ({ enumerable: true, get: function () { return protocol_moniker_1.MonikerRequest; } }));
const protocol_typeHierarchy_1 = __webpack_require__(5318);
Object.defineProperty(exports, "TypeHierarchyPrepareRequest", ({ enumerable: true, get: function () { return protocol_typeHierarchy_1.TypeHierarchyPrepareRequest; } }));
Object.defineProperty(exports, "TypeHierarchySubtypesRequest", ({ enumerable: true, get: function () { return protocol_typeHierarchy_1.TypeHierarchySubtypesRequest; } }));
Object.defineProperty(exports, "TypeHierarchySupertypesRequest", ({ enumerable: true, get: function () { return protocol_typeHierarchy_1.TypeHierarchySupertypesRequest; } }));
const protocol_inlineValue_1 = __webpack_require__(7425);
Object.defineProperty(exports, "InlineValueRequest", ({ enumerable: true, get: function () { return protocol_inlineValue_1.InlineValueRequest; } }));
Object.defineProperty(exports, "InlineValueRefreshRequest", ({ enumerable: true, get: function () { return protocol_inlineValue_1.InlineValueRefreshRequest; } }));
const protocol_inlayHint_1 = __webpack_require__(6315);
Object.defineProperty(exports, "InlayHintRequest", ({ enumerable: true, get: function () { return protocol_inlayHint_1.InlayHintRequest; } }));
Object.defineProperty(exports, "InlayHintResolveRequest", ({ enumerable: true, get: function () { return protocol_inlayHint_1.InlayHintResolveRequest; } }));
Object.defineProperty(exports, "InlayHintRefreshRequest", ({ enumerable: true, get: function () { return protocol_inlayHint_1.InlayHintRefreshRequest; } }));
const protocol_diagnostic_1 = __webpack_require__(5692);
Object.defineProperty(exports, "DiagnosticServerCancellationData", ({ enumerable: true, get: function () { return protocol_diagnostic_1.DiagnosticServerCancellationData; } }));
Object.defineProperty(exports, "DocumentDiagnosticReportKind", ({ enumerable: true, get: function () { return protocol_diagnostic_1.DocumentDiagnosticReportKind; } }));
Object.defineProperty(exports, "DocumentDiagnosticRequest", ({ enumerable: true, get: function () { return protocol_diagnostic_1.DocumentDiagnosticRequest; } }));
Object.defineProperty(exports, "WorkspaceDiagnosticRequest", ({ enumerable: true, get: function () { return protocol_diagnostic_1.WorkspaceDiagnosticRequest; } }));
Object.defineProperty(exports, "DiagnosticRefreshRequest", ({ enumerable: true, get: function () { return protocol_diagnostic_1.DiagnosticRefreshRequest; } }));
const protocol_notebook_1 = __webpack_require__(4460);
Object.defineProperty(exports, "NotebookCellKind", ({ enumerable: true, get: function () { return protocol_notebook_1.NotebookCellKind; } }));
Object.defineProperty(exports, "ExecutionSummary", ({ enumerable: true, get: function () { return protocol_notebook_1.ExecutionSummary; } }));
Object.defineProperty(exports, "NotebookCell", ({ enumerable: true, get: function () { return protocol_notebook_1.NotebookCell; } }));
Object.defineProperty(exports, "NotebookDocument", ({ enumerable: true, get: function () { return protocol_notebook_1.NotebookDocument; } }));
Object.defineProperty(exports, "NotebookDocumentSyncRegistrationType", ({ enumerable: true, get: function () { return protocol_notebook_1.NotebookDocumentSyncRegistrationType; } }));
Object.defineProperty(exports, "DidOpenNotebookDocumentNotification", ({ enumerable: true, get: function () { return protocol_notebook_1.DidOpenNotebookDocumentNotification; } }));
Object.defineProperty(exports, "NotebookCellArrayChange", ({ enumerable: true, get: function () { return protocol_notebook_1.NotebookCellArrayChange; } }));
Object.defineProperty(exports, "DidChangeNotebookDocumentNotification", ({ enumerable: true, get: function () { return protocol_notebook_1.DidChangeNotebookDocumentNotification; } }));
Object.defineProperty(exports, "DidSaveNotebookDocumentNotification", ({ enumerable: true, get: function () { return protocol_notebook_1.DidSaveNotebookDocumentNotification; } }));
Object.defineProperty(exports, "DidCloseNotebookDocumentNotification", ({ enumerable: true, get: function () { return protocol_notebook_1.DidCloseNotebookDocumentNotification; } }));
// @ts-ignore: to avoid inlining LocationLink as dynamic import
let __noDynamicImport;
/**
 * The TextDocumentFilter namespace provides helper functions to work with
 * {@link TextDocumentFilter} literals.
 *
 * @since 3.17.0
 */
var TextDocumentFilter;
(function (TextDocumentFilter) {
    function is(value) {
        const candidate = value;
        return Is.string(candidate.language) || Is.string(candidate.scheme) || Is.string(candidate.pattern);
    }
    TextDocumentFilter.is = is;
})(TextDocumentFilter = exports.TextDocumentFilter || (exports.TextDocumentFilter = {}));
/**
 * The NotebookDocumentFilter namespace provides helper functions to work with
 * {@link NotebookDocumentFilter} literals.
 *
 * @since 3.17.0
 */
var NotebookDocumentFilter;
(function (NotebookDocumentFilter) {
    function is(value) {
        const candidate = value;
        return Is.objectLiteral(candidate) && (Is.string(candidate.notebookType) || Is.string(candidate.scheme) || Is.string(candidate.pattern));
    }
    NotebookDocumentFilter.is = is;
})(NotebookDocumentFilter = exports.NotebookDocumentFilter || (exports.NotebookDocumentFilter = {}));
/**
 * The NotebookCellTextDocumentFilter namespace provides helper functions to work with
 * {@link NotebookCellTextDocumentFilter} literals.
 *
 * @since 3.17.0
 */
var NotebookCellTextDocumentFilter;
(function (NotebookCellTextDocumentFilter) {
    function is(value) {
        const candidate = value;
        return Is.objectLiteral(candidate)
            && (Is.string(candidate.notebook) || NotebookDocumentFilter.is(candidate.notebook))
            && (candidate.language === undefined || Is.string(candidate.language));
    }
    NotebookCellTextDocumentFilter.is = is;
})(NotebookCellTextDocumentFilter = exports.NotebookCellTextDocumentFilter || (exports.NotebookCellTextDocumentFilter = {}));
/**
 * The DocumentSelector namespace provides helper functions to work with
 * {@link DocumentSelector}s.
 */
var DocumentSelector;
(function (DocumentSelector) {
    function is(value) {
        if (!Array.isArray(value)) {
            return false;
        }
        for (let elem of value) {
            if (!Is.string(elem) && !TextDocumentFilter.is(elem) && !NotebookCellTextDocumentFilter.is(elem)) {
                return false;
            }
        }
        return true;
    }
    DocumentSelector.is = is;
})(DocumentSelector = exports.DocumentSelector || (exports.DocumentSelector = {}));
/**
 * The `client/registerCapability` request is sent from the server to the client to register a new capability
 * handler on the client side.
 */
var RegistrationRequest;
(function (RegistrationRequest) {
    RegistrationRequest.method = 'client/registerCapability';
    RegistrationRequest.messageDirection = messages_1.MessageDirection.serverToClient;
    RegistrationRequest.type = new messages_1.ProtocolRequestType(RegistrationRequest.method);
})(RegistrationRequest = exports.RegistrationRequest || (exports.RegistrationRequest = {}));
/**
 * The `client/unregisterCapability` request is sent from the server to the client to unregister a previously registered capability
 * handler on the client side.
 */
var UnregistrationRequest;
(function (UnregistrationRequest) {
    UnregistrationRequest.method = 'client/unregisterCapability';
    UnregistrationRequest.messageDirection = messages_1.MessageDirection.serverToClient;
    UnregistrationRequest.type = new messages_1.ProtocolRequestType(UnregistrationRequest.method);
})(UnregistrationRequest = exports.UnregistrationRequest || (exports.UnregistrationRequest = {}));
var ResourceOperationKind;
(function (ResourceOperationKind) {
    /**
     * Supports creating new files and folders.
     */
    ResourceOperationKind.Create = 'create';
    /**
     * Supports renaming existing files and folders.
     */
    ResourceOperationKind.Rename = 'rename';
    /**
     * Supports deleting existing files and folders.
     */
    ResourceOperationKind.Delete = 'delete';
})(ResourceOperationKind = exports.ResourceOperationKind || (exports.ResourceOperationKind = {}));
var FailureHandlingKind;
(function (FailureHandlingKind) {
    /**
     * Applying the workspace change is simply aborted if one of the changes provided
     * fails. All operations executed before the failing operation stay executed.
     */
    FailureHandlingKind.Abort = 'abort';
    /**
     * All operations are executed transactional. That means they either all
     * succeed or no changes at all are applied to the workspace.
     */
    FailureHandlingKind.Transactional = 'transactional';
    /**
     * If the workspace edit contains only textual file changes they are executed transactional.
     * If resource changes (create, rename or delete file) are part of the change the failure
     * handling strategy is abort.
     */
    FailureHandlingKind.TextOnlyTransactional = 'textOnlyTransactional';
    /**
     * The client tries to undo the operations already executed. But there is no
     * guarantee that this is succeeding.
     */
    FailureHandlingKind.Undo = 'undo';
})(FailureHandlingKind = exports.FailureHandlingKind || (exports.FailureHandlingKind = {}));
/**
 * A set of predefined position encoding kinds.
 *
 * @since 3.17.0
 */
var PositionEncodingKind;
(function (PositionEncodingKind) {
    /**
     * Character offsets count UTF-8 code units (e.g. bytes).
     */
    PositionEncodingKind.UTF8 = 'utf-8';
    /**
     * Character offsets count UTF-16 code units.
     *
     * This is the default and must always be supported
     * by servers
     */
    PositionEncodingKind.UTF16 = 'utf-16';
    /**
     * Character offsets count UTF-32 code units.
     *
     * Implementation note: these are the same as Unicode codepoints,
     * so this `PositionEncodingKind` may also be used for an
     * encoding-agnostic representation of character offsets.
     */
    PositionEncodingKind.UTF32 = 'utf-32';
})(PositionEncodingKind = exports.PositionEncodingKind || (exports.PositionEncodingKind = {}));
/**
 * The StaticRegistrationOptions namespace provides helper functions to work with
 * {@link StaticRegistrationOptions} literals.
 */
var StaticRegistrationOptions;
(function (StaticRegistrationOptions) {
    function hasId(value) {
        const candidate = value;
        return candidate && Is.string(candidate.id) && candidate.id.length > 0;
    }
    StaticRegistrationOptions.hasId = hasId;
})(StaticRegistrationOptions = exports.StaticRegistrationOptions || (exports.StaticRegistrationOptions = {}));
/**
 * The TextDocumentRegistrationOptions namespace provides helper functions to work with
 * {@link TextDocumentRegistrationOptions} literals.
 */
var TextDocumentRegistrationOptions;
(function (TextDocumentRegistrationOptions) {
    function is(value) {
        const candidate = value;
        return candidate && (candidate.documentSelector === null || DocumentSelector.is(candidate.documentSelector));
    }
    TextDocumentRegistrationOptions.is = is;
})(TextDocumentRegistrationOptions = exports.TextDocumentRegistrationOptions || (exports.TextDocumentRegistrationOptions = {}));
/**
 * The WorkDoneProgressOptions namespace provides helper functions to work with
 * {@link WorkDoneProgressOptions} literals.
 */
var WorkDoneProgressOptions;
(function (WorkDoneProgressOptions) {
    function is(value) {
        const candidate = value;
        return Is.objectLiteral(candidate) && (candidate.workDoneProgress === undefined || Is.boolean(candidate.workDoneProgress));
    }
    WorkDoneProgressOptions.is = is;
    function hasWorkDoneProgress(value) {
        const candidate = value;
        return candidate && Is.boolean(candidate.workDoneProgress);
    }
    WorkDoneProgressOptions.hasWorkDoneProgress = hasWorkDoneProgress;
})(WorkDoneProgressOptions = exports.WorkDoneProgressOptions || (exports.WorkDoneProgressOptions = {}));
/**
 * The initialize request is sent from the client to the server.
 * It is sent once as the request after starting up the server.
 * The requests parameter is of type {@link InitializeParams}
 * the response if of type {@link InitializeResult} of a Thenable that
 * resolves to such.
 */
var InitializeRequest;
(function (InitializeRequest) {
    InitializeRequest.method = 'initialize';
    InitializeRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    InitializeRequest.type = new messages_1.ProtocolRequestType(InitializeRequest.method);
})(InitializeRequest = exports.InitializeRequest || (exports.InitializeRequest = {}));
/**
 * Known error codes for an `InitializeErrorCodes`;
 */
var InitializeErrorCodes;
(function (InitializeErrorCodes) {
    /**
     * If the protocol version provided by the client can't be handled by the server.
     *
     * @deprecated This initialize error got replaced by client capabilities. There is
     * no version handshake in version 3.0x
     */
    InitializeErrorCodes.unknownProtocolVersion = 1;
})(InitializeErrorCodes = exports.InitializeErrorCodes || (exports.InitializeErrorCodes = {}));
/**
 * The initialized notification is sent from the client to the
 * server after the client is fully initialized and the server
 * is allowed to send requests from the server to the client.
 */
var InitializedNotification;
(function (InitializedNotification) {
    InitializedNotification.method = 'initialized';
    InitializedNotification.messageDirection = messages_1.MessageDirection.clientToServer;
    InitializedNotification.type = new messages_1.ProtocolNotificationType(InitializedNotification.method);
})(InitializedNotification = exports.InitializedNotification || (exports.InitializedNotification = {}));
//---- Shutdown Method ----
/**
 * A shutdown request is sent from the client to the server.
 * It is sent once when the client decides to shutdown the
 * server. The only notification that is sent after a shutdown request
 * is the exit event.
 */
var ShutdownRequest;
(function (ShutdownRequest) {
    ShutdownRequest.method = 'shutdown';
    ShutdownRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    ShutdownRequest.type = new messages_1.ProtocolRequestType0(ShutdownRequest.method);
})(ShutdownRequest = exports.ShutdownRequest || (exports.ShutdownRequest = {}));
//---- Exit Notification ----
/**
 * The exit event is sent from the client to the server to
 * ask the server to exit its process.
 */
var ExitNotification;
(function (ExitNotification) {
    ExitNotification.method = 'exit';
    ExitNotification.messageDirection = messages_1.MessageDirection.clientToServer;
    ExitNotification.type = new messages_1.ProtocolNotificationType0(ExitNotification.method);
})(ExitNotification = exports.ExitNotification || (exports.ExitNotification = {}));
/**
 * The configuration change notification is sent from the client to the server
 * when the client's configuration has changed. The notification contains
 * the changed configuration as defined by the language client.
 */
var DidChangeConfigurationNotification;
(function (DidChangeConfigurationNotification) {
    DidChangeConfigurationNotification.method = 'workspace/didChangeConfiguration';
    DidChangeConfigurationNotification.messageDirection = messages_1.MessageDirection.clientToServer;
    DidChangeConfigurationNotification.type = new messages_1.ProtocolNotificationType(DidChangeConfigurationNotification.method);
})(DidChangeConfigurationNotification = exports.DidChangeConfigurationNotification || (exports.DidChangeConfigurationNotification = {}));
//---- Message show and log notifications ----
/**
 * The message type
 */
var MessageType;
(function (MessageType) {
    /**
     * An error message.
     */
    MessageType.Error = 1;
    /**
     * A warning message.
     */
    MessageType.Warning = 2;
    /**
     * An information message.
     */
    MessageType.Info = 3;
    /**
     * A log message.
     */
    MessageType.Log = 4;
})(MessageType = exports.MessageType || (exports.MessageType = {}));
/**
 * The show message notification is sent from a server to a client to ask
 * the client to display a particular message in the user interface.
 */
var ShowMessageNotification;
(function (ShowMessageNotification) {
    ShowMessageNotification.method = 'window/showMessage';
    ShowMessageNotification.messageDirection = messages_1.MessageDirection.serverToClient;
    ShowMessageNotification.type = new messages_1.ProtocolNotificationType(ShowMessageNotification.method);
})(ShowMessageNotification = exports.ShowMessageNotification || (exports.ShowMessageNotification = {}));
/**
 * The show message request is sent from the server to the client to show a message
 * and a set of options actions to the user.
 */
var ShowMessageRequest;
(function (ShowMessageRequest) {
    ShowMessageRequest.method = 'window/showMessageRequest';
    ShowMessageRequest.messageDirection = messages_1.MessageDirection.serverToClient;
    ShowMessageRequest.type = new messages_1.ProtocolRequestType(ShowMessageRequest.method);
})(ShowMessageRequest = exports.ShowMessageRequest || (exports.ShowMessageRequest = {}));
/**
 * The log message notification is sent from the server to the client to ask
 * the client to log a particular message.
 */
var LogMessageNotification;
(function (LogMessageNotification) {
    LogMessageNotification.method = 'window/logMessage';
    LogMessageNotification.messageDirection = messages_1.MessageDirection.serverToClient;
    LogMessageNotification.type = new messages_1.ProtocolNotificationType(LogMessageNotification.method);
})(LogMessageNotification = exports.LogMessageNotification || (exports.LogMessageNotification = {}));
//---- Telemetry notification
/**
 * The telemetry event notification is sent from the server to the client to ask
 * the client to log telemetry data.
 */
var TelemetryEventNotification;
(function (TelemetryEventNotification) {
    TelemetryEventNotification.method = 'telemetry/event';
    TelemetryEventNotification.messageDirection = messages_1.MessageDirection.serverToClient;
    TelemetryEventNotification.type = new messages_1.ProtocolNotificationType(TelemetryEventNotification.method);
})(TelemetryEventNotification = exports.TelemetryEventNotification || (exports.TelemetryEventNotification = {}));
/**
 * Defines how the host (editor) should sync
 * document changes to the language server.
 */
var TextDocumentSyncKind;
(function (TextDocumentSyncKind) {
    /**
     * Documents should not be synced at all.
     */
    TextDocumentSyncKind.None = 0;
    /**
     * Documents are synced by always sending the full content
     * of the document.
     */
    TextDocumentSyncKind.Full = 1;
    /**
     * Documents are synced by sending the full content on open.
     * After that only incremental updates to the document are
     * send.
     */
    TextDocumentSyncKind.Incremental = 2;
})(TextDocumentSyncKind = exports.TextDocumentSyncKind || (exports.TextDocumentSyncKind = {}));
/**
 * The document open notification is sent from the client to the server to signal
 * newly opened text documents. The document's truth is now managed by the client
 * and the server must not try to read the document's truth using the document's
 * uri. Open in this sense means it is managed by the client. It doesn't necessarily
 * mean that its content is presented in an editor. An open notification must not
 * be sent more than once without a corresponding close notification send before.
 * This means open and close notification must be balanced and the max open count
 * is one.
 */
var DidOpenTextDocumentNotification;
(function (DidOpenTextDocumentNotification) {
    DidOpenTextDocumentNotification.method = 'textDocument/didOpen';
    DidOpenTextDocumentNotification.messageDirection = messages_1.MessageDirection.clientToServer;
    DidOpenTextDocumentNotification.type = new messages_1.ProtocolNotificationType(DidOpenTextDocumentNotification.method);
})(DidOpenTextDocumentNotification = exports.DidOpenTextDocumentNotification || (exports.DidOpenTextDocumentNotification = {}));
var TextDocumentContentChangeEvent;
(function (TextDocumentContentChangeEvent) {
    /**
     * Checks whether the information describes a delta event.
     */
    function isIncremental(event) {
        let candidate = event;
        return candidate !== undefined && candidate !== null &&
            typeof candidate.text === 'string' && candidate.range !== undefined &&
            (candidate.rangeLength === undefined || typeof candidate.rangeLength === 'number');
    }
    TextDocumentContentChangeEvent.isIncremental = isIncremental;
    /**
     * Checks whether the information describes a full replacement event.
     */
    function isFull(event) {
        let candidate = event;
        return candidate !== undefined && candidate !== null &&
            typeof candidate.text === 'string' && candidate.range === undefined && candidate.rangeLength === undefined;
    }
    TextDocumentContentChangeEvent.isFull = isFull;
})(TextDocumentContentChangeEvent = exports.TextDocumentContentChangeEvent || (exports.TextDocumentContentChangeEvent = {}));
/**
 * The document change notification is sent from the client to the server to signal
 * changes to a text document.
 */
var DidChangeTextDocumentNotification;
(function (DidChangeTextDocumentNotification) {
    DidChangeTextDocumentNotification.method = 'textDocument/didChange';
    DidChangeTextDocumentNotification.messageDirection = messages_1.MessageDirection.clientToServer;
    DidChangeTextDocumentNotification.type = new messages_1.ProtocolNotificationType(DidChangeTextDocumentNotification.method);
})(DidChangeTextDocumentNotification = exports.DidChangeTextDocumentNotification || (exports.DidChangeTextDocumentNotification = {}));
/**
 * The document close notification is sent from the client to the server when
 * the document got closed in the client. The document's truth now exists where
 * the document's uri points to (e.g. if the document's uri is a file uri the
 * truth now exists on disk). As with the open notification the close notification
 * is about managing the document's content. Receiving a close notification
 * doesn't mean that the document was open in an editor before. A close
 * notification requires a previous open notification to be sent.
 */
var DidCloseTextDocumentNotification;
(function (DidCloseTextDocumentNotification) {
    DidCloseTextDocumentNotification.method = 'textDocument/didClose';
    DidCloseTextDocumentNotification.messageDirection = messages_1.MessageDirection.clientToServer;
    DidCloseTextDocumentNotification.type = new messages_1.ProtocolNotificationType(DidCloseTextDocumentNotification.method);
})(DidCloseTextDocumentNotification = exports.DidCloseTextDocumentNotification || (exports.DidCloseTextDocumentNotification = {}));
/**
 * The document save notification is sent from the client to the server when
 * the document got saved in the client.
 */
var DidSaveTextDocumentNotification;
(function (DidSaveTextDocumentNotification) {
    DidSaveTextDocumentNotification.method = 'textDocument/didSave';
    DidSaveTextDocumentNotification.messageDirection = messages_1.MessageDirection.clientToServer;
    DidSaveTextDocumentNotification.type = new messages_1.ProtocolNotificationType(DidSaveTextDocumentNotification.method);
})(DidSaveTextDocumentNotification = exports.DidSaveTextDocumentNotification || (exports.DidSaveTextDocumentNotification = {}));
/**
 * Represents reasons why a text document is saved.
 */
var TextDocumentSaveReason;
(function (TextDocumentSaveReason) {
    /**
     * Manually triggered, e.g. by the user pressing save, by starting debugging,
     * or by an API call.
     */
    TextDocumentSaveReason.Manual = 1;
    /**
     * Automatic after a delay.
     */
    TextDocumentSaveReason.AfterDelay = 2;
    /**
     * When the editor lost focus.
     */
    TextDocumentSaveReason.FocusOut = 3;
})(TextDocumentSaveReason = exports.TextDocumentSaveReason || (exports.TextDocumentSaveReason = {}));
/**
 * A document will save notification is sent from the client to the server before
 * the document is actually saved.
 */
var WillSaveTextDocumentNotification;
(function (WillSaveTextDocumentNotification) {
    WillSaveTextDocumentNotification.method = 'textDocument/willSave';
    WillSaveTextDocumentNotification.messageDirection = messages_1.MessageDirection.clientToServer;
    WillSaveTextDocumentNotification.type = new messages_1.ProtocolNotificationType(WillSaveTextDocumentNotification.method);
})(WillSaveTextDocumentNotification = exports.WillSaveTextDocumentNotification || (exports.WillSaveTextDocumentNotification = {}));
/**
 * A document will save request is sent from the client to the server before
 * the document is actually saved. The request can return an array of TextEdits
 * which will be applied to the text document before it is saved. Please note that
 * clients might drop results if computing the text edits took too long or if a
 * server constantly fails on this request. This is done to keep the save fast and
 * reliable.
 */
var WillSaveTextDocumentWaitUntilRequest;
(function (WillSaveTextDocumentWaitUntilRequest) {
    WillSaveTextDocumentWaitUntilRequest.method = 'textDocument/willSaveWaitUntil';
    WillSaveTextDocumentWaitUntilRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    WillSaveTextDocumentWaitUntilRequest.type = new messages_1.ProtocolRequestType(WillSaveTextDocumentWaitUntilRequest.method);
})(WillSaveTextDocumentWaitUntilRequest = exports.WillSaveTextDocumentWaitUntilRequest || (exports.WillSaveTextDocumentWaitUntilRequest = {}));
/**
 * The watched files notification is sent from the client to the server when
 * the client detects changes to file watched by the language client.
 */
var DidChangeWatchedFilesNotification;
(function (DidChangeWatchedFilesNotification) {
    DidChangeWatchedFilesNotification.method = 'workspace/didChangeWatchedFiles';
    DidChangeWatchedFilesNotification.messageDirection = messages_1.MessageDirection.clientToServer;
    DidChangeWatchedFilesNotification.type = new messages_1.ProtocolNotificationType(DidChangeWatchedFilesNotification.method);
})(DidChangeWatchedFilesNotification = exports.DidChangeWatchedFilesNotification || (exports.DidChangeWatchedFilesNotification = {}));
/**
 * The file event type
 */
var FileChangeType;
(function (FileChangeType) {
    /**
     * The file got created.
     */
    FileChangeType.Created = 1;
    /**
     * The file got changed.
     */
    FileChangeType.Changed = 2;
    /**
     * The file got deleted.
     */
    FileChangeType.Deleted = 3;
})(FileChangeType = exports.FileChangeType || (exports.FileChangeType = {}));
var RelativePattern;
(function (RelativePattern) {
    function is(value) {
        const candidate = value;
        return Is.objectLiteral(candidate) && (vscode_languageserver_types_1.URI.is(candidate.baseUri) || vscode_languageserver_types_1.WorkspaceFolder.is(candidate.baseUri)) && Is.string(candidate.pattern);
    }
    RelativePattern.is = is;
})(RelativePattern = exports.RelativePattern || (exports.RelativePattern = {}));
var WatchKind;
(function (WatchKind) {
    /**
     * Interested in create events.
     */
    WatchKind.Create = 1;
    /**
     * Interested in change events
     */
    WatchKind.Change = 2;
    /**
     * Interested in delete events
     */
    WatchKind.Delete = 4;
})(WatchKind = exports.WatchKind || (exports.WatchKind = {}));
/**
 * Diagnostics notification are sent from the server to the client to signal
 * results of validation runs.
 */
var PublishDiagnosticsNotification;
(function (PublishDiagnosticsNotification) {
    PublishDiagnosticsNotification.method = 'textDocument/publishDiagnostics';
    PublishDiagnosticsNotification.messageDirection = messages_1.MessageDirection.serverToClient;
    PublishDiagnosticsNotification.type = new messages_1.ProtocolNotificationType(PublishDiagnosticsNotification.method);
})(PublishDiagnosticsNotification = exports.PublishDiagnosticsNotification || (exports.PublishDiagnosticsNotification = {}));
/**
 * How a completion was triggered
 */
var CompletionTriggerKind;
(function (CompletionTriggerKind) {
    /**
     * Completion was triggered by typing an identifier (24x7 code
     * complete), manual invocation (e.g Ctrl+Space) or via API.
     */
    CompletionTriggerKind.Invoked = 1;
    /**
     * Completion was triggered by a trigger character specified by
     * the `triggerCharacters` properties of the `CompletionRegistrationOptions`.
     */
    CompletionTriggerKind.TriggerCharacter = 2;
    /**
     * Completion was re-triggered as current completion list is incomplete
     */
    CompletionTriggerKind.TriggerForIncompleteCompletions = 3;
})(CompletionTriggerKind = exports.CompletionTriggerKind || (exports.CompletionTriggerKind = {}));
/**
 * Request to request completion at a given text document position. The request's
 * parameter is of type {@link TextDocumentPosition} the response
 * is of type {@link CompletionItem CompletionItem[]} or {@link CompletionList}
 * or a Thenable that resolves to such.
 *
 * The request can delay the computation of the {@link CompletionItem.detail `detail`}
 * and {@link CompletionItem.documentation `documentation`} properties to the `completionItem/resolve`
 * request. However, properties that are needed for the initial sorting and filtering, like `sortText`,
 * `filterText`, `insertText`, and `textEdit`, must not be changed during resolve.
 */
var CompletionRequest;
(function (CompletionRequest) {
    CompletionRequest.method = 'textDocument/completion';
    CompletionRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    CompletionRequest.type = new messages_1.ProtocolRequestType(CompletionRequest.method);
})(CompletionRequest = exports.CompletionRequest || (exports.CompletionRequest = {}));
/**
 * Request to resolve additional information for a given completion item.The request's
 * parameter is of type {@link CompletionItem} the response
 * is of type {@link CompletionItem} or a Thenable that resolves to such.
 */
var CompletionResolveRequest;
(function (CompletionResolveRequest) {
    CompletionResolveRequest.method = 'completionItem/resolve';
    CompletionResolveRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    CompletionResolveRequest.type = new messages_1.ProtocolRequestType(CompletionResolveRequest.method);
})(CompletionResolveRequest = exports.CompletionResolveRequest || (exports.CompletionResolveRequest = {}));
/**
 * Request to request hover information at a given text document position. The request's
 * parameter is of type {@link TextDocumentPosition} the response is of
 * type {@link Hover} or a Thenable that resolves to such.
 */
var HoverRequest;
(function (HoverRequest) {
    HoverRequest.method = 'textDocument/hover';
    HoverRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    HoverRequest.type = new messages_1.ProtocolRequestType(HoverRequest.method);
})(HoverRequest = exports.HoverRequest || (exports.HoverRequest = {}));
/**
 * How a signature help was triggered.
 *
 * @since 3.15.0
 */
var SignatureHelpTriggerKind;
(function (SignatureHelpTriggerKind) {
    /**
     * Signature help was invoked manually by the user or by a command.
     */
    SignatureHelpTriggerKind.Invoked = 1;
    /**
     * Signature help was triggered by a trigger character.
     */
    SignatureHelpTriggerKind.TriggerCharacter = 2;
    /**
     * Signature help was triggered by the cursor moving or by the document content changing.
     */
    SignatureHelpTriggerKind.ContentChange = 3;
})(SignatureHelpTriggerKind = exports.SignatureHelpTriggerKind || (exports.SignatureHelpTriggerKind = {}));
var SignatureHelpRequest;
(function (SignatureHelpRequest) {
    SignatureHelpRequest.method = 'textDocument/signatureHelp';
    SignatureHelpRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    SignatureHelpRequest.type = new messages_1.ProtocolRequestType(SignatureHelpRequest.method);
})(SignatureHelpRequest = exports.SignatureHelpRequest || (exports.SignatureHelpRequest = {}));
/**
 * A request to resolve the definition location of a symbol at a given text
 * document position. The request's parameter is of type [TextDocumentPosition]
 * (#TextDocumentPosition) the response is of either type {@link Definition}
 * or a typed array of {@link DefinitionLink} or a Thenable that resolves
 * to such.
 */
var DefinitionRequest;
(function (DefinitionRequest) {
    DefinitionRequest.method = 'textDocument/definition';
    DefinitionRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    DefinitionRequest.type = new messages_1.ProtocolRequestType(DefinitionRequest.method);
})(DefinitionRequest = exports.DefinitionRequest || (exports.DefinitionRequest = {}));
/**
 * A request to resolve project-wide references for the symbol denoted
 * by the given text document position. The request's parameter is of
 * type {@link ReferenceParams} the response is of type
 * {@link Location Location[]} or a Thenable that resolves to such.
 */
var ReferencesRequest;
(function (ReferencesRequest) {
    ReferencesRequest.method = 'textDocument/references';
    ReferencesRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    ReferencesRequest.type = new messages_1.ProtocolRequestType(ReferencesRequest.method);
})(ReferencesRequest = exports.ReferencesRequest || (exports.ReferencesRequest = {}));
/**
 * Request to resolve a {@link DocumentHighlight} for a given
 * text document position. The request's parameter is of type [TextDocumentPosition]
 * (#TextDocumentPosition) the request response is of type [DocumentHighlight[]]
 * (#DocumentHighlight) or a Thenable that resolves to such.
 */
var DocumentHighlightRequest;
(function (DocumentHighlightRequest) {
    DocumentHighlightRequest.method = 'textDocument/documentHighlight';
    DocumentHighlightRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    DocumentHighlightRequest.type = new messages_1.ProtocolRequestType(DocumentHighlightRequest.method);
})(DocumentHighlightRequest = exports.DocumentHighlightRequest || (exports.DocumentHighlightRequest = {}));
/**
 * A request to list all symbols found in a given text document. The request's
 * parameter is of type {@link TextDocumentIdentifier} the
 * response is of type {@link SymbolInformation SymbolInformation[]} or a Thenable
 * that resolves to such.
 */
var DocumentSymbolRequest;
(function (DocumentSymbolRequest) {
    DocumentSymbolRequest.method = 'textDocument/documentSymbol';
    DocumentSymbolRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    DocumentSymbolRequest.type = new messages_1.ProtocolRequestType(DocumentSymbolRequest.method);
})(DocumentSymbolRequest = exports.DocumentSymbolRequest || (exports.DocumentSymbolRequest = {}));
/**
 * A request to provide commands for the given text document and range.
 */
var CodeActionRequest;
(function (CodeActionRequest) {
    CodeActionRequest.method = 'textDocument/codeAction';
    CodeActionRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    CodeActionRequest.type = new messages_1.ProtocolRequestType(CodeActionRequest.method);
})(CodeActionRequest = exports.CodeActionRequest || (exports.CodeActionRequest = {}));
/**
 * Request to resolve additional information for a given code action.The request's
 * parameter is of type {@link CodeAction} the response
 * is of type {@link CodeAction} or a Thenable that resolves to such.
 */
var CodeActionResolveRequest;
(function (CodeActionResolveRequest) {
    CodeActionResolveRequest.method = 'codeAction/resolve';
    CodeActionResolveRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    CodeActionResolveRequest.type = new messages_1.ProtocolRequestType(CodeActionResolveRequest.method);
})(CodeActionResolveRequest = exports.CodeActionResolveRequest || (exports.CodeActionResolveRequest = {}));
/**
 * A request to list project-wide symbols matching the query string given
 * by the {@link WorkspaceSymbolParams}. The response is
 * of type {@link SymbolInformation SymbolInformation[]} or a Thenable that
 * resolves to such.
 *
 * @since 3.17.0 - support for WorkspaceSymbol in the returned data. Clients
 *  need to advertise support for WorkspaceSymbols via the client capability
 *  `workspace.symbol.resolveSupport`.
 *
 */
var WorkspaceSymbolRequest;
(function (WorkspaceSymbolRequest) {
    WorkspaceSymbolRequest.method = 'workspace/symbol';
    WorkspaceSymbolRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    WorkspaceSymbolRequest.type = new messages_1.ProtocolRequestType(WorkspaceSymbolRequest.method);
})(WorkspaceSymbolRequest = exports.WorkspaceSymbolRequest || (exports.WorkspaceSymbolRequest = {}));
/**
 * A request to resolve the range inside the workspace
 * symbol's location.
 *
 * @since 3.17.0
 */
var WorkspaceSymbolResolveRequest;
(function (WorkspaceSymbolResolveRequest) {
    WorkspaceSymbolResolveRequest.method = 'workspaceSymbol/resolve';
    WorkspaceSymbolResolveRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    WorkspaceSymbolResolveRequest.type = new messages_1.ProtocolRequestType(WorkspaceSymbolResolveRequest.method);
})(WorkspaceSymbolResolveRequest = exports.WorkspaceSymbolResolveRequest || (exports.WorkspaceSymbolResolveRequest = {}));
/**
 * A request to provide code lens for the given text document.
 */
var CodeLensRequest;
(function (CodeLensRequest) {
    CodeLensRequest.method = 'textDocument/codeLens';
    CodeLensRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    CodeLensRequest.type = new messages_1.ProtocolRequestType(CodeLensRequest.method);
})(CodeLensRequest = exports.CodeLensRequest || (exports.CodeLensRequest = {}));
/**
 * A request to resolve a command for a given code lens.
 */
var CodeLensResolveRequest;
(function (CodeLensResolveRequest) {
    CodeLensResolveRequest.method = 'codeLens/resolve';
    CodeLensResolveRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    CodeLensResolveRequest.type = new messages_1.ProtocolRequestType(CodeLensResolveRequest.method);
})(CodeLensResolveRequest = exports.CodeLensResolveRequest || (exports.CodeLensResolveRequest = {}));
/**
 * A request to refresh all code actions
 *
 * @since 3.16.0
 */
var CodeLensRefreshRequest;
(function (CodeLensRefreshRequest) {
    CodeLensRefreshRequest.method = `workspace/codeLens/refresh`;
    CodeLensRefreshRequest.messageDirection = messages_1.MessageDirection.serverToClient;
    CodeLensRefreshRequest.type = new messages_1.ProtocolRequestType0(CodeLensRefreshRequest.method);
})(CodeLensRefreshRequest = exports.CodeLensRefreshRequest || (exports.CodeLensRefreshRequest = {}));
/**
 * A request to provide document links
 */
var DocumentLinkRequest;
(function (DocumentLinkRequest) {
    DocumentLinkRequest.method = 'textDocument/documentLink';
    DocumentLinkRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    DocumentLinkRequest.type = new messages_1.ProtocolRequestType(DocumentLinkRequest.method);
})(DocumentLinkRequest = exports.DocumentLinkRequest || (exports.DocumentLinkRequest = {}));
/**
 * Request to resolve additional information for a given document link. The request's
 * parameter is of type {@link DocumentLink} the response
 * is of type {@link DocumentLink} or a Thenable that resolves to such.
 */
var DocumentLinkResolveRequest;
(function (DocumentLinkResolveRequest) {
    DocumentLinkResolveRequest.method = 'documentLink/resolve';
    DocumentLinkResolveRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    DocumentLinkResolveRequest.type = new messages_1.ProtocolRequestType(DocumentLinkResolveRequest.method);
})(DocumentLinkResolveRequest = exports.DocumentLinkResolveRequest || (exports.DocumentLinkResolveRequest = {}));
/**
 * A request to to format a whole document.
 */
var DocumentFormattingRequest;
(function (DocumentFormattingRequest) {
    DocumentFormattingRequest.method = 'textDocument/formatting';
    DocumentFormattingRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    DocumentFormattingRequest.type = new messages_1.ProtocolRequestType(DocumentFormattingRequest.method);
})(DocumentFormattingRequest = exports.DocumentFormattingRequest || (exports.DocumentFormattingRequest = {}));
/**
 * A request to to format a range in a document.
 */
var DocumentRangeFormattingRequest;
(function (DocumentRangeFormattingRequest) {
    DocumentRangeFormattingRequest.method = 'textDocument/rangeFormatting';
    DocumentRangeFormattingRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    DocumentRangeFormattingRequest.type = new messages_1.ProtocolRequestType(DocumentRangeFormattingRequest.method);
})(DocumentRangeFormattingRequest = exports.DocumentRangeFormattingRequest || (exports.DocumentRangeFormattingRequest = {}));
/**
 * A request to format a document on type.
 */
var DocumentOnTypeFormattingRequest;
(function (DocumentOnTypeFormattingRequest) {
    DocumentOnTypeFormattingRequest.method = 'textDocument/onTypeFormatting';
    DocumentOnTypeFormattingRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    DocumentOnTypeFormattingRequest.type = new messages_1.ProtocolRequestType(DocumentOnTypeFormattingRequest.method);
})(DocumentOnTypeFormattingRequest = exports.DocumentOnTypeFormattingRequest || (exports.DocumentOnTypeFormattingRequest = {}));
//---- Rename ----------------------------------------------
var PrepareSupportDefaultBehavior;
(function (PrepareSupportDefaultBehavior) {
    /**
     * The client's default behavior is to select the identifier
     * according the to language's syntax rule.
     */
    PrepareSupportDefaultBehavior.Identifier = 1;
})(PrepareSupportDefaultBehavior = exports.PrepareSupportDefaultBehavior || (exports.PrepareSupportDefaultBehavior = {}));
/**
 * A request to rename a symbol.
 */
var RenameRequest;
(function (RenameRequest) {
    RenameRequest.method = 'textDocument/rename';
    RenameRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    RenameRequest.type = new messages_1.ProtocolRequestType(RenameRequest.method);
})(RenameRequest = exports.RenameRequest || (exports.RenameRequest = {}));
/**
 * A request to test and perform the setup necessary for a rename.
 *
 * @since 3.16 - support for default behavior
 */
var PrepareRenameRequest;
(function (PrepareRenameRequest) {
    PrepareRenameRequest.method = 'textDocument/prepareRename';
    PrepareRenameRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    PrepareRenameRequest.type = new messages_1.ProtocolRequestType(PrepareRenameRequest.method);
})(PrepareRenameRequest = exports.PrepareRenameRequest || (exports.PrepareRenameRequest = {}));
/**
 * A request send from the client to the server to execute a command. The request might return
 * a workspace edit which the client will apply to the workspace.
 */
var ExecuteCommandRequest;
(function (ExecuteCommandRequest) {
    ExecuteCommandRequest.method = 'workspace/executeCommand';
    ExecuteCommandRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    ExecuteCommandRequest.type = new messages_1.ProtocolRequestType(ExecuteCommandRequest.method);
})(ExecuteCommandRequest = exports.ExecuteCommandRequest || (exports.ExecuteCommandRequest = {}));
/**
 * A request sent from the server to the client to modified certain resources.
 */
var ApplyWorkspaceEditRequest;
(function (ApplyWorkspaceEditRequest) {
    ApplyWorkspaceEditRequest.method = 'workspace/applyEdit';
    ApplyWorkspaceEditRequest.messageDirection = messages_1.MessageDirection.serverToClient;
    ApplyWorkspaceEditRequest.type = new messages_1.ProtocolRequestType('workspace/applyEdit');
})(ApplyWorkspaceEditRequest = exports.ApplyWorkspaceEditRequest || (exports.ApplyWorkspaceEditRequest = {}));


/***/ }),

/***/ 527:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.LinkedEditingRangeRequest = void 0;
const messages_1 = __webpack_require__(8599);
/**
 * A request to provide ranges that can be edited together.
 *
 * @since 3.16.0
 */
var LinkedEditingRangeRequest;
(function (LinkedEditingRangeRequest) {
    LinkedEditingRangeRequest.method = 'textDocument/linkedEditingRange';
    LinkedEditingRangeRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    LinkedEditingRangeRequest.type = new messages_1.ProtocolRequestType(LinkedEditingRangeRequest.method);
})(LinkedEditingRangeRequest = exports.LinkedEditingRangeRequest || (exports.LinkedEditingRangeRequest = {}));


/***/ }),

/***/ 1964:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.MonikerRequest = exports.MonikerKind = exports.UniquenessLevel = void 0;
const messages_1 = __webpack_require__(8599);
/**
 * Moniker uniqueness level to define scope of the moniker.
 *
 * @since 3.16.0
 */
var UniquenessLevel;
(function (UniquenessLevel) {
    /**
     * The moniker is only unique inside a document
     */
    UniquenessLevel.document = 'document';
    /**
     * The moniker is unique inside a project for which a dump got created
     */
    UniquenessLevel.project = 'project';
    /**
     * The moniker is unique inside the group to which a project belongs
     */
    UniquenessLevel.group = 'group';
    /**
     * The moniker is unique inside the moniker scheme.
     */
    UniquenessLevel.scheme = 'scheme';
    /**
     * The moniker is globally unique
     */
    UniquenessLevel.global = 'global';
})(UniquenessLevel = exports.UniquenessLevel || (exports.UniquenessLevel = {}));
/**
 * The moniker kind.
 *
 * @since 3.16.0
 */
var MonikerKind;
(function (MonikerKind) {
    /**
     * The moniker represent a symbol that is imported into a project
     */
    MonikerKind.$import = 'import';
    /**
     * The moniker represents a symbol that is exported from a project
     */
    MonikerKind.$export = 'export';
    /**
     * The moniker represents a symbol that is local to a project (e.g. a local
     * variable of a function, a class not visible outside the project, ...)
     */
    MonikerKind.local = 'local';
})(MonikerKind = exports.MonikerKind || (exports.MonikerKind = {}));
/**
 * A request to get the moniker of a symbol at a given text document position.
 * The request parameter is of type {@link TextDocumentPositionParams}.
 * The response is of type {@link Moniker Moniker[]} or `null`.
 */
var MonikerRequest;
(function (MonikerRequest) {
    MonikerRequest.method = 'textDocument/moniker';
    MonikerRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    MonikerRequest.type = new messages_1.ProtocolRequestType(MonikerRequest.method);
})(MonikerRequest = exports.MonikerRequest || (exports.MonikerRequest = {}));


/***/ }),

/***/ 4460:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DidCloseNotebookDocumentNotification = exports.DidSaveNotebookDocumentNotification = exports.DidChangeNotebookDocumentNotification = exports.NotebookCellArrayChange = exports.DidOpenNotebookDocumentNotification = exports.NotebookDocumentSyncRegistrationType = exports.NotebookDocument = exports.NotebookCell = exports.ExecutionSummary = exports.NotebookCellKind = void 0;
const vscode_languageserver_types_1 = __webpack_require__(4767);
const Is = __webpack_require__(2523);
const messages_1 = __webpack_require__(8599);
/**
 * A notebook cell kind.
 *
 * @since 3.17.0
 */
var NotebookCellKind;
(function (NotebookCellKind) {
    /**
     * A markup-cell is formatted source that is used for display.
     */
    NotebookCellKind.Markup = 1;
    /**
     * A code-cell is source code.
     */
    NotebookCellKind.Code = 2;
    function is(value) {
        return value === 1 || value === 2;
    }
    NotebookCellKind.is = is;
})(NotebookCellKind = exports.NotebookCellKind || (exports.NotebookCellKind = {}));
var ExecutionSummary;
(function (ExecutionSummary) {
    function create(executionOrder, success) {
        const result = { executionOrder };
        if (success === true || success === false) {
            result.success = success;
        }
        return result;
    }
    ExecutionSummary.create = create;
    function is(value) {
        const candidate = value;
        return Is.objectLiteral(candidate) && vscode_languageserver_types_1.uinteger.is(candidate.executionOrder) && (candidate.success === undefined || Is.boolean(candidate.success));
    }
    ExecutionSummary.is = is;
    function equals(one, other) {
        if (one === other) {
            return true;
        }
        if (one === null || one === undefined || other === null || other === undefined) {
            return false;
        }
        return one.executionOrder === other.executionOrder && one.success === other.success;
    }
    ExecutionSummary.equals = equals;
})(ExecutionSummary = exports.ExecutionSummary || (exports.ExecutionSummary = {}));
var NotebookCell;
(function (NotebookCell) {
    function create(kind, document) {
        return { kind, document };
    }
    NotebookCell.create = create;
    function is(value) {
        const candidate = value;
        return Is.objectLiteral(candidate) && NotebookCellKind.is(candidate.kind) && vscode_languageserver_types_1.DocumentUri.is(candidate.document) &&
            (candidate.metadata === undefined || Is.objectLiteral(candidate.metadata));
    }
    NotebookCell.is = is;
    function diff(one, two) {
        const result = new Set();
        if (one.document !== two.document) {
            result.add('document');
        }
        if (one.kind !== two.kind) {
            result.add('kind');
        }
        if (one.executionSummary !== two.executionSummary) {
            result.add('executionSummary');
        }
        if ((one.metadata !== undefined || two.metadata !== undefined) && !equalsMetadata(one.metadata, two.metadata)) {
            result.add('metadata');
        }
        if ((one.executionSummary !== undefined || two.executionSummary !== undefined) && !ExecutionSummary.equals(one.executionSummary, two.executionSummary)) {
            result.add('executionSummary');
        }
        return result;
    }
    NotebookCell.diff = diff;
    function equalsMetadata(one, other) {
        if (one === other) {
            return true;
        }
        if (one === null || one === undefined || other === null || other === undefined) {
            return false;
        }
        if (typeof one !== typeof other) {
            return false;
        }
        if (typeof one !== 'object') {
            return false;
        }
        const oneArray = Array.isArray(one);
        const otherArray = Array.isArray(other);
        if (oneArray !== otherArray) {
            return false;
        }
        if (oneArray && otherArray) {
            if (one.length !== other.length) {
                return false;
            }
            for (let i = 0; i < one.length; i++) {
                if (!equalsMetadata(one[i], other[i])) {
                    return false;
                }
            }
        }
        if (Is.objectLiteral(one) && Is.objectLiteral(other)) {
            const oneKeys = Object.keys(one);
            const otherKeys = Object.keys(other);
            if (oneKeys.length !== otherKeys.length) {
                return false;
            }
            oneKeys.sort();
            otherKeys.sort();
            if (!equalsMetadata(oneKeys, otherKeys)) {
                return false;
            }
            for (let i = 0; i < oneKeys.length; i++) {
                const prop = oneKeys[i];
                if (!equalsMetadata(one[prop], other[prop])) {
                    return false;
                }
            }
        }
        return true;
    }
})(NotebookCell = exports.NotebookCell || (exports.NotebookCell = {}));
var NotebookDocument;
(function (NotebookDocument) {
    function create(uri, notebookType, version, cells) {
        return { uri, notebookType, version, cells };
    }
    NotebookDocument.create = create;
    function is(value) {
        const candidate = value;
        return Is.objectLiteral(candidate) && Is.string(candidate.uri) && vscode_languageserver_types_1.integer.is(candidate.version) && Is.typedArray(candidate.cells, NotebookCell.is);
    }
    NotebookDocument.is = is;
})(NotebookDocument = exports.NotebookDocument || (exports.NotebookDocument = {}));
var NotebookDocumentSyncRegistrationType;
(function (NotebookDocumentSyncRegistrationType) {
    NotebookDocumentSyncRegistrationType.method = 'notebookDocument/sync';
    NotebookDocumentSyncRegistrationType.messageDirection = messages_1.MessageDirection.clientToServer;
    NotebookDocumentSyncRegistrationType.type = new messages_1.RegistrationType(NotebookDocumentSyncRegistrationType.method);
})(NotebookDocumentSyncRegistrationType = exports.NotebookDocumentSyncRegistrationType || (exports.NotebookDocumentSyncRegistrationType = {}));
/**
 * A notification sent when a notebook opens.
 *
 * @since 3.17.0
 */
var DidOpenNotebookDocumentNotification;
(function (DidOpenNotebookDocumentNotification) {
    DidOpenNotebookDocumentNotification.method = 'notebookDocument/didOpen';
    DidOpenNotebookDocumentNotification.messageDirection = messages_1.MessageDirection.clientToServer;
    DidOpenNotebookDocumentNotification.type = new messages_1.ProtocolNotificationType(DidOpenNotebookDocumentNotification.method);
    DidOpenNotebookDocumentNotification.registrationMethod = NotebookDocumentSyncRegistrationType.method;
})(DidOpenNotebookDocumentNotification = exports.DidOpenNotebookDocumentNotification || (exports.DidOpenNotebookDocumentNotification = {}));
var NotebookCellArrayChange;
(function (NotebookCellArrayChange) {
    function is(value) {
        const candidate = value;
        return Is.objectLiteral(candidate) && vscode_languageserver_types_1.uinteger.is(candidate.start) && vscode_languageserver_types_1.uinteger.is(candidate.deleteCount) && (candidate.cells === undefined || Is.typedArray(candidate.cells, NotebookCell.is));
    }
    NotebookCellArrayChange.is = is;
    function create(start, deleteCount, cells) {
        const result = { start, deleteCount };
        if (cells !== undefined) {
            result.cells = cells;
        }
        return result;
    }
    NotebookCellArrayChange.create = create;
})(NotebookCellArrayChange = exports.NotebookCellArrayChange || (exports.NotebookCellArrayChange = {}));
var DidChangeNotebookDocumentNotification;
(function (DidChangeNotebookDocumentNotification) {
    DidChangeNotebookDocumentNotification.method = 'notebookDocument/didChange';
    DidChangeNotebookDocumentNotification.messageDirection = messages_1.MessageDirection.clientToServer;
    DidChangeNotebookDocumentNotification.type = new messages_1.ProtocolNotificationType(DidChangeNotebookDocumentNotification.method);
    DidChangeNotebookDocumentNotification.registrationMethod = NotebookDocumentSyncRegistrationType.method;
})(DidChangeNotebookDocumentNotification = exports.DidChangeNotebookDocumentNotification || (exports.DidChangeNotebookDocumentNotification = {}));
/**
 * A notification sent when a notebook document is saved.
 *
 * @since 3.17.0
 */
var DidSaveNotebookDocumentNotification;
(function (DidSaveNotebookDocumentNotification) {
    DidSaveNotebookDocumentNotification.method = 'notebookDocument/didSave';
    DidSaveNotebookDocumentNotification.messageDirection = messages_1.MessageDirection.clientToServer;
    DidSaveNotebookDocumentNotification.type = new messages_1.ProtocolNotificationType(DidSaveNotebookDocumentNotification.method);
    DidSaveNotebookDocumentNotification.registrationMethod = NotebookDocumentSyncRegistrationType.method;
})(DidSaveNotebookDocumentNotification = exports.DidSaveNotebookDocumentNotification || (exports.DidSaveNotebookDocumentNotification = {}));
/**
 * A notification sent when a notebook closes.
 *
 * @since 3.17.0
 */
var DidCloseNotebookDocumentNotification;
(function (DidCloseNotebookDocumentNotification) {
    DidCloseNotebookDocumentNotification.method = 'notebookDocument/didClose';
    DidCloseNotebookDocumentNotification.messageDirection = messages_1.MessageDirection.clientToServer;
    DidCloseNotebookDocumentNotification.type = new messages_1.ProtocolNotificationType(DidCloseNotebookDocumentNotification.method);
    DidCloseNotebookDocumentNotification.registrationMethod = NotebookDocumentSyncRegistrationType.method;
})(DidCloseNotebookDocumentNotification = exports.DidCloseNotebookDocumentNotification || (exports.DidCloseNotebookDocumentNotification = {}));


/***/ }),

/***/ 7895:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.WorkDoneProgressCancelNotification = exports.WorkDoneProgressCreateRequest = exports.WorkDoneProgress = void 0;
const vscode_jsonrpc_1 = __webpack_require__(5953);
const messages_1 = __webpack_require__(8599);
var WorkDoneProgress;
(function (WorkDoneProgress) {
    WorkDoneProgress.type = new vscode_jsonrpc_1.ProgressType();
    function is(value) {
        return value === WorkDoneProgress.type;
    }
    WorkDoneProgress.is = is;
})(WorkDoneProgress = exports.WorkDoneProgress || (exports.WorkDoneProgress = {}));
/**
 * The `window/workDoneProgress/create` request is sent from the server to the client to initiate progress
 * reporting from the server.
 */
var WorkDoneProgressCreateRequest;
(function (WorkDoneProgressCreateRequest) {
    WorkDoneProgressCreateRequest.method = 'window/workDoneProgress/create';
    WorkDoneProgressCreateRequest.messageDirection = messages_1.MessageDirection.serverToClient;
    WorkDoneProgressCreateRequest.type = new messages_1.ProtocolRequestType(WorkDoneProgressCreateRequest.method);
})(WorkDoneProgressCreateRequest = exports.WorkDoneProgressCreateRequest || (exports.WorkDoneProgressCreateRequest = {}));
/**
 * The `window/workDoneProgress/cancel` notification is sent from  the client to the server to cancel a progress
 * initiated on the server side.
 */
var WorkDoneProgressCancelNotification;
(function (WorkDoneProgressCancelNotification) {
    WorkDoneProgressCancelNotification.method = 'window/workDoneProgress/cancel';
    WorkDoneProgressCancelNotification.messageDirection = messages_1.MessageDirection.clientToServer;
    WorkDoneProgressCancelNotification.type = new messages_1.ProtocolNotificationType(WorkDoneProgressCancelNotification.method);
})(WorkDoneProgressCancelNotification = exports.WorkDoneProgressCancelNotification || (exports.WorkDoneProgressCancelNotification = {}));


/***/ }),

/***/ 2392:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.SelectionRangeRequest = void 0;
const messages_1 = __webpack_require__(8599);
/**
 * A request to provide selection ranges in a document. The request's
 * parameter is of type {@link SelectionRangeParams}, the
 * response is of type {@link SelectionRange SelectionRange[]} or a Thenable
 * that resolves to such.
 */
var SelectionRangeRequest;
(function (SelectionRangeRequest) {
    SelectionRangeRequest.method = 'textDocument/selectionRange';
    SelectionRangeRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    SelectionRangeRequest.type = new messages_1.ProtocolRequestType(SelectionRangeRequest.method);
})(SelectionRangeRequest = exports.SelectionRangeRequest || (exports.SelectionRangeRequest = {}));


/***/ }),

/***/ 8489:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.SemanticTokensRefreshRequest = exports.SemanticTokensRangeRequest = exports.SemanticTokensDeltaRequest = exports.SemanticTokensRequest = exports.SemanticTokensRegistrationType = exports.TokenFormat = void 0;
const messages_1 = __webpack_require__(8599);
//------- 'textDocument/semanticTokens' -----
var TokenFormat;
(function (TokenFormat) {
    TokenFormat.Relative = 'relative';
})(TokenFormat = exports.TokenFormat || (exports.TokenFormat = {}));
var SemanticTokensRegistrationType;
(function (SemanticTokensRegistrationType) {
    SemanticTokensRegistrationType.method = 'textDocument/semanticTokens';
    SemanticTokensRegistrationType.type = new messages_1.RegistrationType(SemanticTokensRegistrationType.method);
})(SemanticTokensRegistrationType = exports.SemanticTokensRegistrationType || (exports.SemanticTokensRegistrationType = {}));
/**
 * @since 3.16.0
 */
var SemanticTokensRequest;
(function (SemanticTokensRequest) {
    SemanticTokensRequest.method = 'textDocument/semanticTokens/full';
    SemanticTokensRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    SemanticTokensRequest.type = new messages_1.ProtocolRequestType(SemanticTokensRequest.method);
    SemanticTokensRequest.registrationMethod = SemanticTokensRegistrationType.method;
})(SemanticTokensRequest = exports.SemanticTokensRequest || (exports.SemanticTokensRequest = {}));
/**
 * @since 3.16.0
 */
var SemanticTokensDeltaRequest;
(function (SemanticTokensDeltaRequest) {
    SemanticTokensDeltaRequest.method = 'textDocument/semanticTokens/full/delta';
    SemanticTokensDeltaRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    SemanticTokensDeltaRequest.type = new messages_1.ProtocolRequestType(SemanticTokensDeltaRequest.method);
    SemanticTokensDeltaRequest.registrationMethod = SemanticTokensRegistrationType.method;
})(SemanticTokensDeltaRequest = exports.SemanticTokensDeltaRequest || (exports.SemanticTokensDeltaRequest = {}));
/**
 * @since 3.16.0
 */
var SemanticTokensRangeRequest;
(function (SemanticTokensRangeRequest) {
    SemanticTokensRangeRequest.method = 'textDocument/semanticTokens/range';
    SemanticTokensRangeRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    SemanticTokensRangeRequest.type = new messages_1.ProtocolRequestType(SemanticTokensRangeRequest.method);
    SemanticTokensRangeRequest.registrationMethod = SemanticTokensRegistrationType.method;
})(SemanticTokensRangeRequest = exports.SemanticTokensRangeRequest || (exports.SemanticTokensRangeRequest = {}));
/**
 * @since 3.16.0
 */
var SemanticTokensRefreshRequest;
(function (SemanticTokensRefreshRequest) {
    SemanticTokensRefreshRequest.method = `workspace/semanticTokens/refresh`;
    SemanticTokensRefreshRequest.messageDirection = messages_1.MessageDirection.serverToClient;
    SemanticTokensRefreshRequest.type = new messages_1.ProtocolRequestType0(SemanticTokensRefreshRequest.method);
})(SemanticTokensRefreshRequest = exports.SemanticTokensRefreshRequest || (exports.SemanticTokensRefreshRequest = {}));


/***/ }),

/***/ 1541:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ShowDocumentRequest = void 0;
const messages_1 = __webpack_require__(8599);
/**
 * A request to show a document. This request might open an
 * external program depending on the value of the URI to open.
 * For example a request to open `https://code.visualstudio.com/`
 * will very likely open the URI in a WEB browser.
 *
 * @since 3.16.0
*/
var ShowDocumentRequest;
(function (ShowDocumentRequest) {
    ShowDocumentRequest.method = 'window/showDocument';
    ShowDocumentRequest.messageDirection = messages_1.MessageDirection.serverToClient;
    ShowDocumentRequest.type = new messages_1.ProtocolRequestType(ShowDocumentRequest.method);
})(ShowDocumentRequest = exports.ShowDocumentRequest || (exports.ShowDocumentRequest = {}));


/***/ }),

/***/ 8642:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.TypeDefinitionRequest = void 0;
const messages_1 = __webpack_require__(8599);
// @ts-ignore: to avoid inlining LocatioLink as dynamic import
let __noDynamicImport;
/**
 * A request to resolve the type definition locations of a symbol at a given text
 * document position. The request's parameter is of type [TextDocumentPositionParams]
 * (#TextDocumentPositionParams) the response is of type {@link Definition} or a
 * Thenable that resolves to such.
 */
var TypeDefinitionRequest;
(function (TypeDefinitionRequest) {
    TypeDefinitionRequest.method = 'textDocument/typeDefinition';
    TypeDefinitionRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    TypeDefinitionRequest.type = new messages_1.ProtocolRequestType(TypeDefinitionRequest.method);
})(TypeDefinitionRequest = exports.TypeDefinitionRequest || (exports.TypeDefinitionRequest = {}));


/***/ }),

/***/ 5318:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/* --------------------------------------------------------------------------------------------
 * Copyright (c) TypeFox, Microsoft and others. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.TypeHierarchySubtypesRequest = exports.TypeHierarchySupertypesRequest = exports.TypeHierarchyPrepareRequest = void 0;
const messages_1 = __webpack_require__(8599);
/**
 * A request to result a `TypeHierarchyItem` in a document at a given position.
 * Can be used as an input to a subtypes or supertypes type hierarchy.
 *
 * @since 3.17.0
 */
var TypeHierarchyPrepareRequest;
(function (TypeHierarchyPrepareRequest) {
    TypeHierarchyPrepareRequest.method = 'textDocument/prepareTypeHierarchy';
    TypeHierarchyPrepareRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    TypeHierarchyPrepareRequest.type = new messages_1.ProtocolRequestType(TypeHierarchyPrepareRequest.method);
})(TypeHierarchyPrepareRequest = exports.TypeHierarchyPrepareRequest || (exports.TypeHierarchyPrepareRequest = {}));
/**
 * A request to resolve the supertypes for a given `TypeHierarchyItem`.
 *
 * @since 3.17.0
 */
var TypeHierarchySupertypesRequest;
(function (TypeHierarchySupertypesRequest) {
    TypeHierarchySupertypesRequest.method = 'typeHierarchy/supertypes';
    TypeHierarchySupertypesRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    TypeHierarchySupertypesRequest.type = new messages_1.ProtocolRequestType(TypeHierarchySupertypesRequest.method);
})(TypeHierarchySupertypesRequest = exports.TypeHierarchySupertypesRequest || (exports.TypeHierarchySupertypesRequest = {}));
/**
 * A request to resolve the subtypes for a given `TypeHierarchyItem`.
 *
 * @since 3.17.0
 */
var TypeHierarchySubtypesRequest;
(function (TypeHierarchySubtypesRequest) {
    TypeHierarchySubtypesRequest.method = 'typeHierarchy/subtypes';
    TypeHierarchySubtypesRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    TypeHierarchySubtypesRequest.type = new messages_1.ProtocolRequestType(TypeHierarchySubtypesRequest.method);
})(TypeHierarchySubtypesRequest = exports.TypeHierarchySubtypesRequest || (exports.TypeHierarchySubtypesRequest = {}));


/***/ }),

/***/ 3402:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DidChangeWorkspaceFoldersNotification = exports.WorkspaceFoldersRequest = void 0;
const messages_1 = __webpack_require__(8599);
/**
 * The `workspace/workspaceFolders` is sent from the server to the client to fetch the open workspace folders.
 */
var WorkspaceFoldersRequest;
(function (WorkspaceFoldersRequest) {
    WorkspaceFoldersRequest.method = 'workspace/workspaceFolders';
    WorkspaceFoldersRequest.messageDirection = messages_1.MessageDirection.serverToClient;
    WorkspaceFoldersRequest.type = new messages_1.ProtocolRequestType0(WorkspaceFoldersRequest.method);
})(WorkspaceFoldersRequest = exports.WorkspaceFoldersRequest || (exports.WorkspaceFoldersRequest = {}));
/**
 * The `workspace/didChangeWorkspaceFolders` notification is sent from the client to the server when the workspace
 * folder configuration changes.
 */
var DidChangeWorkspaceFoldersNotification;
(function (DidChangeWorkspaceFoldersNotification) {
    DidChangeWorkspaceFoldersNotification.method = 'workspace/didChangeWorkspaceFolders';
    DidChangeWorkspaceFoldersNotification.messageDirection = messages_1.MessageDirection.clientToServer;
    DidChangeWorkspaceFoldersNotification.type = new messages_1.ProtocolNotificationType(DidChangeWorkspaceFoldersNotification.method);
})(DidChangeWorkspaceFoldersNotification = exports.DidChangeWorkspaceFoldersNotification || (exports.DidChangeWorkspaceFoldersNotification = {}));


/***/ }),

/***/ 2523:
/***/ ((__unused_webpack_module, exports) => {

"use strict";
/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.objectLiteral = exports.typedArray = exports.stringArray = exports.array = exports.func = exports.error = exports.number = exports.string = exports.boolean = void 0;
function boolean(value) {
    return value === true || value === false;
}
exports.boolean = boolean;
function string(value) {
    return typeof value === 'string' || value instanceof String;
}
exports.string = string;
function number(value) {
    return typeof value === 'number' || value instanceof Number;
}
exports.number = number;
function error(value) {
    return value instanceof Error;
}
exports.error = error;
function func(value) {
    return typeof value === 'function';
}
exports.func = func;
function array(value) {
    return Array.isArray(value);
}
exports.array = array;
function stringArray(value) {
    return array(value) && value.every(elem => string(elem));
}
exports.stringArray = stringArray;
function typedArray(value, check) {
    return Array.isArray(value) && value.every(check);
}
exports.typedArray = typedArray;
function objectLiteral(value) {
    // Strictly speaking class instances pass this check as well. Since the LSP
    // doesn't use classes we ignore this for now. If we do we need to add something
    // like this: `Object.getPrototypeOf(Object.getPrototypeOf(x)) === null`
    return value !== null && typeof value === 'object';
}
exports.objectLiteral = objectLiteral;


/***/ }),

/***/ 4767:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   AnnotatedTextEdit: () => (/* binding */ AnnotatedTextEdit),
/* harmony export */   ChangeAnnotation: () => (/* binding */ ChangeAnnotation),
/* harmony export */   ChangeAnnotationIdentifier: () => (/* binding */ ChangeAnnotationIdentifier),
/* harmony export */   CodeAction: () => (/* binding */ CodeAction),
/* harmony export */   CodeActionContext: () => (/* binding */ CodeActionContext),
/* harmony export */   CodeActionKind: () => (/* binding */ CodeActionKind),
/* harmony export */   CodeActionTriggerKind: () => (/* binding */ CodeActionTriggerKind),
/* harmony export */   CodeDescription: () => (/* binding */ CodeDescription),
/* harmony export */   CodeLens: () => (/* binding */ CodeLens),
/* harmony export */   Color: () => (/* binding */ Color),
/* harmony export */   ColorInformation: () => (/* binding */ ColorInformation),
/* harmony export */   ColorPresentation: () => (/* binding */ ColorPresentation),
/* harmony export */   Command: () => (/* binding */ Command),
/* harmony export */   CompletionItem: () => (/* binding */ CompletionItem),
/* harmony export */   CompletionItemKind: () => (/* binding */ CompletionItemKind),
/* harmony export */   CompletionItemLabelDetails: () => (/* binding */ CompletionItemLabelDetails),
/* harmony export */   CompletionItemTag: () => (/* binding */ CompletionItemTag),
/* harmony export */   CompletionList: () => (/* binding */ CompletionList),
/* harmony export */   CreateFile: () => (/* binding */ CreateFile),
/* harmony export */   DeleteFile: () => (/* binding */ DeleteFile),
/* harmony export */   Diagnostic: () => (/* binding */ Diagnostic),
/* harmony export */   DiagnosticRelatedInformation: () => (/* binding */ DiagnosticRelatedInformation),
/* harmony export */   DiagnosticSeverity: () => (/* binding */ DiagnosticSeverity),
/* harmony export */   DiagnosticTag: () => (/* binding */ DiagnosticTag),
/* harmony export */   DocumentHighlight: () => (/* binding */ DocumentHighlight),
/* harmony export */   DocumentHighlightKind: () => (/* binding */ DocumentHighlightKind),
/* harmony export */   DocumentLink: () => (/* binding */ DocumentLink),
/* harmony export */   DocumentSymbol: () => (/* binding */ DocumentSymbol),
/* harmony export */   DocumentUri: () => (/* binding */ DocumentUri),
/* harmony export */   EOL: () => (/* binding */ EOL),
/* harmony export */   FoldingRange: () => (/* binding */ FoldingRange),
/* harmony export */   FoldingRangeKind: () => (/* binding */ FoldingRangeKind),
/* harmony export */   FormattingOptions: () => (/* binding */ FormattingOptions),
/* harmony export */   Hover: () => (/* binding */ Hover),
/* harmony export */   InlayHint: () => (/* binding */ InlayHint),
/* harmony export */   InlayHintKind: () => (/* binding */ InlayHintKind),
/* harmony export */   InlayHintLabelPart: () => (/* binding */ InlayHintLabelPart),
/* harmony export */   InlineValueContext: () => (/* binding */ InlineValueContext),
/* harmony export */   InlineValueEvaluatableExpression: () => (/* binding */ InlineValueEvaluatableExpression),
/* harmony export */   InlineValueText: () => (/* binding */ InlineValueText),
/* harmony export */   InlineValueVariableLookup: () => (/* binding */ InlineValueVariableLookup),
/* harmony export */   InsertReplaceEdit: () => (/* binding */ InsertReplaceEdit),
/* harmony export */   InsertTextFormat: () => (/* binding */ InsertTextFormat),
/* harmony export */   InsertTextMode: () => (/* binding */ InsertTextMode),
/* harmony export */   Location: () => (/* binding */ Location),
/* harmony export */   LocationLink: () => (/* binding */ LocationLink),
/* harmony export */   MarkedString: () => (/* binding */ MarkedString),
/* harmony export */   MarkupContent: () => (/* binding */ MarkupContent),
/* harmony export */   MarkupKind: () => (/* binding */ MarkupKind),
/* harmony export */   OptionalVersionedTextDocumentIdentifier: () => (/* binding */ OptionalVersionedTextDocumentIdentifier),
/* harmony export */   ParameterInformation: () => (/* binding */ ParameterInformation),
/* harmony export */   Position: () => (/* binding */ Position),
/* harmony export */   Range: () => (/* binding */ Range),
/* harmony export */   RenameFile: () => (/* binding */ RenameFile),
/* harmony export */   SelectionRange: () => (/* binding */ SelectionRange),
/* harmony export */   SemanticTokenModifiers: () => (/* binding */ SemanticTokenModifiers),
/* harmony export */   SemanticTokenTypes: () => (/* binding */ SemanticTokenTypes),
/* harmony export */   SemanticTokens: () => (/* binding */ SemanticTokens),
/* harmony export */   SignatureInformation: () => (/* binding */ SignatureInformation),
/* harmony export */   SymbolInformation: () => (/* binding */ SymbolInformation),
/* harmony export */   SymbolKind: () => (/* binding */ SymbolKind),
/* harmony export */   SymbolTag: () => (/* binding */ SymbolTag),
/* harmony export */   TextDocument: () => (/* binding */ TextDocument),
/* harmony export */   TextDocumentEdit: () => (/* binding */ TextDocumentEdit),
/* harmony export */   TextDocumentIdentifier: () => (/* binding */ TextDocumentIdentifier),
/* harmony export */   TextDocumentItem: () => (/* binding */ TextDocumentItem),
/* harmony export */   TextEdit: () => (/* binding */ TextEdit),
/* harmony export */   URI: () => (/* binding */ URI),
/* harmony export */   VersionedTextDocumentIdentifier: () => (/* binding */ VersionedTextDocumentIdentifier),
/* harmony export */   WorkspaceChange: () => (/* binding */ WorkspaceChange),
/* harmony export */   WorkspaceEdit: () => (/* binding */ WorkspaceEdit),
/* harmony export */   WorkspaceFolder: () => (/* binding */ WorkspaceFolder),
/* harmony export */   WorkspaceSymbol: () => (/* binding */ WorkspaceSymbol),
/* harmony export */   integer: () => (/* binding */ integer),
/* harmony export */   uinteger: () => (/* binding */ uinteger)
/* harmony export */ });
/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */

var DocumentUri;
(function (DocumentUri) {
    function is(value) {
        return typeof value === 'string';
    }
    DocumentUri.is = is;
})(DocumentUri || (DocumentUri = {}));
var URI;
(function (URI) {
    function is(value) {
        return typeof value === 'string';
    }
    URI.is = is;
})(URI || (URI = {}));
var integer;
(function (integer) {
    integer.MIN_VALUE = -2147483648;
    integer.MAX_VALUE = 2147483647;
    function is(value) {
        return typeof value === 'number' && integer.MIN_VALUE <= value && value <= integer.MAX_VALUE;
    }
    integer.is = is;
})(integer || (integer = {}));
var uinteger;
(function (uinteger) {
    uinteger.MIN_VALUE = 0;
    uinteger.MAX_VALUE = 2147483647;
    function is(value) {
        return typeof value === 'number' && uinteger.MIN_VALUE <= value && value <= uinteger.MAX_VALUE;
    }
    uinteger.is = is;
})(uinteger || (uinteger = {}));
/**
 * The Position namespace provides helper functions to work with
 * {@link Position} literals.
 */
var Position;
(function (Position) {
    /**
     * Creates a new Position literal from the given line and character.
     * @param line The position's line.
     * @param character The position's character.
     */
    function create(line, character) {
        if (line === Number.MAX_VALUE) {
            line = uinteger.MAX_VALUE;
        }
        if (character === Number.MAX_VALUE) {
            character = uinteger.MAX_VALUE;
        }
        return { line: line, character: character };
    }
    Position.create = create;
    /**
     * Checks whether the given literal conforms to the {@link Position} interface.
     */
    function is(value) {
        var candidate = value;
        return Is.objectLiteral(candidate) && Is.uinteger(candidate.line) && Is.uinteger(candidate.character);
    }
    Position.is = is;
})(Position || (Position = {}));
/**
 * The Range namespace provides helper functions to work with
 * {@link Range} literals.
 */
var Range;
(function (Range) {
    function create(one, two, three, four) {
        if (Is.uinteger(one) && Is.uinteger(two) && Is.uinteger(three) && Is.uinteger(four)) {
            return { start: Position.create(one, two), end: Position.create(three, four) };
        }
        else if (Position.is(one) && Position.is(two)) {
            return { start: one, end: two };
        }
        else {
            throw new Error("Range#create called with invalid arguments[".concat(one, ", ").concat(two, ", ").concat(three, ", ").concat(four, "]"));
        }
    }
    Range.create = create;
    /**
     * Checks whether the given literal conforms to the {@link Range} interface.
     */
    function is(value) {
        var candidate = value;
        return Is.objectLiteral(candidate) && Position.is(candidate.start) && Position.is(candidate.end);
    }
    Range.is = is;
})(Range || (Range = {}));
/**
 * The Location namespace provides helper functions to work with
 * {@link Location} literals.
 */
var Location;
(function (Location) {
    /**
     * Creates a Location literal.
     * @param uri The location's uri.
     * @param range The location's range.
     */
    function create(uri, range) {
        return { uri: uri, range: range };
    }
    Location.create = create;
    /**
     * Checks whether the given literal conforms to the {@link Location} interface.
     */
    function is(value) {
        var candidate = value;
        return Is.objectLiteral(candidate) && Range.is(candidate.range) && (Is.string(candidate.uri) || Is.undefined(candidate.uri));
    }
    Location.is = is;
})(Location || (Location = {}));
/**
 * The LocationLink namespace provides helper functions to work with
 * {@link LocationLink} literals.
 */
var LocationLink;
(function (LocationLink) {
    /**
     * Creates a LocationLink literal.
     * @param targetUri The definition's uri.
     * @param targetRange The full range of the definition.
     * @param targetSelectionRange The span of the symbol definition at the target.
     * @param originSelectionRange The span of the symbol being defined in the originating source file.
     */
    function create(targetUri, targetRange, targetSelectionRange, originSelectionRange) {
        return { targetUri: targetUri, targetRange: targetRange, targetSelectionRange: targetSelectionRange, originSelectionRange: originSelectionRange };
    }
    LocationLink.create = create;
    /**
     * Checks whether the given literal conforms to the {@link LocationLink} interface.
     */
    function is(value) {
        var candidate = value;
        return Is.objectLiteral(candidate) && Range.is(candidate.targetRange) && Is.string(candidate.targetUri)
            && Range.is(candidate.targetSelectionRange)
            && (Range.is(candidate.originSelectionRange) || Is.undefined(candidate.originSelectionRange));
    }
    LocationLink.is = is;
})(LocationLink || (LocationLink = {}));
/**
 * The Color namespace provides helper functions to work with
 * {@link Color} literals.
 */
var Color;
(function (Color) {
    /**
     * Creates a new Color literal.
     */
    function create(red, green, blue, alpha) {
        return {
            red: red,
            green: green,
            blue: blue,
            alpha: alpha,
        };
    }
    Color.create = create;
    /**
     * Checks whether the given literal conforms to the {@link Color} interface.
     */
    function is(value) {
        var candidate = value;
        return Is.objectLiteral(candidate) && Is.numberRange(candidate.red, 0, 1)
            && Is.numberRange(candidate.green, 0, 1)
            && Is.numberRange(candidate.blue, 0, 1)
            && Is.numberRange(candidate.alpha, 0, 1);
    }
    Color.is = is;
})(Color || (Color = {}));
/**
 * The ColorInformation namespace provides helper functions to work with
 * {@link ColorInformation} literals.
 */
var ColorInformation;
(function (ColorInformation) {
    /**
     * Creates a new ColorInformation literal.
     */
    function create(range, color) {
        return {
            range: range,
            color: color,
        };
    }
    ColorInformation.create = create;
    /**
     * Checks whether the given literal conforms to the {@link ColorInformation} interface.
     */
    function is(value) {
        var candidate = value;
        return Is.objectLiteral(candidate) && Range.is(candidate.range) && Color.is(candidate.color);
    }
    ColorInformation.is = is;
})(ColorInformation || (ColorInformation = {}));
/**
 * The Color namespace provides helper functions to work with
 * {@link ColorPresentation} literals.
 */
var ColorPresentation;
(function (ColorPresentation) {
    /**
     * Creates a new ColorInformation literal.
     */
    function create(label, textEdit, additionalTextEdits) {
        return {
            label: label,
            textEdit: textEdit,
            additionalTextEdits: additionalTextEdits,
        };
    }
    ColorPresentation.create = create;
    /**
     * Checks whether the given literal conforms to the {@link ColorInformation} interface.
     */
    function is(value) {
        var candidate = value;
        return Is.objectLiteral(candidate) && Is.string(candidate.label)
            && (Is.undefined(candidate.textEdit) || TextEdit.is(candidate))
            && (Is.undefined(candidate.additionalTextEdits) || Is.typedArray(candidate.additionalTextEdits, TextEdit.is));
    }
    ColorPresentation.is = is;
})(ColorPresentation || (ColorPresentation = {}));
/**
 * A set of predefined range kinds.
 */
var FoldingRangeKind;
(function (FoldingRangeKind) {
    /**
     * Folding range for a comment
     */
    FoldingRangeKind.Comment = 'comment';
    /**
     * Folding range for an import or include
     */
    FoldingRangeKind.Imports = 'imports';
    /**
     * Folding range for a region (e.g. `#region`)
     */
    FoldingRangeKind.Region = 'region';
})(FoldingRangeKind || (FoldingRangeKind = {}));
/**
 * The folding range namespace provides helper functions to work with
 * {@link FoldingRange} literals.
 */
var FoldingRange;
(function (FoldingRange) {
    /**
     * Creates a new FoldingRange literal.
     */
    function create(startLine, endLine, startCharacter, endCharacter, kind, collapsedText) {
        var result = {
            startLine: startLine,
            endLine: endLine
        };
        if (Is.defined(startCharacter)) {
            result.startCharacter = startCharacter;
        }
        if (Is.defined(endCharacter)) {
            result.endCharacter = endCharacter;
        }
        if (Is.defined(kind)) {
            result.kind = kind;
        }
        if (Is.defined(collapsedText)) {
            result.collapsedText = collapsedText;
        }
        return result;
    }
    FoldingRange.create = create;
    /**
     * Checks whether the given literal conforms to the {@link FoldingRange} interface.
     */
    function is(value) {
        var candidate = value;
        return Is.objectLiteral(candidate) && Is.uinteger(candidate.startLine) && Is.uinteger(candidate.startLine)
            && (Is.undefined(candidate.startCharacter) || Is.uinteger(candidate.startCharacter))
            && (Is.undefined(candidate.endCharacter) || Is.uinteger(candidate.endCharacter))
            && (Is.undefined(candidate.kind) || Is.string(candidate.kind));
    }
    FoldingRange.is = is;
})(FoldingRange || (FoldingRange = {}));
/**
 * The DiagnosticRelatedInformation namespace provides helper functions to work with
 * {@link DiagnosticRelatedInformation} literals.
 */
var DiagnosticRelatedInformation;
(function (DiagnosticRelatedInformation) {
    /**
     * Creates a new DiagnosticRelatedInformation literal.
     */
    function create(location, message) {
        return {
            location: location,
            message: message
        };
    }
    DiagnosticRelatedInformation.create = create;
    /**
     * Checks whether the given literal conforms to the {@link DiagnosticRelatedInformation} interface.
     */
    function is(value) {
        var candidate = value;
        return Is.defined(candidate) && Location.is(candidate.location) && Is.string(candidate.message);
    }
    DiagnosticRelatedInformation.is = is;
})(DiagnosticRelatedInformation || (DiagnosticRelatedInformation = {}));
/**
 * The diagnostic's severity.
 */
var DiagnosticSeverity;
(function (DiagnosticSeverity) {
    /**
     * Reports an error.
     */
    DiagnosticSeverity.Error = 1;
    /**
     * Reports a warning.
     */
    DiagnosticSeverity.Warning = 2;
    /**
     * Reports an information.
     */
    DiagnosticSeverity.Information = 3;
    /**
     * Reports a hint.
     */
    DiagnosticSeverity.Hint = 4;
})(DiagnosticSeverity || (DiagnosticSeverity = {}));
/**
 * The diagnostic tags.
 *
 * @since 3.15.0
 */
var DiagnosticTag;
(function (DiagnosticTag) {
    /**
     * Unused or unnecessary code.
     *
     * Clients are allowed to render diagnostics with this tag faded out instead of having
     * an error squiggle.
     */
    DiagnosticTag.Unnecessary = 1;
    /**
     * Deprecated or obsolete code.
     *
     * Clients are allowed to rendered diagnostics with this tag strike through.
     */
    DiagnosticTag.Deprecated = 2;
})(DiagnosticTag || (DiagnosticTag = {}));
/**
 * The CodeDescription namespace provides functions to deal with descriptions for diagnostic codes.
 *
 * @since 3.16.0
 */
var CodeDescription;
(function (CodeDescription) {
    function is(value) {
        var candidate = value;
        return Is.objectLiteral(candidate) && Is.string(candidate.href);
    }
    CodeDescription.is = is;
})(CodeDescription || (CodeDescription = {}));
/**
 * The Diagnostic namespace provides helper functions to work with
 * {@link Diagnostic} literals.
 */
var Diagnostic;
(function (Diagnostic) {
    /**
     * Creates a new Diagnostic literal.
     */
    function create(range, message, severity, code, source, relatedInformation) {
        var result = { range: range, message: message };
        if (Is.defined(severity)) {
            result.severity = severity;
        }
        if (Is.defined(code)) {
            result.code = code;
        }
        if (Is.defined(source)) {
            result.source = source;
        }
        if (Is.defined(relatedInformation)) {
            result.relatedInformation = relatedInformation;
        }
        return result;
    }
    Diagnostic.create = create;
    /**
     * Checks whether the given literal conforms to the {@link Diagnostic} interface.
     */
    function is(value) {
        var _a;
        var candidate = value;
        return Is.defined(candidate)
            && Range.is(candidate.range)
            && Is.string(candidate.message)
            && (Is.number(candidate.severity) || Is.undefined(candidate.severity))
            && (Is.integer(candidate.code) || Is.string(candidate.code) || Is.undefined(candidate.code))
            && (Is.undefined(candidate.codeDescription) || (Is.string((_a = candidate.codeDescription) === null || _a === void 0 ? void 0 : _a.href)))
            && (Is.string(candidate.source) || Is.undefined(candidate.source))
            && (Is.undefined(candidate.relatedInformation) || Is.typedArray(candidate.relatedInformation, DiagnosticRelatedInformation.is));
    }
    Diagnostic.is = is;
})(Diagnostic || (Diagnostic = {}));
/**
 * The Command namespace provides helper functions to work with
 * {@link Command} literals.
 */
var Command;
(function (Command) {
    /**
     * Creates a new Command literal.
     */
    function create(title, command) {
        var args = [];
        for (var _i = 2; _i < arguments.length; _i++) {
            args[_i - 2] = arguments[_i];
        }
        var result = { title: title, command: command };
        if (Is.defined(args) && args.length > 0) {
            result.arguments = args;
        }
        return result;
    }
    Command.create = create;
    /**
     * Checks whether the given literal conforms to the {@link Command} interface.
     */
    function is(value) {
        var candidate = value;
        return Is.defined(candidate) && Is.string(candidate.title) && Is.string(candidate.command);
    }
    Command.is = is;
})(Command || (Command = {}));
/**
 * The TextEdit namespace provides helper function to create replace,
 * insert and delete edits more easily.
 */
var TextEdit;
(function (TextEdit) {
    /**
     * Creates a replace text edit.
     * @param range The range of text to be replaced.
     * @param newText The new text.
     */
    function replace(range, newText) {
        return { range: range, newText: newText };
    }
    TextEdit.replace = replace;
    /**
     * Creates an insert text edit.
     * @param position The position to insert the text at.
     * @param newText The text to be inserted.
     */
    function insert(position, newText) {
        return { range: { start: position, end: position }, newText: newText };
    }
    TextEdit.insert = insert;
    /**
     * Creates a delete text edit.
     * @param range The range of text to be deleted.
     */
    function del(range) {
        return { range: range, newText: '' };
    }
    TextEdit.del = del;
    function is(value) {
        var candidate = value;
        return Is.objectLiteral(candidate)
            && Is.string(candidate.newText)
            && Range.is(candidate.range);
    }
    TextEdit.is = is;
})(TextEdit || (TextEdit = {}));
var ChangeAnnotation;
(function (ChangeAnnotation) {
    function create(label, needsConfirmation, description) {
        var result = { label: label };
        if (needsConfirmation !== undefined) {
            result.needsConfirmation = needsConfirmation;
        }
        if (description !== undefined) {
            result.description = description;
        }
        return result;
    }
    ChangeAnnotation.create = create;
    function is(value) {
        var candidate = value;
        return Is.objectLiteral(candidate) && Is.string(candidate.label) &&
            (Is.boolean(candidate.needsConfirmation) || candidate.needsConfirmation === undefined) &&
            (Is.string(candidate.description) || candidate.description === undefined);
    }
    ChangeAnnotation.is = is;
})(ChangeAnnotation || (ChangeAnnotation = {}));
var ChangeAnnotationIdentifier;
(function (ChangeAnnotationIdentifier) {
    function is(value) {
        var candidate = value;
        return Is.string(candidate);
    }
    ChangeAnnotationIdentifier.is = is;
})(ChangeAnnotationIdentifier || (ChangeAnnotationIdentifier = {}));
var AnnotatedTextEdit;
(function (AnnotatedTextEdit) {
    /**
     * Creates an annotated replace text edit.
     *
     * @param range The range of text to be replaced.
     * @param newText The new text.
     * @param annotation The annotation.
     */
    function replace(range, newText, annotation) {
        return { range: range, newText: newText, annotationId: annotation };
    }
    AnnotatedTextEdit.replace = replace;
    /**
     * Creates an annotated insert text edit.
     *
     * @param position The position to insert the text at.
     * @param newText The text to be inserted.
     * @param annotation The annotation.
     */
    function insert(position, newText, annotation) {
        return { range: { start: position, end: position }, newText: newText, annotationId: annotation };
    }
    AnnotatedTextEdit.insert = insert;
    /**
     * Creates an annotated delete text edit.
     *
     * @param range The range of text to be deleted.
     * @param annotation The annotation.
     */
    function del(range, annotation) {
        return { range: range, newText: '', annotationId: annotation };
    }
    AnnotatedTextEdit.del = del;
    function is(value) {
        var candidate = value;
        return TextEdit.is(candidate) && (ChangeAnnotation.is(candidate.annotationId) || ChangeAnnotationIdentifier.is(candidate.annotationId));
    }
    AnnotatedTextEdit.is = is;
})(AnnotatedTextEdit || (AnnotatedTextEdit = {}));
/**
 * The TextDocumentEdit namespace provides helper function to create
 * an edit that manipulates a text document.
 */
var TextDocumentEdit;
(function (TextDocumentEdit) {
    /**
     * Creates a new `TextDocumentEdit`
     */
    function create(textDocument, edits) {
        return { textDocument: textDocument, edits: edits };
    }
    TextDocumentEdit.create = create;
    function is(value) {
        var candidate = value;
        return Is.defined(candidate)
            && OptionalVersionedTextDocumentIdentifier.is(candidate.textDocument)
            && Array.isArray(candidate.edits);
    }
    TextDocumentEdit.is = is;
})(TextDocumentEdit || (TextDocumentEdit = {}));
var CreateFile;
(function (CreateFile) {
    function create(uri, options, annotation) {
        var result = {
            kind: 'create',
            uri: uri
        };
        if (options !== undefined && (options.overwrite !== undefined || options.ignoreIfExists !== undefined)) {
            result.options = options;
        }
        if (annotation !== undefined) {
            result.annotationId = annotation;
        }
        return result;
    }
    CreateFile.create = create;
    function is(value) {
        var candidate = value;
        return candidate && candidate.kind === 'create' && Is.string(candidate.uri) && (candidate.options === undefined ||
            ((candidate.options.overwrite === undefined || Is.boolean(candidate.options.overwrite)) && (candidate.options.ignoreIfExists === undefined || Is.boolean(candidate.options.ignoreIfExists)))) && (candidate.annotationId === undefined || ChangeAnnotationIdentifier.is(candidate.annotationId));
    }
    CreateFile.is = is;
})(CreateFile || (CreateFile = {}));
var RenameFile;
(function (RenameFile) {
    function create(oldUri, newUri, options, annotation) {
        var result = {
            kind: 'rename',
            oldUri: oldUri,
            newUri: newUri
        };
        if (options !== undefined && (options.overwrite !== undefined || options.ignoreIfExists !== undefined)) {
            result.options = options;
        }
        if (annotation !== undefined) {
            result.annotationId = annotation;
        }
        return result;
    }
    RenameFile.create = create;
    function is(value) {
        var candidate = value;
        return candidate && candidate.kind === 'rename' && Is.string(candidate.oldUri) && Is.string(candidate.newUri) && (candidate.options === undefined ||
            ((candidate.options.overwrite === undefined || Is.boolean(candidate.options.overwrite)) && (candidate.options.ignoreIfExists === undefined || Is.boolean(candidate.options.ignoreIfExists)))) && (candidate.annotationId === undefined || ChangeAnnotationIdentifier.is(candidate.annotationId));
    }
    RenameFile.is = is;
})(RenameFile || (RenameFile = {}));
var DeleteFile;
(function (DeleteFile) {
    function create(uri, options, annotation) {
        var result = {
            kind: 'delete',
            uri: uri
        };
        if (options !== undefined && (options.recursive !== undefined || options.ignoreIfNotExists !== undefined)) {
            result.options = options;
        }
        if (annotation !== undefined) {
            result.annotationId = annotation;
        }
        return result;
    }
    DeleteFile.create = create;
    function is(value) {
        var candidate = value;
        return candidate && candidate.kind === 'delete' && Is.string(candidate.uri) && (candidate.options === undefined ||
            ((candidate.options.recursive === undefined || Is.boolean(candidate.options.recursive)) && (candidate.options.ignoreIfNotExists === undefined || Is.boolean(candidate.options.ignoreIfNotExists)))) && (candidate.annotationId === undefined || ChangeAnnotationIdentifier.is(candidate.annotationId));
    }
    DeleteFile.is = is;
})(DeleteFile || (DeleteFile = {}));
var WorkspaceEdit;
(function (WorkspaceEdit) {
    function is(value) {
        var candidate = value;
        return candidate &&
            (candidate.changes !== undefined || candidate.documentChanges !== undefined) &&
            (candidate.documentChanges === undefined || candidate.documentChanges.every(function (change) {
                if (Is.string(change.kind)) {
                    return CreateFile.is(change) || RenameFile.is(change) || DeleteFile.is(change);
                }
                else {
                    return TextDocumentEdit.is(change);
                }
            }));
    }
    WorkspaceEdit.is = is;
})(WorkspaceEdit || (WorkspaceEdit = {}));
var TextEditChangeImpl = /** @class */ (function () {
    function TextEditChangeImpl(edits, changeAnnotations) {
        this.edits = edits;
        this.changeAnnotations = changeAnnotations;
    }
    TextEditChangeImpl.prototype.insert = function (position, newText, annotation) {
        var edit;
        var id;
        if (annotation === undefined) {
            edit = TextEdit.insert(position, newText);
        }
        else if (ChangeAnnotationIdentifier.is(annotation)) {
            id = annotation;
            edit = AnnotatedTextEdit.insert(position, newText, annotation);
        }
        else {
            this.assertChangeAnnotations(this.changeAnnotations);
            id = this.changeAnnotations.manage(annotation);
            edit = AnnotatedTextEdit.insert(position, newText, id);
        }
        this.edits.push(edit);
        if (id !== undefined) {
            return id;
        }
    };
    TextEditChangeImpl.prototype.replace = function (range, newText, annotation) {
        var edit;
        var id;
        if (annotation === undefined) {
            edit = TextEdit.replace(range, newText);
        }
        else if (ChangeAnnotationIdentifier.is(annotation)) {
            id = annotation;
            edit = AnnotatedTextEdit.replace(range, newText, annotation);
        }
        else {
            this.assertChangeAnnotations(this.changeAnnotations);
            id = this.changeAnnotations.manage(annotation);
            edit = AnnotatedTextEdit.replace(range, newText, id);
        }
        this.edits.push(edit);
        if (id !== undefined) {
            return id;
        }
    };
    TextEditChangeImpl.prototype.delete = function (range, annotation) {
        var edit;
        var id;
        if (annotation === undefined) {
            edit = TextEdit.del(range);
        }
        else if (ChangeAnnotationIdentifier.is(annotation)) {
            id = annotation;
            edit = AnnotatedTextEdit.del(range, annotation);
        }
        else {
            this.assertChangeAnnotations(this.changeAnnotations);
            id = this.changeAnnotations.manage(annotation);
            edit = AnnotatedTextEdit.del(range, id);
        }
        this.edits.push(edit);
        if (id !== undefined) {
            return id;
        }
    };
    TextEditChangeImpl.prototype.add = function (edit) {
        this.edits.push(edit);
    };
    TextEditChangeImpl.prototype.all = function () {
        return this.edits;
    };
    TextEditChangeImpl.prototype.clear = function () {
        this.edits.splice(0, this.edits.length);
    };
    TextEditChangeImpl.prototype.assertChangeAnnotations = function (value) {
        if (value === undefined) {
            throw new Error("Text edit change is not configured to manage change annotations.");
        }
    };
    return TextEditChangeImpl;
}());
/**
 * A helper class
 */
var ChangeAnnotations = /** @class */ (function () {
    function ChangeAnnotations(annotations) {
        this._annotations = annotations === undefined ? Object.create(null) : annotations;
        this._counter = 0;
        this._size = 0;
    }
    ChangeAnnotations.prototype.all = function () {
        return this._annotations;
    };
    Object.defineProperty(ChangeAnnotations.prototype, "size", {
        get: function () {
            return this._size;
        },
        enumerable: false,
        configurable: true
    });
    ChangeAnnotations.prototype.manage = function (idOrAnnotation, annotation) {
        var id;
        if (ChangeAnnotationIdentifier.is(idOrAnnotation)) {
            id = idOrAnnotation;
        }
        else {
            id = this.nextId();
            annotation = idOrAnnotation;
        }
        if (this._annotations[id] !== undefined) {
            throw new Error("Id ".concat(id, " is already in use."));
        }
        if (annotation === undefined) {
            throw new Error("No annotation provided for id ".concat(id));
        }
        this._annotations[id] = annotation;
        this._size++;
        return id;
    };
    ChangeAnnotations.prototype.nextId = function () {
        this._counter++;
        return this._counter.toString();
    };
    return ChangeAnnotations;
}());
/**
 * A workspace change helps constructing changes to a workspace.
 */
var WorkspaceChange = /** @class */ (function () {
    function WorkspaceChange(workspaceEdit) {
        var _this = this;
        this._textEditChanges = Object.create(null);
        if (workspaceEdit !== undefined) {
            this._workspaceEdit = workspaceEdit;
            if (workspaceEdit.documentChanges) {
                this._changeAnnotations = new ChangeAnnotations(workspaceEdit.changeAnnotations);
                workspaceEdit.changeAnnotations = this._changeAnnotations.all();
                workspaceEdit.documentChanges.forEach(function (change) {
                    if (TextDocumentEdit.is(change)) {
                        var textEditChange = new TextEditChangeImpl(change.edits, _this._changeAnnotations);
                        _this._textEditChanges[change.textDocument.uri] = textEditChange;
                    }
                });
            }
            else if (workspaceEdit.changes) {
                Object.keys(workspaceEdit.changes).forEach(function (key) {
                    var textEditChange = new TextEditChangeImpl(workspaceEdit.changes[key]);
                    _this._textEditChanges[key] = textEditChange;
                });
            }
        }
        else {
            this._workspaceEdit = {};
        }
    }
    Object.defineProperty(WorkspaceChange.prototype, "edit", {
        /**
         * Returns the underlying {@link WorkspaceEdit} literal
         * use to be returned from a workspace edit operation like rename.
         */
        get: function () {
            this.initDocumentChanges();
            if (this._changeAnnotations !== undefined) {
                if (this._changeAnnotations.size === 0) {
                    this._workspaceEdit.changeAnnotations = undefined;
                }
                else {
                    this._workspaceEdit.changeAnnotations = this._changeAnnotations.all();
                }
            }
            return this._workspaceEdit;
        },
        enumerable: false,
        configurable: true
    });
    WorkspaceChange.prototype.getTextEditChange = function (key) {
        if (OptionalVersionedTextDocumentIdentifier.is(key)) {
            this.initDocumentChanges();
            if (this._workspaceEdit.documentChanges === undefined) {
                throw new Error('Workspace edit is not configured for document changes.');
            }
            var textDocument = { uri: key.uri, version: key.version };
            var result = this._textEditChanges[textDocument.uri];
            if (!result) {
                var edits = [];
                var textDocumentEdit = {
                    textDocument: textDocument,
                    edits: edits
                };
                this._workspaceEdit.documentChanges.push(textDocumentEdit);
                result = new TextEditChangeImpl(edits, this._changeAnnotations);
                this._textEditChanges[textDocument.uri] = result;
            }
            return result;
        }
        else {
            this.initChanges();
            if (this._workspaceEdit.changes === undefined) {
                throw new Error('Workspace edit is not configured for normal text edit changes.');
            }
            var result = this._textEditChanges[key];
            if (!result) {
                var edits = [];
                this._workspaceEdit.changes[key] = edits;
                result = new TextEditChangeImpl(edits);
                this._textEditChanges[key] = result;
            }
            return result;
        }
    };
    WorkspaceChange.prototype.initDocumentChanges = function () {
        if (this._workspaceEdit.documentChanges === undefined && this._workspaceEdit.changes === undefined) {
            this._changeAnnotations = new ChangeAnnotations();
            this._workspaceEdit.documentChanges = [];
            this._workspaceEdit.changeAnnotations = this._changeAnnotations.all();
        }
    };
    WorkspaceChange.prototype.initChanges = function () {
        if (this._workspaceEdit.documentChanges === undefined && this._workspaceEdit.changes === undefined) {
            this._workspaceEdit.changes = Object.create(null);
        }
    };
    WorkspaceChange.prototype.createFile = function (uri, optionsOrAnnotation, options) {
        this.initDocumentChanges();
        if (this._workspaceEdit.documentChanges === undefined) {
            throw new Error('Workspace edit is not configured for document changes.');
        }
        var annotation;
        if (ChangeAnnotation.is(optionsOrAnnotation) || ChangeAnnotationIdentifier.is(optionsOrAnnotation)) {
            annotation = optionsOrAnnotation;
        }
        else {
            options = optionsOrAnnotation;
        }
        var operation;
        var id;
        if (annotation === undefined) {
            operation = CreateFile.create(uri, options);
        }
        else {
            id = ChangeAnnotationIdentifier.is(annotation) ? annotation : this._changeAnnotations.manage(annotation);
            operation = CreateFile.create(uri, options, id);
        }
        this._workspaceEdit.documentChanges.push(operation);
        if (id !== undefined) {
            return id;
        }
    };
    WorkspaceChange.prototype.renameFile = function (oldUri, newUri, optionsOrAnnotation, options) {
        this.initDocumentChanges();
        if (this._workspaceEdit.documentChanges === undefined) {
            throw new Error('Workspace edit is not configured for document changes.');
        }
        var annotation;
        if (ChangeAnnotation.is(optionsOrAnnotation) || ChangeAnnotationIdentifier.is(optionsOrAnnotation)) {
            annotation = optionsOrAnnotation;
        }
        else {
            options = optionsOrAnnotation;
        }
        var operation;
        var id;
        if (annotation === undefined) {
            operation = RenameFile.create(oldUri, newUri, options);
        }
        else {
            id = ChangeAnnotationIdentifier.is(annotation) ? annotation : this._changeAnnotations.manage(annotation);
            operation = RenameFile.create(oldUri, newUri, options, id);
        }
        this._workspaceEdit.documentChanges.push(operation);
        if (id !== undefined) {
            return id;
        }
    };
    WorkspaceChange.prototype.deleteFile = function (uri, optionsOrAnnotation, options) {
        this.initDocumentChanges();
        if (this._workspaceEdit.documentChanges === undefined) {
            throw new Error('Workspace edit is not configured for document changes.');
        }
        var annotation;
        if (ChangeAnnotation.is(optionsOrAnnotation) || ChangeAnnotationIdentifier.is(optionsOrAnnotation)) {
            annotation = optionsOrAnnotation;
        }
        else {
            options = optionsOrAnnotation;
        }
        var operation;
        var id;
        if (annotation === undefined) {
            operation = DeleteFile.create(uri, options);
        }
        else {
            id = ChangeAnnotationIdentifier.is(annotation) ? annotation : this._changeAnnotations.manage(annotation);
            operation = DeleteFile.create(uri, options, id);
        }
        this._workspaceEdit.documentChanges.push(operation);
        if (id !== undefined) {
            return id;
        }
    };
    return WorkspaceChange;
}());

/**
 * The TextDocumentIdentifier namespace provides helper functions to work with
 * {@link TextDocumentIdentifier} literals.
 */
var TextDocumentIdentifier;
(function (TextDocumentIdentifier) {
    /**
     * Creates a new TextDocumentIdentifier literal.
     * @param uri The document's uri.
     */
    function create(uri) {
        return { uri: uri };
    }
    TextDocumentIdentifier.create = create;
    /**
     * Checks whether the given literal conforms to the {@link TextDocumentIdentifier} interface.
     */
    function is(value) {
        var candidate = value;
        return Is.defined(candidate) && Is.string(candidate.uri);
    }
    TextDocumentIdentifier.is = is;
})(TextDocumentIdentifier || (TextDocumentIdentifier = {}));
/**
 * The VersionedTextDocumentIdentifier namespace provides helper functions to work with
 * {@link VersionedTextDocumentIdentifier} literals.
 */
var VersionedTextDocumentIdentifier;
(function (VersionedTextDocumentIdentifier) {
    /**
     * Creates a new VersionedTextDocumentIdentifier literal.
     * @param uri The document's uri.
     * @param version The document's version.
     */
    function create(uri, version) {
        return { uri: uri, version: version };
    }
    VersionedTextDocumentIdentifier.create = create;
    /**
     * Checks whether the given literal conforms to the {@link VersionedTextDocumentIdentifier} interface.
     */
    function is(value) {
        var candidate = value;
        return Is.defined(candidate) && Is.string(candidate.uri) && Is.integer(candidate.version);
    }
    VersionedTextDocumentIdentifier.is = is;
})(VersionedTextDocumentIdentifier || (VersionedTextDocumentIdentifier = {}));
/**
 * The OptionalVersionedTextDocumentIdentifier namespace provides helper functions to work with
 * {@link OptionalVersionedTextDocumentIdentifier} literals.
 */
var OptionalVersionedTextDocumentIdentifier;
(function (OptionalVersionedTextDocumentIdentifier) {
    /**
     * Creates a new OptionalVersionedTextDocumentIdentifier literal.
     * @param uri The document's uri.
     * @param version The document's version.
     */
    function create(uri, version) {
        return { uri: uri, version: version };
    }
    OptionalVersionedTextDocumentIdentifier.create = create;
    /**
     * Checks whether the given literal conforms to the {@link OptionalVersionedTextDocumentIdentifier} interface.
     */
    function is(value) {
        var candidate = value;
        return Is.defined(candidate) && Is.string(candidate.uri) && (candidate.version === null || Is.integer(candidate.version));
    }
    OptionalVersionedTextDocumentIdentifier.is = is;
})(OptionalVersionedTextDocumentIdentifier || (OptionalVersionedTextDocumentIdentifier = {}));
/**
 * The TextDocumentItem namespace provides helper functions to work with
 * {@link TextDocumentItem} literals.
 */
var TextDocumentItem;
(function (TextDocumentItem) {
    /**
     * Creates a new TextDocumentItem literal.
     * @param uri The document's uri.
     * @param languageId The document's language identifier.
     * @param version The document's version number.
     * @param text The document's text.
     */
    function create(uri, languageId, version, text) {
        return { uri: uri, languageId: languageId, version: version, text: text };
    }
    TextDocumentItem.create = create;
    /**
     * Checks whether the given literal conforms to the {@link TextDocumentItem} interface.
     */
    function is(value) {
        var candidate = value;
        return Is.defined(candidate) && Is.string(candidate.uri) && Is.string(candidate.languageId) && Is.integer(candidate.version) && Is.string(candidate.text);
    }
    TextDocumentItem.is = is;
})(TextDocumentItem || (TextDocumentItem = {}));
/**
 * Describes the content type that a client supports in various
 * result literals like `Hover`, `ParameterInfo` or `CompletionItem`.
 *
 * Please note that `MarkupKinds` must not start with a `$`. This kinds
 * are reserved for internal usage.
 */
var MarkupKind;
(function (MarkupKind) {
    /**
     * Plain text is supported as a content format
     */
    MarkupKind.PlainText = 'plaintext';
    /**
     * Markdown is supported as a content format
     */
    MarkupKind.Markdown = 'markdown';
    /**
     * Checks whether the given value is a value of the {@link MarkupKind} type.
     */
    function is(value) {
        var candidate = value;
        return candidate === MarkupKind.PlainText || candidate === MarkupKind.Markdown;
    }
    MarkupKind.is = is;
})(MarkupKind || (MarkupKind = {}));
var MarkupContent;
(function (MarkupContent) {
    /**
     * Checks whether the given value conforms to the {@link MarkupContent} interface.
     */
    function is(value) {
        var candidate = value;
        return Is.objectLiteral(value) && MarkupKind.is(candidate.kind) && Is.string(candidate.value);
    }
    MarkupContent.is = is;
})(MarkupContent || (MarkupContent = {}));
/**
 * The kind of a completion entry.
 */
var CompletionItemKind;
(function (CompletionItemKind) {
    CompletionItemKind.Text = 1;
    CompletionItemKind.Method = 2;
    CompletionItemKind.Function = 3;
    CompletionItemKind.Constructor = 4;
    CompletionItemKind.Field = 5;
    CompletionItemKind.Variable = 6;
    CompletionItemKind.Class = 7;
    CompletionItemKind.Interface = 8;
    CompletionItemKind.Module = 9;
    CompletionItemKind.Property = 10;
    CompletionItemKind.Unit = 11;
    CompletionItemKind.Value = 12;
    CompletionItemKind.Enum = 13;
    CompletionItemKind.Keyword = 14;
    CompletionItemKind.Snippet = 15;
    CompletionItemKind.Color = 16;
    CompletionItemKind.File = 17;
    CompletionItemKind.Reference = 18;
    CompletionItemKind.Folder = 19;
    CompletionItemKind.EnumMember = 20;
    CompletionItemKind.Constant = 21;
    CompletionItemKind.Struct = 22;
    CompletionItemKind.Event = 23;
    CompletionItemKind.Operator = 24;
    CompletionItemKind.TypeParameter = 25;
})(CompletionItemKind || (CompletionItemKind = {}));
/**
 * Defines whether the insert text in a completion item should be interpreted as
 * plain text or a snippet.
 */
var InsertTextFormat;
(function (InsertTextFormat) {
    /**
     * The primary text to be inserted is treated as a plain string.
     */
    InsertTextFormat.PlainText = 1;
    /**
     * The primary text to be inserted is treated as a snippet.
     *
     * A snippet can define tab stops and placeholders with `$1`, `$2`
     * and `${3:foo}`. `$0` defines the final tab stop, it defaults to
     * the end of the snippet. Placeholders with equal identifiers are linked,
     * that is typing in one will update others too.
     *
     * See also: https://microsoft.github.io/language-server-protocol/specifications/specification-current/#snippet_syntax
     */
    InsertTextFormat.Snippet = 2;
})(InsertTextFormat || (InsertTextFormat = {}));
/**
 * Completion item tags are extra annotations that tweak the rendering of a completion
 * item.
 *
 * @since 3.15.0
 */
var CompletionItemTag;
(function (CompletionItemTag) {
    /**
     * Render a completion as obsolete, usually using a strike-out.
     */
    CompletionItemTag.Deprecated = 1;
})(CompletionItemTag || (CompletionItemTag = {}));
/**
 * The InsertReplaceEdit namespace provides functions to deal with insert / replace edits.
 *
 * @since 3.16.0
 */
var InsertReplaceEdit;
(function (InsertReplaceEdit) {
    /**
     * Creates a new insert / replace edit
     */
    function create(newText, insert, replace) {
        return { newText: newText, insert: insert, replace: replace };
    }
    InsertReplaceEdit.create = create;
    /**
     * Checks whether the given literal conforms to the {@link InsertReplaceEdit} interface.
     */
    function is(value) {
        var candidate = value;
        return candidate && Is.string(candidate.newText) && Range.is(candidate.insert) && Range.is(candidate.replace);
    }
    InsertReplaceEdit.is = is;
})(InsertReplaceEdit || (InsertReplaceEdit = {}));
/**
 * How whitespace and indentation is handled during completion
 * item insertion.
 *
 * @since 3.16.0
 */
var InsertTextMode;
(function (InsertTextMode) {
    /**
     * The insertion or replace strings is taken as it is. If the
     * value is multi line the lines below the cursor will be
     * inserted using the indentation defined in the string value.
     * The client will not apply any kind of adjustments to the
     * string.
     */
    InsertTextMode.asIs = 1;
    /**
     * The editor adjusts leading whitespace of new lines so that
     * they match the indentation up to the cursor of the line for
     * which the item is accepted.
     *
     * Consider a line like this: <2tabs><cursor><3tabs>foo. Accepting a
     * multi line completion item is indented using 2 tabs and all
     * following lines inserted will be indented using 2 tabs as well.
     */
    InsertTextMode.adjustIndentation = 2;
})(InsertTextMode || (InsertTextMode = {}));
var CompletionItemLabelDetails;
(function (CompletionItemLabelDetails) {
    function is(value) {
        var candidate = value;
        return candidate && (Is.string(candidate.detail) || candidate.detail === undefined) &&
            (Is.string(candidate.description) || candidate.description === undefined);
    }
    CompletionItemLabelDetails.is = is;
})(CompletionItemLabelDetails || (CompletionItemLabelDetails = {}));
/**
 * The CompletionItem namespace provides functions to deal with
 * completion items.
 */
var CompletionItem;
(function (CompletionItem) {
    /**
     * Create a completion item and seed it with a label.
     * @param label The completion item's label
     */
    function create(label) {
        return { label: label };
    }
    CompletionItem.create = create;
})(CompletionItem || (CompletionItem = {}));
/**
 * The CompletionList namespace provides functions to deal with
 * completion lists.
 */
var CompletionList;
(function (CompletionList) {
    /**
     * Creates a new completion list.
     *
     * @param items The completion items.
     * @param isIncomplete The list is not complete.
     */
    function create(items, isIncomplete) {
        return { items: items ? items : [], isIncomplete: !!isIncomplete };
    }
    CompletionList.create = create;
})(CompletionList || (CompletionList = {}));
var MarkedString;
(function (MarkedString) {
    /**
     * Creates a marked string from plain text.
     *
     * @param plainText The plain text.
     */
    function fromPlainText(plainText) {
        return plainText.replace(/[\\`*_{}[\]()#+\-.!]/g, '\\$&'); // escape markdown syntax tokens: http://daringfireball.net/projects/markdown/syntax#backslash
    }
    MarkedString.fromPlainText = fromPlainText;
    /**
     * Checks whether the given value conforms to the {@link MarkedString} type.
     */
    function is(value) {
        var candidate = value;
        return Is.string(candidate) || (Is.objectLiteral(candidate) && Is.string(candidate.language) && Is.string(candidate.value));
    }
    MarkedString.is = is;
})(MarkedString || (MarkedString = {}));
var Hover;
(function (Hover) {
    /**
     * Checks whether the given value conforms to the {@link Hover} interface.
     */
    function is(value) {
        var candidate = value;
        return !!candidate && Is.objectLiteral(candidate) && (MarkupContent.is(candidate.contents) ||
            MarkedString.is(candidate.contents) ||
            Is.typedArray(candidate.contents, MarkedString.is)) && (value.range === undefined || Range.is(value.range));
    }
    Hover.is = is;
})(Hover || (Hover = {}));
/**
 * The ParameterInformation namespace provides helper functions to work with
 * {@link ParameterInformation} literals.
 */
var ParameterInformation;
(function (ParameterInformation) {
    /**
     * Creates a new parameter information literal.
     *
     * @param label A label string.
     * @param documentation A doc string.
     */
    function create(label, documentation) {
        return documentation ? { label: label, documentation: documentation } : { label: label };
    }
    ParameterInformation.create = create;
})(ParameterInformation || (ParameterInformation = {}));
/**
 * The SignatureInformation namespace provides helper functions to work with
 * {@link SignatureInformation} literals.
 */
var SignatureInformation;
(function (SignatureInformation) {
    function create(label, documentation) {
        var parameters = [];
        for (var _i = 2; _i < arguments.length; _i++) {
            parameters[_i - 2] = arguments[_i];
        }
        var result = { label: label };
        if (Is.defined(documentation)) {
            result.documentation = documentation;
        }
        if (Is.defined(parameters)) {
            result.parameters = parameters;
        }
        else {
            result.parameters = [];
        }
        return result;
    }
    SignatureInformation.create = create;
})(SignatureInformation || (SignatureInformation = {}));
/**
 * A document highlight kind.
 */
var DocumentHighlightKind;
(function (DocumentHighlightKind) {
    /**
     * A textual occurrence.
     */
    DocumentHighlightKind.Text = 1;
    /**
     * Read-access of a symbol, like reading a variable.
     */
    DocumentHighlightKind.Read = 2;
    /**
     * Write-access of a symbol, like writing to a variable.
     */
    DocumentHighlightKind.Write = 3;
})(DocumentHighlightKind || (DocumentHighlightKind = {}));
/**
 * DocumentHighlight namespace to provide helper functions to work with
 * {@link DocumentHighlight} literals.
 */
var DocumentHighlight;
(function (DocumentHighlight) {
    /**
     * Create a DocumentHighlight object.
     * @param range The range the highlight applies to.
     * @param kind The highlight kind
     */
    function create(range, kind) {
        var result = { range: range };
        if (Is.number(kind)) {
            result.kind = kind;
        }
        return result;
    }
    DocumentHighlight.create = create;
})(DocumentHighlight || (DocumentHighlight = {}));
/**
 * A symbol kind.
 */
var SymbolKind;
(function (SymbolKind) {
    SymbolKind.File = 1;
    SymbolKind.Module = 2;
    SymbolKind.Namespace = 3;
    SymbolKind.Package = 4;
    SymbolKind.Class = 5;
    SymbolKind.Method = 6;
    SymbolKind.Property = 7;
    SymbolKind.Field = 8;
    SymbolKind.Constructor = 9;
    SymbolKind.Enum = 10;
    SymbolKind.Interface = 11;
    SymbolKind.Function = 12;
    SymbolKind.Variable = 13;
    SymbolKind.Constant = 14;
    SymbolKind.String = 15;
    SymbolKind.Number = 16;
    SymbolKind.Boolean = 17;
    SymbolKind.Array = 18;
    SymbolKind.Object = 19;
    SymbolKind.Key = 20;
    SymbolKind.Null = 21;
    SymbolKind.EnumMember = 22;
    SymbolKind.Struct = 23;
    SymbolKind.Event = 24;
    SymbolKind.Operator = 25;
    SymbolKind.TypeParameter = 26;
})(SymbolKind || (SymbolKind = {}));
/**
 * Symbol tags are extra annotations that tweak the rendering of a symbol.
 *
 * @since 3.16
 */
var SymbolTag;
(function (SymbolTag) {
    /**
     * Render a symbol as obsolete, usually using a strike-out.
     */
    SymbolTag.Deprecated = 1;
})(SymbolTag || (SymbolTag = {}));
var SymbolInformation;
(function (SymbolInformation) {
    /**
     * Creates a new symbol information literal.
     *
     * @param name The name of the symbol.
     * @param kind The kind of the symbol.
     * @param range The range of the location of the symbol.
     * @param uri The resource of the location of symbol.
     * @param containerName The name of the symbol containing the symbol.
     */
    function create(name, kind, range, uri, containerName) {
        var result = {
            name: name,
            kind: kind,
            location: { uri: uri, range: range }
        };
        if (containerName) {
            result.containerName = containerName;
        }
        return result;
    }
    SymbolInformation.create = create;
})(SymbolInformation || (SymbolInformation = {}));
var WorkspaceSymbol;
(function (WorkspaceSymbol) {
    /**
     * Create a new workspace symbol.
     *
     * @param name The name of the symbol.
     * @param kind The kind of the symbol.
     * @param uri The resource of the location of the symbol.
     * @param range An options range of the location.
     * @returns A WorkspaceSymbol.
     */
    function create(name, kind, uri, range) {
        return range !== undefined
            ? { name: name, kind: kind, location: { uri: uri, range: range } }
            : { name: name, kind: kind, location: { uri: uri } };
    }
    WorkspaceSymbol.create = create;
})(WorkspaceSymbol || (WorkspaceSymbol = {}));
var DocumentSymbol;
(function (DocumentSymbol) {
    /**
     * Creates a new symbol information literal.
     *
     * @param name The name of the symbol.
     * @param detail The detail of the symbol.
     * @param kind The kind of the symbol.
     * @param range The range of the symbol.
     * @param selectionRange The selectionRange of the symbol.
     * @param children Children of the symbol.
     */
    function create(name, detail, kind, range, selectionRange, children) {
        var result = {
            name: name,
            detail: detail,
            kind: kind,
            range: range,
            selectionRange: selectionRange
        };
        if (children !== undefined) {
            result.children = children;
        }
        return result;
    }
    DocumentSymbol.create = create;
    /**
     * Checks whether the given literal conforms to the {@link DocumentSymbol} interface.
     */
    function is(value) {
        var candidate = value;
        return candidate &&
            Is.string(candidate.name) && Is.number(candidate.kind) &&
            Range.is(candidate.range) && Range.is(candidate.selectionRange) &&
            (candidate.detail === undefined || Is.string(candidate.detail)) &&
            (candidate.deprecated === undefined || Is.boolean(candidate.deprecated)) &&
            (candidate.children === undefined || Array.isArray(candidate.children)) &&
            (candidate.tags === undefined || Array.isArray(candidate.tags));
    }
    DocumentSymbol.is = is;
})(DocumentSymbol || (DocumentSymbol = {}));
/**
 * A set of predefined code action kinds
 */
var CodeActionKind;
(function (CodeActionKind) {
    /**
     * Empty kind.
     */
    CodeActionKind.Empty = '';
    /**
     * Base kind for quickfix actions: 'quickfix'
     */
    CodeActionKind.QuickFix = 'quickfix';
    /**
     * Base kind for refactoring actions: 'refactor'
     */
    CodeActionKind.Refactor = 'refactor';
    /**
     * Base kind for refactoring extraction actions: 'refactor.extract'
     *
     * Example extract actions:
     *
     * - Extract method
     * - Extract function
     * - Extract variable
     * - Extract interface from class
     * - ...
     */
    CodeActionKind.RefactorExtract = 'refactor.extract';
    /**
     * Base kind for refactoring inline actions: 'refactor.inline'
     *
     * Example inline actions:
     *
     * - Inline function
     * - Inline variable
     * - Inline constant
     * - ...
     */
    CodeActionKind.RefactorInline = 'refactor.inline';
    /**
     * Base kind for refactoring rewrite actions: 'refactor.rewrite'
     *
     * Example rewrite actions:
     *
     * - Convert JavaScript function to class
     * - Add or remove parameter
     * - Encapsulate field
     * - Make method static
     * - Move method to base class
     * - ...
     */
    CodeActionKind.RefactorRewrite = 'refactor.rewrite';
    /**
     * Base kind for source actions: `source`
     *
     * Source code actions apply to the entire file.
     */
    CodeActionKind.Source = 'source';
    /**
     * Base kind for an organize imports source action: `source.organizeImports`
     */
    CodeActionKind.SourceOrganizeImports = 'source.organizeImports';
    /**
     * Base kind for auto-fix source actions: `source.fixAll`.
     *
     * Fix all actions automatically fix errors that have a clear fix that do not require user input.
     * They should not suppress errors or perform unsafe fixes such as generating new types or classes.
     *
     * @since 3.15.0
     */
    CodeActionKind.SourceFixAll = 'source.fixAll';
})(CodeActionKind || (CodeActionKind = {}));
/**
 * The reason why code actions were requested.
 *
 * @since 3.17.0
 */
var CodeActionTriggerKind;
(function (CodeActionTriggerKind) {
    /**
     * Code actions were explicitly requested by the user or by an extension.
     */
    CodeActionTriggerKind.Invoked = 1;
    /**
     * Code actions were requested automatically.
     *
     * This typically happens when current selection in a file changes, but can
     * also be triggered when file content changes.
     */
    CodeActionTriggerKind.Automatic = 2;
})(CodeActionTriggerKind || (CodeActionTriggerKind = {}));
/**
 * The CodeActionContext namespace provides helper functions to work with
 * {@link CodeActionContext} literals.
 */
var CodeActionContext;
(function (CodeActionContext) {
    /**
     * Creates a new CodeActionContext literal.
     */
    function create(diagnostics, only, triggerKind) {
        var result = { diagnostics: diagnostics };
        if (only !== undefined && only !== null) {
            result.only = only;
        }
        if (triggerKind !== undefined && triggerKind !== null) {
            result.triggerKind = triggerKind;
        }
        return result;
    }
    CodeActionContext.create = create;
    /**
     * Checks whether the given literal conforms to the {@link CodeActionContext} interface.
     */
    function is(value) {
        var candidate = value;
        return Is.defined(candidate) && Is.typedArray(candidate.diagnostics, Diagnostic.is)
            && (candidate.only === undefined || Is.typedArray(candidate.only, Is.string))
            && (candidate.triggerKind === undefined || candidate.triggerKind === CodeActionTriggerKind.Invoked || candidate.triggerKind === CodeActionTriggerKind.Automatic);
    }
    CodeActionContext.is = is;
})(CodeActionContext || (CodeActionContext = {}));
var CodeAction;
(function (CodeAction) {
    function create(title, kindOrCommandOrEdit, kind) {
        var result = { title: title };
        var checkKind = true;
        if (typeof kindOrCommandOrEdit === 'string') {
            checkKind = false;
            result.kind = kindOrCommandOrEdit;
        }
        else if (Command.is(kindOrCommandOrEdit)) {
            result.command = kindOrCommandOrEdit;
        }
        else {
            result.edit = kindOrCommandOrEdit;
        }
        if (checkKind && kind !== undefined) {
            result.kind = kind;
        }
        return result;
    }
    CodeAction.create = create;
    function is(value) {
        var candidate = value;
        return candidate && Is.string(candidate.title) &&
            (candidate.diagnostics === undefined || Is.typedArray(candidate.diagnostics, Diagnostic.is)) &&
            (candidate.kind === undefined || Is.string(candidate.kind)) &&
            (candidate.edit !== undefined || candidate.command !== undefined) &&
            (candidate.command === undefined || Command.is(candidate.command)) &&
            (candidate.isPreferred === undefined || Is.boolean(candidate.isPreferred)) &&
            (candidate.edit === undefined || WorkspaceEdit.is(candidate.edit));
    }
    CodeAction.is = is;
})(CodeAction || (CodeAction = {}));
/**
 * The CodeLens namespace provides helper functions to work with
 * {@link CodeLens} literals.
 */
var CodeLens;
(function (CodeLens) {
    /**
     * Creates a new CodeLens literal.
     */
    function create(range, data) {
        var result = { range: range };
        if (Is.defined(data)) {
            result.data = data;
        }
        return result;
    }
    CodeLens.create = create;
    /**
     * Checks whether the given literal conforms to the {@link CodeLens} interface.
     */
    function is(value) {
        var candidate = value;
        return Is.defined(candidate) && Range.is(candidate.range) && (Is.undefined(candidate.command) || Command.is(candidate.command));
    }
    CodeLens.is = is;
})(CodeLens || (CodeLens = {}));
/**
 * The FormattingOptions namespace provides helper functions to work with
 * {@link FormattingOptions} literals.
 */
var FormattingOptions;
(function (FormattingOptions) {
    /**
     * Creates a new FormattingOptions literal.
     */
    function create(tabSize, insertSpaces) {
        return { tabSize: tabSize, insertSpaces: insertSpaces };
    }
    FormattingOptions.create = create;
    /**
     * Checks whether the given literal conforms to the {@link FormattingOptions} interface.
     */
    function is(value) {
        var candidate = value;
        return Is.defined(candidate) && Is.uinteger(candidate.tabSize) && Is.boolean(candidate.insertSpaces);
    }
    FormattingOptions.is = is;
})(FormattingOptions || (FormattingOptions = {}));
/**
 * The DocumentLink namespace provides helper functions to work with
 * {@link DocumentLink} literals.
 */
var DocumentLink;
(function (DocumentLink) {
    /**
     * Creates a new DocumentLink literal.
     */
    function create(range, target, data) {
        return { range: range, target: target, data: data };
    }
    DocumentLink.create = create;
    /**
     * Checks whether the given literal conforms to the {@link DocumentLink} interface.
     */
    function is(value) {
        var candidate = value;
        return Is.defined(candidate) && Range.is(candidate.range) && (Is.undefined(candidate.target) || Is.string(candidate.target));
    }
    DocumentLink.is = is;
})(DocumentLink || (DocumentLink = {}));
/**
 * The SelectionRange namespace provides helper function to work with
 * SelectionRange literals.
 */
var SelectionRange;
(function (SelectionRange) {
    /**
     * Creates a new SelectionRange
     * @param range the range.
     * @param parent an optional parent.
     */
    function create(range, parent) {
        return { range: range, parent: parent };
    }
    SelectionRange.create = create;
    function is(value) {
        var candidate = value;
        return Is.objectLiteral(candidate) && Range.is(candidate.range) && (candidate.parent === undefined || SelectionRange.is(candidate.parent));
    }
    SelectionRange.is = is;
})(SelectionRange || (SelectionRange = {}));
/**
 * A set of predefined token types. This set is not fixed
 * an clients can specify additional token types via the
 * corresponding client capabilities.
 *
 * @since 3.16.0
 */
var SemanticTokenTypes;
(function (SemanticTokenTypes) {
    SemanticTokenTypes["namespace"] = "namespace";
    /**
     * Represents a generic type. Acts as a fallback for types which can't be mapped to
     * a specific type like class or enum.
     */
    SemanticTokenTypes["type"] = "type";
    SemanticTokenTypes["class"] = "class";
    SemanticTokenTypes["enum"] = "enum";
    SemanticTokenTypes["interface"] = "interface";
    SemanticTokenTypes["struct"] = "struct";
    SemanticTokenTypes["typeParameter"] = "typeParameter";
    SemanticTokenTypes["parameter"] = "parameter";
    SemanticTokenTypes["variable"] = "variable";
    SemanticTokenTypes["property"] = "property";
    SemanticTokenTypes["enumMember"] = "enumMember";
    SemanticTokenTypes["event"] = "event";
    SemanticTokenTypes["function"] = "function";
    SemanticTokenTypes["method"] = "method";
    SemanticTokenTypes["macro"] = "macro";
    SemanticTokenTypes["keyword"] = "keyword";
    SemanticTokenTypes["modifier"] = "modifier";
    SemanticTokenTypes["comment"] = "comment";
    SemanticTokenTypes["string"] = "string";
    SemanticTokenTypes["number"] = "number";
    SemanticTokenTypes["regexp"] = "regexp";
    SemanticTokenTypes["operator"] = "operator";
    /**
     * @since 3.17.0
     */
    SemanticTokenTypes["decorator"] = "decorator";
})(SemanticTokenTypes || (SemanticTokenTypes = {}));
/**
 * A set of predefined token modifiers. This set is not fixed
 * an clients can specify additional token types via the
 * corresponding client capabilities.
 *
 * @since 3.16.0
 */
var SemanticTokenModifiers;
(function (SemanticTokenModifiers) {
    SemanticTokenModifiers["declaration"] = "declaration";
    SemanticTokenModifiers["definition"] = "definition";
    SemanticTokenModifiers["readonly"] = "readonly";
    SemanticTokenModifiers["static"] = "static";
    SemanticTokenModifiers["deprecated"] = "deprecated";
    SemanticTokenModifiers["abstract"] = "abstract";
    SemanticTokenModifiers["async"] = "async";
    SemanticTokenModifiers["modification"] = "modification";
    SemanticTokenModifiers["documentation"] = "documentation";
    SemanticTokenModifiers["defaultLibrary"] = "defaultLibrary";
})(SemanticTokenModifiers || (SemanticTokenModifiers = {}));
/**
 * @since 3.16.0
 */
var SemanticTokens;
(function (SemanticTokens) {
    function is(value) {
        var candidate = value;
        return Is.objectLiteral(candidate) && (candidate.resultId === undefined || typeof candidate.resultId === 'string') &&
            Array.isArray(candidate.data) && (candidate.data.length === 0 || typeof candidate.data[0] === 'number');
    }
    SemanticTokens.is = is;
})(SemanticTokens || (SemanticTokens = {}));
/**
 * The InlineValueText namespace provides functions to deal with InlineValueTexts.
 *
 * @since 3.17.0
 */
var InlineValueText;
(function (InlineValueText) {
    /**
     * Creates a new InlineValueText literal.
     */
    function create(range, text) {
        return { range: range, text: text };
    }
    InlineValueText.create = create;
    function is(value) {
        var candidate = value;
        return candidate !== undefined && candidate !== null && Range.is(candidate.range) && Is.string(candidate.text);
    }
    InlineValueText.is = is;
})(InlineValueText || (InlineValueText = {}));
/**
 * The InlineValueVariableLookup namespace provides functions to deal with InlineValueVariableLookups.
 *
 * @since 3.17.0
 */
var InlineValueVariableLookup;
(function (InlineValueVariableLookup) {
    /**
     * Creates a new InlineValueText literal.
     */
    function create(range, variableName, caseSensitiveLookup) {
        return { range: range, variableName: variableName, caseSensitiveLookup: caseSensitiveLookup };
    }
    InlineValueVariableLookup.create = create;
    function is(value) {
        var candidate = value;
        return candidate !== undefined && candidate !== null && Range.is(candidate.range) && Is.boolean(candidate.caseSensitiveLookup)
            && (Is.string(candidate.variableName) || candidate.variableName === undefined);
    }
    InlineValueVariableLookup.is = is;
})(InlineValueVariableLookup || (InlineValueVariableLookup = {}));
/**
 * The InlineValueEvaluatableExpression namespace provides functions to deal with InlineValueEvaluatableExpression.
 *
 * @since 3.17.0
 */
var InlineValueEvaluatableExpression;
(function (InlineValueEvaluatableExpression) {
    /**
     * Creates a new InlineValueEvaluatableExpression literal.
     */
    function create(range, expression) {
        return { range: range, expression: expression };
    }
    InlineValueEvaluatableExpression.create = create;
    function is(value) {
        var candidate = value;
        return candidate !== undefined && candidate !== null && Range.is(candidate.range)
            && (Is.string(candidate.expression) || candidate.expression === undefined);
    }
    InlineValueEvaluatableExpression.is = is;
})(InlineValueEvaluatableExpression || (InlineValueEvaluatableExpression = {}));
/**
 * The InlineValueContext namespace provides helper functions to work with
 * {@link InlineValueContext} literals.
 *
 * @since 3.17.0
 */
var InlineValueContext;
(function (InlineValueContext) {
    /**
     * Creates a new InlineValueContext literal.
     */
    function create(frameId, stoppedLocation) {
        return { frameId: frameId, stoppedLocation: stoppedLocation };
    }
    InlineValueContext.create = create;
    /**
     * Checks whether the given literal conforms to the {@link InlineValueContext} interface.
     */
    function is(value) {
        var candidate = value;
        return Is.defined(candidate) && Range.is(value.stoppedLocation);
    }
    InlineValueContext.is = is;
})(InlineValueContext || (InlineValueContext = {}));
/**
 * Inlay hint kinds.
 *
 * @since 3.17.0
 */
var InlayHintKind;
(function (InlayHintKind) {
    /**
     * An inlay hint that for a type annotation.
     */
    InlayHintKind.Type = 1;
    /**
     * An inlay hint that is for a parameter.
     */
    InlayHintKind.Parameter = 2;
    function is(value) {
        return value === 1 || value === 2;
    }
    InlayHintKind.is = is;
})(InlayHintKind || (InlayHintKind = {}));
var InlayHintLabelPart;
(function (InlayHintLabelPart) {
    function create(value) {
        return { value: value };
    }
    InlayHintLabelPart.create = create;
    function is(value) {
        var candidate = value;
        return Is.objectLiteral(candidate)
            && (candidate.tooltip === undefined || Is.string(candidate.tooltip) || MarkupContent.is(candidate.tooltip))
            && (candidate.location === undefined || Location.is(candidate.location))
            && (candidate.command === undefined || Command.is(candidate.command));
    }
    InlayHintLabelPart.is = is;
})(InlayHintLabelPart || (InlayHintLabelPart = {}));
var InlayHint;
(function (InlayHint) {
    function create(position, label, kind) {
        var result = { position: position, label: label };
        if (kind !== undefined) {
            result.kind = kind;
        }
        return result;
    }
    InlayHint.create = create;
    function is(value) {
        var candidate = value;
        return Is.objectLiteral(candidate) && Position.is(candidate.position)
            && (Is.string(candidate.label) || Is.typedArray(candidate.label, InlayHintLabelPart.is))
            && (candidate.kind === undefined || InlayHintKind.is(candidate.kind))
            && (candidate.textEdits === undefined) || Is.typedArray(candidate.textEdits, TextEdit.is)
            && (candidate.tooltip === undefined || Is.string(candidate.tooltip) || MarkupContent.is(candidate.tooltip))
            && (candidate.paddingLeft === undefined || Is.boolean(candidate.paddingLeft))
            && (candidate.paddingRight === undefined || Is.boolean(candidate.paddingRight));
    }
    InlayHint.is = is;
})(InlayHint || (InlayHint = {}));
var WorkspaceFolder;
(function (WorkspaceFolder) {
    function is(value) {
        var candidate = value;
        return Is.objectLiteral(candidate) && URI.is(candidate.uri) && Is.string(candidate.name);
    }
    WorkspaceFolder.is = is;
})(WorkspaceFolder || (WorkspaceFolder = {}));
var EOL = ['\n', '\r\n', '\r'];
/**
 * @deprecated Use the text document from the new vscode-languageserver-textdocument package.
 */
var TextDocument;
(function (TextDocument) {
    /**
     * Creates a new ITextDocument literal from the given uri and content.
     * @param uri The document's uri.
     * @param languageId The document's language Id.
     * @param version The document's version.
     * @param content The document's content.
     */
    function create(uri, languageId, version, content) {
        return new FullTextDocument(uri, languageId, version, content);
    }
    TextDocument.create = create;
    /**
     * Checks whether the given literal conforms to the {@link ITextDocument} interface.
     */
    function is(value) {
        var candidate = value;
        return Is.defined(candidate) && Is.string(candidate.uri) && (Is.undefined(candidate.languageId) || Is.string(candidate.languageId)) && Is.uinteger(candidate.lineCount)
            && Is.func(candidate.getText) && Is.func(candidate.positionAt) && Is.func(candidate.offsetAt) ? true : false;
    }
    TextDocument.is = is;
    function applyEdits(document, edits) {
        var text = document.getText();
        var sortedEdits = mergeSort(edits, function (a, b) {
            var diff = a.range.start.line - b.range.start.line;
            if (diff === 0) {
                return a.range.start.character - b.range.start.character;
            }
            return diff;
        });
        var lastModifiedOffset = text.length;
        for (var i = sortedEdits.length - 1; i >= 0; i--) {
            var e = sortedEdits[i];
            var startOffset = document.offsetAt(e.range.start);
            var endOffset = document.offsetAt(e.range.end);
            if (endOffset <= lastModifiedOffset) {
                text = text.substring(0, startOffset) + e.newText + text.substring(endOffset, text.length);
            }
            else {
                throw new Error('Overlapping edit');
            }
            lastModifiedOffset = startOffset;
        }
        return text;
    }
    TextDocument.applyEdits = applyEdits;
    function mergeSort(data, compare) {
        if (data.length <= 1) {
            // sorted
            return data;
        }
        var p = (data.length / 2) | 0;
        var left = data.slice(0, p);
        var right = data.slice(p);
        mergeSort(left, compare);
        mergeSort(right, compare);
        var leftIdx = 0;
        var rightIdx = 0;
        var i = 0;
        while (leftIdx < left.length && rightIdx < right.length) {
            var ret = compare(left[leftIdx], right[rightIdx]);
            if (ret <= 0) {
                // smaller_equal -> take left to preserve order
                data[i++] = left[leftIdx++];
            }
            else {
                // greater -> take right
                data[i++] = right[rightIdx++];
            }
        }
        while (leftIdx < left.length) {
            data[i++] = left[leftIdx++];
        }
        while (rightIdx < right.length) {
            data[i++] = right[rightIdx++];
        }
        return data;
    }
})(TextDocument || (TextDocument = {}));
/**
 * @deprecated Use the text document from the new vscode-languageserver-textdocument package.
 */
var FullTextDocument = /** @class */ (function () {
    function FullTextDocument(uri, languageId, version, content) {
        this._uri = uri;
        this._languageId = languageId;
        this._version = version;
        this._content = content;
        this._lineOffsets = undefined;
    }
    Object.defineProperty(FullTextDocument.prototype, "uri", {
        get: function () {
            return this._uri;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FullTextDocument.prototype, "languageId", {
        get: function () {
            return this._languageId;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FullTextDocument.prototype, "version", {
        get: function () {
            return this._version;
        },
        enumerable: false,
        configurable: true
    });
    FullTextDocument.prototype.getText = function (range) {
        if (range) {
            var start = this.offsetAt(range.start);
            var end = this.offsetAt(range.end);
            return this._content.substring(start, end);
        }
        return this._content;
    };
    FullTextDocument.prototype.update = function (event, version) {
        this._content = event.text;
        this._version = version;
        this._lineOffsets = undefined;
    };
    FullTextDocument.prototype.getLineOffsets = function () {
        if (this._lineOffsets === undefined) {
            var lineOffsets = [];
            var text = this._content;
            var isLineStart = true;
            for (var i = 0; i < text.length; i++) {
                if (isLineStart) {
                    lineOffsets.push(i);
                    isLineStart = false;
                }
                var ch = text.charAt(i);
                isLineStart = (ch === '\r' || ch === '\n');
                if (ch === '\r' && i + 1 < text.length && text.charAt(i + 1) === '\n') {
                    i++;
                }
            }
            if (isLineStart && text.length > 0) {
                lineOffsets.push(text.length);
            }
            this._lineOffsets = lineOffsets;
        }
        return this._lineOffsets;
    };
    FullTextDocument.prototype.positionAt = function (offset) {
        offset = Math.max(Math.min(offset, this._content.length), 0);
        var lineOffsets = this.getLineOffsets();
        var low = 0, high = lineOffsets.length;
        if (high === 0) {
            return Position.create(0, offset);
        }
        while (low < high) {
            var mid = Math.floor((low + high) / 2);
            if (lineOffsets[mid] > offset) {
                high = mid;
            }
            else {
                low = mid + 1;
            }
        }
        // low is the least x for which the line offset is larger than the current offset
        // or array.length if no line offset is larger than the current offset
        var line = low - 1;
        return Position.create(line, offset - lineOffsets[line]);
    };
    FullTextDocument.prototype.offsetAt = function (position) {
        var lineOffsets = this.getLineOffsets();
        if (position.line >= lineOffsets.length) {
            return this._content.length;
        }
        else if (position.line < 0) {
            return 0;
        }
        var lineOffset = lineOffsets[position.line];
        var nextLineOffset = (position.line + 1 < lineOffsets.length) ? lineOffsets[position.line + 1] : this._content.length;
        return Math.max(Math.min(lineOffset + position.character, nextLineOffset), lineOffset);
    };
    Object.defineProperty(FullTextDocument.prototype, "lineCount", {
        get: function () {
            return this.getLineOffsets().length;
        },
        enumerable: false,
        configurable: true
    });
    return FullTextDocument;
}());
var Is;
(function (Is) {
    var toString = Object.prototype.toString;
    function defined(value) {
        return typeof value !== 'undefined';
    }
    Is.defined = defined;
    function undefined(value) {
        return typeof value === 'undefined';
    }
    Is.undefined = undefined;
    function boolean(value) {
        return value === true || value === false;
    }
    Is.boolean = boolean;
    function string(value) {
        return toString.call(value) === '[object String]';
    }
    Is.string = string;
    function number(value) {
        return toString.call(value) === '[object Number]';
    }
    Is.number = number;
    function numberRange(value, min, max) {
        return toString.call(value) === '[object Number]' && min <= value && value <= max;
    }
    Is.numberRange = numberRange;
    function integer(value) {
        return toString.call(value) === '[object Number]' && -2147483648 <= value && value <= 2147483647;
    }
    Is.integer = integer;
    function uinteger(value) {
        return toString.call(value) === '[object Number]' && 0 <= value && value <= 2147483647;
    }
    Is.uinteger = uinteger;
    function func(value) {
        return toString.call(value) === '[object Function]';
    }
    Is.func = func;
    function objectLiteral(value) {
        // Strictly speaking class instances pass this check as well. Since the LSP
        // doesn't use classes we ignore this for now. If we do we need to add something
        // like this: `Object.getPrototypeOf(Object.getPrototypeOf(x)) === null`
        return value !== null && typeof value === 'object';
    }
    Is.objectLiteral = objectLiteral;
    function typedArray(value, check) {
        return Array.isArray(value) && value.every(check);
    }
    Is.typedArray = typedArray;
})(Is || (Is = {}));


/***/ }),

/***/ 2094:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var forEach = __webpack_require__(3243);
var availableTypedArrays = __webpack_require__(2191);
var callBind = __webpack_require__(9429);
var callBound = __webpack_require__(2680);
var gOPD = __webpack_require__(326);

var $toString = callBound('Object.prototype.toString');
var hasToStringTag = __webpack_require__(7226)();

var g = typeof globalThis === 'undefined' ? __webpack_require__.g : globalThis;
var typedArrays = availableTypedArrays();

var $slice = callBound('String.prototype.slice');
var getPrototypeOf = Object.getPrototypeOf; // require('getprototypeof');

var $indexOf = callBound('Array.prototype.indexOf', true) || function indexOf(array, value) {
	for (var i = 0; i < array.length; i += 1) {
		if (array[i] === value) {
			return i;
		}
	}
	return -1;
};
var cache = { __proto__: null };
if (hasToStringTag && gOPD && getPrototypeOf) {
	forEach(typedArrays, function (typedArray) {
		var arr = new g[typedArray]();
		if (Symbol.toStringTag in arr) {
			var proto = getPrototypeOf(arr);
			var descriptor = gOPD(proto, Symbol.toStringTag);
			if (!descriptor) {
				var superProto = getPrototypeOf(proto);
				descriptor = gOPD(superProto, Symbol.toStringTag);
			}
			cache['$' + typedArray] = callBind(descriptor.get);
		}
	});
} else {
	forEach(typedArrays, function (typedArray) {
		var arr = new g[typedArray]();
		cache['$' + typedArray] = callBind(arr.slice);
	});
}

var tryTypedArrays = function tryAllTypedArrays(value) {
	var found = false;
	forEach(cache, function (getter, typedArray) {
		if (!found) {
			try {
				if ('$' + getter(value) === typedArray) {
					found = $slice(typedArray, 1);
				}
			} catch (e) { /**/ }
		}
	});
	return found;
};

var trySlices = function tryAllSlices(value) {
	var found = false;
	forEach(cache, function (getter, name) {
		if (!found) {
			try {
				getter(value);
				found = $slice(name, 1);
			} catch (e) { /**/ }
		}
	});
	return found;
};

module.exports = function whichTypedArray(value) {
	if (!value || typeof value !== 'object') { return false; }
	if (!hasToStringTag) {
		var tag = $slice($toString(value), 8, -1);
		if ($indexOf(typedArrays, tag) > -1) {
			return tag;
		}
		if (tag !== 'Object') {
			return false;
		}
		// node < 0.6 hits here on real Typed Arrays
		return trySlices(value);
	}
	if (!gOPD) { return null; } // unknown engine
	return tryTypedArrays(value);
};


/***/ }),

/***/ 7248:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/*
 * This file is released under the MIT license.
 * Copyright (c) 2016, 2021 Mike Lischke
 *
 * See LICENSE file for more info.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
__exportStar(__webpack_require__(9047), exports);
__exportStar(__webpack_require__(523), exports);
__exportStar(__webpack_require__(5721), exports);
__exportStar(__webpack_require__(7894), exports);
__exportStar(__webpack_require__(637), exports);
__exportStar(__webpack_require__(1741), exports);
__exportStar(__webpack_require__(1944), exports);
__exportStar(__webpack_require__(5675), exports);
__exportStar(__webpack_require__(50), exports);
__exportStar(__webpack_require__(6997), exports);
__exportStar(__webpack_require__(7780), exports);
__exportStar(__webpack_require__(308), exports);
__exportStar(__webpack_require__(634), exports);
__exportStar(__webpack_require__(4313), exports);
__exportStar(__webpack_require__(6089), exports);
__exportStar(__webpack_require__(5329), exports);
__exportStar(__webpack_require__(4644), exports);
__exportStar(__webpack_require__(8301), exports);
__exportStar(__webpack_require__(8921), exports);
__exportStar(__webpack_require__(2322), exports);
//# sourceMappingURL=index.js.map

/***/ }),

/***/ 9047:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/*
 * This file is released under the MIT license.
 * Copyright (c) 2023, Mike Lischke
 *
 * See LICENSE file for more info.
 */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ArrayType = void 0;
const types_1 = __webpack_require__(2322);
const BaseSymbol_1 = __webpack_require__(523);
class ArrayType extends BaseSymbol_1.BaseSymbol {
    elementType;
    size; // > 0 if fixed length.
    referenceKind;
    constructor(name, referenceKind, elemType, size = 0) {
        super(name);
        this.referenceKind = referenceKind;
        this.elementType = elemType;
        this.size = size;
    }
    get baseTypes() { return []; }
    get kind() { return types_1.TypeKind.Array; }
    get reference() { return this.referenceKind; }
}
exports.ArrayType = ArrayType;
//# sourceMappingURL=ArrayType.js.map

/***/ }),

/***/ 523:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/*
 * This file is released under the MIT license.
 * Copyright (c) 2023, Mike Lischke
 *
 * See LICENSE file for more info.
 */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.BaseSymbol = void 0;
const types_1 = __webpack_require__(2322);
/**
 * The root of the symbol table class hierarchy: a symbol can be any manageable entity (like a block), not only
 * things like variables or classes.
 * We are using a class hierarchy here, instead of an enum or similar, to allow for easy extension and certain
 * symbols can so provide additional APIs for simpler access to their sub elements, if needed.
 */
class BaseSymbol {
    /** The name of the symbol or empty if anonymous. */
    name;
    /** Reference to the parse tree which contains this symbol. */
    context;
    modifiers = new Set();
    visibility = types_1.MemberVisibility.Unknown;
    #parent;
    constructor(name = "") {
        this.name = name;
    }
    get parent() {
        return this.#parent;
    }
    get firstSibling() {
        if (!this.#parent) {
            return undefined;
        }
        return this.#parent?.firstChild;
    }
    /**
     * @returns the symbol before this symbol in its scope.
     */
    get previousSibling() {
        if (!this.#parent) {
            return undefined;
        }
        if (!this.#parent) {
            return this;
        }
        return this.#parent.previousSiblingOf(this);
    }
    /**
     * @returns the symbol following this symbol in its scope.
     */
    get nextSibling() {
        return this.#parent?.nextSiblingOf(this);
    }
    get lastSibling() {
        return this.#parent?.lastChild;
    }
    /**
     * @returns the next symbol in definition order, regardless of the scope.
     */
    get next() {
        return this.#parent?.nextOf(this);
    }
    /**
     * @returns the outermost entity (below the symbol table) that holds us.
     */
    get root() {
        let run = this.#parent;
        while (run) {
            if (!run.parent || this.isSymbolTable(run.parent)) {
                return run;
            }
            run = run.parent;
        }
        return run;
    }
    /**
     * @returns the symbol table we belong too or undefined if we are not yet assigned.
     */
    get symbolTable() {
        if (this.isSymbolTable(this)) {
            return this;
        }
        let run = this.#parent;
        while (run) {
            if (this.isSymbolTable(run)) {
                return run;
            }
            run = run.parent;
        }
        return undefined;
    }
    /**
     * @returns the list of symbols from this one up to root.
     */
    get symbolPath() {
        const result = [];
        // eslint-disable-next-line @typescript-eslint/no-this-alias
        let run = this;
        while (run) {
            result.push(run);
            if (!run.parent) {
                break;
            }
            run = run.parent;
        }
        return result;
    }
    /**
     * This is rather an internal method and should rarely be used by external code.
     *
     * @param parent The new parent to use.
     */
    setParent(parent) {
        this.#parent = parent;
    }
    /**
     * Remove this symbol from its parent scope.
     */
    removeFromParent() {
        this.#parent?.removeSymbol(this);
        this.#parent = undefined;
    }
    /**
     * Asynchronously looks up a symbol with a given name, in a bottom-up manner.
     *
     * @param name The name of the symbol to find.
     * @param localOnly If true only child symbols are returned, otherwise also symbols from the parent of this symbol
     *                  (recursively).
     *
     * @returns A promise resolving to the first symbol with a given name, in the order of appearance in this scope
     *          or any of the parent scopes (conditionally).
     */
    async resolve(name, localOnly = false) {
        return this.#parent?.resolve(name, localOnly);
    }
    /**
     * Synchronously looks up a symbol with a given name, in a bottom-up manner.
     *
     * @param name The name of the symbol to find.
     * @param localOnly If true only child symbols are returned, otherwise also symbols from the parent of this symbol
     *                  (recursively).
     *
     * @returns the first symbol with a given name, in the order of appearance in this scope
     *          or any of the parent scopes (conditionally).
     */
    resolveSync(name, localOnly = false) {
        return this.#parent?.resolveSync(name, localOnly);
    }
    /**
     * @param t The type of objects to return.
     *
     * @returns the next enclosing parent of the given type.
     */
    getParentOfType(t) {
        let run = this.#parent;
        while (run) {
            if (run instanceof t) {
                return run;
            }
            run = run.parent;
        }
        return undefined;
    }
    /**
     * Creates a qualified identifier from this symbol and its parent.
     * If `full` is true then all parents are traversed in addition to this instance.
     *
     * @param separator The string to be used between the parts.
     * @param full A flag indicating if the full path is to be returned.
     * @param includeAnonymous Use a special string for empty scope names.
     *
     * @returns the constructed qualified identifier.
     */
    qualifiedName(separator = ".", full = false, includeAnonymous = false) {
        if (!includeAnonymous && this.name.length === 0) {
            return "";
        }
        let result = this.name.length === 0 ? "<anonymous>" : this.name;
        let run = this.#parent;
        while (run) {
            if (includeAnonymous || run.name.length > 0) {
                result = (run.name.length === 0 ? "<anonymous>" : run.name) + separator + result;
            }
            if (!full || !run.parent) {
                break;
            }
            run = run.parent;
        }
        return result;
    }
    /**
     * Type guard to check for ISymbolTable.
     *
     * @param candidate The object to check.
     *
     * @returns true if the object is a symbol table.
     */
    isSymbolTable(candidate) {
        return candidate.info !== undefined;
    }
}
exports.BaseSymbol = BaseSymbol;
//# sourceMappingURL=BaseSymbol.js.map

/***/ }),

/***/ 5721:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/*
 * This file is released under the MIT license.
 * Copyright (c) 2023, Mike Lischke
 *
 * See LICENSE file for more info.
 */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.BlockSymbol = void 0;
const ScopedSymbol_1 = __webpack_require__(634);
class BlockSymbol extends ScopedSymbol_1.ScopedSymbol {
}
exports.BlockSymbol = BlockSymbol;
//# sourceMappingURL=BlockSymbol.js.map

/***/ }),

/***/ 7894:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/*
 * This file is released under the MIT license.
 * Copyright (c) 2023, Mike Lischke
 *
 * See LICENSE file for more info.
 */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ClassSymbol = void 0;
const types_1 = __webpack_require__(2322);
const FieldSymbol_1 = __webpack_require__(637);
const MethodSymbol_1 = __webpack_require__(50);
const ScopedSymbol_1 = __webpack_require__(634);
/** Classes and structs. */
class ClassSymbol extends ScopedSymbol_1.ScopedSymbol {
    isStruct = false;
    reference = types_1.ReferenceKind.Irrelevant;
    /** Usually only one member, unless the language supports multiple inheritance (like C++). */
    // eslint-disable-next-line no-use-before-define
    extends;
    /** Typescript allows a class to implement a class, not only interfaces. */
    // eslint-disable-next-line no-use-before-define
    implements;
    constructor(name, ext, impl) {
        super(name);
        this.extends = ext;
        this.implements = impl;
    }
    get baseTypes() { return this.extends; }
    get kind() { return types_1.TypeKind.Class; }
    /**
     * @param includeInherited Not used.
     *
     * @returns a list of all methods.
     */
    getMethods(includeInherited = false) {
        return this.getSymbolsOfType(MethodSymbol_1.MethodSymbol);
    }
    /**
     * @param includeInherited Not used.
     *
     * @returns all fields.
     */
    getFields(includeInherited = false) {
        return this.getSymbolsOfType(FieldSymbol_1.FieldSymbol);
    }
}
exports.ClassSymbol = ClassSymbol;
//# sourceMappingURL=ClassSymbol.js.map

/***/ }),

/***/ 4644:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
/* provided dependency */ var console = __webpack_require__(3716);

/*
 * This file is released under the MIT license.
 * Copyright (c) 2016, 2021, Mike Lischke
 *
 * See LICENSE file for more info.
 */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.CodeCompletionCore = exports.CandidatesCollection = void 0;
/* eslint-disable max-classes-per-file */
const antlr4ts_1 = __webpack_require__(5029);
const atn_1 = __webpack_require__(357);
const IntervalSet_1 = __webpack_require__(5462);
const utils_1 = __webpack_require__(5808);
/**
 * All the candidates which have been found. Tokens and rules are separated.
 * Token entries include a list of tokens that directly follow them (see also the "following" member in the
 * FollowSetWithPath class).
 * Rule entries include the index of the starting token within the evaluated rule, along with a call stack of rules
 * found during evaluation.
 */
class CandidatesCollection {
    tokens = new Map();
    rules = new Map();
}
exports.CandidatesCollection = CandidatesCollection;
/**
 * A record for a follow set along with the path at which this set was found.
 * If there is only a single symbol in the interval set then we also collect and store tokens which follow
 * this symbol directly in its rule (i.e. there is no intermediate rule transition). Only single label transitions
 * are considered. This is useful if you have a chain of tokens which can be suggested as a whole, because there is
 * a fixed sequence in the grammar.
 */
class FollowSetWithPath {
    intervals;
    path = [];
    following = [];
}
/**
 * A list of follow sets (for a given state number) + all of them combined for quick hit tests + whether they are
 * exhaustive (false if subsequent yet-unprocessed rules could add further tokens to the follow set, true otherwise).
 * This data is static in nature (because the used ATN states are part of a static struct: the ATN).
 * Hence it can be shared between all C3 instances, however it depends on the actual parser class (type).
 */
class FollowSetsHolder {
    sets;
    combined;
    isExhaustive;
}
/** The main class for doing the collection process. */
class CodeCompletionCore {
    static followSetsByATN = new Map();
    static atnStateTypeMap = [
        "invalid",
        "basic",
        "rule start",
        "block start",
        "plus block start",
        "star block start",
        "token start",
        "rule stop",
        "block end",
        "star loop back",
        "star loop entry",
        "plus loop back",
        "loop end",
    ];
    // Debugging options. Print human readable ATN state and other info.
    /** Not dependent on showDebugOutput. Prints the collected rules + tokens to terminal. */
    showResult = false;
    /** Enables printing ATN state info to terminal. */
    showDebugOutput = false;
    /** Only relevant when showDebugOutput is true. Enables transition printing for a state. */
    debugOutputWithTransitions = false;
    /** Also depends on showDebugOutput. Enables call stack printing for each rule recursion. */
    showRuleStack = false;
    /**
     * Tailoring of the result:
     * Tokens which should not appear in the candidates set.
     */
    ignoredTokens;
    /**
     * Rules which replace any candidate token they contain.
     * This allows to return descriptive rules (e.g. className, instead of ID/identifier).
     */
    preferredRules;
    /**
     * Specify if preferred rules should translated top-down (higher index rule returns first) or
     * bottom-up (lower index rule returns first).
     */
    translateRulesTopDown = false;
    parser;
    atn;
    vocabulary;
    ruleNames;
    tokens;
    precedenceStack;
    tokenStartIndex = 0;
    statesProcessed = 0;
    /**
     * A mapping of rule index + token stream position to end token positions.
     * A rule which has been visited before with the same input position will always produce the same output positions.
     */
    shortcutMap = new Map();
    /** The collected candidates (rules and tokens). */
    candidates = new CandidatesCollection();
    constructor(parser) {
        this.parser = parser;
        this.atn = parser.atn;
        this.vocabulary = parser.vocabulary;
        this.ruleNames = parser.ruleNames;
        this.ignoredTokens = new Set();
        this.preferredRules = new Set();
    }
    /**
     * This is the main entry point. The caret token index specifies the token stream index for the token which
     * currently covers the caret (or any other position you want to get code completion candidates for).
     * Optionally you can pass in a parser rule context which limits the ATN walk to only that or called rules.
     * This can significantly speed up the retrieval process but might miss some candidates (if they are outside of
     * the given context).
     *
     * @param caretTokenIndex The index of the token at the caret position.
     * @param context An option parser rule context to limit the search space.
     * @returns The collection of completion candidates.
     */
    collectCandidates(caretTokenIndex, context) {
        this.shortcutMap.clear();
        this.candidates.rules.clear();
        this.candidates.tokens.clear();
        this.statesProcessed = 0;
        this.precedenceStack = [];
        this.tokenStartIndex = context ? context.start.tokenIndex : 0;
        const tokenStream = this.parser.inputStream;
        this.tokens = [];
        let offset = this.tokenStartIndex;
        while (true) {
            const token = tokenStream.get(offset++);
            if (token.channel === antlr4ts_1.Token.DEFAULT_CHANNEL) {
                this.tokens.push(token);
                if (token.tokenIndex >= caretTokenIndex || token.type === antlr4ts_1.Token.EOF) {
                    break;
                }
            }
            // Do not check for the token index here, as we want to end with the first unhidden token on or after
            // the caret.
            if (token.type === antlr4ts_1.Token.EOF) {
                break;
            }
        }
        const callStack = [];
        const startRule = context ? context.ruleIndex : 0;
        this.processRule(this.atn.ruleToStartState[startRule], 0, callStack, 0, 0);
        if (this.showResult) {
            console.log(`States processed: ${this.statesProcessed}`);
            console.log("\n\nCollected rules:\n");
            for (const rule of this.candidates.rules) {
                let path = "";
                for (const token of rule[1].ruleList) {
                    path += this.ruleNames[token] + " ";
                }
                console.log(this.ruleNames[rule[0]] + ", path: ", path);
            }
            const sortedTokens = new Set();
            for (const token of this.candidates.tokens) {
                let value = this.vocabulary.getDisplayName(token[0]);
                for (const following of token[1]) {
                    value += " " + this.vocabulary.getDisplayName(following);
                }
                sortedTokens.add(value);
            }
            console.log("\n\nCollected tokens:\n");
            for (const symbol of sortedTokens) {
                console.log(symbol);
            }
            console.log("\n\n");
        }
        return this.candidates;
    }
    /**
     * Checks if the predicate associated with the given transition evaluates to true.
     *
     * @param transition The transition to check.
     * @returns the evaluation result of the predicate.
     */
    checkPredicate(transition) {
        return transition.predicate.eval(this.parser, antlr4ts_1.ParserRuleContext.emptyContext());
    }
    /**
     * Walks the rule chain upwards or downwards (depending on translateRulesTopDown) to see if that matches any of the
     * preferred rules. If found, that rule is added to the collection candidates and true is returned.
     *
     * @param ruleWithStartTokenList The list to convert.
     * @returns true if any of the stack entries was converted.
     */
    translateStackToRuleIndex(ruleWithStartTokenList) {
        if (this.preferredRules.size === 0) {
            return false;
        }
        // Change the direction we iterate over the rule stack
        if (this.translateRulesTopDown) {
            // Loop over the rule stack from lowest to highest rule level. This will prioritize a lower preferred rule
            // if it is a child of a higher one that is also a preferred rule.
            for (let i = ruleWithStartTokenList.length - 1; i >= 0; i--) {
                if (this.translateToRuleIndex(i, ruleWithStartTokenList)) {
                    return true;
                }
            }
        }
        else {
            // Loop over the rule stack from highest to lowest rule level. This will prioritize a higher preferred rule
            // if it contains a lower one that is also a preferred rule.
            for (let i = 0; i < ruleWithStartTokenList.length; i++) {
                if (this.translateToRuleIndex(i, ruleWithStartTokenList)) {
                    return true;
                }
            }
        }
        return false;
    }
    /**
     * Given the index of a rule from a rule chain, check if that matches any of the preferred rules. If it matches,
     * that rule is added to the collection candidates and true is returned.
     *
     * @param i The rule index.
     * @param ruleWithStartTokenList The list to check.
     * @returns true if the specified rule is in the list of preferred rules.
     */
    translateToRuleIndex(i, ruleWithStartTokenList) {
        const { ruleIndex, startTokenIndex } = ruleWithStartTokenList[i];
        if (this.preferredRules.has(ruleIndex)) {
            // Add the rule to our candidates list along with the current rule path,
            // but only if there isn't already an entry like that.
            const path = ruleWithStartTokenList.slice(0, i).map(({ ruleIndex: candidate }) => { return candidate; });
            let addNew = true;
            for (const rule of this.candidates.rules) {
                if (rule[0] !== ruleIndex || rule[1].ruleList.length !== path.length) {
                    continue;
                }
                // Found an entry for this rule. Same path? If so don't add a new (duplicate) entry.
                if (path.every((v, j) => { return v === rule[1].ruleList[j]; })) {
                    addNew = false;
                    break;
                }
            }
            if (addNew) {
                this.candidates.rules.set(ruleIndex, {
                    startTokenIndex,
                    ruleList: path,
                });
                if (this.showDebugOutput) {
                    console.log("=====> collected: ", this.ruleNames[ruleIndex]);
                }
            }
            return true;
        }
        return false;
    }
    /**
     * This method follows the given transition and collects all symbols within the same rule that directly follow it
     * without intermediate transitions to other rules and only if there is a single symbol for a transition.
     *
     * @param transition The transition from which to start.
     * @returns A list of toke types.
     */
    getFollowingTokens(transition) {
        const result = [];
        const pipeline = [transition.target];
        while (pipeline.length > 0) {
            const state = pipeline.pop();
            if (state) {
                state.getTransitions().forEach((outgoing) => {
                    if (outgoing.serializationType === 5 /* TransitionType.ATOM */) {
                        if (!outgoing.isEpsilon) {
                            const list = outgoing.label.toArray();
                            if (list.length === 1 && !this.ignoredTokens.has(list[0])) {
                                result.push(list[0]);
                                pipeline.push(outgoing.target);
                            }
                        }
                        else {
                            pipeline.push(outgoing.target);
                        }
                    }
                });
            }
        }
        return result;
    }
    /**
     * Entry point for the recursive follow set collection function.
     *
     * @param start Start state.
     * @param stop Stop state.
     * @returns Follow sets.
     */
    determineFollowSets(start, stop) {
        const sets = [];
        const stateStack = [];
        const ruleStack = [];
        const isExhaustive = this.collectFollowSets(start, stop, sets, stateStack, ruleStack);
        // Sets are split by path to allow translating them to preferred rules. But for quick hit tests
        // it is also useful to have a set with all symbols combined.
        const combined = new IntervalSet_1.IntervalSet();
        for (const set of sets) {
            combined.addAll(set.intervals);
        }
        return { sets, isExhaustive, combined };
    }
    /**
     * Collects possible tokens which could be matched following the given ATN state. This is essentially the same
     * algorithm as used in the LL1Analyzer class, but here we consider predicates also and use no parser rule context.
     *
     * @param s The state to continue from.
     * @param stopState The state which ends the collection routine.
     * @param followSets A pass through parameter to add found sets to.
     * @param stateStack A stack to avoid endless recursions.
     * @param ruleStack The current rule stack.
     * @returns true if the follow sets is exhaustive, i.e. we terminated before the rule end was reached, so no
     * subsequent rules could add tokens
     */
    collectFollowSets(s, stopState, followSets, stateStack, ruleStack) {
        if (stateStack.find((x) => { return x === s; })) {
            return true;
        }
        stateStack.push(s);
        if (s === stopState || s.stateType === atn_1.ATNStateType.RULE_STOP) {
            stateStack.pop();
            return false;
        }
        let isExhaustive = true;
        for (const transition of s.getTransitions()) {
            if (transition.serializationType === 3 /* TransitionType.RULE */) {
                const ruleTransition = transition;
                if (ruleStack.indexOf(ruleTransition.target.ruleIndex) !== -1) {
                    continue;
                }
                ruleStack.push(ruleTransition.target.ruleIndex);
                const ruleFollowSetsIsExhaustive = this.collectFollowSets(transition.target, stopState, followSets, stateStack, ruleStack);
                ruleStack.pop();
                // If the subrule had an epsilon transition to the rule end, the tokens added to
                // the follow set are non-exhaustive and we should continue processing subsequent transitions post-rule
                if (!ruleFollowSetsIsExhaustive) {
                    const nextStateFollowSetsIsExhaustive = this.collectFollowSets(ruleTransition.followState, stopState, followSets, stateStack, ruleStack);
                    isExhaustive &&= nextStateFollowSetsIsExhaustive;
                }
            }
            else if (transition.serializationType === 4 /* TransitionType.PREDICATE */) {
                if (this.checkPredicate(transition)) {
                    const nextStateFollowSetsIsExhaustive = this.collectFollowSets(transition.target, stopState, followSets, stateStack, ruleStack);
                    isExhaustive &&= nextStateFollowSetsIsExhaustive;
                }
            }
            else if (transition.isEpsilon) {
                const nextStateFollowSetsIsExhaustive = this.collectFollowSets(transition.target, stopState, followSets, stateStack, ruleStack);
                isExhaustive &&= nextStateFollowSetsIsExhaustive;
            }
            else if (transition.serializationType === 9 /* TransitionType.WILDCARD */) {
                const set = new FollowSetWithPath();
                set.intervals = IntervalSet_1.IntervalSet.of(antlr4ts_1.Token.MIN_USER_TOKEN_TYPE, this.atn.maxTokenType);
                set.path = ruleStack.slice();
                followSets.push(set);
            }
            else {
                let label = transition.label;
                if (label && label.size > 0) {
                    if (transition.serializationType === 8 /* TransitionType.NOT_SET */) {
                        label = label.complement(IntervalSet_1.IntervalSet.of(antlr4ts_1.Token.MIN_USER_TOKEN_TYPE, this.atn.maxTokenType));
                    }
                    const set = new FollowSetWithPath();
                    set.intervals = label;
                    set.path = ruleStack.slice();
                    set.following = this.getFollowingTokens(transition);
                    followSets.push(set);
                }
            }
        }
        stateStack.pop();
        return isExhaustive;
    }
    /**
     * Walks the ATN for a single rule only. It returns the token stream position for each path that could be matched
     * in this rule.
     * The result can be empty in case we hit only non-epsilon transitions that didn't match the current input or if we
     * hit the caret position.
     *
     * @param startState The start state.
     * @param tokenListIndex The token index we are currently at.
     * @param callStack The stack that indicates where in the ATN we are currently.
     * @param precedence The current precedence level.
     * @param indentation A value to determine the current indentation when doing debug prints.
     * @returns the set of token stream indexes (which depend on the ways that had to be taken).
     */
    processRule(startState, tokenListIndex, callStack, precedence, indentation) {
        // Start with rule specific handling before going into the ATN walk.
        // Check first if we've taken this path with the same input before.
        let positionMap = this.shortcutMap.get(startState.ruleIndex);
        if (!positionMap) {
            positionMap = new Map();
            this.shortcutMap.set(startState.ruleIndex, positionMap);
        }
        else {
            if (positionMap.has(tokenListIndex)) {
                if (this.showDebugOutput) {
                    console.log("=====> shortcut");
                }
                return positionMap.get(tokenListIndex);
            }
        }
        const result = new Set();
        // For rule start states we determine and cache the follow set, which gives us 3 advantages:
        // 1) We can quickly check if a symbol would be matched when we follow that rule. We can so check in advance
        //    and can save us all the intermediate steps if there is no match.
        // 2) We'll have all symbols that are collectable already together when we are at the caret on rule enter.
        // 3) We get this lookup for free with any 2nd or further visit of the same rule, which often happens
        //    in non trivial grammars, especially with (recursive) expressions and of course when invoking code
        //    completion multiple times.
        let setsPerState = CodeCompletionCore.followSetsByATN.get(this.parser.constructor.name);
        if (!setsPerState) {
            setsPerState = new Map();
            CodeCompletionCore.followSetsByATN.set(this.parser.constructor.name, setsPerState);
        }
        let followSets = setsPerState.get(startState.stateNumber);
        if (!followSets) {
            const stop = this.atn.ruleToStopState[startState.ruleIndex];
            followSets = this.determineFollowSets(startState, stop);
            setsPerState.set(startState.stateNumber, followSets);
        }
        // Get the token index where our rule starts from our (possibly filtered) token list
        const startTokenIndex = this.tokens[tokenListIndex].tokenIndex;
        callStack.push({
            startTokenIndex,
            ruleIndex: startState.ruleIndex,
        });
        if (tokenListIndex >= this.tokens.length - 1) { // At caret?
            if (this.preferredRules.has(startState.ruleIndex)) {
                // No need to go deeper when collecting entries and we reach a rule that we want to collect anyway.
                this.translateStackToRuleIndex(callStack);
            }
            else {
                // Convert all follow sets to either single symbols or their associated preferred rule and add
                // the result to our candidates list.
                for (const set of followSets.sets) {
                    const fullPath = callStack.slice();
                    // Rules derived from our followSet will always start at the same token as our current rule.
                    const followSetPath = set.path.map((path) => {
                        return {
                            startTokenIndex,
                            ruleIndex: path,
                        };
                    });
                    fullPath.push(...followSetPath);
                    if (!this.translateStackToRuleIndex(fullPath)) {
                        for (const symbol of set.intervals.toArray()) {
                            if (!this.ignoredTokens.has(symbol)) {
                                if (this.showDebugOutput) {
                                    console.log("=====> collected: ", this.vocabulary.getDisplayName(symbol));
                                }
                                if (!this.candidates.tokens.has(symbol)) {
                                    // Following is empty if there is more than one entry in the set.
                                    this.candidates.tokens.set(symbol, set.following);
                                }
                                else {
                                    // More than one following list for the same symbol.
                                    if (this.candidates.tokens.get(symbol) !== set.following) {
                                        this.candidates.tokens.set(symbol, []);
                                    }
                                }
                            }
                        }
                    }
                }
            }
            if (!followSets.isExhaustive) {
                // If we're at the caret but the follow sets is non-exhaustive (empty or all tokens are optional),
                // we should continue to collect tokens following this rule
                result.add(tokenListIndex);
            }
            callStack.pop();
            return result;
        }
        else {
            // Process the rule if we either could pass it without consuming anything (epsilon transition)
            // or if the current input symbol will be matched somewhere after this entry point.
            // Otherwise stop here.
            const currentSymbol = this.tokens[tokenListIndex].type;
            if (followSets.isExhaustive && !followSets.combined.contains(currentSymbol)) {
                callStack.pop();
                return result;
            }
        }
        if (startState.isPrecedenceRule) {
            this.precedenceStack.push(precedence);
        }
        // The current state execution pipeline contains all yet-to-be-processed ATN states in this rule.
        // For each such state we store the token index + a list of rules that lead to it.
        const statePipeline = [];
        let currentEntry;
        // Bootstrap the pipeline.
        statePipeline.push({ state: startState, tokenListIndex });
        while (statePipeline.length > 0) {
            currentEntry = statePipeline.pop();
            ++this.statesProcessed;
            const currentSymbol = this.tokens[currentEntry.tokenListIndex].type;
            const atCaret = currentEntry.tokenListIndex >= this.tokens.length - 1;
            if (this.showDebugOutput) {
                this.printDescription(indentation, currentEntry.state, this.generateBaseDescription(currentEntry.state), currentEntry.tokenListIndex);
                if (this.showRuleStack) {
                    this.printRuleState(callStack);
                }
            }
            if (currentEntry.state.stateType === atn_1.ATNStateType.RULE_STOP) {
                // Record the token index we are at, to report it to the caller.
                result.add(currentEntry.tokenListIndex);
                continue;
            }
            const transitions = currentEntry.state.getTransitions();
            // We simulate here the same precedence handling as the parser does, which uses hard coded values.
            // For rules that are not left recursive this value is ignored (since there is no precedence transition).
            for (const transition of transitions) {
                switch (transition.serializationType) {
                    case 3 /* TransitionType.RULE */: {
                        const ruleTransition = transition;
                        const endStatus = this.processRule(transition.target, currentEntry.tokenListIndex, callStack, ruleTransition.precedence, indentation + 1);
                        for (const position of endStatus) {
                            statePipeline.push({
                                state: transition.followState,
                                tokenListIndex: position,
                            });
                        }
                        break;
                    }
                    case 4 /* TransitionType.PREDICATE */: {
                        if (this.checkPredicate(transition)) {
                            statePipeline.push({
                                state: transition.target,
                                tokenListIndex: currentEntry.tokenListIndex,
                            });
                        }
                        break;
                    }
                    case 10 /* TransitionType.PRECEDENCE */: {
                        const predTransition = transition;
                        if (predTransition.precedence >= this.precedenceStack[this.precedenceStack.length - 1]) {
                            statePipeline.push({
                                state: transition.target,
                                tokenListIndex: currentEntry.tokenListIndex,
                            });
                        }
                        break;
                    }
                    case 9 /* TransitionType.WILDCARD */: {
                        if (atCaret) {
                            if (!this.translateStackToRuleIndex(callStack)) {
                                for (const token of IntervalSet_1.IntervalSet.of(antlr4ts_1.Token.MIN_USER_TOKEN_TYPE, this.atn.maxTokenType)
                                    .toArray()) {
                                    if (!this.ignoredTokens.has(token)) {
                                        this.candidates.tokens.set(token, []);
                                    }
                                }
                            }
                        }
                        else {
                            statePipeline.push({
                                state: transition.target,
                                tokenListIndex: currentEntry.tokenListIndex + 1,
                            });
                        }
                        break;
                    }
                    default: {
                        if (transition.isEpsilon) {
                            // Jump over simple states with a single outgoing epsilon transition.
                            statePipeline.push({
                                state: transition.target,
                                tokenListIndex: currentEntry.tokenListIndex,
                            });
                            continue;
                        }
                        let set = transition.label;
                        if (set && set.size > 0) {
                            if (transition.serializationType === 8 /* TransitionType.NOT_SET */) {
                                set = set.complement(IntervalSet_1.IntervalSet.of(antlr4ts_1.Token.MIN_USER_TOKEN_TYPE, this.atn.maxTokenType));
                            }
                            if (atCaret) {
                                if (!this.translateStackToRuleIndex(callStack)) {
                                    const list = set.toArray();
                                    const hasTokenSequence = list.length === 1;
                                    for (const symbol of list) {
                                        if (!this.ignoredTokens.has(symbol)) {
                                            if (this.showDebugOutput) {
                                                console.log("=====> collected: ", this.vocabulary.getDisplayName(symbol));
                                            }
                                            const followingTokens = hasTokenSequence
                                                ? this.getFollowingTokens(transition)
                                                : [];
                                            if (!this.candidates.tokens.has(symbol)) {
                                                this.candidates.tokens.set(symbol, followingTokens);
                                            }
                                            else {
                                                this.candidates.tokens.set(symbol, (0, utils_1.longestCommonPrefix)(followingTokens, this.candidates.tokens.get(symbol)));
                                            }
                                        }
                                    }
                                }
                            }
                            else {
                                if (set.contains(currentSymbol)) {
                                    if (this.showDebugOutput) {
                                        console.log("=====> consumed: ", this.vocabulary.getDisplayName(currentSymbol));
                                    }
                                    statePipeline.push({
                                        state: transition.target,
                                        tokenListIndex: currentEntry.tokenListIndex + 1,
                                    });
                                }
                            }
                        }
                    }
                }
            }
        }
        callStack.pop();
        if (startState.isPrecedenceRule) {
            this.precedenceStack.pop();
        }
        // Cache the result, for later lookup to avoid duplicate walks.
        positionMap.set(tokenListIndex, result);
        return result;
    }
    generateBaseDescription(state) {
        const stateValue = state.stateNumber === atn_1.ATNState.INVALID_STATE_NUMBER ? "Invalid" : state.stateNumber;
        return `[${stateValue} ${CodeCompletionCore.atnStateTypeMap[state.stateType]}] in ` +
            `${this.ruleNames[state.ruleIndex]}`;
    }
    printDescription(indentation, state, baseDescription, tokenIndex) {
        const indent = "  ".repeat(indentation);
        let output = indent;
        let transitionDescription = "";
        if (this.debugOutputWithTransitions) {
            for (const transition of state.getTransitions()) {
                let labels = "";
                const symbols = transition.label ? transition.label.toArray() : [];
                if (symbols.length > 2) {
                    // Only print start and end symbols to avoid large lists in debug output.
                    labels = this.vocabulary.getDisplayName(symbols[0]) + " .. " +
                        this.vocabulary.getDisplayName(symbols[symbols.length - 1]);
                }
                else {
                    for (const symbol of symbols) {
                        if (labels.length > 0) {
                            labels += ", ";
                        }
                        labels += this.vocabulary.getDisplayName(symbol);
                    }
                }
                if (labels.length === 0) {
                    labels = "ε";
                }
                transitionDescription += `\n${indent}\t(${labels}) [${transition.target.stateNumber} ` +
                    `${CodeCompletionCore.atnStateTypeMap[transition.target.stateType]}] in ` +
                    `${this.ruleNames[transition.target.ruleIndex]}`;
            }
        }
        if (tokenIndex >= this.tokens.length - 1) {
            output += `<<${this.tokenStartIndex + tokenIndex}>> `;
        }
        else {
            output += `<${this.tokenStartIndex + tokenIndex}> `;
        }
        console.log(output + "Current state: " + baseDescription + transitionDescription);
    }
    printRuleState(stack) {
        if (stack.length === 0) {
            console.log("<empty stack>");
            return;
        }
        for (const rule of stack) {
            console.log(this.ruleNames[rule.ruleIndex]);
        }
    }
}
exports.CodeCompletionCore = CodeCompletionCore;
//# sourceMappingURL=CodeCompletionCore.js.map

/***/ }),

/***/ 8921:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

/*
 * This file is released under the MIT license.
 * Copyright (c) 2023, Mike Lischke
 *
 * See LICENSE file for more info.
 */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DuplicateSymbolError = void 0;
class DuplicateSymbolError extends Error {
}
exports.DuplicateSymbolError = DuplicateSymbolError;
//# sourceMappingURL=DuplicateSymbolError.js.map

/***/ }),

/***/ 637:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/*
 * This file is released under the MIT license.
 * Copyright (c) 2023, Mike Lischke
 *
 * See LICENSE file for more info.
 */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.FieldSymbol = void 0;
const VariableSymbol_1 = __webpack_require__(5329);
/** A field which belongs to a class or other outer container structure. */
class FieldSymbol extends VariableSymbol_1.VariableSymbol {
    setter;
    getter;
}
exports.FieldSymbol = FieldSymbol;
//# sourceMappingURL=FieldSymbol.js.map

/***/ }),

/***/ 1741:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/*
 * This file is released under the MIT license.
 * Copyright (c) 2023, Mike Lischke
 *
 * See LICENSE file for more info.
 */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.FundamentalType = void 0;
const types_1 = __webpack_require__(2322);
/** A single class for all fundamental types. They are distinguished via the kind field. */
class FundamentalType {
    static integerType = new FundamentalType("int", types_1.TypeKind.Integer, types_1.ReferenceKind.Instance);
    static floatType = new FundamentalType("float", types_1.TypeKind.Float, types_1.ReferenceKind.Instance);
    static stringType = new FundamentalType("string", types_1.TypeKind.String, types_1.ReferenceKind.Instance);
    static boolType = new FundamentalType("bool", types_1.TypeKind.Boolean, types_1.ReferenceKind.Instance);
    name;
    typeKind;
    referenceKind;
    constructor(name, typeKind = types_1.TypeKind.Unknown, referenceKind = types_1.ReferenceKind.Irrelevant) {
        this.name = name;
        this.typeKind = typeKind;
        this.referenceKind = referenceKind;
    }
    get baseTypes() {
        return [];
    }
    get kind() {
        return this.typeKind;
    }
    get reference() {
        return this.referenceKind;
    }
}
exports.FundamentalType = FundamentalType;
//# sourceMappingURL=FundamentalType.js.map

/***/ }),

/***/ 1944:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/*
 * This file is released under the MIT license.
 * Copyright (c) 2023, Mike Lischke
 *
 * See LICENSE file for more info.
 */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.InterfaceSymbol = void 0;
const types_1 = __webpack_require__(2322);
const FieldSymbol_1 = __webpack_require__(637);
const MethodSymbol_1 = __webpack_require__(50);
const ScopedSymbol_1 = __webpack_require__(634);
class InterfaceSymbol extends ScopedSymbol_1.ScopedSymbol {
    reference = types_1.ReferenceKind.Irrelevant;
    /** Typescript allows an interface to extend a class, not only interfaces. */
    // eslint-disable-next-line no-use-before-define
    extends;
    constructor(name, ext) {
        super(name);
        this.extends = ext;
    }
    get baseTypes() { return this.extends; }
    get kind() { return types_1.TypeKind.Interface; }
    /**
     * @param includeInherited Not used.
     *
     * @returns a list of all methods.
     */
    getMethods(includeInherited = false) {
        return this.getSymbolsOfType(MethodSymbol_1.MethodSymbol);
    }
    /**
     * @param includeInherited Not used.
     *
     * @returns all fields.
     */
    getFields(includeInherited = false) {
        return this.getSymbolsOfType(FieldSymbol_1.FieldSymbol);
    }
}
exports.InterfaceSymbol = InterfaceSymbol;
//# sourceMappingURL=InterfaceSymbol.js.map

/***/ }),

/***/ 5675:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/*
 * This file is released under the MIT license.
 * Copyright (c) 2023, Mike Lischke
 *
 * See LICENSE file for more info.
 */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.LiteralSymbol = void 0;
const TypedSymbol_1 = __webpack_require__(6089);
class LiteralSymbol extends TypedSymbol_1.TypedSymbol {
    value;
    constructor(name, value, type) {
        super(name, type);
        this.value = value;
    }
}
exports.LiteralSymbol = LiteralSymbol;
//# sourceMappingURL=LiteralSymbol.js.map

/***/ }),

/***/ 50:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/*
 * This file is released under the MIT license.
 * Copyright (c) 2023, Mike Lischke
 *
 * See LICENSE file for more info.
 */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.MethodSymbol = exports.MethodFlags = void 0;
const RoutineSymbol_1 = __webpack_require__(308);
var MethodFlags;
(function (MethodFlags) {
    MethodFlags[MethodFlags["None"] = 0] = "None";
    MethodFlags[MethodFlags["Virtual"] = 1] = "Virtual";
    MethodFlags[MethodFlags["Const"] = 2] = "Const";
    MethodFlags[MethodFlags["Overwritten"] = 4] = "Overwritten";
    /** Distinguished by the return type. */
    MethodFlags[MethodFlags["SetterOrGetter"] = 8] = "SetterOrGetter";
    /** Special flag used e.g. in C++ for explicit c-tors. */
    MethodFlags[MethodFlags["Explicit"] = 16] = "Explicit";
})(MethodFlags || (exports.MethodFlags = MethodFlags = {}));
/** A function which belongs to a class or other outer container structure. */
class MethodSymbol extends RoutineSymbol_1.RoutineSymbol {
    methodFlags = MethodFlags.None;
}
exports.MethodSymbol = MethodSymbol;
//# sourceMappingURL=MethodSymbol.js.map

/***/ }),

/***/ 6997:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/*
 * This file is released under the MIT license.
 * Copyright (c) 2023, Mike Lischke
 *
 * See LICENSE file for more info.
 */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.NamespaceSymbol = void 0;
const ScopedSymbol_1 = __webpack_require__(634);
class NamespaceSymbol extends ScopedSymbol_1.ScopedSymbol {
    inline;
    attributes;
    constructor(name, inline = false, attributes = []) {
        super(name);
        this.inline = inline;
        this.attributes = attributes;
    }
}
exports.NamespaceSymbol = NamespaceSymbol;
//# sourceMappingURL=NamespaceSymbol.js.map

/***/ }),

/***/ 7780:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/*
 * This file is released under the MIT license.
 * Copyright (c) 2023, Mike Lischke
 *
 * See LICENSE file for more info.
 */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ParameterSymbol = void 0;
const VariableSymbol_1 = __webpack_require__(5329);
class ParameterSymbol extends VariableSymbol_1.VariableSymbol {
}
exports.ParameterSymbol = ParameterSymbol;
//# sourceMappingURL=ParameterSymbol.js.map

/***/ }),

/***/ 308:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/*
 * This file is released under the MIT license.
 * Copyright (c) 2023, Mike Lischke
 *
 * See LICENSE file for more info.
 */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.RoutineSymbol = void 0;
const ParameterSymbol_1 = __webpack_require__(7780);
const ScopedSymbol_1 = __webpack_require__(634);
const VariableSymbol_1 = __webpack_require__(5329);
/** A standalone function/procedure/rule. */
class RoutineSymbol extends ScopedSymbol_1.ScopedSymbol {
    returnType; // Can be null if result is void.
    constructor(name, returnType) {
        super(name);
        this.returnType = returnType;
    }
    getVariables(localOnly = true) {
        return this.getSymbolsOfType(VariableSymbol_1.VariableSymbol);
    }
    getParameters(localOnly = true) {
        return this.getSymbolsOfType(ParameterSymbol_1.ParameterSymbol);
    }
}
exports.RoutineSymbol = RoutineSymbol;
//# sourceMappingURL=RoutineSymbol.js.map

/***/ }),

/***/ 634:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/*
 * This file is released under the MIT license.
 * Copyright (c) 2023, Mike Lischke
 *
 * See LICENSE file for more info.
 */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ScopedSymbol = void 0;
const BaseSymbol_1 = __webpack_require__(523);
const DuplicateSymbolError_1 = __webpack_require__(8921);
/** A symbol with a scope (so it can have child symbols). */
class ScopedSymbol extends BaseSymbol_1.BaseSymbol {
    /** All child symbols in definition order. */
    #children = [];
    // All used child names. Used to detect name collisions.
    #names = new Map();
    constructor(name = "") {
        super(name);
    }
    /**
     * @returns A promise resolving to all direct child symbols with a scope (e.g. classes in a module).
     */
    get directScopes() {
        return this.getSymbolsOfType(ScopedSymbol);
    }
    get children() {
        return this.#children;
    }
    get firstChild() {
        if (this.#children.length > 0) {
            return this.#children[0];
        }
        return undefined;
    }
    get lastChild() {
        if (this.#children.length > 0) {
            return this.#children[this.#children.length - 1];
        }
        return undefined;
    }
    clear() {
        this.#children = [];
        this.#names.clear();
    }
    /**
     * Adds the given symbol to this scope. If it belongs already to a different scope
     * it is removed from that before adding it here.
     *
     * @param symbol The symbol to add as a child.
     */
    addSymbol(symbol) {
        symbol.removeFromParent();
        // Check for duplicates first.
        const symbolTable = this.symbolTable;
        const count = this.#names.get(symbol.name);
        if (!symbolTable || !symbolTable.options.allowDuplicateSymbols) {
            if (count !== undefined) {
                throw new DuplicateSymbolError_1.DuplicateSymbolError("Attempt to add duplicate symbol '" + (symbol.name ?? "<anonymous>") +
                    "'");
            }
            else {
                this.#names.set(symbol.name, 1);
            }
            const index = this.#children.indexOf(symbol);
            if (index > -1) {
                throw new DuplicateSymbolError_1.DuplicateSymbolError("Attempt to add duplicate symbol '" + (symbol.name ?? "<anonymous>") +
                    "'");
            }
        }
        else {
            this.#names.set(symbol.name, count === undefined ? 1 : count + 1);
        }
        this.#children.push(symbol);
        symbol.setParent(this);
    }
    removeSymbol(symbol) {
        const index = this.#children.indexOf(symbol);
        if (index > -1) {
            this.#children.splice(index, 1);
            symbol.setParent(undefined);
            const count = this.#names.get(symbol.name);
            if (count !== undefined) {
                if (count === 1) {
                    this.#names.delete(symbol.name);
                }
                else {
                    this.#names.set(symbol.name, count - 1);
                }
            }
        }
    }
    /**
     * Asynchronously retrieves child symbols of a given type from this symbol.
     *
     * @param t The type of of the objects to return.
     *
     * @returns A promise resolving to all (nested) children of the given type.
     */
    async getNestedSymbolsOfType(t) {
        const result = [];
        const childPromises = [];
        this.#children.forEach((child) => {
            if (child instanceof t) {
                result.push(child);
            }
            if (child instanceof ScopedSymbol) {
                childPromises.push(child.getNestedSymbolsOfType(t));
            }
        });
        const childSymbols = await Promise.all(childPromises);
        childSymbols.forEach((entry) => {
            result.push(...entry);
        });
        return result;
    }
    /**
     * Synchronously retrieves child symbols of a given type from this symbol.
     *
     * @param t The type of of the objects to return.
     *
     * @returns A list of all (nested) children of the given type.
     */
    getNestedSymbolsOfTypeSync(t) {
        const result = [];
        this.#children.forEach((child) => {
            if (child instanceof t) {
                result.push(child);
            }
            if (child instanceof ScopedSymbol) {
                result.push(...child.getNestedSymbolsOfTypeSync(t));
            }
        });
        return result;
    }
    /**
     * @param name If given only returns symbols with that name.
     *
     * @returns A promise resolving to symbols from this and all nested scopes in the order they were defined.
     */
    async getAllNestedSymbols(name) {
        const result = [];
        const childPromises = [];
        this.#children.forEach((child) => {
            if (!name || child.name === name) {
                result.push(child);
            }
            if (child instanceof ScopedSymbol) {
                childPromises.push(child.getAllNestedSymbols(name));
            }
        });
        const childSymbols = await Promise.all(childPromises);
        childSymbols.forEach((entry) => {
            result.push(...entry);
        });
        return result;
    }
    /**
     * @param name If given only returns symbols with that name.
     *
     * @returns A list of all symbols from this and all nested scopes in the order they were defined.
     */
    getAllNestedSymbolsSync(name) {
        const result = [];
        this.#children.forEach((child) => {
            if (!name || child.name === name) {
                result.push(child);
            }
            if (child instanceof ScopedSymbol) {
                result.push(...child.getAllNestedSymbolsSync(name));
            }
        });
        return result;
    }
    /**
     * @param t The type of of the objects to return.
     *
     * @returns A promise resolving to direct children of a given type.
     */
    getSymbolsOfType(t) {
        return new Promise((resolve) => {
            const result = [];
            this.#children.forEach((child) => {
                if (child instanceof t) {
                    result.push(child);
                }
            });
            resolve(result);
        });
    }
    /**
     * TODO: add optional position dependency (only symbols defined before a given caret pos are viable).
     *
     * @param t The type of the objects to return.
     * @param localOnly If true only child symbols are returned, otherwise also symbols from the parent of this symbol
     *                  (recursively).
     *
     * @returns A promise resolving to all symbols of the the given type, accessible from this scope (if localOnly is
     *          false), within the owning symbol table.
     */
    async getAllSymbols(t, localOnly = false) {
        const result = [];
        // Special handling for namespaces, which act like grouping symbols in this scope,
        // so we show them as available in this scope.
        for (const child of this.#children) {
            if (child instanceof t) {
                result.push(child);
            }
            if (this.isNamespace(child)) {
                const childSymbols = await child.getAllSymbols(t, true);
                result.push(...childSymbols);
            }
        }
        if (!localOnly) {
            if (this.parent) {
                const childSymbols = await this.getAllSymbols(t, true);
                result.push(...childSymbols);
            }
        }
        return result;
    }
    /**
     * TODO: add optional position dependency (only symbols defined before a given caret pos are viable).
     *
     * @param t The type of the objects to return.
     * @param localOnly If true only child symbols are returned, otherwise also symbols from the parent of this symbol
     *                  (recursively).
     *
     * @returns A list with all symbols of the the given type, accessible from this scope (if localOnly is
     *          false), within the owning symbol table.
     */
    getAllSymbolsSync(t, localOnly = false) {
        const result = [];
        // Special handling for namespaces, which act like grouping symbols in this scope,
        // so we show them as available in this scope.
        for (const child of this.#children) {
            if (child instanceof t) {
                result.push(child);
            }
            if (this.isNamespace(child)) {
                const childSymbols = child.getAllSymbolsSync(t, true);
                result.push(...childSymbols);
            }
        }
        if (!localOnly) {
            if (this.parent) {
                const childSymbols = this.getAllSymbolsSync(t, true);
                result.push(...childSymbols);
            }
        }
        return result;
    }
    /**
     * @param name The name of the symbol to resolve.
     * @param localOnly If true only child symbols are returned, otherwise also symbols from the parent of this symbol
     *                  (recursively).
     *
     * @returns A promise resolving to the first symbol with a given name, in the order of appearance in this scope
     *          or any of the parent scopes (conditionally).
     */
    async resolve(name, localOnly = false) {
        return new Promise((resolve, reject) => {
            for (const child of this.#children) {
                if (child.name === name) {
                    resolve(child);
                    return;
                }
            }
            // Nothing found locally. Let the parent continue.
            if (!localOnly) {
                if (this.parent) {
                    resolve(this.parent.resolve(name, false));
                    return;
                }
            }
            resolve(undefined);
        });
    }
    /**
     * @param name The name of the symbol to resolve.
     * @param localOnly If true only child symbols are returned, otherwise also symbols from the parent of this symbol
     *                  (recursively).
     *
     * @returns the first symbol with a given name, in the order of appearance in this scope
     *          or any of the parent scopes (conditionally).
     */
    resolveSync(name, localOnly = false) {
        for (const child of this.#children) {
            if (child.name === name) {
                return child;
            }
        }
        // Nothing found locally. Let the parent continue.
        if (!localOnly) {
            if (this.parent) {
                return this.parent.resolveSync(name, false);
            }
        }
        return undefined;
    }
    /**
     * @param path The path consisting of symbol names separator by `separator`.
     * @param separator The character to separate path segments.
     *
     * @returns the symbol located at the given path through the symbol hierarchy.
     */
    symbolFromPath(path, separator = ".") {
        const elements = path.split(separator);
        let index = 0;
        if (elements[0] === this.name || elements[0].length === 0) {
            ++index;
        }
        // eslint-disable-next-line @typescript-eslint/no-this-alias
        let result = this;
        while (index < elements.length) {
            if (!(result instanceof ScopedSymbol)) {
                return undefined;
            }
            // eslint-disable-next-line no-loop-func
            const child = result.children.find((candidate) => { return candidate.name === elements[index]; });
            if (!child) {
                return undefined;
            }
            result = child;
            ++index;
        }
        return result;
    }
    /**
     * @param child The child to search for.
     *
     * @returns the index of the given child symbol in the child list or -1 if it couldn't be found.
     */
    indexOfChild(child) {
        return this.#children.findIndex((value, index) => { return value === child; });
    }
    /**
     * @param child The reference node.
     *
     * @returns the sibling symbol after the given child symbol, if one exists.
     */
    nextSiblingOf(child) {
        const index = this.indexOfChild(child);
        if (index === -1 || index >= this.#children.length - 1) {
            return undefined;
        }
        return this.#children[index + 1];
    }
    /**
     * @param child The reference node.
     *
     * @returns the sibling symbol before the given child symbol, if one exists.
     */
    previousSiblingOf(child) {
        const index = this.indexOfChild(child);
        if (index < 1) {
            return undefined;
        }
        return this.#children[index - 1];
    }
    /**
     * @param child The reference node.
     *
     * @returns the next symbol in definition order, regardless of the scope.
     */
    nextOf(child) {
        if (!(child.parent)) {
            return undefined;
        }
        if (child.parent !== this) {
            return child.parent.nextOf(child);
        }
        if (child instanceof ScopedSymbol && child.children.length > 0) {
            return child.children[0];
        }
        const sibling = this.nextSiblingOf(child);
        if (sibling) {
            return sibling;
        }
        return this.parent.nextOf(this);
    }
    isNamespace(candidate) {
        return candidate.inline !== undefined
            && candidate.attributes !== undefined;
    }
}
exports.ScopedSymbol = ScopedSymbol;
//# sourceMappingURL=ScopedSymbol.js.map

/***/ }),

/***/ 8301:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/*
 * This file is released under the MIT license.
 * Copyright (c) 2017, 2021, Mike Lischke
 *
 * See LICENSE file for more info.
 */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.SymbolTable = void 0;
const BaseSymbol_1 = __webpack_require__(523);
const ScopedSymbol_1 = __webpack_require__(634);
const NamespaceSymbol_1 = __webpack_require__(6997);
/** The main class managing all the symbols for a top level entity like a file, library or similar. */
class SymbolTable extends ScopedSymbol_1.ScopedSymbol {
    options;
    /**  Other symbol information available to this instance. */
    dependencies = new Set();
    constructor(name, options) {
        super(name);
        this.options = options;
    }
    get info() {
        return {
            dependencyCount: this.dependencies.size,
            symbolCount: this.children.length,
        };
    }
    clear() {
        super.clear();
        this.dependencies.clear();
    }
    addDependencies(...tables) {
        tables.forEach((value, key) => {
            this.dependencies.add(value);
        });
    }
    removeDependency(table) {
        if (this.dependencies.has(table)) {
            this.dependencies.delete(table);
        }
    }
    addNewSymbolOfType(t, parent, ...args) {
        const result = new t(...args);
        if (!parent || parent === this) {
            this.addSymbol(result);
        }
        else {
            parent.addSymbol(result);
        }
        return result;
    }
    async addNewNamespaceFromPath(parent, path, delimiter = ".") {
        const parts = path.split(delimiter);
        let i = 0;
        let currentParent = (parent === undefined) ? this : parent;
        while (i < parts.length - 1) {
            let namespace = await currentParent.resolve(parts[i], true);
            if (namespace === undefined) {
                namespace = this.addNewSymbolOfType(NamespaceSymbol_1.NamespaceSymbol, currentParent, parts[i]);
            }
            currentParent = namespace;
            ++i;
        }
        return this.addNewSymbolOfType(NamespaceSymbol_1.NamespaceSymbol, currentParent, parts[parts.length - 1]);
    }
    addNewNamespaceFromPathSync(parent, path, delimiter = ".") {
        const parts = path.split(delimiter);
        let i = 0;
        let currentParent = (parent === undefined) ? this : parent;
        while (i < parts.length - 1) {
            let namespace = currentParent.resolveSync(parts[i], true);
            if (namespace === undefined) {
                namespace = this.addNewSymbolOfType(NamespaceSymbol_1.NamespaceSymbol, currentParent, parts[i]);
            }
            currentParent = namespace;
            ++i;
        }
        return this.addNewSymbolOfType(NamespaceSymbol_1.NamespaceSymbol, currentParent, parts[parts.length - 1]);
    }
    async getAllSymbols(t, localOnly = false) {
        const result = await super.getAllSymbols(t, localOnly);
        if (!localOnly) {
            const dependencyResults = await Promise.all([...this.dependencies].map((dependency) => {
                return (dependency.getAllSymbols(t, localOnly));
            }));
            dependencyResults.forEach((value) => {
                result.push(...value);
            });
        }
        return result;
    }
    getAllSymbolsSync(t, localOnly = false) {
        const result = super.getAllSymbolsSync(t, localOnly);
        if (!localOnly) {
            this.dependencies.forEach((dependency) => {
                result.push(...dependency.getAllSymbolsSync(t, localOnly));
            });
        }
        return result;
    }
    async symbolWithContext(context) {
        /**
         * Local function to find a symbol recursively.
         *
         * @param symbol The symbol to search through.
         *
         * @returns The symbol with the given context, if found.
         */
        const findRecursive = (symbol) => {
            if (symbol.context === context) {
                return symbol;
            }
            if (symbol instanceof ScopedSymbol_1.ScopedSymbol) {
                for (const child of symbol.children) {
                    const result = findRecursive(child);
                    if (result) {
                        return result;
                    }
                }
            }
            return undefined;
        };
        let symbols = await this.getAllSymbols(BaseSymbol_1.BaseSymbol);
        for (const symbol of symbols) {
            const result = findRecursive(symbol);
            if (result) {
                return result;
            }
        }
        for (const dependency of this.dependencies) {
            symbols = await dependency.getAllSymbols(BaseSymbol_1.BaseSymbol);
            for (const symbol of symbols) {
                const result = findRecursive(symbol);
                if (result) {
                    return result;
                }
            }
        }
        return undefined;
    }
    symbolWithContextSync(context) {
        /**
         * Local function to find a symbol recursively.
         *
         * @param symbol The symbol to search through.
         *
         * @returns The symbol with the given context, if found.
         */
        const findRecursive = (symbol) => {
            if (symbol.context === context) {
                return symbol;
            }
            if (symbol instanceof ScopedSymbol_1.ScopedSymbol) {
                for (const child of symbol.children) {
                    const result = findRecursive(child);
                    if (result) {
                        return result;
                    }
                }
            }
            return undefined;
        };
        let symbols = this.getAllSymbolsSync(BaseSymbol_1.BaseSymbol);
        for (const symbol of symbols) {
            const result = findRecursive(symbol);
            if (result) {
                return result;
            }
        }
        for (const dependency of this.dependencies) {
            symbols = dependency.getAllSymbolsSync(BaseSymbol_1.BaseSymbol);
            for (const symbol of symbols) {
                const result = findRecursive(symbol);
                if (result) {
                    return result;
                }
            }
        }
        return undefined;
    }
    async resolve(name, localOnly = false) {
        let result = await super.resolve(name, localOnly);
        if (!result && !localOnly) {
            for (const dependency of this.dependencies) {
                result = await dependency.resolve(name, false);
                if (result) {
                    return result;
                }
            }
        }
        return result;
    }
    resolveSync(name, localOnly = false) {
        let result = super.resolveSync(name, localOnly);
        if (!result && !localOnly) {
            for (const dependency of this.dependencies) {
                result = dependency.resolveSync(name, false);
                if (result) {
                    return result;
                }
            }
        }
        return result;
    }
}
exports.SymbolTable = SymbolTable;
//# sourceMappingURL=SymbolTable.js.map

/***/ }),

/***/ 4313:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/*
 * This file is released under the MIT license.
 * Copyright (c) 2023, Mike Lischke
 *
 * See LICENSE file for more info.
 */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.TypeAlias = void 0;
const types_1 = __webpack_require__(2322);
const BaseSymbol_1 = __webpack_require__(523);
/** An alias for another type. */
class TypeAlias extends BaseSymbol_1.BaseSymbol {
    targetType;
    constructor(name, target) {
        super(name);
        this.targetType = target;
    }
    get baseTypes() {
        return [this.targetType];
    }
    get kind() {
        return types_1.TypeKind.Alias;
    }
    get reference() {
        return types_1.ReferenceKind.Irrelevant;
    }
}
exports.TypeAlias = TypeAlias;
//# sourceMappingURL=TypeAlias.js.map

/***/ }),

/***/ 6089:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/*
 * This file is released under the MIT license.
 * Copyright (c) 2023, Mike Lischke
 *
 * See LICENSE file for more info.
 */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.TypedSymbol = void 0;
const BaseSymbol_1 = __webpack_require__(523);
/** A symbol with an attached type (variables, fields etc.). */
class TypedSymbol extends BaseSymbol_1.BaseSymbol {
    type;
    constructor(name, type) {
        super(name);
        this.type = type;
    }
}
exports.TypedSymbol = TypedSymbol;
//# sourceMappingURL=TypedSymbol.js.map

/***/ }),

/***/ 5329:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/*
 * This file is released under the MIT license.
 * Copyright (c) 2023, Mike Lischke
 *
 * See LICENSE file for more info.
 */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.VariableSymbol = void 0;
const TypedSymbol_1 = __webpack_require__(6089);
class VariableSymbol extends TypedSymbol_1.TypedSymbol {
    value;
    constructor(name, value, type) {
        super(name, type);
        this.value = value;
    }
}
exports.VariableSymbol = VariableSymbol;
//# sourceMappingURL=VariableSymbol.js.map

/***/ }),

/***/ 2322:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

/*
 * This file is released under the MIT license.
 * Copyright (c) 2023, Mike Lischke
 *
 * See LICENSE file for more info.
 */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ReferenceKind = exports.TypeKind = exports.Modifier = exports.MemberVisibility = void 0;
/** Visibility (aka. accessibility) of a symbol member. */
var MemberVisibility;
(function (MemberVisibility) {
    /** Not specified, default depends on the language and type. */
    MemberVisibility[MemberVisibility["Unknown"] = 0] = "Unknown";
    /** Used in Swift, member can be accessed outside of the defining module and extended. */
    MemberVisibility[MemberVisibility["Open"] = 1] = "Open";
    /** Like Open, but in Swift such a type cannot be extended. */
    MemberVisibility[MemberVisibility["Public"] = 2] = "Public";
    /** Member is only accessible in the defining class and any derived class. */
    MemberVisibility[MemberVisibility["Protected"] = 3] = "Protected";
    /** Member can only be accessed from the defining class. */
    MemberVisibility[MemberVisibility["Private"] = 4] = "Private";
    /**
     * Used in Swift and Java, member can be accessed from everywhere in a defining module, not outside however.
     * Also known as package private.
     */
    MemberVisibility[MemberVisibility["FilePrivate"] = 5] = "FilePrivate";
    /** Custom enum for special usage. */
    MemberVisibility[MemberVisibility["Library"] = 6] = "Library";
})(MemberVisibility || (exports.MemberVisibility = MemberVisibility = {}));
/** The modifier of a symbol member. */
var Modifier;
(function (Modifier) {
    Modifier[Modifier["Static"] = 0] = "Static";
    Modifier[Modifier["Final"] = 1] = "Final";
    Modifier[Modifier["Sealed"] = 2] = "Sealed";
    Modifier[Modifier["Abstract"] = 3] = "Abstract";
    Modifier[Modifier["Deprecated"] = 4] = "Deprecated";
    Modifier[Modifier["Virtual"] = 5] = "Virtual";
    Modifier[Modifier["Const"] = 6] = "Const";
    Modifier[Modifier["Overwritten"] = 7] = "Overwritten";
})(Modifier || (exports.Modifier = Modifier = {}));
/** Rough categorization of a type. */
var TypeKind;
(function (TypeKind) {
    TypeKind[TypeKind["Unknown"] = 0] = "Unknown";
    TypeKind[TypeKind["Integer"] = 1] = "Integer";
    TypeKind[TypeKind["Float"] = 2] = "Float";
    TypeKind[TypeKind["Number"] = 3] = "Number";
    TypeKind[TypeKind["String"] = 4] = "String";
    TypeKind[TypeKind["Char"] = 5] = "Char";
    TypeKind[TypeKind["Boolean"] = 6] = "Boolean";
    TypeKind[TypeKind["Class"] = 7] = "Class";
    TypeKind[TypeKind["Interface"] = 8] = "Interface";
    TypeKind[TypeKind["Array"] = 9] = "Array";
    TypeKind[TypeKind["Map"] = 10] = "Map";
    TypeKind[TypeKind["Enum"] = 11] = "Enum";
    TypeKind[TypeKind["Alias"] = 12] = "Alias";
})(TypeKind || (exports.TypeKind = TypeKind = {}));
/** Describes a reference to a type. */
var ReferenceKind;
(function (ReferenceKind) {
    ReferenceKind[ReferenceKind["Irrelevant"] = 0] = "Irrelevant";
    /** Default for most languages for dynamically allocated memory ("Type*" in C++). */
    ReferenceKind[ReferenceKind["Pointer"] = 1] = "Pointer";
    /** "Type&" in C++, all non-primitive types in Java/Javascript/Typescript etc. */
    ReferenceKind[ReferenceKind["Reference"] = 2] = "Reference";
    /** "Type" as such and default for all value types. */
    ReferenceKind[ReferenceKind["Instance"] = 3] = "Instance";
})(ReferenceKind || (exports.ReferenceKind = ReferenceKind = {}));
//# sourceMappingURL=types.js.map

/***/ }),

/***/ 5808:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

/*
 * This file is released under the MIT license.
 * Copyright (c) 2023, Mike Lischke
 *
 * See LICENSE file for more info.
 */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.longestCommonPrefix = void 0;
const longestCommonPrefix = (arr1, arr2) => {
    if (!arr1 || !arr2) {
        return [];
    }
    let i;
    for (i = 0; i < Math.min(arr1.length, arr2.length); i++) {
        if (arr1[i] !== arr2[i]) {
            break;
        }
    }
    return arr1.slice(0, i);
};
exports.longestCommonPrefix = longestCommonPrefix;
//# sourceMappingURL=utils.js.map

/***/ }),

/***/ 2191:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var possibleNames = [
	'BigInt64Array',
	'BigUint64Array',
	'Float32Array',
	'Float64Array',
	'Int16Array',
	'Int32Array',
	'Int8Array',
	'Uint16Array',
	'Uint32Array',
	'Uint8Array',
	'Uint8ClampedArray'
];

var g = typeof globalThis === 'undefined' ? __webpack_require__.g : globalThis;

module.exports = function availableTypedArrays() {
	var out = [];
	for (var i = 0; i < possibleNames.length; i++) {
		if (typeof g[possibleNames[i]] === 'function') {
			out[out.length] = possibleNames[i];
		}
	}
	return out;
};


/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/global */
/******/ 	(() => {
/******/ 		__webpack_require__.g = (function() {
/******/ 			if (typeof globalThis === 'object') return globalThis;
/******/ 			try {
/******/ 				return this || new Function('return this')();
/******/ 			} catch (e) {
/******/ 				if (typeof window === 'object') return window;
/******/ 			}
/******/ 		})();
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it need to be in strict mode.
(() => {
"use strict";
// ESM COMPAT FLAG
__webpack_require__.r(__webpack_exports__);

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  FlinkSQLService: () => (/* binding */ FlinkSQLService)
});

// EXTERNAL MODULE: ../../node_modules/antlr4ts/atn/ATNDeserializer.js
var ATNDeserializer = __webpack_require__(6349);
// EXTERNAL MODULE: ../../node_modules/antlr4ts/Lexer.js
var Lexer = __webpack_require__(8170);
// EXTERNAL MODULE: ../../node_modules/antlr4ts/atn/LexerATNSimulator.js
var LexerATNSimulator = __webpack_require__(9796);
// EXTERNAL MODULE: ../../node_modules/antlr4ts/VocabularyImpl.js
var VocabularyImpl = __webpack_require__(1434);
// EXTERNAL MODULE: ../../node_modules/antlr4ts/misc/Utils.js
var Utils = __webpack_require__(3070);
;// CONCATENATED MODULE: ../../node_modules/dt-sql-parser/dist/lib/flinksql/FlinkSqlLexer.js
// Generated from dt-sql-parser/src/grammar/flinksql/FlinkSqlLexer.g4 by ANTLR 4.9.0-SNAPSHOT





class FlinkSqlLexer extends Lexer.Lexer {
    // @Override
    // @NotNull
    get vocabulary() {
        return FlinkSqlLexer.VOCABULARY;
    }
    // tslint:enable:no-trailing-whitespace
    constructor(input) {
        super(input);
        this._interp = new LexerATNSimulator.LexerATNSimulator(FlinkSqlLexer._ATN, this);
    }
    // @Override
    get grammarFileName() { return "FlinkSqlLexer.g4"; }
    // @Override
    get ruleNames() { return FlinkSqlLexer.ruleNames; }
    // @Override
    get serializedATN() { return FlinkSqlLexer._serializedATN; }
    // @Override
    get channelNames() { return FlinkSqlLexer.channelNames; }
    // @Override
    get modeNames() { return FlinkSqlLexer.modeNames; }
    static get _ATN() {
        if (!FlinkSqlLexer.__ATN) {
            FlinkSqlLexer.__ATN = new ATNDeserializer.ATNDeserializer().deserialize(Utils.toCharArray(FlinkSqlLexer._serializedATN));
        }
        return FlinkSqlLexer.__ATN;
    }
}
FlinkSqlLexer.SPACE = 1;
FlinkSqlLexer.COMMENT_INPUT = 2;
FlinkSqlLexer.LINE_COMMENT = 3;
FlinkSqlLexer.KW_ABS = 4;
FlinkSqlLexer.KW_ALL = 5;
FlinkSqlLexer.KW_ALLOCATE = 6;
FlinkSqlLexer.KW_ALLOW = 7;
FlinkSqlLexer.KW_ALTER = 8;
FlinkSqlLexer.KW_ANALYZE = 9;
FlinkSqlLexer.KW_AND = 10;
FlinkSqlLexer.KW_ANY = 11;
FlinkSqlLexer.KW_ARE = 12;
FlinkSqlLexer.KW_ARRAY = 13;
FlinkSqlLexer.KW_ARRAY_AGG = 14;
FlinkSqlLexer.KW_ARRAY_CONCAT_AGG = 15;
FlinkSqlLexer.KW_ARRAY_MAX_CARDINALITY = 16;
FlinkSqlLexer.KW_AS = 17;
FlinkSqlLexer.KW_ASENSITIVE = 18;
FlinkSqlLexer.KW_ASYMMETRIC = 19;
FlinkSqlLexer.KW_AT = 20;
FlinkSqlLexer.KW_ATOMIC = 21;
FlinkSqlLexer.KW_AUTHORIZATION = 22;
FlinkSqlLexer.KW_AVG = 23;
FlinkSqlLexer.KW_BEGIN = 24;
FlinkSqlLexer.KW_BEGIN_FRAME = 25;
FlinkSqlLexer.KW_BEGIN_PARTITION = 26;
FlinkSqlLexer.KW_BETWEEN = 27;
FlinkSqlLexer.KW_BIGINT = 28;
FlinkSqlLexer.KW_BINARY = 29;
FlinkSqlLexer.KW_BIT = 30;
FlinkSqlLexer.KW_BLOB = 31;
FlinkSqlLexer.KW_BOOLEAN = 32;
FlinkSqlLexer.KW_BOTH = 33;
FlinkSqlLexer.KW_BY = 34;
FlinkSqlLexer.KW_BYTES = 35;
FlinkSqlLexer.KW_CALL = 36;
FlinkSqlLexer.KW_CALLED = 37;
FlinkSqlLexer.KW_CARDINALITY = 38;
FlinkSqlLexer.KW_CASCADED = 39;
FlinkSqlLexer.KW_CASE = 40;
FlinkSqlLexer.KW_CAST = 41;
FlinkSqlLexer.KW_CATALOGS = 42;
FlinkSqlLexer.KW_CEIL = 43;
FlinkSqlLexer.KW_CEILING = 44;
FlinkSqlLexer.KW_CHANGELOG_MODE = 45;
FlinkSqlLexer.KW_CHAR = 46;
FlinkSqlLexer.KW_CHARACTER = 47;
FlinkSqlLexer.KW_CHARACTER_LENGTH = 48;
FlinkSqlLexer.KW_CHAR_LENGTH = 49;
FlinkSqlLexer.KW_CHECK = 50;
FlinkSqlLexer.KW_CLASSIFIER = 51;
FlinkSqlLexer.KW_CLOB = 52;
FlinkSqlLexer.KW_CLOSE = 53;
FlinkSqlLexer.KW_COALESCE = 54;
FlinkSqlLexer.KW_COLLATE = 55;
FlinkSqlLexer.KW_COLLECT = 56;
FlinkSqlLexer.KW_COLUMN = 57;
FlinkSqlLexer.KW_COLUMNS = 58;
FlinkSqlLexer.KW_COMMENT = 59;
FlinkSqlLexer.KW_COMMIT = 60;
FlinkSqlLexer.KW_COMPUTE = 61;
FlinkSqlLexer.KW_CONDITION = 62;
FlinkSqlLexer.KW_CONNECT = 63;
FlinkSqlLexer.KW_CONSTRAINT = 64;
FlinkSqlLexer.KW_CONTAINS = 65;
FlinkSqlLexer.KW_CONVERT = 66;
FlinkSqlLexer.KW_CORR = 67;
FlinkSqlLexer.KW_CORRESPONDING = 68;
FlinkSqlLexer.KW_COUNT = 69;
FlinkSqlLexer.KW_COVAR_POP = 70;
FlinkSqlLexer.KW_COVAR_SAMP = 71;
FlinkSqlLexer.KW_CREATE = 72;
FlinkSqlLexer.KW_CROSS = 73;
FlinkSqlLexer.KW_CUBE = 74;
FlinkSqlLexer.KW_CUME_DIST = 75;
FlinkSqlLexer.KW_CURRENT = 76;
FlinkSqlLexer.KW_CURRENT_CATALOG = 77;
FlinkSqlLexer.KW_CURRENT_DATE = 78;
FlinkSqlLexer.KW_CURRENT_DEFAULT_TRANSFORM_GROUP = 79;
FlinkSqlLexer.KW_CURRENT_PATH = 80;
FlinkSqlLexer.KW_CURRENT_ROLE = 81;
FlinkSqlLexer.KW_CURRENT_ROW = 82;
FlinkSqlLexer.KW_CURRENT_SCHEMA = 83;
FlinkSqlLexer.KW_CURRENT_TIME = 84;
FlinkSqlLexer.KW_CURRENT_TIMESTAMP = 85;
FlinkSqlLexer.KW_CURRENT_TRANSFORM_GROUP_FOR_TYPE = 86;
FlinkSqlLexer.KW_CURRENT_USER = 87;
FlinkSqlLexer.KW_CURSOR = 88;
FlinkSqlLexer.KW_CYCLE = 89;
FlinkSqlLexer.KW_DATABASES = 90;
FlinkSqlLexer.KW_DATE = 91;
FlinkSqlLexer.KW_DATETIME = 92;
FlinkSqlLexer.KW_DATETIME_DIFF = 93;
FlinkSqlLexer.KW_DATETIME_TRUNC = 94;
FlinkSqlLexer.KW_DATE_DIFF = 95;
FlinkSqlLexer.KW_DATE_TRUNC = 96;
FlinkSqlLexer.KW_DAY = 97;
FlinkSqlLexer.KW_DAYOFWEEK = 98;
FlinkSqlLexer.KW_DAYOFYEAR = 99;
FlinkSqlLexer.KW_DEALLOCATE = 100;
FlinkSqlLexer.KW_DEC = 101;
FlinkSqlLexer.KW_DECIMAL = 102;
FlinkSqlLexer.KW_DECLARE = 103;
FlinkSqlLexer.KW_DEFAULT = 104;
FlinkSqlLexer.KW_DEFINE = 105;
FlinkSqlLexer.KW_DELETE = 106;
FlinkSqlLexer.KW_DENSE_RANK = 107;
FlinkSqlLexer.KW_DEREF = 108;
FlinkSqlLexer.KW_DESCRIBE = 109;
FlinkSqlLexer.KW_DETERMINISTIC = 110;
FlinkSqlLexer.KW_DISALLOW = 111;
FlinkSqlLexer.KW_DISCONNECT = 112;
FlinkSqlLexer.KW_DISTINCT = 113;
FlinkSqlLexer.KW_DOT = 114;
FlinkSqlLexer.KW_DOUBLE = 115;
FlinkSqlLexer.KW_DROP = 116;
FlinkSqlLexer.KW_DYNAMIC = 117;
FlinkSqlLexer.KW_EACH = 118;
FlinkSqlLexer.KW_ELEMENT = 119;
FlinkSqlLexer.KW_ELSE = 120;
FlinkSqlLexer.KW_EMPTY = 121;
FlinkSqlLexer.KW_END = 122;
FlinkSqlLexer.KW_END_FRAME = 123;
FlinkSqlLexer.KW_END_PARTITION = 124;
FlinkSqlLexer.KW_ENFORCED = 125;
FlinkSqlLexer.KW_EQUALS = 126;
FlinkSqlLexer.KW_ESCAPE = 127;
FlinkSqlLexer.KW_ESTIMATED_COST = 128;
FlinkSqlLexer.KW_EVERY = 129;
FlinkSqlLexer.KW_EXCEPT = 130;
FlinkSqlLexer.KW_EXEC = 131;
FlinkSqlLexer.KW_EXECUTE = 132;
FlinkSqlLexer.KW_EXISTS = 133;
FlinkSqlLexer.KW_EXP = 134;
FlinkSqlLexer.KW_EXPLAIN = 135;
FlinkSqlLexer.KW_EXTEND = 136;
FlinkSqlLexer.KW_EXTENDED = 137;
FlinkSqlLexer.KW_EXTERNAL = 138;
FlinkSqlLexer.KW_EXTRACT = 139;
FlinkSqlLexer.KW_FALSE = 140;
FlinkSqlLexer.KW_FETCH = 141;
FlinkSqlLexer.KW_FILTER = 142;
FlinkSqlLexer.KW_FIRST_VALUE = 143;
FlinkSqlLexer.KW_FLOAT = 144;
FlinkSqlLexer.KW_FLOOR = 145;
FlinkSqlLexer.KW_FOR = 146;
FlinkSqlLexer.KW_FOREIGN = 147;
FlinkSqlLexer.KW_FRAME_ROW = 148;
FlinkSqlLexer.KW_FREE = 149;
FlinkSqlLexer.KW_FRIDAY = 150;
FlinkSqlLexer.KW_FROM = 151;
FlinkSqlLexer.KW_FULL = 152;
FlinkSqlLexer.KW_FUNCTION = 153;
FlinkSqlLexer.KW_FUNCTIONS = 154;
FlinkSqlLexer.KW_FUSION = 155;
FlinkSqlLexer.KW_GET = 156;
FlinkSqlLexer.KW_GLOBAL = 157;
FlinkSqlLexer.KW_GRANT = 158;
FlinkSqlLexer.KW_GROUP = 159;
FlinkSqlLexer.KW_GROUPING = 160;
FlinkSqlLexer.KW_GROUPS = 161;
FlinkSqlLexer.KW_GROUP_CONCAT = 162;
FlinkSqlLexer.KW_HAVING = 163;
FlinkSqlLexer.KW_HOLD = 164;
FlinkSqlLexer.KW_HOUR = 165;
FlinkSqlLexer.KW_IDENTITY = 166;
FlinkSqlLexer.KW_IF = 167;
FlinkSqlLexer.KW_ILIKE = 168;
FlinkSqlLexer.KW_IMPORT = 169;
FlinkSqlLexer.KW_IN = 170;
FlinkSqlLexer.KW_INCLUDE = 171;
FlinkSqlLexer.KW_INDICATOR = 172;
FlinkSqlLexer.KW_INITIAL = 173;
FlinkSqlLexer.KW_INNER = 174;
FlinkSqlLexer.KW_INOUT = 175;
FlinkSqlLexer.KW_INSENSITIVE = 176;
FlinkSqlLexer.KW_INSERT = 177;
FlinkSqlLexer.KW_INT = 178;
FlinkSqlLexer.KW_INTEGER = 179;
FlinkSqlLexer.KW_INTERSECT = 180;
FlinkSqlLexer.KW_INTERSECTION = 181;
FlinkSqlLexer.KW_INTERVAL = 182;
FlinkSqlLexer.KW_INTO = 183;
FlinkSqlLexer.KW_IS = 184;
FlinkSqlLexer.KW_JOIN = 185;
FlinkSqlLexer.KW_JSON_ARRAY = 186;
FlinkSqlLexer.KW_JSON_ARRAYAGG = 187;
FlinkSqlLexer.KW_JSON_EXECUTION_PLAN = 188;
FlinkSqlLexer.KW_JSON_EXISTS = 189;
FlinkSqlLexer.KW_JSON_OBJECT = 190;
FlinkSqlLexer.KW_JSON_OBJECTAGG = 191;
FlinkSqlLexer.KW_JSON_QUERY = 192;
FlinkSqlLexer.KW_JSON_VALUE = 193;
FlinkSqlLexer.KW_LAG = 194;
FlinkSqlLexer.KW_LANGUAGE = 195;
FlinkSqlLexer.KW_LARGE = 196;
FlinkSqlLexer.KW_LAST_VALUE = 197;
FlinkSqlLexer.KW_LATERAL = 198;
FlinkSqlLexer.KW_LEAD = 199;
FlinkSqlLexer.KW_LEADING = 200;
FlinkSqlLexer.KW_LEFT = 201;
FlinkSqlLexer.KW_LIKE = 202;
FlinkSqlLexer.KW_LIKE_REGEX = 203;
FlinkSqlLexer.KW_LIMIT = 204;
FlinkSqlLexer.KW_LN = 205;
FlinkSqlLexer.KW_LOCAL = 206;
FlinkSqlLexer.KW_LOCALTIME = 207;
FlinkSqlLexer.KW_LOCALTIMESTAMP = 208;
FlinkSqlLexer.KW_LOWER = 209;
FlinkSqlLexer.KW_MATCH = 210;
FlinkSqlLexer.KW_MATCHES = 211;
FlinkSqlLexer.KW_MATCH_NUMBER = 212;
FlinkSqlLexer.KW_MATCH_RECOGNIZE = 213;
FlinkSqlLexer.KW_MAX = 214;
FlinkSqlLexer.KW_MEASURES = 215;
FlinkSqlLexer.KW_MEMBER = 216;
FlinkSqlLexer.KW_MERGE = 217;
FlinkSqlLexer.KW_METADATA = 218;
FlinkSqlLexer.KW_METHOD = 219;
FlinkSqlLexer.KW_MIN = 220;
FlinkSqlLexer.KW_MINUS = 221;
FlinkSqlLexer.KW_MINUTE = 222;
FlinkSqlLexer.KW_MOD = 223;
FlinkSqlLexer.KW_MODIFIES = 224;
FlinkSqlLexer.KW_MODIFY = 225;
FlinkSqlLexer.KW_MODULE = 226;
FlinkSqlLexer.KW_MODULES = 227;
FlinkSqlLexer.KW_MONDAY = 228;
FlinkSqlLexer.KW_MONTH = 229;
FlinkSqlLexer.KW_MORE = 230;
FlinkSqlLexer.KW_MULTISET = 231;
FlinkSqlLexer.KW_NATIONAL = 232;
FlinkSqlLexer.KW_NATURAL = 233;
FlinkSqlLexer.KW_NCHAR = 234;
FlinkSqlLexer.KW_NCLOB = 235;
FlinkSqlLexer.KW_NEW = 236;
FlinkSqlLexer.KW_NEXT = 237;
FlinkSqlLexer.KW_NO = 238;
FlinkSqlLexer.KW_NONE = 239;
FlinkSqlLexer.KW_NORMALIZE = 240;
FlinkSqlLexer.KW_NOT = 241;
FlinkSqlLexer.KW_NTH_VALUE = 242;
FlinkSqlLexer.KW_NTILE = 243;
FlinkSqlLexer.KW_NULL = 244;
FlinkSqlLexer.KW_NULLIF = 245;
FlinkSqlLexer.KW_NUMERIC = 246;
FlinkSqlLexer.KW_OCCURRENCES_REGEX = 247;
FlinkSqlLexer.KW_OCTET_LENGTH = 248;
FlinkSqlLexer.KW_OF = 249;
FlinkSqlLexer.KW_OFFSET = 250;
FlinkSqlLexer.KW_OLD = 251;
FlinkSqlLexer.KW_OMIT = 252;
FlinkSqlLexer.KW_ON = 253;
FlinkSqlLexer.KW_ONE = 254;
FlinkSqlLexer.KW_ONLY = 255;
FlinkSqlLexer.KW_OPEN = 256;
FlinkSqlLexer.KW_OR = 257;
FlinkSqlLexer.KW_ORDER = 258;
FlinkSqlLexer.KW_ORDINAL = 259;
FlinkSqlLexer.KW_OUT = 260;
FlinkSqlLexer.KW_OUTER = 261;
FlinkSqlLexer.KW_OVER = 262;
FlinkSqlLexer.KW_OVERLAPS = 263;
FlinkSqlLexer.KW_OVERLAY = 264;
FlinkSqlLexer.KW_OVERWRITE = 265;
FlinkSqlLexer.KW_OVERWRITING = 266;
FlinkSqlLexer.KW_PARAMETER = 267;
FlinkSqlLexer.KW_PARTITION = 268;
FlinkSqlLexer.KW_PARTITIONED = 269;
FlinkSqlLexer.KW_PARTITIONS = 270;
FlinkSqlLexer.KW_PATTERN = 271;
FlinkSqlLexer.KW_PER = 272;
FlinkSqlLexer.KW_PERCENT = 273;
FlinkSqlLexer.KW_PERCENTILE_CONT = 274;
FlinkSqlLexer.KW_PERCENTILE_DISC = 275;
FlinkSqlLexer.KW_PERCENT_RANK = 276;
FlinkSqlLexer.KW_PERIOD = 277;
FlinkSqlLexer.KW_PERMUTE = 278;
FlinkSqlLexer.KW_PIVOT = 279;
FlinkSqlLexer.KW_PORTION = 280;
FlinkSqlLexer.KW_POSITION = 281;
FlinkSqlLexer.KW_POSITION_REGEX = 282;
FlinkSqlLexer.KW_POWER = 283;
FlinkSqlLexer.KW_PRECEDES = 284;
FlinkSqlLexer.KW_PRECISION = 285;
FlinkSqlLexer.KW_PREPARE = 286;
FlinkSqlLexer.KW_PREV = 287;
FlinkSqlLexer.KW_PRIMARY = 288;
FlinkSqlLexer.KW_PROCEDURE = 289;
FlinkSqlLexer.KW_QUALIFY = 290;
FlinkSqlLexer.KW_QUARTERS = 291;
FlinkSqlLexer.KW_RANGE = 292;
FlinkSqlLexer.KW_RANK = 293;
FlinkSqlLexer.KW_RAW = 294;
FlinkSqlLexer.KW_READS = 295;
FlinkSqlLexer.KW_REAL = 296;
FlinkSqlLexer.KW_RECURSIVE = 297;
FlinkSqlLexer.KW_REF = 298;
FlinkSqlLexer.KW_REFERENCES = 299;
FlinkSqlLexer.KW_REFERENCING = 300;
FlinkSqlLexer.KW_REGR_AVGX = 301;
FlinkSqlLexer.KW_REGR_AVGY = 302;
FlinkSqlLexer.KW_REGR_COUNT = 303;
FlinkSqlLexer.KW_REGR_INTERCEPT = 304;
FlinkSqlLexer.KW_REGR_R2 = 305;
FlinkSqlLexer.KW_REGR_SLOPE = 306;
FlinkSqlLexer.KW_REGR_SXX = 307;
FlinkSqlLexer.KW_REGR_SXY = 308;
FlinkSqlLexer.KW_REGR_SYY = 309;
FlinkSqlLexer.KW_RELEASE = 310;
FlinkSqlLexer.KW_RENAME = 311;
FlinkSqlLexer.KW_RESET = 312;
FlinkSqlLexer.KW_RESULT = 313;
FlinkSqlLexer.KW_RETURN = 314;
FlinkSqlLexer.KW_RETURNS = 315;
FlinkSqlLexer.KW_REVOKE = 316;
FlinkSqlLexer.KW_RIGHT = 317;
FlinkSqlLexer.KW_RLIKE = 318;
FlinkSqlLexer.KW_ROLLBACK = 319;
FlinkSqlLexer.KW_ROLLUP = 320;
FlinkSqlLexer.KW_ROW = 321;
FlinkSqlLexer.KW_ROWS = 322;
FlinkSqlLexer.KW_ROW_NUMBER = 323;
FlinkSqlLexer.KW_RUNNING = 324;
FlinkSqlLexer.KW_SAFE_CAST = 325;
FlinkSqlLexer.KW_SAFE_OFFSET = 326;
FlinkSqlLexer.KW_SAFE_ORDINAL = 327;
FlinkSqlLexer.KW_SATURDAY = 328;
FlinkSqlLexer.KW_SAVEPOINT = 329;
FlinkSqlLexer.KW_SCALA = 330;
FlinkSqlLexer.KW_SCOPE = 331;
FlinkSqlLexer.KW_SCROLL = 332;
FlinkSqlLexer.KW_SEARCH = 333;
FlinkSqlLexer.KW_SECOND = 334;
FlinkSqlLexer.KW_SEEK = 335;
FlinkSqlLexer.KW_SELECT = 336;
FlinkSqlLexer.KW_SENSITIVE = 337;
FlinkSqlLexer.KW_SEPARATOR = 338;
FlinkSqlLexer.KW_SESSION_USER = 339;
FlinkSqlLexer.KW_SET = 340;
FlinkSqlLexer.KW_SHOW = 341;
FlinkSqlLexer.KW_SIMILAR = 342;
FlinkSqlLexer.KW_SKIP = 343;
FlinkSqlLexer.KW_SMALLINT = 344;
FlinkSqlLexer.KW_SOME = 345;
FlinkSqlLexer.KW_SPECIFIC = 346;
FlinkSqlLexer.KW_SPECIFICTYPE = 347;
FlinkSqlLexer.KW_SQL = 348;
FlinkSqlLexer.KW_SQLEXCEPTION = 349;
FlinkSqlLexer.KW_SQLSTATE = 350;
FlinkSqlLexer.KW_SQLWARNING = 351;
FlinkSqlLexer.KW_SQRT = 352;
FlinkSqlLexer.KW_START = 353;
FlinkSqlLexer.KW_STATEMENT = 354;
FlinkSqlLexer.KW_STATIC = 355;
FlinkSqlLexer.KW_STATISTICS = 356;
FlinkSqlLexer.KW_STDDEV_POP = 357;
FlinkSqlLexer.KW_STDDEV_SAMP = 358;
FlinkSqlLexer.KW_STREAM = 359;
FlinkSqlLexer.KW_STRING = 360;
FlinkSqlLexer.KW_STRING_AGG = 361;
FlinkSqlLexer.KW_SUBMULTISET = 362;
FlinkSqlLexer.KW_SUBSET = 363;
FlinkSqlLexer.KW_SUBSTRING = 364;
FlinkSqlLexer.KW_SUBSTRING_REGEX = 365;
FlinkSqlLexer.KW_SUCCEEDS = 366;
FlinkSqlLexer.KW_SUM = 367;
FlinkSqlLexer.KW_SUNDAY = 368;
FlinkSqlLexer.KW_SYMMETRIC = 369;
FlinkSqlLexer.KW_SYSTEM = 370;
FlinkSqlLexer.KW_SYSTEM_TIME = 371;
FlinkSqlLexer.KW_SYSTEM_USER = 372;
FlinkSqlLexer.KW_TABLE = 373;
FlinkSqlLexer.KW_TABLES = 374;
FlinkSqlLexer.KW_TABLESAMPLE = 375;
FlinkSqlLexer.KW_THEN = 376;
FlinkSqlLexer.KW_THURSDAY = 377;
FlinkSqlLexer.KW_TIME = 378;
FlinkSqlLexer.KW_TIMESTAMP = 379;
FlinkSqlLexer.KW_TIMESTAMP_DIFF = 380;
FlinkSqlLexer.KW_TIMESTAMP_LTZ = 381;
FlinkSqlLexer.KW_TIMESTAMP_TRUNC = 382;
FlinkSqlLexer.KW_TIMEZONE_HOUR = 383;
FlinkSqlLexer.KW_TIMEZONE_MINUTE = 384;
FlinkSqlLexer.KW_TIME_DIFF = 385;
FlinkSqlLexer.KW_TIME_TRUNC = 386;
FlinkSqlLexer.KW_TINYINT = 387;
FlinkSqlLexer.KW_TO = 388;
FlinkSqlLexer.KW_TRAILING = 389;
FlinkSqlLexer.KW_TRANSLATE = 390;
FlinkSqlLexer.KW_TRANSLATE_REGEX = 391;
FlinkSqlLexer.KW_TRANSLATION = 392;
FlinkSqlLexer.KW_TREAT = 393;
FlinkSqlLexer.KW_TRIGGER = 394;
FlinkSqlLexer.KW_TRIM = 395;
FlinkSqlLexer.KW_TRIM_ARRAY = 396;
FlinkSqlLexer.KW_TRUE = 397;
FlinkSqlLexer.KW_TRUNCATE = 398;
FlinkSqlLexer.KW_TRY_CAST = 399;
FlinkSqlLexer.KW_TUESDAY = 400;
FlinkSqlLexer.KW_UESCAPE = 401;
FlinkSqlLexer.KW_UNION = 402;
FlinkSqlLexer.KW_UNIQUE = 403;
FlinkSqlLexer.KW_UNKNOWN = 404;
FlinkSqlLexer.KW_UNNEST = 405;
FlinkSqlLexer.KW_UNPIVOT = 406;
FlinkSqlLexer.KW_UPDATE = 407;
FlinkSqlLexer.KW_UPPER = 408;
FlinkSqlLexer.KW_UPSERT = 409;
FlinkSqlLexer.KW_USE = 410;
FlinkSqlLexer.KW_USER = 411;
FlinkSqlLexer.KW_USING = 412;
FlinkSqlLexer.KW_VALUE = 413;
FlinkSqlLexer.KW_VALUES = 414;
FlinkSqlLexer.KW_VALUE_OF = 415;
FlinkSqlLexer.KW_VARBINARY = 416;
FlinkSqlLexer.KW_VARCHAR = 417;
FlinkSqlLexer.KW_VARYING = 418;
FlinkSqlLexer.KW_VAR_POP = 419;
FlinkSqlLexer.KW_VAR_SAMP = 420;
FlinkSqlLexer.KW_VERSIONING = 421;
FlinkSqlLexer.KW_VIEWS = 422;
FlinkSqlLexer.KW_VIRTUAL = 423;
FlinkSqlLexer.KW_WATERMARK = 424;
FlinkSqlLexer.KW_WATERMARKS = 425;
FlinkSqlLexer.KW_WEDNESDAY = 426;
FlinkSqlLexer.KW_WEEKS = 427;
FlinkSqlLexer.KW_WHEN = 428;
FlinkSqlLexer.KW_WHENEVER = 429;
FlinkSqlLexer.KW_WHERE = 430;
FlinkSqlLexer.KW_WIDTH_BUCKET = 431;
FlinkSqlLexer.KW_WINDOW = 432;
FlinkSqlLexer.KW_WITH = 433;
FlinkSqlLexer.KW_WITHIN = 434;
FlinkSqlLexer.KW_WITHOUT = 435;
FlinkSqlLexer.KW_YEAR = 436;
FlinkSqlLexer.KW_ADD = 437;
FlinkSqlLexer.KW_AFTER = 438;
FlinkSqlLexer.KW_ASC = 439;
FlinkSqlLexer.KW_CASCADE = 440;
FlinkSqlLexer.KW_CATALOG = 441;
FlinkSqlLexer.KW_CENTURY = 442;
FlinkSqlLexer.KW_CONFIG = 443;
FlinkSqlLexer.KW_CONSTRAINTS = 444;
FlinkSqlLexer.KW_CUMULATE = 445;
FlinkSqlLexer.KW_DATA = 446;
FlinkSqlLexer.KW_DATABASE = 447;
FlinkSqlLexer.KW_DAYS = 448;
FlinkSqlLexer.KW_DECADE = 449;
FlinkSqlLexer.KW_DESC = 450;
FlinkSqlLexer.KW_DESCRIPTOR = 451;
FlinkSqlLexer.KW_DIV = 452;
FlinkSqlLexer.KW_ENGINE = 453;
FlinkSqlLexer.KW_EPOCH = 454;
FlinkSqlLexer.KW_EXCLUDING = 455;
FlinkSqlLexer.KW_FILE = 456;
FlinkSqlLexer.KW_FIRST = 457;
FlinkSqlLexer.KW_GENERATED = 458;
FlinkSqlLexer.KW_HOP = 459;
FlinkSqlLexer.KW_HOURS = 460;
FlinkSqlLexer.KW_IGNORE = 461;
FlinkSqlLexer.KW_INCLUDING = 462;
FlinkSqlLexer.KW_JAR = 463;
FlinkSqlLexer.KW_JARS = 464;
FlinkSqlLexer.KW_JAVA = 465;
FlinkSqlLexer.KW_KEY = 466;
FlinkSqlLexer.KW_LAST = 467;
FlinkSqlLexer.KW_LOAD = 468;
FlinkSqlLexer.KW_MAP = 469;
FlinkSqlLexer.KW_MICROSECOND = 470;
FlinkSqlLexer.KW_MILLENNIUM = 471;
FlinkSqlLexer.KW_MILLISECOND = 472;
FlinkSqlLexer.KW_MINUTES = 473;
FlinkSqlLexer.KW_MONTHS = 474;
FlinkSqlLexer.KW_NANOSECOND = 475;
FlinkSqlLexer.KW_NULLS = 476;
FlinkSqlLexer.KW_OPTIONS = 477;
FlinkSqlLexer.KW_PAST = 478;
FlinkSqlLexer.KW_PLAN = 479;
FlinkSqlLexer.KW_PRECEDING = 480;
FlinkSqlLexer.KW_PYTHON = 481;
FlinkSqlLexer.KW_PYTHON_ARCHIVES = 482;
FlinkSqlLexer.KW_PYTHON_DEPENDENCIES = 483;
FlinkSqlLexer.KW_PYTHON_FILES = 484;
FlinkSqlLexer.KW_PYTHON_JAR = 485;
FlinkSqlLexer.KW_PYTHON_PARAMETER = 486;
FlinkSqlLexer.KW_PYTHON_REQUIREMENTS = 487;
FlinkSqlLexer.KW_QUARTER = 488;
FlinkSqlLexer.KW_REMOVE = 489;
FlinkSqlLexer.KW_RESTRICT = 490;
FlinkSqlLexer.KW_SECONDS = 491;
FlinkSqlLexer.KW_SESSION = 492;
FlinkSqlLexer.KW_SETS = 493;
FlinkSqlLexer.KW_SIZE = 494;
FlinkSqlLexer.KW_SLIDE = 495;
FlinkSqlLexer.KW_STEP = 496;
FlinkSqlLexer.KW_TEMPORARY = 497;
FlinkSqlLexer.KW_TIMECOL = 498;
FlinkSqlLexer.KW_TUMBLE = 499;
FlinkSqlLexer.KW_UNLOAD = 500;
FlinkSqlLexer.KW_VIEW = 501;
FlinkSqlLexer.KW_WEEK = 502;
FlinkSqlLexer.KW_YEARS = 503;
FlinkSqlLexer.KW_ZONE = 504;
FlinkSqlLexer.EQUAL_SYMBOL = 505;
FlinkSqlLexer.GREATER_SYMBOL = 506;
FlinkSqlLexer.LESS_SYMBOL = 507;
FlinkSqlLexer.EXCLAMATION_SYMBOL = 508;
FlinkSqlLexer.BIT_NOT_OP = 509;
FlinkSqlLexer.BIT_OR_OP = 510;
FlinkSqlLexer.BIT_AND_OP = 511;
FlinkSqlLexer.BIT_XOR_OP = 512;
FlinkSqlLexer.DOT = 513;
FlinkSqlLexer.LS_BRACKET = 514;
FlinkSqlLexer.RS_BRACKET = 515;
FlinkSqlLexer.LR_BRACKET = 516;
FlinkSqlLexer.RR_BRACKET = 517;
FlinkSqlLexer.LB_BRACKET = 518;
FlinkSqlLexer.RB_BRACKET = 519;
FlinkSqlLexer.COMMA = 520;
FlinkSqlLexer.SEMICOLON = 521;
FlinkSqlLexer.AT_SIGN = 522;
FlinkSqlLexer.SINGLE_QUOTE_SYMB = 523;
FlinkSqlLexer.DOUBLE_QUOTE_SYMB = 524;
FlinkSqlLexer.REVERSE_QUOTE_SYMB = 525;
FlinkSqlLexer.COLON_SYMB = 526;
FlinkSqlLexer.ASTERISK_SIGN = 527;
FlinkSqlLexer.UNDERLINE_SIGN = 528;
FlinkSqlLexer.HYPNEN_SIGN = 529;
FlinkSqlLexer.ADD_SIGN = 530;
FlinkSqlLexer.PENCENT_SIGN = 531;
FlinkSqlLexer.DOUBLE_VERTICAL_SIGN = 532;
FlinkSqlLexer.DOUBLE_HYPNEN_SIGN = 533;
FlinkSqlLexer.SLASH_SIGN = 534;
FlinkSqlLexer.QUESTION_MARK_SIGN = 535;
FlinkSqlLexer.DOUBLE_RIGHT_ARROW = 536;
FlinkSqlLexer.STRING_LITERAL = 537;
FlinkSqlLexer.DIG_LITERAL = 538;
FlinkSqlLexer.REAL_LITERAL = 539;
FlinkSqlLexer.BIT_STRING = 540;
FlinkSqlLexer.ID_LITERAL = 541;
// tslint:disable:no-trailing-whitespace
FlinkSqlLexer.channelNames = [
    "DEFAULT_TOKEN_CHANNEL", "HIDDEN",
];
// tslint:disable:no-trailing-whitespace
FlinkSqlLexer.modeNames = [
    "DEFAULT_MODE",
];
FlinkSqlLexer.ruleNames = [
    "SPACE", "COMMENT_INPUT", "LINE_COMMENT", "KW_ABS", "KW_ALL", "KW_ALLOCATE",
    "KW_ALLOW", "KW_ALTER", "KW_ANALYZE", "KW_AND", "KW_ANY", "KW_ARE", "KW_ARRAY",
    "KW_ARRAY_AGG", "KW_ARRAY_CONCAT_AGG", "KW_ARRAY_MAX_CARDINALITY", "KW_AS",
    "KW_ASENSITIVE", "KW_ASYMMETRIC", "KW_AT", "KW_ATOMIC", "KW_AUTHORIZATION",
    "KW_AVG", "KW_BEGIN", "KW_BEGIN_FRAME", "KW_BEGIN_PARTITION", "KW_BETWEEN",
    "KW_BIGINT", "KW_BINARY", "KW_BIT", "KW_BLOB", "KW_BOOLEAN", "KW_BOTH",
    "KW_BY", "KW_BYTES", "KW_CALL", "KW_CALLED", "KW_CARDINALITY", "KW_CASCADED",
    "KW_CASE", "KW_CAST", "KW_CATALOGS", "KW_CEIL", "KW_CEILING", "KW_CHANGELOG_MODE",
    "KW_CHAR", "KW_CHARACTER", "KW_CHARACTER_LENGTH", "KW_CHAR_LENGTH", "KW_CHECK",
    "KW_CLASSIFIER", "KW_CLOB", "KW_CLOSE", "KW_COALESCE", "KW_COLLATE", "KW_COLLECT",
    "KW_COLUMN", "KW_COLUMNS", "KW_COMMENT", "KW_COMMIT", "KW_COMPUTE", "KW_CONDITION",
    "KW_CONNECT", "KW_CONSTRAINT", "KW_CONTAINS", "KW_CONVERT", "KW_CORR",
    "KW_CORRESPONDING", "KW_COUNT", "KW_COVAR_POP", "KW_COVAR_SAMP", "KW_CREATE",
    "KW_CROSS", "KW_CUBE", "KW_CUME_DIST", "KW_CURRENT", "KW_CURRENT_CATALOG",
    "KW_CURRENT_DATE", "KW_CURRENT_DEFAULT_TRANSFORM_GROUP", "KW_CURRENT_PATH",
    "KW_CURRENT_ROLE", "KW_CURRENT_ROW", "KW_CURRENT_SCHEMA", "KW_CURRENT_TIME",
    "KW_CURRENT_TIMESTAMP", "KW_CURRENT_TRANSFORM_GROUP_FOR_TYPE", "KW_CURRENT_USER",
    "KW_CURSOR", "KW_CYCLE", "KW_DATABASES", "KW_DATE", "KW_DATETIME", "KW_DATETIME_DIFF",
    "KW_DATETIME_TRUNC", "KW_DATE_DIFF", "KW_DATE_TRUNC", "KW_DAY", "KW_DAYOFWEEK",
    "KW_DAYOFYEAR", "KW_DEALLOCATE", "KW_DEC", "KW_DECIMAL", "KW_DECLARE",
    "KW_DEFAULT", "KW_DEFINE", "KW_DELETE", "KW_DENSE_RANK", "KW_DEREF", "KW_DESCRIBE",
    "KW_DETERMINISTIC", "KW_DISALLOW", "KW_DISCONNECT", "KW_DISTINCT", "KW_DOT",
    "KW_DOUBLE", "KW_DROP", "KW_DYNAMIC", "KW_EACH", "KW_ELEMENT", "KW_ELSE",
    "KW_EMPTY", "KW_END", "KW_END_FRAME", "KW_END_PARTITION", "KW_ENFORCED",
    "KW_EQUALS", "KW_ESCAPE", "KW_ESTIMATED_COST", "KW_EVERY", "KW_EXCEPT",
    "KW_EXEC", "KW_EXECUTE", "KW_EXISTS", "KW_EXP", "KW_EXPLAIN", "KW_EXTEND",
    "KW_EXTENDED", "KW_EXTERNAL", "KW_EXTRACT", "KW_FALSE", "KW_FETCH", "KW_FILTER",
    "KW_FIRST_VALUE", "KW_FLOAT", "KW_FLOOR", "KW_FOR", "KW_FOREIGN", "KW_FRAME_ROW",
    "KW_FREE", "KW_FRIDAY", "KW_FROM", "KW_FULL", "KW_FUNCTION", "KW_FUNCTIONS",
    "KW_FUSION", "KW_GET", "KW_GLOBAL", "KW_GRANT", "KW_GROUP", "KW_GROUPING",
    "KW_GROUPS", "KW_GROUP_CONCAT", "KW_HAVING", "KW_HOLD", "KW_HOUR", "KW_IDENTITY",
    "KW_IF", "KW_ILIKE", "KW_IMPORT", "KW_IN", "KW_INCLUDE", "KW_INDICATOR",
    "KW_INITIAL", "KW_INNER", "KW_INOUT", "KW_INSENSITIVE", "KW_INSERT", "KW_INT",
    "KW_INTEGER", "KW_INTERSECT", "KW_INTERSECTION", "KW_INTERVAL", "KW_INTO",
    "KW_IS", "KW_JOIN", "KW_JSON_ARRAY", "KW_JSON_ARRAYAGG", "KW_JSON_EXECUTION_PLAN",
    "KW_JSON_EXISTS", "KW_JSON_OBJECT", "KW_JSON_OBJECTAGG", "KW_JSON_QUERY",
    "KW_JSON_VALUE", "KW_LAG", "KW_LANGUAGE", "KW_LARGE", "KW_LAST_VALUE",
    "KW_LATERAL", "KW_LEAD", "KW_LEADING", "KW_LEFT", "KW_LIKE", "KW_LIKE_REGEX",
    "KW_LIMIT", "KW_LN", "KW_LOCAL", "KW_LOCALTIME", "KW_LOCALTIMESTAMP",
    "KW_LOWER", "KW_MATCH", "KW_MATCHES", "KW_MATCH_NUMBER", "KW_MATCH_RECOGNIZE",
    "KW_MAX", "KW_MEASURES", "KW_MEMBER", "KW_MERGE", "KW_METADATA", "KW_METHOD",
    "KW_MIN", "KW_MINUS", "KW_MINUTE", "KW_MOD", "KW_MODIFIES", "KW_MODIFY",
    "KW_MODULE", "KW_MODULES", "KW_MONDAY", "KW_MONTH", "KW_MORE", "KW_MULTISET",
    "KW_NATIONAL", "KW_NATURAL", "KW_NCHAR", "KW_NCLOB", "KW_NEW", "KW_NEXT",
    "KW_NO", "KW_NONE", "KW_NORMALIZE", "KW_NOT", "KW_NTH_VALUE", "KW_NTILE",
    "KW_NULL", "KW_NULLIF", "KW_NUMERIC", "KW_OCCURRENCES_REGEX", "KW_OCTET_LENGTH",
    "KW_OF", "KW_OFFSET", "KW_OLD", "KW_OMIT", "KW_ON", "KW_ONE", "KW_ONLY",
    "KW_OPEN", "KW_OR", "KW_ORDER", "KW_ORDINAL", "KW_OUT", "KW_OUTER", "KW_OVER",
    "KW_OVERLAPS", "KW_OVERLAY", "KW_OVERWRITE", "KW_OVERWRITING", "KW_PARAMETER",
    "KW_PARTITION", "KW_PARTITIONED", "KW_PARTITIONS", "KW_PATTERN", "KW_PER",
    "KW_PERCENT", "KW_PERCENTILE_CONT", "KW_PERCENTILE_DISC", "KW_PERCENT_RANK",
    "KW_PERIOD", "KW_PERMUTE", "KW_PIVOT", "KW_PORTION", "KW_POSITION", "KW_POSITION_REGEX",
    "KW_POWER", "KW_PRECEDES", "KW_PRECISION", "KW_PREPARE", "KW_PREV", "KW_PRIMARY",
    "KW_PROCEDURE", "KW_QUALIFY", "KW_QUARTERS", "KW_RANGE", "KW_RANK", "KW_RAW",
    "KW_READS", "KW_REAL", "KW_RECURSIVE", "KW_REF", "KW_REFERENCES", "KW_REFERENCING",
    "KW_REGR_AVGX", "KW_REGR_AVGY", "KW_REGR_COUNT", "KW_REGR_INTERCEPT",
    "KW_REGR_R2", "KW_REGR_SLOPE", "KW_REGR_SXX", "KW_REGR_SXY", "KW_REGR_SYY",
    "KW_RELEASE", "KW_RENAME", "KW_RESET", "KW_RESULT", "KW_RETURN", "KW_RETURNS",
    "KW_REVOKE", "KW_RIGHT", "KW_RLIKE", "KW_ROLLBACK", "KW_ROLLUP", "KW_ROW",
    "KW_ROWS", "KW_ROW_NUMBER", "KW_RUNNING", "KW_SAFE_CAST", "KW_SAFE_OFFSET",
    "KW_SAFE_ORDINAL", "KW_SATURDAY", "KW_SAVEPOINT", "KW_SCALA", "KW_SCOPE",
    "KW_SCROLL", "KW_SEARCH", "KW_SECOND", "KW_SEEK", "KW_SELECT", "KW_SENSITIVE",
    "KW_SEPARATOR", "KW_SESSION_USER", "KW_SET", "KW_SHOW", "KW_SIMILAR",
    "KW_SKIP", "KW_SMALLINT", "KW_SOME", "KW_SPECIFIC", "KW_SPECIFICTYPE",
    "KW_SQL", "KW_SQLEXCEPTION", "KW_SQLSTATE", "KW_SQLWARNING", "KW_SQRT",
    "KW_START", "KW_STATEMENT", "KW_STATIC", "KW_STATISTICS", "KW_STDDEV_POP",
    "KW_STDDEV_SAMP", "KW_STREAM", "KW_STRING", "KW_STRING_AGG", "KW_SUBMULTISET",
    "KW_SUBSET", "KW_SUBSTRING", "KW_SUBSTRING_REGEX", "KW_SUCCEEDS", "KW_SUM",
    "KW_SUNDAY", "KW_SYMMETRIC", "KW_SYSTEM", "KW_SYSTEM_TIME", "KW_SYSTEM_USER",
    "KW_TABLE", "KW_TABLES", "KW_TABLESAMPLE", "KW_THEN", "KW_THURSDAY", "KW_TIME",
    "KW_TIMESTAMP", "KW_TIMESTAMP_DIFF", "KW_TIMESTAMP_LTZ", "KW_TIMESTAMP_TRUNC",
    "KW_TIMEZONE_HOUR", "KW_TIMEZONE_MINUTE", "KW_TIME_DIFF", "KW_TIME_TRUNC",
    "KW_TINYINT", "KW_TO", "KW_TRAILING", "KW_TRANSLATE", "KW_TRANSLATE_REGEX",
    "KW_TRANSLATION", "KW_TREAT", "KW_TRIGGER", "KW_TRIM", "KW_TRIM_ARRAY",
    "KW_TRUE", "KW_TRUNCATE", "KW_TRY_CAST", "KW_TUESDAY", "KW_UESCAPE", "KW_UNION",
    "KW_UNIQUE", "KW_UNKNOWN", "KW_UNNEST", "KW_UNPIVOT", "KW_UPDATE", "KW_UPPER",
    "KW_UPSERT", "KW_USE", "KW_USER", "KW_USING", "KW_VALUE", "KW_VALUES",
    "KW_VALUE_OF", "KW_VARBINARY", "KW_VARCHAR", "KW_VARYING", "KW_VAR_POP",
    "KW_VAR_SAMP", "KW_VERSIONING", "KW_VIEWS", "KW_VIRTUAL", "KW_WATERMARK",
    "KW_WATERMARKS", "KW_WEDNESDAY", "KW_WEEKS", "KW_WHEN", "KW_WHENEVER",
    "KW_WHERE", "KW_WIDTH_BUCKET", "KW_WINDOW", "KW_WITH", "KW_WITHIN", "KW_WITHOUT",
    "KW_YEAR", "KW_ADD", "KW_AFTER", "KW_ASC", "KW_CASCADE", "KW_CATALOG",
    "KW_CENTURY", "KW_CONFIG", "KW_CONSTRAINTS", "KW_CUMULATE", "KW_DATA",
    "KW_DATABASE", "KW_DAYS", "KW_DECADE", "KW_DESC", "KW_DESCRIPTOR", "KW_DIV",
    "KW_ENGINE", "KW_EPOCH", "KW_EXCLUDING", "KW_FILE", "KW_FIRST", "KW_GENERATED",
    "KW_HOP", "KW_HOURS", "KW_IGNORE", "KW_INCLUDING", "KW_JAR", "KW_JARS",
    "KW_JAVA", "KW_KEY", "KW_LAST", "KW_LOAD", "KW_MAP", "KW_MICROSECOND",
    "KW_MILLENNIUM", "KW_MILLISECOND", "KW_MINUTES", "KW_MONTHS", "KW_NANOSECOND",
    "KW_NULLS", "KW_OPTIONS", "KW_PAST", "KW_PLAN", "KW_PRECEDING", "KW_PYTHON",
    "KW_PYTHON_ARCHIVES", "KW_PYTHON_DEPENDENCIES", "KW_PYTHON_FILES", "KW_PYTHON_JAR",
    "KW_PYTHON_PARAMETER", "KW_PYTHON_REQUIREMENTS", "KW_QUARTER", "KW_REMOVE",
    "KW_RESTRICT", "KW_SECONDS", "KW_SESSION", "KW_SETS", "KW_SIZE", "KW_SLIDE",
    "KW_STEP", "KW_TEMPORARY", "KW_TIMECOL", "KW_TUMBLE", "KW_UNLOAD", "KW_VIEW",
    "KW_WEEK", "KW_YEARS", "KW_ZONE", "EQUAL_SYMBOL", "GREATER_SYMBOL", "LESS_SYMBOL",
    "EXCLAMATION_SYMBOL", "BIT_NOT_OP", "BIT_OR_OP", "BIT_AND_OP", "BIT_XOR_OP",
    "DOT", "LS_BRACKET", "RS_BRACKET", "LR_BRACKET", "RR_BRACKET", "LB_BRACKET",
    "RB_BRACKET", "COMMA", "SEMICOLON", "AT_SIGN", "SINGLE_QUOTE_SYMB", "DOUBLE_QUOTE_SYMB",
    "REVERSE_QUOTE_SYMB", "COLON_SYMB", "ASTERISK_SIGN", "UNDERLINE_SIGN",
    "HYPNEN_SIGN", "ADD_SIGN", "PENCENT_SIGN", "DOUBLE_VERTICAL_SIGN", "DOUBLE_HYPNEN_SIGN",
    "SLASH_SIGN", "QUESTION_MARK_SIGN", "DOUBLE_RIGHT_ARROW", "STRING_LITERAL",
    "DIG_LITERAL", "REAL_LITERAL", "BIT_STRING", "ID_LITERAL", "JAR_FILE_PARTTARN",
    "EXPONENT_NUM_PART", "ID_LITERAL_FRAG", "DEC_DIGIT", "DEC_LETTER", "DQUOTA_STRING",
    "SQUOTA_STRING", "BIT_STRING_L", "BQUOTA_STRING",
];
FlinkSqlLexer._LITERAL_NAMES = [
    undefined, undefined, undefined, undefined, "'ABS'", "'ALL'", "'ALLOCATE'",
    "'ALLOW'", "'ALTER'", "'ANALYZE'", "'AND'", "'ANY'", "'ARE'", "'ARRAY'",
    "'ARRAY_AGG'", "'ARRAY_CONCAT_AGG'", "'ARRAY_MAX_CARDINALITY'", "'AS'",
    "'ASENSITIVE'", "'ASYMMETRIC'", "'AT'", "'ATOMIC'", "'AUTHORIZATION'",
    "'AVG'", "'BEGIN'", "'BEGIN_FRAME'", "'BEGIN_PARTITION'", "'BETWEEN'",
    "'BIGINT'", "'BINARY'", "'BIT'", "'BLOB'", "'BOOLEAN'", "'BOTH'", "'BY'",
    "'BYTES'", "'CALL'", "'CALLED'", "'CARDINALITY'", "'CASCADED'", "'CASE'",
    "'CAST'", "'CATALOGS'", "'CEIL'", "'CEILING'", "'CHANGELOG_MODE'", "'CHAR'",
    "'CHARACTER'", "'CHARACTER_LENGTH'", "'CHAR_LENGTH'", "'CHECK'", "'CLASSIFIER'",
    "'CLOB'", "'CLOSE'", "'COALESCE'", "'COLLATE'", "'COLLECT'", "'COLUMN'",
    "'COLUMNS'", "'COMMENT'", "'COMMIT'", "'COMPUTE'", "'CONDITION'", "'CONNECT'",
    "'CONSTRAINT'", "'CONTAINS'", "'CONVERT'", "'CORR'", "'CORRESPONDING'",
    "'COUNT'", "'COVAR_POP'", "'COVAR_SAMP'", "'CREATE'", "'CROSS'", "'CUBE'",
    "'CUME_DIST'", "'CURRENT'", "'CURRENT_CATALOG'", "'CURRENT_DATE'", "'CURRENT_DEFAULT_TRANSFORM_GROUP'",
    "'CURRENT_PATH'", "'CURRENT_ROLE'", "'CURRENT_ROW'", "'CURRENT_SCHEMA'",
    "'CURRENT_TIME'", "'CURRENT_TIMESTAMP'", "'CURRENT_TRANSFORM_GROUP_FOR_TYPE'",
    "'CURRENT_USER'", "'CURSOR'", "'CYCLE'", "'DATABASES'", "'DATE'", "'DATETIME'",
    "'DATETIME_DIFF'", "'DATETIME_TRUNC'", "'DATE_DIFF'", "'DATE_TRUNC'",
    "'DAY'", "'DAYOFWEEK'", "'DAYOFYEAR'", "'DEALLOCATE'", "'DEC'", "'DECIMAL'",
    "'DECLARE'", "'DEFAULT'", "'DEFINE'", "'DELETE'", "'DENSE_RANK'", "'DEREF'",
    "'DESCRIBE'", "'DETERMINISTIC'", "'DISALLOW'", "'DISCONNECT'", "'DISTINCT'",
    "'DOT'", "'DOUBLE'", "'DROP'", "'DYNAMIC'", "'EACH'", "'ELEMENT'", "'ELSE'",
    "'EMPTY'", "'END'", "'END_FRAME'", "'END_PARTITION'", "'ENFORCED'", "'EQUALS'",
    "'ESCAPE'", "'ESTIMATED_COST'", "'EVERY'", "'EXCEPT'", "'EXEC'", "'EXECUTE'",
    "'EXISTS'", "'EXP'", "'EXPLAIN'", "'EXTEND'", "'EXTENDED'", "'EXTERNAL'",
    "'EXTRACT'", "'FALSE'", "'FETCH'", "'FILTER'", "'FIRST_VALUE'", "'FLOAT'",
    "'FLOOR'", "'FOR'", "'FOREIGN'", "'FRAME_ROW'", "'FREE'", "'FRIDAY'",
    "'FROM'", "'FULL'", "'FUNCTION'", "'FUNCTIONS'", "'FUSION'", "'GET'",
    "'GLOBAL'", "'GRANT'", "'GROUP'", "'GROUPING'", "'GROUPS'", "'GROUP_CONCAT'",
    "'HAVING'", "'HOLD'", "'HOUR'", "'IDENTITY'", "'IF'", "'ILIKE'", "'IMPORT'",
    "'IN'", "'INCLUDE'", "'INDICATOR'", "'INITIAL'", "'INNER'", "'INOUT'",
    "'INSENSITIVE'", "'INSERT'", "'INT'", "'INTEGER'", "'INTERSECT'", "'INTERSECTION'",
    "'INTERVAL'", "'INTO'", "'IS'", "'JOIN'", "'JSON_ARRAY'", "'JSON_ARRAYAGG'",
    "'JSON_EXECUTION_PLAN'", "'JSON_EXISTS'", "'JSON_OBJECT'", "'JSON_OBJECTAGG'",
    "'JSON_QUERY'", "'JSON_VALUE'", "'LAG'", "'LANGUAGE'", "'LARGE'", "'LAST_VALUE'",
    "'LATERAL'", "'LEAD'", "'LEADING'", "'LEFT'", "'LIKE'", "'LIKE_REGEX'",
    "'LIMIT'", "'LN'", "'LOCAL'", "'LOCALTIME'", "'LOCALTIMESTAMP'", "'LOWER'",
    "'MATCH'", "'MATCHES'", "'MATCH_NUMBER'", "'MATCH_RECOGNIZE'", "'MAX'",
    "'MEASURES'", "'MEMBER'", "'MERGE'", "'METADATA'", "'METHOD'", "'MIN'",
    "'MINUS'", "'MINUTE'", "'MOD'", "'MODIFIES'", "'MODIFY'", "'MODULE'",
    "'MODULES'", "'MONDAY'", "'MONTH'", "'MORE'", "'MULTISET'", "'NATIONAL'",
    "'NATURAL'", "'NCHAR'", "'NCLOB'", "'NEW'", "'NEXT'", "'NO'", "'NONE'",
    "'NORMALIZE'", "'NOT'", "'NTH_VALUE'", "'NTILE'", "'NULL'", "'NULLIF'",
    "'NUMERIC'", "'OCCURRENCES_REGEX'", "'OCTET_LENGTH'", "'OF'", "'OFFSET'",
    "'OLD'", "'OMIT'", "'ON'", "'ONE'", "'ONLY'", "'OPEN'", "'OR'", "'ORDER'",
    "'ORDINAL'", "'OUT'", "'OUTER'", "'OVER'", "'OVERLAPS'", "'OVERLAY'",
    "'OVERWRITE'", "'OVERWRITING'", "'PARAMETER'", "'PARTITION'", "'PARTITIONED'",
    "'PARTITIONS'", "'PATTERN'", "'PER'", "'PERCENT'", "'PERCENTILE_CONT'",
    "'PERCENTILE_DISC'", "'PERCENT_RANK'", "'PERIOD'", "'PERMUTE'", "'PIVOT'",
    "'PORTION'", "'POSITION'", "'POSITION_REGEX'", "'POWER'", "'PRECEDES'",
    "'PRECISION'", "'PREPARE'", "'PREV'", "'PRIMARY'", "'PROCEDURE'", "'QUALIFY'",
    "'QUARTERS'", "'RANGE'", "'RANK'", "'RAW'", "'READS'", "'REAL'", "'RECURSIVE'",
    "'REF'", "'REFERENCES'", "'REFERENCING'", "'REGR_AVGX'", "'REGR_AVGY'",
    "'REGR_COUNT'", "'REGR_INTERCEPT'", "'REGR_R2'", "'REGR_SLOPE'", "'REGR_SXX'",
    "'REGR_SXY'", "'REGR_SYY'", "'RELEASE'", "'RENAME'", "'RESET'", "'RESULT'",
    "'RETURN'", "'RETURNS'", "'REVOKE'", "'RIGHT'", "'RLIKE'", "'ROLLBACK'",
    "'ROLLUP'", "'ROW'", "'ROWS'", "'ROW_NUMBER'", "'RUNNING'", "'SAFE_CAST'",
    "'SAFE_OFFSET'", "'SAFE_ORDINAL'", "'SATURDAY'", "'SAVEPOINT'", "'SCALA'",
    "'SCOPE'", "'SCROLL'", "'SEARCH'", "'SECOND'", "'SEEK'", "'SELECT'", "'SENSITIVE'",
    "'SEPARATOR'", "'SESSION_USER'", "'SET'", "'SHOW'", "'SIMILAR'", "'SKIP'",
    "'SMALLINT'", "'SOME'", "'SPECIFIC'", "'SPECIFICTYPE'", "'SQL'", "'SQLEXCEPTION'",
    "'SQLSTATE'", "'SQLWARNING'", "'SQRT'", "'START'", "'STATEMENT'", "'STATIC'",
    "'STATISTICS'", "'STDDEV_POP'", "'STDDEV_SAMP'", "'STREAM'", "'STRING'",
    "'STRING_AGG'", "'SUBMULTISET'", "'SUBSET'", "'SUBSTRING'", "'SUBSTRING_REGEX'",
    "'SUCCEEDS'", "'SUM'", "'SUNDAY'", "'SYMMETRIC'", "'SYSTEM'", "'SYSTEM_TIME'",
    "'SYSTEM_USER'", "'TABLE'", "'TABLES'", "'TABLESAMPLE'", "'THEN'", "'THURSDAY'",
    "'TIME'", "'TIMESTAMP'", "'TIMESTAMP_DIFF'", "'TIMESTAMP_LTZ'", "'TIMESTAMP_TRUNC'",
    "'TIMEZONE_HOUR'", "'TIMEZONE_MINUTE'", "'TIME_DIFF'", "'TIME_TRUNC'",
    "'TINYINT'", "'TO'", "'TRAILING'", "'TRANSLATE'", "'TRANSLATE_REGEX'",
    "'TRANSLATION'", "'TREAT'", "'TRIGGER'", "'TRIM'", "'TRIM_ARRAY'", "'TRUE'",
    "'TRUNCATE'", "'TRY_CAST'", "'TUESDAY'", "'UESCAPE'", "'UNION'", "'UNIQUE'",
    "'UNKNOWN'", "'UNNEST'", "'UNPIVOT'", "'UPDATE'", "'UPPER'", "'UPSERT'",
    "'USE'", "'USER'", "'USING'", "'VALUE'", "'VALUES'", "'VALUE_OF'", "'VARBINARY'",
    "'VARCHAR'", "'VARYING'", "'VAR_POP'", "'VAR_SAMP'", "'VERSIONING'", "'VIEWS'",
    "'VIRTUAL'", "'WATERMARK'", "'WATERMARKS'", "'WEDNESDAY'", "'WEEKS'",
    "'WHEN'", "'WHENEVER'", "'WHERE'", "'WIDTH_BUCKET'", "'WINDOW'", "'WITH'",
    "'WITHIN'", "'WITHOUT'", "'YEAR'", "'ADD'", "'AFTER'", "'ASC'", "'CASCADE'",
    "'CATALOG'", "'CENTURY'", "'CONFIG'", "'CONSTRAINTS'", "'CUMULATE'", "'DATA'",
    "'DATABASE'", "'DAYS'", "'DECADE'", "'DESC'", "'DESCRIPTOR'", "'DIV'",
    "'ENGINE'", "'EPOCH'", "'EXCLUDING'", "'FILE'", "'FIRST'", "'GENERATED'",
    "'HOP'", "'HOURS'", "'IGNORE'", "'INCLUDING'", "'JAR'", "'JARS'", "'JAVA'",
    "'KEY'", "'LAST'", "'LOAD'", "'MAP'", "'MICROSECOND'", "'MILLENNIUM'",
    "'MILLISECOND'", "'MINUTES'", "'MONTHS'", "'NANOSECOND'", "'NULLS'", "'OPTIONS'",
    "'PAST'", "'PLAN'", "'PRECEDING'", "'PYTHON'", "'PYTHON_ARCHIVES'", "'PYTHON_DEPENDENCIES'",
    "'PYTHON_FILES'", "'PYTHON_JAR'", "'PYTHON_PARAMETER'", "'PYTHON_REQUIREMENTS'",
    "'QUARTER'", "'REMOVE'", "'RESTRICT'", "'SECONDS'", "'SESSION'", "'SETS'",
    "'SIZE'", "'SLIDE'", "'STEP'", "'TEMPORARY'", "'TIMECOL'", "'TUMBLE'",
    "'UNLOAD'", "'VIEW'", "'WEEK'", "'YEARS'", "'ZONE'", "'='", "'>'", "'<'",
    "'!'", "'~'", "'|'", "'&'", "'^'", "'.'", "'['", "']'", "'('", "')'",
    "'{'", "'}'", "','", "';'", "'@'", "'''", "'\"'", "'`'", "':'", "'*'",
    "'_'", "'-'", "'+'", "'%'", "'||'", "'--'", "'/'", "'?'", "'=>'",
];
FlinkSqlLexer._SYMBOLIC_NAMES = [
    undefined, "SPACE", "COMMENT_INPUT", "LINE_COMMENT", "KW_ABS", "KW_ALL",
    "KW_ALLOCATE", "KW_ALLOW", "KW_ALTER", "KW_ANALYZE", "KW_AND", "KW_ANY",
    "KW_ARE", "KW_ARRAY", "KW_ARRAY_AGG", "KW_ARRAY_CONCAT_AGG", "KW_ARRAY_MAX_CARDINALITY",
    "KW_AS", "KW_ASENSITIVE", "KW_ASYMMETRIC", "KW_AT", "KW_ATOMIC", "KW_AUTHORIZATION",
    "KW_AVG", "KW_BEGIN", "KW_BEGIN_FRAME", "KW_BEGIN_PARTITION", "KW_BETWEEN",
    "KW_BIGINT", "KW_BINARY", "KW_BIT", "KW_BLOB", "KW_BOOLEAN", "KW_BOTH",
    "KW_BY", "KW_BYTES", "KW_CALL", "KW_CALLED", "KW_CARDINALITY", "KW_CASCADED",
    "KW_CASE", "KW_CAST", "KW_CATALOGS", "KW_CEIL", "KW_CEILING", "KW_CHANGELOG_MODE",
    "KW_CHAR", "KW_CHARACTER", "KW_CHARACTER_LENGTH", "KW_CHAR_LENGTH", "KW_CHECK",
    "KW_CLASSIFIER", "KW_CLOB", "KW_CLOSE", "KW_COALESCE", "KW_COLLATE", "KW_COLLECT",
    "KW_COLUMN", "KW_COLUMNS", "KW_COMMENT", "KW_COMMIT", "KW_COMPUTE", "KW_CONDITION",
    "KW_CONNECT", "KW_CONSTRAINT", "KW_CONTAINS", "KW_CONVERT", "KW_CORR",
    "KW_CORRESPONDING", "KW_COUNT", "KW_COVAR_POP", "KW_COVAR_SAMP", "KW_CREATE",
    "KW_CROSS", "KW_CUBE", "KW_CUME_DIST", "KW_CURRENT", "KW_CURRENT_CATALOG",
    "KW_CURRENT_DATE", "KW_CURRENT_DEFAULT_TRANSFORM_GROUP", "KW_CURRENT_PATH",
    "KW_CURRENT_ROLE", "KW_CURRENT_ROW", "KW_CURRENT_SCHEMA", "KW_CURRENT_TIME",
    "KW_CURRENT_TIMESTAMP", "KW_CURRENT_TRANSFORM_GROUP_FOR_TYPE", "KW_CURRENT_USER",
    "KW_CURSOR", "KW_CYCLE", "KW_DATABASES", "KW_DATE", "KW_DATETIME", "KW_DATETIME_DIFF",
    "KW_DATETIME_TRUNC", "KW_DATE_DIFF", "KW_DATE_TRUNC", "KW_DAY", "KW_DAYOFWEEK",
    "KW_DAYOFYEAR", "KW_DEALLOCATE", "KW_DEC", "KW_DECIMAL", "KW_DECLARE",
    "KW_DEFAULT", "KW_DEFINE", "KW_DELETE", "KW_DENSE_RANK", "KW_DEREF", "KW_DESCRIBE",
    "KW_DETERMINISTIC", "KW_DISALLOW", "KW_DISCONNECT", "KW_DISTINCT", "KW_DOT",
    "KW_DOUBLE", "KW_DROP", "KW_DYNAMIC", "KW_EACH", "KW_ELEMENT", "KW_ELSE",
    "KW_EMPTY", "KW_END", "KW_END_FRAME", "KW_END_PARTITION", "KW_ENFORCED",
    "KW_EQUALS", "KW_ESCAPE", "KW_ESTIMATED_COST", "KW_EVERY", "KW_EXCEPT",
    "KW_EXEC", "KW_EXECUTE", "KW_EXISTS", "KW_EXP", "KW_EXPLAIN", "KW_EXTEND",
    "KW_EXTENDED", "KW_EXTERNAL", "KW_EXTRACT", "KW_FALSE", "KW_FETCH", "KW_FILTER",
    "KW_FIRST_VALUE", "KW_FLOAT", "KW_FLOOR", "KW_FOR", "KW_FOREIGN", "KW_FRAME_ROW",
    "KW_FREE", "KW_FRIDAY", "KW_FROM", "KW_FULL", "KW_FUNCTION", "KW_FUNCTIONS",
    "KW_FUSION", "KW_GET", "KW_GLOBAL", "KW_GRANT", "KW_GROUP", "KW_GROUPING",
    "KW_GROUPS", "KW_GROUP_CONCAT", "KW_HAVING", "KW_HOLD", "KW_HOUR", "KW_IDENTITY",
    "KW_IF", "KW_ILIKE", "KW_IMPORT", "KW_IN", "KW_INCLUDE", "KW_INDICATOR",
    "KW_INITIAL", "KW_INNER", "KW_INOUT", "KW_INSENSITIVE", "KW_INSERT", "KW_INT",
    "KW_INTEGER", "KW_INTERSECT", "KW_INTERSECTION", "KW_INTERVAL", "KW_INTO",
    "KW_IS", "KW_JOIN", "KW_JSON_ARRAY", "KW_JSON_ARRAYAGG", "KW_JSON_EXECUTION_PLAN",
    "KW_JSON_EXISTS", "KW_JSON_OBJECT", "KW_JSON_OBJECTAGG", "KW_JSON_QUERY",
    "KW_JSON_VALUE", "KW_LAG", "KW_LANGUAGE", "KW_LARGE", "KW_LAST_VALUE",
    "KW_LATERAL", "KW_LEAD", "KW_LEADING", "KW_LEFT", "KW_LIKE", "KW_LIKE_REGEX",
    "KW_LIMIT", "KW_LN", "KW_LOCAL", "KW_LOCALTIME", "KW_LOCALTIMESTAMP",
    "KW_LOWER", "KW_MATCH", "KW_MATCHES", "KW_MATCH_NUMBER", "KW_MATCH_RECOGNIZE",
    "KW_MAX", "KW_MEASURES", "KW_MEMBER", "KW_MERGE", "KW_METADATA", "KW_METHOD",
    "KW_MIN", "KW_MINUS", "KW_MINUTE", "KW_MOD", "KW_MODIFIES", "KW_MODIFY",
    "KW_MODULE", "KW_MODULES", "KW_MONDAY", "KW_MONTH", "KW_MORE", "KW_MULTISET",
    "KW_NATIONAL", "KW_NATURAL", "KW_NCHAR", "KW_NCLOB", "KW_NEW", "KW_NEXT",
    "KW_NO", "KW_NONE", "KW_NORMALIZE", "KW_NOT", "KW_NTH_VALUE", "KW_NTILE",
    "KW_NULL", "KW_NULLIF", "KW_NUMERIC", "KW_OCCURRENCES_REGEX", "KW_OCTET_LENGTH",
    "KW_OF", "KW_OFFSET", "KW_OLD", "KW_OMIT", "KW_ON", "KW_ONE", "KW_ONLY",
    "KW_OPEN", "KW_OR", "KW_ORDER", "KW_ORDINAL", "KW_OUT", "KW_OUTER", "KW_OVER",
    "KW_OVERLAPS", "KW_OVERLAY", "KW_OVERWRITE", "KW_OVERWRITING", "KW_PARAMETER",
    "KW_PARTITION", "KW_PARTITIONED", "KW_PARTITIONS", "KW_PATTERN", "KW_PER",
    "KW_PERCENT", "KW_PERCENTILE_CONT", "KW_PERCENTILE_DISC", "KW_PERCENT_RANK",
    "KW_PERIOD", "KW_PERMUTE", "KW_PIVOT", "KW_PORTION", "KW_POSITION", "KW_POSITION_REGEX",
    "KW_POWER", "KW_PRECEDES", "KW_PRECISION", "KW_PREPARE", "KW_PREV", "KW_PRIMARY",
    "KW_PROCEDURE", "KW_QUALIFY", "KW_QUARTERS", "KW_RANGE", "KW_RANK", "KW_RAW",
    "KW_READS", "KW_REAL", "KW_RECURSIVE", "KW_REF", "KW_REFERENCES", "KW_REFERENCING",
    "KW_REGR_AVGX", "KW_REGR_AVGY", "KW_REGR_COUNT", "KW_REGR_INTERCEPT",
    "KW_REGR_R2", "KW_REGR_SLOPE", "KW_REGR_SXX", "KW_REGR_SXY", "KW_REGR_SYY",
    "KW_RELEASE", "KW_RENAME", "KW_RESET", "KW_RESULT", "KW_RETURN", "KW_RETURNS",
    "KW_REVOKE", "KW_RIGHT", "KW_RLIKE", "KW_ROLLBACK", "KW_ROLLUP", "KW_ROW",
    "KW_ROWS", "KW_ROW_NUMBER", "KW_RUNNING", "KW_SAFE_CAST", "KW_SAFE_OFFSET",
    "KW_SAFE_ORDINAL", "KW_SATURDAY", "KW_SAVEPOINT", "KW_SCALA", "KW_SCOPE",
    "KW_SCROLL", "KW_SEARCH", "KW_SECOND", "KW_SEEK", "KW_SELECT", "KW_SENSITIVE",
    "KW_SEPARATOR", "KW_SESSION_USER", "KW_SET", "KW_SHOW", "KW_SIMILAR",
    "KW_SKIP", "KW_SMALLINT", "KW_SOME", "KW_SPECIFIC", "KW_SPECIFICTYPE",
    "KW_SQL", "KW_SQLEXCEPTION", "KW_SQLSTATE", "KW_SQLWARNING", "KW_SQRT",
    "KW_START", "KW_STATEMENT", "KW_STATIC", "KW_STATISTICS", "KW_STDDEV_POP",
    "KW_STDDEV_SAMP", "KW_STREAM", "KW_STRING", "KW_STRING_AGG", "KW_SUBMULTISET",
    "KW_SUBSET", "KW_SUBSTRING", "KW_SUBSTRING_REGEX", "KW_SUCCEEDS", "KW_SUM",
    "KW_SUNDAY", "KW_SYMMETRIC", "KW_SYSTEM", "KW_SYSTEM_TIME", "KW_SYSTEM_USER",
    "KW_TABLE", "KW_TABLES", "KW_TABLESAMPLE", "KW_THEN", "KW_THURSDAY", "KW_TIME",
    "KW_TIMESTAMP", "KW_TIMESTAMP_DIFF", "KW_TIMESTAMP_LTZ", "KW_TIMESTAMP_TRUNC",
    "KW_TIMEZONE_HOUR", "KW_TIMEZONE_MINUTE", "KW_TIME_DIFF", "KW_TIME_TRUNC",
    "KW_TINYINT", "KW_TO", "KW_TRAILING", "KW_TRANSLATE", "KW_TRANSLATE_REGEX",
    "KW_TRANSLATION", "KW_TREAT", "KW_TRIGGER", "KW_TRIM", "KW_TRIM_ARRAY",
    "KW_TRUE", "KW_TRUNCATE", "KW_TRY_CAST", "KW_TUESDAY", "KW_UESCAPE", "KW_UNION",
    "KW_UNIQUE", "KW_UNKNOWN", "KW_UNNEST", "KW_UNPIVOT", "KW_UPDATE", "KW_UPPER",
    "KW_UPSERT", "KW_USE", "KW_USER", "KW_USING", "KW_VALUE", "KW_VALUES",
    "KW_VALUE_OF", "KW_VARBINARY", "KW_VARCHAR", "KW_VARYING", "KW_VAR_POP",
    "KW_VAR_SAMP", "KW_VERSIONING", "KW_VIEWS", "KW_VIRTUAL", "KW_WATERMARK",
    "KW_WATERMARKS", "KW_WEDNESDAY", "KW_WEEKS", "KW_WHEN", "KW_WHENEVER",
    "KW_WHERE", "KW_WIDTH_BUCKET", "KW_WINDOW", "KW_WITH", "KW_WITHIN", "KW_WITHOUT",
    "KW_YEAR", "KW_ADD", "KW_AFTER", "KW_ASC", "KW_CASCADE", "KW_CATALOG",
    "KW_CENTURY", "KW_CONFIG", "KW_CONSTRAINTS", "KW_CUMULATE", "KW_DATA",
    "KW_DATABASE", "KW_DAYS", "KW_DECADE", "KW_DESC", "KW_DESCRIPTOR", "KW_DIV",
    "KW_ENGINE", "KW_EPOCH", "KW_EXCLUDING", "KW_FILE", "KW_FIRST", "KW_GENERATED",
    "KW_HOP", "KW_HOURS", "KW_IGNORE", "KW_INCLUDING", "KW_JAR", "KW_JARS",
    "KW_JAVA", "KW_KEY", "KW_LAST", "KW_LOAD", "KW_MAP", "KW_MICROSECOND",
    "KW_MILLENNIUM", "KW_MILLISECOND", "KW_MINUTES", "KW_MONTHS", "KW_NANOSECOND",
    "KW_NULLS", "KW_OPTIONS", "KW_PAST", "KW_PLAN", "KW_PRECEDING", "KW_PYTHON",
    "KW_PYTHON_ARCHIVES", "KW_PYTHON_DEPENDENCIES", "KW_PYTHON_FILES", "KW_PYTHON_JAR",
    "KW_PYTHON_PARAMETER", "KW_PYTHON_REQUIREMENTS", "KW_QUARTER", "KW_REMOVE",
    "KW_RESTRICT", "KW_SECONDS", "KW_SESSION", "KW_SETS", "KW_SIZE", "KW_SLIDE",
    "KW_STEP", "KW_TEMPORARY", "KW_TIMECOL", "KW_TUMBLE", "KW_UNLOAD", "KW_VIEW",
    "KW_WEEK", "KW_YEARS", "KW_ZONE", "EQUAL_SYMBOL", "GREATER_SYMBOL", "LESS_SYMBOL",
    "EXCLAMATION_SYMBOL", "BIT_NOT_OP", "BIT_OR_OP", "BIT_AND_OP", "BIT_XOR_OP",
    "DOT", "LS_BRACKET", "RS_BRACKET", "LR_BRACKET", "RR_BRACKET", "LB_BRACKET",
    "RB_BRACKET", "COMMA", "SEMICOLON", "AT_SIGN", "SINGLE_QUOTE_SYMB", "DOUBLE_QUOTE_SYMB",
    "REVERSE_QUOTE_SYMB", "COLON_SYMB", "ASTERISK_SIGN", "UNDERLINE_SIGN",
    "HYPNEN_SIGN", "ADD_SIGN", "PENCENT_SIGN", "DOUBLE_VERTICAL_SIGN", "DOUBLE_HYPNEN_SIGN",
    "SLASH_SIGN", "QUESTION_MARK_SIGN", "DOUBLE_RIGHT_ARROW", "STRING_LITERAL",
    "DIG_LITERAL", "REAL_LITERAL", "BIT_STRING", "ID_LITERAL",
];
FlinkSqlLexer.VOCABULARY = new VocabularyImpl.VocabularyImpl(FlinkSqlLexer._LITERAL_NAMES, FlinkSqlLexer._SYMBOLIC_NAMES, []);
FlinkSqlLexer._serializedATNSegments = 10;
FlinkSqlLexer._serializedATNSegment0 = "\x03\uC91D\uCABA\u058D\uAFBA\u4F53\u0607\uEA8B\uC241\x02\u021F\u1581\b" +
    "\x01\x04\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t" +
    "\x06\x04\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f\t\f\x04" +
    "\r\t\r\x04\x0E\t\x0E\x04\x0F\t\x0F\x04\x10\t\x10\x04\x11\t\x11\x04\x12" +
    "\t\x12\x04\x13\t\x13\x04\x14\t\x14\x04\x15\t\x15\x04\x16\t\x16\x04\x17" +
    "\t\x17\x04\x18\t\x18\x04\x19\t\x19\x04\x1A\t\x1A\x04\x1B\t\x1B\x04\x1C" +
    "\t\x1C\x04\x1D\t\x1D\x04\x1E\t\x1E\x04\x1F\t\x1F\x04 \t \x04!\t!\x04\"" +
    "\t\"\x04#\t#\x04$\t$\x04%\t%\x04&\t&\x04\'\t\'\x04(\t(\x04)\t)\x04*\t" +
    "*\x04+\t+\x04,\t,\x04-\t-\x04.\t.\x04/\t/\x040\t0\x041\t1\x042\t2\x04" +
    "3\t3\x044\t4\x045\t5\x046\t6\x047\t7\x048\t8\x049\t9\x04:\t:\x04;\t;\x04" +
    "<\t<\x04=\t=\x04>\t>\x04?\t?\x04@\t@\x04A\tA\x04B\tB\x04C\tC\x04D\tD\x04" +
    "E\tE\x04F\tF\x04G\tG\x04H\tH\x04I\tI\x04J\tJ\x04K\tK\x04L\tL\x04M\tM\x04" +
    "N\tN\x04O\tO\x04P\tP\x04Q\tQ\x04R\tR\x04S\tS\x04T\tT\x04U\tU\x04V\tV\x04" +
    "W\tW\x04X\tX\x04Y\tY\x04Z\tZ\x04[\t[\x04\\\t\\\x04]\t]\x04^\t^\x04_\t" +
    "_\x04`\t`\x04a\ta\x04b\tb\x04c\tc\x04d\td\x04e\te\x04f\tf\x04g\tg\x04" +
    "h\th\x04i\ti\x04j\tj\x04k\tk\x04l\tl\x04m\tm\x04n\tn\x04o\to\x04p\tp\x04" +
    "q\tq\x04r\tr\x04s\ts\x04t\tt\x04u\tu\x04v\tv\x04w\tw\x04x\tx\x04y\ty\x04" +
    "z\tz\x04{\t{\x04|\t|\x04}\t}\x04~\t~\x04\x7F\t\x7F\x04\x80\t\x80\x04\x81" +
    "\t\x81\x04\x82\t\x82\x04\x83\t\x83\x04\x84\t\x84\x04\x85\t\x85\x04\x86" +
    "\t\x86\x04\x87\t\x87\x04\x88\t\x88\x04\x89\t\x89\x04\x8A\t\x8A\x04\x8B" +
    "\t\x8B\x04\x8C\t\x8C\x04\x8D\t\x8D\x04\x8E\t\x8E\x04\x8F\t\x8F\x04\x90" +
    "\t\x90\x04\x91\t\x91\x04\x92\t\x92\x04\x93\t\x93\x04\x94\t\x94\x04\x95" +
    "\t\x95\x04\x96\t\x96\x04\x97\t\x97\x04\x98\t\x98\x04\x99\t\x99\x04\x9A" +
    "\t\x9A\x04\x9B\t\x9B\x04\x9C\t\x9C\x04\x9D\t\x9D\x04\x9E\t\x9E\x04\x9F" +
    "\t\x9F\x04\xA0\t\xA0\x04\xA1\t\xA1\x04\xA2\t\xA2\x04\xA3\t\xA3\x04\xA4" +
    "\t\xA4\x04\xA5\t\xA5\x04\xA6\t\xA6\x04\xA7\t\xA7\x04\xA8\t\xA8\x04\xA9" +
    "\t\xA9\x04\xAA\t\xAA\x04\xAB\t\xAB\x04\xAC\t\xAC\x04\xAD\t\xAD\x04\xAE" +
    "\t\xAE\x04\xAF\t\xAF\x04\xB0\t\xB0\x04\xB1\t\xB1\x04\xB2\t\xB2\x04\xB3" +
    "\t\xB3\x04\xB4\t\xB4\x04\xB5\t\xB5\x04\xB6\t\xB6\x04\xB7\t\xB7\x04\xB8" +
    "\t\xB8\x04\xB9\t\xB9\x04\xBA\t\xBA\x04\xBB\t\xBB\x04\xBC\t\xBC\x04\xBD" +
    "\t\xBD\x04\xBE\t\xBE\x04\xBF\t\xBF\x04\xC0\t\xC0\x04\xC1\t\xC1\x04\xC2" +
    "\t\xC2\x04\xC3\t\xC3\x04\xC4\t\xC4\x04\xC5\t\xC5\x04\xC6\t\xC6\x04\xC7" +
    "\t\xC7\x04\xC8\t\xC8\x04\xC9\t\xC9\x04\xCA\t\xCA\x04\xCB\t\xCB\x04\xCC" +
    "\t\xCC\x04\xCD\t\xCD\x04\xCE\t\xCE\x04\xCF\t\xCF\x04\xD0\t\xD0\x04\xD1" +
    "\t\xD1\x04\xD2\t\xD2\x04\xD3\t\xD3\x04\xD4\t\xD4\x04\xD5\t\xD5\x04\xD6" +
    "\t\xD6\x04\xD7\t\xD7\x04\xD8\t\xD8\x04\xD9\t\xD9\x04\xDA\t\xDA\x04\xDB" +
    "\t\xDB\x04\xDC\t\xDC\x04\xDD\t\xDD\x04\xDE\t\xDE\x04\xDF\t\xDF\x04\xE0" +
    "\t\xE0\x04\xE1\t\xE1\x04\xE2\t\xE2\x04\xE3\t\xE3\x04\xE4\t\xE4\x04\xE5" +
    "\t\xE5\x04\xE6\t\xE6\x04\xE7\t\xE7\x04\xE8\t\xE8\x04\xE9\t\xE9\x04\xEA" +
    "\t\xEA\x04\xEB\t\xEB\x04\xEC\t\xEC\x04\xED\t\xED\x04\xEE\t\xEE\x04\xEF" +
    "\t\xEF\x04\xF0\t\xF0\x04\xF1\t\xF1\x04\xF2\t\xF2\x04\xF3\t\xF3\x04\xF4" +
    "\t\xF4\x04\xF5\t\xF5\x04\xF6\t\xF6\x04\xF7\t\xF7\x04\xF8\t\xF8\x04\xF9" +
    "\t\xF9\x04\xFA\t\xFA\x04\xFB\t\xFB\x04\xFC\t\xFC\x04\xFD\t\xFD\x04\xFE" +
    "\t\xFE\x04\xFF\t\xFF\x04\u0100\t\u0100\x04\u0101\t\u0101\x04\u0102\t\u0102" +
    "\x04\u0103\t\u0103\x04\u0104\t\u0104\x04\u0105\t\u0105\x04\u0106\t\u0106" +
    "\x04\u0107\t\u0107\x04\u0108\t\u0108\x04\u0109\t\u0109\x04\u010A\t\u010A" +
    "\x04\u010B\t\u010B\x04\u010C\t\u010C\x04\u010D\t\u010D\x04\u010E\t\u010E" +
    "\x04\u010F\t\u010F\x04\u0110\t\u0110\x04\u0111\t\u0111\x04\u0112\t\u0112" +
    "\x04\u0113\t\u0113\x04\u0114\t\u0114\x04\u0115\t\u0115\x04\u0116\t\u0116" +
    "\x04\u0117\t\u0117\x04\u0118\t\u0118\x04\u0119\t\u0119\x04\u011A\t\u011A" +
    "\x04\u011B\t\u011B\x04\u011C\t\u011C\x04\u011D\t\u011D\x04\u011E\t\u011E" +
    "\x04\u011F\t\u011F\x04\u0120\t\u0120\x04\u0121\t\u0121\x04\u0122\t\u0122" +
    "\x04\u0123\t\u0123\x04\u0124\t\u0124\x04\u0125\t\u0125\x04\u0126\t\u0126" +
    "\x04\u0127\t\u0127\x04\u0128\t\u0128\x04\u0129\t\u0129\x04\u012A\t\u012A" +
    "\x04\u012B\t\u012B\x04\u012C\t\u012C\x04\u012D\t\u012D\x04\u012E\t\u012E" +
    "\x04\u012F\t\u012F\x04\u0130\t\u0130\x04\u0131\t\u0131\x04\u0132\t\u0132" +
    "\x04\u0133\t\u0133\x04\u0134\t\u0134\x04\u0135\t\u0135\x04\u0136\t\u0136" +
    "\x04\u0137\t\u0137\x04\u0138\t\u0138\x04\u0139\t\u0139\x04\u013A\t\u013A" +
    "\x04\u013B\t\u013B\x04\u013C\t\u013C\x04\u013D\t\u013D\x04\u013E\t\u013E" +
    "\x04\u013F\t\u013F\x04\u0140\t\u0140\x04\u0141\t\u0141\x04\u0142\t\u0142" +
    "\x04\u0143\t\u0143\x04\u0144\t\u0144\x04\u0145\t\u0145\x04\u0146\t\u0146" +
    "\x04\u0147\t\u0147\x04\u0148\t\u0148\x04\u0149\t\u0149\x04\u014A\t\u014A" +
    "\x04\u014B\t\u014B\x04\u014C\t\u014C\x04\u014D\t\u014D\x04\u014E\t\u014E" +
    "\x04\u014F\t\u014F\x04\u0150\t\u0150\x04\u0151\t\u0151\x04\u0152\t\u0152" +
    "\x04\u0153\t\u0153\x04\u0154\t\u0154\x04\u0155\t\u0155\x04\u0156\t\u0156" +
    "\x04\u0157\t\u0157\x04\u0158\t\u0158\x04\u0159\t\u0159\x04\u015A\t\u015A" +
    "\x04\u015B\t\u015B\x04\u015C\t\u015C\x04\u015D\t\u015D\x04\u015E\t\u015E" +
    "\x04\u015F\t\u015F\x04\u0160\t\u0160\x04\u0161\t\u0161\x04\u0162\t\u0162" +
    "\x04\u0163\t\u0163\x04\u0164\t\u0164\x04\u0165\t\u0165\x04\u0166\t\u0166" +
    "\x04\u0167\t\u0167\x04\u0168\t\u0168\x04\u0169\t\u0169\x04\u016A\t\u016A" +
    "\x04\u016B\t\u016B\x04\u016C\t\u016C\x04\u016D\t\u016D\x04\u016E\t\u016E" +
    "\x04\u016F\t\u016F\x04\u0170\t\u0170\x04\u0171\t\u0171\x04\u0172\t\u0172" +
    "\x04\u0173\t\u0173\x04\u0174\t\u0174\x04\u0175\t\u0175\x04\u0176\t\u0176" +
    "\x04\u0177\t\u0177\x04\u0178\t\u0178\x04\u0179\t\u0179\x04\u017A\t\u017A" +
    "\x04\u017B\t\u017B\x04\u017C\t\u017C\x04\u017D\t\u017D\x04\u017E\t\u017E" +
    "\x04\u017F\t\u017F\x04\u0180\t\u0180\x04\u0181\t\u0181\x04\u0182\t\u0182" +
    "\x04\u0183\t\u0183\x04\u0184\t\u0184\x04\u0185\t\u0185\x04\u0186\t\u0186" +
    "\x04\u0187\t\u0187\x04\u0188\t\u0188\x04\u0189\t\u0189\x04\u018A\t\u018A" +
    "\x04\u018B\t\u018B\x04\u018C\t\u018C\x04\u018D\t\u018D\x04\u018E\t\u018E" +
    "\x04\u018F\t\u018F\x04\u0190\t\u0190\x04\u0191\t\u0191\x04\u0192\t\u0192" +
    "\x04\u0193\t\u0193\x04\u0194\t\u0194\x04\u0195\t\u0195\x04\u0196\t\u0196" +
    "\x04\u0197\t\u0197\x04\u0198\t\u0198\x04\u0199\t\u0199\x04\u019A\t\u019A" +
    "\x04\u019B\t\u019B\x04\u019C\t\u019C\x04\u019D\t\u019D\x04\u019E\t\u019E" +
    "\x04\u019F\t\u019F\x04\u01A0\t\u01A0\x04\u01A1\t\u01A1\x04\u01A2\t\u01A2" +
    "\x04\u01A3\t\u01A3\x04\u01A4\t\u01A4\x04\u01A5\t\u01A5\x04\u01A6\t\u01A6" +
    "\x04\u01A7\t\u01A7\x04\u01A8\t\u01A8\x04\u01A9\t\u01A9\x04\u01AA\t\u01AA" +
    "\x04\u01AB\t\u01AB\x04\u01AC\t\u01AC\x04\u01AD\t\u01AD\x04\u01AE\t\u01AE" +
    "\x04\u01AF\t\u01AF\x04\u01B0\t\u01B0\x04\u01B1\t\u01B1\x04\u01B2\t\u01B2" +
    "\x04\u01B3\t\u01B3\x04\u01B4\t\u01B4\x04\u01B5\t\u01B5\x04\u01B6\t\u01B6" +
    "\x04\u01B7\t\u01B7\x04\u01B8\t\u01B8\x04\u01B9\t\u01B9\x04\u01BA\t\u01BA" +
    "\x04\u01BB\t\u01BB\x04\u01BC\t\u01BC\x04\u01BD\t\u01BD\x04\u01BE\t\u01BE" +
    "\x04\u01BF\t\u01BF\x04\u01C0\t\u01C0\x04\u01C1\t\u01C1\x04\u01C2\t\u01C2" +
    "\x04\u01C3\t\u01C3\x04\u01C4\t\u01C4\x04\u01C5\t\u01C5\x04\u01C6\t\u01C6" +
    "\x04\u01C7\t\u01C7\x04\u01C8\t\u01C8\x04\u01C9\t\u01C9\x04\u01CA\t\u01CA" +
    "\x04\u01CB\t\u01CB\x04\u01CC\t\u01CC\x04\u01CD\t\u01CD\x04\u01CE\t\u01CE" +
    "\x04\u01CF\t\u01CF\x04\u01D0\t\u01D0\x04\u01D1\t\u01D1\x04\u01D2\t\u01D2" +
    "\x04\u01D3\t\u01D3\x04\u01D4\t\u01D4\x04\u01D5\t\u01D5\x04\u01D6\t\u01D6" +
    "\x04\u01D7\t\u01D7\x04\u01D8\t\u01D8\x04\u01D9\t\u01D9\x04\u01DA\t\u01DA" +
    "\x04\u01DB\t\u01DB\x04\u01DC\t\u01DC\x04\u01DD\t\u01DD\x04\u01DE\t\u01DE" +
    "\x04\u01DF\t\u01DF\x04\u01E0\t\u01E0\x04\u01E1\t\u01E1\x04\u01E2\t\u01E2" +
    "\x04\u01E3\t\u01E3\x04\u01E4\t\u01E4\x04\u01E5\t\u01E5\x04\u01E6\t\u01E6" +
    "\x04\u01E7\t\u01E7\x04\u01E8\t\u01E8\x04\u01E9\t\u01E9\x04\u01EA\t\u01EA" +
    "\x04\u01EB\t\u01EB\x04\u01EC\t\u01EC\x04\u01ED\t\u01ED\x04\u01EE\t\u01EE" +
    "\x04\u01EF\t\u01EF\x04\u01F0\t\u01F0\x04\u01F1\t\u01F1\x04\u01F2\t\u01F2" +
    "\x04\u01F3\t\u01F3\x04\u01F4\t\u01F4\x04\u01F5\t\u01F5\x04\u01F6\t\u01F6" +
    "\x04\u01F7\t\u01F7\x04\u01F8\t\u01F8\x04\u01F9\t\u01F9\x04\u01FA\t\u01FA" +
    "\x04\u01FB\t\u01FB\x04\u01FC\t\u01FC\x04\u01FD\t\u01FD\x04\u01FE\t\u01FE" +
    "\x04\u01FF\t\u01FF\x04\u0200\t\u0200\x04\u0201\t\u0201\x04\u0202\t\u0202" +
    "\x04\u0203\t\u0203\x04\u0204\t\u0204\x04\u0205\t\u0205\x04\u0206\t\u0206" +
    "\x04\u0207\t\u0207\x04\u0208\t\u0208\x04\u0209\t\u0209\x04\u020A\t\u020A" +
    "\x04\u020B\t\u020B\x04\u020C\t\u020C\x04\u020D\t\u020D\x04\u020E\t\u020E" +
    "\x04\u020F\t\u020F\x04\u0210\t\u0210\x04\u0211\t\u0211\x04\u0212\t\u0212" +
    "\x04\u0213\t\u0213\x04\u0214\t\u0214\x04\u0215\t\u0215\x04\u0216\t\u0216" +
    "\x04\u0217\t\u0217\x04\u0218\t\u0218\x04\u0219\t\u0219\x04\u021A\t\u021A" +
    "\x04\u021B\t\u021B\x04\u021C\t\u021C\x04\u021D\t\u021D\x04\u021E\t\u021E" +
    "\x04\u021F\t\u021F\x04\u0220\t\u0220\x04\u0221\t\u0221\x04\u0222\t\u0222" +
    "\x04\u0223\t\u0223\x04\u0224\t\u0224\x04\u0225\t\u0225\x04\u0226\t\u0226" +
    "\x04\u0227\t\u0227\x03\x02\x06\x02\u0451\n\x02\r\x02\x0E\x02\u0452\x03" +
    "\x02\x03\x02\x03\x03\x03\x03\x03\x03\x03\x03\x07\x03\u045B\n\x03\f\x03" +
    "\x0E\x03\u045E\v\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x04\x03" +
    "\x04\x03\x04\x05\x04\u0468\n\x04\x03\x04\x07\x04\u046B\n\x04\f\x04\x0E" +
    "\x04\u046E\v\x04\x03\x04\x05\x04\u0471\n\x04\x03\x04\x03\x04\x05\x04\u0475" +
    "\n\x04\x03\x04\x03\x04\x03\x04\x03\x04\x05\x04\u047B\n\x04\x03\x04\x03" +
    "\x04\x05\x04\u047F\n\x04\x05\x04\u0481\n\x04\x03\x04\x03\x04\x03\x05\x03" +
    "\x05\x03\x05\x03\x05\x03\x06\x03\x06\x03\x06\x03\x06\x03\x07\x03\x07\x03" +
    "\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03\b\x03\b\x03\b" +
    "\x03\b\x03\b\x03\b\x03\t\x03\t\x03\t\x03\t\x03\t\x03\t\x03\n\x03\n\x03" +
    "\n\x03\n\x03\n\x03\n\x03\n\x03\n\x03\v\x03\v\x03\v\x03\v\x03\f\x03\f\x03" +
    "\f\x03\f\x03\r\x03\r\x03\r\x03\r\x03\x0E\x03\x0E\x03\x0E\x03\x0E\x03\x0E" +
    "\x03\x0E\x03\x0F\x03\x0F\x03\x0F\x03\x0F\x03\x0F\x03\x0F\x03\x0F\x03\x0F" +
    "\x03\x0F\x03\x0F\x03\x10\x03\x10\x03\x10\x03\x10\x03\x10\x03\x10\x03\x10" +
    "\x03\x10\x03\x10\x03\x10\x03\x10\x03\x10\x03\x10\x03\x10\x03\x10\x03\x10" +
    "\x03\x10\x03\x11\x03\x11\x03\x11\x03\x11\x03\x11\x03\x11\x03\x11\x03\x11" +
    "\x03\x11\x03\x11\x03\x11\x03\x11\x03\x11\x03\x11\x03\x11\x03\x11\x03\x11" +
    "\x03\x11\x03\x11\x03\x11\x03\x11\x03\x11\x03\x12\x03\x12\x03\x12\x03\x13" +
    "\x03\x13\x03\x13\x03\x13\x03\x13\x03\x13\x03\x13\x03\x13\x03\x13\x03\x13" +
    "\x03\x13\x03\x14\x03\x14\x03\x14\x03\x14\x03\x14\x03\x14\x03\x14\x03\x14" +
    "\x03\x14\x03\x14\x03\x14\x03\x15\x03\x15\x03\x15\x03\x16\x03\x16\x03\x16" +
    "\x03\x16\x03\x16\x03\x16\x03\x16\x03\x17\x03\x17\x03\x17\x03\x17\x03\x17" +
    "\x03\x17\x03\x17\x03\x17\x03\x17\x03\x17\x03\x17\x03\x17\x03\x17\x03\x17" +
    "\x03\x18\x03\x18\x03\x18\x03\x18\x03\x19\x03\x19\x03\x19\x03\x19\x03\x19" +
    "\x03\x19\x03\x1A\x03\x1A\x03\x1A\x03\x1A\x03\x1A\x03\x1A\x03\x1A\x03\x1A" +
    "\x03\x1A\x03\x1A\x03\x1A\x03\x1A\x03\x1B\x03\x1B\x03\x1B\x03\x1B\x03\x1B" +
    "\x03\x1B\x03\x1B\x03\x1B\x03\x1B\x03\x1B\x03\x1B\x03\x1B\x03\x1B\x03\x1B" +
    "\x03\x1B\x03\x1B\x03\x1C\x03\x1C\x03\x1C\x03\x1C\x03\x1C\x03\x1C\x03\x1C" +
    "\x03\x1C\x03\x1D\x03\x1D\x03\x1D\x03\x1D\x03\x1D\x03\x1D\x03\x1D\x03\x1E" +
    "\x03\x1E\x03\x1E\x03\x1E\x03\x1E\x03\x1E\x03\x1E\x03\x1F\x03\x1F\x03\x1F" +
    "\x03\x1F\x03 \x03 \x03 \x03 \x03 \x03!\x03!\x03!\x03!\x03!\x03!\x03!\x03" +
    "!\x03\"\x03\"\x03\"\x03\"\x03\"\x03#\x03#\x03#\x03$\x03$\x03$\x03$\x03" +
    "$\x03$\x03%\x03%\x03%\x03%\x03%\x03&\x03&\x03&\x03&\x03&\x03&\x03&\x03" +
    "\'\x03\'\x03\'\x03\'\x03\'\x03\'\x03\'\x03\'\x03\'\x03\'\x03\'\x03\'\x03" +
    "(\x03(\x03(\x03(\x03(\x03(\x03(\x03(\x03(\x03)\x03)\x03)\x03)\x03)\x03" +
    "*\x03*\x03*\x03*\x03*\x03+\x03+\x03+\x03+\x03+\x03+\x03+\x03+\x03+\x03" +
    ",\x03,\x03,\x03,\x03,\x03-\x03-\x03-\x03-\x03-\x03-\x03-\x03-\x03.\x03" +
    ".\x03.\x03.\x03.\x03.\x03.\x03.\x03.\x03.\x03.\x03.\x03.\x03.\x03.\x03" +
    "/\x03/\x03/\x03/\x03/\x030\x030\x030\x030\x030\x030\x030\x030\x030\x03" +
    "0\x031\x031\x031\x031\x031\x031\x031\x031\x031\x031\x031\x031\x031\x03" +
    "1\x031\x031\x031\x032\x032\x032\x032\x032\x032\x032\x032\x032\x032\x03" +
    "2\x032\x033\x033\x033\x033\x033\x033\x034\x034\x034\x034\x034\x034\x03" +
    "4\x034\x034\x034\x034\x035\x035\x035\x035\x035\x036\x036\x036\x036\x03" +
    "6\x036\x037\x037\x037\x037\x037\x037\x037\x037\x037\x038\x038\x038\x03" +
    "8\x038\x038\x038\x038\x039\x039\x039\x039\x039\x039\x039\x039\x03:\x03" +
    ":\x03:\x03:\x03:\x03:\x03:\x03;\x03;\x03;\x03;\x03;\x03;\x03;\x03;\x03" +
    "<\x03<\x03<\x03<\x03<\x03<\x03<\x03<\x03=\x03=\x03=\x03=\x03=\x03=\x03" +
    "=\x03>\x03>\x03>\x03>\x03>\x03>\x03>\x03>\x03?\x03?\x03?\x03?\x03?\x03" +
    "?\x03?\x03?\x03?\x03?\x03@\x03@\x03@\x03@\x03@\x03@\x03@\x03@\x03A\x03" +
    "A\x03A\x03A\x03A\x03A\x03A\x03A\x03A\x03A\x03A\x03B\x03B\x03B\x03B\x03" +
    "B\x03B\x03B\x03B\x03B\x03C\x03C\x03C\x03C\x03C\x03C\x03C\x03C\x03D\x03" +
    "D\x03D\x03D\x03D\x03E\x03E\x03E\x03E\x03E\x03E\x03E\x03E\x03E\x03E\x03" +
    "E\x03E\x03E\x03E\x03F\x03F\x03F\x03F\x03F\x03F\x03G\x03G\x03G\x03G\x03" +
    "G\x03G\x03G\x03G\x03G\x03G\x03H\x03H\x03H\x03H\x03H\x03H\x03H\x03H\x03" +
    "H\x03H\x03H\x03I\x03I\x03I\x03I\x03I\x03I\x03I\x03J\x03J\x03J\x03J\x03" +
    "J\x03J\x03K\x03K\x03K\x03K\x03K\x03L\x03L\x03L\x03L\x03L\x03L\x03L\x03" +
    "L\x03L\x03L\x03M\x03M\x03M\x03M\x03M\x03M\x03M\x03M\x03N\x03N\x03N\x03" +
    "N\x03N\x03N\x03N\x03N\x03N\x03N\x03N\x03N\x03N\x03N\x03N\x03N\x03O\x03" +
    "O\x03O\x03O\x03O\x03O\x03O\x03O\x03O\x03O\x03O\x03O\x03O\x03P\x03P\x03" +
    "P\x03P\x03P\x03P\x03P\x03P\x03P\x03P\x03P\x03P\x03P\x03P\x03P\x03P\x03" +
    "P\x03P\x03P\x03P\x03P\x03P\x03P\x03P\x03P\x03P\x03P\x03P\x03P\x03P\x03" +
    "P\x03P\x03Q\x03Q\x03Q\x03Q\x03Q\x03Q\x03Q\x03Q\x03Q\x03Q\x03Q\x03Q\x03" +
    "Q\x03R\x03R\x03R\x03R\x03R\x03R\x03R\x03R\x03R\x03R\x03R\x03R\x03R\x03" +
    "S\x03S\x03S\x03S\x03S\x03S\x03S\x03S\x03S\x03S\x03S\x03S\x03T\x03T\x03" +
    "T\x03T\x03T\x03T\x03T\x03T\x03T\x03T\x03T\x03T\x03T\x03T\x03T\x03U\x03" +
    "U\x03U\x03U\x03U\x03U\x03U\x03U\x03U\x03U\x03U\x03U\x03U\x03V\x03V\x03" +
    "V\x03V\x03V\x03V\x03V\x03V\x03V\x03V\x03V\x03V\x03V\x03V\x03V\x03V\x03" +
    "V\x03V\x03W\x03W\x03W\x03W\x03W\x03W\x03W\x03W\x03W\x03W\x03W\x03W\x03" +
    "W\x03W\x03W\x03W\x03W\x03W\x03W\x03W\x03W\x03W\x03W\x03W\x03W\x03W\x03" +
    "W\x03W\x03W\x03W\x03W\x03W\x03W\x03X\x03X\x03X\x03X\x03X\x03X\x03X\x03" +
    "X\x03X\x03X\x03X\x03X\x03X\x03Y\x03Y\x03Y\x03Y\x03Y\x03Y\x03Y\x03Z\x03" +
    "Z\x03Z\x03Z\x03Z\x03Z\x03[\x03[\x03[\x03[\x03[\x03[\x03[\x03[\x03[\x03" +
    "[\x03\\\x03\\\x03\\\x03\\\x03\\\x03]\x03]\x03]\x03]\x03]\x03]\x03]\x03" +
    "]\x03]\x03^\x03^\x03^\x03^\x03^\x03^\x03^\x03^\x03^\x03^\x03^\x03^\x03" +
    "^\x03^\x03_\x03_\x03_\x03_\x03_\x03_\x03_\x03_\x03_\x03_\x03_\x03_\x03" +
    "_\x03_\x03_\x03`\x03`\x03`\x03`\x03`\x03`\x03`\x03`\x03`\x03`\x03a\x03" +
    "a\x03a\x03a\x03a\x03a\x03a\x03a\x03a\x03a\x03a\x03b\x03b\x03b\x03b\x03" +
    "c\x03c\x03c\x03c\x03c\x03c\x03c\x03c\x03c\x03c\x03d\x03d\x03d\x03d\x03" +
    "d\x03d\x03d\x03d\x03d\x03d\x03e\x03e\x03e\x03e\x03e\x03e\x03e\x03e\x03" +
    "e\x03e\x03e\x03f\x03f\x03f\x03f\x03g\x03g\x03g\x03g\x03g\x03g\x03g\x03" +
    "g\x03h\x03h\x03h\x03h\x03h\x03h\x03h\x03h\x03i\x03i\x03i\x03i\x03i\x03" +
    "i\x03i\x03i\x03j\x03j\x03j\x03j\x03j\x03j\x03j\x03k\x03k\x03k\x03k\x03" +
    "k\x03k\x03k\x03l\x03l\x03l\x03l\x03l\x03l\x03l\x03l\x03l\x03l\x03l\x03" +
    "m\x03m\x03m\x03m\x03m\x03m\x03n\x03n\x03n\x03n\x03n\x03n\x03n\x03n\x03" +
    "n\x03o\x03o\x03o\x03o\x03o\x03o\x03o\x03o\x03o\x03o\x03o\x03o\x03o\x03" +
    "o\x03p\x03p\x03p\x03p\x03p\x03p\x03p\x03p\x03p\x03q\x03q\x03q\x03q\x03" +
    "q\x03q\x03q\x03q\x03q\x03q\x03q\x03r\x03r\x03r\x03r\x03r\x03r\x03r\x03" +
    "r\x03r\x03s\x03s\x03s\x03s\x03t\x03t\x03t\x03t\x03t\x03t\x03t\x03u\x03" +
    "u\x03u\x03u\x03u\x03v\x03v\x03v\x03v\x03v\x03v\x03v\x03v\x03w\x03w\x03" +
    "w\x03w\x03w\x03x\x03x\x03x\x03x\x03x\x03x\x03x\x03x\x03y\x03y\x03y\x03" +
    "y\x03y\x03z\x03z\x03z\x03z\x03z\x03z\x03{\x03{\x03{\x03{\x03|\x03|\x03" +
    "|\x03|\x03|\x03|\x03|\x03|\x03|\x03|\x03}\x03}\x03}\x03}\x03}\x03}\x03" +
    "}\x03}\x03}\x03}\x03}\x03}\x03}\x03}\x03~\x03~\x03~\x03~\x03~\x03~\x03" +
    "~\x03~\x03~\x03\x7F\x03\x7F\x03\x7F\x03\x7F\x03\x7F\x03\x7F\x03\x7F\x03" +
    "\x80\x03\x80\x03\x80\x03\x80\x03\x80\x03\x80\x03\x80\x03\x81\x03\x81\x03" +
    "\x81\x03\x81\x03\x81\x03\x81\x03\x81\x03\x81\x03\x81\x03\x81\x03\x81\x03" +
    "\x81\x03\x81\x03\x81\x03\x81\x03\x82\x03\x82\x03\x82\x03\x82\x03\x82\x03" +
    "\x82\x03\x83\x03\x83\x03\x83\x03\x83\x03\x83\x03\x83\x03\x83\x03\x84\x03" +
    "\x84\x03\x84\x03\x84\x03\x84\x03\x85\x03\x85\x03\x85\x03\x85\x03\x85\x03" +
    "\x85\x03\x85\x03\x85\x03\x86\x03\x86\x03\x86\x03\x86\x03\x86\x03\x86\x03" +
    "\x86\x03\x87\x03\x87\x03\x87\x03\x87\x03\x88\x03\x88\x03\x88\x03\x88\x03" +
    "\x88\x03\x88\x03\x88\x03\x88\x03\x89\x03\x89\x03\x89\x03\x89\x03\x89\x03" +
    "\x89\x03\x89\x03\x8A\x03\x8A\x03\x8A\x03\x8A\x03\x8A\x03\x8A\x03\x8A\x03" +
    "\x8A\x03\x8A\x03\x8B\x03\x8B\x03\x8B\x03\x8B\x03\x8B\x03\x8B\x03\x8B\x03" +
    "\x8B\x03\x8B\x03\x8C\x03\x8C\x03\x8C\x03\x8C\x03\x8C\x03\x8C\x03\x8C\x03" +
    "\x8C\x03\x8D\x03\x8D\x03\x8D\x03\x8D\x03\x8D\x03\x8D\x03\x8E\x03\x8E\x03" +
    "\x8E\x03\x8E\x03\x8E\x03\x8E\x03\x8F\x03\x8F\x03\x8F\x03\x8F\x03\x8F\x03" +
    "\x8F\x03\x8F\x03\x90\x03\x90\x03\x90\x03\x90\x03\x90\x03\x90\x03\x90\x03" +
    "\x90\x03\x90\x03\x90\x03\x90\x03\x90\x03\x91\x03\x91\x03\x91\x03\x91\x03" +
    "\x91\x03\x91\x03\x92\x03\x92\x03\x92\x03\x92\x03\x92\x03\x92\x03\x93\x03" +
    "\x93\x03\x93\x03\x93\x03\x94\x03\x94\x03\x94\x03\x94\x03\x94\x03\x94\x03" +
    "\x94\x03\x94\x03\x95\x03\x95\x03\x95\x03\x95\x03\x95\x03\x95\x03\x95\x03" +
    "\x95\x03\x95\x03\x95\x03\x96\x03\x96\x03\x96\x03\x96\x03\x96\x03\x97\x03" +
    "\x97\x03\x97\x03\x97\x03\x97\x03\x97\x03\x97\x03\x98\x03\x98\x03\x98\x03" +
    "\x98\x03\x98\x03\x99\x03\x99\x03\x99\x03\x99\x03\x99\x03\x9A\x03\x9A\x03" +
    "\x9A\x03\x9A\x03\x9A\x03\x9A\x03\x9A\x03\x9A\x03\x9A\x03\x9B\x03\x9B\x03" +
    "\x9B\x03\x9B\x03\x9B\x03\x9B\x03\x9B\x03\x9B\x03\x9B\x03\x9B\x03\x9C\x03" +
    "\x9C\x03\x9C\x03\x9C\x03\x9C\x03\x9C\x03\x9C\x03\x9D\x03\x9D\x03\x9D\x03" +
    "\x9D\x03\x9E\x03\x9E\x03\x9E\x03\x9E\x03\x9E\x03\x9E\x03\x9E\x03\x9F\x03" +
    "\x9F\x03\x9F\x03\x9F\x03\x9F\x03\x9F\x03\xA0";
FlinkSqlLexer._serializedATNSegment1 = "\x03\xA0\x03\xA0\x03\xA0\x03\xA0\x03\xA0\x03\xA1\x03\xA1\x03\xA1\x03\xA1" +
    "\x03\xA1\x03\xA1\x03\xA1\x03\xA1\x03\xA1\x03\xA2\x03\xA2\x03\xA2\x03\xA2" +
    "\x03\xA2\x03\xA2\x03\xA2\x03\xA3\x03\xA3\x03\xA3\x03\xA3\x03\xA3\x03\xA3" +
    "\x03\xA3\x03\xA3\x03\xA3\x03\xA3\x03\xA3\x03\xA3\x03\xA3\x03\xA4\x03\xA4" +
    "\x03\xA4\x03\xA4\x03\xA4\x03\xA4\x03\xA4\x03\xA5\x03\xA5\x03\xA5\x03\xA5" +
    "\x03\xA5\x03\xA6\x03\xA6\x03\xA6\x03\xA6\x03\xA6\x03\xA7\x03\xA7\x03\xA7" +
    "\x03\xA7\x03\xA7\x03\xA7\x03\xA7\x03\xA7\x03\xA7\x03\xA8\x03\xA8\x03\xA8" +
    "\x03\xA9\x03\xA9\x03\xA9\x03\xA9\x03\xA9\x03\xA9\x03\xAA\x03\xAA\x03\xAA" +
    "\x03\xAA\x03\xAA\x03\xAA\x03\xAA\x03\xAB\x03\xAB\x03\xAB\x03\xAC\x03\xAC" +
    "\x03\xAC\x03\xAC\x03\xAC\x03\xAC\x03\xAC\x03\xAC\x03\xAD\x03\xAD\x03\xAD" +
    "\x03\xAD\x03\xAD\x03\xAD\x03\xAD\x03\xAD\x03\xAD\x03\xAD\x03\xAE\x03\xAE" +
    "\x03\xAE\x03\xAE\x03\xAE\x03\xAE\x03\xAE\x03\xAE\x03\xAF\x03\xAF\x03\xAF" +
    "\x03\xAF\x03\xAF\x03\xAF\x03\xB0\x03\xB0\x03\xB0\x03\xB0\x03\xB0\x03\xB0" +
    "\x03\xB1\x03\xB1\x03\xB1\x03\xB1\x03\xB1\x03\xB1\x03\xB1\x03\xB1\x03\xB1" +
    "\x03\xB1\x03\xB1\x03\xB1\x03\xB2\x03\xB2\x03\xB2\x03\xB2\x03\xB2\x03\xB2" +
    "\x03\xB2\x03\xB3\x03\xB3\x03\xB3\x03\xB3\x03\xB4\x03\xB4\x03\xB4\x03\xB4" +
    "\x03\xB4\x03\xB4\x03\xB4\x03\xB4\x03\xB5\x03\xB5\x03\xB5\x03\xB5\x03\xB5" +
    "\x03\xB5\x03\xB5\x03\xB5\x03\xB5\x03\xB5\x03\xB6\x03\xB6\x03\xB6\x03\xB6" +
    "\x03\xB6\x03\xB6\x03\xB6\x03\xB6\x03\xB6\x03\xB6\x03\xB6\x03\xB6\x03\xB6" +
    "\x03\xB7\x03\xB7\x03\xB7\x03\xB7\x03\xB7\x03\xB7\x03\xB7\x03\xB7\x03\xB7" +
    "\x03\xB8\x03\xB8\x03\xB8\x03\xB8\x03\xB8\x03\xB9\x03\xB9\x03\xB9\x03\xBA" +
    "\x03\xBA\x03\xBA\x03\xBA\x03\xBA\x03\xBB\x03\xBB\x03\xBB\x03\xBB\x03\xBB" +
    "\x03\xBB\x03\xBB\x03\xBB\x03\xBB\x03\xBB\x03\xBB\x03\xBC\x03\xBC\x03\xBC" +
    "\x03\xBC\x03\xBC\x03\xBC\x03\xBC\x03\xBC\x03\xBC\x03\xBC\x03\xBC\x03\xBC" +
    "\x03\xBC\x03\xBC\x03\xBD\x03\xBD\x03\xBD\x03\xBD\x03\xBD\x03\xBD\x03\xBD" +
    "\x03\xBD\x03\xBD\x03\xBD\x03\xBD\x03\xBD\x03\xBD\x03\xBD\x03\xBD\x03\xBD" +
    "\x03\xBD\x03\xBD\x03\xBD\x03\xBD\x03\xBE\x03\xBE\x03\xBE\x03\xBE\x03\xBE" +
    "\x03\xBE\x03\xBE\x03\xBE\x03\xBE\x03\xBE\x03\xBE\x03\xBE\x03\xBF\x03\xBF" +
    "\x03\xBF\x03\xBF\x03\xBF\x03\xBF\x03\xBF\x03\xBF\x03\xBF\x03\xBF\x03\xBF" +
    "\x03\xBF\x03\xC0\x03\xC0\x03\xC0\x03\xC0\x03\xC0\x03\xC0\x03\xC0\x03\xC0" +
    "\x03\xC0\x03\xC0\x03\xC0\x03\xC0\x03\xC0\x03\xC0\x03\xC0\x03\xC1\x03\xC1" +
    "\x03\xC1\x03\xC1\x03\xC1\x03\xC1\x03\xC1\x03\xC1\x03\xC1\x03\xC1\x03\xC1" +
    "\x03\xC2\x03\xC2\x03\xC2\x03\xC2\x03\xC2\x03\xC2\x03\xC2\x03\xC2\x03\xC2" +
    "\x03\xC2\x03\xC2\x03\xC3\x03\xC3\x03\xC3\x03\xC3\x03\xC4\x03\xC4\x03\xC4" +
    "\x03\xC4\x03\xC4\x03\xC4\x03\xC4\x03\xC4\x03\xC4\x03\xC5\x03\xC5\x03\xC5" +
    "\x03\xC5\x03\xC5\x03\xC5\x03\xC6\x03\xC6\x03\xC6\x03\xC6\x03\xC6\x03\xC6" +
    "\x03\xC6\x03\xC6\x03\xC6\x03\xC6\x03\xC6\x03\xC7\x03\xC7\x03\xC7\x03\xC7" +
    "\x03\xC7\x03\xC7\x03\xC7\x03\xC7\x03\xC8\x03\xC8\x03\xC8\x03\xC8\x03\xC8" +
    "\x03\xC9\x03\xC9\x03\xC9\x03\xC9\x03\xC9\x03\xC9\x03\xC9\x03\xC9\x03\xCA" +
    "\x03\xCA\x03\xCA\x03\xCA\x03\xCA\x03\xCB\x03\xCB\x03\xCB\x03\xCB\x03\xCB" +
    "\x03\xCC\x03\xCC\x03\xCC\x03\xCC\x03\xCC\x03\xCC\x03\xCC\x03\xCC\x03\xCC" +
    "\x03\xCC\x03\xCC\x03\xCD\x03\xCD\x03\xCD\x03\xCD\x03\xCD\x03\xCD\x03\xCE" +
    "\x03\xCE\x03\xCE\x03\xCF\x03\xCF\x03\xCF\x03\xCF\x03\xCF\x03\xCF\x03\xD0" +
    "\x03\xD0\x03\xD0\x03\xD0\x03\xD0\x03\xD0\x03\xD0\x03\xD0\x03\xD0\x03\xD0" +
    "\x03\xD1\x03\xD1\x03\xD1\x03\xD1\x03\xD1\x03\xD1\x03\xD1\x03\xD1\x03\xD1" +
    "\x03\xD1\x03\xD1\x03\xD1\x03\xD1\x03\xD1\x03\xD1\x03\xD2\x03\xD2\x03\xD2" +
    "\x03\xD2\x03\xD2\x03\xD2\x03\xD3\x03\xD3\x03\xD3\x03\xD3\x03\xD3\x03\xD3" +
    "\x03\xD4\x03\xD4\x03\xD4\x03\xD4\x03\xD4\x03\xD4\x03\xD4\x03\xD4\x03\xD5" +
    "\x03\xD5\x03\xD5\x03\xD5\x03\xD5\x03\xD5\x03\xD5\x03\xD5\x03\xD5\x03\xD5" +
    "\x03\xD5\x03\xD5\x03\xD5\x03\xD6\x03\xD6\x03\xD6\x03\xD6\x03\xD6\x03\xD6" +
    "\x03\xD6\x03\xD6\x03\xD6\x03\xD6\x03\xD6\x03\xD6\x03\xD6\x03\xD6\x03\xD6" +
    "\x03\xD6\x03\xD7\x03\xD7\x03\xD7\x03\xD7\x03\xD8\x03\xD8\x03\xD8\x03\xD8" +
    "\x03\xD8\x03\xD8\x03\xD8\x03\xD8\x03\xD8\x03\xD9\x03\xD9\x03\xD9\x03\xD9" +
    "\x03\xD9\x03\xD9\x03\xD9\x03\xDA\x03\xDA\x03\xDA\x03\xDA\x03\xDA\x03\xDA" +
    "\x03\xDB\x03\xDB\x03\xDB\x03\xDB\x03\xDB\x03\xDB\x03\xDB\x03\xDB\x03\xDB" +
    "\x03\xDC\x03\xDC\x03\xDC\x03\xDC\x03\xDC\x03\xDC\x03\xDC\x03\xDD\x03\xDD" +
    "\x03\xDD\x03\xDD\x03\xDE\x03\xDE\x03\xDE\x03\xDE\x03\xDE\x03\xDE\x03\xDF" +
    "\x03\xDF\x03\xDF\x03\xDF\x03\xDF\x03\xDF\x03\xDF\x03\xE0\x03\xE0\x03\xE0" +
    "\x03\xE0\x03\xE1\x03\xE1\x03\xE1\x03\xE1\x03\xE1\x03\xE1\x03\xE1\x03\xE1" +
    "\x03\xE1\x03\xE2\x03\xE2\x03\xE2\x03\xE2\x03\xE2\x03\xE2\x03\xE2\x03\xE3" +
    "\x03\xE3\x03\xE3\x03\xE3\x03\xE3\x03\xE3\x03\xE3\x03\xE4\x03\xE4\x03\xE4" +
    "\x03\xE4\x03\xE4\x03\xE4\x03\xE4\x03\xE4\x03\xE5\x03\xE5\x03\xE5\x03\xE5" +
    "\x03\xE5\x03\xE5\x03\xE5\x03\xE6\x03\xE6\x03\xE6\x03\xE6\x03\xE6\x03\xE6" +
    "\x03\xE7\x03\xE7\x03\xE7\x03\xE7\x03\xE7\x03\xE8\x03\xE8\x03\xE8\x03\xE8" +
    "\x03\xE8\x03\xE8\x03\xE8\x03\xE8\x03\xE8\x03\xE9\x03\xE9\x03\xE9\x03\xE9" +
    "\x03\xE9\x03\xE9\x03\xE9\x03\xE9\x03\xE9\x03\xEA\x03\xEA\x03\xEA\x03\xEA" +
    "\x03\xEA\x03\xEA\x03\xEA\x03\xEA\x03\xEB\x03\xEB\x03\xEB\x03\xEB\x03\xEB" +
    "\x03\xEB\x03\xEC\x03\xEC\x03\xEC\x03\xEC\x03\xEC\x03\xEC\x03\xED\x03\xED" +
    "\x03\xED\x03\xED\x03\xEE\x03\xEE\x03\xEE\x03\xEE\x03\xEE\x03\xEF\x03\xEF" +
    "\x03\xEF\x03\xF0\x03\xF0\x03\xF0\x03\xF0\x03\xF0\x03\xF1\x03\xF1\x03\xF1" +
    "\x03\xF1\x03\xF1\x03\xF1\x03\xF1\x03\xF1\x03\xF1\x03\xF1\x03\xF2\x03\xF2" +
    "\x03\xF2\x03\xF2\x03\xF3\x03\xF3\x03\xF3\x03\xF3\x03\xF3\x03\xF3\x03\xF3" +
    "\x03\xF3\x03\xF3\x03\xF3\x03\xF4\x03\xF4\x03\xF4\x03\xF4\x03\xF4\x03\xF4" +
    "\x03\xF5\x03\xF5\x03\xF5\x03\xF5\x03\xF5\x03\xF6\x03\xF6\x03\xF6\x03\xF6" +
    "\x03\xF6\x03\xF6\x03\xF6\x03\xF7\x03\xF7\x03\xF7\x03\xF7\x03\xF7\x03\xF7" +
    "\x03\xF7\x03\xF7\x03\xF8\x03\xF8\x03\xF8\x03\xF8\x03\xF8\x03\xF8\x03\xF8" +
    "\x03\xF8\x03\xF8\x03\xF8\x03\xF8\x03\xF8\x03\xF8\x03\xF8\x03\xF8\x03\xF8" +
    "\x03\xF8\x03\xF8\x03\xF9\x03\xF9\x03\xF9\x03\xF9\x03\xF9\x03\xF9\x03\xF9" +
    "\x03\xF9\x03\xF9\x03\xF9\x03\xF9\x03\xF9\x03\xF9\x03\xFA\x03\xFA\x03\xFA" +
    "\x03\xFB\x03\xFB\x03\xFB\x03\xFB\x03\xFB\x03\xFB\x03\xFB\x03\xFC\x03\xFC" +
    "\x03\xFC\x03\xFC\x03\xFD\x03\xFD\x03\xFD\x03\xFD\x03\xFD\x03\xFE\x03\xFE" +
    "\x03\xFE\x03\xFF\x03\xFF\x03\xFF\x03\xFF\x03\u0100\x03\u0100\x03\u0100" +
    "\x03\u0100\x03\u0100\x03\u0101\x03\u0101\x03\u0101\x03\u0101\x03\u0101" +
    "\x03\u0102\x03\u0102\x03\u0102\x03\u0103\x03\u0103\x03\u0103\x03\u0103" +
    "\x03\u0103\x03\u0103\x03\u0104\x03\u0104\x03\u0104\x03\u0104\x03\u0104" +
    "\x03\u0104\x03\u0104\x03\u0104\x03\u0105\x03\u0105\x03\u0105\x03\u0105" +
    "\x03\u0106\x03\u0106\x03\u0106\x03\u0106\x03\u0106\x03\u0106\x03\u0107" +
    "\x03\u0107\x03\u0107\x03\u0107\x03\u0107\x03\u0108\x03\u0108\x03\u0108" +
    "\x03\u0108\x03\u0108\x03\u0108\x03\u0108\x03\u0108\x03\u0108\x03\u0109" +
    "\x03\u0109\x03\u0109\x03\u0109\x03\u0109\x03\u0109\x03\u0109\x03\u0109" +
    "\x03\u010A\x03\u010A\x03\u010A\x03\u010A\x03\u010A\x03\u010A\x03\u010A" +
    "\x03\u010A\x03\u010A\x03\u010A\x03\u010B\x03\u010B\x03\u010B\x03\u010B" +
    "\x03\u010B\x03\u010B\x03\u010B\x03\u010B\x03\u010B\x03\u010B\x03\u010B" +
    "\x03\u010B\x03\u010C\x03\u010C\x03\u010C\x03\u010C\x03\u010C\x03\u010C" +
    "\x03\u010C\x03\u010C\x03\u010C\x03\u010C\x03\u010D\x03\u010D\x03\u010D" +
    "\x03\u010D\x03\u010D\x03\u010D\x03\u010D\x03\u010D\x03\u010D\x03\u010D" +
    "\x03\u010E\x03\u010E\x03\u010E\x03\u010E\x03\u010E\x03\u010E\x03\u010E" +
    "\x03\u010E\x03\u010E\x03\u010E\x03\u010E\x03\u010E\x03\u010F\x03\u010F" +
    "\x03\u010F\x03\u010F\x03\u010F\x03\u010F\x03\u010F\x03\u010F\x03\u010F" +
    "\x03\u010F\x03\u010F\x03\u0110\x03\u0110\x03\u0110\x03\u0110\x03\u0110" +
    "\x03\u0110\x03\u0110\x03\u0110\x03\u0111\x03\u0111\x03\u0111\x03\u0111" +
    "\x03\u0112\x03\u0112\x03\u0112\x03\u0112\x03\u0112\x03\u0112\x03\u0112" +
    "\x03\u0112\x03\u0113\x03\u0113\x03\u0113\x03\u0113\x03\u0113\x03\u0113" +
    "\x03\u0113\x03\u0113\x03\u0113\x03\u0113\x03\u0113\x03\u0113\x03\u0113" +
    "\x03\u0113\x03\u0113\x03\u0113\x03\u0114\x03\u0114\x03\u0114\x03\u0114" +
    "\x03\u0114\x03\u0114\x03\u0114\x03\u0114\x03\u0114\x03\u0114\x03\u0114" +
    "\x03\u0114\x03\u0114\x03\u0114\x03\u0114\x03\u0114\x03\u0115\x03\u0115" +
    "\x03\u0115\x03\u0115\x03\u0115\x03\u0115\x03\u0115\x03\u0115\x03\u0115" +
    "\x03\u0115\x03\u0115\x03\u0115\x03\u0115\x03\u0116\x03\u0116\x03\u0116" +
    "\x03\u0116\x03\u0116\x03\u0116\x03\u0116\x03\u0117\x03\u0117\x03\u0117" +
    "\x03\u0117\x03\u0117\x03\u0117\x03\u0117\x03\u0117\x03\u0118\x03\u0118" +
    "\x03\u0118\x03\u0118\x03\u0118\x03\u0118\x03\u0119\x03\u0119\x03\u0119" +
    "\x03\u0119\x03\u0119\x03\u0119\x03\u0119\x03\u0119\x03\u011A\x03\u011A" +
    "\x03\u011A\x03\u011A\x03\u011A\x03\u011A\x03\u011A\x03\u011A\x03\u011A" +
    "\x03\u011B\x03\u011B\x03\u011B\x03\u011B\x03\u011B\x03\u011B\x03\u011B" +
    "\x03\u011B\x03\u011B\x03\u011B\x03\u011B\x03\u011B\x03\u011B\x03\u011B" +
    "\x03\u011B\x03\u011C\x03\u011C\x03\u011C\x03\u011C\x03\u011C\x03\u011C" +
    "\x03\u011D\x03\u011D\x03\u011D\x03\u011D\x03\u011D\x03\u011D\x03\u011D" +
    "\x03\u011D\x03\u011D\x03\u011E\x03\u011E\x03\u011E\x03\u011E\x03\u011E" +
    "\x03\u011E\x03\u011E\x03\u011E\x03\u011E\x03\u011E\x03\u011F\x03\u011F" +
    "\x03\u011F\x03\u011F\x03\u011F\x03\u011F\x03\u011F\x03\u011F\x03\u0120" +
    "\x03\u0120\x03\u0120\x03\u0120\x03\u0120\x03\u0121\x03\u0121\x03\u0121" +
    "\x03\u0121\x03\u0121\x03\u0121\x03\u0121\x03\u0121\x03\u0122\x03\u0122" +
    "\x03\u0122\x03\u0122\x03\u0122\x03\u0122\x03\u0122\x03\u0122\x03\u0122" +
    "\x03\u0122\x03\u0123\x03\u0123\x03\u0123\x03\u0123\x03\u0123\x03\u0123" +
    "\x03\u0123\x03\u0123\x03\u0124\x03\u0124\x03\u0124\x03\u0124\x03\u0124" +
    "\x03\u0124\x03\u0124\x03\u0124\x03\u0124\x03\u0125\x03\u0125\x03\u0125" +
    "\x03\u0125\x03\u0125\x03\u0125\x03\u0126\x03\u0126\x03\u0126\x03\u0126" +
    "\x03\u0126\x03\u0127\x03\u0127\x03\u0127\x03\u0127\x03\u0128\x03\u0128" +
    "\x03\u0128\x03\u0128\x03\u0128\x03\u0128\x03\u0129\x03\u0129\x03\u0129" +
    "\x03\u0129\x03\u0129\x03\u012A\x03\u012A\x03\u012A\x03\u012A\x03\u012A" +
    "\x03\u012A\x03\u012A\x03\u012A\x03\u012A\x03\u012A\x03\u012B\x03\u012B" +
    "\x03\u012B\x03\u012B\x03\u012C\x03\u012C\x03\u012C\x03\u012C\x03\u012C" +
    "\x03\u012C\x03\u012C\x03\u012C\x03\u012C\x03\u012C\x03\u012C\x03\u012D" +
    "\x03\u012D\x03\u012D\x03\u012D\x03\u012D\x03\u012D\x03\u012D\x03\u012D" +
    "\x03\u012D\x03\u012D\x03\u012D\x03\u012D\x03\u012E\x03\u012E\x03\u012E" +
    "\x03\u012E\x03\u012E\x03\u012E\x03\u012E\x03\u012E\x03\u012E\x03\u012E" +
    "\x03\u012F\x03\u012F\x03\u012F\x03\u012F\x03\u012F\x03\u012F\x03\u012F" +
    "\x03\u012F\x03\u012F\x03\u012F\x03\u0130\x03\u0130\x03\u0130\x03\u0130" +
    "\x03\u0130\x03\u0130\x03\u0130\x03\u0130\x03\u0130\x03\u0130\x03\u0130" +
    "\x03\u0131\x03\u0131\x03\u0131\x03\u0131\x03\u0131\x03\u0131\x03\u0131" +
    "\x03\u0131\x03\u0131\x03\u0131\x03\u0131\x03\u0131\x03\u0131\x03\u0131" +
    "\x03\u0131\x03\u0132\x03\u0132\x03\u0132\x03\u0132\x03\u0132\x03\u0132" +
    "\x03\u0132\x03\u0132\x03\u0133\x03\u0133\x03\u0133\x03\u0133\x03\u0133" +
    "\x03\u0133\x03\u0133\x03\u0133\x03\u0133\x03\u0133\x03\u0133\x03\u0134" +
    "\x03\u0134\x03\u0134\x03\u0134\x03\u0134\x03\u0134\x03\u0134\x03\u0134" +
    "\x03\u0134\x03\u0135\x03\u0135\x03\u0135\x03\u0135\x03\u0135\x03\u0135" +
    "\x03\u0135\x03\u0135\x03\u0135\x03\u0136\x03\u0136\x03\u0136\x03\u0136" +
    "\x03\u0136\x03\u0136\x03\u0136\x03\u0136\x03\u0136\x03\u0137\x03\u0137" +
    "\x03\u0137\x03\u0137\x03\u0137\x03\u0137\x03\u0137\x03\u0137\x03\u0138" +
    "\x03\u0138\x03\u0138\x03\u0138\x03\u0138\x03\u0138\x03\u0138\x03\u0139" +
    "\x03\u0139\x03\u0139\x03\u0139\x03\u0139\x03\u0139\x03\u013A\x03\u013A" +
    "\x03\u013A\x03\u013A\x03\u013A\x03\u013A\x03\u013A\x03\u013B\x03\u013B" +
    "\x03\u013B\x03\u013B\x03\u013B\x03\u013B\x03\u013B\x03\u013C\x03\u013C" +
    "\x03\u013C\x03\u013C\x03\u013C\x03\u013C\x03\u013C\x03\u013C\x03\u013D" +
    "\x03\u013D\x03\u013D\x03\u013D\x03\u013D\x03\u013D\x03\u013D\x03\u013E" +
    "\x03\u013E\x03\u013E\x03\u013E\x03\u013E\x03\u013E\x03\u013F\x03\u013F" +
    "\x03\u013F\x03\u013F\x03\u013F\x03\u013F\x03\u0140\x03\u0140\x03\u0140" +
    "\x03\u0140\x03\u0140\x03\u0140\x03\u0140\x03\u0140\x03\u0140\x03\u0141" +
    "\x03\u0141\x03\u0141\x03\u0141\x03\u0141\x03\u0141\x03\u0141\x03\u0142" +
    "\x03\u0142\x03\u0142\x03\u0142\x03\u0143\x03\u0143\x03\u0143\x03\u0143" +
    "\x03\u0143\x03\u0144\x03\u0144\x03\u0144\x03\u0144\x03\u0144\x03\u0144" +
    "\x03\u0144\x03\u0144\x03\u0144\x03\u0144\x03\u0144\x03\u0145\x03\u0145" +
    "\x03\u0145\x03\u0145\x03\u0145\x03\u0145\x03\u0145\x03\u0145\x03\u0146" +
    "\x03\u0146\x03\u0146\x03\u0146\x03\u0146\x03\u0146\x03\u0146\x03\u0146" +
    "\x03\u0146\x03\u0146\x03\u0147\x03\u0147\x03\u0147\x03\u0147\x03\u0147" +
    "\x03\u0147\x03\u0147\x03\u0147\x03\u0147\x03\u0147\x03\u0147\x03\u0147" +
    "\x03\u0148\x03\u0148\x03\u0148\x03\u0148\x03\u0148\x03\u0148\x03\u0148" +
    "\x03\u0148\x03\u0148\x03\u0148\x03\u0148\x03\u0148\x03\u0148\x03\u0149" +
    "\x03\u0149\x03\u0149\x03\u0149\x03\u0149\x03\u0149\x03\u0149\x03\u0149" +
    "\x03\u0149\x03\u014A\x03\u014A\x03\u014A\x03\u014A\x03\u014A\x03\u014A" +
    "\x03\u014A\x03\u014A\x03\u014A\x03\u014A\x03\u014B\x03\u014B\x03\u014B" +
    "\x03\u014B\x03\u014B\x03\u014B\x03\u014C\x03\u014C\x03\u014C\x03\u014C" +
    "\x03\u014C\x03\u014C\x03\u014D\x03\u014D\x03\u014D\x03\u014D\x03\u014D" +
    "\x03\u014D\x03\u014D\x03\u014E\x03\u014E\x03\u014E\x03\u014E\x03\u014E" +
    "\x03\u014E\x03\u014E\x03\u014F\x03\u014F\x03\u014F\x03\u014F\x03\u014F" +
    "\x03\u014F\x03\u014F\x03\u0150\x03\u0150\x03\u0150\x03\u0150\x03\u0150" +
    "\x03\u0151\x03\u0151\x03\u0151\x03\u0151\x03\u0151\x03\u0151\x03\u0151" +
    "\x03\u0152\x03\u0152\x03\u0152\x03\u0152\x03\u0152\x03\u0152\x03\u0152" +
    "\x03\u0152\x03\u0152\x03\u0152\x03\u0153\x03\u0153\x03\u0153\x03\u0153" +
    "\x03\u0153\x03\u0153\x03\u0153\x03\u0153\x03\u0153\x03\u0153\x03\u0154" +
    "\x03\u0154\x03\u0154\x03\u0154\x03\u0154\x03\u0154\x03\u0154\x03\u0154" +
    "\x03\u0154\x03\u0154\x03\u0154\x03\u0154\x03\u0154\x03\u0155\x03\u0155" +
    "\x03\u0155\x03\u0155\x03\u0156\x03\u0156\x03\u0156\x03\u0156\x03\u0156" +
    "\x03\u0157\x03\u0157\x03\u0157\x03\u0157\x03\u0157\x03\u0157\x03\u0157" +
    "\x03\u0157\x03\u0158\x03\u0158\x03\u0158\x03\u0158\x03\u0158\x03\u0159" +
    "\x03\u0159\x03\u0159\x03\u0159\x03\u0159\x03\u0159\x03\u0159\x03\u0159" +
    "\x03\u0159\x03\u015A\x03\u015A\x03\u015A\x03\u015A\x03\u015A\x03\u015B" +
    "\x03\u015B\x03\u015B\x03\u015B\x03\u015B\x03\u015B\x03\u015B\x03\u015B" +
    "\x03\u015B\x03\u015C\x03\u015C\x03\u015C\x03\u015C\x03\u015C\x03\u015C" +
    "\x03\u015C\x03\u015C\x03\u015C\x03\u015C\x03\u015C\x03\u015C\x03\u015C" +
    "\x03\u015D\x03\u015D\x03\u015D\x03\u015D\x03\u015E\x03\u015E\x03\u015E" +
    "\x03\u015E\x03\u015E\x03\u015E\x03\u015E\x03\u015E\x03\u015E\x03\u015E" +
    "\x03\u015E\x03\u015E\x03\u015E\x03\u015F\x03\u015F\x03\u015F\x03\u015F" +
    "\x03\u015F\x03\u015F\x03\u015F\x03\u015F\x03\u015F\x03\u0160\x03\u0160" +
    "\x03\u0160\x03\u0160\x03\u0160\x03\u0160\x03\u0160\x03\u0160\x03\u0160" +
    "\x03\u0160\x03\u0160\x03\u0161\x03\u0161\x03\u0161\x03\u0161\x03\u0161" +
    "\x03\u0162\x03\u0162\x03\u0162\x03\u0162\x03\u0162\x03\u0162\x03\u0163" +
    "\x03\u0163\x03\u0163\x03\u0163\x03\u0163\x03\u0163\x03\u0163\x03\u0163" +
    "\x03\u0163\x03\u0163\x03\u0164\x03\u0164\x03\u0164\x03\u0164\x03\u0164" +
    "\x03\u0164\x03\u0164\x03\u0165\x03\u0165\x03\u0165\x03\u0165\x03\u0165" +
    "\x03\u0165\x03\u0165\x03\u0165\x03\u0165\x03\u0165\x03\u0165\x03\u0166" +
    "\x03\u0166\x03\u0166\x03\u0166\x03\u0166\x03\u0166\x03\u0166\x03\u0166" +
    "\x03\u0166\x03\u0166\x03\u0166\x03\u0167\x03\u0167\x03\u0167\x03\u0167" +
    "\x03\u0167\x03\u0167\x03\u0167\x03\u0167\x03\u0167\x03\u0167\x03\u0167" +
    "\x03\u0167\x03\u0168\x03\u0168\x03\u0168\x03\u0168\x03\u0168\x03\u0168" +
    "\x03\u0168\x03\u0169\x03\u0169\x03\u0169\x03\u0169\x03\u0169\x03\u0169" +
    "\x03\u0169\x03\u016A\x03\u016A\x03\u016A\x03\u016A\x03\u016A\x03\u016A" +
    "\x03\u016A\x03\u016A\x03\u016A\x03\u016A\x03\u016A\x03\u016B\x03\u016B" +
    "\x03\u016B\x03\u016B\x03\u016B\x03\u016B\x03\u016B\x03\u016B\x03\u016B" +
    "\x03\u016B\x03\u016B\x03\u016B\x03\u016C\x03\u016C\x03\u016C\x03\u016C" +
    "\x03\u016C\x03\u016C\x03\u016C\x03\u016D\x03\u016D\x03\u016D\x03\u016D" +
    "\x03\u016D\x03\u016D\x03\u016D\x03\u016D\x03\u016D\x03\u016D\x03\u016E" +
    "\x03\u016E\x03\u016E\x03\u016E\x03\u016E\x03\u016E\x03\u016E\x03\u016E" +
    "\x03\u016E\x03\u016E\x03\u016E\x03\u016E\x03\u016E\x03\u016E\x03\u016E" +
    "\x03\u016E\x03\u016F\x03\u016F\x03\u016F\x03\u016F\x03\u016F\x03\u016F" +
    "\x03\u016F\x03\u016F\x03\u016F\x03\u0170\x03\u0170\x03\u0170\x03\u0170" +
    "\x03\u0171\x03\u0171\x03\u0171\x03\u0171\x03\u0171\x03\u0171\x03\u0171" +
    "\x03\u0172\x03\u0172\x03\u0172\x03\u0172\x03\u0172\x03\u0172\x03\u0172" +
    "\x03\u0172\x03\u0172\x03\u0172\x03\u0173\x03\u0173\x03\u0173\x03\u0173" +
    "\x03\u0173\x03\u0173\x03\u0173\x03\u0174\x03\u0174\x03\u0174\x03\u0174" +
    "\x03\u0174\x03\u0174\x03\u0174\x03\u0174\x03\u0174\x03\u0174\x03\u0174" +
    "\x03\u0174\x03\u0175\x03\u0175\x03\u0175\x03\u0175\x03\u0175\x03\u0175" +
    "\x03\u0175\x03\u0175\x03\u0175\x03\u0175\x03\u0175\x03\u0175\x03\u0176" +
    "\x03\u0176\x03\u0176\x03\u0176\x03\u0176\x03\u0176\x03\u0177\x03\u0177" +
    "\x03\u0177\x03\u0177\x03\u0177\x03\u0177\x03\u0177\x03\u0178\x03\u0178" +
    "\x03\u0178\x03\u0178\x03\u0178\x03\u0178\x03\u0178\x03\u0178\x03\u0178" +
    "\x03\u0178\x03\u0178\x03\u0178\x03\u0179\x03\u0179\x03\u0179\x03\u0179" +
    "\x03\u0179\x03\u017A\x03\u017A\x03\u017A\x03\u017A\x03\u017A\x03\u017A" +
    "\x03\u017A\x03\u017A\x03\u017A\x03\u017B\x03\u017B\x03\u017B\x03\u017B" +
    "\x03\u017B\x03\u017C\x03\u017C\x03\u017C\x03\u017C\x03\u017C\x03\u017C" +
    "\x03\u017C\x03\u017C\x03\u017C\x03\u017C\x03\u017D\x03\u017D\x03\u017D" +
    "\x03\u017D\x03\u017D\x03\u017D\x03\u017D\x03\u017D\x03\u017D\x03\u017D" +
    "\x03\u017D\x03\u017D\x03\u017D\x03\u017D\x03\u017D\x03\u017E\x03\u017E" +
    "\x03\u017E\x03\u017E\x03\u017E\x03\u017E\x03\u017E\x03\u017E\x03\u017E" +
    "\x03\u017E\x03\u017E\x03\u017E\x03\u017E\x03\u017E\x03\u017F\x03\u017F" +
    "\x03\u017F\x03\u017F\x03\u017F\x03\u017F\x03\u017F\x03\u017F\x03\u017F" +
    "\x03\u017F\x03\u017F\x03\u017F\x03\u017F\x03\u017F\x03\u017F\x03\u017F" +
    "\x03\u0180\x03\u0180\x03\u0180\x03\u0180\x03\u0180\x03\u0180\x03\u0180" +
    "\x03\u0180\x03\u0180\x03\u0180\x03\u0180\x03\u0180\x03\u0180\x03\u0180" +
    "\x03\u0181\x03\u0181\x03\u0181\x03\u0181\x03\u0181\x03\u0181\x03\u0181" +
    "\x03\u0181\x03\u0181\x03\u0181\x03\u0181\x03\u0181\x03\u0181\x03\u0181" +
    "\x03\u0181\x03\u0181\x03\u0182\x03\u0182\x03\u0182\x03\u0182\x03\u0182" +
    "\x03\u0182\x03\u0182\x03\u0182\x03\u0182\x03\u0182\x03\u0183\x03\u0183" +
    "\x03\u0183\x03\u0183\x03\u0183\x03\u0183\x03\u0183\x03\u0183\x03\u0183" +
    "\x03\u0183\x03\u0183\x03\u0184\x03\u0184\x03\u0184\x03\u0184\x03\u0184" +
    "\x03\u0184\x03\u0184\x03\u0184\x03\u0185\x03\u0185\x03\u0185\x03\u0186" +
    "\x03\u0186\x03\u0186\x03\u0186\x03\u0186\x03\u0186\x03\u0186\x03\u0186" +
    "\x03\u0186\x03\u0187\x03\u0187\x03\u0187\x03\u0187\x03\u0187\x03\u0187" +
    "\x03\u0187\x03\u0187\x03\u0187\x03\u0187\x03\u0188\x03\u0188\x03\u0188" +
    "\x03\u0188\x03\u0188\x03\u0188\x03\u0188\x03\u0188\x03\u0188\x03\u0188" +
    "\x03\u0188\x03\u0188\x03\u0188\x03\u0188\x03\u0188\x03\u0188\x03\u0189" +
    "\x03\u0189\x03\u0189\x03\u0189\x03\u0189\x03\u0189\x03\u0189\x03\u0189" +
    "\x03\u0189\x03\u0189\x03\u0189\x03\u0189\x03\u018A\x03\u018A\x03\u018A" +
    "\x03\u018A\x03\u018A\x03\u018A\x03\u018B\x03\u018B\x03\u018B\x03\u018B" +
    "\x03\u018B\x03\u018B\x03\u018B\x03\u018B\x03\u018C\x03\u018C\x03\u018C" +
    "\x03\u018C\x03\u018C\x03\u018D\x03\u018D\x03\u018D\x03\u018D\x03\u018D" +
    "\x03\u018D\x03\u018D\x03\u018D\x03\u018D\x03\u018D\x03\u018D\x03\u018E" +
    "\x03\u018E\x03\u018E\x03\u018E\x03\u018E\x03\u018F\x03\u018F\x03\u018F" +
    "\x03\u018F\x03\u018F\x03\u018F\x03\u018F\x03\u018F\x03\u018F\x03\u0190" +
    "\x03\u0190\x03\u0190\x03\u0190\x03\u0190\x03\u0190\x03\u0190\x03\u0190" +
    "\x03\u0190\x03\u0191\x03\u0191\x03\u0191\x03\u0191\x03\u0191\x03\u0191" +
    "\x03\u0191\x03\u0191\x03\u0192\x03\u0192\x03\u0192\x03\u0192\x03\u0192" +
    "\x03\u0192\x03\u0192\x03\u0192\x03\u0193\x03\u0193\x03\u0193\x03\u0193" +
    "\x03\u0193\x03\u0193\x03\u0194\x03\u0194\x03\u0194\x03\u0194\x03\u0194" +
    "\x03\u0194\x03\u0194\x03\u0195\x03\u0195\x03\u0195\x03\u0195\x03\u0195" +
    "\x03\u0195\x03\u0195\x03\u0195\x03\u0196\x03\u0196\x03\u0196\x03\u0196" +
    "\x03\u0196\x03\u0196\x03\u0196\x03\u0197\x03\u0197\x03\u0197\x03\u0197" +
    "\x03\u0197\x03\u0197\x03\u0197\x03\u0197\x03\u0198\x03\u0198\x03\u0198" +
    "\x03\u0198\x03\u0198\x03\u0198\x03\u0198\x03\u0199\x03\u0199\x03\u0199" +
    "\x03\u0199\x03\u0199\x03\u0199\x03\u019A\x03\u019A\x03\u019A\x03\u019A" +
    "\x03\u019A\x03\u019A\x03\u019A\x03\u019B\x03\u019B\x03\u019B\x03\u019B" +
    "\x03\u019C\x03\u019C\x03\u019C\x03\u019C\x03\u019C\x03\u019D\x03\u019D" +
    "\x03\u019D\x03\u019D\x03\u019D\x03\u019D\x03\u019E\x03\u019E\x03\u019E" +
    "\x03\u019E\x03\u019E\x03\u019E\x03\u019F\x03\u019F\x03\u019F\x03\u019F" +
    "\x03\u019F\x03\u019F\x03\u019F\x03\u01A0\x03\u01A0\x03\u01A0\x03\u01A0" +
    "\x03\u01A0\x03\u01A0\x03\u01A0\x03\u01A0\x03\u01A0\x03\u01A1\x03\u01A1" +
    "\x03\u01A1\x03\u01A1\x03\u01A1\x03\u01A1\x03\u01A1\x03\u01A1\x03\u01A1" +
    "\x03\u01A1\x03\u01A2\x03\u01A2\x03\u01A2\x03\u01A2\x03\u01A2\x03\u01A2" +
    "\x03\u01A2\x03\u01A2\x03\u01A3\x03\u01A3\x03\u01A3\x03\u01A3\x03\u01A3" +
    "\x03\u01A3\x03\u01A3\x03\u01A3\x03\u01A4\x03\u01A4\x03\u01A4\x03\u01A4" +
    "\x03\u01A4\x03\u01A4\x03\u01A4\x03\u01A4\x03\u01A5\x03\u01A5\x03\u01A5" +
    "\x03\u01A5\x03\u01A5\x03\u01A5\x03\u01A5\x03\u01A5\x03\u01A5\x03\u01A6" +
    "\x03\u01A6\x03\u01A6\x03\u01A6\x03\u01A6\x03\u01A6\x03\u01A6\x03\u01A6" +
    "\x03\u01A6\x03\u01A6\x03\u01A6\x03\u01A7\x03\u01A7\x03\u01A7\x03\u01A7" +
    "\x03\u01A7\x03\u01A7\x03\u01A8\x03\u01A8\x03\u01A8\x03\u01A8\x03\u01A8" +
    "\x03\u01A8\x03\u01A8\x03\u01A8\x03\u01A9\x03\u01A9\x03\u01A9\x03\u01A9" +
    "\x03\u01A9\x03\u01A9\x03\u01A9\x03\u01A9\x03\u01A9\x03\u01A9\x03\u01AA" +
    "\x03\u01AA\x03\u01AA\x03\u01AA\x03\u01AA\x03\u01AA\x03\u01AA\x03\u01AA" +
    "\x03\u01AA\x03\u01AA\x03\u01AA\x03\u01AB\x03\u01AB\x03\u01AB\x03\u01AB" +
    "\x03\u01AB\x03\u01AB\x03\u01AB\x03\u01AB\x03\u01AB\x03\u01AB\x03\u01AC" +
    "\x03\u01AC\x03\u01AC\x03\u01AC\x03\u01AC\x03\u01AC\x03\u01AD\x03\u01AD" +
    "\x03\u01AD\x03\u01AD\x03\u01AD\x03\u01AE\x03\u01AE\x03\u01AE\x03\u01AE" +
    "\x03\u01AE\x03\u01AE\x03\u01AE\x03\u01AE\x03\u01AE\x03\u01AF\x03\u01AF" +
    "\x03\u01AF\x03\u01AF\x03\u01AF\x03\u01AF\x03\u01B0\x03\u01B0\x03\u01B0" +
    "\x03\u01B0\x03\u01B0\x03\u01B0\x03\u01B0\x03\u01B0\x03\u01B0\x03\u01B0" +
    "\x03\u01B0\x03\u01B0\x03\u01B0\x03\u01B1\x03\u01B1\x03\u01B1\x03\u01B1" +
    "\x03\u01B1\x03\u01B1\x03\u01B1\x03\u01B2\x03\u01B2\x03\u01B2\x03\u01B2" +
    "\x03\u01B2\x03\u01B3\x03\u01B3\x03\u01B3\x03\u01B3\x03\u01B3\x03\u01B3" +
    "\x03\u01B3\x03\u01B4\x03\u01B4\x03\u01B4\x03\u01B4\x03\u01B4\x03\u01B4" +
    "\x03\u01B4\x03\u01B4\x03\u01B5\x03\u01B5\x03\u01B5\x03\u01B5\x03\u01B5" +
    "\x03\u01B6\x03\u01B6\x03\u01B6\x03\u01B6\x03\u01B7\x03\u01B7\x03\u01B7" +
    "\x03\u01B7\x03\u01B7\x03\u01B7\x03\u01B8\x03\u01B8\x03\u01B8\x03\u01B8" +
    "\x03\u01B9\x03\u01B9\x03\u01B9\x03\u01B9\x03\u01B9\x03\u01B9\x03\u01B9" +
    "\x03\u01B9\x03\u01BA\x03\u01BA\x03\u01BA\x03\u01BA\x03\u01BA\x03\u01BA" +
    "\x03\u01BA\x03\u01BA\x03\u01BB\x03\u01BB\x03\u01BB\x03\u01BB\x03\u01BB" +
    "\x03\u01BB\x03\u01BB\x03\u01BB\x03\u01BC\x03\u01BC\x03\u01BC\x03\u01BC" +
    "\x03\u01BC\x03\u01BC\x03\u01BC\x03\u01BD\x03\u01BD\x03\u01BD\x03\u01BD" +
    "\x03\u01BD\x03\u01BD\x03\u01BD\x03\u01BD\x03\u01BD\x03\u01BD\x03\u01BD" +
    "\x03\u01BD\x03\u01BE\x03\u01BE\x03\u01BE\x03\u01BE\x03\u01BE\x03\u01BE" +
    "\x03\u01BE\x03\u01BE\x03\u01BE\x03\u01BF\x03\u01BF\x03\u01BF\x03\u01BF" +
    "\x03\u01BF\x03\u01C0\x03\u01C0\x03\u01C0\x03\u01C0\x03\u01C0\x03\u01C0" +
    "\x03\u01C0\x03\u01C0\x03\u01C0\x03\u01C1\x03\u01C1\x03\u01C1\x03\u01C1" +
    "\x03\u01C1\x03\u01C2\x03\u01C2\x03\u01C2\x03\u01C2\x03\u01C2\x03\u01C2" +
    "\x03\u01C2\x03\u01C3\x03\u01C3\x03\u01C3\x03\u01C3\x03\u01C3\x03\u01C4" +
    "\x03\u01C4\x03\u01C4\x03\u01C4\x03\u01C4\x03\u01C4\x03\u01C4\x03\u01C4" +
    "\x03\u01C4\x03\u01C4\x03\u01C4\x03\u01C5\x03\u01C5\x03\u01C5\x03\u01C5" +
    "\x03\u01C6\x03\u01C6\x03\u01C6\x03\u01C6\x03\u01C6\x03\u01C6\x03\u01C6" +
    "\x03\u01C7\x03\u01C7\x03\u01C7\x03\u01C7\x03\u01C7\x03\u01C7\x03\u01C8" +
    "\x03\u01C8\x03\u01C8\x03\u01C8\x03\u01C8\x03\u01C8\x03\u01C8\x03\u01C8" +
    "\x03\u01C8\x03\u01C8\x03\u01C9\x03\u01C9\x03\u01C9\x03\u01C9\x03\u01C9" +
    "\x03\u01CA\x03\u01CA\x03\u01CA\x03\u01CA\x03\u01CA\x03\u01CA\x03\u01CB" +
    "\x03\u01CB\x03\u01CB\x03\u01CB\x03\u01CB\x03\u01CB\x03\u01CB\x03\u01CB" +
    "\x03\u01CB\x03\u01CB\x03\u01CC\x03\u01CC\x03\u01CC\x03\u01CC\x03\u01CD" +
    "\x03\u01CD\x03\u01CD\x03\u01CD\x03\u01CD\x03\u01CD\x03\u01CE\x03\u01CE" +
    "\x03\u01CE\x03\u01CE\x03\u01CE\x03\u01CE\x03\u01CE\x03\u01CF\x03\u01CF" +
    "\x03\u01CF\x03\u01CF\x03\u01CF\x03\u01CF\x03\u01CF\x03\u01CF\x03\u01CF" +
    "\x03\u01CF\x03\u01D0\x03\u01D0\x03\u01D0\x03\u01D0\x03\u01D1\x03\u01D1" +
    "\x03\u01D1\x03\u01D1\x03\u01D1\x03\u01D2\x03\u01D2\x03\u01D2\x03\u01D2" +
    "\x03\u01D2\x03\u01D3\x03\u01D3\x03\u01D3\x03\u01D3\x03\u01D4\x03\u01D4" +
    "\x03\u01D4\x03\u01D4\x03\u01D4\x03\u01D5\x03\u01D5\x03\u01D5\x03\u01D5" +
    "\x03\u01D5\x03\u01D6\x03\u01D6\x03\u01D6\x03\u01D6\x03\u01D7\x03\u01D7" +
    "\x03\u01D7\x03\u01D7\x03\u01D7\x03\u01D7\x03\u01D7\x03\u01D7\x03\u01D7" +
    "\x03\u01D7\x03\u01D7\x03\u01D7\x03\u01D8\x03\u01D8\x03\u01D8";
FlinkSqlLexer._serializedATNSegment2 = "\x03\u01D8\x03\u01D8\x03\u01D8\x03\u01D8\x03\u01D8\x03\u01D8\x03\u01D8" +
    "\x03\u01D8\x03\u01D9\x03\u01D9\x03\u01D9\x03\u01D9\x03\u01D9\x03\u01D9" +
    "\x03\u01D9\x03\u01D9\x03\u01D9\x03\u01D9\x03\u01D9\x03\u01D9\x03\u01DA" +
    "\x03\u01DA\x03\u01DA\x03\u01DA\x03\u01DA\x03\u01DA\x03\u01DA\x03\u01DA" +
    "\x03\u01DB\x03\u01DB\x03\u01DB\x03\u01DB\x03\u01DB\x03\u01DB\x03\u01DB" +
    "\x03\u01DC\x03\u01DC\x03\u01DC\x03\u01DC\x03\u01DC\x03\u01DC\x03\u01DC" +
    "\x03\u01DC\x03\u01DC\x03\u01DC\x03\u01DC\x03\u01DD\x03\u01DD\x03\u01DD" +
    "\x03\u01DD\x03\u01DD\x03\u01DD\x03\u01DE\x03\u01DE\x03\u01DE\x03\u01DE" +
    "\x03\u01DE\x03\u01DE\x03\u01DE\x03\u01DE\x03\u01DF\x03\u01DF\x03\u01DF" +
    "\x03\u01DF\x03\u01DF\x03\u01E0\x03\u01E0\x03\u01E0\x03\u01E0\x03\u01E0" +
    "\x03\u01E1\x03\u01E1\x03\u01E1\x03\u01E1\x03\u01E1\x03\u01E1\x03\u01E1" +
    "\x03\u01E1\x03\u01E1\x03\u01E1\x03\u01E2\x03\u01E2\x03\u01E2\x03\u01E2" +
    "\x03\u01E2\x03\u01E2\x03\u01E2\x03\u01E3\x03\u01E3\x03\u01E3\x03\u01E3" +
    "\x03\u01E3\x03\u01E3\x03\u01E3\x03\u01E3\x03\u01E3\x03\u01E3\x03\u01E3" +
    "\x03\u01E3\x03\u01E3\x03\u01E3\x03\u01E3\x03\u01E3\x03\u01E4\x03\u01E4" +
    "\x03\u01E4\x03\u01E4\x03\u01E4\x03\u01E4\x03\u01E4\x03\u01E4\x03\u01E4" +
    "\x03\u01E4\x03\u01E4\x03\u01E4\x03\u01E4\x03\u01E4\x03\u01E4\x03\u01E4" +
    "\x03\u01E4\x03\u01E4\x03\u01E4\x03\u01E4\x03\u01E5\x03\u01E5\x03\u01E5" +
    "\x03\u01E5\x03\u01E5\x03\u01E5\x03\u01E5\x03\u01E5\x03\u01E5\x03\u01E5" +
    "\x03\u01E5\x03\u01E5\x03\u01E5\x03\u01E6\x03\u01E6\x03\u01E6\x03\u01E6" +
    "\x03\u01E6\x03\u01E6\x03\u01E6\x03\u01E6\x03\u01E6\x03\u01E6\x03\u01E6" +
    "\x03\u01E7\x03\u01E7\x03\u01E7\x03\u01E7\x03\u01E7\x03\u01E7\x03\u01E7" +
    "\x03\u01E7\x03\u01E7\x03\u01E7\x03\u01E7\x03\u01E7\x03\u01E7\x03\u01E7" +
    "\x03\u01E7\x03\u01E7\x03\u01E7\x03\u01E8\x03\u01E8\x03\u01E8\x03\u01E8" +
    "\x03\u01E8\x03\u01E8\x03\u01E8\x03\u01E8\x03\u01E8\x03\u01E8\x03\u01E8" +
    "\x03\u01E8\x03\u01E8\x03\u01E8\x03\u01E8\x03\u01E8\x03\u01E8\x03\u01E8" +
    "\x03\u01E8\x03\u01E8\x03\u01E9\x03\u01E9\x03\u01E9\x03\u01E9\x03\u01E9" +
    "\x03\u01E9\x03\u01E9\x03\u01E9\x03\u01EA\x03\u01EA\x03\u01EA\x03\u01EA" +
    "\x03\u01EA\x03\u01EA\x03\u01EA\x03\u01EB\x03\u01EB\x03\u01EB\x03\u01EB" +
    "\x03\u01EB\x03\u01EB\x03\u01EB\x03\u01EB\x03\u01EB\x03\u01EC\x03\u01EC" +
    "\x03\u01EC\x03\u01EC\x03\u01EC\x03\u01EC\x03\u01EC\x03\u01EC\x03\u01ED" +
    "\x03\u01ED\x03\u01ED\x03\u01ED\x03\u01ED\x03\u01ED\x03\u01ED\x03\u01ED" +
    "\x03\u01EE\x03\u01EE\x03\u01EE\x03\u01EE\x03\u01EE\x03\u01EF\x03\u01EF" +
    "\x03\u01EF\x03\u01EF\x03\u01EF\x03\u01F0\x03\u01F0\x03\u01F0\x03\u01F0" +
    "\x03\u01F0\x03\u01F0\x03\u01F1\x03\u01F1\x03\u01F1\x03\u01F1\x03\u01F1" +
    "\x03\u01F2\x03\u01F2\x03\u01F2\x03\u01F2\x03\u01F2\x03\u01F2\x03\u01F2" +
    "\x03\u01F2\x03\u01F2\x03\u01F2\x03\u01F3\x03\u01F3\x03\u01F3\x03\u01F3" +
    "\x03\u01F3\x03\u01F3\x03\u01F3\x03\u01F3\x03\u01F4\x03\u01F4\x03\u01F4" +
    "\x03\u01F4\x03\u01F4\x03\u01F4\x03\u01F4\x03\u01F5\x03\u01F5\x03\u01F5" +
    "\x03\u01F5\x03\u01F5\x03\u01F5\x03\u01F5\x03\u01F6\x03\u01F6\x03\u01F6" +
    "\x03\u01F6\x03\u01F6\x03\u01F7\x03\u01F7\x03\u01F7\x03\u01F7\x03\u01F7" +
    "\x03\u01F8\x03\u01F8\x03\u01F8\x03\u01F8\x03\u01F8\x03\u01F8\x03\u01F9" +
    "\x03\u01F9\x03\u01F9\x03\u01F9\x03\u01F9\x03\u01FA\x03\u01FA\x03\u01FB" +
    "\x03\u01FB\x03\u01FC\x03\u01FC\x03\u01FD\x03\u01FD\x03\u01FE\x03\u01FE" +
    "\x03\u01FF\x03\u01FF\x03\u0200\x03\u0200\x03\u0201\x03\u0201\x03\u0202" +
    "\x03\u0202\x03\u0203\x03\u0203\x03\u0204\x03\u0204\x03\u0205\x03\u0205" +
    "\x03\u0206\x03\u0206\x03\u0207\x03\u0207\x03\u0208\x03\u0208\x03\u0209" +
    "\x03\u0209\x03\u020A\x03\u020A\x03\u020B\x03\u020B\x03\u020C\x03\u020C" +
    "\x03\u020D\x03\u020D\x03\u020E\x03\u020E\x03\u020F\x03\u020F\x03\u0210" +
    "\x03\u0210\x03\u0211\x03\u0211\x03\u0212\x03\u0212\x03\u0213\x03\u0213" +
    "\x03\u0214\x03\u0214\x03\u0215\x03\u0215\x03\u0215\x03\u0216\x03\u0216" +
    "\x03\u0216\x03\u0217\x03\u0217\x03\u0218\x03\u0218\x03\u0219\x03\u0219" +
    "\x03\u0219\x03\u021A\x03\u021A\x03\u021A\x05\u021A\u14EF\n\u021A\x03\u021B" +
    "\x06\u021B\u14F2\n\u021B\r\u021B\x0E\u021B\u14F3\x03\u021C\x06\u021C\u14F7" +
    "\n\u021C\r\u021C\x0E\u021C\u14F8\x05\u021C\u14FB\n\u021C\x03\u021C\x03" +
    "\u021C\x06\u021C\u14FF\n\u021C\r\u021C\x0E\u021C\u1500\x03\u021C\x06\u021C" +
    "\u1504\n\u021C\r\u021C\x0E\u021C\u1505\x03\u021C\x03\u021C\x03\u021C\x03" +
    "\u021C\x06\u021C\u150C\n\u021C\r\u021C\x0E\u021C\u150D\x05\u021C\u1510" +
    "\n\u021C\x03\u021C\x03\u021C\x06\u021C\u1514\n\u021C\r\u021C\x0E\u021C" +
    "\u1515\x03\u021C\x03\u021C\x03\u021C\x06\u021C\u151B\n\u021C\r\u021C\x0E" +
    "\u021C\u151C\x03\u021C\x03\u021C\x05\u021C\u1521\n\u021C\x03\u021D\x03" +
    "\u021D\x03\u021E\x03\u021E\x03\u021F\x03\u021F\x03\u021F\x03\u021F\x03" +
    "\u021F\x03\u021F\x07\u021F\u152D\n\u021F\f\u021F\x0E\u021F\u1530\v\u021F" +
    "\x03\u021F\x03\u021F\x03\u0220\x03\u0220\x05\u0220\u1536\n\u0220\x03\u0220" +
    "\x06\u0220\u1539\n\u0220\r\u0220\x0E\u0220\u153A\x03\u0221\x07\u0221\u153E" +
    "\n\u0221\f\u0221\x0E\u0221\u1541\v\u0221\x03\u0221\x06\u0221\u1544\n\u0221" +
    "\r\u0221\x0E\u0221\u1545\x03\u0221\x07\u0221\u1549\n\u0221\f\u0221\x0E" +
    "\u0221\u154C\v\u0221\x03\u0222\x03\u0222\x03\u0223\x03\u0223\x03\u0224" +
    "\x03\u0224\x03\u0224\x03\u0224\x03\u0224\x03\u0224\x07\u0224\u1558\n\u0224" +
    "\f\u0224\x0E\u0224\u155B\v\u0224\x03\u0224\x03\u0224\x03\u0225\x03\u0225" +
    "\x03\u0225\x03\u0225\x03\u0225\x03\u0225\x07\u0225\u1565\n\u0225\f\u0225" +
    "\x0E\u0225\u1568\v\u0225\x03\u0225\x03\u0225\x03\u0226\x03\u0226\x03\u0226" +
    "\x06\u0226\u156F\n\u0226\r\u0226\x0E\u0226\u1570\x03\u0226\x03\u0226\x03" +
    "\u0227\x03\u0227\x03\u0227\x03\u0227\x03\u0227\x03\u0227\x07\u0227\u157B" +
    "\n\u0227\f\u0227\x0E\u0227\u157E\v\u0227\x03\u0227\x03\u0227\x05\u045C" +
    "\u153F\u1545\x02\x02\u0228\x03\x02\x03\x05\x02\x04\x07\x02\x05\t\x02\x06" +
    "\v\x02\x07\r\x02\b\x0F\x02\t\x11\x02\n\x13\x02\v\x15\x02\f\x17\x02\r\x19" +
    "\x02\x0E\x1B\x02\x0F\x1D\x02\x10\x1F\x02\x11!\x02\x12#\x02\x13%\x02\x14" +
    "\'\x02\x15)\x02\x16+\x02\x17-\x02\x18/\x02\x191\x02\x1A3\x02\x1B5\x02" +
    "\x1C7\x02\x1D9\x02\x1E;\x02\x1F=\x02 ?\x02!A\x02\"C\x02#E\x02$G\x02%I" +
    "\x02&K\x02\'M\x02(O\x02)Q\x02*S\x02+U\x02,W\x02-Y\x02.[\x02/]\x020_\x02" +
    "1a\x022c\x023e\x024g\x025i\x026k\x027m\x028o\x029q\x02:s\x02;u\x02<w\x02" +
    "=y\x02>{\x02?}\x02@\x7F\x02A\x81\x02B\x83\x02C\x85\x02D\x87\x02E\x89\x02" +
    "F\x8B\x02G\x8D\x02H\x8F\x02I\x91\x02J\x93\x02K\x95\x02L\x97\x02M\x99\x02" +
    "N\x9B\x02O\x9D\x02P\x9F\x02Q\xA1\x02R\xA3\x02S\xA5\x02T\xA7\x02U\xA9\x02" +
    "V\xAB\x02W\xAD\x02X\xAF\x02Y\xB1\x02Z\xB3\x02[\xB5\x02\\\xB7\x02]\xB9" +
    "\x02^\xBB\x02_\xBD\x02`\xBF\x02a\xC1\x02b\xC3\x02c\xC5\x02d\xC7\x02e\xC9" +
    "\x02f\xCB\x02g\xCD\x02h\xCF\x02i\xD1\x02j\xD3\x02k\xD5\x02l\xD7\x02m\xD9" +
    "\x02n\xDB\x02o\xDD\x02p\xDF\x02q\xE1\x02r\xE3\x02s\xE5\x02t\xE7\x02u\xE9" +
    "\x02v\xEB\x02w\xED\x02x\xEF\x02y\xF1\x02z\xF3\x02{\xF5\x02|\xF7\x02}\xF9" +
    "\x02~\xFB\x02\x7F\xFD\x02\x80\xFF\x02\x81\u0101\x02\x82\u0103\x02\x83" +
    "\u0105\x02\x84\u0107\x02\x85\u0109\x02\x86\u010B\x02\x87\u010D\x02\x88" +
    "\u010F\x02\x89\u0111\x02\x8A\u0113\x02\x8B\u0115\x02\x8C\u0117\x02\x8D" +
    "\u0119\x02\x8E\u011B\x02\x8F\u011D\x02\x90\u011F\x02\x91\u0121\x02\x92" +
    "\u0123\x02\x93\u0125\x02\x94\u0127\x02\x95\u0129\x02\x96\u012B\x02\x97" +
    "\u012D\x02\x98\u012F\x02\x99\u0131\x02\x9A\u0133\x02\x9B\u0135\x02\x9C" +
    "\u0137\x02\x9D\u0139\x02\x9E\u013B\x02\x9F\u013D\x02\xA0\u013F\x02\xA1" +
    "\u0141\x02\xA2\u0143\x02\xA3\u0145\x02\xA4\u0147\x02\xA5\u0149\x02\xA6" +
    "\u014B\x02\xA7\u014D\x02\xA8\u014F\x02\xA9\u0151\x02\xAA\u0153\x02\xAB" +
    "\u0155\x02\xAC\u0157\x02\xAD\u0159\x02\xAE\u015B\x02\xAF\u015D\x02\xB0" +
    "\u015F\x02\xB1\u0161\x02\xB2\u0163\x02\xB3\u0165\x02\xB4\u0167\x02\xB5" +
    "\u0169\x02\xB6\u016B\x02\xB7\u016D\x02\xB8\u016F\x02\xB9\u0171\x02\xBA" +
    "\u0173\x02\xBB\u0175\x02\xBC\u0177\x02\xBD\u0179\x02\xBE\u017B\x02\xBF" +
    "\u017D\x02\xC0\u017F\x02\xC1\u0181\x02\xC2\u0183\x02\xC3\u0185\x02\xC4" +
    "\u0187\x02\xC5\u0189\x02\xC6\u018B\x02\xC7\u018D\x02\xC8\u018F\x02\xC9" +
    "\u0191\x02\xCA\u0193\x02\xCB\u0195\x02\xCC\u0197\x02\xCD\u0199\x02\xCE" +
    "\u019B\x02\xCF\u019D\x02\xD0\u019F\x02\xD1\u01A1\x02\xD2\u01A3\x02\xD3" +
    "\u01A5\x02\xD4\u01A7\x02\xD5\u01A9\x02\xD6\u01AB\x02\xD7\u01AD\x02\xD8" +
    "\u01AF\x02\xD9\u01B1\x02\xDA\u01B3\x02\xDB\u01B5\x02\xDC\u01B7\x02\xDD" +
    "\u01B9\x02\xDE\u01BB\x02\xDF\u01BD\x02\xE0\u01BF\x02\xE1\u01C1\x02\xE2" +
    "\u01C3\x02\xE3\u01C5\x02\xE4\u01C7\x02\xE5\u01C9\x02\xE6\u01CB\x02\xE7" +
    "\u01CD\x02\xE8\u01CF\x02\xE9\u01D1\x02\xEA\u01D3\x02\xEB\u01D5\x02\xEC" +
    "\u01D7\x02\xED\u01D9\x02\xEE\u01DB\x02\xEF\u01DD\x02\xF0\u01DF\x02\xF1" +
    "\u01E1\x02\xF2\u01E3\x02\xF3\u01E5\x02\xF4\u01E7\x02\xF5\u01E9\x02\xF6" +
    "\u01EB\x02\xF7\u01ED\x02\xF8\u01EF\x02\xF9\u01F1\x02\xFA\u01F3\x02\xFB" +
    "\u01F5\x02\xFC\u01F7\x02\xFD\u01F9\x02\xFE\u01FB\x02\xFF\u01FD\x02\u0100" +
    "\u01FF\x02\u0101\u0201\x02\u0102\u0203\x02\u0103\u0205\x02\u0104\u0207" +
    "\x02\u0105\u0209\x02\u0106\u020B\x02\u0107\u020D\x02\u0108\u020F\x02\u0109" +
    "\u0211\x02\u010A\u0213\x02\u010B\u0215\x02\u010C\u0217\x02\u010D\u0219" +
    "\x02\u010E\u021B\x02\u010F\u021D\x02\u0110\u021F\x02\u0111\u0221\x02\u0112" +
    "\u0223\x02\u0113\u0225\x02\u0114\u0227\x02\u0115\u0229\x02\u0116\u022B" +
    "\x02\u0117\u022D\x02\u0118\u022F\x02\u0119\u0231\x02\u011A\u0233\x02\u011B" +
    "\u0235\x02\u011C\u0237\x02\u011D\u0239\x02\u011E\u023B\x02\u011F\u023D" +
    "\x02\u0120\u023F\x02\u0121\u0241\x02\u0122\u0243\x02\u0123\u0245\x02\u0124" +
    "\u0247\x02\u0125\u0249\x02\u0126\u024B\x02\u0127\u024D\x02\u0128\u024F" +
    "\x02\u0129\u0251\x02\u012A\u0253\x02\u012B\u0255\x02\u012C\u0257\x02\u012D" +
    "\u0259\x02\u012E\u025B\x02\u012F\u025D\x02\u0130\u025F\x02\u0131\u0261" +
    "\x02\u0132\u0263\x02\u0133\u0265\x02\u0134\u0267\x02\u0135\u0269\x02\u0136" +
    "\u026B\x02\u0137\u026D\x02\u0138\u026F\x02\u0139\u0271\x02\u013A\u0273" +
    "\x02\u013B\u0275\x02\u013C\u0277\x02\u013D\u0279\x02\u013E\u027B\x02\u013F" +
    "\u027D\x02\u0140\u027F\x02\u0141\u0281\x02\u0142\u0283\x02\u0143\u0285" +
    "\x02\u0144\u0287\x02\u0145\u0289\x02\u0146\u028B\x02\u0147\u028D\x02\u0148" +
    "\u028F\x02\u0149\u0291\x02\u014A\u0293\x02\u014B\u0295\x02\u014C\u0297" +
    "\x02\u014D\u0299\x02\u014E\u029B\x02\u014F\u029D\x02\u0150\u029F\x02\u0151" +
    "\u02A1\x02\u0152\u02A3\x02\u0153\u02A5\x02\u0154\u02A7\x02\u0155\u02A9" +
    "\x02\u0156\u02AB\x02\u0157\u02AD\x02\u0158\u02AF\x02\u0159\u02B1\x02\u015A" +
    "\u02B3\x02\u015B\u02B5\x02\u015C\u02B7\x02\u015D\u02B9\x02\u015E\u02BB" +
    "\x02\u015F\u02BD\x02\u0160\u02BF\x02\u0161\u02C1\x02\u0162\u02C3\x02\u0163" +
    "\u02C5\x02\u0164\u02C7\x02\u0165\u02C9\x02\u0166\u02CB\x02\u0167\u02CD" +
    "\x02\u0168\u02CF\x02\u0169\u02D1\x02\u016A\u02D3\x02\u016B\u02D5\x02\u016C" +
    "\u02D7\x02\u016D\u02D9\x02\u016E\u02DB\x02\u016F\u02DD\x02\u0170\u02DF" +
    "\x02\u0171\u02E1\x02\u0172\u02E3\x02\u0173\u02E5\x02\u0174\u02E7\x02\u0175" +
    "\u02E9\x02\u0176\u02EB\x02\u0177\u02ED\x02\u0178\u02EF\x02\u0179\u02F1" +
    "\x02\u017A\u02F3\x02\u017B\u02F5\x02\u017C\u02F7\x02\u017D\u02F9\x02\u017E" +
    "\u02FB\x02\u017F\u02FD\x02\u0180\u02FF\x02\u0181\u0301\x02\u0182\u0303" +
    "\x02\u0183\u0305\x02\u0184\u0307\x02\u0185\u0309\x02\u0186\u030B\x02\u0187" +
    "\u030D\x02\u0188\u030F\x02\u0189\u0311\x02\u018A\u0313\x02\u018B\u0315" +
    "\x02\u018C\u0317\x02\u018D\u0319\x02\u018E\u031B\x02\u018F\u031D\x02\u0190" +
    "\u031F\x02\u0191\u0321\x02\u0192\u0323\x02\u0193\u0325\x02\u0194\u0327" +
    "\x02\u0195\u0329\x02\u0196\u032B\x02\u0197\u032D\x02\u0198\u032F\x02\u0199" +
    "\u0331\x02\u019A\u0333\x02\u019B\u0335\x02\u019C\u0337\x02\u019D\u0339" +
    "\x02\u019E\u033B\x02\u019F\u033D\x02\u01A0\u033F\x02\u01A1\u0341\x02\u01A2" +
    "\u0343\x02\u01A3\u0345\x02\u01A4\u0347\x02\u01A5\u0349\x02\u01A6\u034B" +
    "\x02\u01A7\u034D\x02\u01A8\u034F\x02\u01A9\u0351\x02\u01AA\u0353\x02\u01AB" +
    "\u0355\x02\u01AC\u0357\x02\u01AD\u0359\x02\u01AE\u035B\x02\u01AF\u035D" +
    "\x02\u01B0\u035F\x02\u01B1\u0361\x02\u01B2\u0363\x02\u01B3\u0365\x02\u01B4" +
    "\u0367\x02\u01B5\u0369\x02\u01B6\u036B\x02\u01B7\u036D\x02\u01B8\u036F" +
    "\x02\u01B9\u0371\x02\u01BA\u0373\x02\u01BB\u0375\x02\u01BC\u0377\x02\u01BD" +
    "\u0379\x02\u01BE\u037B\x02\u01BF\u037D\x02\u01C0\u037F\x02\u01C1\u0381" +
    "\x02\u01C2\u0383\x02\u01C3\u0385\x02\u01C4\u0387\x02\u01C5\u0389\x02\u01C6" +
    "\u038B\x02\u01C7\u038D\x02\u01C8\u038F\x02\u01C9\u0391\x02\u01CA\u0393" +
    "\x02\u01CB\u0395\x02\u01CC\u0397\x02\u01CD\u0399\x02\u01CE\u039B\x02\u01CF" +
    "\u039D\x02\u01D0\u039F\x02\u01D1\u03A1\x02\u01D2\u03A3\x02\u01D3\u03A5" +
    "\x02\u01D4\u03A7\x02\u01D5\u03A9\x02\u01D6\u03AB\x02\u01D7\u03AD\x02\u01D8" +
    "\u03AF\x02\u01D9\u03B1\x02\u01DA\u03B3\x02\u01DB\u03B5\x02\u01DC\u03B7" +
    "\x02\u01DD\u03B9\x02\u01DE\u03BB\x02\u01DF\u03BD\x02\u01E0\u03BF\x02\u01E1" +
    "\u03C1\x02\u01E2\u03C3\x02\u01E3\u03C5\x02\u01E4\u03C7\x02\u01E5\u03C9" +
    "\x02\u01E6\u03CB\x02\u01E7\u03CD\x02\u01E8\u03CF\x02\u01E9\u03D1\x02\u01EA" +
    "\u03D3\x02\u01EB\u03D5\x02\u01EC\u03D7\x02\u01ED\u03D9\x02\u01EE\u03DB" +
    "\x02\u01EF\u03DD\x02\u01F0\u03DF\x02\u01F1\u03E1\x02\u01F2\u03E3\x02\u01F3" +
    "\u03E5\x02\u01F4\u03E7\x02\u01F5\u03E9\x02\u01F6\u03EB\x02\u01F7\u03ED" +
    "\x02\u01F8\u03EF\x02\u01F9\u03F1\x02\u01FA\u03F3\x02\u01FB\u03F5\x02\u01FC" +
    "\u03F7\x02\u01FD\u03F9\x02\u01FE\u03FB\x02\u01FF\u03FD\x02\u0200\u03FF" +
    "\x02\u0201\u0401\x02\u0202\u0403\x02\u0203\u0405\x02\u0204\u0407\x02\u0205" +
    "\u0409\x02\u0206\u040B\x02\u0207\u040D\x02\u0208\u040F\x02\u0209\u0411" +
    "\x02\u020A\u0413\x02\u020B\u0415\x02\u020C\u0417\x02\u020D\u0419\x02\u020E" +
    "\u041B\x02\u020F\u041D\x02\u0210\u041F\x02\u0211\u0421\x02\u0212\u0423" +
    "\x02\u0213\u0425\x02\u0214\u0427\x02\u0215\u0429\x02\u0216\u042B\x02\u0217" +
    "\u042D\x02\u0218\u042F\x02\u0219\u0431\x02\u021A\u0433\x02\u021B\u0435" +
    "\x02\u021C\u0437\x02\u021D\u0439\x02\u021E\u043B\x02\u021F\u043D\x02\x02" +
    "\u043F\x02\x02\u0441\x02\x02\u0443\x02\x02\u0445\x02\x02\u0447\x02\x02" +
    "\u0449\x02\x02\u044B\x02\x02\u044D\x02\x02\x03\x02\r\x05\x02\v\f\x0F\x0F" +
    "\"\"\x04\x02\f\f\x0F\x0F\x04\x02^^bb\x04\x02--//\x06\x022;C\\aac|\x05" +
    "\x02C\\aac|\x03\x022;\x04\x02C\\c|\x04\x02$$^^\x04\x02))^^\x03\x0223\x02" +
    "\u15A0\x02\x03\x03\x02\x02\x02\x02\x05\x03\x02\x02\x02\x02\x07\x03\x02" +
    "\x02\x02\x02\t\x03\x02\x02\x02\x02\v\x03\x02\x02\x02\x02\r\x03\x02\x02" +
    "\x02\x02\x0F\x03\x02\x02\x02\x02\x11\x03\x02\x02\x02\x02\x13\x03\x02\x02" +
    "\x02\x02\x15\x03\x02\x02\x02\x02\x17\x03\x02\x02\x02\x02\x19\x03\x02\x02" +
    "\x02\x02\x1B\x03\x02\x02\x02\x02\x1D\x03\x02\x02\x02\x02\x1F\x03\x02\x02" +
    "\x02\x02!\x03\x02\x02\x02\x02#\x03\x02\x02\x02\x02%\x03\x02\x02\x02\x02" +
    "\'\x03\x02\x02\x02\x02)\x03\x02\x02\x02\x02+\x03\x02\x02\x02\x02-\x03" +
    "\x02\x02\x02\x02/\x03\x02\x02\x02\x021\x03\x02\x02\x02\x023\x03\x02\x02" +
    "\x02\x025\x03\x02\x02\x02\x027\x03\x02\x02\x02\x029\x03\x02\x02\x02\x02" +
    ";\x03\x02\x02\x02\x02=\x03\x02\x02\x02\x02?\x03\x02\x02\x02\x02A\x03\x02" +
    "\x02\x02\x02C\x03\x02\x02\x02\x02E\x03\x02\x02\x02\x02G\x03\x02\x02\x02" +
    "\x02I\x03\x02\x02\x02\x02K\x03\x02\x02\x02\x02M\x03\x02\x02\x02\x02O\x03" +
    "\x02\x02\x02\x02Q\x03\x02\x02\x02\x02S\x03\x02\x02\x02\x02U\x03\x02\x02" +
    "\x02\x02W\x03\x02\x02\x02\x02Y\x03\x02\x02\x02\x02[\x03\x02\x02\x02\x02" +
    "]\x03\x02\x02\x02\x02_\x03\x02\x02\x02\x02a\x03\x02\x02\x02\x02c\x03\x02" +
    "\x02\x02\x02e\x03\x02\x02\x02\x02g\x03\x02\x02\x02\x02i\x03\x02\x02\x02" +
    "\x02k\x03\x02\x02\x02\x02m\x03\x02\x02\x02\x02o\x03\x02\x02\x02\x02q\x03" +
    "\x02\x02\x02\x02s\x03\x02\x02\x02\x02u\x03\x02\x02\x02\x02w\x03\x02\x02" +
    "\x02\x02y\x03\x02\x02\x02\x02{\x03\x02\x02\x02\x02}\x03\x02\x02\x02\x02" +
    "\x7F\x03\x02\x02\x02\x02\x81\x03\x02\x02\x02\x02\x83\x03\x02\x02\x02\x02" +
    "\x85\x03\x02\x02\x02\x02\x87\x03\x02\x02\x02\x02\x89\x03\x02\x02\x02\x02" +
    "\x8B\x03\x02\x02\x02\x02\x8D\x03\x02\x02\x02\x02\x8F\x03\x02\x02\x02\x02" +
    "\x91\x03\x02\x02\x02\x02\x93\x03\x02\x02\x02\x02\x95\x03\x02\x02\x02\x02" +
    "\x97\x03\x02\x02\x02\x02\x99\x03\x02\x02\x02\x02\x9B\x03\x02\x02\x02\x02" +
    "\x9D\x03\x02\x02\x02\x02\x9F\x03\x02\x02\x02\x02\xA1\x03\x02\x02\x02\x02" +
    "\xA3\x03\x02\x02\x02\x02\xA5\x03\x02\x02\x02\x02\xA7\x03\x02\x02\x02\x02" +
    "\xA9\x03\x02\x02\x02\x02\xAB\x03\x02\x02\x02\x02\xAD\x03\x02\x02\x02\x02" +
    "\xAF\x03\x02\x02\x02\x02\xB1\x03\x02\x02\x02\x02\xB3\x03\x02\x02\x02\x02" +
    "\xB5\x03\x02\x02\x02\x02\xB7\x03\x02\x02\x02\x02\xB9\x03\x02\x02\x02\x02" +
    "\xBB\x03\x02\x02\x02\x02\xBD\x03\x02\x02\x02\x02\xBF\x03\x02\x02\x02\x02" +
    "\xC1\x03\x02\x02\x02\x02\xC3\x03\x02\x02\x02\x02\xC5\x03\x02\x02\x02\x02" +
    "\xC7\x03\x02\x02\x02\x02\xC9\x03\x02\x02\x02\x02\xCB\x03\x02\x02\x02\x02" +
    "\xCD\x03\x02\x02\x02\x02\xCF\x03\x02\x02\x02\x02\xD1\x03\x02\x02\x02\x02" +
    "\xD3\x03\x02\x02\x02\x02\xD5\x03\x02\x02\x02\x02\xD7\x03\x02\x02\x02\x02" +
    "\xD9\x03\x02\x02\x02\x02\xDB\x03\x02\x02\x02\x02\xDD\x03\x02\x02\x02\x02" +
    "\xDF\x03\x02\x02\x02\x02\xE1\x03\x02\x02\x02\x02\xE3\x03\x02\x02\x02\x02" +
    "\xE5\x03\x02\x02\x02\x02\xE7\x03\x02\x02\x02\x02\xE9\x03\x02\x02\x02\x02" +
    "\xEB\x03\x02\x02\x02\x02\xED\x03\x02\x02\x02\x02\xEF\x03\x02\x02\x02\x02" +
    "\xF1\x03\x02\x02\x02\x02\xF3\x03\x02\x02\x02\x02\xF5\x03\x02\x02\x02\x02" +
    "\xF7\x03\x02\x02\x02\x02\xF9\x03\x02\x02\x02\x02\xFB\x03\x02\x02\x02\x02" +
    "\xFD\x03\x02\x02\x02\x02\xFF\x03\x02\x02\x02\x02\u0101\x03\x02\x02\x02" +
    "\x02\u0103\x03\x02\x02\x02\x02\u0105\x03\x02\x02\x02\x02\u0107\x03\x02" +
    "\x02\x02\x02\u0109\x03\x02\x02\x02\x02\u010B\x03\x02\x02\x02\x02\u010D" +
    "\x03\x02\x02\x02\x02\u010F\x03\x02\x02\x02\x02\u0111\x03\x02\x02\x02\x02" +
    "\u0113\x03\x02\x02\x02\x02\u0115\x03\x02\x02\x02\x02\u0117\x03\x02\x02" +
    "\x02\x02\u0119\x03\x02\x02\x02\x02\u011B\x03\x02\x02\x02\x02\u011D\x03" +
    "\x02\x02\x02\x02\u011F\x03\x02\x02\x02\x02\u0121\x03\x02\x02\x02\x02\u0123" +
    "\x03\x02\x02\x02\x02\u0125\x03\x02\x02\x02\x02\u0127\x03\x02\x02\x02\x02" +
    "\u0129\x03\x02\x02\x02\x02\u012B\x03\x02\x02\x02\x02\u012D\x03\x02\x02" +
    "\x02\x02\u012F\x03\x02\x02\x02\x02\u0131\x03\x02\x02\x02\x02\u0133\x03" +
    "\x02\x02\x02\x02\u0135\x03\x02\x02\x02\x02\u0137\x03\x02\x02\x02\x02\u0139" +
    "\x03\x02\x02\x02\x02\u013B\x03\x02\x02\x02\x02\u013D\x03\x02\x02\x02\x02" +
    "\u013F\x03\x02\x02\x02\x02\u0141\x03\x02\x02\x02\x02\u0143\x03\x02\x02" +
    "\x02\x02\u0145\x03\x02\x02\x02\x02\u0147\x03\x02\x02\x02\x02\u0149\x03" +
    "\x02\x02\x02\x02\u014B\x03\x02\x02\x02\x02\u014D\x03\x02\x02\x02\x02\u014F" +
    "\x03\x02\x02\x02\x02\u0151\x03\x02\x02\x02\x02\u0153\x03\x02\x02\x02\x02" +
    "\u0155\x03\x02\x02\x02\x02\u0157\x03\x02\x02\x02\x02\u0159\x03\x02\x02" +
    "\x02\x02\u015B\x03\x02\x02\x02\x02\u015D\x03\x02\x02\x02\x02\u015F\x03" +
    "\x02\x02\x02\x02\u0161\x03\x02\x02\x02\x02\u0163\x03\x02\x02\x02\x02\u0165" +
    "\x03\x02\x02\x02\x02\u0167\x03\x02\x02\x02\x02\u0169\x03\x02\x02\x02\x02" +
    "\u016B\x03\x02\x02\x02\x02\u016D\x03\x02\x02\x02\x02\u016F\x03\x02\x02" +
    "\x02\x02\u0171\x03\x02\x02\x02\x02\u0173\x03\x02\x02\x02\x02\u0175\x03" +
    "\x02\x02\x02\x02\u0177\x03\x02\x02\x02\x02\u0179\x03\x02\x02\x02\x02\u017B" +
    "\x03\x02\x02\x02\x02\u017D\x03\x02\x02\x02\x02\u017F\x03\x02\x02\x02\x02" +
    "\u0181\x03\x02\x02\x02\x02\u0183\x03\x02\x02\x02\x02\u0185\x03\x02\x02" +
    "\x02\x02\u0187\x03\x02\x02\x02\x02\u0189\x03\x02\x02\x02\x02\u018B\x03" +
    "\x02\x02\x02\x02\u018D\x03\x02\x02\x02\x02\u018F\x03\x02\x02\x02\x02\u0191" +
    "\x03\x02\x02\x02\x02\u0193\x03\x02\x02\x02\x02\u0195\x03\x02\x02\x02\x02" +
    "\u0197\x03\x02\x02\x02\x02\u0199\x03\x02\x02\x02\x02\u019B\x03\x02\x02" +
    "\x02\x02\u019D\x03\x02\x02\x02\x02\u019F\x03\x02\x02\x02\x02\u01A1\x03" +
    "\x02\x02\x02\x02\u01A3\x03\x02\x02\x02\x02\u01A5\x03\x02\x02\x02\x02\u01A7" +
    "\x03\x02\x02\x02\x02\u01A9\x03\x02\x02\x02\x02\u01AB\x03\x02\x02\x02\x02" +
    "\u01AD\x03\x02\x02\x02\x02\u01AF\x03\x02\x02\x02\x02\u01B1\x03\x02\x02" +
    "\x02\x02\u01B3\x03\x02\x02\x02\x02\u01B5\x03\x02\x02\x02\x02\u01B7\x03" +
    "\x02\x02\x02\x02\u01B9\x03\x02\x02\x02\x02\u01BB\x03\x02\x02\x02\x02\u01BD" +
    "\x03\x02\x02\x02\x02\u01BF\x03\x02\x02\x02\x02\u01C1\x03\x02\x02\x02\x02" +
    "\u01C3\x03\x02\x02\x02\x02\u01C5\x03\x02\x02\x02\x02\u01C7\x03\x02\x02" +
    "\x02\x02\u01C9\x03\x02\x02\x02\x02\u01CB\x03\x02\x02\x02\x02\u01CD\x03" +
    "\x02\x02\x02\x02\u01CF\x03\x02\x02\x02\x02\u01D1\x03\x02\x02\x02\x02\u01D3" +
    "\x03\x02\x02\x02\x02\u01D5\x03\x02\x02\x02\x02\u01D7\x03\x02\x02\x02\x02" +
    "\u01D9\x03\x02\x02\x02\x02\u01DB\x03\x02\x02\x02\x02\u01DD\x03\x02\x02" +
    "\x02\x02\u01DF\x03\x02\x02\x02\x02\u01E1\x03\x02\x02\x02\x02\u01E3\x03" +
    "\x02\x02\x02\x02\u01E5\x03\x02\x02\x02\x02\u01E7\x03\x02\x02\x02\x02\u01E9" +
    "\x03\x02\x02\x02\x02\u01EB\x03\x02\x02\x02\x02\u01ED\x03\x02\x02\x02\x02" +
    "\u01EF\x03\x02\x02\x02\x02\u01F1\x03\x02\x02\x02\x02\u01F3\x03\x02\x02" +
    "\x02\x02\u01F5\x03\x02\x02\x02\x02\u01F7\x03\x02\x02\x02\x02\u01F9\x03" +
    "\x02\x02\x02\x02\u01FB\x03\x02\x02\x02\x02\u01FD\x03\x02\x02\x02\x02\u01FF" +
    "\x03\x02\x02\x02\x02\u0201\x03\x02\x02\x02\x02\u0203\x03\x02\x02\x02\x02" +
    "\u0205\x03\x02\x02\x02\x02\u0207\x03\x02\x02\x02\x02\u0209\x03\x02\x02" +
    "\x02\x02\u020B\x03\x02\x02\x02\x02\u020D\x03\x02\x02\x02\x02\u020F\x03" +
    "\x02\x02\x02\x02\u0211\x03\x02\x02\x02\x02\u0213\x03\x02\x02\x02\x02\u0215" +
    "\x03\x02\x02\x02\x02\u0217\x03\x02\x02\x02\x02\u0219\x03\x02\x02\x02\x02" +
    "\u021B\x03\x02\x02\x02\x02\u021D\x03\x02\x02\x02\x02\u021F\x03\x02\x02" +
    "\x02\x02\u0221\x03\x02\x02\x02\x02\u0223\x03\x02\x02\x02\x02\u0225\x03" +
    "\x02\x02\x02\x02\u0227\x03\x02\x02\x02\x02\u0229\x03\x02\x02\x02\x02\u022B" +
    "\x03\x02\x02\x02\x02\u022D\x03\x02\x02\x02\x02\u022F\x03\x02\x02\x02\x02" +
    "\u0231\x03\x02\x02\x02\x02\u0233\x03\x02\x02\x02\x02\u0235\x03\x02\x02" +
    "\x02\x02\u0237\x03\x02\x02\x02\x02\u0239\x03\x02\x02\x02\x02\u023B\x03" +
    "\x02\x02\x02\x02\u023D\x03\x02\x02\x02\x02\u023F\x03\x02\x02\x02\x02\u0241" +
    "\x03\x02\x02\x02\x02\u0243\x03\x02\x02\x02\x02\u0245\x03\x02\x02\x02\x02" +
    "\u0247\x03\x02\x02\x02\x02\u0249\x03\x02\x02\x02\x02\u024B\x03\x02\x02" +
    "\x02\x02\u024D\x03\x02\x02\x02\x02\u024F\x03\x02\x02\x02\x02\u0251\x03" +
    "\x02\x02\x02\x02\u0253\x03\x02\x02\x02\x02\u0255\x03\x02\x02\x02\x02\u0257" +
    "\x03\x02\x02\x02\x02\u0259\x03\x02\x02\x02\x02\u025B\x03\x02\x02\x02\x02" +
    "\u025D\x03\x02\x02\x02\x02\u025F\x03\x02\x02\x02\x02\u0261\x03\x02\x02" +
    "\x02\x02\u0263\x03\x02\x02\x02\x02\u0265\x03\x02\x02\x02\x02\u0267\x03" +
    "\x02\x02\x02\x02\u0269\x03\x02\x02\x02\x02\u026B\x03\x02\x02\x02\x02\u026D" +
    "\x03\x02\x02\x02\x02\u026F\x03\x02\x02\x02\x02\u0271\x03\x02\x02\x02\x02" +
    "\u0273\x03\x02\x02\x02\x02\u0275\x03\x02\x02\x02\x02\u0277\x03\x02\x02" +
    "\x02\x02\u0279\x03\x02\x02\x02\x02\u027B\x03\x02\x02\x02\x02\u027D\x03" +
    "\x02\x02\x02\x02\u027F\x03\x02\x02\x02\x02\u0281\x03\x02\x02\x02\x02\u0283" +
    "\x03\x02\x02\x02\x02\u0285\x03\x02\x02\x02\x02\u0287\x03\x02\x02\x02\x02" +
    "\u0289\x03\x02\x02\x02\x02\u028B\x03\x02\x02\x02\x02\u028D\x03\x02\x02" +
    "\x02\x02\u028F\x03\x02\x02\x02\x02\u0291\x03\x02\x02\x02\x02\u0293\x03" +
    "\x02\x02\x02\x02\u0295\x03\x02\x02\x02\x02\u0297\x03\x02\x02\x02\x02\u0299" +
    "\x03\x02\x02\x02\x02\u029B\x03\x02\x02\x02\x02\u029D\x03\x02\x02\x02\x02" +
    "\u029F\x03\x02\x02\x02\x02\u02A1\x03\x02\x02\x02\x02\u02A3\x03\x02\x02" +
    "\x02\x02\u02A5\x03\x02\x02\x02\x02\u02A7\x03\x02\x02\x02\x02\u02A9\x03" +
    "\x02\x02\x02\x02\u02AB\x03\x02\x02\x02\x02\u02AD\x03\x02\x02\x02\x02\u02AF" +
    "\x03\x02\x02\x02\x02\u02B1\x03\x02\x02\x02\x02\u02B3\x03\x02\x02\x02\x02" +
    "\u02B5\x03\x02\x02\x02\x02\u02B7\x03\x02\x02\x02\x02\u02B9\x03\x02\x02" +
    "\x02\x02\u02BB\x03\x02\x02\x02\x02\u02BD\x03\x02\x02\x02\x02\u02BF\x03" +
    "\x02\x02\x02\x02\u02C1\x03\x02\x02\x02\x02\u02C3\x03\x02\x02\x02\x02\u02C5" +
    "\x03\x02\x02\x02\x02\u02C7\x03\x02\x02\x02\x02\u02C9\x03\x02\x02\x02\x02" +
    "\u02CB\x03\x02\x02\x02\x02\u02CD\x03\x02\x02\x02\x02\u02CF\x03\x02\x02" +
    "\x02\x02\u02D1\x03\x02\x02\x02\x02\u02D3\x03\x02\x02\x02\x02\u02D5\x03" +
    "\x02\x02\x02\x02\u02D7\x03\x02\x02\x02\x02\u02D9\x03\x02\x02\x02\x02\u02DB" +
    "\x03\x02\x02\x02\x02\u02DD\x03\x02\x02\x02\x02\u02DF\x03\x02\x02";
FlinkSqlLexer._serializedATNSegment3 = "\x02\x02\u02E1\x03\x02\x02\x02\x02\u02E3\x03\x02\x02\x02\x02\u02E5\x03" +
    "\x02\x02\x02\x02\u02E7\x03\x02\x02\x02\x02\u02E9\x03\x02\x02\x02\x02\u02EB" +
    "\x03\x02\x02\x02\x02\u02ED\x03\x02\x02\x02\x02\u02EF\x03\x02\x02\x02\x02" +
    "\u02F1\x03\x02\x02\x02\x02\u02F3\x03\x02\x02\x02\x02\u02F5\x03\x02\x02" +
    "\x02\x02\u02F7\x03\x02\x02\x02\x02\u02F9\x03\x02\x02\x02\x02\u02FB\x03" +
    "\x02\x02\x02\x02\u02FD\x03\x02\x02\x02\x02\u02FF\x03\x02\x02\x02\x02\u0301" +
    "\x03\x02\x02\x02\x02\u0303\x03\x02\x02\x02\x02\u0305\x03\x02\x02\x02\x02" +
    "\u0307\x03\x02\x02\x02\x02\u0309\x03\x02\x02\x02\x02\u030B\x03\x02\x02" +
    "\x02\x02\u030D\x03\x02\x02\x02\x02\u030F\x03\x02\x02\x02\x02\u0311\x03" +
    "\x02\x02\x02\x02\u0313\x03\x02\x02\x02\x02\u0315\x03\x02\x02\x02\x02\u0317" +
    "\x03\x02\x02\x02\x02\u0319\x03\x02\x02\x02\x02\u031B\x03\x02\x02\x02\x02" +
    "\u031D\x03\x02\x02\x02\x02\u031F\x03\x02\x02\x02\x02\u0321\x03\x02\x02" +
    "\x02\x02\u0323\x03\x02\x02\x02\x02\u0325\x03\x02\x02\x02\x02\u0327\x03" +
    "\x02\x02\x02\x02\u0329\x03\x02\x02\x02\x02\u032B\x03\x02\x02\x02\x02\u032D" +
    "\x03\x02\x02\x02\x02\u032F\x03\x02\x02\x02\x02\u0331\x03\x02\x02\x02\x02" +
    "\u0333\x03\x02\x02\x02\x02\u0335\x03\x02\x02\x02\x02\u0337\x03\x02\x02" +
    "\x02\x02\u0339\x03\x02\x02\x02\x02\u033B\x03\x02\x02\x02\x02\u033D\x03" +
    "\x02\x02\x02\x02\u033F\x03\x02\x02\x02\x02\u0341\x03\x02\x02\x02\x02\u0343" +
    "\x03\x02\x02\x02\x02\u0345\x03\x02\x02\x02\x02\u0347\x03\x02\x02\x02\x02" +
    "\u0349\x03\x02\x02\x02\x02\u034B\x03\x02\x02\x02\x02\u034D\x03\x02\x02" +
    "\x02\x02\u034F\x03\x02\x02\x02\x02\u0351\x03\x02\x02\x02\x02\u0353\x03" +
    "\x02\x02\x02\x02\u0355\x03\x02\x02\x02\x02\u0357\x03\x02\x02\x02\x02\u0359" +
    "\x03\x02\x02\x02\x02\u035B\x03\x02\x02\x02\x02\u035D\x03\x02\x02\x02\x02" +
    "\u035F\x03\x02\x02\x02\x02\u0361\x03\x02\x02\x02\x02\u0363\x03\x02\x02" +
    "\x02\x02\u0365\x03\x02\x02\x02\x02\u0367\x03\x02\x02\x02\x02\u0369\x03" +
    "\x02\x02\x02\x02\u036B\x03\x02\x02\x02\x02\u036D\x03\x02\x02\x02\x02\u036F" +
    "\x03\x02\x02\x02\x02\u0371\x03\x02\x02\x02\x02\u0373\x03\x02\x02\x02\x02" +
    "\u0375\x03\x02\x02\x02\x02\u0377\x03\x02\x02\x02\x02\u0379\x03\x02\x02" +
    "\x02\x02\u037B\x03\x02\x02\x02\x02\u037D\x03\x02\x02\x02\x02\u037F\x03" +
    "\x02\x02\x02\x02\u0381\x03\x02\x02\x02\x02\u0383\x03\x02\x02\x02\x02\u0385" +
    "\x03\x02\x02\x02\x02\u0387\x03\x02\x02\x02\x02\u0389\x03\x02\x02\x02\x02" +
    "\u038B\x03\x02\x02\x02\x02\u038D\x03\x02\x02\x02\x02\u038F\x03\x02\x02" +
    "\x02\x02\u0391\x03\x02\x02\x02\x02\u0393\x03\x02\x02\x02\x02\u0395\x03" +
    "\x02\x02\x02\x02\u0397\x03\x02\x02\x02\x02\u0399\x03\x02\x02\x02\x02\u039B" +
    "\x03\x02\x02\x02\x02\u039D\x03\x02\x02\x02\x02\u039F\x03\x02\x02\x02\x02" +
    "\u03A1\x03\x02\x02\x02\x02\u03A3\x03\x02\x02\x02\x02\u03A5\x03\x02\x02" +
    "\x02\x02\u03A7\x03\x02\x02\x02\x02\u03A9\x03\x02\x02\x02\x02\u03AB\x03" +
    "\x02\x02\x02\x02\u03AD\x03\x02\x02\x02\x02\u03AF\x03\x02\x02\x02\x02\u03B1" +
    "\x03\x02\x02\x02\x02\u03B3\x03\x02\x02\x02\x02\u03B5\x03\x02\x02\x02\x02" +
    "\u03B7\x03\x02\x02\x02\x02\u03B9\x03\x02\x02\x02\x02\u03BB\x03\x02\x02" +
    "\x02\x02\u03BD\x03\x02\x02\x02\x02\u03BF\x03\x02\x02\x02\x02\u03C1\x03" +
    "\x02\x02\x02\x02\u03C3\x03\x02\x02\x02\x02\u03C5\x03\x02\x02\x02\x02\u03C7" +
    "\x03\x02\x02\x02\x02\u03C9\x03\x02\x02\x02\x02\u03CB\x03\x02\x02\x02\x02" +
    "\u03CD\x03\x02\x02\x02\x02\u03CF\x03\x02\x02\x02\x02\u03D1\x03\x02\x02" +
    "\x02\x02\u03D3\x03\x02\x02\x02\x02\u03D5\x03\x02\x02\x02\x02\u03D7\x03" +
    "\x02\x02\x02\x02\u03D9\x03\x02\x02\x02\x02\u03DB\x03\x02\x02\x02\x02\u03DD" +
    "\x03\x02\x02\x02\x02\u03DF\x03\x02\x02\x02\x02\u03E1\x03\x02\x02\x02\x02" +
    "\u03E3\x03\x02\x02\x02\x02\u03E5\x03\x02\x02\x02\x02\u03E7\x03\x02\x02" +
    "\x02\x02\u03E9\x03\x02\x02\x02\x02\u03EB\x03\x02\x02\x02\x02\u03ED\x03" +
    "\x02\x02\x02\x02\u03EF\x03\x02\x02\x02\x02\u03F1\x03\x02\x02\x02\x02\u03F3" +
    "\x03\x02\x02\x02\x02\u03F5\x03\x02\x02\x02\x02\u03F7\x03\x02\x02\x02\x02" +
    "\u03F9\x03\x02\x02\x02\x02\u03FB\x03\x02\x02\x02\x02\u03FD\x03\x02\x02" +
    "\x02\x02\u03FF\x03\x02\x02\x02\x02\u0401\x03\x02\x02\x02\x02\u0403\x03" +
    "\x02\x02\x02\x02\u0405\x03\x02\x02\x02\x02\u0407\x03\x02\x02\x02\x02\u0409" +
    "\x03\x02\x02\x02\x02\u040B\x03\x02\x02\x02\x02\u040D\x03\x02\x02\x02\x02" +
    "\u040F\x03\x02\x02\x02\x02\u0411\x03\x02\x02\x02\x02\u0413\x03\x02\x02" +
    "\x02\x02\u0415\x03\x02\x02\x02\x02\u0417\x03\x02\x02\x02\x02\u0419\x03" +
    "\x02\x02\x02\x02\u041B\x03\x02\x02\x02\x02\u041D\x03\x02\x02\x02\x02\u041F" +
    "\x03\x02\x02\x02\x02\u0421\x03\x02\x02\x02\x02\u0423\x03\x02\x02\x02\x02" +
    "\u0425\x03\x02\x02\x02\x02\u0427\x03\x02\x02\x02\x02\u0429\x03\x02\x02" +
    "\x02\x02\u042B\x03\x02\x02\x02\x02\u042D\x03\x02\x02\x02\x02\u042F\x03" +
    "\x02\x02\x02\x02\u0431\x03\x02\x02\x02\x02\u0433\x03\x02\x02\x02\x02\u0435" +
    "\x03\x02\x02\x02\x02\u0437\x03\x02\x02\x02\x02\u0439\x03\x02\x02\x02\x02" +
    "\u043B\x03\x02\x02\x02\x03\u0450\x03\x02\x02\x02\x05\u0456\x03\x02\x02" +
    "\x02\x07\u0480\x03\x02\x02\x02\t\u0484\x03\x02\x02\x02\v\u0488\x03\x02" +
    "\x02\x02\r\u048C\x03\x02\x02\x02\x0F\u0495\x03\x02\x02\x02\x11\u049B\x03" +
    "\x02\x02\x02\x13\u04A1\x03\x02\x02\x02\x15\u04A9\x03\x02\x02\x02\x17\u04AD" +
    "\x03\x02\x02\x02\x19\u04B1\x03\x02\x02\x02\x1B\u04B5\x03\x02\x02\x02\x1D" +
    "\u04BB\x03\x02\x02\x02\x1F\u04C5\x03\x02\x02\x02!\u04D6\x03\x02\x02\x02" +
    "#\u04EC\x03\x02\x02\x02%\u04EF\x03\x02\x02\x02\'\u04FA\x03\x02\x02\x02" +
    ")\u0505\x03\x02\x02\x02+\u0508\x03\x02\x02\x02-\u050F\x03\x02\x02\x02" +
    "/\u051D\x03\x02\x02\x021\u0521\x03\x02\x02\x023\u0527\x03\x02\x02\x02" +
    "5\u0533\x03\x02\x02\x027\u0543\x03\x02\x02\x029\u054B\x03\x02\x02\x02" +
    ";\u0552\x03\x02\x02\x02=\u0559\x03\x02\x02\x02?\u055D\x03\x02\x02\x02" +
    "A\u0562\x03\x02\x02\x02C\u056A\x03\x02\x02\x02E\u056F\x03\x02\x02\x02" +
    "G\u0572\x03\x02\x02\x02I\u0578\x03\x02\x02\x02K\u057D\x03\x02\x02\x02" +
    "M\u0584\x03\x02\x02\x02O\u0590\x03\x02\x02\x02Q\u0599\x03\x02\x02\x02" +
    "S\u059E\x03\x02\x02\x02U\u05A3\x03\x02\x02\x02W\u05AC\x03\x02\x02\x02" +
    "Y\u05B1\x03\x02\x02\x02[\u05B9\x03\x02\x02\x02]\u05C8\x03\x02\x02\x02" +
    "_\u05CD\x03\x02\x02\x02a\u05D7\x03\x02\x02\x02c\u05E8\x03\x02\x02\x02" +
    "e\u05F4\x03\x02\x02\x02g\u05FA\x03\x02\x02\x02i\u0605\x03\x02\x02\x02" +
    "k\u060A\x03\x02\x02\x02m\u0610\x03\x02\x02\x02o\u0619\x03\x02\x02\x02" +
    "q\u0621\x03\x02\x02\x02s\u0629\x03\x02\x02\x02u\u0630\x03\x02\x02\x02" +
    "w\u0638\x03\x02\x02\x02y\u0640\x03\x02\x02\x02{\u0647\x03\x02\x02\x02" +
    "}\u064F\x03\x02\x02\x02\x7F\u0659\x03\x02\x02\x02\x81\u0661\x03\x02\x02" +
    "\x02\x83\u066C\x03\x02\x02\x02\x85\u0675\x03\x02\x02\x02\x87\u067D\x03" +
    "\x02\x02\x02\x89\u0682\x03\x02\x02\x02\x8B\u0690\x03\x02\x02\x02\x8D\u0696" +
    "\x03\x02\x02\x02\x8F\u06A0\x03\x02\x02\x02\x91\u06AB\x03\x02\x02\x02\x93" +
    "\u06B2\x03\x02\x02\x02\x95\u06B8\x03\x02\x02\x02\x97\u06BD\x03\x02\x02" +
    "\x02\x99\u06C7\x03\x02\x02\x02\x9B\u06CF\x03\x02\x02\x02\x9D\u06DF\x03" +
    "\x02\x02\x02\x9F\u06EC\x03\x02\x02\x02\xA1\u070C\x03\x02\x02\x02\xA3\u0719" +
    "\x03\x02\x02\x02\xA5\u0726\x03\x02\x02\x02\xA7\u0732\x03\x02\x02\x02\xA9" +
    "\u0741\x03\x02\x02\x02\xAB\u074E\x03\x02\x02\x02\xAD\u0760\x03\x02\x02" +
    "\x02\xAF\u0781\x03\x02\x02\x02\xB1\u078E\x03\x02\x02\x02\xB3\u0795\x03" +
    "\x02\x02\x02\xB5\u079B\x03\x02\x02\x02\xB7\u07A5\x03\x02\x02\x02\xB9\u07AA" +
    "\x03\x02\x02\x02\xBB\u07B3\x03\x02\x02\x02\xBD\u07C1\x03\x02\x02\x02\xBF" +
    "\u07D0\x03\x02\x02\x02\xC1\u07DA\x03\x02\x02\x02\xC3\u07E5\x03\x02\x02" +
    "\x02\xC5\u07E9\x03\x02\x02\x02\xC7\u07F3\x03\x02\x02\x02\xC9\u07FD\x03" +
    "\x02\x02\x02\xCB\u0808\x03\x02\x02\x02\xCD\u080C\x03\x02\x02\x02\xCF\u0814" +
    "\x03\x02\x02\x02\xD1\u081C\x03\x02\x02\x02\xD3\u0824\x03\x02\x02\x02\xD5" +
    "\u082B\x03\x02\x02\x02\xD7\u0832\x03\x02\x02\x02\xD9\u083D\x03\x02\x02" +
    "\x02\xDB\u0843\x03\x02\x02\x02\xDD\u084C\x03\x02\x02\x02\xDF\u085A\x03" +
    "\x02\x02\x02\xE1\u0863\x03\x02\x02\x02\xE3\u086E\x03\x02\x02\x02\xE5\u0877" +
    "\x03\x02\x02\x02\xE7\u087B\x03\x02\x02\x02\xE9\u0882\x03\x02\x02\x02\xEB" +
    "\u0887\x03\x02\x02\x02\xED\u088F\x03\x02\x02\x02\xEF\u0894\x03\x02\x02" +
    "\x02\xF1\u089C\x03\x02\x02\x02\xF3\u08A1\x03\x02\x02\x02\xF5\u08A7\x03" +
    "\x02\x02\x02\xF7\u08AB\x03\x02\x02\x02\xF9\u08B5\x03\x02\x02\x02\xFB\u08C3" +
    "\x03\x02\x02\x02\xFD\u08CC\x03\x02\x02\x02\xFF\u08D3\x03\x02\x02\x02\u0101" +
    "\u08DA\x03\x02\x02\x02\u0103\u08E9\x03\x02\x02\x02\u0105\u08EF\x03\x02" +
    "\x02\x02\u0107\u08F6\x03\x02\x02\x02\u0109\u08FB\x03\x02\x02\x02\u010B" +
    "\u0903\x03\x02\x02\x02\u010D\u090A\x03\x02\x02\x02\u010F\u090E\x03\x02" +
    "\x02\x02\u0111\u0916\x03\x02\x02\x02\u0113\u091D\x03\x02\x02\x02\u0115" +
    "\u0926\x03\x02\x02\x02\u0117\u092F\x03\x02\x02\x02\u0119\u0937\x03\x02" +
    "\x02\x02\u011B\u093D\x03\x02\x02\x02\u011D\u0943\x03\x02\x02\x02\u011F" +
    "\u094A\x03\x02\x02\x02\u0121\u0956\x03\x02\x02\x02\u0123\u095C\x03\x02" +
    "\x02\x02\u0125\u0962\x03\x02\x02\x02\u0127\u0966\x03\x02\x02\x02\u0129" +
    "\u096E\x03\x02\x02\x02\u012B\u0978\x03\x02\x02\x02\u012D\u097D\x03\x02" +
    "\x02\x02\u012F\u0984\x03\x02\x02\x02\u0131\u0989\x03\x02\x02\x02\u0133" +
    "\u098E\x03\x02\x02\x02\u0135\u0997\x03\x02\x02\x02\u0137\u09A1\x03\x02" +
    "\x02\x02\u0139\u09A8\x03\x02\x02\x02\u013B\u09AC\x03\x02\x02\x02\u013D" +
    "\u09B3\x03\x02\x02\x02\u013F\u09B9\x03\x02\x02\x02\u0141\u09BF\x03\x02" +
    "\x02\x02\u0143\u09C8\x03\x02\x02\x02\u0145\u09CF\x03\x02\x02\x02\u0147" +
    "\u09DC\x03\x02\x02\x02\u0149\u09E3\x03\x02\x02\x02\u014B\u09E8\x03\x02" +
    "\x02\x02\u014D\u09ED\x03\x02\x02\x02\u014F\u09F6\x03\x02\x02\x02\u0151" +
    "\u09F9\x03\x02\x02\x02\u0153\u09FF\x03\x02\x02\x02\u0155\u0A06\x03\x02" +
    "\x02\x02\u0157\u0A09\x03\x02\x02\x02\u0159\u0A11\x03\x02\x02\x02\u015B" +
    "\u0A1B\x03\x02\x02\x02\u015D\u0A23\x03\x02\x02\x02\u015F\u0A29\x03\x02" +
    "\x02\x02\u0161\u0A2F\x03\x02\x02\x02\u0163\u0A3B\x03\x02\x02\x02\u0165" +
    "\u0A42\x03\x02\x02\x02\u0167\u0A46\x03\x02\x02\x02\u0169\u0A4E\x03\x02" +
    "\x02\x02\u016B\u0A58\x03\x02\x02\x02\u016D\u0A65\x03\x02\x02\x02\u016F" +
    "\u0A6E\x03\x02\x02\x02\u0171\u0A73\x03\x02\x02\x02\u0173\u0A76\x03\x02" +
    "\x02\x02\u0175\u0A7B\x03\x02\x02\x02\u0177\u0A86\x03\x02\x02\x02\u0179" +
    "\u0A94\x03\x02\x02\x02\u017B\u0AA8\x03\x02\x02\x02\u017D\u0AB4\x03\x02" +
    "\x02\x02\u017F\u0AC0\x03\x02\x02\x02\u0181\u0ACF\x03\x02\x02\x02\u0183" +
    "\u0ADA\x03\x02\x02\x02\u0185\u0AE5\x03\x02\x02\x02\u0187\u0AE9\x03\x02" +
    "\x02\x02\u0189\u0AF2\x03\x02\x02\x02\u018B\u0AF8\x03\x02\x02\x02\u018D" +
    "\u0B03\x03\x02\x02\x02\u018F\u0B0B\x03\x02\x02\x02\u0191\u0B10\x03\x02" +
    "\x02\x02\u0193\u0B18\x03\x02\x02\x02\u0195\u0B1D\x03\x02\x02\x02\u0197" +
    "\u0B22\x03\x02\x02\x02\u0199\u0B2D\x03\x02\x02\x02\u019B\u0B33\x03\x02" +
    "\x02\x02\u019D\u0B36\x03\x02\x02\x02\u019F\u0B3C\x03\x02\x02\x02\u01A1" +
    "\u0B46\x03\x02\x02\x02\u01A3\u0B55\x03\x02\x02\x02\u01A5\u0B5B\x03\x02" +
    "\x02\x02\u01A7\u0B61\x03\x02\x02\x02\u01A9\u0B69\x03\x02\x02\x02\u01AB" +
    "\u0B76\x03\x02\x02\x02\u01AD\u0B86\x03\x02\x02\x02\u01AF\u0B8A\x03\x02" +
    "\x02\x02\u01B1\u0B93\x03\x02\x02\x02\u01B3\u0B9A\x03\x02\x02\x02\u01B5" +
    "\u0BA0\x03\x02\x02\x02\u01B7\u0BA9\x03\x02\x02\x02\u01B9\u0BB0\x03\x02" +
    "\x02\x02\u01BB\u0BB4\x03\x02\x02\x02\u01BD\u0BBA\x03\x02\x02\x02\u01BF" +
    "\u0BC1\x03\x02\x02\x02\u01C1\u0BC5\x03\x02\x02\x02\u01C3\u0BCE\x03\x02" +
    "\x02\x02\u01C5\u0BD5\x03\x02\x02\x02\u01C7\u0BDC\x03\x02\x02\x02\u01C9" +
    "\u0BE4\x03\x02\x02\x02\u01CB\u0BEB\x03\x02\x02\x02\u01CD\u0BF1\x03\x02" +
    "\x02\x02\u01CF\u0BF6\x03\x02\x02\x02\u01D1\u0BFF\x03\x02\x02\x02\u01D3" +
    "\u0C08\x03\x02\x02\x02\u01D5\u0C10\x03\x02\x02\x02\u01D7\u0C16\x03\x02" +
    "\x02\x02\u01D9\u0C1C\x03\x02\x02\x02\u01DB\u0C20\x03\x02\x02\x02\u01DD" +
    "\u0C25\x03\x02\x02\x02\u01DF\u0C28\x03\x02\x02\x02\u01E1\u0C2D\x03\x02" +
    "\x02\x02\u01E3\u0C37\x03\x02\x02\x02\u01E5\u0C3B\x03\x02\x02\x02\u01E7" +
    "\u0C45\x03\x02\x02\x02\u01E9\u0C4B\x03\x02\x02\x02\u01EB\u0C50\x03\x02" +
    "\x02\x02\u01ED\u0C57\x03\x02\x02\x02\u01EF\u0C5F\x03\x02\x02\x02\u01F1" +
    "\u0C71\x03\x02\x02\x02\u01F3\u0C7E\x03\x02\x02\x02\u01F5\u0C81\x03\x02" +
    "\x02\x02\u01F7\u0C88\x03\x02\x02\x02\u01F9\u0C8C\x03\x02\x02\x02\u01FB" +
    "\u0C91\x03\x02\x02\x02\u01FD\u0C94\x03\x02\x02\x02\u01FF\u0C98\x03\x02" +
    "\x02\x02\u0201\u0C9D\x03\x02\x02\x02\u0203\u0CA2\x03\x02\x02\x02\u0205" +
    "\u0CA5\x03\x02\x02\x02\u0207\u0CAB\x03\x02\x02\x02\u0209\u0CB3\x03\x02" +
    "\x02\x02\u020B\u0CB7\x03\x02\x02\x02\u020D\u0CBD\x03\x02\x02\x02\u020F" +
    "\u0CC2\x03\x02\x02\x02\u0211\u0CCB\x03\x02\x02\x02\u0213\u0CD3\x03\x02" +
    "\x02\x02\u0215\u0CDD\x03\x02\x02\x02\u0217\u0CE9\x03\x02\x02\x02\u0219" +
    "\u0CF3\x03\x02\x02\x02\u021B\u0CFD\x03\x02\x02\x02\u021D\u0D09\x03\x02" +
    "\x02\x02\u021F\u0D14\x03\x02\x02\x02\u0221\u0D1C\x03\x02\x02\x02\u0223" +
    "\u0D20\x03\x02\x02\x02\u0225\u0D28\x03\x02\x02\x02\u0227\u0D38\x03\x02" +
    "\x02\x02\u0229\u0D48\x03\x02\x02\x02\u022B\u0D55\x03\x02\x02\x02\u022D" +
    "\u0D5C\x03\x02\x02\x02\u022F\u0D64\x03\x02\x02\x02\u0231\u0D6A\x03\x02" +
    "\x02\x02\u0233\u0D72\x03\x02\x02\x02\u0235\u0D7B\x03\x02\x02\x02\u0237" +
    "\u0D8A\x03\x02\x02\x02\u0239\u0D90\x03\x02\x02\x02\u023B\u0D99\x03\x02" +
    "\x02\x02\u023D\u0DA3\x03\x02\x02\x02\u023F\u0DAB\x03\x02\x02\x02\u0241" +
    "\u0DB0\x03\x02\x02\x02\u0243\u0DB8\x03\x02\x02\x02\u0245\u0DC2\x03\x02" +
    "\x02\x02\u0247\u0DCA\x03\x02\x02\x02\u0249\u0DD3\x03\x02\x02\x02\u024B" +
    "\u0DD9\x03\x02\x02\x02\u024D\u0DDE\x03\x02\x02\x02\u024F\u0DE2\x03\x02" +
    "\x02\x02\u0251\u0DE8\x03\x02\x02\x02\u0253\u0DED\x03\x02\x02\x02\u0255" +
    "\u0DF7\x03\x02\x02\x02\u0257\u0DFB\x03\x02\x02\x02\u0259\u0E06\x03\x02" +
    "\x02\x02\u025B\u0E12\x03\x02\x02\x02\u025D\u0E1C\x03\x02\x02\x02\u025F" +
    "\u0E26\x03\x02\x02\x02\u0261\u0E31\x03\x02\x02\x02\u0263\u0E40\x03\x02" +
    "\x02\x02\u0265\u0E48\x03\x02\x02\x02\u0267\u0E53\x03\x02\x02\x02\u0269" +
    "\u0E5C\x03\x02\x02\x02\u026B\u0E65\x03\x02\x02\x02\u026D\u0E6E\x03\x02" +
    "\x02\x02\u026F\u0E76\x03\x02\x02\x02\u0271\u0E7D\x03\x02\x02\x02\u0273" +
    "\u0E83\x03\x02\x02\x02\u0275\u0E8A\x03\x02\x02\x02\u0277\u0E91\x03\x02" +
    "\x02\x02\u0279\u0E99\x03\x02\x02\x02\u027B\u0EA0\x03\x02\x02\x02\u027D" +
    "\u0EA6\x03\x02\x02\x02\u027F\u0EAC\x03\x02\x02\x02\u0281\u0EB5\x03\x02" +
    "\x02\x02\u0283\u0EBC\x03\x02\x02\x02\u0285\u0EC0\x03\x02\x02\x02\u0287" +
    "\u0EC5\x03\x02\x02\x02\u0289\u0ED0\x03\x02\x02\x02\u028B\u0ED8\x03\x02" +
    "\x02\x02\u028D\u0EE2\x03\x02\x02\x02\u028F\u0EEE\x03\x02\x02\x02\u0291" +
    "\u0EFB\x03\x02\x02\x02\u0293\u0F04\x03\x02\x02\x02\u0295\u0F0E\x03\x02" +
    "\x02\x02\u0297\u0F14\x03\x02\x02\x02\u0299\u0F1A\x03\x02\x02\x02\u029B" +
    "\u0F21\x03\x02\x02\x02\u029D\u0F28\x03\x02\x02\x02\u029F\u0F2F\x03\x02" +
    "\x02\x02\u02A1\u0F34\x03\x02\x02\x02\u02A3\u0F3B\x03\x02\x02\x02\u02A5" +
    "\u0F45\x03\x02\x02\x02\u02A7\u0F4F\x03\x02\x02\x02\u02A9\u0F5C\x03\x02" +
    "\x02\x02\u02AB\u0F60\x03\x02\x02\x02\u02AD\u0F65\x03\x02\x02\x02\u02AF" +
    "\u0F6D\x03\x02\x02\x02\u02B1\u0F72\x03\x02\x02\x02\u02B3\u0F7B\x03\x02" +
    "\x02\x02\u02B5\u0F80\x03\x02\x02\x02\u02B7\u0F89\x03\x02\x02\x02\u02B9" +
    "\u0F96\x03\x02\x02\x02\u02BB\u0F9A\x03\x02\x02\x02\u02BD\u0FA7\x03\x02" +
    "\x02\x02\u02BF\u0FB0\x03\x02\x02\x02\u02C1\u0FBB\x03\x02\x02\x02\u02C3" +
    "\u0FC0\x03\x02\x02\x02\u02C5\u0FC6\x03\x02\x02\x02\u02C7\u0FD0\x03\x02" +
    "\x02\x02\u02C9\u0FD7\x03\x02\x02\x02\u02CB\u0FE2\x03\x02\x02\x02\u02CD" +
    "\u0FED\x03\x02\x02\x02\u02CF\u0FF9\x03\x02\x02\x02\u02D1\u1000\x03\x02" +
    "\x02\x02\u02D3\u1007\x03\x02\x02\x02\u02D5\u1012\x03\x02\x02\x02\u02D7" +
    "\u101E\x03\x02\x02\x02\u02D9\u1025\x03\x02\x02\x02\u02DB\u102F\x03\x02" +
    "\x02\x02\u02DD\u103F\x03\x02\x02\x02\u02DF\u1048\x03\x02\x02\x02\u02E1" +
    "\u104C\x03\x02\x02\x02\u02E3\u1053\x03\x02\x02\x02\u02E5\u105D\x03\x02" +
    "\x02\x02\u02E7\u1064\x03\x02\x02\x02\u02E9\u1070\x03\x02\x02\x02\u02EB" +
    "\u107C\x03\x02\x02\x02\u02ED\u1082\x03\x02\x02\x02\u02EF\u1089\x03\x02" +
    "\x02\x02\u02F1\u1095\x03\x02\x02\x02\u02F3\u109A\x03\x02\x02\x02\u02F5" +
    "\u10A3\x03\x02\x02\x02\u02F7\u10A8\x03\x02\x02\x02\u02F9\u10B2\x03\x02" +
    "\x02\x02\u02FB\u10C1\x03\x02\x02\x02\u02FD\u10CF\x03\x02\x02\x02\u02FF" +
    "\u10DF\x03\x02\x02\x02\u0301\u10ED\x03\x02\x02\x02\u0303\u10FD\x03\x02" +
    "\x02\x02\u0305\u1107\x03\x02\x02\x02\u0307\u1112\x03\x02\x02\x02\u0309" +
    "\u111A\x03\x02\x02\x02\u030B\u111D\x03\x02\x02\x02\u030D\u1126\x03\x02" +
    "\x02\x02\u030F\u1130\x03\x02\x02\x02\u0311\u1140\x03\x02\x02\x02\u0313" +
    "\u114C\x03\x02\x02\x02\u0315\u1152\x03\x02\x02\x02\u0317\u115A\x03\x02" +
    "\x02\x02\u0319\u115F\x03\x02\x02\x02\u031B\u116A\x03\x02\x02\x02\u031D" +
    "\u116F\x03\x02\x02\x02\u031F\u1178\x03\x02\x02\x02\u0321\u1181\x03\x02" +
    "\x02\x02\u0323\u1189\x03\x02\x02\x02\u0325\u1191\x03\x02\x02\x02\u0327" +
    "\u1197\x03\x02\x02\x02\u0329\u119E\x03\x02\x02\x02\u032B\u11A6\x03\x02" +
    "\x02\x02\u032D\u11AD\x03\x02\x02\x02\u032F\u11B5\x03\x02\x02\x02\u0331" +
    "\u11BC\x03\x02\x02\x02\u0333\u11C2\x03\x02\x02\x02\u0335\u11C9\x03\x02" +
    "\x02\x02\u0337\u11CD\x03\x02\x02\x02\u0339\u11D2\x03\x02\x02\x02\u033B" +
    "\u11D8\x03\x02\x02\x02\u033D\u11DE\x03\x02\x02\x02\u033F\u11E5\x03\x02" +
    "\x02\x02\u0341\u11EE\x03\x02\x02\x02\u0343\u11F8\x03\x02\x02\x02\u0345" +
    "\u1200\x03\x02\x02\x02\u0347\u1208\x03\x02\x02\x02\u0349\u1210\x03\x02" +
    "\x02\x02\u034B\u1219\x03\x02\x02\x02\u034D\u1224\x03\x02\x02\x02\u034F" +
    "\u122A\x03\x02\x02\x02\u0351\u1232\x03\x02\x02\x02\u0353\u123C\x03\x02" +
    "\x02\x02\u0355\u1247\x03\x02\x02\x02\u0357\u1251\x03\x02\x02\x02\u0359" +
    "\u1257\x03\x02\x02\x02\u035B\u125C\x03\x02\x02\x02\u035D\u1265\x03\x02" +
    "\x02\x02\u035F\u126B\x03\x02\x02\x02\u0361\u1278\x03\x02\x02\x02\u0363" +
    "\u127F\x03\x02\x02\x02\u0365\u1284\x03\x02\x02\x02\u0367\u128B\x03\x02" +
    "\x02\x02\u0369\u1293\x03\x02\x02\x02\u036B\u1298\x03\x02\x02\x02\u036D" +
    "\u129C\x03\x02\x02\x02\u036F\u12A2\x03\x02\x02\x02\u0371\u12A6\x03\x02" +
    "\x02\x02\u0373\u12AE\x03\x02\x02\x02\u0375\u12B6\x03\x02\x02\x02\u0377" +
    "\u12BE\x03\x02\x02\x02\u0379\u12C5\x03\x02\x02\x02\u037B\u12D1\x03\x02" +
    "\x02\x02\u037D\u12DA\x03\x02\x02\x02\u037F\u12DF\x03\x02\x02\x02\u0381" +
    "\u12E8\x03\x02\x02\x02\u0383\u12ED\x03\x02\x02\x02\u0385\u12F4\x03\x02" +
    "\x02\x02\u0387\u12F9\x03\x02\x02\x02\u0389\u1304\x03\x02\x02\x02\u038B" +
    "\u1308\x03\x02\x02\x02\u038D\u130F\x03\x02\x02\x02\u038F\u1315\x03\x02" +
    "\x02\x02\u0391\u131F\x03\x02\x02\x02\u0393\u1324\x03\x02\x02\x02\u0395" +
    "\u132A\x03\x02\x02\x02\u0397\u1334\x03\x02\x02\x02\u0399\u1338\x03\x02" +
    "\x02\x02\u039B\u133E\x03\x02\x02\x02\u039D\u1345\x03\x02\x02\x02\u039F" +
    "\u134F\x03\x02\x02\x02\u03A1\u1353\x03\x02\x02\x02\u03A3\u1358\x03\x02" +
    "\x02\x02\u03A5\u135D\x03\x02\x02\x02\u03A7\u1361\x03\x02\x02\x02\u03A9" +
    "\u1366\x03\x02\x02\x02\u03AB\u136B\x03\x02\x02\x02\u03AD\u136F\x03\x02" +
    "\x02\x02\u03AF\u137B\x03\x02\x02\x02\u03B1\u1386\x03\x02\x02\x02\u03B3" +
    "\u1392\x03\x02\x02\x02\u03B5\u139A\x03\x02\x02\x02\u03B7\u13A1\x03\x02" +
    "\x02\x02\u03B9\u13AC\x03\x02\x02\x02\u03BB\u13B2\x03\x02\x02\x02\u03BD" +
    "\u13BA\x03\x02\x02\x02\u03BF\u13BF\x03\x02\x02\x02\u03C1\u13C4\x03\x02" +
    "\x02\x02\u03C3\u13CE\x03\x02\x02\x02\u03C5\u13D5\x03\x02\x02\x02\u03C7" +
    "\u13E5\x03\x02\x02\x02\u03C9\u13F9\x03\x02\x02\x02\u03CB\u1406\x03\x02" +
    "\x02\x02\u03CD\u1411\x03\x02\x02\x02\u03CF\u1422\x03\x02\x02\x02\u03D1" +
    "\u1436\x03\x02\x02\x02\u03D3\u143E\x03\x02\x02\x02\u03D5\u1445\x03\x02" +
    "\x02\x02\u03D7\u144E\x03\x02\x02\x02\u03D9\u1456\x03\x02\x02\x02\u03DB" +
    "\u145E\x03\x02\x02\x02\u03DD\u1463\x03\x02\x02\x02\u03DF\u1468\x03\x02" +
    "\x02\x02\u03E1\u146E\x03\x02\x02\x02\u03E3\u1473\x03\x02\x02\x02\u03E5" +
    "\u147D\x03\x02\x02\x02\u03E7\u1485\x03\x02\x02\x02\u03E9\u148C\x03\x02" +
    "\x02\x02\u03EB\u1493\x03\x02\x02\x02\u03ED\u1498\x03\x02\x02\x02\u03EF" +
    "\u149D\x03\x02\x02\x02\u03F1\u14A3\x03\x02\x02\x02\u03F3\u14A8\x03\x02" +
    "\x02\x02\u03F5\u14AA\x03\x02\x02\x02\u03F7\u14AC\x03\x02\x02\x02\u03F9" +
    "\u14AE\x03\x02\x02\x02\u03FB\u14B0\x03\x02\x02\x02\u03FD\u14B2\x03\x02" +
    "\x02\x02\u03FF\u14B4\x03\x02\x02\x02\u0401\u14B6\x03\x02\x02\x02\u0403" +
    "\u14B8\x03\x02\x02\x02\u0405\u14BA\x03\x02\x02\x02\u0407\u14BC\x03\x02" +
    "\x02\x02\u0409\u14BE\x03\x02\x02\x02\u040B\u14C0\x03\x02\x02\x02\u040D" +
    "\u14C2\x03\x02\x02\x02\u040F\u14C4\x03\x02\x02\x02\u0411\u14C6\x03\x02" +
    "\x02\x02\u0413\u14C8\x03\x02\x02\x02\u0415\u14CA\x03\x02\x02\x02\u0417" +
    "\u14CC\x03\x02\x02\x02\u0419\u14CE\x03\x02\x02\x02\u041B\u14D0\x03\x02" +
    "\x02\x02\u041D\u14D2\x03\x02\x02\x02\u041F\u14D4\x03\x02\x02\x02\u0421" +
    "\u14D6\x03\x02\x02\x02\u0423\u14D8\x03\x02\x02\x02\u0425\u14DA\x03\x02" +
    "\x02\x02\u0427\u14DC\x03\x02\x02\x02\u0429\u14DE\x03\x02\x02\x02\u042B" +
    "\u14E1\x03\x02\x02\x02\u042D\u14E4\x03\x02\x02\x02\u042F\u14E6\x03\x02" +
    "\x02\x02\u0431\u14E8\x03\x02\x02\x02\u0433\u14EE\x03\x02\x02\x02\u0435" +
    "\u14F1\x03\x02\x02\x02\u0437\u1520\x03\x02\x02\x02\u0439\u1522\x03\x02" +
    "\x02\x02\u043B\u1524\x03\x02\x02\x02\u043D\u1526\x03\x02\x02\x02\u043F" +
    "\u1533\x03\x02\x02\x02\u0441\u153F\x03\x02\x02\x02\u0443\u154D\x03\x02" +
    "\x02\x02\u0445\u154F\x03\x02\x02\x02\u0447\u1551\x03\x02\x02\x02\u0449" +
    "\u155E\x03\x02\x02\x02\u044B\u156B\x03\x02\x02\x02\u044D\u1574\x03\x02" +
    "\x02\x02\u044F\u0451\t\x02\x02\x02\u0450\u044F\x03\x02\x02\x02\u0451\u0452" +
    "\x03\x02\x02\x02\u0452\u0450\x03\x02\x02\x02\u0452\u0453\x03\x02\x02\x02" +
    "\u0453\u0454\x03\x02\x02\x02\u0454\u0455\b\x02\x02\x02\u0455\x04\x03\x02" +
    "\x02\x02\u0456\u0457\x071\x02\x02\u0457\u0458\x07,\x02\x02\u0458\u045C" +
    "\x03\x02\x02\x02\u0459\u045B\v\x02\x02\x02\u045A\u0459\x03\x02\x02\x02" +
    "\u045B\u045E\x03\x02\x02\x02\u045C\u045D\x03\x02\x02\x02\u045C\u045A\x03" +
    "\x02\x02\x02\u045D\u045F\x03\x02\x02\x02\u045E\u045C\x03\x02\x02\x02\u045F" +
    "\u0460\x07,\x02\x02\u0460\u0461\x071\x02\x02\u0461\u0462\x03\x02\x02\x02" +
    "\u0462\u0463\b\x03\x02\x02\u0463\x06\x03\x02\x02\x02\u0464\u0465\x07/" +
    "\x02\x02\u0465\u0468\x07/\x02\x02\u0466\u0468\x07%\x02\x02\u0467\u0464" +
    "\x03\x02\x02\x02\u0467\u0466\x03\x02\x02\x02\u0468\u046C\x03\x02\x02\x02" +
    "\u0469\u046B\n\x03\x02\x02\u046A\u0469\x03\x02\x02\x02\u046B\u046E\x03" +
    "\x02\x02\x02\u046C\u046A\x03\x02\x02\x02\u046C\u046D\x03\x02\x02\x02\u046D" +
    "\u0474\x03\x02\x02\x02\u046E\u046C\x03\x02\x02\x02\u046F\u0471\x07\x0F" +
    "\x02\x02\u0470\u046F\x03\x02\x02\x02\u0470\u0471\x03\x02\x02\x02\u0471" +
    "\u0472\x03\x02\x02\x02\u0472\u0475\x07\f\x02\x02\u0473\u0475\x07\x02\x02" +
    "\x03\u0474\u0470\x03\x02\x02\x02\u0474\u0473\x03\x02\x02\x02\u0475\u0481" +
    "\x03\x02\x02\x02\u0476\u0477\x07/\x02\x02\u0477\u0478\x07/\x02\x02\u0478" +
    "\u047E\x03\x02\x02\x02\u0479\u047B\x07\x0F\x02\x02\u047A\u0479\x03\x02" +
    "\x02\x02\u047A\u047B\x03\x02\x02\x02\u047B\u047C\x03\x02\x02\x02\u047C" +
    "\u047F\x07\f\x02\x02\u047D\u047F\x07\x02\x02\x03\u047E\u047A\x03\x02\x02" +
    "\x02\u047E\u047D\x03\x02\x02\x02\u047F\u0481\x03\x02\x02\x02\u0480\u0467" +
    "\x03\x02\x02\x02\u0480\u0476\x03\x02\x02\x02\u0481\u0482\x03\x02\x02\x02" +
    "\u0482\u0483\b\x04\x02\x02\u0483\b\x03\x02\x02\x02\u0484\u0485\x07C\x02" +
    "\x02\u0485\u0486\x07D\x02\x02\u0486\u0487\x07U\x02\x02\u0487\n\x03\x02" +
    "\x02\x02\u0488\u0489\x07C\x02\x02\u0489\u048A\x07N\x02\x02\u048A\u048B" +
    "\x07N\x02\x02\u048B\f\x03\x02\x02\x02\u048C\u048D\x07C\x02\x02\u048D\u048E" +
    "\x07N\x02\x02\u048E\u048F\x07N\x02\x02\u048F\u0490\x07Q\x02\x02\u0490" +
    "\u0491\x07E\x02\x02\u0491\u0492\x07C\x02\x02\u0492\u0493\x07V\x02\x02" +
    "\u0493\u0494\x07G\x02\x02\u0494\x0E\x03\x02\x02\x02\u0495\u0496\x07C\x02" +
    "\x02\u0496\u0497\x07N\x02\x02\u0497\u0498\x07N\x02\x02\u0498\u0499\x07" +
    "Q\x02\x02\u0499\u049A\x07Y\x02\x02\u049A\x10\x03\x02\x02\x02\u049B\u049C" +
    "\x07C\x02\x02\u049C\u049D\x07N\x02\x02\u049D\u049E\x07V\x02\x02\u049E" +
    "\u049F\x07G\x02\x02\u049F\u04A0\x07T\x02\x02\u04A0\x12\x03\x02\x02\x02" +
    "\u04A1\u04A2\x07C\x02\x02\u04A2\u04A3\x07P\x02\x02\u04A3\u04A4\x07C\x02" +
    "\x02\u04A4\u04A5\x07N\x02\x02\u04A5\u04A6\x07[\x02\x02\u04A6\u04A7\x07" +
    "\\\x02\x02\u04A7\u04A8\x07G\x02\x02\u04A8\x14\x03\x02\x02\x02\u04A9\u04AA" +
    "\x07C\x02\x02\u04AA\u04AB\x07P\x02\x02\u04AB\u04AC\x07F\x02\x02\u04AC" +
    "\x16\x03\x02\x02\x02\u04AD\u04AE\x07C\x02\x02\u04AE\u04AF\x07P\x02\x02" +
    "\u04AF\u04B0\x07[\x02\x02\u04B0\x18\x03\x02\x02\x02\u04B1\u04B2\x07C\x02" +
    "\x02\u04B2\u04B3\x07T\x02\x02\u04B3";
FlinkSqlLexer._serializedATNSegment4 = "\u04B4\x07G\x02\x02\u04B4\x1A\x03\x02\x02\x02\u04B5\u04B6\x07C\x02\x02" +
    "\u04B6\u04B7\x07T\x02\x02\u04B7\u04B8\x07T\x02\x02\u04B8\u04B9\x07C\x02" +
    "\x02\u04B9\u04BA\x07[\x02\x02\u04BA\x1C\x03\x02\x02\x02\u04BB\u04BC\x07" +
    "C\x02\x02\u04BC\u04BD\x07T\x02\x02\u04BD\u04BE\x07T\x02\x02\u04BE\u04BF" +
    "\x07C\x02\x02\u04BF\u04C0\x07[\x02\x02\u04C0\u04C1\x07a\x02\x02\u04C1" +
    "\u04C2\x07C\x02\x02\u04C2\u04C3\x07I\x02\x02\u04C3\u04C4\x07I\x02\x02" +
    "\u04C4\x1E\x03\x02\x02\x02\u04C5\u04C6\x07C\x02\x02\u04C6\u04C7\x07T\x02" +
    "\x02\u04C7\u04C8\x07T\x02\x02\u04C8\u04C9\x07C\x02\x02\u04C9\u04CA\x07" +
    "[\x02\x02\u04CA\u04CB\x07a\x02\x02\u04CB\u04CC\x07E\x02\x02\u04CC\u04CD" +
    "\x07Q\x02\x02\u04CD\u04CE\x07P\x02\x02\u04CE\u04CF\x07E\x02\x02\u04CF" +
    "\u04D0\x07C\x02\x02\u04D0\u04D1\x07V\x02\x02\u04D1\u04D2\x07a\x02\x02" +
    "\u04D2\u04D3\x07C\x02\x02\u04D3\u04D4\x07I\x02\x02\u04D4\u04D5\x07I\x02" +
    "\x02\u04D5 \x03\x02\x02\x02\u04D6\u04D7\x07C\x02\x02\u04D7\u04D8\x07T" +
    "\x02\x02\u04D8\u04D9\x07T\x02\x02\u04D9\u04DA\x07C\x02\x02\u04DA\u04DB" +
    "\x07[\x02\x02\u04DB\u04DC\x07a\x02\x02\u04DC\u04DD\x07O\x02\x02\u04DD" +
    "\u04DE\x07C\x02\x02\u04DE\u04DF\x07Z\x02\x02\u04DF\u04E0\x07a\x02\x02" +
    "\u04E0\u04E1\x07E\x02\x02\u04E1\u04E2\x07C\x02\x02\u04E2\u04E3\x07T\x02" +
    "\x02\u04E3\u04E4\x07F\x02\x02\u04E4\u04E5\x07K\x02\x02\u04E5\u04E6\x07" +
    "P\x02\x02\u04E6\u04E7\x07C\x02\x02\u04E7\u04E8\x07N\x02\x02\u04E8\u04E9" +
    "\x07K\x02\x02\u04E9\u04EA\x07V\x02\x02\u04EA\u04EB\x07[\x02\x02\u04EB" +
    "\"\x03\x02\x02\x02\u04EC\u04ED\x07C\x02\x02\u04ED\u04EE\x07U\x02\x02\u04EE" +
    "$\x03\x02\x02\x02\u04EF\u04F0\x07C\x02\x02\u04F0\u04F1\x07U\x02\x02\u04F1" +
    "\u04F2\x07G\x02\x02\u04F2\u04F3\x07P\x02\x02\u04F3\u04F4\x07U\x02\x02" +
    "\u04F4\u04F5\x07K\x02\x02\u04F5\u04F6\x07V\x02\x02\u04F6\u04F7\x07K\x02" +
    "\x02\u04F7\u04F8\x07X\x02\x02\u04F8\u04F9\x07G\x02\x02\u04F9&\x03\x02" +
    "\x02\x02\u04FA\u04FB\x07C\x02\x02\u04FB\u04FC\x07U\x02\x02\u04FC\u04FD" +
    "\x07[\x02\x02\u04FD\u04FE\x07O\x02\x02\u04FE\u04FF\x07O\x02\x02\u04FF" +
    "\u0500\x07G\x02\x02\u0500\u0501\x07V\x02\x02\u0501\u0502\x07T\x02\x02" +
    "\u0502\u0503\x07K\x02\x02\u0503\u0504\x07E\x02\x02\u0504(\x03\x02\x02" +
    "\x02\u0505\u0506\x07C\x02\x02\u0506\u0507\x07V\x02\x02\u0507*\x03\x02" +
    "\x02\x02\u0508\u0509\x07C\x02\x02\u0509\u050A\x07V\x02\x02\u050A\u050B" +
    "\x07Q\x02\x02\u050B\u050C\x07O\x02\x02\u050C\u050D\x07K\x02\x02\u050D" +
    "\u050E\x07E\x02\x02\u050E,\x03\x02\x02\x02\u050F\u0510\x07C\x02\x02\u0510" +
    "\u0511\x07W\x02\x02\u0511\u0512\x07V\x02\x02\u0512\u0513\x07J\x02\x02" +
    "\u0513\u0514\x07Q\x02\x02\u0514\u0515\x07T\x02\x02\u0515\u0516\x07K\x02" +
    "\x02\u0516\u0517\x07\\\x02\x02\u0517\u0518\x07C\x02\x02\u0518\u0519\x07" +
    "V\x02\x02\u0519\u051A\x07K\x02\x02\u051A\u051B\x07Q\x02\x02\u051B\u051C" +
    "\x07P\x02\x02\u051C.\x03\x02\x02\x02\u051D\u051E\x07C\x02\x02\u051E\u051F" +
    "\x07X\x02\x02\u051F\u0520\x07I\x02\x02\u05200\x03\x02\x02\x02\u0521\u0522" +
    "\x07D\x02\x02\u0522\u0523\x07G\x02\x02\u0523\u0524\x07I\x02\x02\u0524" +
    "\u0525\x07K\x02\x02\u0525\u0526\x07P\x02\x02\u05262\x03\x02\x02\x02\u0527" +
    "\u0528\x07D\x02\x02\u0528\u0529\x07G\x02\x02\u0529\u052A\x07I\x02\x02" +
    "\u052A\u052B\x07K\x02\x02\u052B\u052C\x07P\x02\x02\u052C\u052D\x07a\x02" +
    "\x02\u052D\u052E\x07H\x02\x02\u052E\u052F\x07T\x02\x02\u052F\u0530\x07" +
    "C\x02\x02\u0530\u0531\x07O\x02\x02\u0531\u0532\x07G\x02\x02\u05324\x03" +
    "\x02\x02\x02\u0533\u0534\x07D\x02\x02\u0534\u0535\x07G\x02\x02\u0535\u0536" +
    "\x07I\x02\x02\u0536\u0537\x07K\x02\x02\u0537\u0538\x07P\x02\x02\u0538" +
    "\u0539\x07a\x02\x02\u0539\u053A\x07R\x02\x02\u053A\u053B\x07C\x02\x02" +
    "\u053B\u053C\x07T\x02\x02\u053C\u053D\x07V\x02\x02\u053D\u053E\x07K\x02" +
    "\x02\u053E\u053F\x07V\x02\x02\u053F\u0540\x07K\x02\x02\u0540\u0541\x07" +
    "Q\x02\x02\u0541\u0542\x07P\x02\x02\u05426\x03\x02\x02\x02\u0543\u0544" +
    "\x07D\x02\x02\u0544\u0545\x07G\x02\x02\u0545\u0546\x07V\x02\x02\u0546" +
    "\u0547\x07Y\x02\x02\u0547\u0548\x07G\x02\x02\u0548\u0549\x07G\x02\x02" +
    "\u0549\u054A\x07P\x02\x02\u054A8\x03\x02\x02\x02\u054B\u054C\x07D\x02" +
    "\x02\u054C\u054D\x07K\x02\x02\u054D\u054E\x07I\x02\x02\u054E\u054F\x07" +
    "K\x02\x02\u054F\u0550\x07P\x02\x02\u0550\u0551\x07V\x02\x02\u0551:\x03" +
    "\x02\x02\x02\u0552\u0553\x07D\x02\x02\u0553\u0554\x07K\x02\x02\u0554\u0555" +
    "\x07P\x02\x02\u0555\u0556\x07C\x02\x02\u0556\u0557\x07T\x02\x02\u0557" +
    "\u0558\x07[\x02\x02\u0558<\x03\x02\x02\x02\u0559\u055A\x07D\x02\x02\u055A" +
    "\u055B\x07K\x02\x02\u055B\u055C\x07V\x02\x02\u055C>\x03\x02\x02\x02\u055D" +
    "\u055E\x07D\x02\x02\u055E\u055F\x07N\x02\x02\u055F\u0560\x07Q\x02\x02" +
    "\u0560\u0561\x07D\x02\x02\u0561@\x03\x02\x02\x02\u0562\u0563\x07D\x02" +
    "\x02\u0563\u0564\x07Q\x02\x02\u0564\u0565\x07Q\x02\x02\u0565\u0566\x07" +
    "N\x02\x02\u0566\u0567\x07G\x02\x02\u0567\u0568\x07C\x02\x02\u0568\u0569" +
    "\x07P\x02\x02\u0569B\x03\x02\x02\x02\u056A\u056B\x07D\x02\x02\u056B\u056C" +
    "\x07Q\x02\x02\u056C\u056D\x07V\x02\x02\u056D\u056E\x07J\x02\x02\u056E" +
    "D\x03\x02\x02\x02\u056F\u0570\x07D\x02\x02\u0570\u0571\x07[\x02\x02\u0571" +
    "F\x03\x02\x02\x02\u0572\u0573\x07D\x02\x02\u0573\u0574\x07[\x02\x02\u0574" +
    "\u0575\x07V\x02\x02\u0575\u0576\x07G\x02\x02\u0576\u0577\x07U\x02\x02" +
    "\u0577H\x03\x02\x02\x02\u0578\u0579\x07E\x02\x02\u0579\u057A\x07C\x02" +
    "\x02\u057A\u057B\x07N\x02\x02\u057B\u057C\x07N\x02\x02\u057CJ\x03\x02" +
    "\x02\x02\u057D\u057E\x07E\x02\x02\u057E\u057F\x07C\x02\x02\u057F\u0580" +
    "\x07N\x02\x02\u0580\u0581\x07N\x02\x02\u0581\u0582\x07G\x02\x02\u0582" +
    "\u0583\x07F\x02\x02\u0583L\x03\x02\x02\x02\u0584\u0585\x07E\x02\x02\u0585" +
    "\u0586\x07C\x02\x02\u0586\u0587\x07T\x02\x02\u0587\u0588\x07F\x02\x02" +
    "\u0588\u0589\x07K\x02\x02\u0589\u058A\x07P\x02\x02\u058A\u058B\x07C\x02" +
    "\x02\u058B\u058C\x07N\x02\x02\u058C\u058D\x07K\x02\x02\u058D\u058E\x07" +
    "V\x02\x02\u058E\u058F\x07[\x02\x02\u058FN\x03\x02\x02\x02\u0590\u0591" +
    "\x07E\x02\x02\u0591\u0592\x07C\x02\x02\u0592\u0593\x07U\x02\x02\u0593" +
    "\u0594\x07E\x02\x02\u0594\u0595\x07C\x02\x02\u0595\u0596\x07F\x02\x02" +
    "\u0596\u0597\x07G\x02\x02\u0597\u0598\x07F\x02\x02\u0598P\x03\x02\x02" +
    "\x02\u0599\u059A\x07E\x02\x02\u059A\u059B\x07C\x02\x02\u059B\u059C\x07" +
    "U\x02\x02\u059C\u059D\x07G\x02\x02\u059DR\x03\x02\x02\x02\u059E\u059F" +
    "\x07E\x02\x02\u059F\u05A0\x07C\x02\x02\u05A0\u05A1\x07U\x02\x02\u05A1" +
    "\u05A2\x07V\x02\x02\u05A2T\x03\x02\x02\x02\u05A3\u05A4\x07E\x02\x02\u05A4" +
    "\u05A5\x07C\x02\x02\u05A5\u05A6\x07V\x02\x02\u05A6\u05A7\x07C\x02\x02" +
    "\u05A7\u05A8\x07N\x02\x02\u05A8\u05A9\x07Q\x02\x02\u05A9\u05AA\x07I\x02" +
    "\x02\u05AA\u05AB\x07U\x02\x02\u05ABV\x03\x02\x02\x02\u05AC\u05AD\x07E" +
    "\x02\x02\u05AD\u05AE\x07G\x02\x02\u05AE\u05AF\x07K\x02\x02\u05AF\u05B0" +
    "\x07N\x02\x02\u05B0X\x03\x02\x02\x02\u05B1\u05B2\x07E\x02\x02\u05B2\u05B3" +
    "\x07G\x02\x02\u05B3\u05B4\x07K\x02\x02\u05B4\u05B5\x07N\x02\x02\u05B5" +
    "\u05B6\x07K\x02\x02\u05B6\u05B7\x07P\x02\x02\u05B7\u05B8\x07I\x02\x02" +
    "\u05B8Z\x03\x02\x02\x02\u05B9\u05BA\x07E\x02\x02\u05BA\u05BB\x07J\x02" +
    "\x02\u05BB\u05BC\x07C\x02\x02\u05BC\u05BD\x07P\x02\x02\u05BD\u05BE\x07" +
    "I\x02\x02\u05BE\u05BF\x07G\x02\x02\u05BF\u05C0\x07N\x02\x02\u05C0\u05C1" +
    "\x07Q\x02\x02\u05C1\u05C2\x07I\x02\x02\u05C2\u05C3\x07a\x02\x02\u05C3" +
    "\u05C4\x07O\x02\x02\u05C4\u05C5\x07Q\x02\x02\u05C5\u05C6\x07F\x02\x02" +
    "\u05C6\u05C7\x07G\x02\x02\u05C7\\\x03\x02\x02\x02\u05C8\u05C9\x07E\x02" +
    "\x02\u05C9\u05CA\x07J\x02\x02\u05CA\u05CB\x07C\x02\x02\u05CB\u05CC\x07" +
    "T\x02\x02\u05CC^\x03\x02\x02\x02\u05CD\u05CE\x07E\x02\x02\u05CE\u05CF" +
    "\x07J\x02\x02\u05CF\u05D0\x07C\x02\x02\u05D0\u05D1\x07T\x02\x02\u05D1" +
    "\u05D2\x07C\x02\x02\u05D2\u05D3\x07E\x02\x02\u05D3\u05D4\x07V\x02\x02" +
    "\u05D4\u05D5\x07G\x02\x02\u05D5\u05D6\x07T\x02\x02\u05D6`\x03\x02\x02" +
    "\x02\u05D7\u05D8\x07E\x02\x02\u05D8\u05D9\x07J\x02\x02\u05D9\u05DA\x07" +
    "C\x02\x02\u05DA\u05DB\x07T\x02\x02\u05DB\u05DC\x07C\x02\x02\u05DC\u05DD" +
    "\x07E\x02\x02\u05DD\u05DE\x07V\x02\x02\u05DE\u05DF\x07G\x02\x02\u05DF" +
    "\u05E0\x07T\x02\x02\u05E0\u05E1\x07a\x02\x02\u05E1\u05E2\x07N\x02\x02" +
    "\u05E2\u05E3\x07G\x02\x02\u05E3\u05E4\x07P\x02\x02\u05E4\u05E5\x07I\x02" +
    "\x02\u05E5\u05E6\x07V\x02\x02\u05E6\u05E7\x07J\x02\x02\u05E7b\x03\x02" +
    "\x02\x02\u05E8\u05E9\x07E\x02\x02\u05E9\u05EA\x07J\x02\x02\u05EA\u05EB" +
    "\x07C\x02\x02\u05EB\u05EC\x07T\x02\x02\u05EC\u05ED\x07a\x02\x02\u05ED" +
    "\u05EE\x07N\x02\x02\u05EE\u05EF\x07G\x02\x02\u05EF\u05F0\x07P\x02\x02" +
    "\u05F0\u05F1\x07I\x02\x02\u05F1\u05F2\x07V\x02\x02\u05F2\u05F3\x07J\x02" +
    "\x02\u05F3d\x03\x02\x02\x02\u05F4\u05F5\x07E\x02\x02\u05F5\u05F6\x07J" +
    "\x02\x02\u05F6\u05F7\x07G\x02\x02\u05F7\u05F8\x07E\x02\x02\u05F8\u05F9" +
    "\x07M\x02\x02\u05F9f\x03\x02\x02\x02\u05FA\u05FB\x07E\x02\x02\u05FB\u05FC" +
    "\x07N\x02\x02\u05FC\u05FD\x07C\x02\x02\u05FD\u05FE\x07U\x02\x02\u05FE" +
    "\u05FF\x07U\x02\x02\u05FF\u0600\x07K\x02\x02\u0600\u0601\x07H\x02\x02" +
    "\u0601\u0602\x07K\x02\x02\u0602\u0603\x07G\x02\x02\u0603\u0604\x07T\x02" +
    "\x02\u0604h\x03\x02\x02\x02\u0605\u0606\x07E\x02\x02\u0606\u0607\x07N" +
    "\x02\x02\u0607\u0608\x07Q\x02\x02\u0608\u0609\x07D\x02\x02\u0609j\x03" +
    "\x02\x02\x02\u060A\u060B\x07E\x02\x02\u060B\u060C\x07N\x02\x02\u060C\u060D" +
    "\x07Q\x02\x02\u060D\u060E\x07U\x02\x02\u060E\u060F\x07G\x02\x02\u060F" +
    "l\x03\x02\x02\x02\u0610\u0611\x07E\x02\x02\u0611\u0612\x07Q\x02\x02\u0612" +
    "\u0613\x07C\x02\x02\u0613\u0614\x07N\x02\x02\u0614\u0615\x07G\x02\x02" +
    "\u0615\u0616\x07U\x02\x02\u0616\u0617\x07E\x02\x02\u0617\u0618\x07G\x02" +
    "\x02\u0618n\x03\x02\x02\x02\u0619\u061A\x07E\x02\x02\u061A\u061B\x07Q" +
    "\x02\x02\u061B\u061C\x07N\x02\x02\u061C\u061D\x07N\x02\x02\u061D\u061E" +
    "\x07C\x02\x02\u061E\u061F\x07V\x02\x02\u061F\u0620\x07G\x02\x02\u0620" +
    "p\x03\x02\x02\x02\u0621\u0622\x07E\x02\x02\u0622\u0623\x07Q\x02\x02\u0623" +
    "\u0624\x07N\x02\x02\u0624\u0625\x07N\x02\x02\u0625\u0626\x07G\x02\x02" +
    "\u0626\u0627\x07E\x02\x02\u0627\u0628\x07V\x02\x02\u0628r\x03\x02\x02" +
    "\x02\u0629\u062A\x07E\x02\x02\u062A\u062B\x07Q\x02\x02\u062B\u062C\x07" +
    "N\x02\x02\u062C\u062D\x07W\x02\x02\u062D\u062E\x07O\x02\x02\u062E\u062F" +
    "\x07P\x02\x02\u062Ft\x03\x02\x02\x02\u0630\u0631\x07E\x02\x02\u0631\u0632" +
    "\x07Q\x02\x02\u0632\u0633\x07N\x02\x02\u0633\u0634\x07W\x02\x02\u0634" +
    "\u0635\x07O\x02\x02\u0635\u0636\x07P\x02\x02\u0636\u0637\x07U\x02\x02" +
    "\u0637v\x03\x02\x02\x02\u0638\u0639\x07E\x02\x02\u0639\u063A\x07Q\x02" +
    "\x02\u063A\u063B\x07O\x02\x02\u063B\u063C\x07O\x02\x02\u063C\u063D\x07" +
    "G\x02\x02\u063D\u063E\x07P\x02\x02\u063E\u063F\x07V\x02\x02\u063Fx\x03" +
    "\x02\x02\x02\u0640\u0641\x07E\x02\x02\u0641\u0642\x07Q\x02\x02\u0642\u0643" +
    "\x07O\x02\x02\u0643\u0644\x07O\x02\x02\u0644\u0645\x07K\x02\x02\u0645" +
    "\u0646\x07V\x02\x02\u0646z\x03\x02\x02\x02\u0647\u0648\x07E\x02\x02\u0648" +
    "\u0649\x07Q\x02\x02\u0649\u064A\x07O\x02\x02\u064A\u064B\x07R\x02\x02" +
    "\u064B\u064C\x07W\x02\x02\u064C\u064D\x07V\x02\x02\u064D\u064E\x07G\x02" +
    "\x02\u064E|\x03\x02\x02\x02\u064F\u0650\x07E\x02\x02\u0650\u0651\x07Q" +
    "\x02\x02\u0651\u0652\x07P\x02\x02\u0652\u0653\x07F\x02\x02\u0653\u0654" +
    "\x07K\x02\x02\u0654\u0655\x07V\x02\x02\u0655\u0656\x07K\x02\x02\u0656" +
    "\u0657\x07Q\x02\x02\u0657\u0658\x07P\x02\x02\u0658~\x03\x02\x02\x02\u0659" +
    "\u065A\x07E\x02\x02\u065A\u065B\x07Q\x02\x02\u065B\u065C\x07P\x02\x02" +
    "\u065C\u065D\x07P\x02\x02\u065D\u065E\x07G\x02\x02\u065E\u065F\x07E\x02" +
    "\x02\u065F\u0660\x07V\x02\x02\u0660\x80\x03\x02\x02\x02\u0661\u0662\x07" +
    "E\x02\x02\u0662\u0663\x07Q\x02\x02\u0663\u0664\x07P\x02\x02\u0664\u0665" +
    "\x07U\x02\x02\u0665\u0666\x07V\x02\x02\u0666\u0667\x07T\x02\x02\u0667" +
    "\u0668\x07C\x02\x02\u0668\u0669\x07K\x02\x02\u0669\u066A\x07P\x02\x02" +
    "\u066A\u066B\x07V\x02\x02\u066B\x82\x03\x02\x02\x02\u066C\u066D\x07E\x02" +
    "\x02\u066D\u066E\x07Q\x02\x02\u066E\u066F\x07P\x02\x02\u066F\u0670\x07" +
    "V\x02\x02\u0670\u0671\x07C\x02\x02\u0671\u0672\x07K\x02\x02\u0672\u0673" +
    "\x07P\x02\x02\u0673\u0674\x07U\x02\x02\u0674\x84\x03\x02\x02\x02\u0675" +
    "\u0676\x07E\x02\x02\u0676\u0677\x07Q\x02\x02\u0677\u0678\x07P\x02\x02" +
    "\u0678\u0679\x07X\x02\x02\u0679\u067A\x07G\x02\x02\u067A\u067B\x07T\x02" +
    "\x02\u067B\u067C\x07V\x02\x02\u067C\x86\x03\x02\x02\x02\u067D\u067E\x07" +
    "E\x02\x02\u067E\u067F\x07Q\x02\x02\u067F\u0680\x07T\x02\x02\u0680\u0681" +
    "\x07T\x02\x02\u0681\x88\x03\x02\x02\x02\u0682\u0683\x07E\x02\x02\u0683" +
    "\u0684\x07Q\x02\x02\u0684\u0685\x07T\x02\x02\u0685\u0686\x07T\x02\x02" +
    "\u0686\u0687\x07G\x02\x02\u0687\u0688\x07U\x02\x02\u0688\u0689\x07R\x02" +
    "\x02\u0689\u068A\x07Q\x02\x02\u068A\u068B\x07P\x02\x02\u068B\u068C\x07" +
    "F\x02\x02\u068C\u068D\x07K\x02\x02\u068D\u068E\x07P\x02\x02\u068E\u068F" +
    "\x07I\x02\x02\u068F\x8A\x03\x02\x02\x02\u0690\u0691\x07E\x02\x02\u0691" +
    "\u0692\x07Q\x02\x02\u0692\u0693\x07W\x02\x02\u0693\u0694\x07P\x02\x02" +
    "\u0694\u0695\x07V\x02\x02\u0695\x8C\x03\x02\x02\x02\u0696\u0697\x07E\x02" +
    "\x02\u0697\u0698\x07Q\x02\x02\u0698\u0699\x07X\x02\x02\u0699\u069A\x07" +
    "C\x02\x02\u069A\u069B\x07T\x02\x02\u069B\u069C\x07a\x02\x02\u069C\u069D" +
    "\x07R\x02\x02\u069D\u069E\x07Q\x02\x02\u069E\u069F\x07R\x02\x02\u069F" +
    "\x8E\x03\x02\x02\x02\u06A0\u06A1\x07E\x02\x02\u06A1\u06A2\x07Q\x02\x02" +
    "\u06A2\u06A3\x07X\x02\x02\u06A3\u06A4\x07C\x02\x02\u06A4\u06A5\x07T\x02" +
    "\x02\u06A5\u06A6\x07a\x02\x02\u06A6\u06A7\x07U\x02\x02\u06A7\u06A8\x07" +
    "C\x02\x02\u06A8\u06A9\x07O\x02\x02\u06A9\u06AA\x07R\x02\x02\u06AA\x90" +
    "\x03\x02\x02\x02\u06AB\u06AC\x07E\x02\x02\u06AC\u06AD\x07T\x02\x02\u06AD" +
    "\u06AE\x07G\x02\x02\u06AE\u06AF\x07C\x02\x02\u06AF\u06B0\x07V\x02\x02" +
    "\u06B0\u06B1\x07G\x02\x02\u06B1\x92\x03\x02\x02\x02\u06B2\u06B3\x07E\x02" +
    "\x02\u06B3\u06B4\x07T\x02\x02\u06B4\u06B5\x07Q\x02\x02\u06B5\u06B6\x07" +
    "U\x02\x02\u06B6\u06B7\x07U\x02\x02\u06B7\x94\x03\x02\x02\x02\u06B8\u06B9" +
    "\x07E\x02\x02\u06B9\u06BA\x07W\x02\x02\u06BA\u06BB\x07D\x02\x02\u06BB" +
    "\u06BC\x07G\x02\x02\u06BC\x96\x03\x02\x02\x02\u06BD\u06BE\x07E\x02\x02" +
    "\u06BE\u06BF\x07W\x02\x02\u06BF\u06C0\x07O\x02\x02\u06C0\u06C1\x07G\x02" +
    "\x02\u06C1\u06C2\x07a\x02\x02\u06C2\u06C3\x07F\x02\x02\u06C3\u06C4\x07" +
    "K\x02\x02\u06C4\u06C5\x07U\x02\x02\u06C5\u06C6\x07V\x02\x02\u06C6\x98" +
    "\x03\x02\x02\x02\u06C7\u06C8\x07E\x02\x02\u06C8\u06C9\x07W\x02\x02\u06C9" +
    "\u06CA\x07T\x02\x02\u06CA\u06CB\x07T\x02\x02\u06CB\u06CC\x07G\x02\x02" +
    "\u06CC\u06CD\x07P\x02\x02\u06CD\u06CE\x07V\x02\x02\u06CE\x9A\x03\x02\x02" +
    "\x02\u06CF\u06D0\x07E\x02\x02\u06D0\u06D1\x07W\x02\x02\u06D1\u06D2\x07" +
    "T\x02\x02\u06D2\u06D3\x07T\x02\x02\u06D3\u06D4\x07G\x02\x02\u06D4\u06D5" +
    "\x07P\x02\x02\u06D5\u06D6\x07V\x02\x02\u06D6\u06D7\x07a\x02\x02\u06D7" +
    "\u06D8\x07E\x02\x02\u06D8\u06D9\x07C\x02\x02\u06D9\u06DA\x07V\x02\x02" +
    "\u06DA\u06DB\x07C\x02\x02\u06DB\u06DC\x07N\x02\x02\u06DC\u06DD\x07Q\x02" +
    "\x02\u06DD\u06DE\x07I\x02\x02\u06DE\x9C\x03\x02\x02\x02\u06DF\u06E0\x07" +
    "E\x02\x02\u06E0\u06E1\x07W\x02\x02\u06E1\u06E2\x07T\x02\x02\u06E2\u06E3" +
    "\x07T\x02\x02\u06E3\u06E4\x07G\x02\x02\u06E4\u06E5\x07P\x02\x02\u06E5" +
    "\u06E6\x07V\x02\x02\u06E6\u06E7\x07a\x02\x02\u06E7\u06E8\x07F\x02\x02" +
    "\u06E8\u06E9\x07C\x02\x02\u06E9\u06EA\x07V\x02\x02\u06EA\u06EB\x07G\x02" +
    "\x02\u06EB\x9E\x03\x02\x02\x02\u06EC\u06ED\x07E\x02\x02\u06ED\u06EE\x07" +
    "W\x02\x02\u06EE\u06EF\x07T\x02\x02\u06EF\u06F0\x07T\x02\x02\u06F0\u06F1" +
    "\x07G\x02\x02\u06F1\u06F2\x07P\x02\x02\u06F2\u06F3\x07V\x02\x02\u06F3" +
    "\u06F4\x07a\x02\x02\u06F4\u06F5\x07F\x02\x02\u06F5\u06F6\x07G\x02\x02" +
    "\u06F6\u06F7\x07H\x02\x02\u06F7\u06F8\x07C\x02\x02\u06F8\u06F9\x07W\x02" +
    "\x02\u06F9\u06FA\x07N\x02\x02\u06FA\u06FB\x07V\x02\x02\u06FB\u06FC\x07" +
    "a\x02\x02\u06FC\u06FD\x07V\x02\x02\u06FD\u06FE\x07T\x02\x02\u06FE\u06FF" +
    "\x07C\x02\x02\u06FF\u0700\x07P\x02\x02\u0700\u0701\x07U\x02\x02\u0701" +
    "\u0702\x07H\x02\x02\u0702\u0703\x07Q\x02\x02\u0703\u0704\x07T\x02\x02" +
    "\u0704\u0705\x07O\x02\x02\u0705\u0706\x07a\x02\x02\u0706\u0707\x07I\x02" +
    "\x02\u0707\u0708\x07T\x02\x02\u0708\u0709\x07Q\x02\x02\u0709\u070A\x07" +
    "W\x02\x02\u070A\u070B\x07R\x02\x02\u070B\xA0\x03\x02\x02\x02\u070C\u070D" +
    "\x07E\x02\x02\u070D\u070E\x07W\x02\x02\u070E\u070F\x07T\x02\x02\u070F" +
    "\u0710\x07T\x02\x02\u0710\u0711\x07G\x02\x02\u0711\u0712\x07P\x02\x02" +
    "\u0712\u0713\x07V\x02\x02\u0713\u0714\x07a\x02\x02\u0714\u0715\x07R\x02" +
    "\x02\u0715\u0716\x07C\x02\x02\u0716\u0717\x07V\x02\x02\u0717\u0718\x07" +
    "J\x02\x02\u0718\xA2\x03\x02\x02\x02\u0719\u071A\x07E\x02\x02\u071A\u071B" +
    "\x07W\x02\x02\u071B\u071C\x07T\x02\x02\u071C\u071D\x07T\x02\x02\u071D" +
    "\u071E\x07G\x02\x02\u071E\u071F\x07P\x02\x02\u071F\u0720\x07V\x02\x02" +
    "\u0720\u0721\x07a\x02\x02\u0721\u0722\x07T\x02\x02\u0722\u0723\x07Q\x02" +
    "\x02\u0723\u0724\x07N\x02\x02\u0724\u0725\x07G\x02\x02\u0725\xA4\x03\x02" +
    "\x02\x02\u0726\u0727\x07E\x02\x02\u0727\u0728\x07W\x02\x02\u0728\u0729" +
    "\x07T\x02\x02\u0729\u072A\x07T\x02\x02\u072A\u072B\x07G\x02\x02\u072B" +
    "\u072C\x07P\x02\x02\u072C\u072D\x07V\x02\x02\u072D\u072E\x07a\x02\x02" +
    "\u072E\u072F\x07T\x02\x02\u072F\u0730\x07Q\x02\x02\u0730\u0731\x07Y\x02" +
    "\x02\u0731\xA6\x03\x02\x02\x02\u0732\u0733\x07E\x02\x02\u0733\u0734\x07" +
    "W\x02\x02\u0734\u0735\x07T\x02\x02\u0735\u0736\x07T\x02\x02\u0736\u0737" +
    "\x07G\x02\x02\u0737\u0738\x07P\x02\x02\u0738\u0739\x07V\x02\x02\u0739" +
    "\u073A\x07a\x02\x02\u073A\u073B\x07U\x02\x02\u073B\u073C\x07E\x02\x02" +
    "\u073C\u073D\x07J\x02\x02\u073D\u073E\x07G\x02\x02\u073E\u073F\x07O\x02" +
    "\x02\u073F\u0740\x07C\x02\x02\u0740\xA8\x03\x02\x02\x02\u0741\u0742\x07" +
    "E\x02\x02\u0742\u0743\x07W\x02\x02\u0743\u0744\x07T\x02\x02\u0744\u0745" +
    "\x07T\x02\x02\u0745\u0746\x07G\x02\x02\u0746\u0747\x07P\x02\x02\u0747" +
    "\u0748\x07V\x02\x02\u0748\u0749\x07a\x02\x02\u0749\u074A\x07V\x02\x02" +
    "\u074A\u074B\x07K\x02\x02\u074B\u074C\x07O\x02\x02\u074C\u074D\x07G\x02" +
    "\x02\u074D\xAA\x03\x02\x02\x02\u074E\u074F\x07E\x02\x02\u074F\u0750\x07" +
    "W\x02\x02\u0750\u0751\x07T\x02\x02\u0751\u0752\x07T\x02\x02\u0752\u0753" +
    "\x07G\x02\x02\u0753\u0754\x07P\x02\x02\u0754\u0755\x07V\x02\x02\u0755" +
    "\u0756\x07a\x02\x02\u0756\u0757\x07V\x02\x02\u0757\u0758\x07K\x02\x02" +
    "\u0758\u0759\x07O\x02\x02\u0759\u075A\x07G\x02\x02\u075A\u075B\x07U\x02" +
    "\x02\u075B\u075C\x07V\x02\x02\u075C\u075D\x07C\x02\x02\u075D\u075E\x07" +
    "O\x02\x02\u075E\u075F\x07R\x02\x02\u075F\xAC\x03\x02\x02\x02\u0760\u0761" +
    "\x07E\x02\x02\u0761\u0762\x07W\x02\x02\u0762\u0763\x07T\x02\x02\u0763" +
    "\u0764\x07T\x02\x02\u0764\u0765\x07G\x02\x02\u0765\u0766\x07P\x02\x02" +
    "\u0766\u0767\x07V\x02\x02\u0767\u0768\x07a\x02\x02\u0768\u0769\x07V\x02" +
    "\x02\u0769\u076A\x07T\x02\x02\u076A\u076B\x07C\x02\x02\u076B\u076C\x07" +
    "P\x02\x02\u076C\u076D\x07U\x02\x02\u076D\u076E\x07H\x02\x02\u076E\u076F" +
    "\x07Q\x02\x02\u076F\u0770\x07T\x02\x02\u0770\u0771\x07O\x02\x02\u0771" +
    "\u0772\x07a\x02\x02\u0772\u0773\x07I\x02\x02\u0773\u0774\x07T\x02\x02" +
    "\u0774\u0775\x07Q\x02\x02\u0775\u0776\x07W\x02\x02\u0776\u0777\x07R\x02" +
    "\x02\u0777\u0778\x07a\x02\x02\u0778\u0779\x07H\x02\x02\u0779\u077A\x07" +
    "Q\x02\x02\u077A\u077B\x07T\x02\x02\u077B\u077C\x07a\x02\x02\u077C\u077D" +
    "\x07V\x02\x02\u077D\u077E\x07[\x02\x02\u077E\u077F\x07R\x02\x02\u077F" +
    "\u0780\x07G\x02\x02\u0780\xAE\x03\x02\x02\x02\u0781\u0782\x07E\x02\x02" +
    "\u0782\u0783\x07W\x02\x02\u0783\u0784\x07T\x02\x02\u0784\u0785\x07T\x02" +
    "\x02\u0785\u0786\x07G\x02\x02\u0786\u0787\x07P\x02\x02\u0787\u0788\x07" +
    "V\x02\x02\u0788\u0789\x07a\x02\x02\u0789\u078A\x07W\x02\x02\u078A\u078B" +
    "\x07U\x02\x02\u078B\u078C\x07G\x02\x02\u078C\u078D\x07T\x02\x02\u078D" +
    "\xB0\x03\x02\x02\x02\u078E\u078F\x07E\x02\x02\u078F\u0790\x07W\x02\x02" +
    "\u0790\u0791\x07T\x02\x02\u0791\u0792\x07U\x02\x02\u0792\u0793\x07Q\x02" +
    "\x02\u0793\u0794\x07T\x02\x02\u0794\xB2\x03\x02\x02\x02\u0795\u0796\x07" +
    "E\x02\x02\u0796\u0797\x07[\x02\x02\u0797\u0798\x07E\x02\x02\u0798\u0799" +
    "\x07N\x02\x02\u0799\u079A\x07G\x02\x02\u079A\xB4\x03\x02\x02\x02\u079B" +
    "\u079C\x07F\x02\x02\u079C\u079D\x07C\x02\x02\u079D\u079E\x07V\x02\x02" +
    "\u079E\u079F\x07C\x02\x02\u079F\u07A0\x07D\x02\x02\u07A0\u07A1\x07C\x02" +
    "\x02\u07A1\u07A2\x07U\x02\x02\u07A2\u07A3\x07G\x02\x02\u07A3\u07A4\x07" +
    "U\x02\x02\u07A4\xB6\x03\x02\x02\x02\u07A5\u07A6\x07F\x02\x02\u07A6\u07A7" +
    "\x07C\x02\x02\u07A7\u07A8\x07V\x02\x02\u07A8\u07A9\x07G\x02\x02\u07A9" +
    "\xB8\x03\x02\x02\x02\u07AA\u07AB\x07F\x02\x02\u07AB\u07AC\x07C\x02\x02" +
    "\u07AC\u07AD\x07V\x02\x02\u07AD\u07AE\x07G\x02\x02\u07AE\u07AF\x07V\x02" +
    "\x02\u07AF\u07B0\x07K\x02\x02\u07B0\u07B1\x07O\x02\x02\u07B1\u07B2\x07" +
    "G\x02\x02\u07B2\xBA\x03\x02\x02\x02\u07B3\u07B4\x07F\x02\x02\u07B4\u07B5" +
    "\x07C\x02\x02\u07B5\u07B6\x07V\x02\x02\u07B6\u07B7\x07G\x02\x02\u07B7" +
    "\u07B8\x07V\x02\x02\u07B8\u07B9\x07K\x02\x02\u07B9\u07BA\x07O\x02\x02" +
    "\u07BA\u07BB\x07G\x02\x02\u07BB\u07BC\x07a\x02\x02\u07BC\u07BD\x07F\x02" +
    "\x02\u07BD\u07BE\x07K\x02\x02\u07BE\u07BF\x07H\x02\x02\u07BF\u07C0\x07" +
    "H\x02\x02\u07C0\xBC\x03\x02\x02\x02\u07C1\u07C2\x07F\x02\x02\u07C2\u07C3" +
    "\x07C\x02\x02\u07C3\u07C4\x07V\x02\x02\u07C4\u07C5\x07G\x02\x02\u07C5" +
    "\u07C6\x07V\x02\x02\u07C6\u07C7\x07K\x02\x02\u07C7\u07C8\x07O\x02\x02" +
    "\u07C8\u07C9\x07G\x02\x02\u07C9\u07CA\x07a\x02\x02\u07CA\u07CB\x07V\x02" +
    "\x02\u07CB\u07CC\x07T\x02\x02\u07CC\u07CD\x07W\x02\x02\u07CD\u07CE\x07" +
    "P\x02\x02\u07CE\u07CF\x07E\x02\x02\u07CF\xBE\x03\x02\x02\x02\u07D0\u07D1" +
    "\x07F\x02\x02\u07D1\u07D2\x07C\x02\x02\u07D2\u07D3\x07V\x02\x02\u07D3" +
    "\u07D4\x07G\x02\x02\u07D4\u07D5\x07a\x02\x02\u07D5\u07D6\x07F\x02\x02" +
    "\u07D6\u07D7\x07K\x02\x02\u07D7\u07D8\x07H\x02\x02\u07D8\u07D9\x07H\x02" +
    "\x02\u07D9\xC0\x03\x02\x02\x02\u07DA\u07DB\x07F\x02\x02\u07DB\u07DC\x07" +
    "C\x02\x02\u07DC\u07DD\x07V\x02\x02\u07DD\u07DE\x07G\x02\x02\u07DE\u07DF" +
    "\x07a\x02\x02\u07DF\u07E0\x07V\x02\x02\u07E0\u07E1\x07T\x02\x02\u07E1" +
    "\u07E2\x07W\x02\x02\u07E2\u07E3\x07P\x02\x02\u07E3\u07E4\x07E\x02\x02" +
    "\u07E4\xC2\x03\x02\x02\x02\u07E5\u07E6\x07F\x02\x02\u07E6\u07E7\x07C\x02" +
    "\x02\u07E7\u07E8\x07[\x02\x02\u07E8\xC4\x03\x02\x02\x02\u07E9\u07EA\x07" +
    "F\x02\x02\u07EA\u07EB\x07C\x02\x02\u07EB\u07EC\x07[\x02\x02\u07EC\u07ED" +
    "\x07Q\x02\x02\u07ED\u07EE\x07H\x02\x02\u07EE\u07EF\x07Y\x02\x02\u07EF" +
    "\u07F0\x07G\x02\x02\u07F0\u07F1\x07G\x02\x02\u07F1\u07F2\x07M\x02\x02" +
    "\u07F2\xC6\x03\x02\x02\x02\u07F3\u07F4\x07F\x02\x02\u07F4\u07F5\x07";
FlinkSqlLexer._serializedATNSegment5 = "C\x02\x02\u07F5\u07F6\x07[\x02\x02\u07F6\u07F7\x07Q\x02\x02\u07F7\u07F8" +
    "\x07H\x02\x02\u07F8\u07F9\x07[\x02\x02\u07F9\u07FA\x07G\x02\x02\u07FA" +
    "\u07FB\x07C\x02\x02\u07FB\u07FC\x07T\x02\x02\u07FC\xC8\x03\x02\x02\x02" +
    "\u07FD\u07FE\x07F\x02\x02\u07FE\u07FF\x07G\x02\x02\u07FF\u0800\x07C\x02" +
    "\x02\u0800\u0801\x07N\x02\x02\u0801\u0802\x07N\x02\x02\u0802\u0803\x07" +
    "Q\x02\x02\u0803\u0804\x07E\x02\x02\u0804\u0805\x07C\x02\x02\u0805\u0806" +
    "\x07V\x02\x02\u0806\u0807\x07G\x02\x02\u0807\xCA\x03\x02\x02\x02\u0808" +
    "\u0809\x07F\x02\x02\u0809\u080A\x07G\x02\x02\u080A\u080B\x07E\x02\x02" +
    "\u080B\xCC\x03\x02\x02\x02\u080C\u080D\x07F\x02\x02\u080D\u080E\x07G\x02" +
    "\x02\u080E\u080F\x07E\x02\x02\u080F\u0810\x07K\x02\x02\u0810\u0811\x07" +
    "O\x02\x02\u0811\u0812\x07C\x02\x02\u0812\u0813\x07N\x02\x02\u0813\xCE" +
    "\x03\x02\x02\x02\u0814\u0815\x07F\x02\x02\u0815\u0816\x07G\x02\x02\u0816" +
    "\u0817\x07E\x02\x02\u0817\u0818\x07N\x02\x02\u0818\u0819\x07C\x02\x02" +
    "\u0819\u081A\x07T\x02\x02\u081A\u081B\x07G\x02\x02\u081B\xD0\x03\x02\x02" +
    "\x02\u081C\u081D\x07F\x02\x02\u081D\u081E\x07G\x02\x02\u081E\u081F\x07" +
    "H\x02\x02\u081F\u0820\x07C\x02\x02\u0820\u0821\x07W\x02\x02\u0821\u0822" +
    "\x07N\x02\x02\u0822\u0823\x07V\x02\x02\u0823\xD2\x03\x02\x02\x02\u0824" +
    "\u0825\x07F\x02\x02\u0825\u0826\x07G\x02\x02\u0826\u0827\x07H\x02\x02" +
    "\u0827\u0828\x07K\x02\x02\u0828\u0829\x07P\x02\x02\u0829\u082A\x07G\x02" +
    "\x02\u082A\xD4\x03\x02\x02\x02\u082B\u082C\x07F\x02\x02\u082C\u082D\x07" +
    "G\x02\x02\u082D\u082E\x07N\x02\x02\u082E\u082F\x07G\x02\x02\u082F\u0830" +
    "\x07V\x02\x02\u0830\u0831\x07G\x02\x02\u0831\xD6\x03\x02\x02\x02\u0832" +
    "\u0833\x07F\x02\x02\u0833\u0834\x07G\x02\x02\u0834\u0835\x07P\x02\x02" +
    "\u0835\u0836\x07U\x02\x02\u0836\u0837\x07G\x02\x02\u0837\u0838\x07a\x02" +
    "\x02\u0838\u0839\x07T\x02\x02\u0839\u083A\x07C\x02\x02\u083A\u083B\x07" +
    "P\x02\x02\u083B\u083C\x07M\x02\x02\u083C\xD8\x03\x02\x02\x02\u083D\u083E" +
    "\x07F\x02\x02\u083E\u083F\x07G\x02\x02\u083F\u0840\x07T\x02\x02\u0840" +
    "\u0841\x07G\x02\x02\u0841\u0842\x07H\x02\x02\u0842\xDA\x03\x02\x02\x02" +
    "\u0843\u0844\x07F\x02\x02\u0844\u0845\x07G\x02\x02\u0845\u0846\x07U\x02" +
    "\x02\u0846\u0847\x07E\x02\x02\u0847\u0848\x07T\x02\x02\u0848\u0849\x07" +
    "K\x02\x02\u0849\u084A\x07D\x02\x02\u084A\u084B\x07G\x02\x02\u084B\xDC" +
    "\x03\x02\x02\x02\u084C\u084D\x07F\x02\x02\u084D\u084E\x07G\x02\x02\u084E" +
    "\u084F\x07V\x02\x02\u084F\u0850\x07G\x02\x02\u0850\u0851\x07T\x02\x02" +
    "\u0851\u0852\x07O\x02\x02\u0852\u0853\x07K\x02\x02\u0853\u0854\x07P\x02" +
    "\x02\u0854\u0855\x07K\x02\x02\u0855\u0856\x07U\x02\x02\u0856\u0857\x07" +
    "V\x02\x02\u0857\u0858\x07K\x02\x02\u0858\u0859\x07E\x02\x02\u0859\xDE" +
    "\x03\x02\x02\x02\u085A\u085B\x07F\x02\x02\u085B\u085C\x07K\x02\x02\u085C" +
    "\u085D\x07U\x02\x02\u085D\u085E\x07C\x02\x02\u085E\u085F\x07N\x02\x02" +
    "\u085F\u0860\x07N\x02\x02\u0860\u0861\x07Q\x02\x02\u0861\u0862\x07Y\x02" +
    "\x02\u0862\xE0\x03\x02\x02\x02\u0863\u0864\x07F\x02\x02\u0864\u0865\x07" +
    "K\x02\x02\u0865\u0866\x07U\x02\x02\u0866\u0867\x07E\x02\x02\u0867\u0868" +
    "\x07Q\x02\x02\u0868\u0869\x07P\x02\x02\u0869\u086A\x07P\x02\x02\u086A" +
    "\u086B\x07G\x02\x02\u086B\u086C\x07E\x02\x02\u086C\u086D\x07V\x02\x02" +
    "\u086D\xE2\x03\x02\x02\x02\u086E\u086F\x07F\x02\x02\u086F\u0870\x07K\x02" +
    "\x02\u0870\u0871\x07U\x02\x02\u0871\u0872\x07V\x02\x02\u0872\u0873\x07" +
    "K\x02\x02\u0873\u0874\x07P\x02\x02\u0874\u0875\x07E\x02\x02\u0875\u0876" +
    "\x07V\x02\x02\u0876\xE4\x03\x02\x02\x02\u0877\u0878\x07F\x02\x02\u0878" +
    "\u0879\x07Q\x02\x02\u0879\u087A\x07V\x02\x02\u087A\xE6\x03\x02\x02\x02" +
    "\u087B\u087C\x07F\x02\x02\u087C\u087D\x07Q\x02\x02\u087D\u087E\x07W\x02" +
    "\x02\u087E\u087F\x07D\x02\x02\u087F\u0880\x07N\x02\x02\u0880\u0881\x07" +
    "G\x02\x02\u0881\xE8\x03\x02\x02\x02\u0882\u0883\x07F\x02\x02\u0883\u0884" +
    "\x07T\x02\x02\u0884\u0885\x07Q\x02\x02\u0885\u0886\x07R\x02\x02\u0886" +
    "\xEA\x03\x02\x02\x02\u0887\u0888\x07F\x02\x02\u0888\u0889\x07[\x02\x02" +
    "\u0889\u088A\x07P\x02\x02\u088A\u088B\x07C\x02\x02\u088B\u088C\x07O\x02" +
    "\x02\u088C\u088D\x07K\x02\x02\u088D\u088E\x07E\x02\x02\u088E\xEC\x03\x02" +
    "\x02\x02\u088F\u0890\x07G\x02\x02\u0890\u0891\x07C\x02\x02\u0891\u0892" +
    "\x07E\x02\x02\u0892\u0893\x07J\x02\x02\u0893\xEE\x03\x02\x02\x02\u0894" +
    "\u0895\x07G\x02\x02\u0895\u0896\x07N\x02\x02\u0896\u0897\x07G\x02\x02" +
    "\u0897\u0898\x07O\x02\x02\u0898\u0899\x07G\x02\x02\u0899\u089A\x07P\x02" +
    "\x02\u089A\u089B\x07V\x02\x02\u089B\xF0\x03\x02\x02\x02\u089C\u089D\x07" +
    "G\x02\x02\u089D\u089E\x07N\x02\x02\u089E\u089F\x07U\x02\x02\u089F\u08A0" +
    "\x07G\x02\x02\u08A0\xF2\x03\x02\x02\x02\u08A1\u08A2\x07G\x02\x02\u08A2" +
    "\u08A3\x07O\x02\x02\u08A3\u08A4\x07R\x02\x02\u08A4\u08A5\x07V\x02\x02" +
    "\u08A5\u08A6\x07[\x02\x02\u08A6\xF4\x03\x02\x02\x02\u08A7\u08A8\x07G\x02" +
    "\x02\u08A8\u08A9\x07P\x02\x02\u08A9\u08AA\x07F\x02\x02\u08AA\xF6\x03\x02" +
    "\x02\x02\u08AB\u08AC\x07G\x02\x02\u08AC\u08AD\x07P\x02\x02\u08AD\u08AE" +
    "\x07F\x02\x02\u08AE\u08AF\x07a\x02\x02\u08AF\u08B0\x07H\x02\x02\u08B0" +
    "\u08B1\x07T\x02\x02\u08B1\u08B2\x07C\x02\x02\u08B2\u08B3\x07O\x02\x02" +
    "\u08B3\u08B4\x07G\x02\x02\u08B4\xF8\x03\x02\x02\x02\u08B5\u08B6\x07G\x02" +
    "\x02\u08B6\u08B7\x07P\x02\x02\u08B7\u08B8\x07F\x02\x02\u08B8\u08B9\x07" +
    "a\x02\x02\u08B9\u08BA\x07R\x02\x02\u08BA\u08BB\x07C\x02\x02\u08BB\u08BC" +
    "\x07T\x02\x02\u08BC\u08BD\x07V\x02\x02\u08BD\u08BE\x07K\x02\x02\u08BE" +
    "\u08BF\x07V\x02\x02\u08BF\u08C0\x07K\x02\x02\u08C0\u08C1\x07Q\x02\x02" +
    "\u08C1\u08C2\x07P\x02\x02\u08C2\xFA\x03\x02\x02\x02\u08C3\u08C4\x07G\x02" +
    "\x02\u08C4\u08C5\x07P\x02\x02\u08C5\u08C6\x07H\x02\x02\u08C6\u08C7\x07" +
    "Q\x02\x02\u08C7\u08C8\x07T\x02\x02\u08C8\u08C9\x07E\x02\x02\u08C9\u08CA" +
    "\x07G\x02\x02\u08CA\u08CB\x07F\x02\x02\u08CB\xFC\x03\x02\x02\x02\u08CC" +
    "\u08CD\x07G\x02\x02\u08CD\u08CE\x07S\x02\x02\u08CE\u08CF\x07W\x02\x02" +
    "\u08CF\u08D0\x07C\x02\x02\u08D0\u08D1\x07N\x02\x02\u08D1\u08D2\x07U\x02" +
    "\x02\u08D2\xFE\x03\x02\x02\x02\u08D3\u08D4\x07G\x02\x02\u08D4\u08D5\x07" +
    "U\x02\x02\u08D5\u08D6\x07E\x02\x02\u08D6\u08D7\x07C\x02\x02\u08D7\u08D8" +
    "\x07R\x02\x02\u08D8\u08D9\x07G\x02\x02\u08D9\u0100\x03\x02\x02\x02\u08DA" +
    "\u08DB\x07G\x02\x02\u08DB\u08DC\x07U\x02\x02\u08DC\u08DD\x07V\x02\x02" +
    "\u08DD\u08DE\x07K\x02\x02\u08DE\u08DF\x07O\x02\x02\u08DF\u08E0\x07C\x02" +
    "\x02\u08E0\u08E1\x07V\x02\x02\u08E1\u08E2\x07G\x02\x02\u08E2\u08E3\x07" +
    "F\x02\x02\u08E3\u08E4\x07a\x02\x02\u08E4\u08E5\x07E\x02\x02\u08E5\u08E6" +
    "\x07Q\x02\x02\u08E6\u08E7\x07U\x02\x02\u08E7\u08E8\x07V\x02\x02\u08E8" +
    "\u0102\x03\x02\x02\x02\u08E9\u08EA\x07G\x02\x02\u08EA\u08EB\x07X\x02\x02" +
    "\u08EB\u08EC\x07G\x02\x02\u08EC\u08ED\x07T\x02\x02\u08ED\u08EE\x07[\x02" +
    "\x02\u08EE\u0104\x03\x02\x02\x02\u08EF\u08F0\x07G\x02\x02\u08F0\u08F1" +
    "\x07Z\x02\x02\u08F1\u08F2\x07E\x02\x02\u08F2\u08F3\x07G\x02\x02\u08F3" +
    "\u08F4\x07R\x02\x02\u08F4\u08F5\x07V\x02\x02\u08F5\u0106\x03\x02\x02\x02" +
    "\u08F6\u08F7\x07G\x02\x02\u08F7\u08F8\x07Z\x02\x02\u08F8\u08F9\x07G\x02" +
    "\x02\u08F9\u08FA\x07E\x02\x02\u08FA\u0108\x03\x02\x02\x02\u08FB\u08FC" +
    "\x07G\x02\x02\u08FC\u08FD\x07Z\x02\x02\u08FD\u08FE\x07G\x02\x02\u08FE" +
    "\u08FF\x07E\x02\x02\u08FF\u0900\x07W\x02\x02\u0900\u0901\x07V\x02\x02" +
    "\u0901\u0902\x07G\x02\x02\u0902\u010A\x03\x02\x02\x02\u0903\u0904\x07" +
    "G\x02\x02\u0904\u0905\x07Z\x02\x02\u0905\u0906\x07K\x02\x02\u0906\u0907" +
    "\x07U\x02\x02\u0907\u0908\x07V\x02\x02\u0908\u0909\x07U\x02\x02\u0909" +
    "\u010C\x03\x02\x02\x02\u090A\u090B\x07G\x02\x02\u090B\u090C\x07Z\x02\x02" +
    "\u090C\u090D\x07R\x02\x02\u090D\u010E\x03\x02\x02\x02\u090E\u090F\x07" +
    "G\x02\x02\u090F\u0910\x07Z\x02\x02\u0910\u0911\x07R\x02\x02\u0911\u0912" +
    "\x07N\x02\x02\u0912\u0913\x07C\x02\x02\u0913\u0914\x07K\x02\x02\u0914" +
    "\u0915\x07P\x02\x02\u0915\u0110\x03\x02\x02\x02\u0916\u0917\x07G\x02\x02" +
    "\u0917\u0918\x07Z\x02\x02\u0918\u0919\x07V\x02\x02\u0919\u091A\x07G\x02" +
    "\x02\u091A\u091B\x07P\x02\x02\u091B\u091C\x07F\x02\x02\u091C\u0112\x03" +
    "\x02\x02\x02\u091D\u091E\x07G\x02\x02\u091E\u091F\x07Z\x02\x02\u091F\u0920" +
    "\x07V\x02\x02\u0920\u0921\x07G\x02\x02\u0921\u0922\x07P\x02\x02\u0922" +
    "\u0923\x07F\x02\x02\u0923\u0924\x07G\x02\x02\u0924\u0925\x07F\x02\x02" +
    "\u0925\u0114\x03\x02\x02\x02\u0926\u0927\x07G\x02\x02\u0927\u0928\x07" +
    "Z\x02\x02\u0928\u0929\x07V\x02\x02\u0929\u092A\x07G\x02\x02\u092A\u092B" +
    "\x07T\x02\x02\u092B\u092C\x07P\x02\x02\u092C\u092D\x07C\x02\x02\u092D" +
    "\u092E\x07N\x02\x02\u092E\u0116\x03\x02\x02\x02\u092F\u0930\x07G\x02\x02" +
    "\u0930\u0931\x07Z\x02\x02\u0931\u0932\x07V\x02\x02\u0932\u0933\x07T\x02" +
    "\x02\u0933\u0934\x07C\x02\x02\u0934\u0935\x07E\x02\x02\u0935\u0936\x07" +
    "V\x02\x02\u0936\u0118\x03\x02\x02\x02\u0937\u0938\x07H\x02\x02\u0938\u0939" +
    "\x07C\x02\x02\u0939\u093A\x07N\x02\x02\u093A\u093B\x07U\x02\x02\u093B" +
    "\u093C\x07G\x02\x02\u093C\u011A\x03\x02\x02\x02\u093D\u093E\x07H\x02\x02" +
    "\u093E\u093F\x07G\x02\x02\u093F\u0940\x07V\x02\x02\u0940\u0941\x07E\x02" +
    "\x02\u0941\u0942\x07J\x02\x02\u0942\u011C\x03\x02\x02\x02\u0943\u0944" +
    "\x07H\x02\x02\u0944\u0945\x07K\x02\x02\u0945\u0946\x07N\x02\x02\u0946" +
    "\u0947\x07V\x02\x02\u0947\u0948\x07G\x02\x02\u0948\u0949\x07T\x02\x02" +
    "\u0949\u011E\x03\x02\x02\x02\u094A\u094B\x07H\x02\x02\u094B\u094C\x07" +
    "K\x02\x02\u094C\u094D\x07T\x02\x02\u094D\u094E\x07U\x02\x02\u094E\u094F" +
    "\x07V\x02\x02\u094F\u0950\x07a\x02\x02\u0950\u0951\x07X\x02\x02\u0951" +
    "\u0952\x07C\x02\x02\u0952\u0953\x07N\x02\x02\u0953\u0954\x07W\x02\x02" +
    "\u0954\u0955\x07G\x02\x02\u0955\u0120\x03\x02\x02\x02\u0956\u0957\x07" +
    "H\x02\x02\u0957\u0958\x07N\x02\x02\u0958\u0959\x07Q\x02\x02\u0959\u095A" +
    "\x07C\x02\x02\u095A\u095B\x07V\x02\x02\u095B\u0122\x03\x02\x02\x02\u095C" +
    "\u095D\x07H\x02\x02\u095D\u095E\x07N\x02\x02\u095E\u095F\x07Q\x02\x02" +
    "\u095F\u0960\x07Q\x02\x02\u0960\u0961\x07T\x02\x02\u0961\u0124\x03\x02" +
    "\x02\x02\u0962\u0963\x07H\x02\x02\u0963\u0964\x07Q\x02\x02\u0964\u0965" +
    "\x07T\x02\x02\u0965\u0126\x03\x02\x02\x02\u0966\u0967\x07H\x02\x02\u0967" +
    "\u0968\x07Q\x02\x02\u0968\u0969\x07T\x02\x02\u0969\u096A\x07G\x02\x02" +
    "\u096A\u096B\x07K\x02\x02\u096B\u096C\x07I\x02\x02\u096C\u096D\x07P\x02" +
    "\x02\u096D\u0128\x03\x02\x02\x02\u096E\u096F\x07H\x02\x02\u096F\u0970" +
    "\x07T\x02\x02\u0970\u0971\x07C\x02\x02\u0971\u0972\x07O\x02\x02\u0972" +
    "\u0973\x07G\x02\x02\u0973\u0974\x07a\x02\x02\u0974\u0975\x07T\x02\x02" +
    "\u0975\u0976\x07Q\x02\x02\u0976\u0977\x07Y\x02\x02\u0977\u012A\x03\x02" +
    "\x02\x02\u0978\u0979\x07H\x02\x02\u0979\u097A\x07T\x02\x02\u097A\u097B" +
    "\x07G\x02\x02\u097B\u097C\x07G\x02\x02\u097C\u012C\x03\x02\x02\x02\u097D" +
    "\u097E\x07H\x02\x02\u097E\u097F\x07T\x02\x02\u097F\u0980\x07K\x02\x02" +
    "\u0980\u0981\x07F\x02\x02\u0981\u0982\x07C\x02\x02\u0982\u0983\x07[\x02" +
    "\x02\u0983\u012E\x03\x02\x02\x02\u0984\u0985\x07H\x02\x02\u0985\u0986" +
    "\x07T\x02\x02\u0986\u0987\x07Q\x02\x02\u0987\u0988\x07O\x02\x02\u0988" +
    "\u0130\x03\x02\x02\x02\u0989\u098A\x07H\x02\x02\u098A\u098B\x07W\x02\x02" +
    "\u098B\u098C\x07N\x02\x02\u098C\u098D\x07N\x02\x02\u098D\u0132\x03\x02" +
    "\x02\x02\u098E\u098F\x07H\x02\x02\u098F\u0990\x07W\x02\x02\u0990\u0991" +
    "\x07P\x02\x02\u0991\u0992\x07E\x02\x02\u0992\u0993\x07V\x02\x02\u0993" +
    "\u0994\x07K\x02\x02\u0994\u0995\x07Q\x02\x02\u0995\u0996\x07P\x02\x02" +
    "\u0996\u0134\x03\x02\x02\x02\u0997\u0998\x07H\x02\x02\u0998\u0999\x07" +
    "W\x02\x02\u0999\u099A\x07P\x02\x02\u099A\u099B\x07E\x02\x02\u099B\u099C" +
    "\x07V\x02\x02\u099C\u099D\x07K\x02\x02\u099D\u099E\x07Q\x02\x02\u099E" +
    "\u099F\x07P\x02\x02\u099F\u09A0\x07U\x02\x02\u09A0\u0136\x03\x02\x02\x02" +
    "\u09A1\u09A2\x07H\x02\x02\u09A2\u09A3\x07W\x02\x02\u09A3\u09A4\x07U\x02" +
    "\x02\u09A4\u09A5\x07K\x02\x02\u09A5\u09A6\x07Q\x02\x02\u09A6\u09A7\x07" +
    "P\x02\x02\u09A7\u0138\x03\x02\x02\x02\u09A8\u09A9\x07I\x02\x02\u09A9\u09AA" +
    "\x07G\x02\x02\u09AA\u09AB\x07V\x02\x02\u09AB\u013A\x03\x02\x02\x02\u09AC" +
    "\u09AD\x07I\x02\x02\u09AD\u09AE\x07N\x02\x02\u09AE\u09AF\x07Q\x02\x02" +
    "\u09AF\u09B0\x07D\x02\x02\u09B0\u09B1\x07C\x02\x02\u09B1\u09B2\x07N\x02" +
    "\x02\u09B2\u013C\x03\x02\x02\x02\u09B3\u09B4\x07I\x02\x02\u09B4\u09B5" +
    "\x07T\x02\x02\u09B5\u09B6\x07C\x02\x02\u09B6\u09B7\x07P\x02\x02\u09B7" +
    "\u09B8\x07V\x02\x02\u09B8\u013E\x03\x02\x02\x02\u09B9\u09BA\x07I\x02\x02" +
    "\u09BA\u09BB\x07T\x02\x02\u09BB\u09BC\x07Q\x02\x02\u09BC\u09BD\x07W\x02" +
    "\x02\u09BD\u09BE\x07R\x02\x02\u09BE\u0140\x03\x02\x02\x02\u09BF\u09C0" +
    "\x07I\x02\x02\u09C0\u09C1\x07T\x02\x02\u09C1\u09C2\x07Q\x02\x02\u09C2" +
    "\u09C3\x07W\x02\x02\u09C3\u09C4\x07R\x02\x02\u09C4\u09C5\x07K\x02\x02" +
    "\u09C5\u09C6\x07P\x02\x02\u09C6\u09C7\x07I\x02\x02\u09C7\u0142\x03\x02" +
    "\x02\x02\u09C8\u09C9\x07I\x02\x02\u09C9\u09CA\x07T\x02\x02\u09CA\u09CB" +
    "\x07Q\x02\x02\u09CB\u09CC\x07W\x02\x02\u09CC\u09CD\x07R\x02\x02\u09CD" +
    "\u09CE\x07U\x02\x02\u09CE\u0144\x03\x02\x02\x02\u09CF\u09D0\x07I\x02\x02" +
    "\u09D0\u09D1\x07T\x02\x02\u09D1\u09D2\x07Q\x02\x02\u09D2\u09D3\x07W\x02" +
    "\x02\u09D3\u09D4\x07R\x02\x02\u09D4\u09D5\x07a\x02\x02\u09D5\u09D6\x07" +
    "E\x02\x02\u09D6\u09D7\x07Q\x02\x02\u09D7\u09D8\x07P\x02\x02\u09D8\u09D9" +
    "\x07E\x02\x02\u09D9\u09DA\x07C\x02\x02\u09DA\u09DB\x07V\x02\x02\u09DB" +
    "\u0146\x03\x02\x02\x02\u09DC\u09DD\x07J\x02\x02\u09DD\u09DE\x07C\x02\x02" +
    "\u09DE\u09DF\x07X\x02\x02\u09DF\u09E0\x07K\x02\x02\u09E0\u09E1\x07P\x02" +
    "\x02\u09E1\u09E2\x07I\x02\x02\u09E2\u0148\x03\x02\x02\x02\u09E3\u09E4" +
    "\x07J\x02\x02\u09E4\u09E5\x07Q\x02\x02\u09E5\u09E6\x07N\x02\x02\u09E6" +
    "\u09E7\x07F\x02\x02\u09E7\u014A\x03\x02\x02\x02\u09E8\u09E9\x07J\x02\x02" +
    "\u09E9\u09EA\x07Q\x02\x02\u09EA\u09EB\x07W\x02\x02\u09EB\u09EC\x07T\x02" +
    "\x02\u09EC\u014C\x03\x02\x02\x02\u09ED\u09EE\x07K\x02\x02\u09EE\u09EF" +
    "\x07F\x02\x02\u09EF\u09F0\x07G\x02\x02\u09F0\u09F1\x07P\x02\x02\u09F1" +
    "\u09F2\x07V\x02\x02\u09F2\u09F3\x07K\x02\x02\u09F3\u09F4\x07V\x02\x02" +
    "\u09F4\u09F5\x07[\x02\x02\u09F5\u014E\x03\x02\x02\x02\u09F6\u09F7\x07" +
    "K\x02\x02\u09F7\u09F8\x07H\x02\x02\u09F8\u0150\x03\x02\x02\x02\u09F9\u09FA" +
    "\x07K\x02\x02\u09FA\u09FB\x07N\x02\x02\u09FB\u09FC\x07K\x02\x02\u09FC" +
    "\u09FD\x07M\x02\x02\u09FD\u09FE\x07G\x02\x02\u09FE\u0152\x03\x02\x02\x02" +
    "\u09FF\u0A00\x07K\x02\x02\u0A00\u0A01\x07O\x02\x02\u0A01\u0A02\x07R\x02" +
    "\x02\u0A02\u0A03\x07Q\x02\x02\u0A03\u0A04\x07T\x02\x02\u0A04\u0A05\x07" +
    "V\x02\x02\u0A05\u0154\x03\x02\x02\x02\u0A06\u0A07\x07K\x02\x02\u0A07\u0A08" +
    "\x07P\x02\x02\u0A08\u0156\x03\x02\x02\x02\u0A09\u0A0A\x07K\x02\x02\u0A0A" +
    "\u0A0B\x07P\x02\x02\u0A0B\u0A0C\x07E\x02\x02\u0A0C\u0A0D\x07N\x02\x02" +
    "\u0A0D\u0A0E\x07W\x02\x02\u0A0E\u0A0F\x07F\x02\x02\u0A0F\u0A10\x07G\x02" +
    "\x02\u0A10\u0158\x03\x02\x02\x02\u0A11\u0A12\x07K\x02\x02\u0A12\u0A13" +
    "\x07P\x02\x02\u0A13\u0A14\x07F\x02\x02\u0A14\u0A15\x07K\x02\x02\u0A15" +
    "\u0A16\x07E\x02\x02\u0A16\u0A17\x07C\x02\x02\u0A17\u0A18\x07V\x02\x02" +
    "\u0A18\u0A19\x07Q\x02\x02\u0A19\u0A1A\x07T\x02\x02\u0A1A\u015A\x03\x02" +
    "\x02\x02\u0A1B\u0A1C\x07K\x02\x02\u0A1C\u0A1D\x07P\x02\x02\u0A1D\u0A1E" +
    "\x07K\x02\x02\u0A1E\u0A1F\x07V\x02\x02\u0A1F\u0A20\x07K\x02\x02\u0A20" +
    "\u0A21\x07C\x02\x02\u0A21\u0A22\x07N\x02\x02\u0A22\u015C\x03\x02\x02\x02" +
    "\u0A23\u0A24\x07K\x02\x02\u0A24\u0A25\x07P\x02\x02\u0A25\u0A26\x07P\x02" +
    "\x02\u0A26\u0A27\x07G\x02\x02\u0A27\u0A28\x07T\x02\x02\u0A28\u015E\x03" +
    "\x02\x02\x02\u0A29\u0A2A\x07K\x02\x02\u0A2A\u0A2B\x07P\x02\x02\u0A2B\u0A2C" +
    "\x07Q\x02\x02\u0A2C\u0A2D\x07W\x02\x02\u0A2D\u0A2E\x07V\x02\x02\u0A2E" +
    "\u0160\x03\x02\x02\x02\u0A2F\u0A30\x07K\x02\x02\u0A30\u0A31\x07P\x02\x02" +
    "\u0A31\u0A32\x07U\x02\x02\u0A32\u0A33\x07G\x02\x02\u0A33\u0A34\x07P\x02" +
    "\x02\u0A34\u0A35\x07U\x02\x02\u0A35\u0A36\x07K\x02\x02\u0A36\u0A37\x07" +
    "V\x02\x02\u0A37\u0A38\x07K\x02\x02\u0A38\u0A39\x07X\x02\x02\u0A39\u0A3A" +
    "\x07G\x02\x02\u0A3A\u0162\x03\x02\x02\x02\u0A3B\u0A3C\x07K\x02\x02\u0A3C" +
    "\u0A3D\x07P\x02\x02\u0A3D\u0A3E\x07U\x02\x02\u0A3E\u0A3F\x07G\x02\x02" +
    "\u0A3F\u0A40\x07T\x02\x02\u0A40\u0A41\x07V\x02\x02\u0A41\u0164\x03\x02" +
    "\x02\x02\u0A42\u0A43\x07K\x02\x02\u0A43\u0A44\x07P\x02\x02\u0A44\u0A45" +
    "\x07V\x02\x02\u0A45\u0166\x03\x02\x02\x02\u0A46\u0A47\x07K\x02\x02\u0A47" +
    "\u0A48\x07P\x02\x02\u0A48\u0A49\x07V\x02\x02\u0A49\u0A4A\x07G\x02\x02" +
    "\u0A4A\u0A4B\x07I\x02\x02\u0A4B\u0A4C\x07G\x02\x02\u0A4C\u0A4D\x07T\x02" +
    "\x02\u0A4D\u0168\x03\x02\x02\x02\u0A4E\u0A4F\x07K\x02\x02\u0A4F\u0A50" +
    "\x07P\x02\x02\u0A50\u0A51\x07V\x02\x02\u0A51\u0A52\x07G\x02\x02\u0A52" +
    "\u0A53\x07T\x02\x02\u0A53\u0A54\x07U\x02\x02\u0A54\u0A55\x07G\x02\x02" +
    "\u0A55\u0A56\x07E\x02\x02\u0A56\u0A57\x07V\x02\x02\u0A57\u016A\x03\x02" +
    "\x02\x02\u0A58\u0A59\x07K\x02\x02\u0A59\u0A5A\x07P\x02\x02\u0A5A\u0A5B" +
    "\x07V\x02\x02\u0A5B\u0A5C\x07G\x02\x02\u0A5C\u0A5D\x07T\x02\x02\u0A5D" +
    "\u0A5E\x07U\x02\x02\u0A5E\u0A5F\x07G\x02\x02\u0A5F\u0A60\x07E\x02\x02" +
    "\u0A60\u0A61\x07V\x02\x02\u0A61\u0A62\x07K\x02\x02\u0A62\u0A63\x07Q\x02" +
    "\x02\u0A63\u0A64\x07P\x02\x02\u0A64\u016C\x03\x02\x02\x02\u0A65\u0A66" +
    "\x07K\x02\x02\u0A66\u0A67\x07P\x02\x02\u0A67\u0A68\x07V\x02\x02\u0A68" +
    "\u0A69\x07G\x02\x02\u0A69\u0A6A\x07T\x02\x02\u0A6A\u0A6B\x07X\x02\x02" +
    "\u0A6B\u0A6C\x07C\x02\x02\u0A6C\u0A6D\x07N\x02\x02\u0A6D\u016E\x03\x02" +
    "\x02\x02\u0A6E\u0A6F\x07K\x02\x02\u0A6F\u0A70\x07P\x02\x02\u0A70\u0A71" +
    "\x07V\x02\x02\u0A71\u0A72\x07Q\x02\x02\u0A72\u0170\x03\x02\x02\x02\u0A73" +
    "\u0A74\x07K\x02\x02\u0A74\u0A75\x07U\x02\x02\u0A75\u0172\x03\x02\x02\x02" +
    "\u0A76\u0A77\x07L\x02\x02\u0A77\u0A78\x07Q\x02\x02\u0A78\u0A79\x07K\x02" +
    "\x02\u0A79\u0A7A\x07P\x02\x02\u0A7A\u0174\x03\x02\x02\x02\u0A7B\u0A7C" +
    "\x07L\x02\x02\u0A7C\u0A7D\x07U\x02\x02\u0A7D\u0A7E\x07Q\x02\x02\u0A7E" +
    "\u0A7F\x07P\x02\x02\u0A7F\u0A80\x07a\x02\x02\u0A80\u0A81\x07C\x02\x02" +
    "\u0A81\u0A82\x07T\x02\x02\u0A82\u0A83\x07T\x02\x02\u0A83\u0A84\x07C\x02" +
    "\x02\u0A84\u0A85\x07[\x02\x02\u0A85\u0176\x03\x02\x02\x02\u0A86\u0A87" +
    "\x07L\x02\x02\u0A87\u0A88\x07U\x02\x02\u0A88\u0A89\x07Q\x02\x02\u0A89" +
    "\u0A8A\x07P\x02\x02\u0A8A\u0A8B\x07a\x02\x02\u0A8B\u0A8C\x07C\x02\x02" +
    "\u0A8C\u0A8D\x07T\x02\x02\u0A8D\u0A8E\x07T\x02\x02\u0A8E\u0A8F\x07C\x02" +
    "\x02\u0A8F\u0A90\x07[\x02\x02\u0A90\u0A91\x07C\x02\x02\u0A91\u0A92\x07" +
    "I\x02\x02\u0A92\u0A93\x07I\x02\x02\u0A93\u0178\x03\x02\x02\x02\u0A94\u0A95" +
    "\x07L\x02\x02\u0A95\u0A96\x07U\x02\x02\u0A96\u0A97\x07Q\x02\x02\u0A97" +
    "\u0A98\x07P\x02\x02\u0A98\u0A99\x07a\x02\x02\u0A99\u0A9A\x07G\x02\x02" +
    "\u0A9A\u0A9B\x07Z\x02\x02\u0A9B\u0A9C\x07G\x02\x02\u0A9C\u0A9D\x07E\x02" +
    "\x02\u0A9D\u0A9E\x07W\x02\x02\u0A9E\u0A9F\x07V\x02\x02\u0A9F\u0AA0\x07" +
    "K\x02\x02\u0AA0\u0AA1\x07Q\x02\x02\u0AA1\u0AA2\x07P\x02\x02\u0AA2\u0AA3" +
    "\x07a\x02\x02\u0AA3\u0AA4\x07R\x02\x02\u0AA4\u0AA5\x07N\x02\x02\u0AA5" +
    "\u0AA6\x07C\x02\x02\u0AA6\u0AA7\x07P\x02\x02\u0AA7\u017A\x03\x02\x02\x02" +
    "\u0AA8\u0AA9\x07L\x02\x02\u0AA9\u0AAA\x07U\x02\x02\u0AAA\u0AAB\x07Q\x02" +
    "\x02\u0AAB\u0AAC\x07P\x02\x02\u0AAC\u0AAD\x07a\x02\x02\u0AAD\u0AAE\x07" +
    "G\x02\x02\u0AAE\u0AAF\x07Z\x02\x02\u0AAF\u0AB0\x07K\x02\x02\u0AB0\u0AB1" +
    "\x07U\x02\x02\u0AB1\u0AB2\x07V\x02\x02\u0AB2\u0AB3\x07U\x02\x02\u0AB3" +
    "\u017C\x03\x02\x02\x02\u0AB4\u0AB5\x07L\x02\x02\u0AB5\u0AB6\x07U\x02\x02" +
    "\u0AB6\u0AB7\x07Q\x02\x02\u0AB7\u0AB8\x07P\x02\x02\u0AB8\u0AB9\x07a\x02" +
    "\x02\u0AB9\u0ABA\x07Q\x02\x02\u0ABA\u0ABB\x07D\x02\x02\u0ABB\u0ABC\x07" +
    "L\x02\x02\u0ABC\u0ABD\x07G\x02\x02\u0ABD\u0ABE\x07E\x02\x02\u0ABE\u0ABF" +
    "\x07V\x02\x02\u0ABF\u017E\x03\x02\x02\x02\u0AC0\u0AC1\x07L\x02\x02\u0AC1" +
    "\u0AC2\x07U\x02\x02\u0AC2\u0AC3\x07Q\x02\x02\u0AC3\u0AC4\x07P\x02\x02" +
    "\u0AC4\u0AC5\x07a\x02\x02\u0AC5\u0AC6\x07Q\x02\x02\u0AC6\u0AC7\x07D\x02" +
    "\x02\u0AC7\u0AC8\x07L\x02\x02\u0AC8\u0AC9\x07G\x02\x02\u0AC9\u0ACA\x07" +
    "E\x02\x02\u0ACA\u0ACB\x07V\x02\x02\u0ACB\u0ACC\x07C\x02\x02\u0ACC\u0ACD" +
    "\x07I\x02\x02\u0ACD\u0ACE\x07I\x02\x02\u0ACE\u0180\x03\x02\x02\x02\u0ACF" +
    "\u0AD0\x07L\x02\x02\u0AD0\u0AD1\x07U\x02\x02\u0AD1\u0AD2\x07Q\x02\x02" +
    "\u0AD2\u0AD3\x07P\x02\x02\u0AD3\u0AD4\x07a\x02\x02\u0AD4\u0AD5\x07S\x02" +
    "\x02\u0AD5\u0AD6\x07W\x02\x02\u0AD6\u0AD7\x07G\x02\x02\u0AD7\u0AD8\x07" +
    "T\x02\x02\u0AD8\u0AD9\x07[\x02\x02\u0AD9\u0182\x03\x02\x02\x02\u0ADA\u0ADB" +
    "\x07L\x02\x02\u0ADB\u0ADC\x07U\x02\x02\u0ADC\u0ADD\x07Q\x02\x02\u0ADD" +
    "\u0ADE\x07P\x02\x02\u0ADE\u0ADF\x07a\x02\x02\u0ADF\u0AE0\x07X\x02\x02" +
    "\u0AE0\u0AE1\x07C\x02\x02\u0AE1\u0AE2\x07N\x02\x02\u0AE2\u0AE3\x07W\x02" +
    "\x02\u0AE3\u0AE4\x07G\x02\x02\u0AE4\u0184\x03\x02\x02\x02\u0AE5\u0AE6" +
    "\x07N\x02\x02\u0AE6\u0AE7\x07C\x02\x02\u0AE7\u0AE8\x07I\x02\x02\u0AE8" +
    "\u0186\x03\x02\x02\x02\u0AE9\u0AEA\x07N\x02\x02\u0AEA\u0AEB\x07C\x02\x02" +
    "\u0AEB\u0AEC\x07P\x02\x02\u0AEC\u0AED\x07I\x02\x02\u0AED\u0AEE\x07W\x02" +
    "\x02\u0AEE\u0AEF\x07C\x02\x02\u0AEF\u0AF0\x07I\x02\x02\u0AF0\u0AF1\x07" +
    "G\x02\x02\u0AF1\u0188\x03\x02\x02\x02\u0AF2\u0AF3\x07N\x02\x02\u0AF3\u0AF4" +
    "\x07C\x02\x02\u0AF4\u0AF5\x07T\x02\x02\u0AF5\u0AF6\x07I\x02\x02\u0AF6" +
    "\u0AF7\x07G\x02\x02\u0AF7\u018A\x03\x02\x02\x02\u0AF8\u0AF9\x07N\x02\x02" +
    "\u0AF9\u0AFA\x07C\x02\x02\u0AFA\u0AFB\x07U\x02\x02\u0AFB\u0AFC\x07V\x02" +
    "\x02\u0AFC\u0AFD\x07a\x02\x02\u0AFD\u0AFE\x07X\x02\x02\u0AFE\u0AFF\x07" +
    "C\x02\x02\u0AFF\u0B00\x07N\x02\x02\u0B00\u0B01\x07W\x02\x02\u0B01\u0B02" +
    "\x07G\x02\x02\u0B02\u018C\x03\x02\x02\x02\u0B03\u0B04\x07N\x02\x02\u0B04" +
    "\u0B05\x07C\x02\x02\u0B05\u0B06\x07V\x02\x02\u0B06\u0B07\x07G\x02\x02" +
    "\u0B07\u0B08\x07T\x02\x02\u0B08\u0B09\x07C\x02\x02\u0B09\u0B0A\x07N\x02" +
    "\x02\u0B0A\u018E\x03\x02\x02\x02\u0B0B\u0B0C\x07N\x02\x02\u0B0C\u0B0D" +
    "\x07G\x02\x02\u0B0D\u0B0E\x07C\x02\x02\u0B0E\u0B0F\x07F\x02\x02\u0B0F" +
    "\u0190\x03\x02\x02\x02\u0B10\u0B11\x07N\x02\x02\u0B11\u0B12\x07G\x02\x02" +
    "\u0B12\u0B13\x07C\x02\x02\u0B13\u0B14\x07F\x02\x02\u0B14\u0B15\x07K\x02" +
    "\x02\u0B15\u0B16\x07P\x02\x02\u0B16\u0B17\x07I\x02\x02\u0B17\u0192\x03" +
    "\x02\x02\x02\u0B18\u0B19\x07N\x02\x02\u0B19\u0B1A\x07G\x02\x02\u0B1A\u0B1B" +
    "\x07H\x02\x02\u0B1B\u0B1C\x07V\x02\x02\u0B1C\u0194\x03\x02\x02\x02\u0B1D" +
    "\u0B1E\x07N\x02\x02\u0B1E\u0B1F\x07K\x02\x02\u0B1F\u0B20\x07M\x02\x02" +
    "\u0B20\u0B21\x07G\x02\x02\u0B21\u0196\x03\x02\x02\x02\u0B22\u0B23\x07" +
    "N\x02\x02\u0B23\u0B24\x07K\x02\x02\u0B24\u0B25\x07M\x02\x02\u0B25\u0B26" +
    "\x07G\x02\x02\u0B26\u0B27\x07a\x02\x02\u0B27\u0B28\x07T\x02\x02\u0B28" +
    "\u0B29\x07G\x02\x02\u0B29\u0B2A\x07I\x02\x02\u0B2A\u0B2B\x07G\x02\x02" +
    "\u0B2B\u0B2C\x07Z\x02\x02\u0B2C\u0198\x03\x02\x02\x02\u0B2D\u0B2E\x07" +
    "N\x02\x02\u0B2E\u0B2F\x07K\x02\x02\u0B2F\u0B30\x07O\x02\x02\u0B30\u0B31" +
    "\x07K\x02\x02\u0B31\u0B32\x07V\x02\x02\u0B32\u019A\x03\x02\x02\x02\u0B33" +
    "\u0B34\x07N\x02\x02\u0B34\u0B35\x07P\x02\x02\u0B35\u019C\x03\x02\x02";
FlinkSqlLexer._serializedATNSegment6 = "\x02\u0B36\u0B37\x07N\x02\x02\u0B37\u0B38\x07Q\x02\x02\u0B38\u0B39\x07" +
    "E\x02\x02\u0B39\u0B3A\x07C\x02\x02\u0B3A\u0B3B\x07N\x02\x02\u0B3B\u019E" +
    "\x03\x02\x02\x02\u0B3C\u0B3D\x07N\x02\x02\u0B3D\u0B3E\x07Q\x02\x02\u0B3E" +
    "\u0B3F\x07E\x02\x02\u0B3F\u0B40\x07C\x02\x02\u0B40\u0B41\x07N\x02\x02" +
    "\u0B41\u0B42\x07V\x02\x02\u0B42\u0B43\x07K\x02\x02\u0B43\u0B44\x07O\x02" +
    "\x02\u0B44\u0B45\x07G\x02\x02\u0B45\u01A0\x03\x02\x02\x02\u0B46\u0B47" +
    "\x07N\x02\x02\u0B47\u0B48\x07Q\x02\x02\u0B48\u0B49\x07E\x02\x02\u0B49" +
    "\u0B4A\x07C\x02\x02\u0B4A\u0B4B\x07N\x02\x02\u0B4B\u0B4C\x07V\x02\x02" +
    "\u0B4C\u0B4D\x07K\x02\x02\u0B4D\u0B4E\x07O\x02\x02\u0B4E\u0B4F\x07G\x02" +
    "\x02\u0B4F\u0B50\x07U\x02\x02\u0B50\u0B51\x07V\x02\x02\u0B51\u0B52\x07" +
    "C\x02\x02\u0B52\u0B53\x07O\x02\x02\u0B53\u0B54\x07R\x02\x02\u0B54\u01A2" +
    "\x03\x02\x02\x02\u0B55\u0B56\x07N\x02\x02\u0B56\u0B57\x07Q\x02\x02\u0B57" +
    "\u0B58\x07Y\x02\x02\u0B58\u0B59\x07G\x02\x02\u0B59\u0B5A\x07T\x02\x02" +
    "\u0B5A\u01A4\x03\x02\x02\x02\u0B5B\u0B5C\x07O\x02\x02\u0B5C\u0B5D\x07" +
    "C\x02\x02\u0B5D\u0B5E\x07V\x02\x02\u0B5E\u0B5F\x07E\x02\x02\u0B5F\u0B60" +
    "\x07J\x02\x02\u0B60\u01A6\x03\x02\x02\x02\u0B61\u0B62\x07O\x02\x02\u0B62" +
    "\u0B63\x07C\x02\x02\u0B63\u0B64\x07V\x02\x02\u0B64\u0B65\x07E\x02\x02" +
    "\u0B65\u0B66\x07J\x02\x02\u0B66\u0B67\x07G\x02\x02\u0B67\u0B68\x07U\x02" +
    "\x02\u0B68\u01A8\x03\x02\x02\x02\u0B69\u0B6A\x07O\x02\x02\u0B6A\u0B6B" +
    "\x07C\x02\x02\u0B6B\u0B6C\x07V\x02\x02\u0B6C\u0B6D\x07E\x02\x02\u0B6D" +
    "\u0B6E\x07J\x02\x02\u0B6E\u0B6F\x07a\x02\x02\u0B6F\u0B70\x07P\x02\x02" +
    "\u0B70\u0B71\x07W\x02\x02\u0B71\u0B72\x07O\x02\x02\u0B72\u0B73\x07D\x02" +
    "\x02\u0B73\u0B74\x07G\x02\x02\u0B74\u0B75\x07T\x02\x02\u0B75\u01AA\x03" +
    "\x02\x02\x02\u0B76\u0B77\x07O\x02\x02\u0B77\u0B78\x07C\x02\x02\u0B78\u0B79" +
    "\x07V\x02\x02\u0B79\u0B7A\x07E\x02\x02\u0B7A\u0B7B\x07J\x02\x02\u0B7B" +
    "\u0B7C\x07a\x02\x02\u0B7C\u0B7D\x07T\x02\x02\u0B7D\u0B7E\x07G\x02\x02" +
    "\u0B7E\u0B7F\x07E\x02\x02\u0B7F\u0B80\x07Q\x02\x02\u0B80\u0B81\x07I\x02" +
    "\x02\u0B81\u0B82\x07P\x02\x02\u0B82\u0B83\x07K\x02\x02\u0B83\u0B84\x07" +
    "\\\x02\x02\u0B84\u0B85\x07G\x02\x02\u0B85\u01AC\x03\x02\x02\x02\u0B86" +
    "\u0B87\x07O\x02\x02\u0B87\u0B88\x07C\x02\x02\u0B88\u0B89\x07Z\x02\x02" +
    "\u0B89\u01AE\x03\x02\x02\x02\u0B8A\u0B8B\x07O\x02\x02\u0B8B\u0B8C\x07" +
    "G\x02\x02\u0B8C\u0B8D\x07C\x02\x02\u0B8D\u0B8E\x07U\x02\x02\u0B8E\u0B8F" +
    "\x07W\x02\x02\u0B8F\u0B90\x07T\x02\x02\u0B90\u0B91\x07G\x02\x02\u0B91" +
    "\u0B92\x07U\x02\x02\u0B92\u01B0\x03\x02\x02\x02\u0B93\u0B94\x07O\x02\x02" +
    "\u0B94\u0B95\x07G\x02\x02\u0B95\u0B96\x07O\x02\x02\u0B96\u0B97\x07D\x02" +
    "\x02\u0B97\u0B98\x07G\x02\x02\u0B98\u0B99\x07T\x02\x02\u0B99\u01B2\x03" +
    "\x02\x02\x02\u0B9A\u0B9B\x07O\x02\x02\u0B9B\u0B9C\x07G\x02\x02\u0B9C\u0B9D" +
    "\x07T\x02\x02\u0B9D\u0B9E\x07I\x02\x02\u0B9E\u0B9F\x07G\x02\x02\u0B9F" +
    "\u01B4\x03\x02\x02\x02\u0BA0\u0BA1\x07O\x02\x02\u0BA1\u0BA2\x07G\x02\x02" +
    "\u0BA2\u0BA3\x07V\x02\x02\u0BA3\u0BA4\x07C\x02\x02\u0BA4\u0BA5\x07F\x02" +
    "\x02\u0BA5\u0BA6\x07C\x02\x02\u0BA6\u0BA7\x07V\x02\x02\u0BA7\u0BA8\x07" +
    "C\x02\x02\u0BA8\u01B6\x03\x02\x02\x02\u0BA9\u0BAA\x07O\x02\x02\u0BAA\u0BAB" +
    "\x07G\x02\x02\u0BAB\u0BAC\x07V\x02\x02\u0BAC\u0BAD\x07J\x02\x02\u0BAD" +
    "\u0BAE\x07Q\x02\x02\u0BAE\u0BAF\x07F\x02\x02\u0BAF\u01B8\x03\x02\x02\x02" +
    "\u0BB0\u0BB1\x07O\x02\x02\u0BB1\u0BB2\x07K\x02\x02\u0BB2\u0BB3\x07P\x02" +
    "\x02\u0BB3\u01BA\x03\x02\x02\x02\u0BB4\u0BB5\x07O\x02\x02\u0BB5\u0BB6" +
    "\x07K\x02\x02\u0BB6\u0BB7\x07P\x02\x02\u0BB7\u0BB8\x07W\x02\x02\u0BB8" +
    "\u0BB9\x07U\x02\x02\u0BB9\u01BC\x03\x02\x02\x02\u0BBA\u0BBB\x07O\x02\x02" +
    "\u0BBB\u0BBC\x07K\x02\x02\u0BBC\u0BBD\x07P\x02\x02\u0BBD\u0BBE\x07W\x02" +
    "\x02\u0BBE\u0BBF\x07V\x02\x02\u0BBF\u0BC0\x07G\x02\x02\u0BC0\u01BE\x03" +
    "\x02\x02\x02\u0BC1\u0BC2\x07O\x02\x02\u0BC2\u0BC3\x07Q\x02\x02\u0BC3\u0BC4" +
    "\x07F\x02\x02\u0BC4\u01C0\x03\x02\x02\x02\u0BC5\u0BC6\x07O\x02\x02\u0BC6" +
    "\u0BC7\x07Q\x02\x02\u0BC7\u0BC8\x07F\x02\x02\u0BC8\u0BC9\x07K\x02\x02" +
    "\u0BC9\u0BCA\x07H\x02\x02\u0BCA\u0BCB\x07K\x02\x02\u0BCB\u0BCC\x07G\x02" +
    "\x02\u0BCC\u0BCD\x07U\x02\x02\u0BCD\u01C2\x03\x02\x02\x02\u0BCE\u0BCF" +
    "\x07O\x02\x02\u0BCF\u0BD0\x07Q\x02\x02\u0BD0\u0BD1\x07F\x02\x02\u0BD1" +
    "\u0BD2\x07K\x02\x02\u0BD2\u0BD3\x07H\x02\x02\u0BD3\u0BD4\x07[\x02\x02" +
    "\u0BD4\u01C4\x03\x02\x02\x02\u0BD5\u0BD6\x07O\x02\x02\u0BD6\u0BD7\x07" +
    "Q\x02\x02\u0BD7\u0BD8\x07F\x02\x02\u0BD8\u0BD9\x07W\x02\x02\u0BD9\u0BDA" +
    "\x07N\x02\x02\u0BDA\u0BDB\x07G\x02\x02\u0BDB\u01C6\x03\x02\x02\x02\u0BDC" +
    "\u0BDD\x07O\x02\x02\u0BDD\u0BDE\x07Q\x02\x02\u0BDE\u0BDF\x07F\x02\x02" +
    "\u0BDF\u0BE0\x07W\x02\x02\u0BE0\u0BE1\x07N\x02\x02\u0BE1\u0BE2\x07G\x02" +
    "\x02\u0BE2\u0BE3\x07U\x02\x02\u0BE3\u01C8\x03\x02\x02\x02\u0BE4\u0BE5" +
    "\x07O\x02\x02\u0BE5\u0BE6\x07Q\x02\x02\u0BE6\u0BE7\x07P\x02\x02\u0BE7" +
    "\u0BE8\x07F\x02\x02\u0BE8\u0BE9\x07C\x02\x02\u0BE9\u0BEA\x07[\x02\x02" +
    "\u0BEA\u01CA\x03\x02\x02\x02\u0BEB\u0BEC\x07O\x02\x02\u0BEC\u0BED\x07" +
    "Q\x02\x02\u0BED\u0BEE\x07P\x02\x02\u0BEE\u0BEF\x07V\x02\x02\u0BEF\u0BF0" +
    "\x07J\x02\x02\u0BF0\u01CC\x03\x02\x02\x02\u0BF1\u0BF2\x07O\x02\x02\u0BF2" +
    "\u0BF3\x07Q\x02\x02\u0BF3\u0BF4\x07T\x02\x02\u0BF4\u0BF5\x07G\x02\x02" +
    "\u0BF5\u01CE\x03\x02\x02\x02\u0BF6\u0BF7\x07O\x02\x02\u0BF7\u0BF8\x07" +
    "W\x02\x02\u0BF8\u0BF9\x07N\x02\x02\u0BF9\u0BFA\x07V\x02\x02\u0BFA\u0BFB" +
    "\x07K\x02\x02\u0BFB\u0BFC\x07U\x02\x02\u0BFC\u0BFD\x07G\x02\x02\u0BFD" +
    "\u0BFE\x07V\x02\x02\u0BFE\u01D0\x03\x02\x02\x02\u0BFF\u0C00\x07P\x02\x02" +
    "\u0C00\u0C01\x07C\x02\x02\u0C01\u0C02\x07V\x02\x02\u0C02\u0C03\x07K\x02" +
    "\x02\u0C03\u0C04\x07Q\x02\x02\u0C04\u0C05\x07P\x02\x02\u0C05\u0C06\x07" +
    "C\x02\x02\u0C06\u0C07\x07N\x02\x02\u0C07\u01D2\x03\x02\x02\x02\u0C08\u0C09" +
    "\x07P\x02\x02\u0C09\u0C0A\x07C\x02\x02\u0C0A\u0C0B\x07V\x02\x02\u0C0B" +
    "\u0C0C\x07W\x02\x02\u0C0C\u0C0D\x07T\x02\x02\u0C0D\u0C0E\x07C\x02\x02" +
    "\u0C0E\u0C0F\x07N\x02\x02\u0C0F\u01D4\x03\x02\x02\x02\u0C10\u0C11\x07" +
    "P\x02\x02\u0C11\u0C12\x07E\x02\x02\u0C12\u0C13\x07J\x02\x02\u0C13\u0C14" +
    "\x07C\x02\x02\u0C14\u0C15\x07T\x02\x02\u0C15\u01D6\x03\x02\x02\x02\u0C16" +
    "\u0C17\x07P\x02\x02\u0C17\u0C18\x07E\x02\x02\u0C18\u0C19\x07N\x02\x02" +
    "\u0C19\u0C1A\x07Q\x02\x02\u0C1A\u0C1B\x07D\x02\x02\u0C1B\u01D8\x03\x02" +
    "\x02\x02\u0C1C\u0C1D\x07P\x02\x02\u0C1D\u0C1E\x07G\x02\x02\u0C1E\u0C1F" +
    "\x07Y\x02\x02\u0C1F\u01DA\x03\x02\x02\x02\u0C20\u0C21\x07P\x02\x02\u0C21" +
    "\u0C22\x07G\x02\x02\u0C22\u0C23\x07Z\x02\x02\u0C23\u0C24\x07V\x02\x02" +
    "\u0C24\u01DC\x03\x02\x02\x02\u0C25\u0C26\x07P\x02\x02\u0C26\u0C27\x07" +
    "Q\x02\x02\u0C27\u01DE\x03\x02\x02\x02\u0C28\u0C29\x07P\x02\x02\u0C29\u0C2A" +
    "\x07Q\x02\x02\u0C2A\u0C2B\x07P\x02\x02\u0C2B\u0C2C\x07G\x02\x02\u0C2C" +
    "\u01E0\x03\x02\x02\x02\u0C2D\u0C2E\x07P\x02\x02\u0C2E\u0C2F\x07Q\x02\x02" +
    "\u0C2F\u0C30\x07T\x02\x02\u0C30\u0C31\x07O\x02\x02\u0C31\u0C32\x07C\x02" +
    "\x02\u0C32\u0C33\x07N\x02\x02\u0C33\u0C34\x07K\x02\x02\u0C34\u0C35\x07" +
    "\\\x02\x02\u0C35\u0C36\x07G\x02\x02\u0C36\u01E2\x03\x02\x02\x02\u0C37" +
    "\u0C38\x07P\x02\x02\u0C38\u0C39\x07Q\x02\x02\u0C39\u0C3A\x07V\x02\x02" +
    "\u0C3A\u01E4\x03\x02\x02\x02\u0C3B\u0C3C\x07P\x02\x02\u0C3C\u0C3D\x07" +
    "V\x02\x02\u0C3D\u0C3E\x07J\x02\x02\u0C3E\u0C3F\x07a\x02\x02\u0C3F\u0C40" +
    "\x07X\x02\x02\u0C40\u0C41\x07C\x02\x02\u0C41\u0C42\x07N\x02\x02\u0C42" +
    "\u0C43\x07W\x02\x02\u0C43\u0C44\x07G\x02\x02\u0C44\u01E6\x03\x02\x02\x02" +
    "\u0C45\u0C46\x07P\x02\x02\u0C46\u0C47\x07V\x02\x02\u0C47\u0C48\x07K\x02" +
    "\x02\u0C48\u0C49\x07N\x02\x02\u0C49\u0C4A\x07G\x02\x02\u0C4A\u01E8\x03" +
    "\x02\x02\x02\u0C4B\u0C4C\x07P\x02\x02\u0C4C\u0C4D\x07W\x02\x02\u0C4D\u0C4E" +
    "\x07N\x02\x02\u0C4E\u0C4F\x07N\x02\x02\u0C4F\u01EA\x03\x02\x02\x02\u0C50" +
    "\u0C51\x07P\x02\x02\u0C51\u0C52\x07W\x02\x02\u0C52\u0C53\x07N\x02\x02" +
    "\u0C53\u0C54\x07N\x02\x02\u0C54\u0C55\x07K\x02\x02\u0C55\u0C56\x07H\x02" +
    "\x02\u0C56\u01EC\x03\x02\x02\x02\u0C57\u0C58\x07P\x02\x02\u0C58\u0C59" +
    "\x07W\x02\x02\u0C59\u0C5A\x07O\x02\x02\u0C5A\u0C5B\x07G\x02\x02\u0C5B" +
    "\u0C5C\x07T\x02\x02\u0C5C\u0C5D\x07K\x02\x02\u0C5D\u0C5E\x07E\x02\x02" +
    "\u0C5E\u01EE\x03\x02\x02\x02\u0C5F\u0C60\x07Q\x02\x02\u0C60\u0C61\x07" +
    "E\x02\x02\u0C61\u0C62\x07E\x02\x02\u0C62\u0C63\x07W\x02\x02\u0C63\u0C64" +
    "\x07T\x02\x02\u0C64\u0C65\x07T\x02\x02\u0C65\u0C66\x07G\x02\x02\u0C66" +
    "\u0C67\x07P\x02\x02\u0C67\u0C68\x07E\x02\x02\u0C68\u0C69\x07G\x02\x02" +
    "\u0C69\u0C6A\x07U\x02\x02\u0C6A\u0C6B\x07a\x02\x02\u0C6B\u0C6C\x07T\x02" +
    "\x02\u0C6C\u0C6D\x07G\x02\x02\u0C6D\u0C6E\x07I\x02\x02\u0C6E\u0C6F\x07" +
    "G\x02\x02\u0C6F\u0C70\x07Z\x02\x02\u0C70\u01F0\x03\x02\x02\x02\u0C71\u0C72" +
    "\x07Q\x02\x02\u0C72\u0C73\x07E\x02\x02\u0C73\u0C74\x07V\x02\x02\u0C74" +
    "\u0C75\x07G\x02\x02\u0C75\u0C76\x07V\x02\x02\u0C76\u0C77\x07a\x02\x02" +
    "\u0C77\u0C78\x07N\x02\x02\u0C78\u0C79\x07G\x02\x02\u0C79\u0C7A\x07P\x02" +
    "\x02\u0C7A\u0C7B\x07I\x02\x02\u0C7B\u0C7C\x07V\x02\x02\u0C7C\u0C7D\x07" +
    "J\x02\x02\u0C7D\u01F2\x03\x02\x02\x02\u0C7E\u0C7F\x07Q\x02\x02\u0C7F\u0C80" +
    "\x07H\x02\x02\u0C80\u01F4\x03\x02\x02\x02\u0C81\u0C82\x07Q\x02\x02\u0C82" +
    "\u0C83\x07H\x02\x02\u0C83\u0C84\x07H\x02\x02\u0C84\u0C85\x07U\x02\x02" +
    "\u0C85\u0C86\x07G\x02\x02\u0C86\u0C87\x07V\x02\x02\u0C87\u01F6\x03\x02" +
    "\x02\x02\u0C88\u0C89\x07Q\x02\x02\u0C89\u0C8A\x07N\x02\x02\u0C8A\u0C8B" +
    "\x07F\x02\x02\u0C8B\u01F8\x03\x02\x02\x02\u0C8C\u0C8D\x07Q\x02\x02\u0C8D" +
    "\u0C8E\x07O\x02\x02\u0C8E\u0C8F\x07K\x02\x02\u0C8F\u0C90\x07V\x02\x02" +
    "\u0C90\u01FA\x03\x02\x02\x02\u0C91\u0C92\x07Q\x02\x02\u0C92\u0C93\x07" +
    "P\x02\x02\u0C93\u01FC\x03\x02\x02\x02\u0C94\u0C95\x07Q\x02\x02\u0C95\u0C96" +
    "\x07P\x02\x02\u0C96\u0C97\x07G\x02\x02\u0C97\u01FE\x03\x02\x02\x02\u0C98" +
    "\u0C99\x07Q\x02\x02\u0C99\u0C9A\x07P\x02\x02\u0C9A\u0C9B\x07N\x02\x02" +
    "\u0C9B\u0C9C\x07[\x02\x02\u0C9C\u0200\x03\x02\x02\x02\u0C9D\u0C9E\x07" +
    "Q\x02\x02\u0C9E\u0C9F\x07R\x02\x02\u0C9F\u0CA0\x07G\x02\x02\u0CA0\u0CA1" +
    "\x07P\x02\x02\u0CA1\u0202\x03\x02\x02\x02\u0CA2\u0CA3\x07Q\x02\x02\u0CA3" +
    "\u0CA4\x07T\x02\x02\u0CA4\u0204\x03\x02\x02\x02\u0CA5\u0CA6\x07Q\x02\x02" +
    "\u0CA6\u0CA7\x07T\x02\x02\u0CA7\u0CA8\x07F\x02\x02\u0CA8\u0CA9\x07G\x02" +
    "\x02\u0CA9\u0CAA\x07T\x02\x02\u0CAA\u0206\x03\x02\x02\x02\u0CAB\u0CAC" +
    "\x07Q\x02\x02\u0CAC\u0CAD\x07T\x02\x02\u0CAD\u0CAE\x07F\x02\x02\u0CAE" +
    "\u0CAF\x07K\x02\x02\u0CAF\u0CB0\x07P\x02\x02\u0CB0\u0CB1\x07C\x02\x02" +
    "\u0CB1\u0CB2\x07N\x02\x02\u0CB2\u0208\x03\x02\x02\x02\u0CB3\u0CB4\x07" +
    "Q\x02\x02\u0CB4\u0CB5\x07W\x02\x02\u0CB5\u0CB6\x07V\x02\x02\u0CB6\u020A" +
    "\x03\x02\x02\x02\u0CB7\u0CB8\x07Q\x02\x02\u0CB8\u0CB9\x07W\x02\x02\u0CB9" +
    "\u0CBA\x07V\x02\x02\u0CBA\u0CBB\x07G\x02\x02\u0CBB\u0CBC\x07T\x02\x02" +
    "\u0CBC\u020C\x03\x02\x02\x02\u0CBD\u0CBE\x07Q\x02\x02\u0CBE\u0CBF\x07" +
    "X\x02\x02\u0CBF\u0CC0\x07G\x02\x02\u0CC0\u0CC1\x07T\x02\x02\u0CC1\u020E" +
    "\x03\x02\x02\x02\u0CC2\u0CC3\x07Q\x02\x02\u0CC3\u0CC4\x07X\x02\x02\u0CC4" +
    "\u0CC5\x07G\x02\x02\u0CC5\u0CC6\x07T\x02\x02\u0CC6\u0CC7\x07N\x02\x02" +
    "\u0CC7\u0CC8\x07C\x02\x02\u0CC8\u0CC9\x07R\x02\x02\u0CC9\u0CCA\x07U\x02" +
    "\x02\u0CCA\u0210\x03\x02\x02\x02\u0CCB\u0CCC\x07Q\x02\x02\u0CCC\u0CCD" +
    "\x07X\x02\x02\u0CCD\u0CCE\x07G\x02\x02\u0CCE\u0CCF\x07T\x02\x02\u0CCF" +
    "\u0CD0\x07N\x02\x02\u0CD0\u0CD1\x07C\x02\x02\u0CD1\u0CD2\x07[\x02\x02" +
    "\u0CD2\u0212\x03\x02\x02\x02\u0CD3\u0CD4\x07Q\x02\x02\u0CD4\u0CD5\x07" +
    "X\x02\x02\u0CD5\u0CD6\x07G\x02\x02\u0CD6\u0CD7\x07T\x02\x02\u0CD7\u0CD8" +
    "\x07Y\x02\x02\u0CD8\u0CD9\x07T\x02\x02\u0CD9\u0CDA\x07K\x02\x02\u0CDA" +
    "\u0CDB\x07V\x02\x02\u0CDB\u0CDC\x07G\x02\x02\u0CDC\u0214\x03\x02\x02\x02" +
    "\u0CDD\u0CDE\x07Q\x02\x02\u0CDE\u0CDF\x07X\x02\x02\u0CDF\u0CE0\x07G\x02" +
    "\x02\u0CE0\u0CE1\x07T\x02\x02\u0CE1\u0CE2\x07Y\x02\x02\u0CE2\u0CE3\x07" +
    "T\x02\x02\u0CE3\u0CE4\x07K\x02\x02\u0CE4\u0CE5\x07V\x02\x02\u0CE5\u0CE6" +
    "\x07K\x02\x02\u0CE6\u0CE7\x07P\x02\x02\u0CE7\u0CE8\x07I\x02\x02\u0CE8" +
    "\u0216\x03\x02\x02\x02\u0CE9\u0CEA\x07R\x02\x02\u0CEA\u0CEB\x07C\x02\x02" +
    "\u0CEB\u0CEC\x07T\x02\x02\u0CEC\u0CED\x07C\x02\x02\u0CED\u0CEE\x07O\x02" +
    "\x02\u0CEE\u0CEF\x07G\x02\x02\u0CEF\u0CF0\x07V\x02\x02\u0CF0\u0CF1\x07" +
    "G\x02\x02\u0CF1\u0CF2\x07T\x02\x02\u0CF2\u0218\x03\x02\x02\x02\u0CF3\u0CF4" +
    "\x07R\x02\x02\u0CF4\u0CF5\x07C\x02\x02\u0CF5\u0CF6\x07T\x02\x02\u0CF6" +
    "\u0CF7\x07V\x02\x02\u0CF7\u0CF8\x07K\x02\x02\u0CF8\u0CF9\x07V\x02\x02" +
    "\u0CF9\u0CFA\x07K\x02\x02\u0CFA\u0CFB\x07Q\x02\x02\u0CFB\u0CFC\x07P\x02" +
    "\x02\u0CFC\u021A\x03\x02\x02\x02\u0CFD\u0CFE\x07R\x02\x02\u0CFE\u0CFF" +
    "\x07C\x02\x02\u0CFF\u0D00\x07T\x02\x02\u0D00\u0D01\x07V\x02\x02\u0D01" +
    "\u0D02\x07K\x02\x02\u0D02\u0D03\x07V\x02\x02\u0D03\u0D04\x07K\x02\x02" +
    "\u0D04\u0D05\x07Q\x02\x02\u0D05\u0D06\x07P\x02\x02\u0D06\u0D07\x07G\x02" +
    "\x02\u0D07\u0D08\x07F\x02\x02\u0D08\u021C\x03\x02\x02\x02\u0D09\u0D0A" +
    "\x07R\x02\x02\u0D0A\u0D0B\x07C\x02\x02\u0D0B\u0D0C\x07T\x02\x02\u0D0C" +
    "\u0D0D\x07V\x02\x02\u0D0D\u0D0E\x07K\x02\x02\u0D0E\u0D0F\x07V\x02\x02" +
    "\u0D0F\u0D10\x07K\x02\x02\u0D10\u0D11\x07Q\x02\x02\u0D11\u0D12\x07P\x02" +
    "\x02\u0D12\u0D13\x07U\x02\x02\u0D13\u021E\x03\x02\x02\x02\u0D14\u0D15" +
    "\x07R\x02\x02\u0D15\u0D16\x07C\x02\x02\u0D16\u0D17\x07V\x02\x02\u0D17" +
    "\u0D18\x07V\x02\x02\u0D18\u0D19\x07G\x02\x02\u0D19\u0D1A\x07T\x02\x02" +
    "\u0D1A\u0D1B\x07P\x02\x02\u0D1B\u0220\x03\x02\x02\x02\u0D1C\u0D1D\x07" +
    "R\x02\x02\u0D1D\u0D1E\x07G\x02\x02\u0D1E\u0D1F\x07T\x02\x02\u0D1F\u0222" +
    "\x03\x02\x02\x02\u0D20\u0D21\x07R\x02\x02\u0D21\u0D22\x07G\x02\x02\u0D22" +
    "\u0D23\x07T\x02\x02\u0D23\u0D24\x07E\x02\x02\u0D24\u0D25\x07G\x02\x02" +
    "\u0D25\u0D26\x07P\x02\x02\u0D26\u0D27\x07V\x02\x02\u0D27\u0224\x03\x02" +
    "\x02\x02\u0D28\u0D29\x07R\x02\x02\u0D29\u0D2A\x07G\x02\x02\u0D2A\u0D2B" +
    "\x07T\x02\x02\u0D2B\u0D2C\x07E\x02\x02\u0D2C\u0D2D\x07G\x02\x02\u0D2D" +
    "\u0D2E\x07P\x02\x02\u0D2E\u0D2F\x07V\x02\x02\u0D2F\u0D30\x07K\x02\x02" +
    "\u0D30\u0D31\x07N\x02\x02\u0D31\u0D32\x07G\x02\x02\u0D32\u0D33\x07a\x02" +
    "\x02\u0D33\u0D34\x07E\x02\x02\u0D34\u0D35\x07Q\x02\x02\u0D35\u0D36\x07" +
    "P\x02\x02\u0D36\u0D37\x07V\x02\x02\u0D37\u0226\x03\x02\x02\x02\u0D38\u0D39" +
    "\x07R\x02\x02\u0D39\u0D3A\x07G\x02\x02\u0D3A\u0D3B\x07T\x02\x02\u0D3B" +
    "\u0D3C\x07E\x02\x02\u0D3C\u0D3D\x07G\x02\x02\u0D3D\u0D3E\x07P\x02\x02" +
    "\u0D3E\u0D3F\x07V\x02\x02\u0D3F\u0D40\x07K\x02\x02\u0D40\u0D41\x07N\x02" +
    "\x02\u0D41\u0D42\x07G\x02\x02\u0D42\u0D43\x07a\x02\x02\u0D43\u0D44\x07" +
    "F\x02\x02\u0D44\u0D45\x07K\x02\x02\u0D45\u0D46\x07U\x02\x02\u0D46\u0D47" +
    "\x07E\x02\x02\u0D47\u0228\x03\x02\x02\x02\u0D48\u0D49\x07R\x02\x02\u0D49" +
    "\u0D4A\x07G\x02\x02\u0D4A\u0D4B\x07T\x02\x02\u0D4B\u0D4C\x07E\x02\x02" +
    "\u0D4C\u0D4D\x07G\x02\x02\u0D4D\u0D4E\x07P\x02\x02\u0D4E\u0D4F\x07V\x02" +
    "\x02\u0D4F\u0D50\x07a\x02\x02\u0D50\u0D51\x07T\x02\x02\u0D51\u0D52\x07" +
    "C\x02\x02\u0D52\u0D53\x07P\x02\x02\u0D53\u0D54\x07M\x02\x02\u0D54\u022A" +
    "\x03\x02\x02\x02\u0D55\u0D56\x07R\x02\x02\u0D56\u0D57\x07G\x02\x02\u0D57" +
    "\u0D58\x07T\x02\x02\u0D58\u0D59\x07K\x02\x02\u0D59\u0D5A\x07Q\x02\x02" +
    "\u0D5A\u0D5B\x07F\x02\x02\u0D5B\u022C\x03\x02\x02\x02\u0D5C\u0D5D\x07" +
    "R\x02\x02\u0D5D\u0D5E\x07G\x02\x02\u0D5E\u0D5F\x07T\x02\x02\u0D5F\u0D60" +
    "\x07O\x02\x02\u0D60\u0D61\x07W\x02\x02\u0D61\u0D62\x07V\x02\x02\u0D62" +
    "\u0D63\x07G\x02\x02\u0D63\u022E\x03\x02\x02\x02\u0D64\u0D65\x07R\x02\x02" +
    "\u0D65\u0D66\x07K\x02\x02\u0D66\u0D67\x07X\x02\x02\u0D67\u0D68\x07Q\x02" +
    "\x02\u0D68\u0D69\x07V\x02\x02\u0D69\u0230\x03\x02\x02\x02\u0D6A\u0D6B" +
    "\x07R\x02\x02\u0D6B\u0D6C\x07Q\x02\x02\u0D6C\u0D6D\x07T\x02\x02\u0D6D" +
    "\u0D6E\x07V\x02\x02\u0D6E\u0D6F\x07K\x02\x02\u0D6F\u0D70\x07Q\x02\x02" +
    "\u0D70\u0D71\x07P\x02\x02\u0D71\u0232\x03\x02\x02\x02\u0D72\u0D73\x07" +
    "R\x02\x02\u0D73\u0D74\x07Q\x02\x02\u0D74\u0D75\x07U\x02\x02\u0D75\u0D76" +
    "\x07K\x02\x02\u0D76\u0D77\x07V\x02\x02\u0D77\u0D78\x07K\x02\x02\u0D78" +
    "\u0D79\x07Q\x02\x02\u0D79\u0D7A\x07P\x02\x02\u0D7A\u0234\x03\x02\x02\x02" +
    "\u0D7B\u0D7C\x07R\x02\x02\u0D7C\u0D7D\x07Q\x02\x02\u0D7D\u0D7E\x07U\x02" +
    "\x02\u0D7E\u0D7F\x07K\x02\x02\u0D7F\u0D80\x07V\x02\x02\u0D80\u0D81\x07" +
    "K\x02\x02\u0D81\u0D82\x07Q\x02\x02\u0D82\u0D83\x07P\x02\x02\u0D83\u0D84" +
    "\x07a\x02\x02\u0D84\u0D85\x07T\x02\x02\u0D85\u0D86\x07G\x02\x02\u0D86" +
    "\u0D87\x07I\x02\x02\u0D87\u0D88\x07G\x02\x02\u0D88\u0D89\x07Z\x02\x02" +
    "\u0D89\u0236\x03\x02\x02\x02\u0D8A\u0D8B\x07R\x02\x02\u0D8B\u0D8C\x07" +
    "Q\x02\x02\u0D8C\u0D8D\x07Y\x02\x02\u0D8D\u0D8E\x07G\x02\x02\u0D8E\u0D8F" +
    "\x07T\x02\x02\u0D8F\u0238\x03\x02\x02\x02\u0D90\u0D91\x07R\x02\x02\u0D91" +
    "\u0D92\x07T\x02\x02\u0D92\u0D93\x07G\x02\x02\u0D93\u0D94\x07E\x02\x02" +
    "\u0D94\u0D95\x07G\x02\x02\u0D95\u0D96\x07F\x02\x02\u0D96\u0D97\x07G\x02" +
    "\x02\u0D97\u0D98\x07U\x02\x02\u0D98\u023A\x03\x02\x02\x02\u0D99\u0D9A" +
    "\x07R\x02\x02\u0D9A\u0D9B\x07T\x02\x02\u0D9B\u0D9C\x07G\x02\x02\u0D9C" +
    "\u0D9D\x07E\x02\x02\u0D9D\u0D9E\x07K\x02\x02\u0D9E\u0D9F\x07U\x02\x02" +
    "\u0D9F\u0DA0\x07K\x02\x02\u0DA0\u0DA1\x07Q\x02\x02\u0DA1\u0DA2\x07P\x02" +
    "\x02\u0DA2\u023C\x03\x02\x02\x02\u0DA3\u0DA4\x07R\x02\x02\u0DA4\u0DA5" +
    "\x07T\x02\x02\u0DA5\u0DA6\x07G\x02\x02\u0DA6\u0DA7\x07R\x02\x02\u0DA7" +
    "\u0DA8\x07C\x02\x02\u0DA8\u0DA9\x07T\x02\x02\u0DA9\u0DAA\x07G\x02\x02" +
    "\u0DAA\u023E\x03\x02\x02\x02\u0DAB\u0DAC\x07R\x02\x02\u0DAC\u0DAD\x07" +
    "T\x02\x02\u0DAD\u0DAE\x07G\x02\x02\u0DAE\u0DAF\x07X\x02\x02\u0DAF\u0240" +
    "\x03\x02\x02\x02\u0DB0\u0DB1\x07R\x02\x02\u0DB1\u0DB2\x07T\x02\x02\u0DB2" +
    "\u0DB3\x07K\x02\x02\u0DB3\u0DB4\x07O\x02\x02\u0DB4\u0DB5\x07C\x02\x02" +
    "\u0DB5\u0DB6\x07T\x02\x02\u0DB6\u0DB7\x07[\x02\x02\u0DB7\u0242\x03\x02" +
    "\x02\x02\u0DB8\u0DB9\x07R\x02\x02\u0DB9\u0DBA\x07T\x02\x02\u0DBA\u0DBB" +
    "\x07Q\x02\x02\u0DBB\u0DBC\x07E\x02\x02\u0DBC\u0DBD\x07G\x02\x02\u0DBD" +
    "\u0DBE\x07F\x02\x02\u0DBE\u0DBF\x07W\x02\x02\u0DBF\u0DC0\x07T\x02\x02" +
    "\u0DC0\u0DC1\x07G\x02\x02\u0DC1\u0244\x03\x02\x02\x02\u0DC2\u0DC3\x07" +
    "S\x02\x02\u0DC3\u0DC4\x07W\x02\x02\u0DC4\u0DC5\x07C\x02\x02\u0DC5\u0DC6" +
    "\x07N\x02\x02\u0DC6\u0DC7\x07K\x02\x02\u0DC7\u0DC8\x07H\x02\x02\u0DC8" +
    "\u0DC9\x07[\x02\x02\u0DC9\u0246\x03\x02\x02\x02\u0DCA\u0DCB\x07S\x02\x02" +
    "\u0DCB\u0DCC\x07W\x02\x02\u0DCC\u0DCD\x07C\x02\x02\u0DCD\u0DCE\x07T\x02" +
    "\x02\u0DCE\u0DCF\x07V\x02\x02\u0DCF\u0DD0\x07G\x02\x02\u0DD0\u0DD1\x07" +
    "T\x02\x02\u0DD1\u0DD2\x07U\x02\x02\u0DD2\u0248\x03\x02\x02\x02\u0DD3\u0DD4" +
    "\x07T\x02\x02\u0DD4\u0DD5\x07C\x02\x02\u0DD5\u0DD6\x07P\x02\x02\u0DD6" +
    "\u0DD7\x07I\x02\x02\u0DD7\u0DD8\x07G\x02\x02\u0DD8\u024A\x03\x02\x02\x02" +
    "\u0DD9\u0DDA\x07T\x02\x02\u0DDA\u0DDB\x07C\x02\x02\u0DDB\u0DDC\x07P\x02" +
    "\x02\u0DDC\u0DDD\x07M\x02\x02\u0DDD\u024C\x03\x02\x02\x02\u0DDE\u0DDF" +
    "\x07T\x02\x02\u0DDF\u0DE0\x07C\x02\x02\u0DE0\u0DE1\x07Y\x02\x02\u0DE1" +
    "\u024E\x03\x02\x02\x02\u0DE2\u0DE3\x07T\x02\x02\u0DE3\u0DE4\x07G\x02\x02" +
    "\u0DE4\u0DE5\x07C\x02\x02\u0DE5\u0DE6\x07F\x02\x02\u0DE6\u0DE7\x07U\x02" +
    "\x02\u0DE7\u0250\x03\x02\x02\x02\u0DE8\u0DE9\x07T\x02\x02\u0DE9\u0DEA" +
    "\x07G\x02\x02\u0DEA\u0DEB\x07C\x02\x02\u0DEB\u0DEC\x07N\x02\x02\u0DEC" +
    "\u0252\x03\x02\x02\x02\u0DED\u0DEE\x07T\x02\x02\u0DEE\u0DEF\x07G\x02\x02" +
    "\u0DEF\u0DF0\x07E\x02\x02\u0DF0\u0DF1\x07W\x02\x02\u0DF1\u0DF2\x07T\x02" +
    "\x02\u0DF2\u0DF3\x07U\x02\x02\u0DF3\u0DF4\x07K\x02\x02\u0DF4\u0DF5\x07" +
    "X\x02\x02\u0DF5\u0DF6\x07G\x02\x02\u0DF6\u0254\x03\x02\x02\x02\u0DF7\u0DF8" +
    "\x07T\x02\x02\u0DF8\u0DF9\x07G\x02\x02\u0DF9\u0DFA\x07H\x02\x02\u0DFA" +
    "\u0256\x03\x02\x02\x02\u0DFB\u0DFC\x07T\x02\x02\u0DFC\u0DFD\x07G\x02\x02" +
    "\u0DFD\u0DFE\x07H\x02\x02\u0DFE\u0DFF\x07G\x02\x02\u0DFF\u0E00\x07T\x02" +
    "\x02\u0E00\u0E01\x07G\x02\x02\u0E01\u0E02\x07P\x02\x02\u0E02\u0E03\x07" +
    "E\x02\x02\u0E03\u0E04\x07G\x02\x02\u0E04\u0E05\x07U\x02\x02\u0E05\u0258" +
    "\x03\x02\x02\x02\u0E06\u0E07\x07T\x02\x02\u0E07\u0E08\x07G\x02\x02\u0E08" +
    "\u0E09\x07H\x02\x02\u0E09\u0E0A\x07G\x02\x02\u0E0A\u0E0B\x07T\x02\x02" +
    "\u0E0B\u0E0C\x07G\x02\x02\u0E0C\u0E0D\x07P\x02\x02\u0E0D\u0E0E\x07E\x02" +
    "\x02\u0E0E\u0E0F\x07K\x02\x02\u0E0F\u0E10\x07P\x02\x02\u0E10\u0E11\x07" +
    "I\x02\x02\u0E11\u025A\x03\x02\x02\x02\u0E12\u0E13\x07T\x02\x02\u0E13\u0E14" +
    "\x07G\x02\x02\u0E14\u0E15\x07I\x02\x02\u0E15\u0E16\x07T\x02\x02\u0E16" +
    "\u0E17\x07a\x02\x02\u0E17\u0E18\x07C\x02\x02\u0E18\u0E19\x07X\x02\x02" +
    "\u0E19\u0E1A\x07I\x02\x02\u0E1A\u0E1B\x07Z\x02\x02\u0E1B\u025C\x03\x02" +
    "\x02\x02\u0E1C\u0E1D\x07T\x02\x02\u0E1D\u0E1E\x07G\x02\x02\u0E1E\u0E1F" +
    "\x07I\x02\x02\u0E1F\u0E20\x07T\x02\x02\u0E20\u0E21\x07a\x02\x02\u0E21" +
    "\u0E22\x07C\x02\x02\u0E22\u0E23\x07X\x02\x02\u0E23\u0E24\x07I\x02\x02" +
    "\u0E24\u0E25\x07[\x02\x02\u0E25\u025E\x03\x02\x02\x02\u0E26\u0E27\x07" +
    "T\x02\x02\u0E27\u0E28\x07G\x02\x02\u0E28\u0E29\x07I\x02\x02\u0E29\u0E2A" +
    "\x07T\x02\x02\u0E2A\u0E2B\x07a\x02\x02\u0E2B\u0E2C\x07E\x02\x02\u0E2C" +
    "\u0E2D\x07Q\x02\x02\u0E2D\u0E2E\x07W\x02\x02\u0E2E\u0E2F\x07P\x02\x02" +
    "\u0E2F\u0E30\x07V\x02\x02\u0E30\u0260\x03\x02\x02\x02\u0E31\u0E32\x07" +
    "T\x02\x02\u0E32\u0E33\x07G\x02\x02\u0E33\u0E34\x07I\x02\x02\u0E34\u0E35" +
    "\x07T\x02\x02\u0E35\u0E36\x07a\x02\x02\u0E36\u0E37\x07K\x02\x02\u0E37" +
    "\u0E38\x07P\x02\x02\u0E38\u0E39\x07V\x02\x02\u0E39\u0E3A\x07G\x02\x02" +
    "\u0E3A\u0E3B\x07T\x02\x02\u0E3B\u0E3C\x07E\x02\x02\u0E3C\u0E3D\x07G\x02" +
    "\x02\u0E3D\u0E3E\x07R\x02\x02\u0E3E\u0E3F\x07V\x02\x02\u0E3F\u0262\x03" +
    "\x02\x02\x02\u0E40\u0E41\x07T\x02\x02\u0E41\u0E42\x07G\x02\x02\u0E42\u0E43" +
    "\x07I\x02\x02\u0E43\u0E44\x07T\x02\x02\u0E44\u0E45\x07a\x02\x02\u0E45" +
    "\u0E46\x07T\x02\x02\u0E46\u0E47\x074\x02\x02\u0E47\u0264\x03\x02\x02\x02" +
    "\u0E48\u0E49\x07T\x02\x02\u0E49\u0E4A\x07G\x02\x02\u0E4A\u0E4B\x07I\x02" +
    "\x02\u0E4B\u0E4C\x07T\x02\x02\u0E4C\u0E4D\x07a\x02\x02\u0E4D\u0E4E\x07" +
    "U\x02\x02\u0E4E\u0E4F\x07N\x02\x02\u0E4F\u0E50\x07Q\x02\x02\u0E50\u0E51" +
    "\x07R\x02\x02\u0E51\u0E52\x07G\x02\x02\u0E52\u0266\x03\x02\x02\x02\u0E53" +
    "\u0E54\x07T\x02\x02\u0E54\u0E55\x07G\x02\x02\u0E55\u0E56\x07I\x02\x02" +
    "\u0E56\u0E57\x07T\x02\x02\u0E57\u0E58\x07a\x02\x02\u0E58\u0E59\x07U\x02" +
    "\x02\u0E59\u0E5A\x07Z\x02\x02\u0E5A\u0E5B\x07Z\x02\x02\u0E5B\u0268\x03" +
    "\x02\x02\x02\u0E5C\u0E5D\x07T\x02\x02\u0E5D\u0E5E\x07G\x02\x02\u0E5E\u0E5F" +
    "\x07I\x02\x02\u0E5F\u0E60\x07T\x02\x02\u0E60\u0E61\x07a\x02\x02\u0E61" +
    "\u0E62\x07U\x02\x02\u0E62\u0E63\x07Z\x02\x02\u0E63\u0E64\x07[\x02\x02" +
    "\u0E64\u026A\x03\x02\x02\x02\u0E65\u0E66\x07T\x02\x02\u0E66\u0E67\x07" +
    "G\x02\x02\u0E67\u0E68\x07I\x02\x02\u0E68\u0E69\x07T\x02\x02\u0E69\u0E6A" +
    "\x07a\x02\x02\u0E6A\u0E6B\x07U\x02\x02\u0E6B\u0E6C\x07[\x02\x02\u0E6C" +
    "\u0E6D\x07[\x02\x02\u0E6D\u026C\x03\x02\x02\x02\u0E6E\u0E6F\x07T\x02\x02" +
    "\u0E6F\u0E70\x07G\x02\x02\u0E70\u0E71\x07N\x02\x02\u0E71\u0E72\x07G\x02" +
    "\x02\u0E72\u0E73\x07C\x02\x02\u0E73\u0E74\x07U\x02\x02\u0E74\u0E75\x07" +
    "G\x02\x02\u0E75\u026E\x03\x02\x02\x02\u0E76\u0E77\x07T\x02\x02\u0E77";
FlinkSqlLexer._serializedATNSegment7 = "\u0E78\x07G\x02\x02\u0E78\u0E79\x07P\x02\x02\u0E79\u0E7A\x07C\x02\x02" +
    "\u0E7A\u0E7B\x07O\x02\x02\u0E7B\u0E7C\x07G\x02\x02\u0E7C\u0270\x03\x02" +
    "\x02\x02\u0E7D\u0E7E\x07T\x02\x02\u0E7E\u0E7F\x07G\x02\x02\u0E7F\u0E80" +
    "\x07U\x02\x02\u0E80\u0E81\x07G\x02\x02\u0E81\u0E82\x07V\x02\x02\u0E82" +
    "\u0272\x03\x02\x02\x02\u0E83\u0E84\x07T\x02\x02\u0E84\u0E85\x07G\x02\x02" +
    "\u0E85\u0E86\x07U\x02\x02\u0E86\u0E87\x07W\x02\x02\u0E87\u0E88\x07N\x02" +
    "\x02\u0E88\u0E89\x07V\x02\x02\u0E89\u0274\x03\x02\x02\x02\u0E8A\u0E8B" +
    "\x07T\x02\x02\u0E8B\u0E8C\x07G\x02\x02\u0E8C\u0E8D\x07V\x02\x02\u0E8D" +
    "\u0E8E\x07W\x02\x02\u0E8E\u0E8F\x07T\x02\x02\u0E8F\u0E90\x07P\x02\x02" +
    "\u0E90\u0276\x03\x02\x02\x02\u0E91\u0E92\x07T\x02\x02\u0E92\u0E93\x07" +
    "G\x02\x02\u0E93\u0E94\x07V\x02\x02\u0E94\u0E95\x07W\x02\x02\u0E95\u0E96" +
    "\x07T\x02\x02\u0E96\u0E97\x07P\x02\x02\u0E97\u0E98\x07U\x02\x02\u0E98" +
    "\u0278\x03\x02\x02\x02\u0E99\u0E9A\x07T\x02\x02\u0E9A\u0E9B\x07G\x02\x02" +
    "\u0E9B\u0E9C\x07X\x02\x02\u0E9C\u0E9D\x07Q\x02\x02\u0E9D\u0E9E\x07M\x02" +
    "\x02\u0E9E\u0E9F\x07G\x02\x02\u0E9F\u027A\x03\x02\x02\x02\u0EA0\u0EA1" +
    "\x07T\x02\x02\u0EA1\u0EA2\x07K\x02\x02\u0EA2\u0EA3\x07I\x02\x02\u0EA3" +
    "\u0EA4\x07J\x02\x02\u0EA4\u0EA5\x07V\x02\x02\u0EA5\u027C\x03\x02\x02\x02" +
    "\u0EA6\u0EA7\x07T\x02\x02\u0EA7\u0EA8\x07N\x02\x02\u0EA8\u0EA9\x07K\x02" +
    "\x02\u0EA9\u0EAA\x07M\x02\x02\u0EAA\u0EAB\x07G\x02\x02\u0EAB\u027E\x03" +
    "\x02\x02\x02\u0EAC\u0EAD\x07T\x02\x02\u0EAD\u0EAE\x07Q\x02\x02\u0EAE\u0EAF" +
    "\x07N\x02\x02\u0EAF\u0EB0\x07N\x02\x02\u0EB0\u0EB1\x07D\x02\x02\u0EB1" +
    "\u0EB2\x07C\x02\x02\u0EB2\u0EB3\x07E\x02\x02\u0EB3\u0EB4\x07M\x02\x02" +
    "\u0EB4\u0280\x03\x02\x02\x02\u0EB5\u0EB6\x07T\x02\x02\u0EB6\u0EB7\x07" +
    "Q\x02\x02\u0EB7\u0EB8\x07N\x02\x02\u0EB8\u0EB9\x07N\x02\x02\u0EB9\u0EBA" +
    "\x07W\x02\x02\u0EBA\u0EBB\x07R\x02\x02\u0EBB\u0282\x03\x02\x02\x02\u0EBC" +
    "\u0EBD\x07T\x02\x02\u0EBD\u0EBE\x07Q\x02\x02\u0EBE\u0EBF\x07Y\x02\x02" +
    "\u0EBF\u0284\x03\x02\x02\x02\u0EC0\u0EC1\x07T\x02\x02\u0EC1\u0EC2\x07" +
    "Q\x02\x02\u0EC2\u0EC3\x07Y\x02\x02\u0EC3\u0EC4\x07U\x02\x02\u0EC4\u0286" +
    "\x03\x02\x02\x02\u0EC5\u0EC6\x07T\x02\x02\u0EC6\u0EC7\x07Q\x02\x02\u0EC7" +
    "\u0EC8\x07Y\x02\x02\u0EC8\u0EC9\x07a\x02\x02\u0EC9\u0ECA\x07P\x02\x02" +
    "\u0ECA\u0ECB\x07W\x02\x02\u0ECB\u0ECC\x07O\x02\x02\u0ECC\u0ECD\x07D\x02" +
    "\x02\u0ECD\u0ECE\x07G\x02\x02\u0ECE\u0ECF\x07T\x02\x02\u0ECF\u0288\x03" +
    "\x02\x02\x02\u0ED0\u0ED1\x07T\x02\x02\u0ED1\u0ED2\x07W\x02\x02\u0ED2\u0ED3" +
    "\x07P\x02\x02\u0ED3\u0ED4\x07P\x02\x02\u0ED4\u0ED5\x07K\x02\x02\u0ED5" +
    "\u0ED6\x07P\x02\x02\u0ED6\u0ED7\x07I\x02\x02\u0ED7\u028A\x03\x02\x02\x02" +
    "\u0ED8\u0ED9\x07U\x02\x02\u0ED9\u0EDA\x07C\x02\x02\u0EDA\u0EDB\x07H\x02" +
    "\x02\u0EDB\u0EDC\x07G\x02\x02\u0EDC\u0EDD\x07a\x02\x02\u0EDD\u0EDE\x07" +
    "E\x02\x02\u0EDE\u0EDF\x07C\x02\x02\u0EDF\u0EE0\x07U\x02\x02\u0EE0\u0EE1" +
    "\x07V\x02\x02\u0EE1\u028C\x03\x02\x02\x02\u0EE2\u0EE3\x07U\x02\x02\u0EE3" +
    "\u0EE4\x07C\x02\x02\u0EE4\u0EE5\x07H\x02\x02\u0EE5\u0EE6\x07G\x02\x02" +
    "\u0EE6\u0EE7\x07a\x02\x02\u0EE7\u0EE8\x07Q\x02\x02\u0EE8\u0EE9\x07H\x02" +
    "\x02\u0EE9\u0EEA\x07H\x02\x02\u0EEA\u0EEB\x07U\x02\x02\u0EEB\u0EEC\x07" +
    "G\x02\x02\u0EEC\u0EED\x07V\x02\x02\u0EED\u028E\x03\x02\x02\x02\u0EEE\u0EEF" +
    "\x07U\x02\x02\u0EEF\u0EF0\x07C\x02\x02\u0EF0\u0EF1\x07H\x02\x02\u0EF1" +
    "\u0EF2\x07G\x02\x02\u0EF2\u0EF3\x07a\x02\x02\u0EF3\u0EF4\x07Q\x02\x02" +
    "\u0EF4\u0EF5\x07T\x02\x02\u0EF5\u0EF6\x07F\x02\x02\u0EF6\u0EF7\x07K\x02" +
    "\x02\u0EF7\u0EF8\x07P\x02\x02\u0EF8\u0EF9\x07C\x02\x02\u0EF9\u0EFA\x07" +
    "N\x02\x02\u0EFA\u0290\x03\x02\x02\x02\u0EFB\u0EFC\x07U\x02\x02\u0EFC\u0EFD" +
    "\x07C\x02\x02\u0EFD\u0EFE\x07V\x02\x02\u0EFE\u0EFF\x07W\x02\x02\u0EFF" +
    "\u0F00\x07T\x02\x02\u0F00\u0F01\x07F\x02\x02\u0F01\u0F02\x07C\x02\x02" +
    "\u0F02\u0F03\x07[\x02\x02\u0F03\u0292\x03\x02\x02\x02\u0F04\u0F05\x07" +
    "U\x02\x02\u0F05\u0F06\x07C\x02\x02\u0F06\u0F07\x07X\x02\x02\u0F07\u0F08" +
    "\x07G\x02\x02\u0F08\u0F09\x07R\x02\x02\u0F09\u0F0A\x07Q\x02\x02\u0F0A" +
    "\u0F0B\x07K\x02\x02\u0F0B\u0F0C\x07P\x02\x02\u0F0C\u0F0D\x07V\x02\x02" +
    "\u0F0D\u0294\x03\x02\x02\x02\u0F0E\u0F0F\x07U\x02\x02\u0F0F\u0F10\x07" +
    "E\x02\x02\u0F10\u0F11\x07C\x02\x02\u0F11\u0F12\x07N\x02\x02\u0F12\u0F13" +
    "\x07C\x02\x02\u0F13\u0296\x03\x02\x02\x02\u0F14\u0F15\x07U\x02\x02\u0F15" +
    "\u0F16\x07E\x02\x02\u0F16\u0F17\x07Q\x02\x02\u0F17\u0F18\x07R\x02\x02" +
    "\u0F18\u0F19\x07G\x02\x02\u0F19\u0298\x03\x02\x02\x02\u0F1A\u0F1B\x07" +
    "U\x02\x02\u0F1B\u0F1C\x07E\x02\x02\u0F1C\u0F1D\x07T\x02\x02\u0F1D\u0F1E" +
    "\x07Q\x02\x02\u0F1E\u0F1F\x07N\x02\x02\u0F1F\u0F20\x07N\x02\x02\u0F20" +
    "\u029A\x03\x02\x02\x02\u0F21\u0F22\x07U\x02\x02\u0F22\u0F23\x07G\x02\x02" +
    "\u0F23\u0F24\x07C\x02\x02\u0F24\u0F25\x07T\x02\x02\u0F25\u0F26\x07E\x02" +
    "\x02\u0F26\u0F27\x07J\x02\x02\u0F27\u029C\x03\x02\x02\x02\u0F28\u0F29" +
    "\x07U\x02\x02\u0F29\u0F2A\x07G\x02\x02\u0F2A\u0F2B\x07E\x02\x02\u0F2B" +
    "\u0F2C\x07Q\x02\x02\u0F2C\u0F2D\x07P\x02\x02\u0F2D\u0F2E\x07F\x02\x02" +
    "\u0F2E\u029E\x03\x02\x02\x02\u0F2F\u0F30\x07U\x02\x02\u0F30\u0F31\x07" +
    "G\x02\x02\u0F31\u0F32\x07G\x02\x02\u0F32\u0F33\x07M\x02\x02\u0F33\u02A0" +
    "\x03\x02\x02\x02\u0F34\u0F35\x07U\x02\x02\u0F35\u0F36\x07G\x02\x02\u0F36" +
    "\u0F37\x07N\x02\x02\u0F37\u0F38\x07G\x02\x02\u0F38\u0F39\x07E\x02\x02" +
    "\u0F39\u0F3A\x07V\x02\x02\u0F3A\u02A2\x03\x02\x02\x02\u0F3B\u0F3C\x07" +
    "U\x02\x02\u0F3C\u0F3D\x07G\x02\x02\u0F3D\u0F3E\x07P\x02\x02\u0F3E\u0F3F" +
    "\x07U\x02\x02\u0F3F\u0F40\x07K\x02\x02\u0F40\u0F41\x07V\x02\x02\u0F41" +
    "\u0F42\x07K\x02\x02\u0F42\u0F43\x07X\x02\x02\u0F43\u0F44\x07G\x02\x02" +
    "\u0F44\u02A4\x03\x02\x02\x02\u0F45\u0F46\x07U\x02\x02\u0F46\u0F47\x07" +
    "G\x02\x02\u0F47\u0F48\x07R\x02\x02\u0F48\u0F49\x07C\x02\x02\u0F49\u0F4A" +
    "\x07T\x02\x02\u0F4A\u0F4B\x07C\x02\x02\u0F4B\u0F4C\x07V\x02\x02\u0F4C" +
    "\u0F4D\x07Q\x02\x02\u0F4D\u0F4E\x07T\x02\x02\u0F4E\u02A6\x03\x02\x02\x02" +
    "\u0F4F\u0F50\x07U\x02\x02\u0F50\u0F51\x07G\x02\x02\u0F51\u0F52\x07U\x02" +
    "\x02\u0F52\u0F53\x07U\x02\x02\u0F53\u0F54\x07K\x02\x02\u0F54\u0F55\x07" +
    "Q\x02\x02\u0F55\u0F56\x07P\x02\x02\u0F56\u0F57\x07a\x02\x02\u0F57\u0F58" +
    "\x07W\x02\x02\u0F58\u0F59\x07U\x02\x02\u0F59\u0F5A\x07G\x02\x02\u0F5A" +
    "\u0F5B\x07T\x02\x02\u0F5B\u02A8\x03\x02\x02\x02\u0F5C\u0F5D\x07U\x02\x02" +
    "\u0F5D\u0F5E\x07G\x02\x02\u0F5E\u0F5F\x07V\x02\x02\u0F5F\u02AA\x03\x02" +
    "\x02\x02\u0F60\u0F61\x07U\x02\x02\u0F61\u0F62\x07J\x02\x02\u0F62\u0F63" +
    "\x07Q\x02\x02\u0F63\u0F64\x07Y\x02\x02\u0F64\u02AC\x03\x02\x02\x02\u0F65" +
    "\u0F66\x07U\x02\x02\u0F66\u0F67\x07K\x02\x02\u0F67\u0F68\x07O\x02\x02" +
    "\u0F68\u0F69\x07K\x02\x02\u0F69\u0F6A\x07N\x02\x02\u0F6A\u0F6B\x07C\x02" +
    "\x02\u0F6B\u0F6C\x07T\x02\x02\u0F6C\u02AE\x03\x02\x02\x02\u0F6D\u0F6E" +
    "\x07U\x02\x02\u0F6E\u0F6F\x07M\x02\x02\u0F6F\u0F70\x07K\x02\x02\u0F70" +
    "\u0F71\x07R\x02\x02\u0F71\u02B0\x03\x02\x02\x02\u0F72\u0F73\x07U\x02\x02" +
    "\u0F73\u0F74\x07O\x02\x02\u0F74\u0F75\x07C\x02\x02\u0F75\u0F76\x07N\x02" +
    "\x02\u0F76\u0F77\x07N\x02\x02\u0F77\u0F78\x07K\x02\x02\u0F78\u0F79\x07" +
    "P\x02\x02\u0F79\u0F7A\x07V\x02\x02\u0F7A\u02B2\x03\x02\x02\x02\u0F7B\u0F7C" +
    "\x07U\x02\x02\u0F7C\u0F7D\x07Q\x02\x02\u0F7D\u0F7E\x07O\x02\x02\u0F7E" +
    "\u0F7F\x07G\x02\x02\u0F7F\u02B4\x03\x02\x02\x02\u0F80\u0F81\x07U\x02\x02" +
    "\u0F81\u0F82\x07R\x02\x02\u0F82\u0F83\x07G\x02\x02\u0F83\u0F84\x07E\x02" +
    "\x02\u0F84\u0F85\x07K\x02\x02\u0F85\u0F86\x07H\x02\x02\u0F86\u0F87\x07" +
    "K\x02\x02\u0F87\u0F88\x07E\x02\x02\u0F88\u02B6\x03\x02\x02\x02\u0F89\u0F8A" +
    "\x07U\x02\x02\u0F8A\u0F8B\x07R\x02\x02\u0F8B\u0F8C\x07G\x02\x02\u0F8C" +
    "\u0F8D\x07E\x02\x02\u0F8D\u0F8E\x07K\x02\x02\u0F8E\u0F8F\x07H\x02\x02" +
    "\u0F8F\u0F90\x07K\x02\x02\u0F90\u0F91\x07E\x02\x02\u0F91\u0F92\x07V\x02" +
    "\x02\u0F92\u0F93\x07[\x02\x02\u0F93\u0F94\x07R\x02\x02\u0F94\u0F95\x07" +
    "G\x02\x02\u0F95\u02B8\x03\x02\x02\x02\u0F96\u0F97\x07U\x02\x02\u0F97\u0F98" +
    "\x07S\x02\x02\u0F98\u0F99\x07N\x02\x02\u0F99\u02BA\x03\x02\x02\x02\u0F9A" +
    "\u0F9B\x07U\x02\x02\u0F9B\u0F9C\x07S\x02\x02\u0F9C\u0F9D\x07N\x02\x02" +
    "\u0F9D\u0F9E\x07G\x02\x02\u0F9E\u0F9F\x07Z\x02\x02\u0F9F\u0FA0\x07E\x02" +
    "\x02\u0FA0\u0FA1\x07G\x02\x02\u0FA1\u0FA2\x07R\x02\x02\u0FA2\u0FA3\x07" +
    "V\x02\x02\u0FA3\u0FA4\x07K\x02\x02\u0FA4\u0FA5\x07Q\x02\x02\u0FA5\u0FA6" +
    "\x07P\x02\x02\u0FA6\u02BC\x03\x02\x02\x02\u0FA7\u0FA8\x07U\x02\x02\u0FA8" +
    "\u0FA9\x07S\x02\x02\u0FA9\u0FAA\x07N\x02\x02\u0FAA\u0FAB\x07U\x02\x02" +
    "\u0FAB\u0FAC\x07V\x02\x02\u0FAC\u0FAD\x07C\x02\x02\u0FAD\u0FAE\x07V\x02" +
    "\x02\u0FAE\u0FAF\x07G\x02\x02\u0FAF\u02BE\x03\x02\x02\x02\u0FB0\u0FB1" +
    "\x07U\x02\x02\u0FB1\u0FB2\x07S\x02\x02\u0FB2\u0FB3\x07N\x02\x02\u0FB3" +
    "\u0FB4\x07Y\x02\x02\u0FB4\u0FB5\x07C\x02\x02\u0FB5\u0FB6\x07T\x02\x02" +
    "\u0FB6\u0FB7\x07P\x02\x02\u0FB7\u0FB8\x07K\x02\x02\u0FB8\u0FB9\x07P\x02" +
    "\x02\u0FB9\u0FBA\x07I\x02\x02\u0FBA\u02C0\x03\x02\x02\x02\u0FBB\u0FBC" +
    "\x07U\x02\x02\u0FBC\u0FBD\x07S\x02\x02\u0FBD\u0FBE\x07T\x02\x02\u0FBE" +
    "\u0FBF\x07V\x02\x02\u0FBF\u02C2\x03\x02\x02\x02\u0FC0\u0FC1\x07U\x02\x02" +
    "\u0FC1\u0FC2\x07V\x02\x02\u0FC2\u0FC3\x07C\x02\x02\u0FC3\u0FC4\x07T\x02" +
    "\x02\u0FC4\u0FC5\x07V\x02\x02\u0FC5\u02C4\x03\x02\x02\x02\u0FC6\u0FC7" +
    "\x07U\x02\x02\u0FC7\u0FC8\x07V\x02\x02\u0FC8\u0FC9\x07C\x02\x02\u0FC9" +
    "\u0FCA\x07V\x02\x02\u0FCA\u0FCB\x07G\x02\x02\u0FCB\u0FCC\x07O\x02\x02" +
    "\u0FCC\u0FCD\x07G\x02\x02\u0FCD\u0FCE\x07P\x02\x02\u0FCE\u0FCF\x07V\x02" +
    "\x02\u0FCF\u02C6\x03\x02\x02\x02\u0FD0\u0FD1\x07U\x02\x02\u0FD1\u0FD2" +
    "\x07V\x02\x02\u0FD2\u0FD3\x07C\x02\x02\u0FD3\u0FD4\x07V\x02\x02\u0FD4" +
    "\u0FD5\x07K\x02\x02\u0FD5\u0FD6\x07E\x02\x02\u0FD6\u02C8\x03\x02\x02\x02" +
    "\u0FD7\u0FD8\x07U\x02\x02\u0FD8\u0FD9\x07V\x02\x02\u0FD9\u0FDA\x07C\x02" +
    "\x02\u0FDA\u0FDB\x07V\x02\x02\u0FDB\u0FDC\x07K\x02\x02\u0FDC\u0FDD\x07" +
    "U\x02\x02\u0FDD\u0FDE\x07V\x02\x02\u0FDE\u0FDF\x07K\x02\x02\u0FDF\u0FE0" +
    "\x07E\x02\x02\u0FE0\u0FE1\x07U\x02\x02\u0FE1\u02CA\x03\x02\x02\x02\u0FE2" +
    "\u0FE3\x07U\x02\x02\u0FE3\u0FE4\x07V\x02\x02\u0FE4\u0FE5\x07F\x02\x02" +
    "\u0FE5\u0FE6\x07F\x02\x02\u0FE6\u0FE7\x07G\x02\x02\u0FE7\u0FE8\x07X\x02" +
    "\x02\u0FE8\u0FE9\x07a\x02\x02\u0FE9\u0FEA\x07R\x02\x02\u0FEA\u0FEB\x07" +
    "Q\x02\x02\u0FEB\u0FEC\x07R\x02\x02\u0FEC\u02CC\x03\x02\x02\x02\u0FED\u0FEE" +
    "\x07U\x02\x02\u0FEE\u0FEF\x07V\x02\x02\u0FEF\u0FF0\x07F\x02\x02\u0FF0" +
    "\u0FF1\x07F\x02\x02\u0FF1\u0FF2\x07G\x02\x02\u0FF2\u0FF3\x07X\x02\x02" +
    "\u0FF3\u0FF4\x07a\x02\x02\u0FF4\u0FF5\x07U\x02\x02\u0FF5\u0FF6\x07C\x02" +
    "\x02\u0FF6\u0FF7\x07O\x02\x02\u0FF7\u0FF8\x07R\x02\x02\u0FF8\u02CE\x03" +
    "\x02\x02\x02\u0FF9\u0FFA\x07U\x02\x02\u0FFA\u0FFB\x07V\x02\x02\u0FFB\u0FFC" +
    "\x07T\x02\x02\u0FFC\u0FFD\x07G\x02\x02\u0FFD\u0FFE\x07C\x02\x02\u0FFE" +
    "\u0FFF\x07O\x02\x02\u0FFF\u02D0\x03\x02\x02\x02\u1000\u1001\x07U\x02\x02" +
    "\u1001\u1002\x07V\x02\x02\u1002\u1003\x07T\x02\x02\u1003\u1004\x07K\x02" +
    "\x02\u1004\u1005\x07P\x02\x02\u1005\u1006\x07I\x02\x02\u1006\u02D2\x03" +
    "\x02\x02\x02\u1007\u1008\x07U\x02\x02\u1008\u1009\x07V\x02\x02\u1009\u100A" +
    "\x07T\x02\x02\u100A\u100B\x07K\x02\x02\u100B\u100C\x07P\x02\x02\u100C" +
    "\u100D\x07I\x02\x02\u100D\u100E\x07a\x02\x02\u100E\u100F\x07C\x02\x02" +
    "\u100F\u1010\x07I\x02\x02\u1010\u1011\x07I\x02\x02\u1011\u02D4\x03\x02" +
    "\x02\x02\u1012\u1013\x07U\x02\x02\u1013\u1014\x07W\x02\x02\u1014\u1015" +
    "\x07D\x02\x02\u1015\u1016\x07O\x02\x02\u1016\u1017\x07W\x02\x02\u1017" +
    "\u1018\x07N\x02\x02\u1018\u1019\x07V\x02\x02\u1019\u101A\x07K\x02\x02" +
    "\u101A\u101B\x07U\x02\x02\u101B\u101C\x07G\x02\x02\u101C\u101D\x07V\x02" +
    "\x02\u101D\u02D6\x03\x02\x02\x02\u101E\u101F\x07U\x02\x02\u101F\u1020" +
    "\x07W\x02\x02\u1020\u1021\x07D\x02\x02\u1021\u1022\x07U\x02\x02\u1022" +
    "\u1023\x07G\x02\x02\u1023\u1024\x07V\x02\x02\u1024\u02D8\x03\x02\x02\x02" +
    "\u1025\u1026\x07U\x02\x02\u1026\u1027\x07W\x02\x02\u1027\u1028\x07D\x02" +
    "\x02\u1028\u1029\x07U\x02\x02\u1029\u102A\x07V\x02\x02\u102A\u102B\x07" +
    "T\x02\x02\u102B\u102C\x07K\x02\x02\u102C\u102D\x07P\x02\x02\u102D\u102E" +
    "\x07I\x02\x02\u102E\u02DA\x03\x02\x02\x02\u102F\u1030\x07U\x02\x02\u1030" +
    "\u1031\x07W\x02\x02\u1031\u1032\x07D\x02\x02\u1032\u1033\x07U\x02\x02" +
    "\u1033\u1034\x07V\x02\x02\u1034\u1035\x07T\x02\x02\u1035\u1036\x07K\x02" +
    "\x02\u1036\u1037\x07P\x02\x02\u1037\u1038\x07I\x02\x02\u1038\u1039\x07" +
    "a\x02\x02\u1039\u103A\x07T\x02\x02\u103A\u103B\x07G\x02\x02\u103B\u103C" +
    "\x07I\x02\x02\u103C\u103D\x07G\x02\x02\u103D\u103E\x07Z\x02\x02\u103E" +
    "\u02DC\x03\x02\x02\x02\u103F\u1040\x07U\x02\x02\u1040\u1041\x07W\x02\x02" +
    "\u1041\u1042\x07E\x02\x02\u1042\u1043\x07E\x02\x02\u1043\u1044\x07G\x02" +
    "\x02\u1044\u1045\x07G\x02\x02\u1045\u1046\x07F\x02\x02\u1046\u1047\x07" +
    "U\x02\x02\u1047\u02DE\x03\x02\x02\x02\u1048\u1049\x07U\x02\x02\u1049\u104A" +
    "\x07W\x02\x02\u104A\u104B\x07O\x02\x02\u104B\u02E0\x03\x02\x02\x02\u104C" +
    "\u104D\x07U\x02\x02\u104D\u104E\x07W\x02\x02\u104E\u104F\x07P\x02\x02" +
    "\u104F\u1050\x07F\x02\x02\u1050\u1051\x07C\x02\x02\u1051\u1052\x07[\x02" +
    "\x02\u1052\u02E2\x03\x02\x02\x02\u1053\u1054\x07U\x02\x02\u1054\u1055" +
    "\x07[\x02\x02\u1055\u1056\x07O\x02\x02\u1056\u1057\x07O\x02\x02\u1057" +
    "\u1058\x07G\x02\x02\u1058\u1059\x07V\x02\x02\u1059\u105A\x07T\x02\x02" +
    "\u105A\u105B\x07K\x02\x02\u105B\u105C\x07E\x02\x02\u105C\u02E4\x03\x02" +
    "\x02\x02\u105D\u105E\x07U\x02\x02\u105E\u105F\x07[\x02\x02\u105F\u1060" +
    "\x07U\x02\x02\u1060\u1061\x07V\x02\x02\u1061\u1062\x07G\x02\x02\u1062" +
    "\u1063\x07O\x02\x02\u1063\u02E6\x03\x02\x02\x02\u1064\u1065\x07U\x02\x02" +
    "\u1065\u1066\x07[\x02\x02\u1066\u1067\x07U\x02\x02\u1067\u1068\x07V\x02" +
    "\x02\u1068\u1069\x07G\x02\x02\u1069\u106A\x07O\x02\x02\u106A\u106B\x07" +
    "a\x02\x02\u106B\u106C\x07V\x02\x02\u106C\u106D\x07K\x02\x02\u106D\u106E" +
    "\x07O\x02\x02\u106E\u106F\x07G\x02\x02\u106F\u02E8\x03\x02\x02\x02\u1070" +
    "\u1071\x07U\x02\x02\u1071\u1072\x07[\x02\x02\u1072\u1073\x07U\x02\x02" +
    "\u1073\u1074\x07V\x02\x02\u1074\u1075\x07G\x02\x02\u1075\u1076\x07O\x02" +
    "\x02\u1076\u1077\x07a\x02\x02\u1077\u1078\x07W\x02\x02\u1078\u1079\x07" +
    "U\x02\x02\u1079\u107A\x07G\x02\x02\u107A\u107B\x07T\x02\x02\u107B\u02EA" +
    "\x03\x02\x02\x02\u107C\u107D\x07V\x02\x02\u107D\u107E\x07C\x02\x02\u107E" +
    "\u107F\x07D\x02\x02\u107F\u1080\x07N\x02\x02\u1080\u1081\x07G\x02\x02" +
    "\u1081\u02EC\x03\x02\x02\x02\u1082\u1083\x07V\x02\x02\u1083\u1084\x07" +
    "C\x02\x02\u1084\u1085\x07D\x02\x02\u1085\u1086\x07N\x02\x02\u1086\u1087" +
    "\x07G\x02\x02\u1087\u1088\x07U\x02\x02\u1088\u02EE\x03\x02\x02\x02\u1089" +
    "\u108A\x07V\x02\x02\u108A\u108B\x07C\x02\x02\u108B\u108C\x07D\x02\x02" +
    "\u108C\u108D\x07N\x02\x02\u108D\u108E\x07G\x02\x02\u108E\u108F\x07U\x02" +
    "\x02\u108F\u1090\x07C\x02\x02\u1090\u1091\x07O\x02\x02\u1091\u1092\x07" +
    "R\x02\x02\u1092\u1093\x07N\x02\x02\u1093\u1094\x07G\x02\x02\u1094\u02F0" +
    "\x03\x02\x02\x02\u1095\u1096\x07V\x02\x02\u1096\u1097\x07J\x02\x02\u1097" +
    "\u1098\x07G\x02\x02\u1098\u1099\x07P\x02\x02\u1099\u02F2\x03\x02\x02\x02" +
    "\u109A\u109B\x07V\x02\x02\u109B\u109C\x07J\x02\x02\u109C\u109D\x07W\x02" +
    "\x02\u109D\u109E\x07T\x02\x02\u109E\u109F\x07U\x02\x02\u109F\u10A0\x07" +
    "F\x02\x02\u10A0\u10A1\x07C\x02\x02\u10A1\u10A2\x07[\x02\x02\u10A2\u02F4" +
    "\x03\x02\x02\x02\u10A3\u10A4\x07V\x02\x02\u10A4\u10A5\x07K\x02\x02\u10A5" +
    "\u10A6\x07O\x02\x02\u10A6\u10A7\x07G\x02\x02\u10A7\u02F6\x03\x02\x02\x02" +
    "\u10A8\u10A9\x07V\x02\x02\u10A9\u10AA\x07K\x02\x02\u10AA\u10AB\x07O\x02" +
    "\x02\u10AB\u10AC\x07G\x02\x02\u10AC\u10AD\x07U\x02\x02\u10AD\u10AE\x07" +
    "V\x02\x02\u10AE\u10AF\x07C\x02\x02\u10AF\u10B0\x07O\x02\x02\u10B0\u10B1" +
    "\x07R\x02\x02\u10B1\u02F8\x03\x02\x02\x02\u10B2\u10B3\x07V\x02\x02\u10B3" +
    "\u10B4\x07K\x02\x02\u10B4\u10B5\x07O\x02\x02\u10B5\u10B6\x07G\x02\x02" +
    "\u10B6\u10B7\x07U\x02\x02\u10B7\u10B8\x07V\x02\x02\u10B8\u10B9\x07C\x02" +
    "\x02\u10B9\u10BA\x07O\x02\x02\u10BA\u10BB\x07R\x02\x02\u10BB\u10BC\x07" +
    "a\x02\x02\u10BC\u10BD\x07F\x02\x02\u10BD\u10BE\x07K\x02\x02\u10BE\u10BF" +
    "\x07H\x02\x02\u10BF\u10C0\x07H\x02\x02\u10C0\u02FA\x03\x02\x02\x02\u10C1" +
    "\u10C2\x07V\x02\x02\u10C2\u10C3\x07K\x02\x02\u10C3\u10C4\x07O\x02\x02" +
    "\u10C4\u10C5\x07G\x02\x02\u10C5\u10C6\x07U\x02\x02\u10C6\u10C7\x07V\x02" +
    "\x02\u10C7\u10C8\x07C\x02\x02\u10C8\u10C9\x07O\x02\x02\u10C9\u10CA\x07" +
    "R\x02\x02\u10CA\u10CB\x07a\x02\x02\u10CB\u10CC\x07N\x02\x02\u10CC\u10CD" +
    "\x07V\x02\x02\u10CD\u10CE\x07\\\x02\x02\u10CE\u02FC\x03\x02\x02\x02\u10CF" +
    "\u10D0\x07V\x02\x02\u10D0\u10D1\x07K\x02\x02\u10D1\u10D2\x07O\x02\x02" +
    "\u10D2\u10D3\x07G\x02\x02\u10D3\u10D4\x07U\x02\x02\u10D4\u10D5\x07V\x02" +
    "\x02\u10D5\u10D6\x07C\x02\x02\u10D6\u10D7\x07O\x02\x02\u10D7\u10D8\x07" +
    "R\x02\x02\u10D8\u10D9\x07a\x02\x02\u10D9\u10DA\x07V\x02\x02\u10DA\u10DB" +
    "\x07T\x02\x02\u10DB\u10DC\x07W\x02\x02\u10DC\u10DD\x07P\x02\x02\u10DD" +
    "\u10DE\x07E\x02\x02\u10DE\u02FE\x03\x02\x02\x02\u10DF\u10E0\x07V\x02\x02" +
    "\u10E0\u10E1\x07K\x02\x02\u10E1\u10E2\x07O\x02\x02\u10E2\u10E3\x07G\x02" +
    "\x02\u10E3\u10E4\x07\\\x02\x02\u10E4\u10E5\x07Q\x02\x02\u10E5\u10E6\x07" +
    "P\x02\x02\u10E6\u10E7\x07G\x02\x02\u10E7\u10E8\x07a\x02\x02\u10E8\u10E9" +
    "\x07J\x02\x02\u10E9\u10EA\x07Q\x02\x02\u10EA\u10EB\x07W\x02\x02\u10EB" +
    "\u10EC\x07T\x02\x02\u10EC\u0300\x03\x02\x02\x02\u10ED\u10EE\x07V\x02\x02" +
    "\u10EE\u10EF\x07K\x02\x02\u10EF\u10F0\x07O\x02\x02\u10F0\u10F1\x07G\x02" +
    "\x02\u10F1\u10F2\x07\\\x02\x02\u10F2\u10F3\x07Q\x02\x02\u10F3\u10F4\x07" +
    "P\x02\x02\u10F4\u10F5\x07G\x02\x02\u10F5\u10F6\x07a\x02\x02\u10F6\u10F7" +
    "\x07O\x02\x02\u10F7\u10F8\x07K\x02\x02\u10F8\u10F9\x07P\x02\x02\u10F9" +
    "\u10FA\x07W\x02\x02\u10FA\u10FB\x07V\x02\x02\u10FB\u10FC\x07G\x02\x02" +
    "\u10FC\u0302\x03\x02\x02\x02\u10FD\u10FE\x07V\x02\x02\u10FE\u10FF\x07" +
    "K\x02\x02\u10FF\u1100\x07O\x02\x02\u1100\u1101\x07G\x02\x02\u1101\u1102" +
    "\x07a\x02\x02\u1102\u1103\x07F\x02\x02\u1103\u1104\x07K\x02\x02\u1104" +
    "\u1105\x07H\x02\x02\u1105\u1106\x07H\x02\x02\u1106\u0304\x03\x02\x02\x02" +
    "\u1107\u1108\x07V\x02\x02\u1108\u1109\x07K\x02\x02\u1109\u110A\x07O\x02" +
    "\x02\u110A\u110B\x07G\x02\x02\u110B\u110C\x07a\x02\x02\u110C\u110D\x07" +
    "V\x02\x02\u110D\u110E\x07T\x02\x02\u110E\u110F\x07W\x02\x02\u110F\u1110" +
    "\x07P\x02\x02\u1110\u1111\x07E\x02\x02\u1111\u0306\x03\x02\x02\x02\u1112" +
    "\u1113\x07V\x02\x02\u1113\u1114\x07K\x02\x02\u1114\u1115\x07P\x02\x02" +
    "\u1115\u1116\x07[\x02\x02\u1116\u1117\x07K\x02\x02\u1117\u1118\x07P\x02" +
    "\x02\u1118\u1119\x07V\x02\x02\u1119\u0308\x03\x02\x02\x02\u111A\u111B" +
    "\x07V\x02\x02\u111B\u111C\x07Q\x02\x02\u111C\u030A\x03\x02\x02\x02\u111D" +
    "\u111E\x07V\x02\x02\u111E\u111F\x07T\x02\x02\u111F\u1120\x07C\x02\x02" +
    "\u1120\u1121\x07K\x02\x02\u1121\u1122\x07N\x02\x02\u1122\u1123\x07K\x02" +
    "\x02\u1123\u1124\x07P\x02\x02\u1124\u1125\x07I\x02\x02\u1125\u030C\x03" +
    "\x02\x02\x02\u1126\u1127\x07V\x02\x02\u1127\u1128\x07T\x02\x02\u1128\u1129" +
    "\x07C\x02\x02\u1129\u112A\x07P\x02\x02\u112A\u112B\x07U\x02\x02\u112B" +
    "\u112C\x07N\x02\x02\u112C\u112D\x07C\x02\x02\u112D\u112E\x07V\x02\x02" +
    "\u112E\u112F\x07G\x02\x02\u112F\u030E\x03\x02\x02\x02\u1130\u1131\x07" +
    "V\x02\x02\u1131\u1132\x07T\x02\x02\u1132\u1133\x07C\x02\x02\u1133\u1134" +
    "\x07P\x02\x02\u1134\u1135\x07U\x02\x02\u1135\u1136\x07N\x02\x02\u1136" +
    "\u1137\x07C\x02\x02\u1137\u1138\x07V\x02\x02\u1138\u1139\x07G\x02\x02" +
    "\u1139\u113A\x07a\x02\x02\u113A\u113B\x07T\x02\x02\u113B\u113C\x07G\x02" +
    "\x02\u113C\u113D\x07I\x02\x02\u113D\u113E\x07G\x02\x02\u113E\u113F\x07" +
    "Z\x02\x02\u113F\u0310\x03\x02\x02\x02\u1140\u1141\x07V\x02\x02\u1141\u1142" +
    "\x07T\x02\x02\u1142\u1143\x07C\x02\x02\u1143\u1144\x07P\x02\x02\u1144" +
    "\u1145\x07U\x02\x02\u1145\u1146\x07N\x02\x02\u1146\u1147\x07C\x02\x02" +
    "\u1147\u1148\x07V\x02\x02\u1148\u1149\x07K\x02\x02\u1149\u114A\x07Q\x02" +
    "\x02\u114A\u114B\x07P\x02\x02\u114B\u0312\x03\x02\x02\x02\u114C\u114D" +
    "\x07V\x02\x02\u114D\u114E\x07T\x02\x02\u114E\u114F\x07G\x02\x02\u114F" +
    "\u1150\x07C\x02\x02\u1150\u1151\x07V\x02\x02\u1151\u0314\x03\x02\x02\x02" +
    "\u1152\u1153\x07V\x02\x02\u1153\u1154\x07T\x02\x02\u1154\u1155\x07K\x02" +
    "\x02\u1155\u1156\x07I\x02\x02\u1156\u1157\x07I\x02\x02\u1157\u1158\x07" +
    "G\x02\x02\u1158\u1159\x07T\x02\x02\u1159\u0316\x03\x02\x02\x02\u115A\u115B" +
    "\x07V\x02\x02\u115B\u115C\x07T\x02\x02\u115C\u115D\x07K\x02\x02\u115D" +
    "\u115E\x07O\x02\x02\u115E\u0318\x03\x02\x02\x02\u115F\u1160\x07V\x02\x02" +
    "\u1160\u1161\x07T\x02\x02\u1161\u1162\x07K\x02\x02\u1162\u1163\x07O\x02" +
    "\x02\u1163\u1164\x07a\x02\x02\u1164\u1165\x07C\x02\x02\u1165\u1166\x07" +
    "T\x02\x02\u1166\u1167\x07T\x02\x02\u1167\u1168\x07C\x02\x02\u1168\u1169" +
    "\x07[\x02\x02\u1169\u031A\x03\x02\x02\x02\u116A\u116B\x07V\x02\x02\u116B" +
    "\u116C\x07T\x02\x02\u116C\u116D\x07W\x02\x02\u116D\u116E\x07G\x02\x02" +
    "\u116E\u031C\x03\x02\x02\x02\u116F\u1170\x07V\x02\x02\u1170\u1171\x07" +
    "T\x02\x02\u1171\u1172\x07W\x02\x02\u1172\u1173\x07P\x02\x02\u1173\u1174" +
    "\x07E\x02\x02\u1174\u1175\x07C\x02\x02\u1175\u1176\x07V\x02\x02\u1176" +
    "\u1177\x07G\x02\x02\u1177\u031E\x03\x02\x02\x02\u1178\u1179\x07V\x02\x02" +
    "\u1179\u117A\x07T\x02\x02\u117A\u117B\x07[\x02\x02\u117B\u117C\x07a\x02" +
    "\x02\u117C\u117D\x07E\x02\x02\u117D\u117E\x07C\x02\x02\u117E\u117F\x07" +
    "U\x02\x02\u117F\u1180\x07V\x02\x02\u1180\u0320\x03\x02\x02\x02\u1181\u1182" +
    "\x07V\x02\x02\u1182\u1183\x07W\x02\x02\u1183\u1184\x07G\x02\x02\u1184" +
    "\u1185\x07U\x02\x02\u1185\u1186\x07F\x02\x02\u1186\u1187\x07C\x02\x02" +
    "\u1187\u1188\x07[\x02\x02\u1188\u0322\x03\x02\x02\x02\u1189\u118A\x07" +
    "W\x02\x02\u118A\u118B\x07G\x02\x02\u118B\u118C\x07U\x02\x02\u118C\u118D" +
    "\x07E\x02\x02\u118D\u118E\x07C\x02\x02\u118E\u118F\x07R\x02\x02\u118F" +
    "\u1190\x07G\x02\x02\u1190\u0324\x03\x02\x02\x02\u1191\u1192\x07W\x02\x02" +
    "\u1192\u1193\x07P\x02\x02\u1193\u1194\x07K\x02\x02\u1194\u1195\x07Q\x02" +
    "\x02\u1195\u1196\x07P\x02\x02\u1196\u0326\x03\x02\x02\x02\u1197\u1198" +
    "\x07W\x02\x02\u1198\u1199\x07P\x02\x02\u1199\u119A\x07K\x02\x02\u119A" +
    "\u119B\x07S\x02\x02\u119B\u119C\x07W\x02\x02\u119C\u119D\x07G\x02\x02" +
    "\u119D\u0328\x03\x02\x02\x02\u119E\u119F\x07W\x02\x02\u119F\u11A0\x07" +
    "P\x02\x02\u11A0\u11A1\x07M\x02\x02\u11A1\u11A2\x07P\x02\x02\u11A2\u11A3" +
    "\x07Q\x02\x02\u11A3\u11A4\x07Y\x02\x02\u11A4\u11A5\x07P\x02\x02\u11A5" +
    "\u032A\x03\x02\x02\x02\u11A6\u11A7\x07W\x02\x02\u11A7\u11A8\x07P\x02\x02" +
    "\u11A8\u11A9\x07P\x02\x02\u11A9\u11AA\x07G\x02\x02\u11AA\u11AB\x07U\x02" +
    "\x02\u11AB\u11AC\x07V\x02\x02\u11AC\u032C\x03\x02\x02\x02\u11AD\u11AE" +
    "\x07W\x02\x02\u11AE\u11AF\x07P\x02\x02\u11AF\u11B0\x07R\x02\x02\u11B0" +
    "\u11B1\x07K\x02\x02\u11B1\u11B2\x07X\x02\x02\u11B2\u11B3\x07Q\x02\x02" +
    "\u11B3\u11B4\x07V\x02\x02\u11B4\u032E\x03\x02\x02\x02\u11B5\u11B6\x07" +
    "W\x02\x02\u11B6\u11B7\x07R\x02\x02\u11B7\u11B8\x07F\x02\x02\u11B8\u11B9" +
    "\x07";
FlinkSqlLexer._serializedATNSegment8 = "C\x02\x02\u11B9\u11BA\x07V\x02\x02\u11BA\u11BB\x07G\x02\x02\u11BB\u0330" +
    "\x03\x02\x02\x02\u11BC\u11BD\x07W\x02\x02\u11BD\u11BE\x07R\x02\x02\u11BE" +
    "\u11BF\x07R\x02\x02\u11BF\u11C0\x07G\x02\x02\u11C0\u11C1\x07T\x02\x02" +
    "\u11C1\u0332\x03\x02\x02\x02\u11C2\u11C3\x07W\x02\x02\u11C3\u11C4\x07" +
    "R\x02\x02\u11C4\u11C5\x07U\x02\x02\u11C5\u11C6\x07G\x02\x02\u11C6\u11C7" +
    "\x07T\x02\x02\u11C7\u11C8\x07V\x02\x02\u11C8\u0334\x03\x02\x02\x02\u11C9" +
    "\u11CA\x07W\x02\x02\u11CA\u11CB\x07U\x02\x02\u11CB\u11CC\x07G\x02\x02" +
    "\u11CC\u0336\x03\x02\x02\x02\u11CD\u11CE\x07W\x02\x02\u11CE\u11CF\x07" +
    "U\x02\x02\u11CF\u11D0\x07G\x02\x02\u11D0\u11D1\x07T\x02\x02\u11D1\u0338" +
    "\x03\x02\x02\x02\u11D2\u11D3\x07W\x02\x02\u11D3\u11D4\x07U\x02\x02\u11D4" +
    "\u11D5\x07K\x02\x02\u11D5\u11D6\x07P\x02\x02\u11D6\u11D7\x07I\x02\x02" +
    "\u11D7\u033A\x03\x02\x02\x02\u11D8\u11D9\x07X\x02\x02\u11D9\u11DA\x07" +
    "C\x02\x02\u11DA\u11DB\x07N\x02\x02\u11DB\u11DC\x07W\x02\x02\u11DC\u11DD" +
    "\x07G\x02\x02\u11DD\u033C\x03\x02\x02\x02\u11DE\u11DF\x07X\x02\x02\u11DF" +
    "\u11E0\x07C\x02\x02\u11E0\u11E1\x07N\x02\x02\u11E1\u11E2\x07W\x02\x02" +
    "\u11E2\u11E3\x07G\x02\x02\u11E3\u11E4\x07U\x02\x02\u11E4\u033E\x03\x02" +
    "\x02\x02\u11E5\u11E6\x07X\x02\x02\u11E6\u11E7\x07C\x02\x02\u11E7\u11E8" +
    "\x07N\x02\x02\u11E8\u11E9\x07W\x02\x02\u11E9\u11EA\x07G\x02\x02\u11EA" +
    "\u11EB\x07a\x02\x02\u11EB\u11EC\x07Q\x02\x02\u11EC\u11ED\x07H\x02\x02" +
    "\u11ED\u0340\x03\x02\x02\x02\u11EE\u11EF\x07X\x02\x02\u11EF\u11F0\x07" +
    "C\x02\x02\u11F0\u11F1\x07T\x02\x02\u11F1\u11F2\x07D\x02\x02\u11F2\u11F3" +
    "\x07K\x02\x02\u11F3\u11F4\x07P\x02\x02\u11F4\u11F5\x07C\x02\x02\u11F5" +
    "\u11F6\x07T\x02\x02\u11F6\u11F7\x07[\x02\x02\u11F7\u0342\x03\x02\x02\x02" +
    "\u11F8\u11F9\x07X\x02\x02\u11F9\u11FA\x07C\x02\x02\u11FA\u11FB\x07T\x02" +
    "\x02\u11FB\u11FC\x07E\x02\x02\u11FC\u11FD\x07J\x02\x02\u11FD\u11FE\x07" +
    "C\x02\x02\u11FE\u11FF\x07T\x02\x02\u11FF\u0344\x03\x02\x02\x02\u1200\u1201" +
    "\x07X\x02\x02\u1201\u1202\x07C\x02\x02\u1202\u1203\x07T\x02\x02\u1203" +
    "\u1204\x07[\x02\x02\u1204\u1205\x07K\x02\x02\u1205\u1206\x07P\x02\x02" +
    "\u1206\u1207\x07I\x02\x02\u1207\u0346\x03\x02\x02\x02\u1208\u1209\x07" +
    "X\x02\x02\u1209\u120A\x07C\x02\x02\u120A\u120B\x07T\x02\x02\u120B\u120C" +
    "\x07a\x02\x02\u120C\u120D\x07R\x02\x02\u120D\u120E\x07Q\x02\x02\u120E" +
    "\u120F\x07R\x02\x02\u120F\u0348\x03\x02\x02\x02\u1210\u1211\x07X\x02\x02" +
    "\u1211\u1212\x07C\x02\x02\u1212\u1213\x07T\x02\x02\u1213\u1214\x07a\x02" +
    "\x02\u1214\u1215\x07U\x02\x02\u1215\u1216\x07C\x02\x02\u1216\u1217\x07" +
    "O\x02\x02\u1217\u1218\x07R\x02\x02\u1218\u034A\x03\x02\x02\x02\u1219\u121A" +
    "\x07X\x02\x02\u121A\u121B\x07G\x02\x02\u121B\u121C\x07T\x02\x02\u121C" +
    "\u121D\x07U\x02\x02\u121D\u121E\x07K\x02\x02\u121E\u121F\x07Q\x02\x02" +
    "\u121F\u1220\x07P\x02\x02\u1220\u1221\x07K\x02\x02\u1221\u1222\x07P\x02" +
    "\x02\u1222\u1223\x07I\x02\x02\u1223\u034C\x03\x02\x02\x02\u1224\u1225" +
    "\x07X\x02\x02\u1225\u1226\x07K\x02\x02\u1226\u1227\x07G\x02\x02\u1227" +
    "\u1228\x07Y\x02\x02\u1228\u1229\x07U\x02\x02\u1229\u034E\x03\x02\x02\x02" +
    "\u122A\u122B\x07X\x02\x02\u122B\u122C\x07K\x02\x02\u122C\u122D\x07T\x02" +
    "\x02\u122D\u122E\x07V\x02\x02\u122E\u122F\x07W\x02\x02\u122F\u1230\x07" +
    "C\x02\x02\u1230\u1231\x07N\x02\x02\u1231\u0350\x03\x02\x02\x02\u1232\u1233" +
    "\x07Y\x02\x02\u1233\u1234\x07C\x02\x02\u1234\u1235\x07V\x02\x02\u1235" +
    "\u1236\x07G\x02\x02\u1236\u1237\x07T\x02\x02\u1237\u1238\x07O\x02\x02" +
    "\u1238\u1239\x07C\x02\x02\u1239\u123A\x07T\x02\x02\u123A\u123B\x07M\x02" +
    "\x02\u123B\u0352\x03\x02\x02\x02\u123C\u123D\x07Y\x02\x02\u123D\u123E" +
    "\x07C\x02\x02\u123E\u123F\x07V\x02\x02\u123F\u1240\x07G\x02\x02\u1240" +
    "\u1241\x07T\x02\x02\u1241\u1242\x07O\x02\x02\u1242\u1243\x07C\x02\x02" +
    "\u1243\u1244\x07T\x02\x02\u1244\u1245\x07M\x02\x02\u1245\u1246\x07U\x02" +
    "\x02\u1246\u0354\x03\x02\x02\x02\u1247\u1248\x07Y\x02\x02\u1248\u1249" +
    "\x07G\x02\x02\u1249\u124A\x07F\x02\x02\u124A\u124B\x07P\x02\x02\u124B" +
    "\u124C\x07G\x02\x02\u124C\u124D\x07U\x02\x02\u124D\u124E\x07F\x02\x02" +
    "\u124E\u124F\x07C\x02\x02\u124F\u1250\x07[\x02\x02\u1250\u0356\x03\x02" +
    "\x02\x02\u1251\u1252\x07Y\x02\x02\u1252\u1253\x07G\x02\x02\u1253\u1254" +
    "\x07G\x02\x02\u1254\u1255\x07M\x02\x02\u1255\u1256\x07U\x02\x02\u1256" +
    "\u0358\x03\x02\x02\x02\u1257\u1258\x07Y\x02\x02\u1258\u1259\x07J\x02\x02" +
    "\u1259\u125A\x07G\x02\x02\u125A\u125B\x07P\x02\x02\u125B\u035A\x03\x02" +
    "\x02\x02\u125C\u125D\x07Y\x02\x02\u125D\u125E\x07J\x02\x02\u125E\u125F" +
    "\x07G\x02\x02\u125F\u1260\x07P\x02\x02\u1260\u1261\x07G\x02\x02\u1261" +
    "\u1262\x07X\x02\x02\u1262\u1263\x07G\x02\x02\u1263\u1264\x07T\x02\x02" +
    "\u1264\u035C\x03\x02\x02\x02\u1265\u1266\x07Y\x02\x02\u1266\u1267\x07" +
    "J\x02\x02\u1267\u1268\x07G\x02\x02\u1268\u1269\x07T\x02\x02\u1269\u126A" +
    "\x07G\x02\x02\u126A\u035E\x03\x02\x02\x02\u126B\u126C\x07Y\x02\x02\u126C" +
    "\u126D\x07K\x02\x02\u126D\u126E\x07F\x02\x02\u126E\u126F\x07V\x02\x02" +
    "\u126F\u1270\x07J\x02\x02\u1270\u1271\x07a\x02\x02\u1271\u1272\x07D\x02" +
    "\x02\u1272\u1273\x07W\x02\x02\u1273\u1274\x07E\x02\x02\u1274\u1275\x07" +
    "M\x02\x02\u1275\u1276\x07G\x02\x02\u1276\u1277\x07V\x02\x02\u1277\u0360" +
    "\x03\x02\x02\x02\u1278\u1279\x07Y\x02\x02\u1279\u127A\x07K\x02\x02\u127A" +
    "\u127B\x07P\x02\x02\u127B\u127C\x07F\x02\x02\u127C\u127D\x07Q\x02\x02" +
    "\u127D\u127E\x07Y\x02\x02\u127E\u0362\x03\x02\x02\x02\u127F\u1280\x07" +
    "Y\x02\x02\u1280\u1281\x07K\x02\x02\u1281\u1282\x07V\x02\x02\u1282\u1283" +
    "\x07J\x02\x02\u1283\u0364\x03\x02\x02\x02\u1284\u1285\x07Y\x02\x02\u1285" +
    "\u1286\x07K\x02\x02\u1286\u1287\x07V\x02\x02\u1287\u1288\x07J\x02\x02" +
    "\u1288\u1289\x07K\x02\x02\u1289\u128A\x07P\x02\x02\u128A\u0366\x03\x02" +
    "\x02\x02\u128B\u128C\x07Y\x02\x02\u128C\u128D\x07K\x02\x02\u128D\u128E" +
    "\x07V\x02\x02\u128E\u128F\x07J\x02\x02\u128F\u1290\x07Q\x02\x02\u1290" +
    "\u1291\x07W\x02\x02\u1291\u1292\x07V\x02\x02\u1292\u0368\x03\x02\x02\x02" +
    "\u1293\u1294\x07[\x02\x02\u1294\u1295\x07G\x02\x02\u1295\u1296\x07C\x02" +
    "\x02\u1296\u1297\x07T\x02\x02\u1297\u036A\x03\x02\x02\x02\u1298\u1299" +
    "\x07C\x02\x02\u1299\u129A\x07F\x02\x02\u129A\u129B\x07F\x02\x02\u129B" +
    "\u036C\x03\x02\x02\x02\u129C\u129D\x07C\x02\x02\u129D\u129E\x07H\x02\x02" +
    "\u129E\u129F\x07V\x02\x02\u129F\u12A0\x07G\x02\x02\u12A0\u12A1\x07T\x02" +
    "\x02\u12A1\u036E\x03\x02\x02\x02\u12A2\u12A3\x07C\x02\x02\u12A3\u12A4" +
    "\x07U\x02\x02\u12A4\u12A5\x07E\x02\x02\u12A5\u0370\x03\x02\x02\x02\u12A6" +
    "\u12A7\x07E\x02\x02\u12A7\u12A8\x07C\x02\x02\u12A8\u12A9\x07U\x02\x02" +
    "\u12A9\u12AA\x07E\x02\x02\u12AA\u12AB\x07C\x02\x02\u12AB\u12AC\x07F\x02" +
    "\x02\u12AC\u12AD\x07G\x02\x02\u12AD\u0372\x03\x02\x02\x02\u12AE\u12AF" +
    "\x07E\x02\x02\u12AF\u12B0\x07C\x02\x02\u12B0\u12B1\x07V\x02\x02\u12B1" +
    "\u12B2\x07C\x02\x02\u12B2\u12B3\x07N\x02\x02\u12B3\u12B4\x07Q\x02\x02" +
    "\u12B4\u12B5\x07I\x02\x02\u12B5\u0374\x03\x02\x02\x02\u12B6\u12B7\x07" +
    "E\x02\x02\u12B7\u12B8\x07G\x02\x02\u12B8\u12B9\x07P\x02\x02\u12B9\u12BA" +
    "\x07V\x02\x02\u12BA\u12BB\x07W\x02\x02\u12BB\u12BC\x07T\x02\x02\u12BC" +
    "\u12BD\x07[\x02\x02\u12BD\u0376\x03\x02\x02\x02\u12BE\u12BF\x07E\x02\x02" +
    "\u12BF\u12C0\x07Q\x02\x02\u12C0\u12C1\x07P\x02\x02\u12C1\u12C2\x07H\x02" +
    "\x02\u12C2\u12C3\x07K\x02\x02\u12C3\u12C4\x07I\x02\x02\u12C4\u0378\x03" +
    "\x02\x02\x02\u12C5\u12C6\x07E\x02\x02\u12C6\u12C7\x07Q\x02\x02\u12C7\u12C8" +
    "\x07P\x02\x02\u12C8\u12C9\x07U\x02\x02\u12C9\u12CA\x07V\x02\x02\u12CA" +
    "\u12CB\x07T\x02\x02\u12CB\u12CC\x07C\x02\x02\u12CC\u12CD\x07K\x02\x02" +
    "\u12CD\u12CE\x07P\x02\x02\u12CE\u12CF\x07V\x02\x02\u12CF\u12D0\x07U\x02" +
    "\x02\u12D0\u037A\x03\x02\x02\x02\u12D1\u12D2\x07E\x02\x02\u12D2\u12D3" +
    "\x07W\x02\x02\u12D3\u12D4\x07O\x02\x02\u12D4\u12D5\x07W\x02\x02\u12D5" +
    "\u12D6\x07N\x02\x02\u12D6\u12D7\x07C\x02\x02\u12D7\u12D8\x07V\x02\x02" +
    "\u12D8\u12D9\x07G\x02\x02\u12D9\u037C\x03\x02\x02\x02\u12DA\u12DB\x07" +
    "F\x02\x02\u12DB\u12DC\x07C\x02\x02\u12DC\u12DD\x07V\x02\x02\u12DD\u12DE" +
    "\x07C\x02\x02\u12DE\u037E\x03\x02\x02\x02\u12DF\u12E0\x07F\x02\x02\u12E0" +
    "\u12E1\x07C\x02\x02\u12E1\u12E2\x07V\x02\x02\u12E2\u12E3\x07C\x02\x02" +
    "\u12E3\u12E4\x07D\x02\x02\u12E4\u12E5\x07C\x02\x02\u12E5\u12E6\x07U\x02" +
    "\x02\u12E6\u12E7\x07G\x02\x02\u12E7\u0380\x03\x02\x02\x02\u12E8\u12E9" +
    "\x07F\x02\x02\u12E9\u12EA\x07C\x02\x02\u12EA\u12EB\x07[\x02\x02\u12EB" +
    "\u12EC\x07U\x02\x02\u12EC\u0382\x03\x02\x02\x02\u12ED\u12EE\x07F\x02\x02" +
    "\u12EE\u12EF\x07G\x02\x02\u12EF\u12F0\x07E\x02\x02\u12F0\u12F1\x07C\x02" +
    "\x02\u12F1\u12F2\x07F\x02\x02\u12F2\u12F3\x07G\x02\x02\u12F3\u0384\x03" +
    "\x02\x02\x02\u12F4\u12F5\x07F\x02\x02\u12F5\u12F6\x07G\x02\x02\u12F6\u12F7" +
    "\x07U\x02\x02\u12F7\u12F8\x07E\x02\x02\u12F8\u0386\x03\x02\x02\x02\u12F9" +
    "\u12FA\x07F\x02\x02\u12FA\u12FB\x07G\x02\x02\u12FB\u12FC\x07U\x02\x02" +
    "\u12FC\u12FD\x07E\x02\x02\u12FD\u12FE\x07T\x02\x02\u12FE\u12FF\x07K\x02" +
    "\x02\u12FF\u1300\x07R\x02\x02\u1300\u1301\x07V\x02\x02\u1301\u1302\x07" +
    "Q\x02\x02\u1302\u1303\x07T\x02\x02\u1303\u0388\x03\x02\x02\x02\u1304\u1305" +
    "\x07F\x02\x02\u1305\u1306\x07K\x02\x02\u1306\u1307\x07X\x02\x02\u1307" +
    "\u038A\x03\x02\x02\x02\u1308\u1309\x07G\x02\x02\u1309\u130A\x07P\x02\x02" +
    "\u130A\u130B\x07I\x02\x02\u130B\u130C\x07K\x02\x02\u130C\u130D\x07P\x02" +
    "\x02\u130D\u130E\x07G\x02\x02\u130E\u038C\x03\x02\x02\x02\u130F\u1310" +
    "\x07G\x02\x02\u1310\u1311\x07R\x02\x02\u1311\u1312\x07Q\x02\x02\u1312" +
    "\u1313\x07E\x02\x02\u1313\u1314\x07J\x02\x02\u1314\u038E\x03\x02\x02\x02" +
    "\u1315\u1316\x07G\x02\x02\u1316\u1317\x07Z\x02\x02\u1317\u1318\x07E\x02" +
    "\x02\u1318\u1319\x07N\x02\x02\u1319\u131A\x07W\x02\x02\u131A\u131B\x07" +
    "F\x02\x02\u131B\u131C\x07K\x02\x02\u131C\u131D\x07P\x02\x02\u131D\u131E" +
    "\x07I\x02\x02\u131E\u0390\x03\x02\x02\x02\u131F\u1320\x07H\x02\x02\u1320" +
    "\u1321\x07K\x02\x02\u1321\u1322\x07N\x02\x02\u1322\u1323\x07G\x02\x02" +
    "\u1323\u0392\x03\x02\x02\x02\u1324\u1325\x07H\x02\x02\u1325\u1326\x07" +
    "K\x02\x02\u1326\u1327\x07T\x02\x02\u1327\u1328\x07U\x02\x02\u1328\u1329" +
    "\x07V\x02\x02\u1329\u0394\x03\x02\x02\x02\u132A\u132B\x07I\x02\x02\u132B" +
    "\u132C\x07G\x02\x02\u132C\u132D\x07P\x02\x02\u132D\u132E\x07G\x02\x02" +
    "\u132E\u132F\x07T\x02\x02\u132F\u1330\x07C\x02\x02\u1330\u1331\x07V\x02" +
    "\x02\u1331\u1332\x07G\x02\x02\u1332\u1333\x07F\x02\x02\u1333\u0396\x03" +
    "\x02\x02\x02\u1334\u1335\x07J\x02\x02\u1335\u1336\x07Q\x02\x02\u1336\u1337" +
    "\x07R\x02\x02\u1337\u0398\x03\x02\x02\x02\u1338\u1339\x07J\x02\x02\u1339" +
    "\u133A\x07Q\x02\x02\u133A\u133B\x07W\x02\x02\u133B\u133C\x07T\x02\x02" +
    "\u133C\u133D\x07U\x02\x02\u133D\u039A\x03\x02\x02\x02\u133E\u133F\x07" +
    "K\x02\x02\u133F\u1340\x07I\x02\x02\u1340\u1341\x07P\x02\x02\u1341\u1342" +
    "\x07Q\x02\x02\u1342\u1343\x07T\x02\x02\u1343\u1344\x07G\x02\x02\u1344" +
    "\u039C\x03\x02\x02\x02\u1345\u1346\x07K\x02\x02\u1346\u1347\x07P\x02\x02" +
    "\u1347\u1348\x07E\x02\x02\u1348\u1349\x07N\x02\x02\u1349\u134A\x07W\x02" +
    "\x02\u134A\u134B\x07F\x02\x02\u134B\u134C\x07K\x02\x02\u134C\u134D\x07" +
    "P\x02\x02\u134D\u134E\x07I\x02\x02\u134E\u039E\x03\x02\x02\x02\u134F\u1350" +
    "\x07L\x02\x02\u1350\u1351\x07C\x02\x02\u1351\u1352\x07T\x02\x02\u1352" +
    "\u03A0\x03\x02\x02\x02\u1353\u1354\x07L\x02\x02\u1354\u1355\x07C\x02\x02" +
    "\u1355\u1356\x07T\x02\x02\u1356\u1357\x07U\x02\x02\u1357\u03A2\x03\x02" +
    "\x02\x02\u1358\u1359\x07L\x02\x02\u1359\u135A\x07C\x02\x02\u135A\u135B" +
    "\x07X\x02\x02\u135B\u135C\x07C\x02\x02\u135C\u03A4\x03\x02\x02\x02\u135D" +
    "\u135E\x07M\x02\x02\u135E\u135F\x07G\x02\x02\u135F\u1360\x07[\x02\x02" +
    "\u1360\u03A6\x03\x02\x02\x02\u1361\u1362\x07N\x02\x02\u1362\u1363\x07" +
    "C\x02\x02\u1363\u1364\x07U\x02\x02\u1364\u1365\x07V\x02\x02\u1365\u03A8" +
    "\x03\x02\x02\x02\u1366\u1367\x07N\x02\x02\u1367\u1368\x07Q\x02\x02\u1368" +
    "\u1369\x07C\x02\x02\u1369\u136A\x07F\x02\x02\u136A\u03AA\x03\x02\x02\x02" +
    "\u136B\u136C\x07O\x02\x02\u136C\u136D\x07C\x02\x02\u136D\u136E\x07R\x02" +
    "\x02\u136E\u03AC\x03\x02\x02\x02\u136F\u1370\x07O\x02\x02\u1370\u1371" +
    "\x07K\x02\x02\u1371\u1372\x07E\x02\x02\u1372\u1373\x07T\x02\x02\u1373" +
    "\u1374\x07Q\x02\x02\u1374\u1375\x07U\x02\x02\u1375\u1376\x07G\x02\x02" +
    "\u1376\u1377\x07E\x02\x02\u1377\u1378\x07Q\x02\x02\u1378\u1379\x07P\x02" +
    "\x02\u1379\u137A\x07F\x02\x02\u137A\u03AE\x03\x02\x02\x02\u137B\u137C" +
    "\x07O\x02\x02\u137C\u137D\x07K\x02\x02\u137D\u137E\x07N\x02\x02\u137E" +
    "\u137F\x07N\x02\x02\u137F\u1380\x07G\x02\x02\u1380\u1381\x07P\x02\x02" +
    "\u1381\u1382\x07P\x02\x02\u1382\u1383\x07K\x02\x02\u1383\u1384\x07W\x02" +
    "\x02\u1384\u1385\x07O\x02\x02\u1385\u03B0\x03\x02\x02\x02\u1386\u1387" +
    "\x07O\x02\x02\u1387\u1388\x07K\x02\x02\u1388\u1389\x07N\x02\x02\u1389" +
    "\u138A\x07N\x02\x02\u138A\u138B\x07K\x02\x02\u138B\u138C\x07U\x02\x02" +
    "\u138C\u138D\x07G\x02\x02\u138D\u138E\x07E\x02\x02\u138E\u138F\x07Q\x02" +
    "\x02\u138F\u1390\x07P\x02\x02\u1390\u1391\x07F\x02\x02\u1391\u03B2\x03" +
    "\x02\x02\x02\u1392\u1393\x07O\x02\x02\u1393\u1394\x07K\x02\x02\u1394\u1395" +
    "\x07P\x02\x02\u1395\u1396\x07W\x02\x02\u1396\u1397\x07V\x02\x02\u1397" +
    "\u1398\x07G\x02\x02\u1398\u1399\x07U\x02\x02\u1399\u03B4\x03\x02\x02\x02" +
    "\u139A\u139B\x07O\x02\x02\u139B\u139C\x07Q\x02\x02\u139C\u139D\x07P\x02" +
    "\x02\u139D\u139E\x07V\x02\x02\u139E\u139F\x07J\x02\x02\u139F\u13A0\x07" +
    "U\x02\x02\u13A0\u03B6\x03\x02\x02\x02\u13A1\u13A2\x07P\x02\x02\u13A2\u13A3" +
    "\x07C\x02\x02\u13A3\u13A4\x07P\x02\x02\u13A4\u13A5\x07Q\x02\x02\u13A5" +
    "\u13A6\x07U\x02\x02\u13A6\u13A7\x07G\x02\x02\u13A7\u13A8\x07E\x02\x02" +
    "\u13A8\u13A9\x07Q\x02\x02\u13A9\u13AA\x07P\x02\x02\u13AA\u13AB\x07F\x02" +
    "\x02\u13AB\u03B8\x03\x02\x02\x02\u13AC\u13AD\x07P\x02\x02\u13AD\u13AE" +
    "\x07W\x02\x02\u13AE\u13AF\x07N\x02\x02\u13AF\u13B0\x07N\x02\x02\u13B0" +
    "\u13B1\x07U\x02\x02\u13B1\u03BA\x03\x02\x02\x02\u13B2\u13B3\x07Q\x02\x02" +
    "\u13B3\u13B4\x07R\x02\x02\u13B4\u13B5\x07V\x02\x02\u13B5\u13B6\x07K\x02" +
    "\x02\u13B6\u13B7\x07Q\x02\x02\u13B7\u13B8\x07P\x02\x02\u13B8\u13B9\x07" +
    "U\x02\x02\u13B9\u03BC\x03\x02\x02\x02\u13BA\u13BB\x07R\x02\x02\u13BB\u13BC" +
    "\x07C\x02\x02\u13BC\u13BD\x07U\x02\x02\u13BD\u13BE\x07V\x02\x02\u13BE" +
    "\u03BE\x03\x02\x02\x02\u13BF\u13C0\x07R\x02\x02\u13C0\u13C1\x07N\x02\x02" +
    "\u13C1\u13C2\x07C\x02\x02\u13C2\u13C3\x07P\x02\x02\u13C3\u03C0\x03\x02" +
    "\x02\x02\u13C4\u13C5\x07R\x02\x02\u13C5\u13C6\x07T\x02\x02\u13C6\u13C7" +
    "\x07G\x02\x02\u13C7\u13C8\x07E\x02\x02\u13C8\u13C9\x07G\x02\x02\u13C9" +
    "\u13CA\x07F\x02\x02\u13CA\u13CB\x07K\x02\x02\u13CB\u13CC\x07P\x02\x02" +
    "\u13CC\u13CD\x07I\x02\x02\u13CD\u03C2\x03\x02\x02\x02\u13CE\u13CF\x07" +
    "R\x02\x02\u13CF\u13D0\x07[\x02\x02\u13D0\u13D1\x07V\x02\x02\u13D1\u13D2" +
    "\x07J\x02\x02\u13D2\u13D3\x07Q\x02\x02\u13D3\u13D4\x07P\x02\x02\u13D4" +
    "\u03C4\x03\x02\x02\x02\u13D5\u13D6\x07R\x02\x02\u13D6\u13D7\x07[\x02\x02" +
    "\u13D7\u13D8\x07V\x02\x02\u13D8\u13D9\x07J\x02\x02\u13D9\u13DA\x07Q\x02" +
    "\x02\u13DA\u13DB\x07P\x02\x02\u13DB\u13DC\x07a\x02\x02\u13DC\u13DD\x07" +
    "C\x02\x02\u13DD\u13DE\x07T\x02\x02\u13DE\u13DF\x07E\x02\x02\u13DF\u13E0" +
    "\x07J\x02\x02\u13E0\u13E1\x07K\x02\x02\u13E1\u13E2\x07X\x02\x02\u13E2" +
    "\u13E3\x07G\x02\x02\u13E3\u13E4\x07U\x02\x02\u13E4\u03C6\x03\x02\x02\x02" +
    "\u13E5\u13E6\x07R\x02\x02\u13E6\u13E7\x07[\x02\x02\u13E7\u13E8\x07V\x02" +
    "\x02\u13E8\u13E9\x07J\x02\x02\u13E9\u13EA\x07Q\x02\x02\u13EA\u13EB\x07" +
    "P\x02\x02\u13EB\u13EC\x07a\x02\x02\u13EC\u13ED\x07F\x02\x02\u13ED\u13EE" +
    "\x07G\x02\x02\u13EE\u13EF\x07R\x02\x02\u13EF\u13F0\x07G\x02\x02\u13F0" +
    "\u13F1\x07P\x02\x02\u13F1\u13F2\x07F\x02\x02\u13F2\u13F3\x07G\x02\x02" +
    "\u13F3\u13F4\x07P\x02\x02\u13F4\u13F5\x07E\x02\x02\u13F5\u13F6\x07K\x02" +
    "\x02\u13F6\u13F7\x07G\x02\x02\u13F7\u13F8\x07U\x02\x02\u13F8\u03C8\x03" +
    "\x02\x02\x02\u13F9\u13FA\x07R\x02\x02\u13FA\u13FB\x07[\x02\x02\u13FB\u13FC" +
    "\x07V\x02\x02\u13FC\u13FD\x07J\x02\x02\u13FD\u13FE\x07Q\x02\x02\u13FE" +
    "\u13FF\x07P\x02\x02\u13FF\u1400\x07a\x02\x02\u1400\u1401\x07H\x02\x02" +
    "\u1401\u1402\x07K\x02\x02\u1402\u1403\x07N\x02\x02\u1403\u1404\x07G\x02" +
    "\x02\u1404\u1405\x07U\x02\x02\u1405\u03CA\x03\x02\x02\x02\u1406\u1407" +
    "\x07R\x02\x02\u1407\u1408\x07[\x02\x02\u1408\u1409\x07V\x02\x02\u1409" +
    "\u140A\x07J\x02\x02\u140A\u140B\x07Q\x02\x02\u140B\u140C\x07P\x02\x02" +
    "\u140C\u140D\x07a\x02\x02\u140D\u140E\x07L\x02\x02\u140E\u140F\x07C\x02" +
    "\x02\u140F\u1410\x07T\x02\x02\u1410\u03CC\x03\x02\x02\x02\u1411\u1412" +
    "\x07R\x02\x02\u1412\u1413\x07[\x02\x02\u1413\u1414\x07V\x02\x02\u1414" +
    "\u1415\x07J\x02\x02\u1415\u1416\x07Q\x02\x02\u1416\u1417\x07P\x02\x02" +
    "\u1417\u1418\x07a\x02\x02\u1418\u1419\x07R\x02\x02\u1419\u141A\x07C\x02" +
    "\x02\u141A\u141B\x07T\x02\x02\u141B\u141C\x07C\x02\x02\u141C\u141D\x07" +
    "O\x02\x02\u141D\u141E\x07G\x02\x02\u141E\u141F\x07V\x02\x02\u141F\u1420" +
    "\x07G\x02\x02\u1420\u1421\x07T\x02\x02\u1421\u03CE\x03\x02\x02\x02\u1422" +
    "\u1423\x07R\x02\x02\u1423\u1424\x07[\x02\x02\u1424\u1425\x07V\x02\x02" +
    "\u1425\u1426\x07J\x02\x02\u1426\u1427\x07Q\x02\x02\u1427\u1428\x07P\x02" +
    "\x02\u1428\u1429\x07a\x02\x02\u1429\u142A\x07T\x02\x02\u142A\u142B\x07" +
    "G\x02\x02\u142B\u142C\x07S\x02\x02\u142C\u142D\x07W\x02\x02\u142D\u142E" +
    "\x07K\x02\x02\u142E\u142F\x07T\x02\x02\u142F\u1430\x07G\x02\x02\u1430" +
    "\u1431\x07O\x02\x02\u1431\u1432\x07G\x02\x02\u1432\u1433\x07P\x02\x02" +
    "\u1433\u1434\x07V\x02\x02\u1434\u1435\x07U\x02\x02\u1435\u03D0\x03\x02" +
    "\x02\x02\u1436\u1437\x07S\x02\x02\u1437\u1438\x07W\x02\x02\u1438\u1439" +
    "\x07C\x02\x02\u1439\u143A\x07T\x02\x02\u143A\u143B\x07V\x02\x02\u143B" +
    "\u143C\x07G\x02\x02\u143C\u143D\x07T\x02\x02\u143D\u03D2\x03\x02\x02\x02" +
    "\u143E\u143F\x07T\x02\x02\u143F\u1440\x07G\x02\x02\u1440\u1441\x07O\x02" +
    "\x02\u1441\u1442\x07Q\x02\x02\u1442\u1443\x07X\x02\x02\u1443\u1444\x07" +
    "G\x02\x02\u1444\u03D4\x03\x02\x02\x02\u1445\u1446\x07T\x02\x02\u1446\u1447" +
    "\x07G\x02\x02\u1447\u1448\x07U\x02\x02\u1448\u1449\x07V\x02\x02\u1449" +
    "\u144A\x07T\x02\x02\u144A\u144B\x07K\x02\x02\u144B\u144C\x07E\x02\x02" +
    "\u144C\u144D\x07V\x02\x02\u144D\u03D6\x03\x02\x02\x02\u144E\u144F\x07" +
    "U\x02\x02\u144F\u1450\x07G\x02\x02\u1450\u1451\x07E\x02\x02\u1451\u1452" +
    "\x07Q\x02\x02\u1452\u1453\x07P\x02\x02\u1453\u1454\x07F\x02\x02\u1454" +
    "\u1455\x07U\x02\x02\u1455\u03D8\x03\x02\x02\x02\u1456\u1457\x07U\x02\x02" +
    "\u1457\u1458\x07G\x02\x02\u1458\u1459\x07U\x02\x02\u1459\u145A\x07U\x02" +
    "\x02\u145A\u145B\x07K\x02\x02\u145B\u145C\x07Q\x02\x02\u145C\u145D\x07" +
    "P\x02\x02\u145D\u03DA\x03\x02\x02\x02\u145E\u145F\x07U\x02\x02\u145F\u1460" +
    "\x07G\x02\x02\u1460\u1461\x07V\x02\x02\u1461\u1462\x07U\x02\x02\u1462" +
    "\u03DC\x03\x02\x02\x02\u1463\u1464\x07U\x02\x02\u1464\u1465\x07K\x02\x02" +
    "\u1465\u1466\x07\\\x02\x02\u1466\u1467\x07G\x02\x02\u1467\u03DE\x03\x02" +
    "\x02\x02\u1468\u1469\x07U\x02\x02\u1469\u146A\x07N\x02\x02\u146A\u146B" +
    "\x07K\x02\x02\u146B\u146C\x07F\x02\x02\u146C\u146D\x07G\x02\x02\u146D" +
    "\u03E0\x03\x02\x02\x02\u146E\u146F\x07U\x02\x02\u146F\u1470\x07V\x02\x02" +
    "\u1470\u1471\x07G\x02\x02\u1471\u1472\x07R\x02\x02\u1472\u03E2\x03\x02" +
    "\x02\x02\u1473\u1474\x07V\x02\x02\u1474\u1475\x07G\x02\x02\u1475\u1476" +
    "\x07O\x02\x02\u1476\u1477\x07R\x02\x02\u1477\u1478\x07Q\x02\x02\u1478" +
    "\u1479\x07T\x02\x02\u1479\u147A\x07C\x02\x02\u147A\u147B\x07T\x02\x02" +
    "\u147B\u147C\x07[\x02\x02\u147C\u03E4\x03\x02\x02\x02\u147D\u147E\x07" +
    "V\x02\x02\u147E\u147F\x07K\x02\x02\u147F\u1480\x07O\x02\x02\u1480\u1481" +
    "\x07G\x02\x02\u1481\u1482\x07E\x02\x02\u1482\u1483\x07Q\x02\x02\u1483" +
    "\u1484\x07N\x02\x02\u1484\u03E6\x03\x02\x02\x02\u1485\u1486\x07V\x02\x02" +
    "\u1486\u1487\x07W\x02\x02\u1487\u1488\x07O\x02\x02\u1488\u1489\x07D\x02" +
    "\x02\u1489\u148A\x07N\x02\x02\u148A\u148B\x07G\x02\x02\u148B\u03E8\x03" +
    "\x02\x02\x02\u148C\u148D\x07W\x02\x02\u148D\u148E\x07P\x02\x02\u148E\u148F" +
    "\x07N\x02\x02\u148F\u1490\x07Q\x02\x02\u1490\u1491\x07C\x02\x02\u1491" +
    "\u1492\x07F\x02\x02\u1492\u03EA\x03\x02\x02\x02\u1493\u1494\x07X\x02\x02" +
    "\u1494\u1495\x07K\x02\x02\u1495\u1496\x07G\x02\x02\u1496\u1497\x07Y\x02" +
    "\x02\u1497\u03EC\x03\x02\x02\x02\u1498\u1499\x07Y\x02\x02\u1499\u149A" +
    "\x07G\x02\x02\u149A\u149B\x07G\x02\x02\u149B\u149C\x07M\x02\x02\u149C" +
    "\u03EE\x03\x02\x02\x02\u149D\u149E\x07[\x02\x02\u149E\u149F\x07G\x02\x02" +
    "\u149F\u14A0\x07C\x02\x02\u14A0\u14A1\x07T\x02\x02\u14A1\u14A2\x07U\x02" +
    "\x02\u14A2\u03F0\x03\x02\x02\x02\u14A3\u14A4\x07\\\x02\x02\u14A4\u14A5" +
    "\x07Q\x02\x02\u14A5\u14A6\x07P\x02\x02\u14A6\u14A7\x07G\x02\x02\u14A7" +
    "\u03F2\x03\x02\x02\x02\u14A8\u14A9\x07?\x02\x02\u14A9\u03F4\x03\x02\x02" +
    "\x02\u14AA\u14AB\x07@\x02\x02\u14AB\u03F6\x03\x02\x02\x02\u14AC\u14AD" +
    "\x07>\x02\x02\u14AD\u03F8\x03\x02\x02\x02\u14AE\u14AF\x07#\x02\x02\u14AF" +
    "\u03FA\x03\x02\x02\x02\u14B0\u14B1\x07\x80\x02\x02\u14B1\u03FC\x03\x02" +
    "\x02\x02\u14B2\u14B3\x07~\x02\x02\u14B3\u03FE\x03\x02\x02\x02\u14B4\u14B5" +
    "\x07(\x02\x02\u14B5\u0400\x03\x02\x02\x02\u14B6\u14B7\x07`\x02\x02\u14B7" +
    "\u0402\x03\x02\x02\x02\u14B8\u14B9\x070\x02\x02\u14B9\u0404\x03\x02\x02" +
    "\x02\u14BA\u14BB\x07]\x02\x02\u14BB\u0406\x03\x02\x02\x02\u14BC\u14BD" +
    "\x07_\x02\x02\u14BD\u0408\x03\x02\x02\x02\u14BE\u14BF\x07*\x02\x02\u14BF" +
    "\u040A\x03\x02\x02\x02\u14C0\u14C1\x07+\x02\x02\u14C1\u040C\x03\x02\x02" +
    "\x02\u14C2\u14C3\x07}\x02\x02\u14C3\u040E\x03\x02\x02\x02\u14C4\u14C5" +
    "\x07\x7F\x02\x02\u14C5\u0410\x03\x02\x02\x02\u14C6\u14C7\x07.\x02\x02" +
    "\u14C7\u0412\x03\x02\x02\x02\u14C8\u14C9\x07=\x02\x02\u14C9\u0414\x03" +
    "\x02\x02\x02\u14CA\u14CB\x07B\x02\x02\u14CB\u0416\x03\x02\x02\x02\u14CC" +
    "\u14CD\x07)\x02\x02\u14CD\u0418\x03\x02\x02\x02\u14CE\u14CF\x07$\x02\x02" +
    "\u14CF\u041A\x03\x02\x02\x02\u14D0\u14D1\x07b\x02\x02\u14D1\u041C\x03" +
    "\x02\x02\x02\u14D2\u14D3\x07<\x02\x02\u14D3\u041E\x03\x02\x02\x02\u14D4" +
    "\u14D5\x07,\x02\x02\u14D5\u0420\x03\x02\x02\x02\u14D6\u14D7\x07a\x02\x02" +
    "\u14D7\u0422\x03\x02\x02\x02\u14D8\u14D9\x07/\x02\x02\u14D9\u0424\x03" +
    "\x02\x02\x02\u14DA\u14DB\x07-\x02\x02\u14DB\u0426\x03\x02\x02\x02\u14DC" +
    "\u14DD\x07\'\x02\x02\u14DD\u0428\x03\x02\x02\x02\u14DE\u14DF\x07~\x02" +
    "\x02\u14DF\u14E0\x07~\x02\x02\u14E0\u042A\x03\x02\x02\x02\u14E1\u14E2" +
    "\x07/\x02\x02\u14E2\u14E3\x07/\x02\x02\u14E3\u042C\x03\x02\x02\x02\u14E4" +
    "\u14E5\x071\x02\x02\u14E5\u042E\x03\x02\x02\x02\u14E6\u14E7\x07A\x02\x02" +
    "\u14E7\u0430\x03\x02\x02\x02\u14E8\u14E9\x07?\x02\x02\u14E9\u14EA\x07" +
    "@\x02\x02\u14EA\u0432\x03\x02\x02\x02\u14EB\u14EF\x05\u0447\u0224\x02" +
    "\u14EC\u14EF\x05\u0449\u0225\x02\u14ED\u14EF\x05\u044D\u0227\x02\u14EE" +
    "\u14EB\x03\x02\x02\x02\u14EE\u14EC\x03\x02\x02\x02\u14EE\u14ED\x03\x02" +
    "\x02\x02\u14EF\u0434\x03\x02\x02\x02\u14F0\u14F2\x05\u0443\u0222\x02\u14F1" +
    "\u14F0\x03\x02\x02\x02\u14F2\u14F3\x03\x02\x02\x02\u14F3\u14F1\x03\x02" +
    "\x02\x02\u14F3\u14F4\x03\x02\x02\x02\u14F4\u0436\x03\x02\x02\x02\u14F5" +
    "\u14F7\x05\u0443\u0222\x02\u14F6\u14F5\x03\x02\x02";
FlinkSqlLexer._serializedATNSegment9 = "\x02\u14F7\u14F8\x03\x02\x02\x02\u14F8\u14F6\x03\x02\x02\x02\u14F8\u14F9" +
    "\x03\x02\x02\x02\u14F9\u14FB\x03\x02\x02\x02\u14FA\u14F6\x03\x02\x02\x02" +
    "\u14FA\u14FB\x03\x02\x02\x02\u14FB\u14FC\x03\x02\x02\x02\u14FC\u14FE\x07" +
    "0\x02\x02\u14FD\u14FF\x05\u0443\u0222\x02\u14FE\u14FD\x03\x02\x02\x02" +
    "\u14FF\u1500\x03\x02\x02\x02\u1500\u14FE\x03\x02\x02\x02\u1500\u1501\x03" +
    "\x02\x02\x02\u1501\u1521\x03\x02\x02\x02\u1502\u1504\x05\u0443\u0222\x02" +
    "\u1503\u1502\x03\x02\x02\x02\u1504\u1505\x03\x02\x02\x02\u1505\u1503\x03" +
    "\x02\x02\x02\u1505\u1506\x03\x02\x02\x02\u1506\u1507\x03\x02\x02\x02\u1507" +
    "\u1508\x070\x02\x02\u1508\u1509\x05\u043F\u0220\x02\u1509\u1521\x03\x02" +
    "\x02\x02\u150A\u150C\x05\u0443\u0222\x02\u150B\u150A\x03\x02\x02\x02\u150C" +
    "\u150D\x03\x02\x02\x02\u150D\u150B\x03\x02\x02\x02\u150D\u150E\x03\x02" +
    "\x02\x02\u150E\u1510\x03\x02\x02\x02\u150F\u150B\x03\x02\x02\x02\u150F" +
    "\u1510\x03\x02\x02\x02\u1510\u1511\x03\x02\x02\x02\u1511\u1513\x070\x02" +
    "\x02\u1512\u1514\x05\u0443\u0222\x02\u1513\u1512\x03\x02\x02\x02\u1514" +
    "\u1515\x03\x02\x02\x02\u1515\u1513\x03\x02\x02\x02\u1515\u1516\x03\x02" +
    "\x02\x02\u1516\u1517\x03\x02\x02\x02\u1517\u1518\x05\u043F\u0220\x02\u1518" +
    "\u1521\x03\x02\x02\x02\u1519\u151B\x05\u0443\u0222\x02\u151A\u1519\x03" +
    "\x02\x02\x02\u151B\u151C\x03\x02\x02\x02\u151C\u151A\x03\x02\x02\x02\u151C" +
    "\u151D\x03\x02\x02\x02\u151D\u151E\x03\x02\x02\x02\u151E\u151F\x05\u043F" +
    "\u0220\x02\u151F\u1521\x03\x02\x02\x02\u1520\u14FA\x03\x02\x02\x02\u1520" +
    "\u1503\x03\x02\x02\x02\u1520\u150F\x03\x02\x02\x02\u1520\u151A\x03\x02" +
    "\x02\x02\u1521\u0438\x03\x02\x02\x02\u1522\u1523\x05\u044B\u0226\x02\u1523" +
    "\u043A\x03\x02\x02\x02\u1524\u1525\x05\u0441\u0221\x02\u1525\u043C\x03" +
    "\x02\x02\x02\u1526\u152E\x07b\x02\x02\u1527\u1528\x07^\x02\x02\u1528\u152D" +
    "\v\x02\x02\x02\u1529\u152A\x07b\x02\x02\u152A\u152D\x07b\x02\x02\u152B" +
    "\u152D\n\x04\x02\x02\u152C\u1527\x03\x02\x02\x02\u152C\u1529\x03\x02\x02" +
    "\x02\u152C\u152B\x03\x02\x02\x02\u152D\u1530\x03\x02\x02\x02\u152E\u152C" +
    "\x03\x02\x02\x02\u152E\u152F\x03\x02\x02\x02\u152F\u1531\x03\x02\x02\x02" +
    "\u1530\u152E\x03\x02\x02\x02\u1531\u1532\x07b\x02\x02\u1532\u043E\x03" +
    "\x02\x02\x02\u1533\u1535\x07G\x02\x02\u1534\u1536\t\x05\x02\x02\u1535" +
    "\u1534\x03\x02\x02\x02\u1535\u1536\x03\x02\x02\x02\u1536\u1538\x03\x02" +
    "\x02\x02\u1537\u1539\x05\u0443\u0222\x02\u1538\u1537\x03\x02\x02\x02\u1539" +
    "\u153A\x03\x02\x02\x02\u153A\u1538\x03\x02\x02\x02\u153A\u153B\x03\x02" +
    "\x02\x02\u153B\u0440\x03\x02\x02\x02\u153C\u153E\t\x06\x02\x02\u153D\u153C" +
    "\x03\x02\x02\x02\u153E\u1541\x03\x02\x02\x02\u153F\u1540\x03\x02\x02\x02" +
    "\u153F\u153D\x03\x02\x02\x02\u1540\u1543\x03\x02\x02\x02\u1541\u153F\x03" +
    "\x02\x02\x02\u1542\u1544\t\x07\x02\x02\u1543\u1542\x03\x02\x02\x02\u1544" +
    "\u1545\x03\x02\x02\x02\u1545\u1546\x03\x02\x02\x02\u1545\u1543\x03\x02" +
    "\x02\x02\u1546\u154A\x03\x02\x02\x02\u1547\u1549\t\x06\x02\x02\u1548\u1547" +
    "\x03\x02\x02\x02\u1549\u154C\x03\x02\x02\x02\u154A\u1548\x03\x02\x02\x02" +
    "\u154A\u154B\x03\x02\x02\x02\u154B\u0442\x03\x02\x02\x02\u154C\u154A\x03" +
    "\x02\x02\x02\u154D\u154E\t\b\x02\x02\u154E\u0444\x03\x02\x02\x02\u154F" +
    "\u1550\t\t\x02\x02\u1550\u0446\x03\x02\x02\x02\u1551\u1559\x07$\x02\x02" +
    "\u1552\u1553\x07^\x02\x02\u1553\u1558\v\x02\x02\x02\u1554\u1555\x07$\x02" +
    "\x02\u1555\u1558\x07$\x02\x02\u1556\u1558\n\n\x02\x02\u1557\u1552\x03" +
    "\x02\x02\x02\u1557\u1554\x03\x02\x02\x02\u1557\u1556\x03\x02\x02\x02\u1558" +
    "\u155B\x03\x02\x02\x02\u1559\u1557\x03\x02\x02\x02\u1559\u155A\x03\x02" +
    "\x02\x02\u155A\u155C\x03\x02\x02\x02\u155B\u1559\x03\x02\x02\x02\u155C" +
    "\u155D\x07$\x02\x02\u155D\u0448\x03\x02\x02\x02\u155E\u1566\x07)\x02\x02" +
    "\u155F\u1560\x07^\x02\x02\u1560\u1565\v\x02\x02\x02\u1561\u1562\x07)\x02" +
    "\x02\u1562\u1565\x07)\x02\x02\u1563\u1565\n\v\x02\x02\u1564\u155F\x03" +
    "\x02\x02\x02\u1564\u1561\x03\x02\x02\x02\u1564\u1563\x03\x02\x02\x02\u1565" +
    "\u1568\x03\x02\x02\x02\u1566\u1564\x03\x02\x02\x02\u1566\u1567\x03\x02" +
    "\x02\x02\u1567\u1569\x03\x02\x02\x02\u1568\u1566\x03\x02\x02\x02\u1569" +
    "\u156A\x07)\x02\x02\u156A\u044A\x03\x02\x02\x02\u156B\u156C\x07D\x02\x02" +
    "\u156C\u156E\x07)\x02\x02\u156D\u156F\t\f\x02\x02\u156E\u156D\x03\x02" +
    "\x02\x02\u156F\u1570\x03\x02\x02\x02\u1570\u156E\x03\x02\x02\x02\u1570" +
    "\u1571\x03\x02\x02\x02\u1571\u1572\x03\x02\x02\x02\u1572\u1573\x07)\x02" +
    "\x02\u1573\u044C\x03\x02\x02\x02\u1574\u157C\x07b\x02\x02\u1575\u1576" +
    "\x07^\x02\x02\u1576\u157B\v\x02\x02\x02\u1577\u1578\x07b\x02\x02\u1578" +
    "\u157B\x07b\x02\x02\u1579\u157B\n\x04\x02\x02\u157A\u1575\x03\x02\x02" +
    "\x02\u157A\u1577\x03\x02\x02\x02\u157A\u1579\x03\x02\x02\x02\u157B\u157E" +
    "\x03\x02\x02\x02\u157C\u157A\x03\x02\x02\x02\u157C\u157D\x03\x02\x02\x02" +
    "\u157D\u157F\x03\x02\x02\x02\u157E\u157C\x03\x02\x02\x02\u157F\u1580\x07" +
    "b\x02\x02\u1580\u044E\x03\x02\x02\x02%\x02\u0452\u045C\u0467\u046C\u0470" +
    "\u0474\u047A\u047E\u0480\u14EE\u14F3\u14F8\u14FA\u1500\u1505\u150D\u150F" +
    "\u1515\u151C\u1520\u152C\u152E\u1535\u153A\u153F\u1545\u154A\u1557\u1559" +
    "\u1564\u1566\u1570\u157A\u157C\x03\x02\x03\x02";
FlinkSqlLexer._serializedATN = Utils.join([
    FlinkSqlLexer._serializedATNSegment0,
    FlinkSqlLexer._serializedATNSegment1,
    FlinkSqlLexer._serializedATNSegment2,
    FlinkSqlLexer._serializedATNSegment3,
    FlinkSqlLexer._serializedATNSegment4,
    FlinkSqlLexer._serializedATNSegment5,
    FlinkSqlLexer._serializedATNSegment6,
    FlinkSqlLexer._serializedATNSegment7,
    FlinkSqlLexer._serializedATNSegment8,
    FlinkSqlLexer._serializedATNSegment9,
], "");


// EXTERNAL MODULE: ../../node_modules/antlr4ts/atn/ATN.js
var ATN = __webpack_require__(8148);
// EXTERNAL MODULE: ../../node_modules/antlr4ts/FailedPredicateException.js
var FailedPredicateException = __webpack_require__(1103);
// EXTERNAL MODULE: ../../node_modules/antlr4ts/NoViableAltException.js
var NoViableAltException = __webpack_require__(1202);
// EXTERNAL MODULE: ../../node_modules/antlr4ts/Parser.js
var Parser = __webpack_require__(3679);
// EXTERNAL MODULE: ../../node_modules/antlr4ts/ParserRuleContext.js
var ParserRuleContext = __webpack_require__(9248);
// EXTERNAL MODULE: ../../node_modules/antlr4ts/atn/ParserATNSimulator.js
var ParserATNSimulator = __webpack_require__(4217);
// EXTERNAL MODULE: ../../node_modules/antlr4ts/RecognitionException.js
var RecognitionException = __webpack_require__(1100);
// EXTERNAL MODULE: ../../node_modules/antlr4ts/Token.js
var Token = __webpack_require__(8999);
;// CONCATENATED MODULE: ../../node_modules/dt-sql-parser/dist/lib/flinksql/FlinkSqlParser.js
// Generated from dt-sql-parser/src/grammar/flinksql/FlinkSqlParser.g4 by ANTLR 4.9.0-SNAPSHOT











class FlinkSqlParser extends Parser.Parser {
    // @Override
    // @NotNull
    get vocabulary() {
        return FlinkSqlParser.VOCABULARY;
    }
    // tslint:enable:no-trailing-whitespace
    // @Override
    get grammarFileName() { return "FlinkSqlParser.g4"; }
    // @Override
    get ruleNames() { return FlinkSqlParser.ruleNames; }
    // @Override
    get serializedATN() { return FlinkSqlParser._serializedATN; }
    createFailedPredicateException(predicate, message) {
        return new FailedPredicateException.FailedPredicateException(this, predicate, message);
    }
    constructor(input) {
        super(input);
        this._interp = new ParserATNSimulator.ParserATNSimulator(FlinkSqlParser._ATN, this);
    }
    // @RuleVersion(0)
    program() {
        let _localctx = new ProgramContext(this._ctx, this.state);
        this.enterRule(_localctx, 0, FlinkSqlParser.RULE_program);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 379;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === FlinkSqlParser.KW_ALTER || _la === FlinkSqlParser.KW_BEGIN || _la === FlinkSqlParser.KW_CREATE || ((((_la - 109)) & ~0x1F) === 0 && ((1 << (_la - 109)) & ((1 << (FlinkSqlParser.KW_DESCRIBE - 109)) | (1 << (FlinkSqlParser.KW_DROP - 109)) | (1 << (FlinkSqlParser.KW_EXECUTE - 109)) | (1 << (FlinkSqlParser.KW_EXPLAIN - 109)))) !== 0) || _la === FlinkSqlParser.KW_INSERT || ((((_la - 312)) & ~0x1F) === 0 && ((1 << (_la - 312)) & ((1 << (FlinkSqlParser.KW_RESET - 312)) | (1 << (FlinkSqlParser.KW_SELECT - 312)) | (1 << (FlinkSqlParser.KW_SET - 312)) | (1 << (FlinkSqlParser.KW_SHOW - 312)))) !== 0) || ((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & ((1 << (FlinkSqlParser.KW_USE - 410)) | (1 << (FlinkSqlParser.KW_VALUES - 410)) | (1 << (FlinkSqlParser.KW_WITH - 410)) | (1 << (FlinkSqlParser.KW_ADD - 410)))) !== 0) || _la === FlinkSqlParser.KW_DESC || _la === FlinkSqlParser.KW_LOAD || ((((_la - 489)) & ~0x1F) === 0 && ((1 << (_la - 489)) & ((1 << (FlinkSqlParser.KW_REMOVE - 489)) | (1 << (FlinkSqlParser.KW_UNLOAD - 489)) | (1 << (FlinkSqlParser.LR_BRACKET - 489)))) !== 0) || _la === FlinkSqlParser.SEMICOLON) {
                    {
                        {
                            this.state = 376;
                            this.singleStatement();
                        }
                    }
                    this.state = 381;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 382;
                this.match(FlinkSqlParser.EOF);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    singleStatement() {
        let _localctx = new SingleStatementContext(this._ctx, this.state);
        this.enterRule(_localctx, 2, FlinkSqlParser.RULE_singleStatement);
        try {
            this.state = 389;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case FlinkSqlParser.KW_ALTER:
                case FlinkSqlParser.KW_BEGIN:
                case FlinkSqlParser.KW_CREATE:
                case FlinkSqlParser.KW_DESCRIBE:
                case FlinkSqlParser.KW_DROP:
                case FlinkSqlParser.KW_EXECUTE:
                case FlinkSqlParser.KW_EXPLAIN:
                case FlinkSqlParser.KW_INSERT:
                case FlinkSqlParser.KW_RESET:
                case FlinkSqlParser.KW_SELECT:
                case FlinkSqlParser.KW_SET:
                case FlinkSqlParser.KW_SHOW:
                case FlinkSqlParser.KW_USE:
                case FlinkSqlParser.KW_VALUES:
                case FlinkSqlParser.KW_WITH:
                case FlinkSqlParser.KW_ADD:
                case FlinkSqlParser.KW_DESC:
                case FlinkSqlParser.KW_LOAD:
                case FlinkSqlParser.KW_REMOVE:
                case FlinkSqlParser.KW_UNLOAD:
                case FlinkSqlParser.LR_BRACKET:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 384;
                        this.sqlStatement();
                        this.state = 386;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 1, this._ctx)) {
                            case 1:
                                {
                                    this.state = 385;
                                    this.match(FlinkSqlParser.SEMICOLON);
                                }
                                break;
                        }
                    }
                    break;
                case FlinkSqlParser.SEMICOLON:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 388;
                        this.emptyStatement();
                    }
                    break;
                default:
                    throw new NoViableAltException.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    sqlStatement() {
        let _localctx = new SqlStatementContext(this._ctx, this.state);
        this.enterRule(_localctx, 4, FlinkSqlParser.RULE_sqlStatement);
        try {
            this.state = 403;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 3, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 391;
                        this.ddlStatement();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 392;
                        this.dmlStatement();
                    }
                    break;
                case 3:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 393;
                        this.describeStatement();
                    }
                    break;
                case 4:
                    this.enterOuterAlt(_localctx, 4);
                    {
                        this.state = 394;
                        this.explainStatement();
                    }
                    break;
                case 5:
                    this.enterOuterAlt(_localctx, 5);
                    {
                        this.state = 395;
                        this.useStatement();
                    }
                    break;
                case 6:
                    this.enterOuterAlt(_localctx, 6);
                    {
                        this.state = 396;
                        this.showStatememt();
                    }
                    break;
                case 7:
                    this.enterOuterAlt(_localctx, 7);
                    {
                        this.state = 397;
                        this.loadStatement();
                    }
                    break;
                case 8:
                    this.enterOuterAlt(_localctx, 8);
                    {
                        this.state = 398;
                        this.unloadStatememt();
                    }
                    break;
                case 9:
                    this.enterOuterAlt(_localctx, 9);
                    {
                        this.state = 399;
                        this.setStatememt();
                    }
                    break;
                case 10:
                    this.enterOuterAlt(_localctx, 10);
                    {
                        this.state = 400;
                        this.resetStatememt();
                    }
                    break;
                case 11:
                    this.enterOuterAlt(_localctx, 11);
                    {
                        this.state = 401;
                        this.jarStatememt();
                    }
                    break;
                case 12:
                    this.enterOuterAlt(_localctx, 12);
                    {
                        this.state = 402;
                        this.dtAddStatement();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    emptyStatement() {
        let _localctx = new EmptyStatementContext(this._ctx, this.state);
        this.enterRule(_localctx, 6, FlinkSqlParser.RULE_emptyStatement);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 405;
                this.match(FlinkSqlParser.SEMICOLON);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    ddlStatement() {
        let _localctx = new DdlStatementContext(this._ctx, this.state);
        this.enterRule(_localctx, 8, FlinkSqlParser.RULE_ddlStatement);
        try {
            this.state = 421;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 4, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 407;
                        this.createTable();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 408;
                        this.createDatabase();
                    }
                    break;
                case 3:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 409;
                        this.createView();
                    }
                    break;
                case 4:
                    this.enterOuterAlt(_localctx, 4);
                    {
                        this.state = 410;
                        this.createFunction();
                    }
                    break;
                case 5:
                    this.enterOuterAlt(_localctx, 5);
                    {
                        this.state = 411;
                        this.createCatalog();
                    }
                    break;
                case 6:
                    this.enterOuterAlt(_localctx, 6);
                    {
                        this.state = 412;
                        this.alterTable();
                    }
                    break;
                case 7:
                    this.enterOuterAlt(_localctx, 7);
                    {
                        this.state = 413;
                        this.alertView();
                    }
                    break;
                case 8:
                    this.enterOuterAlt(_localctx, 8);
                    {
                        this.state = 414;
                        this.alterDatabase();
                    }
                    break;
                case 9:
                    this.enterOuterAlt(_localctx, 9);
                    {
                        this.state = 415;
                        this.alterFunction();
                    }
                    break;
                case 10:
                    this.enterOuterAlt(_localctx, 10);
                    {
                        this.state = 416;
                        this.dropCatalog();
                    }
                    break;
                case 11:
                    this.enterOuterAlt(_localctx, 11);
                    {
                        this.state = 417;
                        this.dropTable();
                    }
                    break;
                case 12:
                    this.enterOuterAlt(_localctx, 12);
                    {
                        this.state = 418;
                        this.dropDatabase();
                    }
                    break;
                case 13:
                    this.enterOuterAlt(_localctx, 13);
                    {
                        this.state = 419;
                        this.dropView();
                    }
                    break;
                case 14:
                    this.enterOuterAlt(_localctx, 14);
                    {
                        this.state = 420;
                        this.dropFunction();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    dmlStatement() {
        let _localctx = new DmlStatementContext(this._ctx, this.state);
        this.enterRule(_localctx, 10, FlinkSqlParser.RULE_dmlStatement);
        try {
            this.state = 425;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case FlinkSqlParser.KW_SELECT:
                case FlinkSqlParser.KW_VALUES:
                case FlinkSqlParser.KW_WITH:
                case FlinkSqlParser.LR_BRACKET:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 423;
                        this.queryStatement(0);
                    }
                    break;
                case FlinkSqlParser.KW_BEGIN:
                case FlinkSqlParser.KW_EXECUTE:
                case FlinkSqlParser.KW_INSERT:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 424;
                        this.insertStatement();
                    }
                    break;
                default:
                    throw new NoViableAltException.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    describeStatement() {
        let _localctx = new DescribeStatementContext(this._ctx, this.state);
        this.enterRule(_localctx, 12, FlinkSqlParser.RULE_describeStatement);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 427;
                _la = this._input.LA(1);
                if (!(_la === FlinkSqlParser.KW_DESCRIBE || _la === FlinkSqlParser.KW_DESC)) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token.Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 428;
                this.tablePath();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    explainStatement() {
        let _localctx = new ExplainStatementContext(this._ctx, this.state);
        this.enterRule(_localctx, 14, FlinkSqlParser.RULE_explainStatement);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 430;
                this.match(FlinkSqlParser.KW_EXPLAIN);
                this.state = 434;
                this._errHandler.sync(this);
                switch (this._input.LA(1)) {
                    case FlinkSqlParser.KW_CHANGELOG_MODE:
                    case FlinkSqlParser.KW_ESTIMATED_COST:
                    case FlinkSqlParser.KW_JSON_EXECUTION_PLAN:
                        {
                            this.state = 431;
                            this.explainDetails();
                        }
                        break;
                    case FlinkSqlParser.KW_PLAN:
                        {
                            this.state = 432;
                            this.match(FlinkSqlParser.KW_PLAN);
                            this.state = 433;
                            this.match(FlinkSqlParser.KW_FOR);
                        }
                        break;
                    case FlinkSqlParser.KW_BEGIN:
                    case FlinkSqlParser.KW_EXECUTE:
                    case FlinkSqlParser.KW_INSERT:
                    case FlinkSqlParser.KW_SELECT:
                    case FlinkSqlParser.KW_STATEMENT:
                    case FlinkSqlParser.KW_VALUES:
                    case FlinkSqlParser.KW_WITH:
                    case FlinkSqlParser.LR_BRACKET:
                        break;
                    default:
                        break;
                }
                this.state = 439;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 7, this._ctx)) {
                    case 1:
                        {
                            this.state = 436;
                            this.dmlStatement();
                        }
                        break;
                    case 2:
                        {
                            this.state = 437;
                            this.insertSimpleStatement();
                        }
                        break;
                    case 3:
                        {
                            this.state = 438;
                            this.insertMulStatement();
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    explainDetails() {
        let _localctx = new ExplainDetailsContext(this._ctx, this.state);
        this.enterRule(_localctx, 16, FlinkSqlParser.RULE_explainDetails);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 441;
                this.explainDetail();
                this.state = 446;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === FlinkSqlParser.COMMA) {
                    {
                        {
                            this.state = 442;
                            this.match(FlinkSqlParser.COMMA);
                            this.state = 443;
                            this.explainDetail();
                        }
                    }
                    this.state = 448;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    explainDetail() {
        let _localctx = new ExplainDetailContext(this._ctx, this.state);
        this.enterRule(_localctx, 18, FlinkSqlParser.RULE_explainDetail);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 449;
                _la = this._input.LA(1);
                if (!(_la === FlinkSqlParser.KW_CHANGELOG_MODE || _la === FlinkSqlParser.KW_ESTIMATED_COST || _la === FlinkSqlParser.KW_JSON_EXECUTION_PLAN)) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token.Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    useStatement() {
        let _localctx = new UseStatementContext(this._ctx, this.state);
        this.enterRule(_localctx, 20, FlinkSqlParser.RULE_useStatement);
        try {
            this.state = 457;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 9, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 451;
                        this.match(FlinkSqlParser.KW_USE);
                        this.state = 452;
                        this.match(FlinkSqlParser.KW_CATALOG);
                        this.state = 453;
                        this.catalogPath();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 454;
                        this.match(FlinkSqlParser.KW_USE);
                        this.state = 455;
                        this.databasePath();
                    }
                    break;
                case 3:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 456;
                        this.useModuleStatement();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    useModuleStatement() {
        let _localctx = new UseModuleStatementContext(this._ctx, this.state);
        this.enterRule(_localctx, 22, FlinkSqlParser.RULE_useModuleStatement);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 459;
                this.match(FlinkSqlParser.KW_USE);
                this.state = 460;
                this.match(FlinkSqlParser.KW_MODULES);
                this.state = 461;
                this.uid();
                this.state = 466;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === FlinkSqlParser.COMMA) {
                    {
                        {
                            this.state = 462;
                            this.match(FlinkSqlParser.COMMA);
                            this.state = 463;
                            this.uid();
                        }
                    }
                    this.state = 468;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    showStatememt() {
        let _localctx = new ShowStatememtContext(this._ctx, this.state);
        this.enterRule(_localctx, 24, FlinkSqlParser.RULE_showStatememt);
        let _la;
        try {
            this.state = 511;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 18, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 469;
                        this.match(FlinkSqlParser.KW_SHOW);
                        this.state = 470;
                        _la = this._input.LA(1);
                        if (!(_la === FlinkSqlParser.KW_CATALOGS || _la === FlinkSqlParser.KW_DATABASES || _la === FlinkSqlParser.KW_VIEWS || _la === FlinkSqlParser.KW_JARS)) {
                            this._errHandler.recoverInline(this);
                        }
                        else {
                            if (this._input.LA(1) === Token.Token.EOF) {
                                this.matchedEOF = true;
                            }
                            this._errHandler.reportMatch(this);
                            this.consume();
                        }
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 471;
                        this.match(FlinkSqlParser.KW_SHOW);
                        this.state = 472;
                        this.match(FlinkSqlParser.KW_CURRENT);
                        this.state = 473;
                        _la = this._input.LA(1);
                        if (!(_la === FlinkSqlParser.KW_CATALOG || _la === FlinkSqlParser.KW_DATABASE)) {
                            this._errHandler.recoverInline(this);
                        }
                        else {
                            if (this._input.LA(1) === Token.Token.EOF) {
                                this.matchedEOF = true;
                            }
                            this._errHandler.reportMatch(this);
                            this.consume();
                        }
                    }
                    break;
                case 3:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 474;
                        this.match(FlinkSqlParser.KW_SHOW);
                        this.state = 475;
                        this.match(FlinkSqlParser.KW_TABLES);
                        this.state = 478;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === FlinkSqlParser.KW_FROM || _la === FlinkSqlParser.KW_IN) {
                            {
                                this.state = 476;
                                _la = this._input.LA(1);
                                if (!(_la === FlinkSqlParser.KW_FROM || _la === FlinkSqlParser.KW_IN)) {
                                    this._errHandler.recoverInline(this);
                                }
                                else {
                                    if (this._input.LA(1) === Token.Token.EOF) {
                                        this.matchedEOF = true;
                                    }
                                    this._errHandler.reportMatch(this);
                                    this.consume();
                                }
                                this.state = 477;
                                this.databasePath();
                            }
                        }
                        this.state = 481;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === FlinkSqlParser.KW_LIKE || _la === FlinkSqlParser.KW_NOT) {
                            {
                                this.state = 480;
                                this.likePredicate();
                            }
                        }
                    }
                    break;
                case 4:
                    this.enterOuterAlt(_localctx, 4);
                    {
                        this.state = 483;
                        this.match(FlinkSqlParser.KW_SHOW);
                        this.state = 484;
                        this.match(FlinkSqlParser.KW_COLUMNS);
                        this.state = 485;
                        _la = this._input.LA(1);
                        if (!(_la === FlinkSqlParser.KW_FROM || _la === FlinkSqlParser.KW_IN)) {
                            this._errHandler.recoverInline(this);
                        }
                        else {
                            if (this._input.LA(1) === Token.Token.EOF) {
                                this.matchedEOF = true;
                            }
                            this._errHandler.reportMatch(this);
                            this.consume();
                        }
                        this.state = 488;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 13, this._ctx)) {
                            case 1:
                                {
                                    this.state = 486;
                                    this.viewPath();
                                }
                                break;
                            case 2:
                                {
                                    this.state = 487;
                                    this.tablePath();
                                }
                                break;
                        }
                        this.state = 491;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === FlinkSqlParser.KW_LIKE || _la === FlinkSqlParser.KW_NOT) {
                            {
                                this.state = 490;
                                this.likePredicate();
                            }
                        }
                    }
                    break;
                case 5:
                    this.enterOuterAlt(_localctx, 5);
                    {
                        this.state = 493;
                        this.match(FlinkSqlParser.KW_SHOW);
                        this.state = 494;
                        this.match(FlinkSqlParser.KW_CREATE);
                        this.state = 499;
                        this._errHandler.sync(this);
                        switch (this._input.LA(1)) {
                            case FlinkSqlParser.KW_TABLE:
                                {
                                    this.state = 495;
                                    this.match(FlinkSqlParser.KW_TABLE);
                                    this.state = 496;
                                    this.tablePath();
                                }
                                break;
                            case FlinkSqlParser.KW_VIEW:
                                {
                                    this.state = 497;
                                    this.match(FlinkSqlParser.KW_VIEW);
                                    this.state = 498;
                                    this.viewPath();
                                }
                                break;
                            default:
                                throw new NoViableAltException.NoViableAltException(this);
                        }
                    }
                    break;
                case 6:
                    this.enterOuterAlt(_localctx, 6);
                    {
                        this.state = 501;
                        this.match(FlinkSqlParser.KW_SHOW);
                        this.state = 503;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === FlinkSqlParser.KW_USER) {
                            {
                                this.state = 502;
                                this.match(FlinkSqlParser.KW_USER);
                            }
                        }
                        this.state = 505;
                        this.match(FlinkSqlParser.KW_FUNCTIONS);
                    }
                    break;
                case 7:
                    this.enterOuterAlt(_localctx, 7);
                    {
                        this.state = 506;
                        this.match(FlinkSqlParser.KW_SHOW);
                        this.state = 508;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === FlinkSqlParser.KW_FULL) {
                            {
                                this.state = 507;
                                this.match(FlinkSqlParser.KW_FULL);
                            }
                        }
                        this.state = 510;
                        this.match(FlinkSqlParser.KW_MODULES);
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    loadStatement() {
        let _localctx = new LoadStatementContext(this._ctx, this.state);
        this.enterRule(_localctx, 26, FlinkSqlParser.RULE_loadStatement);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 513;
                this.match(FlinkSqlParser.KW_LOAD);
                this.state = 514;
                this.match(FlinkSqlParser.KW_MODULE);
                this.state = 515;
                this.uid();
                this.state = 518;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 19, this._ctx)) {
                    case 1:
                        {
                            this.state = 516;
                            this.match(FlinkSqlParser.KW_WITH);
                            this.state = 517;
                            this.tablePropertyList();
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    unloadStatememt() {
        let _localctx = new UnloadStatememtContext(this._ctx, this.state);
        this.enterRule(_localctx, 28, FlinkSqlParser.RULE_unloadStatememt);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 520;
                this.match(FlinkSqlParser.KW_UNLOAD);
                this.state = 521;
                this.match(FlinkSqlParser.KW_MODULE);
                this.state = 522;
                this.uid();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    setStatememt() {
        let _localctx = new SetStatememtContext(this._ctx, this.state);
        this.enterRule(_localctx, 30, FlinkSqlParser.RULE_setStatememt);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 524;
                this.match(FlinkSqlParser.KW_SET);
                this.state = 526;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 20, this._ctx)) {
                    case 1:
                        {
                            this.state = 525;
                            this.tableProperty();
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    resetStatememt() {
        let _localctx = new ResetStatememtContext(this._ctx, this.state);
        this.enterRule(_localctx, 32, FlinkSqlParser.RULE_resetStatememt);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 528;
                this.match(FlinkSqlParser.KW_RESET);
                this.state = 530;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 21, this._ctx)) {
                    case 1:
                        {
                            this.state = 529;
                            this.tablePropertyKey();
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    jarStatememt() {
        let _localctx = new JarStatememtContext(this._ctx, this.state);
        this.enterRule(_localctx, 34, FlinkSqlParser.RULE_jarStatememt);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 532;
                _la = this._input.LA(1);
                if (!(_la === FlinkSqlParser.KW_ADD || _la === FlinkSqlParser.KW_REMOVE)) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token.Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 533;
                this.match(FlinkSqlParser.KW_JAR);
                this.state = 534;
                this.jarFileName();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    dtAddStatement() {
        let _localctx = new DtAddStatementContext(this._ctx, this.state);
        this.enterRule(_localctx, 36, FlinkSqlParser.RULE_dtAddStatement);
        let _la;
        try {
            this.state = 586;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 25, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 536;
                        this.match(FlinkSqlParser.KW_ADD);
                        this.state = 537;
                        this.match(FlinkSqlParser.KW_JAR);
                        this.state = 538;
                        this.match(FlinkSqlParser.KW_WITH);
                        this.state = 539;
                        this.dtFilePath();
                        this.state = 542;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === FlinkSqlParser.KW_AS) {
                            {
                                this.state = 540;
                                this.match(FlinkSqlParser.KW_AS);
                                this.state = 541;
                                this.uid();
                            }
                        }
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 544;
                        this.match(FlinkSqlParser.KW_ADD);
                        this.state = 545;
                        this.match(FlinkSqlParser.KW_FILE);
                        this.state = 546;
                        this.match(FlinkSqlParser.KW_WITH);
                        this.state = 547;
                        this.dtFilePath();
                        this.state = 550;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === FlinkSqlParser.KW_AS) {
                            {
                                this.state = 548;
                                this.match(FlinkSqlParser.KW_AS);
                                this.state = 549;
                                this.uid();
                            }
                        }
                        this.state = 554;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === FlinkSqlParser.KW_RENAME) {
                            {
                                this.state = 552;
                                this.match(FlinkSqlParser.KW_RENAME);
                                this.state = 553;
                                this.uid();
                            }
                        }
                    }
                    break;
                case 3:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 556;
                        this.match(FlinkSqlParser.KW_ADD);
                        this.state = 557;
                        _la = this._input.LA(1);
                        if (!(((((_la - 482)) & ~0x1F) === 0 && ((1 << (_la - 482)) & ((1 << (FlinkSqlParser.KW_PYTHON_ARCHIVES - 482)) | (1 << (FlinkSqlParser.KW_PYTHON_DEPENDENCIES - 482)) | (1 << (FlinkSqlParser.KW_PYTHON_FILES - 482)) | (1 << (FlinkSqlParser.KW_PYTHON_JAR - 482)) | (1 << (FlinkSqlParser.KW_PYTHON_REQUIREMENTS - 482)))) !== 0))) {
                            this._errHandler.recoverInline(this);
                        }
                        else {
                            if (this._input.LA(1) === Token.Token.EOF) {
                                this.matchedEOF = true;
                            }
                            this._errHandler.reportMatch(this);
                            this.consume();
                        }
                        this.state = 558;
                        this.match(FlinkSqlParser.KW_WITH);
                        this.state = 559;
                        this.dtFilePath();
                        this.state = 560;
                        this.match(FlinkSqlParser.KW_RENAME);
                        this.state = 561;
                        this.uid();
                    }
                    break;
                case 4:
                    this.enterOuterAlt(_localctx, 4);
                    {
                        this.state = 563;
                        this.match(FlinkSqlParser.KW_ADD);
                        this.state = 564;
                        this.match(FlinkSqlParser.KW_PYTHON_PARAMETER);
                        this.state = 565;
                        this.dtFilePath();
                    }
                    break;
                case 5:
                    this.enterOuterAlt(_localctx, 5);
                    {
                        this.state = 566;
                        this.match(FlinkSqlParser.KW_ADD);
                        this.state = 567;
                        this.match(FlinkSqlParser.KW_ENGINE);
                        this.state = 568;
                        this.match(FlinkSqlParser.KW_FILE);
                        this.state = 569;
                        this.match(FlinkSqlParser.KW_WITH);
                        this.state = 570;
                        this.dtFilePath();
                        this.state = 571;
                        this.match(FlinkSqlParser.KW_RENAME);
                        this.state = 572;
                        this.uid();
                        this.state = 573;
                        this.match(FlinkSqlParser.KW_KEY);
                        this.state = 574;
                        this.uid();
                    }
                    break;
                case 6:
                    this.enterOuterAlt(_localctx, 6);
                    {
                        this.state = 576;
                        this.match(FlinkSqlParser.KW_ADD);
                        this.state = 577;
                        this.match(FlinkSqlParser.KW_CONFIG);
                        this.state = 578;
                        this.match(FlinkSqlParser.KW_FILE);
                        this.state = 579;
                        this.match(FlinkSqlParser.KW_WITH);
                        this.state = 580;
                        this.dtFilePath();
                        this.state = 581;
                        this.match(FlinkSqlParser.KW_FOR);
                        this.state = 582;
                        this.uid();
                        this.state = 583;
                        this.match(FlinkSqlParser.KW_AS);
                        this.state = 584;
                        this.uid();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    dtFilePath() {
        let _localctx = new DtFilePathContext(this._ctx, this.state);
        this.enterRule(_localctx, 38, FlinkSqlParser.RULE_dtFilePath);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 592;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 589;
                                    this._errHandler.sync(this);
                                    _la = this._input.LA(1);
                                    if (_la === FlinkSqlParser.SLASH_SIGN) {
                                        {
                                            this.state = 588;
                                            this.match(FlinkSqlParser.SLASH_SIGN);
                                        }
                                    }
                                    this.state = 591;
                                    this.uid();
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException.NoViableAltException(this);
                    }
                    this.state = 594;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 27, this._ctx);
                } while (_alt !== 2 && _alt !== ATN.ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    createTable() {
        let _localctx = new CreateTableContext(this._ctx, this.state);
        this.enterRule(_localctx, 40, FlinkSqlParser.RULE_createTable);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 598;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 28, this._ctx)) {
                    case 1:
                        {
                            this.state = 596;
                            this.simpleCreateTable();
                        }
                        break;
                    case 2:
                        {
                            this.state = 597;
                            this.createTableAsSelect();
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    simpleCreateTable() {
        let _localctx = new SimpleCreateTableContext(this._ctx, this.state);
        this.enterRule(_localctx, 42, FlinkSqlParser.RULE_simpleCreateTable);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 600;
                this.match(FlinkSqlParser.KW_CREATE);
                this.state = 602;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === FlinkSqlParser.KW_TEMPORARY) {
                    {
                        this.state = 601;
                        this.match(FlinkSqlParser.KW_TEMPORARY);
                    }
                }
                this.state = 604;
                this.match(FlinkSqlParser.KW_TABLE);
                this.state = 606;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === FlinkSqlParser.KW_IF) {
                    {
                        this.state = 605;
                        this.ifNotExists();
                    }
                }
                this.state = 608;
                this.tablePathCreate();
                this.state = 609;
                this.match(FlinkSqlParser.LR_BRACKET);
                this.state = 610;
                this.columnOptionDefinition();
                this.state = 615;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 31, this._ctx);
                while (_alt !== 2 && _alt !== ATN.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 611;
                                this.match(FlinkSqlParser.COMMA);
                                this.state = 612;
                                this.columnOptionDefinition();
                            }
                        }
                    }
                    this.state = 617;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 31, this._ctx);
                }
                this.state = 620;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 32, this._ctx)) {
                    case 1:
                        {
                            this.state = 618;
                            this.match(FlinkSqlParser.COMMA);
                            this.state = 619;
                            this.watermarkDefinition();
                        }
                        break;
                }
                this.state = 624;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 33, this._ctx)) {
                    case 1:
                        {
                            this.state = 622;
                            this.match(FlinkSqlParser.COMMA);
                            this.state = 623;
                            this.tableConstraint();
                        }
                        break;
                }
                this.state = 628;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === FlinkSqlParser.COMMA) {
                    {
                        this.state = 626;
                        this.match(FlinkSqlParser.COMMA);
                        this.state = 627;
                        this.selfDefinitionClause();
                    }
                }
                this.state = 630;
                this.match(FlinkSqlParser.RR_BRACKET);
                this.state = 632;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === FlinkSqlParser.KW_COMMENT) {
                    {
                        this.state = 631;
                        this.commentSpec();
                    }
                }
                this.state = 635;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === FlinkSqlParser.KW_PARTITIONED) {
                    {
                        this.state = 634;
                        this.partitionDefinition();
                    }
                }
                this.state = 637;
                this.withOption();
                this.state = 639;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === FlinkSqlParser.KW_LIKE) {
                    {
                        this.state = 638;
                        this.likeDefinition();
                    }
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    createTableAsSelect() {
        let _localctx = new CreateTableAsSelectContext(this._ctx, this.state);
        this.enterRule(_localctx, 44, FlinkSqlParser.RULE_createTableAsSelect);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 641;
                this.match(FlinkSqlParser.KW_CREATE);
                this.state = 642;
                this.match(FlinkSqlParser.KW_TABLE);
                this.state = 644;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === FlinkSqlParser.KW_IF) {
                    {
                        this.state = 643;
                        this.ifNotExists();
                    }
                }
                this.state = 646;
                this.tablePathCreate();
                this.state = 647;
                this.withOption();
                this.state = 650;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === FlinkSqlParser.KW_AS) {
                    {
                        this.state = 648;
                        this.match(FlinkSqlParser.KW_AS);
                        this.state = 649;
                        this.queryStatement(0);
                    }
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    columnOptionDefinition() {
        let _localctx = new ColumnOptionDefinitionContext(this._ctx, this.state);
        this.enterRule(_localctx, 46, FlinkSqlParser.RULE_columnOptionDefinition);
        try {
            this.state = 655;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 40, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 652;
                        this.physicalColumnDefinition();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 653;
                        this.metadataColumnDefinition();
                    }
                    break;
                case 3:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 654;
                        this.computedColumnDefinition();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    physicalColumnDefinition() {
        let _localctx = new PhysicalColumnDefinitionContext(this._ctx, this.state);
        this.enterRule(_localctx, 48, FlinkSqlParser.RULE_physicalColumnDefinition);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 657;
                this.columnNameCreate();
                this.state = 658;
                this.columnType();
                this.state = 660;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === FlinkSqlParser.KW_CONSTRAINT || _la === FlinkSqlParser.KW_NOT || _la === FlinkSqlParser.KW_NULL || _la === FlinkSqlParser.KW_PRIMARY) {
                    {
                        this.state = 659;
                        this.columnConstraint();
                    }
                }
                this.state = 663;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === FlinkSqlParser.KW_COMMENT) {
                    {
                        this.state = 662;
                        this.commentSpec();
                    }
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    columnNameCreate() {
        let _localctx = new ColumnNameCreateContext(this._ctx, this.state);
        this.enterRule(_localctx, 50, FlinkSqlParser.RULE_columnNameCreate);
        try {
            this.state = 667;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 43, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 665;
                        this.uid();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 666;
                        this.expression();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    columnName() {
        let _localctx = new ColumnNameContext(this._ctx, this.state);
        this.enterRule(_localctx, 52, FlinkSqlParser.RULE_columnName);
        try {
            this.state = 671;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 44, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 669;
                        this.uid();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 670;
                        this.expression();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    columnNameList() {
        let _localctx = new ColumnNameListContext(this._ctx, this.state);
        this.enterRule(_localctx, 54, FlinkSqlParser.RULE_columnNameList);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 673;
                this.match(FlinkSqlParser.LR_BRACKET);
                this.state = 674;
                this.columnName();
                this.state = 679;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === FlinkSqlParser.COMMA) {
                    {
                        {
                            this.state = 675;
                            this.match(FlinkSqlParser.COMMA);
                            this.state = 676;
                            this.columnName();
                        }
                    }
                    this.state = 681;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 682;
                this.match(FlinkSqlParser.RR_BRACKET);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    columnType() {
        let _localctx = new ColumnTypeContext(this._ctx, this.state);
        this.enterRule(_localctx, 56, FlinkSqlParser.RULE_columnType);
        let _la;
        try {
            this.state = 721;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case FlinkSqlParser.KW_BOOLEAN:
                case FlinkSqlParser.KW_DATE:
                case FlinkSqlParser.KW_NULL:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 684;
                        _localctx._typeName = this._input.LT(1);
                        _la = this._input.LA(1);
                        if (!(_la === FlinkSqlParser.KW_BOOLEAN || _la === FlinkSqlParser.KW_DATE || _la === FlinkSqlParser.KW_NULL)) {
                            _localctx._typeName = this._errHandler.recoverInline(this);
                        }
                        else {
                            if (this._input.LA(1) === Token.Token.EOF) {
                                this.matchedEOF = true;
                            }
                            this._errHandler.reportMatch(this);
                            this.consume();
                        }
                    }
                    break;
                case FlinkSqlParser.KW_BIGINT:
                case FlinkSqlParser.KW_BINARY:
                case FlinkSqlParser.KW_BYTES:
                case FlinkSqlParser.KW_CHAR:
                case FlinkSqlParser.KW_DATETIME:
                case FlinkSqlParser.KW_INT:
                case FlinkSqlParser.KW_INTEGER:
                case FlinkSqlParser.KW_SMALLINT:
                case FlinkSqlParser.KW_STRING:
                case FlinkSqlParser.KW_TIME:
                case FlinkSqlParser.KW_TIMESTAMP_LTZ:
                case FlinkSqlParser.KW_TINYINT:
                case FlinkSqlParser.KW_VARBINARY:
                case FlinkSqlParser.KW_VARCHAR:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 685;
                        _localctx._typeName = this._input.LT(1);
                        _la = this._input.LA(1);
                        if (!(((((_la - 28)) & ~0x1F) === 0 && ((1 << (_la - 28)) & ((1 << (FlinkSqlParser.KW_BIGINT - 28)) | (1 << (FlinkSqlParser.KW_BINARY - 28)) | (1 << (FlinkSqlParser.KW_BYTES - 28)) | (1 << (FlinkSqlParser.KW_CHAR - 28)))) !== 0) || _la === FlinkSqlParser.KW_DATETIME || _la === FlinkSqlParser.KW_INT || _la === FlinkSqlParser.KW_INTEGER || _la === FlinkSqlParser.KW_SMALLINT || _la === FlinkSqlParser.KW_STRING || ((((_la - 378)) & ~0x1F) === 0 && ((1 << (_la - 378)) & ((1 << (FlinkSqlParser.KW_TIME - 378)) | (1 << (FlinkSqlParser.KW_TIMESTAMP_LTZ - 378)) | (1 << (FlinkSqlParser.KW_TINYINT - 378)))) !== 0) || _la === FlinkSqlParser.KW_VARBINARY || _la === FlinkSqlParser.KW_VARCHAR)) {
                            _localctx._typeName = this._errHandler.recoverInline(this);
                        }
                        else {
                            if (this._input.LA(1) === Token.Token.EOF) {
                                this.matchedEOF = true;
                            }
                            this._errHandler.reportMatch(this);
                            this.consume();
                        }
                        this.state = 687;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === FlinkSqlParser.LR_BRACKET) {
                            {
                                this.state = 686;
                                this.lengthOneDimension();
                            }
                        }
                    }
                    break;
                case FlinkSqlParser.KW_TIMESTAMP:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 689;
                        _localctx._typeName = this.match(FlinkSqlParser.KW_TIMESTAMP);
                        this.state = 691;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === FlinkSqlParser.LR_BRACKET) {
                            {
                                this.state = 690;
                                this.lengthOneDimension();
                            }
                        }
                        this.state = 699;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === FlinkSqlParser.KW_WITH || _la === FlinkSqlParser.KW_WITHOUT) {
                            {
                                this.state = 693;
                                _la = this._input.LA(1);
                                if (!(_la === FlinkSqlParser.KW_WITH || _la === FlinkSqlParser.KW_WITHOUT)) {
                                    this._errHandler.recoverInline(this);
                                }
                                else {
                                    if (this._input.LA(1) === Token.Token.EOF) {
                                        this.matchedEOF = true;
                                    }
                                    this._errHandler.reportMatch(this);
                                    this.consume();
                                }
                                this.state = 695;
                                this._errHandler.sync(this);
                                _la = this._input.LA(1);
                                if (_la === FlinkSqlParser.KW_LOCAL) {
                                    {
                                        this.state = 694;
                                        this.match(FlinkSqlParser.KW_LOCAL);
                                    }
                                }
                                this.state = 697;
                                this.match(FlinkSqlParser.KW_TIME);
                                this.state = 698;
                                this.match(FlinkSqlParser.KW_ZONE);
                            }
                        }
                    }
                    break;
                case FlinkSqlParser.KW_DEC:
                case FlinkSqlParser.KW_DECIMAL:
                case FlinkSqlParser.KW_DOUBLE:
                case FlinkSqlParser.KW_FLOAT:
                case FlinkSqlParser.KW_NUMERIC:
                    this.enterOuterAlt(_localctx, 4);
                    {
                        this.state = 701;
                        _localctx._typeName = this._input.LT(1);
                        _la = this._input.LA(1);
                        if (!(((((_la - 101)) & ~0x1F) === 0 && ((1 << (_la - 101)) & ((1 << (FlinkSqlParser.KW_DEC - 101)) | (1 << (FlinkSqlParser.KW_DECIMAL - 101)) | (1 << (FlinkSqlParser.KW_DOUBLE - 101)))) !== 0) || _la === FlinkSqlParser.KW_FLOAT || _la === FlinkSqlParser.KW_NUMERIC)) {
                            _localctx._typeName = this._errHandler.recoverInline(this);
                        }
                        else {
                            if (this._input.LA(1) === Token.Token.EOF) {
                                this.matchedEOF = true;
                            }
                            this._errHandler.reportMatch(this);
                            this.consume();
                        }
                        this.state = 703;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === FlinkSqlParser.LR_BRACKET) {
                            {
                                this.state = 702;
                                this.lengthTwoOptionalDimension();
                            }
                        }
                    }
                    break;
                case FlinkSqlParser.KW_ARRAY:
                case FlinkSqlParser.KW_MULTISET:
                    this.enterOuterAlt(_localctx, 5);
                    {
                        this.state = 705;
                        _localctx._type = this._input.LT(1);
                        _la = this._input.LA(1);
                        if (!(_la === FlinkSqlParser.KW_ARRAY || _la === FlinkSqlParser.KW_MULTISET)) {
                            _localctx._type = this._errHandler.recoverInline(this);
                        }
                        else {
                            if (this._input.LA(1) === Token.Token.EOF) {
                                this.matchedEOF = true;
                            }
                            this._errHandler.reportMatch(this);
                            this.consume();
                        }
                        this.state = 707;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === FlinkSqlParser.LESS_SYMBOL) {
                            {
                                this.state = 706;
                                this.lengthOneTypeDimension();
                            }
                        }
                    }
                    break;
                case FlinkSqlParser.KW_MAP:
                    this.enterOuterAlt(_localctx, 6);
                    {
                        this.state = 709;
                        _localctx._type = this.match(FlinkSqlParser.KW_MAP);
                        this.state = 711;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === FlinkSqlParser.LESS_SYMBOL) {
                            {
                                this.state = 710;
                                this.mapTypeDimension();
                            }
                        }
                    }
                    break;
                case FlinkSqlParser.KW_ROW:
                    this.enterOuterAlt(_localctx, 7);
                    {
                        this.state = 713;
                        _localctx._type = this.match(FlinkSqlParser.KW_ROW);
                        this.state = 715;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === FlinkSqlParser.LESS_SYMBOL) {
                            {
                                this.state = 714;
                                this.rowTypeDimension();
                            }
                        }
                    }
                    break;
                case FlinkSqlParser.KW_RAW:
                    this.enterOuterAlt(_localctx, 8);
                    {
                        this.state = 717;
                        _localctx._type = this.match(FlinkSqlParser.KW_RAW);
                        this.state = 719;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === FlinkSqlParser.LR_BRACKET) {
                            {
                                this.state = 718;
                                this.lengthTwoStringDimension();
                            }
                        }
                    }
                    break;
                default:
                    throw new NoViableAltException.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    lengthOneDimension() {
        let _localctx = new LengthOneDimensionContext(this._ctx, this.state);
        this.enterRule(_localctx, 58, FlinkSqlParser.RULE_lengthOneDimension);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 723;
                this.match(FlinkSqlParser.LR_BRACKET);
                this.state = 724;
                this.decimalLiteral();
                this.state = 725;
                this.match(FlinkSqlParser.RR_BRACKET);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    lengthTwoOptionalDimension() {
        let _localctx = new LengthTwoOptionalDimensionContext(this._ctx, this.state);
        this.enterRule(_localctx, 60, FlinkSqlParser.RULE_lengthTwoOptionalDimension);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 727;
                this.match(FlinkSqlParser.LR_BRACKET);
                this.state = 728;
                this.decimalLiteral();
                this.state = 731;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === FlinkSqlParser.COMMA) {
                    {
                        this.state = 729;
                        this.match(FlinkSqlParser.COMMA);
                        this.state = 730;
                        this.decimalLiteral();
                    }
                }
                this.state = 733;
                this.match(FlinkSqlParser.RR_BRACKET);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    lengthTwoStringDimension() {
        let _localctx = new LengthTwoStringDimensionContext(this._ctx, this.state);
        this.enterRule(_localctx, 62, FlinkSqlParser.RULE_lengthTwoStringDimension);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 735;
                this.match(FlinkSqlParser.LR_BRACKET);
                this.state = 736;
                this.stringLiteral();
                this.state = 739;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === FlinkSqlParser.COMMA) {
                    {
                        this.state = 737;
                        this.match(FlinkSqlParser.COMMA);
                        this.state = 738;
                        this.stringLiteral();
                    }
                }
                this.state = 741;
                this.match(FlinkSqlParser.RR_BRACKET);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    lengthOneTypeDimension() {
        let _localctx = new LengthOneTypeDimensionContext(this._ctx, this.state);
        this.enterRule(_localctx, 64, FlinkSqlParser.RULE_lengthOneTypeDimension);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 743;
                this.match(FlinkSqlParser.LESS_SYMBOL);
                this.state = 744;
                this.columnType();
                this.state = 745;
                this.match(FlinkSqlParser.GREATER_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    mapTypeDimension() {
        let _localctx = new MapTypeDimensionContext(this._ctx, this.state);
        this.enterRule(_localctx, 66, FlinkSqlParser.RULE_mapTypeDimension);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 747;
                this.match(FlinkSqlParser.LESS_SYMBOL);
                this.state = 748;
                this.columnType();
                {
                    this.state = 749;
                    this.match(FlinkSqlParser.COMMA);
                    this.state = 750;
                    this.columnType();
                }
                this.state = 752;
                this.match(FlinkSqlParser.GREATER_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    rowTypeDimension() {
        let _localctx = new RowTypeDimensionContext(this._ctx, this.state);
        this.enterRule(_localctx, 68, FlinkSqlParser.RULE_rowTypeDimension);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 754;
                this.match(FlinkSqlParser.LESS_SYMBOL);
                this.state = 755;
                this.columnName();
                this.state = 756;
                this.columnType();
                this.state = 763;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === FlinkSqlParser.COMMA) {
                    {
                        {
                            this.state = 757;
                            this.match(FlinkSqlParser.COMMA);
                            this.state = 758;
                            this.columnName();
                            this.state = 759;
                            this.columnType();
                        }
                    }
                    this.state = 765;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 766;
                this.match(FlinkSqlParser.GREATER_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    columnConstraint() {
        let _localctx = new ColumnConstraintContext(this._ctx, this.state);
        this.enterRule(_localctx, 70, FlinkSqlParser.RULE_columnConstraint);
        let _la;
        try {
            this.state = 782;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case FlinkSqlParser.KW_CONSTRAINT:
                case FlinkSqlParser.KW_PRIMARY:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 770;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === FlinkSqlParser.KW_CONSTRAINT) {
                            {
                                this.state = 768;
                                this.match(FlinkSqlParser.KW_CONSTRAINT);
                                this.state = 769;
                                this.constraintName();
                            }
                        }
                        this.state = 772;
                        this.match(FlinkSqlParser.KW_PRIMARY);
                        this.state = 773;
                        this.match(FlinkSqlParser.KW_KEY);
                        this.state = 776;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === FlinkSqlParser.KW_NOT) {
                            {
                                this.state = 774;
                                this.match(FlinkSqlParser.KW_NOT);
                                this.state = 775;
                                this.match(FlinkSqlParser.KW_ENFORCED);
                            }
                        }
                    }
                    break;
                case FlinkSqlParser.KW_NOT:
                case FlinkSqlParser.KW_NULL:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 779;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === FlinkSqlParser.KW_NOT) {
                            {
                                this.state = 778;
                                this.match(FlinkSqlParser.KW_NOT);
                            }
                        }
                        this.state = 781;
                        this.match(FlinkSqlParser.KW_NULL);
                    }
                    break;
                default:
                    throw new NoViableAltException.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    commentSpec() {
        let _localctx = new CommentSpecContext(this._ctx, this.state);
        this.enterRule(_localctx, 72, FlinkSqlParser.RULE_commentSpec);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 784;
                this.match(FlinkSqlParser.KW_COMMENT);
                this.state = 785;
                this.match(FlinkSqlParser.STRING_LITERAL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    metadataColumnDefinition() {
        let _localctx = new MetadataColumnDefinitionContext(this._ctx, this.state);
        this.enterRule(_localctx, 74, FlinkSqlParser.RULE_metadataColumnDefinition);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 787;
                this.columnNameCreate();
                this.state = 788;
                this.columnType();
                this.state = 789;
                this.match(FlinkSqlParser.KW_METADATA);
                this.state = 792;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === FlinkSqlParser.KW_FROM) {
                    {
                        this.state = 790;
                        this.match(FlinkSqlParser.KW_FROM);
                        this.state = 791;
                        this.metadataKey();
                    }
                }
                this.state = 795;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === FlinkSqlParser.KW_VIRTUAL) {
                    {
                        this.state = 794;
                        this.match(FlinkSqlParser.KW_VIRTUAL);
                    }
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    metadataKey() {
        let _localctx = new MetadataKeyContext(this._ctx, this.state);
        this.enterRule(_localctx, 76, FlinkSqlParser.RULE_metadataKey);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 797;
                this.match(FlinkSqlParser.STRING_LITERAL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    computedColumnDefinition() {
        let _localctx = new ComputedColumnDefinitionContext(this._ctx, this.state);
        this.enterRule(_localctx, 78, FlinkSqlParser.RULE_computedColumnDefinition);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 799;
                this.columnNameCreate();
                this.state = 800;
                this.match(FlinkSqlParser.KW_AS);
                this.state = 801;
                this.computedColumnExpression();
                this.state = 803;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === FlinkSqlParser.KW_COMMENT) {
                    {
                        this.state = 802;
                        this.commentSpec();
                    }
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    computedColumnExpression() {
        let _localctx = new ComputedColumnExpressionContext(this._ctx, this.state);
        this.enterRule(_localctx, 80, FlinkSqlParser.RULE_computedColumnExpression);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 805;
                this.expression();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    watermarkDefinition() {
        let _localctx = new WatermarkDefinitionContext(this._ctx, this.state);
        this.enterRule(_localctx, 82, FlinkSqlParser.RULE_watermarkDefinition);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 807;
                this.match(FlinkSqlParser.KW_WATERMARK);
                this.state = 808;
                this.match(FlinkSqlParser.KW_FOR);
                this.state = 809;
                this.columnName();
                this.state = 810;
                this.match(FlinkSqlParser.KW_AS);
                this.state = 811;
                this.expression();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    tableConstraint() {
        let _localctx = new TableConstraintContext(this._ctx, this.state);
        this.enterRule(_localctx, 84, FlinkSqlParser.RULE_tableConstraint);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 815;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === FlinkSqlParser.KW_CONSTRAINT) {
                    {
                        this.state = 813;
                        this.match(FlinkSqlParser.KW_CONSTRAINT);
                        this.state = 814;
                        this.constraintName();
                    }
                }
                this.state = 817;
                this.match(FlinkSqlParser.KW_PRIMARY);
                this.state = 818;
                this.match(FlinkSqlParser.KW_KEY);
                this.state = 819;
                this.columnNameList();
                this.state = 820;
                this.match(FlinkSqlParser.KW_NOT);
                this.state = 821;
                this.match(FlinkSqlParser.KW_ENFORCED);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    constraintName() {
        let _localctx = new ConstraintNameContext(this._ctx, this.state);
        this.enterRule(_localctx, 86, FlinkSqlParser.RULE_constraintName);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 823;
                this.identifier();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    selfDefinitionClause() {
        let _localctx = new SelfDefinitionClauseContext(this._ctx, this.state);
        this.enterRule(_localctx, 88, FlinkSqlParser.RULE_selfDefinitionClause);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 825;
                this.match(FlinkSqlParser.KW_PERIOD);
                this.state = 826;
                this.match(FlinkSqlParser.KW_FOR);
                this.state = 827;
                this.match(FlinkSqlParser.KW_SYSTEM_TIME);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    partitionDefinition() {
        let _localctx = new PartitionDefinitionContext(this._ctx, this.state);
        this.enterRule(_localctx, 90, FlinkSqlParser.RULE_partitionDefinition);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 829;
                this.match(FlinkSqlParser.KW_PARTITIONED);
                this.state = 830;
                this.match(FlinkSqlParser.KW_BY);
                this.state = 831;
                this.transformList();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    transformList() {
        let _localctx = new TransformListContext(this._ctx, this.state);
        this.enterRule(_localctx, 92, FlinkSqlParser.RULE_transformList);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 833;
                this.match(FlinkSqlParser.LR_BRACKET);
                this.state = 834;
                this.transform();
                this.state = 839;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === FlinkSqlParser.COMMA) {
                    {
                        {
                            this.state = 835;
                            this.match(FlinkSqlParser.COMMA);
                            this.state = 836;
                            this.transform();
                        }
                    }
                    this.state = 841;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 842;
                this.match(FlinkSqlParser.RR_BRACKET);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    transform() {
        let _localctx = new TransformContext(this._ctx, this.state);
        this.enterRule(_localctx, 94, FlinkSqlParser.RULE_transform);
        let _la;
        try {
            this.state = 857;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 69, this._ctx)) {
                case 1:
                    _localctx = new IdentityTransformContext(_localctx);
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 844;
                        this.columnName();
                    }
                    break;
                case 2:
                    _localctx = new ColumnTransformContext(_localctx);
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 845;
                        this.qualifiedName();
                    }
                    break;
                case 3:
                    _localctx = new ApplyTransformContext(_localctx);
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 846;
                        this.match(FlinkSqlParser.LR_BRACKET);
                        this.state = 847;
                        this.transformArgument();
                        this.state = 852;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        while (_la === FlinkSqlParser.COMMA) {
                            {
                                {
                                    this.state = 848;
                                    this.match(FlinkSqlParser.COMMA);
                                    this.state = 849;
                                    this.transformArgument();
                                }
                            }
                            this.state = 854;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                        }
                        this.state = 855;
                        this.match(FlinkSqlParser.RR_BRACKET);
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    transformArgument() {
        let _localctx = new TransformArgumentContext(this._ctx, this.state);
        this.enterRule(_localctx, 96, FlinkSqlParser.RULE_transformArgument);
        try {
            this.state = 861;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 70, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 859;
                        this.qualifiedName();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 860;
                        this.constant();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    likeDefinition() {
        let _localctx = new LikeDefinitionContext(this._ctx, this.state);
        this.enterRule(_localctx, 98, FlinkSqlParser.RULE_likeDefinition);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 863;
                this.match(FlinkSqlParser.KW_LIKE);
                this.state = 864;
                this.tablePath();
                this.state = 873;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 72, this._ctx)) {
                    case 1:
                        {
                            this.state = 865;
                            this.match(FlinkSqlParser.LR_BRACKET);
                            this.state = 869;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            while (_la === FlinkSqlParser.KW_OVERWRITING || _la === FlinkSqlParser.KW_EXCLUDING || _la === FlinkSqlParser.KW_INCLUDING) {
                                {
                                    {
                                        this.state = 866;
                                        this.likeOption();
                                    }
                                }
                                this.state = 871;
                                this._errHandler.sync(this);
                                _la = this._input.LA(1);
                            }
                            this.state = 872;
                            this.match(FlinkSqlParser.RR_BRACKET);
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    likeOption() {
        let _localctx = new LikeOptionContext(this._ctx, this.state);
        this.enterRule(_localctx, 100, FlinkSqlParser.RULE_likeOption);
        let _la;
        try {
            this.state = 879;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 73, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        {
                            this.state = 875;
                            _la = this._input.LA(1);
                            if (!(_la === FlinkSqlParser.KW_EXCLUDING || _la === FlinkSqlParser.KW_INCLUDING)) {
                                this._errHandler.recoverInline(this);
                            }
                            else {
                                if (this._input.LA(1) === Token.Token.EOF) {
                                    this.matchedEOF = true;
                                }
                                this._errHandler.reportMatch(this);
                                this.consume();
                            }
                            this.state = 876;
                            _la = this._input.LA(1);
                            if (!(_la === FlinkSqlParser.KW_ALL || _la === FlinkSqlParser.KW_PARTITIONS || _la === FlinkSqlParser.KW_CONSTRAINTS)) {
                                this._errHandler.recoverInline(this);
                            }
                            else {
                                if (this._input.LA(1) === Token.Token.EOF) {
                                    this.matchedEOF = true;
                                }
                                this._errHandler.reportMatch(this);
                                this.consume();
                            }
                        }
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        {
                            this.state = 877;
                            _la = this._input.LA(1);
                            if (!(_la === FlinkSqlParser.KW_OVERWRITING || _la === FlinkSqlParser.KW_EXCLUDING || _la === FlinkSqlParser.KW_INCLUDING)) {
                                this._errHandler.recoverInline(this);
                            }
                            else {
                                if (this._input.LA(1) === Token.Token.EOF) {
                                    this.matchedEOF = true;
                                }
                                this._errHandler.reportMatch(this);
                                this.consume();
                            }
                            this.state = 878;
                            _la = this._input.LA(1);
                            if (!(_la === FlinkSqlParser.KW_WATERMARKS || _la === FlinkSqlParser.KW_GENERATED || _la === FlinkSqlParser.KW_OPTIONS)) {
                                this._errHandler.recoverInline(this);
                            }
                            else {
                                if (this._input.LA(1) === Token.Token.EOF) {
                                    this.matchedEOF = true;
                                }
                                this._errHandler.reportMatch(this);
                                this.consume();
                            }
                        }
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    createCatalog() {
        let _localctx = new CreateCatalogContext(this._ctx, this.state);
        this.enterRule(_localctx, 102, FlinkSqlParser.RULE_createCatalog);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 881;
                this.match(FlinkSqlParser.KW_CREATE);
                this.state = 882;
                this.match(FlinkSqlParser.KW_CATALOG);
                this.state = 883;
                this.catalogPathCreate();
                this.state = 884;
                this.withOption();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    createDatabase() {
        let _localctx = new CreateDatabaseContext(this._ctx, this.state);
        this.enterRule(_localctx, 104, FlinkSqlParser.RULE_createDatabase);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 886;
                this.match(FlinkSqlParser.KW_CREATE);
                this.state = 887;
                this.match(FlinkSqlParser.KW_DATABASE);
                this.state = 889;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === FlinkSqlParser.KW_IF) {
                    {
                        this.state = 888;
                        this.ifNotExists();
                    }
                }
                this.state = 891;
                this.databasePathCreate();
                this.state = 893;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === FlinkSqlParser.KW_COMMENT) {
                    {
                        this.state = 892;
                        this.commentSpec();
                    }
                }
                this.state = 895;
                this.withOption();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    createView() {
        let _localctx = new CreateViewContext(this._ctx, this.state);
        this.enterRule(_localctx, 106, FlinkSqlParser.RULE_createView);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 897;
                this.match(FlinkSqlParser.KW_CREATE);
                this.state = 899;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === FlinkSqlParser.KW_TEMPORARY) {
                    {
                        this.state = 898;
                        this.match(FlinkSqlParser.KW_TEMPORARY);
                    }
                }
                this.state = 901;
                this.match(FlinkSqlParser.KW_VIEW);
                this.state = 903;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === FlinkSqlParser.KW_IF) {
                    {
                        this.state = 902;
                        this.ifNotExists();
                    }
                }
                this.state = 905;
                this.viewPathCreate();
                this.state = 907;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === FlinkSqlParser.LR_BRACKET) {
                    {
                        this.state = 906;
                        this.columnNameList();
                    }
                }
                this.state = 910;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === FlinkSqlParser.KW_COMMENT) {
                    {
                        this.state = 909;
                        this.commentSpec();
                    }
                }
                this.state = 912;
                this.match(FlinkSqlParser.KW_AS);
                this.state = 913;
                this.queryStatement(0);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    createFunction() {
        let _localctx = new CreateFunctionContext(this._ctx, this.state);
        this.enterRule(_localctx, 108, FlinkSqlParser.RULE_createFunction);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 915;
                this.match(FlinkSqlParser.KW_CREATE);
                this.state = 919;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 80, this._ctx)) {
                    case 1:
                        {
                            this.state = 916;
                            this.match(FlinkSqlParser.KW_TEMPORARY);
                        }
                        break;
                    case 2:
                        {
                            this.state = 917;
                            this.match(FlinkSqlParser.KW_TEMPORARY);
                            this.state = 918;
                            this.match(FlinkSqlParser.KW_SYSTEM);
                        }
                        break;
                }
                this.state = 921;
                this.match(FlinkSqlParser.KW_FUNCTION);
                this.state = 923;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === FlinkSqlParser.KW_IF) {
                    {
                        this.state = 922;
                        this.ifNotExists();
                    }
                }
                this.state = 925;
                this.functionNameCreate();
                this.state = 926;
                this.match(FlinkSqlParser.KW_AS);
                this.state = 927;
                this.identifier();
                this.state = 930;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === FlinkSqlParser.KW_LANGUAGE) {
                    {
                        this.state = 928;
                        this.match(FlinkSqlParser.KW_LANGUAGE);
                        this.state = 929;
                        _la = this._input.LA(1);
                        if (!(_la === FlinkSqlParser.KW_SCALA || _la === FlinkSqlParser.KW_JAVA || _la === FlinkSqlParser.KW_PYTHON)) {
                            this._errHandler.recoverInline(this);
                        }
                        else {
                            if (this._input.LA(1) === Token.Token.EOF) {
                                this.matchedEOF = true;
                            }
                            this._errHandler.reportMatch(this);
                            this.consume();
                        }
                    }
                }
                this.state = 933;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === FlinkSqlParser.KW_USING) {
                    {
                        this.state = 932;
                        this.usingClause();
                    }
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    usingClause() {
        let _localctx = new UsingClauseContext(this._ctx, this.state);
        this.enterRule(_localctx, 110, FlinkSqlParser.RULE_usingClause);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 935;
                this.match(FlinkSqlParser.KW_USING);
                this.state = 936;
                this.match(FlinkSqlParser.KW_JAR);
                this.state = 937;
                this.jarFileName();
                this.state = 943;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === FlinkSqlParser.COMMA) {
                    {
                        {
                            this.state = 938;
                            this.match(FlinkSqlParser.COMMA);
                            this.state = 939;
                            this.match(FlinkSqlParser.KW_JAR);
                            this.state = 940;
                            this.jarFileName();
                        }
                    }
                    this.state = 945;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    jarFileName() {
        let _localctx = new JarFileNameContext(this._ctx, this.state);
        this.enterRule(_localctx, 112, FlinkSqlParser.RULE_jarFileName);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 946;
                this.match(FlinkSqlParser.STRING_LITERAL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    alterTable() {
        let _localctx = new AlterTableContext(this._ctx, this.state);
        this.enterRule(_localctx, 114, FlinkSqlParser.RULE_alterTable);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 948;
                this.match(FlinkSqlParser.KW_ALTER);
                this.state = 949;
                this.match(FlinkSqlParser.KW_TABLE);
                this.state = 951;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === FlinkSqlParser.KW_IF) {
                    {
                        this.state = 950;
                        this.ifExists();
                    }
                }
                this.state = 953;
                this.tablePath();
                this.state = 959;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 86, this._ctx)) {
                    case 1:
                        {
                            this.state = 954;
                            this.renameDefinition();
                        }
                        break;
                    case 2:
                        {
                            this.state = 955;
                            this.setKeyValueDefinition();
                        }
                        break;
                    case 3:
                        {
                            this.state = 956;
                            this.addConstraint();
                        }
                        break;
                    case 4:
                        {
                            this.state = 957;
                            this.dropConstraint();
                        }
                        break;
                    case 5:
                        {
                            this.state = 958;
                            this.addUnique();
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    renameDefinition() {
        let _localctx = new RenameDefinitionContext(this._ctx, this.state);
        this.enterRule(_localctx, 116, FlinkSqlParser.RULE_renameDefinition);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 961;
                this.match(FlinkSqlParser.KW_RENAME);
                this.state = 963;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (((((_la - 437)) & ~0x1F) === 0 && ((1 << (_la - 437)) & ((1 << (FlinkSqlParser.KW_ADD - 437)) | (1 << (FlinkSqlParser.KW_AFTER - 437)) | (1 << (FlinkSqlParser.KW_ASC - 437)) | (1 << (FlinkSqlParser.KW_CASCADE - 437)) | (1 << (FlinkSqlParser.KW_CATALOG - 437)) | (1 << (FlinkSqlParser.KW_CENTURY - 437)) | (1 << (FlinkSqlParser.KW_CONFIG - 437)) | (1 << (FlinkSqlParser.KW_CONSTRAINTS - 437)) | (1 << (FlinkSqlParser.KW_CUMULATE - 437)) | (1 << (FlinkSqlParser.KW_DATA - 437)) | (1 << (FlinkSqlParser.KW_DATABASE - 437)) | (1 << (FlinkSqlParser.KW_DAYS - 437)) | (1 << (FlinkSqlParser.KW_DECADE - 437)) | (1 << (FlinkSqlParser.KW_DESC - 437)) | (1 << (FlinkSqlParser.KW_DESCRIPTOR - 437)) | (1 << (FlinkSqlParser.KW_DIV - 437)) | (1 << (FlinkSqlParser.KW_ENGINE - 437)) | (1 << (FlinkSqlParser.KW_EPOCH - 437)) | (1 << (FlinkSqlParser.KW_EXCLUDING - 437)) | (1 << (FlinkSqlParser.KW_FILE - 437)) | (1 << (FlinkSqlParser.KW_FIRST - 437)) | (1 << (FlinkSqlParser.KW_GENERATED - 437)) | (1 << (FlinkSqlParser.KW_HOP - 437)) | (1 << (FlinkSqlParser.KW_HOURS - 437)) | (1 << (FlinkSqlParser.KW_IGNORE - 437)) | (1 << (FlinkSqlParser.KW_INCLUDING - 437)) | (1 << (FlinkSqlParser.KW_JAR - 437)) | (1 << (FlinkSqlParser.KW_JARS - 437)) | (1 << (FlinkSqlParser.KW_JAVA - 437)) | (1 << (FlinkSqlParser.KW_KEY - 437)) | (1 << (FlinkSqlParser.KW_LAST - 437)) | (1 << (FlinkSqlParser.KW_LOAD - 437)))) !== 0) || ((((_la - 469)) & ~0x1F) === 0 && ((1 << (_la - 469)) & ((1 << (FlinkSqlParser.KW_MAP - 469)) | (1 << (FlinkSqlParser.KW_MICROSECOND - 469)) | (1 << (FlinkSqlParser.KW_MILLENNIUM - 469)) | (1 << (FlinkSqlParser.KW_MILLISECOND - 469)) | (1 << (FlinkSqlParser.KW_MINUTES - 469)) | (1 << (FlinkSqlParser.KW_MONTHS - 469)) | (1 << (FlinkSqlParser.KW_NANOSECOND - 469)) | (1 << (FlinkSqlParser.KW_NULLS - 469)) | (1 << (FlinkSqlParser.KW_OPTIONS - 469)) | (1 << (FlinkSqlParser.KW_PAST - 469)) | (1 << (FlinkSqlParser.KW_PLAN - 469)) | (1 << (FlinkSqlParser.KW_PRECEDING - 469)) | (1 << (FlinkSqlParser.KW_PYTHON - 469)) | (1 << (FlinkSqlParser.KW_PYTHON_ARCHIVES - 469)) | (1 << (FlinkSqlParser.KW_PYTHON_DEPENDENCIES - 469)) | (1 << (FlinkSqlParser.KW_PYTHON_FILES - 469)) | (1 << (FlinkSqlParser.KW_PYTHON_JAR - 469)) | (1 << (FlinkSqlParser.KW_PYTHON_PARAMETER - 469)) | (1 << (FlinkSqlParser.KW_PYTHON_REQUIREMENTS - 469)) | (1 << (FlinkSqlParser.KW_QUARTER - 469)) | (1 << (FlinkSqlParser.KW_REMOVE - 469)) | (1 << (FlinkSqlParser.KW_RESTRICT - 469)) | (1 << (FlinkSqlParser.KW_SECONDS - 469)) | (1 << (FlinkSqlParser.KW_SESSION - 469)) | (1 << (FlinkSqlParser.KW_SETS - 469)) | (1 << (FlinkSqlParser.KW_SIZE - 469)) | (1 << (FlinkSqlParser.KW_SLIDE - 469)) | (1 << (FlinkSqlParser.KW_STEP - 469)) | (1 << (FlinkSqlParser.KW_TEMPORARY - 469)) | (1 << (FlinkSqlParser.KW_TIMECOL - 469)) | (1 << (FlinkSqlParser.KW_TUMBLE - 469)) | (1 << (FlinkSqlParser.KW_UNLOAD - 469)))) !== 0) || ((((_la - 501)) & ~0x1F) === 0 && ((1 << (_la - 501)) & ((1 << (FlinkSqlParser.KW_VIEW - 501)) | (1 << (FlinkSqlParser.KW_WEEK - 501)) | (1 << (FlinkSqlParser.KW_YEARS - 501)) | (1 << (FlinkSqlParser.KW_ZONE - 501)))) !== 0) || ((((_la - 537)) & ~0x1F) === 0 && ((1 << (_la - 537)) & ((1 << (FlinkSqlParser.STRING_LITERAL - 537)) | (1 << (FlinkSqlParser.DIG_LITERAL - 537)) | (1 << (FlinkSqlParser.ID_LITERAL - 537)))) !== 0)) {
                    {
                        this.state = 962;
                        this.uid();
                    }
                }
                this.state = 965;
                this.match(FlinkSqlParser.KW_TO);
                this.state = 966;
                this.uid();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    setKeyValueDefinition() {
        let _localctx = new SetKeyValueDefinitionContext(this._ctx, this.state);
        this.enterRule(_localctx, 118, FlinkSqlParser.RULE_setKeyValueDefinition);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 968;
                this.match(FlinkSqlParser.KW_SET);
                this.state = 969;
                this.tablePropertyList();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    addConstraint() {
        let _localctx = new AddConstraintContext(this._ctx, this.state);
        this.enterRule(_localctx, 120, FlinkSqlParser.RULE_addConstraint);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 971;
                this.match(FlinkSqlParser.KW_ADD);
                this.state = 972;
                this.match(FlinkSqlParser.KW_CONSTRAINT);
                this.state = 973;
                this.constraintName();
                this.state = 974;
                this.match(FlinkSqlParser.KW_PRIMARY);
                this.state = 975;
                this.match(FlinkSqlParser.KW_KEY);
                this.state = 976;
                this.columnNameList();
                this.state = 978;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === FlinkSqlParser.KW_NOT) {
                    {
                        this.state = 977;
                        this.notForced();
                    }
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    dropConstraint() {
        let _localctx = new DropConstraintContext(this._ctx, this.state);
        this.enterRule(_localctx, 122, FlinkSqlParser.RULE_dropConstraint);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 980;
                this.match(FlinkSqlParser.KW_DROP);
                this.state = 981;
                this.match(FlinkSqlParser.KW_CONSTRAINT);
                this.state = 982;
                this.constraintName();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    addUnique() {
        let _localctx = new AddUniqueContext(this._ctx, this.state);
        this.enterRule(_localctx, 124, FlinkSqlParser.RULE_addUnique);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 984;
                this.match(FlinkSqlParser.KW_ADD);
                this.state = 985;
                this.match(FlinkSqlParser.KW_UNIQUE);
                this.state = 986;
                this.columnNameList();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    notForced() {
        let _localctx = new NotForcedContext(this._ctx, this.state);
        this.enterRule(_localctx, 126, FlinkSqlParser.RULE_notForced);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 988;
                this.match(FlinkSqlParser.KW_NOT);
                this.state = 989;
                this.match(FlinkSqlParser.KW_ENFORCED);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    alertView() {
        let _localctx = new AlertViewContext(this._ctx, this.state);
        this.enterRule(_localctx, 128, FlinkSqlParser.RULE_alertView);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 991;
                this.match(FlinkSqlParser.KW_ALTER);
                this.state = 992;
                this.match(FlinkSqlParser.KW_VIEW);
                this.state = 993;
                this.viewPath();
                this.state = 997;
                this._errHandler.sync(this);
                switch (this._input.LA(1)) {
                    case FlinkSqlParser.KW_RENAME:
                        {
                            this.state = 994;
                            this.renameDefinition();
                        }
                        break;
                    case FlinkSqlParser.KW_AS:
                        {
                            this.state = 995;
                            this.match(FlinkSqlParser.KW_AS);
                            this.state = 996;
                            this.queryStatement(0);
                        }
                        break;
                    default:
                        throw new NoViableAltException.NoViableAltException(this);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    alterDatabase() {
        let _localctx = new AlterDatabaseContext(this._ctx, this.state);
        this.enterRule(_localctx, 130, FlinkSqlParser.RULE_alterDatabase);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 999;
                this.match(FlinkSqlParser.KW_ALTER);
                this.state = 1000;
                this.match(FlinkSqlParser.KW_DATABASE);
                this.state = 1001;
                this.databasePath();
                this.state = 1002;
                this.setKeyValueDefinition();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    alterFunction() {
        let _localctx = new AlterFunctionContext(this._ctx, this.state);
        this.enterRule(_localctx, 132, FlinkSqlParser.RULE_alterFunction);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1004;
                this.match(FlinkSqlParser.KW_ALTER);
                this.state = 1008;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 90, this._ctx)) {
                    case 1:
                        {
                            this.state = 1005;
                            this.match(FlinkSqlParser.KW_TEMPORARY);
                        }
                        break;
                    case 2:
                        {
                            this.state = 1006;
                            this.match(FlinkSqlParser.KW_TEMPORARY);
                            this.state = 1007;
                            this.match(FlinkSqlParser.KW_SYSTEM);
                        }
                        break;
                }
                this.state = 1010;
                this.match(FlinkSqlParser.KW_FUNCTION);
                this.state = 1012;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 91, this._ctx)) {
                    case 1:
                        {
                            this.state = 1011;
                            this.ifExists();
                        }
                        break;
                }
                this.state = 1014;
                this.functionName();
                this.state = 1015;
                this.match(FlinkSqlParser.KW_AS);
                this.state = 1016;
                this.identifier();
                this.state = 1019;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === FlinkSqlParser.KW_LANGUAGE) {
                    {
                        this.state = 1017;
                        this.match(FlinkSqlParser.KW_LANGUAGE);
                        this.state = 1018;
                        _la = this._input.LA(1);
                        if (!(_la === FlinkSqlParser.KW_SCALA || _la === FlinkSqlParser.KW_JAVA || _la === FlinkSqlParser.KW_PYTHON)) {
                            this._errHandler.recoverInline(this);
                        }
                        else {
                            if (this._input.LA(1) === Token.Token.EOF) {
                                this.matchedEOF = true;
                            }
                            this._errHandler.reportMatch(this);
                            this.consume();
                        }
                    }
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    dropCatalog() {
        let _localctx = new DropCatalogContext(this._ctx, this.state);
        this.enterRule(_localctx, 134, FlinkSqlParser.RULE_dropCatalog);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1021;
                this.match(FlinkSqlParser.KW_DROP);
                this.state = 1022;
                this.match(FlinkSqlParser.KW_CATALOG);
                this.state = 1024;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === FlinkSqlParser.KW_IF) {
                    {
                        this.state = 1023;
                        this.ifExists();
                    }
                }
                this.state = 1026;
                this.catalogPath();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    dropTable() {
        let _localctx = new DropTableContext(this._ctx, this.state);
        this.enterRule(_localctx, 136, FlinkSqlParser.RULE_dropTable);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1028;
                this.match(FlinkSqlParser.KW_DROP);
                this.state = 1030;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === FlinkSqlParser.KW_TEMPORARY) {
                    {
                        this.state = 1029;
                        this.match(FlinkSqlParser.KW_TEMPORARY);
                    }
                }
                this.state = 1032;
                this.match(FlinkSqlParser.KW_TABLE);
                this.state = 1034;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === FlinkSqlParser.KW_IF) {
                    {
                        this.state = 1033;
                        this.ifExists();
                    }
                }
                this.state = 1036;
                this.tablePath();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    dropDatabase() {
        let _localctx = new DropDatabaseContext(this._ctx, this.state);
        this.enterRule(_localctx, 138, FlinkSqlParser.RULE_dropDatabase);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1038;
                this.match(FlinkSqlParser.KW_DROP);
                this.state = 1039;
                this.match(FlinkSqlParser.KW_DATABASE);
                this.state = 1041;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === FlinkSqlParser.KW_IF) {
                    {
                        this.state = 1040;
                        this.ifExists();
                    }
                }
                this.state = 1043;
                this.databasePath();
                this.state = 1045;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === FlinkSqlParser.KW_CASCADE || _la === FlinkSqlParser.KW_RESTRICT) {
                    {
                        this.state = 1044;
                        _localctx._dropType = this._input.LT(1);
                        _la = this._input.LA(1);
                        if (!(_la === FlinkSqlParser.KW_CASCADE || _la === FlinkSqlParser.KW_RESTRICT)) {
                            _localctx._dropType = this._errHandler.recoverInline(this);
                        }
                        else {
                            if (this._input.LA(1) === Token.Token.EOF) {
                                this.matchedEOF = true;
                            }
                            this._errHandler.reportMatch(this);
                            this.consume();
                        }
                    }
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    dropView() {
        let _localctx = new DropViewContext(this._ctx, this.state);
        this.enterRule(_localctx, 140, FlinkSqlParser.RULE_dropView);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1047;
                this.match(FlinkSqlParser.KW_DROP);
                this.state = 1049;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === FlinkSqlParser.KW_TEMPORARY) {
                    {
                        this.state = 1048;
                        this.match(FlinkSqlParser.KW_TEMPORARY);
                    }
                }
                this.state = 1051;
                this.match(FlinkSqlParser.KW_VIEW);
                this.state = 1053;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === FlinkSqlParser.KW_IF) {
                    {
                        this.state = 1052;
                        this.ifExists();
                    }
                }
                this.state = 1055;
                this.viewPath();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    dropFunction() {
        let _localctx = new DropFunctionContext(this._ctx, this.state);
        this.enterRule(_localctx, 142, FlinkSqlParser.RULE_dropFunction);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1057;
                this.match(FlinkSqlParser.KW_DROP);
                this.state = 1061;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 100, this._ctx)) {
                    case 1:
                        {
                            this.state = 1058;
                            this.match(FlinkSqlParser.KW_TEMPORARY);
                        }
                        break;
                    case 2:
                        {
                            this.state = 1059;
                            this.match(FlinkSqlParser.KW_TEMPORARY);
                            this.state = 1060;
                            this.match(FlinkSqlParser.KW_SYSTEM);
                        }
                        break;
                }
                this.state = 1063;
                this.match(FlinkSqlParser.KW_FUNCTION);
                this.state = 1065;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 101, this._ctx)) {
                    case 1:
                        {
                            this.state = 1064;
                            this.ifExists();
                        }
                        break;
                }
                this.state = 1067;
                this.functionName();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    insertStatement() {
        let _localctx = new InsertStatementContext(this._ctx, this.state);
        this.enterRule(_localctx, 144, FlinkSqlParser.RULE_insertStatement);
        let _la;
        try {
            this.state = 1076;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 103, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        {
                            this.state = 1070;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            if (_la === FlinkSqlParser.KW_EXECUTE) {
                                {
                                    this.state = 1069;
                                    this.match(FlinkSqlParser.KW_EXECUTE);
                                }
                            }
                            this.state = 1072;
                            this.insertSimpleStatement();
                        }
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 1073;
                        this.insertMulStatementCompatibility();
                    }
                    break;
                case 3:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        {
                            this.state = 1074;
                            this.match(FlinkSqlParser.KW_EXECUTE);
                            this.state = 1075;
                            this.insertMulStatement();
                        }
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    insertSimpleStatement() {
        let _localctx = new InsertSimpleStatementContext(this._ctx, this.state);
        this.enterRule(_localctx, 146, FlinkSqlParser.RULE_insertSimpleStatement);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1078;
                this.match(FlinkSqlParser.KW_INSERT);
                this.state = 1079;
                _la = this._input.LA(1);
                if (!(_la === FlinkSqlParser.KW_INTO || _la === FlinkSqlParser.KW_OVERWRITE)) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token.Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 1080;
                this.tablePath();
                this.state = 1089;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 106, this._ctx)) {
                    case 1:
                        {
                            this.state = 1082;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            if (_la === FlinkSqlParser.KW_PARTITION) {
                                {
                                    this.state = 1081;
                                    this.insertPartitionDefinition();
                                }
                            }
                            this.state = 1085;
                            this._errHandler.sync(this);
                            switch (this.interpreter.adaptivePredict(this._input, 105, this._ctx)) {
                                case 1:
                                    {
                                        this.state = 1084;
                                        this.columnNameList();
                                    }
                                    break;
                            }
                            this.state = 1087;
                            this.queryStatement(0);
                        }
                        break;
                    case 2:
                        {
                            this.state = 1088;
                            this.valuesDefinition();
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    insertPartitionDefinition() {
        let _localctx = new InsertPartitionDefinitionContext(this._ctx, this.state);
        this.enterRule(_localctx, 148, FlinkSqlParser.RULE_insertPartitionDefinition);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1091;
                this.match(FlinkSqlParser.KW_PARTITION);
                this.state = 1092;
                this.tablePropertyList();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    valuesDefinition() {
        let _localctx = new ValuesDefinitionContext(this._ctx, this.state);
        this.enterRule(_localctx, 150, FlinkSqlParser.RULE_valuesDefinition);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1094;
                this.match(FlinkSqlParser.KW_VALUES);
                this.state = 1095;
                this.valuesRowDefinition();
                this.state = 1100;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === FlinkSqlParser.COMMA) {
                    {
                        {
                            this.state = 1096;
                            this.match(FlinkSqlParser.COMMA);
                            this.state = 1097;
                            this.valuesRowDefinition();
                        }
                    }
                    this.state = 1102;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    valuesRowDefinition() {
        let _localctx = new ValuesRowDefinitionContext(this._ctx, this.state);
        this.enterRule(_localctx, 152, FlinkSqlParser.RULE_valuesRowDefinition);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1103;
                this.match(FlinkSqlParser.LR_BRACKET);
                this.state = 1104;
                this.constant();
                this.state = 1109;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === FlinkSqlParser.COMMA) {
                    {
                        {
                            this.state = 1105;
                            this.match(FlinkSqlParser.COMMA);
                            this.state = 1106;
                            this.constant();
                        }
                    }
                    this.state = 1111;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 1112;
                this.match(FlinkSqlParser.RR_BRACKET);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    insertMulStatementCompatibility() {
        let _localctx = new InsertMulStatementCompatibilityContext(this._ctx, this.state);
        this.enterRule(_localctx, 154, FlinkSqlParser.RULE_insertMulStatementCompatibility);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1114;
                this.match(FlinkSqlParser.KW_BEGIN);
                this.state = 1115;
                this.match(FlinkSqlParser.KW_STATEMENT);
                this.state = 1116;
                this.match(FlinkSqlParser.KW_SET);
                this.state = 1117;
                this.match(FlinkSqlParser.SEMICOLON);
                this.state = 1121;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                do {
                    {
                        {
                            this.state = 1118;
                            this.insertSimpleStatement();
                            this.state = 1119;
                            this.match(FlinkSqlParser.SEMICOLON);
                        }
                    }
                    this.state = 1123;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                } while (_la === FlinkSqlParser.KW_INSERT);
                this.state = 1125;
                this.match(FlinkSqlParser.KW_END);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    insertMulStatement() {
        let _localctx = new InsertMulStatementContext(this._ctx, this.state);
        this.enterRule(_localctx, 156, FlinkSqlParser.RULE_insertMulStatement);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1127;
                this.match(FlinkSqlParser.KW_STATEMENT);
                this.state = 1128;
                this.match(FlinkSqlParser.KW_SET);
                this.state = 1129;
                this.match(FlinkSqlParser.KW_BEGIN);
                this.state = 1133;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                do {
                    {
                        {
                            this.state = 1130;
                            this.insertSimpleStatement();
                            this.state = 1131;
                            this.match(FlinkSqlParser.SEMICOLON);
                        }
                    }
                    this.state = 1135;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                } while (_la === FlinkSqlParser.KW_INSERT);
                this.state = 1137;
                this.match(FlinkSqlParser.KW_END);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    queryStatement(_p) {
        if (_p === undefined) {
            _p = 0;
        }
        let _parentctx = this._ctx;
        let _parentState = this.state;
        let _localctx = new QueryStatementContext(this._ctx, _parentState);
        let _prevctx = _localctx;
        let _startState = 158;
        this.enterRecursionRule(_localctx, 158, FlinkSqlParser.RULE_queryStatement, _p);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1162;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 115, this._ctx)) {
                    case 1:
                        {
                            this.state = 1140;
                            this.valuesCaluse();
                        }
                        break;
                    case 2:
                        {
                            this.state = 1141;
                            this.withClause();
                            this.state = 1142;
                            this.queryStatement(5);
                        }
                        break;
                    case 3:
                        {
                            this.state = 1144;
                            this.match(FlinkSqlParser.LR_BRACKET);
                            this.state = 1145;
                            this.queryStatement(0);
                            this.state = 1146;
                            this.match(FlinkSqlParser.RR_BRACKET);
                        }
                        break;
                    case 4:
                        {
                            this.state = 1148;
                            this.selectClause();
                            this.state = 1150;
                            this._errHandler.sync(this);
                            switch (this.interpreter.adaptivePredict(this._input, 111, this._ctx)) {
                                case 1:
                                    {
                                        this.state = 1149;
                                        this.orderByCaluse();
                                    }
                                    break;
                            }
                            this.state = 1153;
                            this._errHandler.sync(this);
                            switch (this.interpreter.adaptivePredict(this._input, 112, this._ctx)) {
                                case 1:
                                    {
                                        this.state = 1152;
                                        this.limitClause();
                                    }
                                    break;
                            }
                        }
                        break;
                    case 5:
                        {
                            this.state = 1155;
                            this.selectStatement();
                            this.state = 1157;
                            this._errHandler.sync(this);
                            switch (this.interpreter.adaptivePredict(this._input, 113, this._ctx)) {
                                case 1:
                                    {
                                        this.state = 1156;
                                        this.orderByCaluse();
                                    }
                                    break;
                            }
                            this.state = 1160;
                            this._errHandler.sync(this);
                            switch (this.interpreter.adaptivePredict(this._input, 114, this._ctx)) {
                                case 1:
                                    {
                                        this.state = 1159;
                                        this.limitClause();
                                    }
                                    break;
                            }
                        }
                        break;
                }
                this._ctx._stop = this._input.tryLT(-1);
                this.state = 1178;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 119, this._ctx);
                while (_alt !== 2 && _alt !== ATN.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        if (this._parseListeners != null) {
                            this.triggerExitRuleEvent();
                        }
                        _prevctx = _localctx;
                        {
                            {
                                _localctx = new QueryStatementContext(_parentctx, _parentState);
                                _localctx._left = _prevctx;
                                this.pushNewRecursionContext(_localctx, _startState, FlinkSqlParser.RULE_queryStatement);
                                this.state = 1164;
                                if (!(this.precpred(this._ctx, 3))) {
                                    throw this.createFailedPredicateException("this.precpred(this._ctx, 3)");
                                }
                                this.state = 1165;
                                _localctx._operator = this._input.LT(1);
                                _la = this._input.LA(1);
                                if (!(_la === FlinkSqlParser.KW_EXCEPT || _la === FlinkSqlParser.KW_INTERSECT || _la === FlinkSqlParser.KW_UNION)) {
                                    _localctx._operator = this._errHandler.recoverInline(this);
                                }
                                else {
                                    if (this._input.LA(1) === Token.Token.EOF) {
                                        this.matchedEOF = true;
                                    }
                                    this._errHandler.reportMatch(this);
                                    this.consume();
                                }
                                this.state = 1167;
                                this._errHandler.sync(this);
                                _la = this._input.LA(1);
                                if (_la === FlinkSqlParser.KW_ALL) {
                                    {
                                        this.state = 1166;
                                        this.match(FlinkSqlParser.KW_ALL);
                                    }
                                }
                                this.state = 1169;
                                _localctx._right = this.queryStatement(0);
                                this.state = 1171;
                                this._errHandler.sync(this);
                                switch (this.interpreter.adaptivePredict(this._input, 117, this._ctx)) {
                                    case 1:
                                        {
                                            this.state = 1170;
                                            this.orderByCaluse();
                                        }
                                        break;
                                }
                                this.state = 1174;
                                this._errHandler.sync(this);
                                switch (this.interpreter.adaptivePredict(this._input, 118, this._ctx)) {
                                    case 1:
                                        {
                                            this.state = 1173;
                                            this.limitClause();
                                        }
                                        break;
                                }
                            }
                        }
                    }
                    this.state = 1180;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 119, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.unrollRecursionContexts(_parentctx);
        }
        return _localctx;
    }
    // @RuleVersion(0)
    valuesCaluse() {
        let _localctx = new ValuesCaluseContext(this._ctx, this.state);
        this.enterRule(_localctx, 160, FlinkSqlParser.RULE_valuesCaluse);
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1181;
                this.match(FlinkSqlParser.KW_VALUES);
                this.state = 1182;
                this.expression();
                this.state = 1187;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 120, this._ctx);
                while (_alt !== 2 && _alt !== ATN.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 1183;
                                this.match(FlinkSqlParser.COMMA);
                                this.state = 1184;
                                this.expression();
                            }
                        }
                    }
                    this.state = 1189;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 120, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    withClause() {
        let _localctx = new WithClauseContext(this._ctx, this.state);
        this.enterRule(_localctx, 162, FlinkSqlParser.RULE_withClause);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1190;
                this.match(FlinkSqlParser.KW_WITH);
                this.state = 1191;
                this.withItem();
                this.state = 1196;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === FlinkSqlParser.COMMA) {
                    {
                        {
                            this.state = 1192;
                            this.match(FlinkSqlParser.COMMA);
                            this.state = 1193;
                            this.withItem();
                        }
                    }
                    this.state = 1198;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    withItem() {
        let _localctx = new WithItemContext(this._ctx, this.state);
        this.enterRule(_localctx, 164, FlinkSqlParser.RULE_withItem);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1199;
                this.withItemName();
                this.state = 1211;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === FlinkSqlParser.LR_BRACKET) {
                    {
                        this.state = 1200;
                        this.match(FlinkSqlParser.LR_BRACKET);
                        this.state = 1201;
                        this.columnName();
                        this.state = 1206;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        while (_la === FlinkSqlParser.COMMA) {
                            {
                                {
                                    this.state = 1202;
                                    this.match(FlinkSqlParser.COMMA);
                                    this.state = 1203;
                                    this.columnName();
                                }
                            }
                            this.state = 1208;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                        }
                        this.state = 1209;
                        this.match(FlinkSqlParser.RR_BRACKET);
                    }
                }
                this.state = 1213;
                this.match(FlinkSqlParser.KW_AS);
                this.state = 1214;
                this.match(FlinkSqlParser.LR_BRACKET);
                this.state = 1215;
                this.queryStatement(0);
                this.state = 1216;
                this.match(FlinkSqlParser.RR_BRACKET);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    withItemName() {
        let _localctx = new WithItemNameContext(this._ctx, this.state);
        this.enterRule(_localctx, 166, FlinkSqlParser.RULE_withItemName);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1218;
                this.identifier();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    selectStatement() {
        let _localctx = new SelectStatementContext(this._ctx, this.state);
        this.enterRule(_localctx, 168, FlinkSqlParser.RULE_selectStatement);
        try {
            this.state = 1240;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 129, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 1220;
                        this.selectClause();
                        this.state = 1222;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 124, this._ctx)) {
                            case 1:
                                {
                                    this.state = 1221;
                                    this.fromClause();
                                }
                                break;
                        }
                        this.state = 1225;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 125, this._ctx)) {
                            case 1:
                                {
                                    this.state = 1224;
                                    this.whereClause();
                                }
                                break;
                        }
                        this.state = 1228;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 126, this._ctx)) {
                            case 1:
                                {
                                    this.state = 1227;
                                    this.groupByClause();
                                }
                                break;
                        }
                        this.state = 1231;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 127, this._ctx)) {
                            case 1:
                                {
                                    this.state = 1230;
                                    this.havingClause();
                                }
                                break;
                        }
                        this.state = 1234;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 128, this._ctx)) {
                            case 1:
                                {
                                    this.state = 1233;
                                    this.windowClause();
                                }
                                break;
                        }
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 1236;
                        this.selectClause();
                        this.state = 1237;
                        this.fromClause();
                        this.state = 1238;
                        this.matchRecognizeClause();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    selectClause() {
        let _localctx = new SelectClauseContext(this._ctx, this.state);
        this.enterRule(_localctx, 170, FlinkSqlParser.RULE_selectClause);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1242;
                this.match(FlinkSqlParser.KW_SELECT);
                this.state = 1244;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === FlinkSqlParser.KW_ALL || _la === FlinkSqlParser.KW_DISTINCT) {
                    {
                        this.state = 1243;
                        this.setQuantifier();
                    }
                }
                this.state = 1255;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 132, this._ctx)) {
                    case 1:
                        {
                            this.state = 1246;
                            this.match(FlinkSqlParser.ASTERISK_SIGN);
                        }
                        break;
                    case 2:
                        {
                            this.state = 1247;
                            this.projectItemDefinition();
                            this.state = 1252;
                            this._errHandler.sync(this);
                            _alt = this.interpreter.adaptivePredict(this._input, 131, this._ctx);
                            while (_alt !== 2 && _alt !== ATN.ATN.INVALID_ALT_NUMBER) {
                                if (_alt === 1) {
                                    {
                                        {
                                            this.state = 1248;
                                            this.match(FlinkSqlParser.COMMA);
                                            this.state = 1249;
                                            this.projectItemDefinition();
                                        }
                                    }
                                }
                                this.state = 1254;
                                this._errHandler.sync(this);
                                _alt = this.interpreter.adaptivePredict(this._input, 131, this._ctx);
                            }
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    projectItemDefinition() {
        let _localctx = new ProjectItemDefinitionContext(this._ctx, this.state);
        this.enterRule(_localctx, 172, FlinkSqlParser.RULE_projectItemDefinition);
        let _la;
        try {
            this.state = 1265;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 135, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 1257;
                        this.overWindowItem();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 1258;
                        this.columnName();
                        this.state = 1263;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 134, this._ctx)) {
                            case 1:
                                {
                                    this.state = 1260;
                                    this._errHandler.sync(this);
                                    _la = this._input.LA(1);
                                    if (_la === FlinkSqlParser.KW_AS) {
                                        {
                                            this.state = 1259;
                                            this.match(FlinkSqlParser.KW_AS);
                                        }
                                    }
                                    this.state = 1262;
                                    this.expression();
                                }
                                break;
                        }
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    overWindowItem() {
        let _localctx = new OverWindowItemContext(this._ctx, this.state);
        this.enterRule(_localctx, 174, FlinkSqlParser.RULE_overWindowItem);
        try {
            this.state = 1279;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 136, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 1267;
                        this.primaryExpression(0);
                        this.state = 1268;
                        this.match(FlinkSqlParser.KW_OVER);
                        this.state = 1269;
                        this.windowSpec();
                        this.state = 1270;
                        this.match(FlinkSqlParser.KW_AS);
                        this.state = 1271;
                        this.identifier();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 1273;
                        this.primaryExpression(0);
                        this.state = 1274;
                        this.match(FlinkSqlParser.KW_OVER);
                        this.state = 1275;
                        this.errorCapturingIdentifier();
                        this.state = 1276;
                        this.match(FlinkSqlParser.KW_AS);
                        this.state = 1277;
                        this.identifier();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    fromClause() {
        let _localctx = new FromClauseContext(this._ctx, this.state);
        this.enterRule(_localctx, 176, FlinkSqlParser.RULE_fromClause);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1281;
                this.match(FlinkSqlParser.KW_FROM);
                this.state = 1282;
                this.tableExpression(0);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    tableExpression(_p) {
        if (_p === undefined) {
            _p = 0;
        }
        let _parentctx = this._ctx;
        let _parentState = this.state;
        let _localctx = new TableExpressionContext(this._ctx, _parentState);
        let _prevctx = _localctx;
        let _startState = 178;
        this.enterRecursionRule(_localctx, 178, FlinkSqlParser.RULE_tableExpression, _p);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1295;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 138, this._ctx)) {
                    case 1:
                        {
                            this.state = 1285;
                            this.tableReference();
                            this.state = 1290;
                            this._errHandler.sync(this);
                            _alt = this.interpreter.adaptivePredict(this._input, 137, this._ctx);
                            while (_alt !== 2 && _alt !== ATN.ATN.INVALID_ALT_NUMBER) {
                                if (_alt === 1) {
                                    {
                                        {
                                            this.state = 1286;
                                            this.match(FlinkSqlParser.COMMA);
                                            this.state = 1287;
                                            this.tableReference();
                                        }
                                    }
                                }
                                this.state = 1292;
                                this._errHandler.sync(this);
                                _alt = this.interpreter.adaptivePredict(this._input, 137, this._ctx);
                            }
                        }
                        break;
                    case 2:
                        {
                            this.state = 1293;
                            this.inlineDataValueClause();
                        }
                        break;
                    case 3:
                        {
                            this.state = 1294;
                            this.windoTVFClause();
                        }
                        break;
                }
                this._ctx._stop = this._input.tryLT(-1);
                this.state = 1318;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 144, this._ctx);
                while (_alt !== 2 && _alt !== ATN.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        if (this._parseListeners != null) {
                            this.triggerExitRuleEvent();
                        }
                        _prevctx = _localctx;
                        {
                            this.state = 1316;
                            this._errHandler.sync(this);
                            switch (this.interpreter.adaptivePredict(this._input, 143, this._ctx)) {
                                case 1:
                                    {
                                        _localctx = new TableExpressionContext(_parentctx, _parentState);
                                        this.pushNewRecursionContext(_localctx, _startState, FlinkSqlParser.RULE_tableExpression);
                                        this.state = 1297;
                                        if (!(this.precpred(this._ctx, 3))) {
                                            throw this.createFailedPredicateException("this.precpred(this._ctx, 3)");
                                        }
                                        this.state = 1298;
                                        this.match(FlinkSqlParser.KW_CROSS);
                                        this.state = 1299;
                                        this.match(FlinkSqlParser.KW_JOIN);
                                        this.state = 1300;
                                        this.tableExpression(4);
                                    }
                                    break;
                                case 2:
                                    {
                                        _localctx = new TableExpressionContext(_parentctx, _parentState);
                                        this.pushNewRecursionContext(_localctx, _startState, FlinkSqlParser.RULE_tableExpression);
                                        this.state = 1301;
                                        if (!(this.precpred(this._ctx, 4))) {
                                            throw this.createFailedPredicateException("this.precpred(this._ctx, 4)");
                                        }
                                        this.state = 1303;
                                        this._errHandler.sync(this);
                                        _la = this._input.LA(1);
                                        if (_la === FlinkSqlParser.KW_NATURAL) {
                                            {
                                                this.state = 1302;
                                                this.match(FlinkSqlParser.KW_NATURAL);
                                            }
                                        }
                                        this.state = 1306;
                                        this._errHandler.sync(this);
                                        _la = this._input.LA(1);
                                        if (_la === FlinkSqlParser.KW_FULL || _la === FlinkSqlParser.KW_INNER || _la === FlinkSqlParser.KW_LEFT || _la === FlinkSqlParser.KW_RIGHT) {
                                            {
                                                this.state = 1305;
                                                _la = this._input.LA(1);
                                                if (!(_la === FlinkSqlParser.KW_FULL || _la === FlinkSqlParser.KW_INNER || _la === FlinkSqlParser.KW_LEFT || _la === FlinkSqlParser.KW_RIGHT)) {
                                                    this._errHandler.recoverInline(this);
                                                }
                                                else {
                                                    if (this._input.LA(1) === Token.Token.EOF) {
                                                        this.matchedEOF = true;
                                                    }
                                                    this._errHandler.reportMatch(this);
                                                    this.consume();
                                                }
                                            }
                                        }
                                        this.state = 1309;
                                        this._errHandler.sync(this);
                                        _la = this._input.LA(1);
                                        if (_la === FlinkSqlParser.KW_OUTER) {
                                            {
                                                this.state = 1308;
                                                this.match(FlinkSqlParser.KW_OUTER);
                                            }
                                        }
                                        this.state = 1311;
                                        this.match(FlinkSqlParser.KW_JOIN);
                                        this.state = 1312;
                                        this.tableExpression(0);
                                        this.state = 1314;
                                        this._errHandler.sync(this);
                                        switch (this.interpreter.adaptivePredict(this._input, 142, this._ctx)) {
                                            case 1:
                                                {
                                                    this.state = 1313;
                                                    this.joinCondition();
                                                }
                                                break;
                                        }
                                    }
                                    break;
                            }
                        }
                    }
                    this.state = 1320;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 144, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.unrollRecursionContexts(_parentctx);
        }
        return _localctx;
    }
    // @RuleVersion(0)
    tableReference() {
        let _localctx = new TableReferenceContext(this._ctx, this.state);
        this.enterRule(_localctx, 180, FlinkSqlParser.RULE_tableReference);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1321;
                this.tablePrimary();
                this.state = 1323;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 145, this._ctx)) {
                    case 1:
                        {
                            this.state = 1322;
                            this.tableAlias();
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    tablePrimary() {
        let _localctx = new TablePrimaryContext(this._ctx, this.state);
        this.enterRule(_localctx, 182, FlinkSqlParser.RULE_tablePrimary);
        let _la;
        try {
            this.state = 1376;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 155, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 1326;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === FlinkSqlParser.KW_TABLE) {
                            {
                                this.state = 1325;
                                this.match(FlinkSqlParser.KW_TABLE);
                            }
                        }
                        this.state = 1328;
                        this.tablePath();
                        this.state = 1330;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 147, this._ctx)) {
                            case 1:
                                {
                                    this.state = 1329;
                                    this.systemTimePeriod();
                                }
                                break;
                        }
                        this.state = 1336;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 149, this._ctx)) {
                            case 1:
                                {
                                    this.state = 1333;
                                    this._errHandler.sync(this);
                                    _la = this._input.LA(1);
                                    if (_la === FlinkSqlParser.KW_AS) {
                                        {
                                            this.state = 1332;
                                            this.match(FlinkSqlParser.KW_AS);
                                        }
                                    }
                                    this.state = 1335;
                                    this.correlationName();
                                }
                                break;
                        }
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 1338;
                        this.viewPath();
                        this.state = 1340;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 150, this._ctx)) {
                            case 1:
                                {
                                    this.state = 1339;
                                    this.systemTimePeriod();
                                }
                                break;
                        }
                        this.state = 1346;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 152, this._ctx)) {
                            case 1:
                                {
                                    this.state = 1343;
                                    this._errHandler.sync(this);
                                    _la = this._input.LA(1);
                                    if (_la === FlinkSqlParser.KW_AS) {
                                        {
                                            this.state = 1342;
                                            this.match(FlinkSqlParser.KW_AS);
                                        }
                                    }
                                    this.state = 1345;
                                    this.correlationName();
                                }
                                break;
                        }
                    }
                    break;
                case 3:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 1348;
                        this.match(FlinkSqlParser.KW_LATERAL);
                        this.state = 1349;
                        this.match(FlinkSqlParser.KW_TABLE);
                        this.state = 1350;
                        this.match(FlinkSqlParser.LR_BRACKET);
                        this.state = 1351;
                        this.functionName();
                        this.state = 1352;
                        this.match(FlinkSqlParser.LR_BRACKET);
                        this.state = 1353;
                        this.functionParam();
                        this.state = 1358;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        while (_la === FlinkSqlParser.COMMA) {
                            {
                                {
                                    this.state = 1354;
                                    this.match(FlinkSqlParser.COMMA);
                                    this.state = 1355;
                                    this.functionParam();
                                }
                            }
                            this.state = 1360;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                        }
                        this.state = 1361;
                        this.match(FlinkSqlParser.RR_BRACKET);
                        this.state = 1362;
                        this.match(FlinkSqlParser.RR_BRACKET);
                    }
                    break;
                case 4:
                    this.enterOuterAlt(_localctx, 4);
                    {
                        this.state = 1365;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === FlinkSqlParser.KW_LATERAL) {
                            {
                                this.state = 1364;
                                this.match(FlinkSqlParser.KW_LATERAL);
                            }
                        }
                        this.state = 1367;
                        this.match(FlinkSqlParser.LR_BRACKET);
                        this.state = 1368;
                        this.queryStatement(0);
                        this.state = 1369;
                        this.match(FlinkSqlParser.RR_BRACKET);
                    }
                    break;
                case 5:
                    this.enterOuterAlt(_localctx, 5);
                    {
                        this.state = 1371;
                        this.match(FlinkSqlParser.KW_UNNEST);
                        this.state = 1372;
                        this.match(FlinkSqlParser.LR_BRACKET);
                        this.state = 1373;
                        this.expression();
                        this.state = 1374;
                        this.match(FlinkSqlParser.RR_BRACKET);
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    systemTimePeriod() {
        let _localctx = new SystemTimePeriodContext(this._ctx, this.state);
        this.enterRule(_localctx, 184, FlinkSqlParser.RULE_systemTimePeriod);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1378;
                this.match(FlinkSqlParser.KW_FOR);
                this.state = 1379;
                this.match(FlinkSqlParser.KW_SYSTEM_TIME);
                this.state = 1380;
                this.match(FlinkSqlParser.KW_AS);
                this.state = 1381;
                this.match(FlinkSqlParser.KW_OF);
                this.state = 1382;
                this.dateTimeExpression();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    dateTimeExpression() {
        let _localctx = new DateTimeExpressionContext(this._ctx, this.state);
        this.enterRule(_localctx, 186, FlinkSqlParser.RULE_dateTimeExpression);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1384;
                this.expression();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    inlineDataValueClause() {
        let _localctx = new InlineDataValueClauseContext(this._ctx, this.state);
        this.enterRule(_localctx, 188, FlinkSqlParser.RULE_inlineDataValueClause);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1386;
                this.match(FlinkSqlParser.LR_BRACKET);
                this.state = 1387;
                this.valuesDefinition();
                this.state = 1388;
                this.match(FlinkSqlParser.RR_BRACKET);
                this.state = 1389;
                this.tableAlias();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    windoTVFClause() {
        let _localctx = new WindoTVFClauseContext(this._ctx, this.state);
        this.enterRule(_localctx, 190, FlinkSqlParser.RULE_windoTVFClause);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1391;
                this.match(FlinkSqlParser.KW_TABLE);
                this.state = 1392;
                this.match(FlinkSqlParser.LR_BRACKET);
                this.state = 1393;
                this.windowTVFExression();
                this.state = 1394;
                this.match(FlinkSqlParser.RR_BRACKET);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    windowTVFExression() {
        let _localctx = new WindowTVFExressionContext(this._ctx, this.state);
        this.enterRule(_localctx, 192, FlinkSqlParser.RULE_windowTVFExression);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1396;
                this.windoTVFName();
                this.state = 1397;
                this.match(FlinkSqlParser.LR_BRACKET);
                this.state = 1398;
                this.windowTVFParam();
                this.state = 1403;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === FlinkSqlParser.COMMA) {
                    {
                        {
                            this.state = 1399;
                            this.match(FlinkSqlParser.COMMA);
                            this.state = 1400;
                            this.windowTVFParam();
                        }
                    }
                    this.state = 1405;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 1406;
                this.match(FlinkSqlParser.RR_BRACKET);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    windoTVFName() {
        let _localctx = new WindoTVFNameContext(this._ctx, this.state);
        this.enterRule(_localctx, 194, FlinkSqlParser.RULE_windoTVFName);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1408;
                _la = this._input.LA(1);
                if (!(_la === FlinkSqlParser.KW_CUMULATE || _la === FlinkSqlParser.KW_HOP || _la === FlinkSqlParser.KW_TUMBLE)) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token.Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    windowTVFParam() {
        let _localctx = new WindowTVFParamContext(this._ctx, this.state);
        this.enterRule(_localctx, 196, FlinkSqlParser.RULE_windowTVFParam);
        try {
            this.state = 1425;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 157, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 1410;
                        this.match(FlinkSqlParser.KW_TABLE);
                        this.state = 1411;
                        this.timeAttrColumn();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 1412;
                        this.columnDescriptor();
                    }
                    break;
                case 3:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 1413;
                        this.timeIntervalExpression();
                    }
                    break;
                case 4:
                    this.enterOuterAlt(_localctx, 4);
                    {
                        this.state = 1414;
                        this.match(FlinkSqlParser.KW_DATA);
                        this.state = 1415;
                        this.match(FlinkSqlParser.DOUBLE_RIGHT_ARROW);
                        this.state = 1416;
                        this.match(FlinkSqlParser.KW_TABLE);
                        this.state = 1417;
                        this.timeAttrColumn();
                    }
                    break;
                case 5:
                    this.enterOuterAlt(_localctx, 5);
                    {
                        this.state = 1418;
                        this.match(FlinkSqlParser.KW_TIMECOL);
                        this.state = 1419;
                        this.match(FlinkSqlParser.DOUBLE_RIGHT_ARROW);
                        this.state = 1420;
                        this.columnDescriptor();
                    }
                    break;
                case 6:
                    this.enterOuterAlt(_localctx, 6);
                    {
                        this.state = 1421;
                        this.timeIntervalParamName();
                        this.state = 1422;
                        this.match(FlinkSqlParser.DOUBLE_RIGHT_ARROW);
                        this.state = 1423;
                        this.timeIntervalExpression();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    timeIntervalParamName() {
        let _localctx = new TimeIntervalParamNameContext(this._ctx, this.state);
        this.enterRule(_localctx, 198, FlinkSqlParser.RULE_timeIntervalParamName);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1427;
                _la = this._input.LA(1);
                if (!(_la === FlinkSqlParser.KW_OFFSET || _la === FlinkSqlParser.KW_DATA || ((((_la - 494)) & ~0x1F) === 0 && ((1 << (_la - 494)) & ((1 << (FlinkSqlParser.KW_SIZE - 494)) | (1 << (FlinkSqlParser.KW_SLIDE - 494)) | (1 << (FlinkSqlParser.KW_STEP - 494)) | (1 << (FlinkSqlParser.KW_TIMECOL - 494)))) !== 0))) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token.Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    columnDescriptor() {
        let _localctx = new ColumnDescriptorContext(this._ctx, this.state);
        this.enterRule(_localctx, 200, FlinkSqlParser.RULE_columnDescriptor);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1429;
                this.match(FlinkSqlParser.KW_DESCRIPTOR);
                this.state = 1430;
                this.match(FlinkSqlParser.LR_BRACKET);
                this.state = 1431;
                this.columnName();
                this.state = 1432;
                this.match(FlinkSqlParser.RR_BRACKET);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    joinCondition() {
        let _localctx = new JoinConditionContext(this._ctx, this.state);
        this.enterRule(_localctx, 202, FlinkSqlParser.RULE_joinCondition);
        try {
            this.state = 1438;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case FlinkSqlParser.KW_ON:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 1434;
                        this.match(FlinkSqlParser.KW_ON);
                        this.state = 1435;
                        this.booleanExpression(0);
                    }
                    break;
                case FlinkSqlParser.KW_USING:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 1436;
                        this.match(FlinkSqlParser.KW_USING);
                        this.state = 1437;
                        this.columnNameList();
                    }
                    break;
                default:
                    throw new NoViableAltException.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    whereClause() {
        let _localctx = new WhereClauseContext(this._ctx, this.state);
        this.enterRule(_localctx, 204, FlinkSqlParser.RULE_whereClause);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1440;
                this.match(FlinkSqlParser.KW_WHERE);
                this.state = 1441;
                this.booleanExpression(0);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    groupByClause() {
        let _localctx = new GroupByClauseContext(this._ctx, this.state);
        this.enterRule(_localctx, 206, FlinkSqlParser.RULE_groupByClause);
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1443;
                this.match(FlinkSqlParser.KW_GROUP);
                this.state = 1444;
                this.match(FlinkSqlParser.KW_BY);
                this.state = 1445;
                this.groupItemDefinition();
                this.state = 1450;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 159, this._ctx);
                while (_alt !== 2 && _alt !== ATN.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 1446;
                                this.match(FlinkSqlParser.COMMA);
                                this.state = 1447;
                                this.groupItemDefinition();
                            }
                        }
                    }
                    this.state = 1452;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 159, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    groupItemDefinition() {
        let _localctx = new GroupItemDefinitionContext(this._ctx, this.state);
        this.enterRule(_localctx, 208, FlinkSqlParser.RULE_groupItemDefinition);
        let _la;
        try {
            this.state = 1492;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 163, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 1453;
                        this.columnName();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 1454;
                        this.groupWindowFunction();
                    }
                    break;
                case 3:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 1455;
                        this.match(FlinkSqlParser.LR_BRACKET);
                        this.state = 1456;
                        this.match(FlinkSqlParser.RR_BRACKET);
                    }
                    break;
                case 4:
                    this.enterOuterAlt(_localctx, 4);
                    {
                        this.state = 1457;
                        this.match(FlinkSqlParser.LR_BRACKET);
                        this.state = 1458;
                        this.expression();
                        this.state = 1463;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        while (_la === FlinkSqlParser.COMMA) {
                            {
                                {
                                    this.state = 1459;
                                    this.match(FlinkSqlParser.COMMA);
                                    this.state = 1460;
                                    this.expression();
                                }
                            }
                            this.state = 1465;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                        }
                        this.state = 1466;
                        this.match(FlinkSqlParser.RR_BRACKET);
                    }
                    break;
                case 5:
                    this.enterOuterAlt(_localctx, 5);
                    {
                        this.state = 1468;
                        this.groupingSetsNotaionName();
                        this.state = 1469;
                        this.match(FlinkSqlParser.LR_BRACKET);
                        this.state = 1470;
                        this.expression();
                        this.state = 1475;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        while (_la === FlinkSqlParser.COMMA) {
                            {
                                {
                                    this.state = 1471;
                                    this.match(FlinkSqlParser.COMMA);
                                    this.state = 1472;
                                    this.expression();
                                }
                            }
                            this.state = 1477;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                        }
                        this.state = 1478;
                        this.match(FlinkSqlParser.RR_BRACKET);
                    }
                    break;
                case 6:
                    this.enterOuterAlt(_localctx, 6);
                    {
                        this.state = 1480;
                        this.groupingSets();
                        this.state = 1481;
                        this.match(FlinkSqlParser.LR_BRACKET);
                        this.state = 1482;
                        this.groupItemDefinition();
                        this.state = 1487;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        while (_la === FlinkSqlParser.COMMA) {
                            {
                                {
                                    this.state = 1483;
                                    this.match(FlinkSqlParser.COMMA);
                                    this.state = 1484;
                                    this.groupItemDefinition();
                                }
                            }
                            this.state = 1489;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                        }
                        this.state = 1490;
                        this.match(FlinkSqlParser.RR_BRACKET);
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    groupingSets() {
        let _localctx = new GroupingSetsContext(this._ctx, this.state);
        this.enterRule(_localctx, 210, FlinkSqlParser.RULE_groupingSets);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1494;
                this.match(FlinkSqlParser.KW_GROUPING);
                this.state = 1495;
                this.match(FlinkSqlParser.KW_SETS);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    groupingSetsNotaionName() {
        let _localctx = new GroupingSetsNotaionNameContext(this._ctx, this.state);
        this.enterRule(_localctx, 212, FlinkSqlParser.RULE_groupingSetsNotaionName);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1497;
                _la = this._input.LA(1);
                if (!(_la === FlinkSqlParser.KW_CUBE || _la === FlinkSqlParser.KW_ROLLUP)) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token.Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    groupWindowFunction() {
        let _localctx = new GroupWindowFunctionContext(this._ctx, this.state);
        this.enterRule(_localctx, 214, FlinkSqlParser.RULE_groupWindowFunction);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1499;
                this.groupWindowFunctionName();
                this.state = 1500;
                this.match(FlinkSqlParser.LR_BRACKET);
                this.state = 1501;
                this.timeAttrColumn();
                this.state = 1502;
                this.match(FlinkSqlParser.COMMA);
                this.state = 1503;
                this.timeIntervalExpression();
                this.state = 1504;
                this.match(FlinkSqlParser.RR_BRACKET);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    groupWindowFunctionName() {
        let _localctx = new GroupWindowFunctionNameContext(this._ctx, this.state);
        this.enterRule(_localctx, 216, FlinkSqlParser.RULE_groupWindowFunctionName);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1506;
                _la = this._input.LA(1);
                if (!(_la === FlinkSqlParser.KW_HOP || _la === FlinkSqlParser.KW_SESSION || _la === FlinkSqlParser.KW_TUMBLE)) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token.Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    timeAttrColumn() {
        let _localctx = new TimeAttrColumnContext(this._ctx, this.state);
        this.enterRule(_localctx, 218, FlinkSqlParser.RULE_timeAttrColumn);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1508;
                this.uid();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    havingClause() {
        let _localctx = new HavingClauseContext(this._ctx, this.state);
        this.enterRule(_localctx, 220, FlinkSqlParser.RULE_havingClause);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1510;
                this.match(FlinkSqlParser.KW_HAVING);
                this.state = 1511;
                this.booleanExpression(0);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    windowClause() {
        let _localctx = new WindowClauseContext(this._ctx, this.state);
        this.enterRule(_localctx, 222, FlinkSqlParser.RULE_windowClause);
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1513;
                this.match(FlinkSqlParser.KW_WINDOW);
                this.state = 1514;
                this.namedWindow();
                this.state = 1519;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 164, this._ctx);
                while (_alt !== 2 && _alt !== ATN.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 1515;
                                this.match(FlinkSqlParser.COMMA);
                                this.state = 1516;
                                this.namedWindow();
                            }
                        }
                    }
                    this.state = 1521;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 164, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    namedWindow() {
        let _localctx = new NamedWindowContext(this._ctx, this.state);
        this.enterRule(_localctx, 224, FlinkSqlParser.RULE_namedWindow);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1522;
                _localctx._name = this.errorCapturingIdentifier();
                this.state = 1523;
                this.match(FlinkSqlParser.KW_AS);
                this.state = 1524;
                this.windowSpec();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    windowSpec() {
        let _localctx = new WindowSpecContext(this._ctx, this.state);
        this.enterRule(_localctx, 226, FlinkSqlParser.RULE_windowSpec);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1527;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (((((_la - 437)) & ~0x1F) === 0 && ((1 << (_la - 437)) & ((1 << (FlinkSqlParser.KW_ADD - 437)) | (1 << (FlinkSqlParser.KW_AFTER - 437)) | (1 << (FlinkSqlParser.KW_ASC - 437)) | (1 << (FlinkSqlParser.KW_CASCADE - 437)) | (1 << (FlinkSqlParser.KW_CATALOG - 437)) | (1 << (FlinkSqlParser.KW_CENTURY - 437)) | (1 << (FlinkSqlParser.KW_CONFIG - 437)) | (1 << (FlinkSqlParser.KW_CONSTRAINTS - 437)) | (1 << (FlinkSqlParser.KW_CUMULATE - 437)) | (1 << (FlinkSqlParser.KW_DATA - 437)) | (1 << (FlinkSqlParser.KW_DATABASE - 437)) | (1 << (FlinkSqlParser.KW_DAYS - 437)) | (1 << (FlinkSqlParser.KW_DECADE - 437)) | (1 << (FlinkSqlParser.KW_DESC - 437)) | (1 << (FlinkSqlParser.KW_DESCRIPTOR - 437)) | (1 << (FlinkSqlParser.KW_DIV - 437)) | (1 << (FlinkSqlParser.KW_ENGINE - 437)) | (1 << (FlinkSqlParser.KW_EPOCH - 437)) | (1 << (FlinkSqlParser.KW_EXCLUDING - 437)) | (1 << (FlinkSqlParser.KW_FILE - 437)) | (1 << (FlinkSqlParser.KW_FIRST - 437)) | (1 << (FlinkSqlParser.KW_GENERATED - 437)) | (1 << (FlinkSqlParser.KW_HOP - 437)) | (1 << (FlinkSqlParser.KW_HOURS - 437)) | (1 << (FlinkSqlParser.KW_IGNORE - 437)) | (1 << (FlinkSqlParser.KW_INCLUDING - 437)) | (1 << (FlinkSqlParser.KW_JAR - 437)) | (1 << (FlinkSqlParser.KW_JARS - 437)) | (1 << (FlinkSqlParser.KW_JAVA - 437)) | (1 << (FlinkSqlParser.KW_KEY - 437)) | (1 << (FlinkSqlParser.KW_LAST - 437)) | (1 << (FlinkSqlParser.KW_LOAD - 437)))) !== 0) || ((((_la - 469)) & ~0x1F) === 0 && ((1 << (_la - 469)) & ((1 << (FlinkSqlParser.KW_MAP - 469)) | (1 << (FlinkSqlParser.KW_MICROSECOND - 469)) | (1 << (FlinkSqlParser.KW_MILLENNIUM - 469)) | (1 << (FlinkSqlParser.KW_MILLISECOND - 469)) | (1 << (FlinkSqlParser.KW_MINUTES - 469)) | (1 << (FlinkSqlParser.KW_MONTHS - 469)) | (1 << (FlinkSqlParser.KW_NANOSECOND - 469)) | (1 << (FlinkSqlParser.KW_NULLS - 469)) | (1 << (FlinkSqlParser.KW_OPTIONS - 469)) | (1 << (FlinkSqlParser.KW_PAST - 469)) | (1 << (FlinkSqlParser.KW_PLAN - 469)) | (1 << (FlinkSqlParser.KW_PRECEDING - 469)) | (1 << (FlinkSqlParser.KW_PYTHON - 469)) | (1 << (FlinkSqlParser.KW_PYTHON_ARCHIVES - 469)) | (1 << (FlinkSqlParser.KW_PYTHON_DEPENDENCIES - 469)) | (1 << (FlinkSqlParser.KW_PYTHON_FILES - 469)) | (1 << (FlinkSqlParser.KW_PYTHON_JAR - 469)) | (1 << (FlinkSqlParser.KW_PYTHON_PARAMETER - 469)) | (1 << (FlinkSqlParser.KW_PYTHON_REQUIREMENTS - 469)) | (1 << (FlinkSqlParser.KW_QUARTER - 469)) | (1 << (FlinkSqlParser.KW_REMOVE - 469)) | (1 << (FlinkSqlParser.KW_RESTRICT - 469)) | (1 << (FlinkSqlParser.KW_SECONDS - 469)) | (1 << (FlinkSqlParser.KW_SESSION - 469)) | (1 << (FlinkSqlParser.KW_SETS - 469)) | (1 << (FlinkSqlParser.KW_SIZE - 469)) | (1 << (FlinkSqlParser.KW_SLIDE - 469)) | (1 << (FlinkSqlParser.KW_STEP - 469)) | (1 << (FlinkSqlParser.KW_TEMPORARY - 469)) | (1 << (FlinkSqlParser.KW_TIMECOL - 469)) | (1 << (FlinkSqlParser.KW_TUMBLE - 469)) | (1 << (FlinkSqlParser.KW_UNLOAD - 469)))) !== 0) || ((((_la - 501)) & ~0x1F) === 0 && ((1 << (_la - 501)) & ((1 << (FlinkSqlParser.KW_VIEW - 501)) | (1 << (FlinkSqlParser.KW_WEEK - 501)) | (1 << (FlinkSqlParser.KW_YEARS - 501)) | (1 << (FlinkSqlParser.KW_ZONE - 501)))) !== 0) || ((((_la - 537)) & ~0x1F) === 0 && ((1 << (_la - 537)) & ((1 << (FlinkSqlParser.STRING_LITERAL - 537)) | (1 << (FlinkSqlParser.DIG_LITERAL - 537)) | (1 << (FlinkSqlParser.ID_LITERAL - 537)))) !== 0)) {
                    {
                        this.state = 1526;
                        _localctx._name = this.errorCapturingIdentifier();
                    }
                }
                this.state = 1529;
                this.match(FlinkSqlParser.LR_BRACKET);
                this.state = 1531;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === FlinkSqlParser.KW_PARTITION) {
                    {
                        this.state = 1530;
                        this.partitionByClause();
                    }
                }
                this.state = 1534;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === FlinkSqlParser.KW_ORDER) {
                    {
                        this.state = 1533;
                        this.orderByCaluse();
                    }
                }
                this.state = 1537;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === FlinkSqlParser.KW_RANGE || _la === FlinkSqlParser.KW_ROWS) {
                    {
                        this.state = 1536;
                        this.windowFrame();
                    }
                }
                this.state = 1539;
                this.match(FlinkSqlParser.RR_BRACKET);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    matchRecognizeClause() {
        let _localctx = new MatchRecognizeClauseContext(this._ctx, this.state);
        this.enterRule(_localctx, 228, FlinkSqlParser.RULE_matchRecognizeClause);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1541;
                this.match(FlinkSqlParser.KW_MATCH_RECOGNIZE);
                this.state = 1542;
                this.match(FlinkSqlParser.LR_BRACKET);
                this.state = 1544;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === FlinkSqlParser.KW_PARTITION) {
                    {
                        this.state = 1543;
                        this.partitionByClause();
                    }
                }
                this.state = 1547;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === FlinkSqlParser.KW_ORDER) {
                    {
                        this.state = 1546;
                        this.orderByCaluse();
                    }
                }
                this.state = 1550;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === FlinkSqlParser.KW_MEASURES) {
                    {
                        this.state = 1549;
                        this.measuresClause();
                    }
                }
                this.state = 1553;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === FlinkSqlParser.KW_ALL || _la === FlinkSqlParser.KW_ONE) {
                    {
                        this.state = 1552;
                        this.outputMode();
                    }
                }
                this.state = 1556;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === FlinkSqlParser.KW_AFTER) {
                    {
                        this.state = 1555;
                        this.afterMatchStrategy();
                    }
                }
                this.state = 1559;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === FlinkSqlParser.KW_PATTERN) {
                    {
                        this.state = 1558;
                        this.patternDefination();
                    }
                }
                this.state = 1561;
                this.patternVariablesDefination();
                this.state = 1562;
                this.match(FlinkSqlParser.RR_BRACKET);
                this.state = 1567;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 176, this._ctx)) {
                    case 1:
                        {
                            this.state = 1564;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            if (_la === FlinkSqlParser.KW_AS) {
                                {
                                    this.state = 1563;
                                    this.match(FlinkSqlParser.KW_AS);
                                }
                            }
                            this.state = 1566;
                            this.identifier();
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    orderByCaluse() {
        let _localctx = new OrderByCaluseContext(this._ctx, this.state);
        this.enterRule(_localctx, 230, FlinkSqlParser.RULE_orderByCaluse);
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1569;
                this.match(FlinkSqlParser.KW_ORDER);
                this.state = 1570;
                this.match(FlinkSqlParser.KW_BY);
                this.state = 1571;
                this.orderItemDefition();
                this.state = 1576;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 177, this._ctx);
                while (_alt !== 2 && _alt !== ATN.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 1572;
                                this.match(FlinkSqlParser.COMMA);
                                this.state = 1573;
                                this.orderItemDefition();
                            }
                        }
                    }
                    this.state = 1578;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 177, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    orderItemDefition() {
        let _localctx = new OrderItemDefitionContext(this._ctx, this.state);
        this.enterRule(_localctx, 232, FlinkSqlParser.RULE_orderItemDefition);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1579;
                this.columnName();
                this.state = 1581;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 178, this._ctx)) {
                    case 1:
                        {
                            this.state = 1580;
                            _localctx._ordering = this._input.LT(1);
                            _la = this._input.LA(1);
                            if (!(_la === FlinkSqlParser.KW_ASC || _la === FlinkSqlParser.KW_DESC)) {
                                _localctx._ordering = this._errHandler.recoverInline(this);
                            }
                            else {
                                if (this._input.LA(1) === Token.Token.EOF) {
                                    this.matchedEOF = true;
                                }
                                this._errHandler.reportMatch(this);
                                this.consume();
                            }
                        }
                        break;
                }
                this.state = 1585;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 179, this._ctx)) {
                    case 1:
                        {
                            this.state = 1583;
                            this.match(FlinkSqlParser.KW_NULLS);
                            this.state = 1584;
                            _localctx._nullOrder = this._input.LT(1);
                            _la = this._input.LA(1);
                            if (!(_la === FlinkSqlParser.KW_FIRST || _la === FlinkSqlParser.KW_LAST)) {
                                _localctx._nullOrder = this._errHandler.recoverInline(this);
                            }
                            else {
                                if (this._input.LA(1) === Token.Token.EOF) {
                                    this.matchedEOF = true;
                                }
                                this._errHandler.reportMatch(this);
                                this.consume();
                            }
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    limitClause() {
        let _localctx = new LimitClauseContext(this._ctx, this.state);
        this.enterRule(_localctx, 234, FlinkSqlParser.RULE_limitClause);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1587;
                this.match(FlinkSqlParser.KW_LIMIT);
                this.state = 1590;
                this._errHandler.sync(this);
                switch (this._input.LA(1)) {
                    case FlinkSqlParser.KW_ALL:
                        {
                            this.state = 1588;
                            this.match(FlinkSqlParser.KW_ALL);
                        }
                        break;
                    case FlinkSqlParser.KW_ABS:
                    case FlinkSqlParser.KW_ARRAY:
                    case FlinkSqlParser.KW_AVG:
                    case FlinkSqlParser.KW_CARDINALITY:
                    case FlinkSqlParser.KW_CASE:
                    case FlinkSqlParser.KW_CAST:
                    case FlinkSqlParser.KW_CEIL:
                    case FlinkSqlParser.KW_CEILING:
                    case FlinkSqlParser.KW_COALESCE:
                    case FlinkSqlParser.KW_COLLECT:
                    case FlinkSqlParser.KW_COUNT:
                    case FlinkSqlParser.KW_CUME_DIST:
                    case FlinkSqlParser.KW_CURRENT_DATE:
                    case FlinkSqlParser.KW_CURRENT_TIME:
                    case FlinkSqlParser.KW_CURRENT_TIMESTAMP:
                    case FlinkSqlParser.KW_DATE:
                    case FlinkSqlParser.KW_DAY:
                    case FlinkSqlParser.KW_DAYOFWEEK:
                    case FlinkSqlParser.KW_DAYOFYEAR:
                    case FlinkSqlParser.KW_DENSE_RANK:
                    case FlinkSqlParser.KW_ELEMENT:
                    case FlinkSqlParser.KW_EXISTS:
                    case FlinkSqlParser.KW_EXP:
                    case FlinkSqlParser.KW_EXTRACT:
                    case FlinkSqlParser.KW_FALSE:
                    case FlinkSqlParser.KW_FIRST_VALUE:
                    case FlinkSqlParser.KW_FLOOR:
                    case FlinkSqlParser.KW_GROUPING:
                    case FlinkSqlParser.KW_HOUR:
                    case FlinkSqlParser.KW_IF:
                    case FlinkSqlParser.KW_INTERVAL:
                    case FlinkSqlParser.KW_LAG:
                    case FlinkSqlParser.KW_LAST_VALUE:
                    case FlinkSqlParser.KW_LEAD:
                    case FlinkSqlParser.KW_LEFT:
                    case FlinkSqlParser.KW_LN:
                    case FlinkSqlParser.KW_LOCALTIME:
                    case FlinkSqlParser.KW_LOCALTIMESTAMP:
                    case FlinkSqlParser.KW_LOWER:
                    case FlinkSqlParser.KW_MAX:
                    case FlinkSqlParser.KW_MIN:
                    case FlinkSqlParser.KW_MINUTE:
                    case FlinkSqlParser.KW_MOD:
                    case FlinkSqlParser.KW_MONTH:
                    case FlinkSqlParser.KW_NOT:
                    case FlinkSqlParser.KW_NTILE:
                    case FlinkSqlParser.KW_NULL:
                    case FlinkSqlParser.KW_NULLIF:
                    case FlinkSqlParser.KW_OVERLAY:
                    case FlinkSqlParser.KW_PERCENT_RANK:
                    case FlinkSqlParser.KW_POSITION:
                    case FlinkSqlParser.KW_POWER:
                    case FlinkSqlParser.KW_RANK:
                    case FlinkSqlParser.KW_RIGHT:
                    case FlinkSqlParser.KW_ROW:
                    case FlinkSqlParser.KW_ROWS:
                    case FlinkSqlParser.KW_ROW_NUMBER:
                    case FlinkSqlParser.KW_SECOND:
                    case FlinkSqlParser.KW_STDDEV_POP:
                    case FlinkSqlParser.KW_STDDEV_SAMP:
                    case FlinkSqlParser.KW_SUBSTRING:
                    case FlinkSqlParser.KW_SUM:
                    case FlinkSqlParser.KW_TIME:
                    case FlinkSqlParser.KW_TIMESTAMP:
                    case FlinkSqlParser.KW_TIMESTAMP_DIFF:
                    case FlinkSqlParser.KW_TRIM:
                    case FlinkSqlParser.KW_TRUE:
                    case FlinkSqlParser.KW_TRUNCATE:
                    case FlinkSqlParser.KW_TRY_CAST:
                    case FlinkSqlParser.KW_UPPER:
                    case FlinkSqlParser.KW_VAR_POP:
                    case FlinkSqlParser.KW_VAR_SAMP:
                    case FlinkSqlParser.KW_YEAR:
                    case FlinkSqlParser.KW_ADD:
                    case FlinkSqlParser.KW_AFTER:
                    case FlinkSqlParser.KW_ASC:
                    case FlinkSqlParser.KW_CASCADE:
                    case FlinkSqlParser.KW_CATALOG:
                    case FlinkSqlParser.KW_CENTURY:
                    case FlinkSqlParser.KW_CONFIG:
                    case FlinkSqlParser.KW_CONSTRAINTS:
                    case FlinkSqlParser.KW_CUMULATE:
                    case FlinkSqlParser.KW_DATA:
                    case FlinkSqlParser.KW_DATABASE:
                    case FlinkSqlParser.KW_DAYS:
                    case FlinkSqlParser.KW_DECADE:
                    case FlinkSqlParser.KW_DESC:
                    case FlinkSqlParser.KW_DESCRIPTOR:
                    case FlinkSqlParser.KW_DIV:
                    case FlinkSqlParser.KW_ENGINE:
                    case FlinkSqlParser.KW_EPOCH:
                    case FlinkSqlParser.KW_EXCLUDING:
                    case FlinkSqlParser.KW_FILE:
                    case FlinkSqlParser.KW_FIRST:
                    case FlinkSqlParser.KW_GENERATED:
                    case FlinkSqlParser.KW_HOP:
                    case FlinkSqlParser.KW_HOURS:
                    case FlinkSqlParser.KW_IGNORE:
                    case FlinkSqlParser.KW_INCLUDING:
                    case FlinkSqlParser.KW_JAR:
                    case FlinkSqlParser.KW_JARS:
                    case FlinkSqlParser.KW_JAVA:
                    case FlinkSqlParser.KW_KEY:
                    case FlinkSqlParser.KW_LAST:
                    case FlinkSqlParser.KW_LOAD:
                    case FlinkSqlParser.KW_MAP:
                    case FlinkSqlParser.KW_MICROSECOND:
                    case FlinkSqlParser.KW_MILLENNIUM:
                    case FlinkSqlParser.KW_MILLISECOND:
                    case FlinkSqlParser.KW_MINUTES:
                    case FlinkSqlParser.KW_MONTHS:
                    case FlinkSqlParser.KW_NANOSECOND:
                    case FlinkSqlParser.KW_NULLS:
                    case FlinkSqlParser.KW_OPTIONS:
                    case FlinkSqlParser.KW_PAST:
                    case FlinkSqlParser.KW_PLAN:
                    case FlinkSqlParser.KW_PRECEDING:
                    case FlinkSqlParser.KW_PYTHON:
                    case FlinkSqlParser.KW_PYTHON_ARCHIVES:
                    case FlinkSqlParser.KW_PYTHON_DEPENDENCIES:
                    case FlinkSqlParser.KW_PYTHON_FILES:
                    case FlinkSqlParser.KW_PYTHON_JAR:
                    case FlinkSqlParser.KW_PYTHON_PARAMETER:
                    case FlinkSqlParser.KW_PYTHON_REQUIREMENTS:
                    case FlinkSqlParser.KW_QUARTER:
                    case FlinkSqlParser.KW_REMOVE:
                    case FlinkSqlParser.KW_RESTRICT:
                    case FlinkSqlParser.KW_SECONDS:
                    case FlinkSqlParser.KW_SESSION:
                    case FlinkSqlParser.KW_SETS:
                    case FlinkSqlParser.KW_SIZE:
                    case FlinkSqlParser.KW_SLIDE:
                    case FlinkSqlParser.KW_STEP:
                    case FlinkSqlParser.KW_TEMPORARY:
                    case FlinkSqlParser.KW_TIMECOL:
                    case FlinkSqlParser.KW_TUMBLE:
                    case FlinkSqlParser.KW_UNLOAD:
                    case FlinkSqlParser.KW_VIEW:
                    case FlinkSqlParser.KW_WEEK:
                    case FlinkSqlParser.KW_YEARS:
                    case FlinkSqlParser.KW_ZONE:
                    case FlinkSqlParser.BIT_NOT_OP:
                    case FlinkSqlParser.LR_BRACKET:
                    case FlinkSqlParser.ASTERISK_SIGN:
                    case FlinkSqlParser.HYPNEN_SIGN:
                    case FlinkSqlParser.ADD_SIGN:
                    case FlinkSqlParser.STRING_LITERAL:
                    case FlinkSqlParser.DIG_LITERAL:
                    case FlinkSqlParser.REAL_LITERAL:
                    case FlinkSqlParser.BIT_STRING:
                    case FlinkSqlParser.ID_LITERAL:
                        {
                            this.state = 1589;
                            _localctx._limit = this.expression();
                        }
                        break;
                    default:
                        throw new NoViableAltException.NoViableAltException(this);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    partitionByClause() {
        let _localctx = new PartitionByClauseContext(this._ctx, this.state);
        this.enterRule(_localctx, 236, FlinkSqlParser.RULE_partitionByClause);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1592;
                this.match(FlinkSqlParser.KW_PARTITION);
                this.state = 1593;
                this.match(FlinkSqlParser.KW_BY);
                this.state = 1594;
                this.columnName();
                this.state = 1599;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === FlinkSqlParser.COMMA) {
                    {
                        {
                            this.state = 1595;
                            this.match(FlinkSqlParser.COMMA);
                            this.state = 1596;
                            this.columnName();
                        }
                    }
                    this.state = 1601;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    quantifiers() {
        let _localctx = new QuantifiersContext(this._ctx, this.state);
        this.enterRule(_localctx, 238, FlinkSqlParser.RULE_quantifiers);
        try {
            this.state = 1618;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 182, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        {
                            this.state = 1602;
                            this.match(FlinkSqlParser.ASTERISK_SIGN);
                        }
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        {
                            this.state = 1603;
                            this.match(FlinkSqlParser.ADD_SIGN);
                        }
                    }
                    break;
                case 3:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        {
                            this.state = 1604;
                            this.match(FlinkSqlParser.QUESTION_MARK_SIGN);
                        }
                    }
                    break;
                case 4:
                    this.enterOuterAlt(_localctx, 4);
                    {
                        {
                            this.state = 1605;
                            this.match(FlinkSqlParser.LB_BRACKET);
                            this.state = 1606;
                            this.match(FlinkSqlParser.DIG_LITERAL);
                            this.state = 1607;
                            this.match(FlinkSqlParser.COMMA);
                            this.state = 1608;
                            this.match(FlinkSqlParser.DIG_LITERAL);
                            this.state = 1609;
                            this.match(FlinkSqlParser.RB_BRACKET);
                        }
                    }
                    break;
                case 5:
                    this.enterOuterAlt(_localctx, 5);
                    {
                        {
                            this.state = 1610;
                            this.match(FlinkSqlParser.LB_BRACKET);
                            this.state = 1611;
                            this.match(FlinkSqlParser.DIG_LITERAL);
                            this.state = 1612;
                            this.match(FlinkSqlParser.COMMA);
                            this.state = 1613;
                            this.match(FlinkSqlParser.RB_BRACKET);
                        }
                    }
                    break;
                case 6:
                    this.enterOuterAlt(_localctx, 6);
                    {
                        {
                            this.state = 1614;
                            this.match(FlinkSqlParser.LB_BRACKET);
                            this.state = 1615;
                            this.match(FlinkSqlParser.COMMA);
                            this.state = 1616;
                            this.match(FlinkSqlParser.DIG_LITERAL);
                            this.state = 1617;
                            this.match(FlinkSqlParser.RB_BRACKET);
                        }
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    measuresClause() {
        let _localctx = new MeasuresClauseContext(this._ctx, this.state);
        this.enterRule(_localctx, 240, FlinkSqlParser.RULE_measuresClause);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1620;
                this.match(FlinkSqlParser.KW_MEASURES);
                this.state = 1621;
                this.projectItemDefinition();
                this.state = 1626;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === FlinkSqlParser.COMMA) {
                    {
                        {
                            this.state = 1622;
                            this.match(FlinkSqlParser.COMMA);
                            this.state = 1623;
                            this.projectItemDefinition();
                        }
                    }
                    this.state = 1628;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    patternDefination() {
        let _localctx = new PatternDefinationContext(this._ctx, this.state);
        this.enterRule(_localctx, 242, FlinkSqlParser.RULE_patternDefination);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1629;
                this.match(FlinkSqlParser.KW_PATTERN);
                this.state = 1630;
                this.match(FlinkSqlParser.LR_BRACKET);
                this.state = 1632;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                do {
                    {
                        {
                            this.state = 1631;
                            this.patternVariable();
                        }
                    }
                    this.state = 1634;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                } while (_la === FlinkSqlParser.DIG_LITERAL || _la === FlinkSqlParser.ID_LITERAL);
                this.state = 1636;
                this.match(FlinkSqlParser.RR_BRACKET);
                this.state = 1638;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === FlinkSqlParser.KW_WITHIN) {
                    {
                        this.state = 1637;
                        this.withinClause();
                    }
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    patternVariable() {
        let _localctx = new PatternVariableContext(this._ctx, this.state);
        this.enterRule(_localctx, 244, FlinkSqlParser.RULE_patternVariable);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1640;
                this.unquotedIdentifier();
                this.state = 1642;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (((((_la - 518)) & ~0x1F) === 0 && ((1 << (_la - 518)) & ((1 << (FlinkSqlParser.LB_BRACKET - 518)) | (1 << (FlinkSqlParser.ASTERISK_SIGN - 518)) | (1 << (FlinkSqlParser.ADD_SIGN - 518)) | (1 << (FlinkSqlParser.QUESTION_MARK_SIGN - 518)))) !== 0)) {
                    {
                        this.state = 1641;
                        this.quantifiers();
                    }
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    outputMode() {
        let _localctx = new OutputModeContext(this._ctx, this.state);
        this.enterRule(_localctx, 246, FlinkSqlParser.RULE_outputMode);
        try {
            this.state = 1652;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case FlinkSqlParser.KW_ALL:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 1644;
                        this.match(FlinkSqlParser.KW_ALL);
                        this.state = 1645;
                        this.match(FlinkSqlParser.KW_ROWS);
                        this.state = 1646;
                        this.match(FlinkSqlParser.KW_PER);
                        this.state = 1647;
                        this.match(FlinkSqlParser.KW_MATCH);
                    }
                    break;
                case FlinkSqlParser.KW_ONE:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 1648;
                        this.match(FlinkSqlParser.KW_ONE);
                        this.state = 1649;
                        this.match(FlinkSqlParser.KW_ROW);
                        this.state = 1650;
                        this.match(FlinkSqlParser.KW_PER);
                        this.state = 1651;
                        this.match(FlinkSqlParser.KW_MATCH);
                    }
                    break;
                default:
                    throw new NoViableAltException.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    afterMatchStrategy() {
        let _localctx = new AfterMatchStrategyContext(this._ctx, this.state);
        this.enterRule(_localctx, 248, FlinkSqlParser.RULE_afterMatchStrategy);
        try {
            this.state = 1678;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 188, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 1654;
                        this.match(FlinkSqlParser.KW_AFTER);
                        this.state = 1655;
                        this.match(FlinkSqlParser.KW_MATCH);
                        this.state = 1656;
                        this.match(FlinkSqlParser.KW_SKIP);
                        this.state = 1657;
                        this.match(FlinkSqlParser.KW_PAST);
                        this.state = 1658;
                        this.match(FlinkSqlParser.KW_LAST);
                        this.state = 1659;
                        this.match(FlinkSqlParser.KW_ROW);
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 1660;
                        this.match(FlinkSqlParser.KW_AFTER);
                        this.state = 1661;
                        this.match(FlinkSqlParser.KW_MATCH);
                        this.state = 1662;
                        this.match(FlinkSqlParser.KW_SKIP);
                        this.state = 1663;
                        this.match(FlinkSqlParser.KW_TO);
                        this.state = 1664;
                        this.match(FlinkSqlParser.KW_NEXT);
                        this.state = 1665;
                        this.match(FlinkSqlParser.KW_ROW);
                    }
                    break;
                case 3:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 1666;
                        this.match(FlinkSqlParser.KW_AFTER);
                        this.state = 1667;
                        this.match(FlinkSqlParser.KW_MATCH);
                        this.state = 1668;
                        this.match(FlinkSqlParser.KW_SKIP);
                        this.state = 1669;
                        this.match(FlinkSqlParser.KW_TO);
                        this.state = 1670;
                        this.match(FlinkSqlParser.KW_LAST);
                        this.state = 1671;
                        this.unquotedIdentifier();
                    }
                    break;
                case 4:
                    this.enterOuterAlt(_localctx, 4);
                    {
                        this.state = 1672;
                        this.match(FlinkSqlParser.KW_AFTER);
                        this.state = 1673;
                        this.match(FlinkSqlParser.KW_MATCH);
                        this.state = 1674;
                        this.match(FlinkSqlParser.KW_SKIP);
                        this.state = 1675;
                        this.match(FlinkSqlParser.KW_TO);
                        this.state = 1676;
                        this.match(FlinkSqlParser.KW_FIRST);
                        this.state = 1677;
                        this.unquotedIdentifier();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    patternVariablesDefination() {
        let _localctx = new PatternVariablesDefinationContext(this._ctx, this.state);
        this.enterRule(_localctx, 250, FlinkSqlParser.RULE_patternVariablesDefination);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1680;
                this.match(FlinkSqlParser.KW_DEFINE);
                this.state = 1681;
                this.projectItemDefinition();
                this.state = 1686;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === FlinkSqlParser.COMMA) {
                    {
                        {
                            this.state = 1682;
                            this.match(FlinkSqlParser.COMMA);
                            this.state = 1683;
                            this.projectItemDefinition();
                        }
                    }
                    this.state = 1688;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    windowFrame() {
        let _localctx = new WindowFrameContext(this._ctx, this.state);
        this.enterRule(_localctx, 252, FlinkSqlParser.RULE_windowFrame);
        try {
            this.state = 1698;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case FlinkSqlParser.KW_RANGE:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 1689;
                        this.match(FlinkSqlParser.KW_RANGE);
                        this.state = 1690;
                        this.match(FlinkSqlParser.KW_BETWEEN);
                        this.state = 1691;
                        this.timeIntervalExpression();
                        this.state = 1692;
                        this.frameBound();
                    }
                    break;
                case FlinkSqlParser.KW_ROWS:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 1694;
                        this.match(FlinkSqlParser.KW_ROWS);
                        this.state = 1695;
                        this.match(FlinkSqlParser.KW_BETWEEN);
                        this.state = 1696;
                        this.match(FlinkSqlParser.DIG_LITERAL);
                        this.state = 1697;
                        this.frameBound();
                    }
                    break;
                default:
                    throw new NoViableAltException.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    frameBound() {
        let _localctx = new FrameBoundContext(this._ctx, this.state);
        this.enterRule(_localctx, 254, FlinkSqlParser.RULE_frameBound);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1700;
                this.match(FlinkSqlParser.KW_PRECEDING);
                this.state = 1701;
                this.match(FlinkSqlParser.KW_AND);
                this.state = 1702;
                this.match(FlinkSqlParser.KW_CURRENT);
                this.state = 1703;
                this.match(FlinkSqlParser.KW_ROW);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    withinClause() {
        let _localctx = new WithinClauseContext(this._ctx, this.state);
        this.enterRule(_localctx, 256, FlinkSqlParser.RULE_withinClause);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1705;
                this.match(FlinkSqlParser.KW_WITHIN);
                this.state = 1706;
                this.timeIntervalExpression();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    expression() {
        let _localctx = new ExpressionContext(this._ctx, this.state);
        this.enterRule(_localctx, 258, FlinkSqlParser.RULE_expression);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1708;
                this.booleanExpression(0);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    booleanExpression(_p) {
        if (_p === undefined) {
            _p = 0;
        }
        let _parentctx = this._ctx;
        let _parentState = this.state;
        let _localctx = new BooleanExpressionContext(this._ctx, _parentState);
        let _prevctx = _localctx;
        let _startState = 260;
        this.enterRecursionRule(_localctx, 260, FlinkSqlParser.RULE_booleanExpression, _p);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1722;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 192, this._ctx)) {
                    case 1:
                        {
                            _localctx = new LogicalNotContext(_localctx);
                            this._ctx = _localctx;
                            _prevctx = _localctx;
                            this.state = 1711;
                            this.match(FlinkSqlParser.KW_NOT);
                            this.state = 1712;
                            this.booleanExpression(6);
                        }
                        break;
                    case 2:
                        {
                            _localctx = new ExistsContext(_localctx);
                            this._ctx = _localctx;
                            _prevctx = _localctx;
                            this.state = 1713;
                            this.match(FlinkSqlParser.KW_EXISTS);
                            this.state = 1714;
                            this.match(FlinkSqlParser.LR_BRACKET);
                            this.state = 1715;
                            this.queryStatement(0);
                            this.state = 1716;
                            this.match(FlinkSqlParser.RR_BRACKET);
                        }
                        break;
                    case 3:
                        {
                            _localctx = new PredicatedContext(_localctx);
                            this._ctx = _localctx;
                            _prevctx = _localctx;
                            this.state = 1718;
                            this.valueExpression(0);
                            this.state = 1720;
                            this._errHandler.sync(this);
                            switch (this.interpreter.adaptivePredict(this._input, 191, this._ctx)) {
                                case 1:
                                    {
                                        this.state = 1719;
                                        this.predicate();
                                    }
                                    break;
                            }
                        }
                        break;
                }
                this._ctx._stop = this._input.tryLT(-1);
                this.state = 1738;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 195, this._ctx);
                while (_alt !== 2 && _alt !== ATN.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        if (this._parseListeners != null) {
                            this.triggerExitRuleEvent();
                        }
                        _prevctx = _localctx;
                        {
                            this.state = 1736;
                            this._errHandler.sync(this);
                            switch (this.interpreter.adaptivePredict(this._input, 194, this._ctx)) {
                                case 1:
                                    {
                                        _localctx = new LogicalBinaryContext(new BooleanExpressionContext(_parentctx, _parentState));
                                        _localctx._left = _prevctx;
                                        this.pushNewRecursionContext(_localctx, _startState, FlinkSqlParser.RULE_booleanExpression);
                                        this.state = 1724;
                                        if (!(this.precpred(this._ctx, 3))) {
                                            throw this.createFailedPredicateException("this.precpred(this._ctx, 3)");
                                        }
                                        this.state = 1725;
                                        _localctx._operator = this.match(FlinkSqlParser.KW_AND);
                                        this.state = 1726;
                                        _localctx._right = this.booleanExpression(4);
                                    }
                                    break;
                                case 2:
                                    {
                                        _localctx = new LogicalBinaryContext(new BooleanExpressionContext(_parentctx, _parentState));
                                        _localctx._left = _prevctx;
                                        this.pushNewRecursionContext(_localctx, _startState, FlinkSqlParser.RULE_booleanExpression);
                                        this.state = 1727;
                                        if (!(this.precpred(this._ctx, 2))) {
                                            throw this.createFailedPredicateException("this.precpred(this._ctx, 2)");
                                        }
                                        this.state = 1728;
                                        _localctx._operator = this.match(FlinkSqlParser.KW_OR);
                                        this.state = 1729;
                                        _localctx._right = this.booleanExpression(3);
                                    }
                                    break;
                                case 3:
                                    {
                                        _localctx = new LogicalNestedContext(new BooleanExpressionContext(_parentctx, _parentState));
                                        this.pushNewRecursionContext(_localctx, _startState, FlinkSqlParser.RULE_booleanExpression);
                                        this.state = 1730;
                                        if (!(this.precpred(this._ctx, 1))) {
                                            throw this.createFailedPredicateException("this.precpred(this._ctx, 1)");
                                        }
                                        this.state = 1731;
                                        this.match(FlinkSqlParser.KW_IS);
                                        this.state = 1733;
                                        this._errHandler.sync(this);
                                        _la = this._input.LA(1);
                                        if (_la === FlinkSqlParser.KW_NOT) {
                                            {
                                                this.state = 1732;
                                                this.match(FlinkSqlParser.KW_NOT);
                                            }
                                        }
                                        this.state = 1735;
                                        _localctx._kind = this._input.LT(1);
                                        _la = this._input.LA(1);
                                        if (!(_la === FlinkSqlParser.KW_FALSE || _la === FlinkSqlParser.KW_NULL || _la === FlinkSqlParser.KW_TRUE || _la === FlinkSqlParser.KW_UNKNOWN)) {
                                            _localctx._kind = this._errHandler.recoverInline(this);
                                        }
                                        else {
                                            if (this._input.LA(1) === Token.Token.EOF) {
                                                this.matchedEOF = true;
                                            }
                                            this._errHandler.reportMatch(this);
                                            this.consume();
                                        }
                                    }
                                    break;
                            }
                        }
                    }
                    this.state = 1740;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 195, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.unrollRecursionContexts(_parentctx);
        }
        return _localctx;
    }
    // @RuleVersion(0)
    predicate() {
        let _localctx = new PredicateContext(this._ctx, this.state);
        this.enterRule(_localctx, 262, FlinkSqlParser.RULE_predicate);
        let _la;
        try {
            this.state = 1808;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 206, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 1742;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === FlinkSqlParser.KW_NOT) {
                            {
                                this.state = 1741;
                                this.match(FlinkSqlParser.KW_NOT);
                            }
                        }
                        this.state = 1744;
                        _localctx._kind = this.match(FlinkSqlParser.KW_BETWEEN);
                        this.state = 1746;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === FlinkSqlParser.KW_ASYMMETRIC || _la === FlinkSqlParser.KW_SYMMETRIC) {
                            {
                                this.state = 1745;
                                _la = this._input.LA(1);
                                if (!(_la === FlinkSqlParser.KW_ASYMMETRIC || _la === FlinkSqlParser.KW_SYMMETRIC)) {
                                    this._errHandler.recoverInline(this);
                                }
                                else {
                                    if (this._input.LA(1) === Token.Token.EOF) {
                                        this.matchedEOF = true;
                                    }
                                    this._errHandler.reportMatch(this);
                                    this.consume();
                                }
                            }
                        }
                        this.state = 1748;
                        _localctx._lower = this.valueExpression(0);
                        this.state = 1749;
                        this.match(FlinkSqlParser.KW_AND);
                        this.state = 1750;
                        _localctx._upper = this.valueExpression(0);
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 1753;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === FlinkSqlParser.KW_NOT) {
                            {
                                this.state = 1752;
                                this.match(FlinkSqlParser.KW_NOT);
                            }
                        }
                        this.state = 1755;
                        _localctx._kind = this.match(FlinkSqlParser.KW_IN);
                        this.state = 1756;
                        this.match(FlinkSqlParser.LR_BRACKET);
                        this.state = 1757;
                        this.expression();
                        this.state = 1762;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        while (_la === FlinkSqlParser.COMMA) {
                            {
                                {
                                    this.state = 1758;
                                    this.match(FlinkSqlParser.COMMA);
                                    this.state = 1759;
                                    this.expression();
                                }
                            }
                            this.state = 1764;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                        }
                        this.state = 1765;
                        this.match(FlinkSqlParser.RR_BRACKET);
                    }
                    break;
                case 3:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 1768;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === FlinkSqlParser.KW_NOT) {
                            {
                                this.state = 1767;
                                this.match(FlinkSqlParser.KW_NOT);
                            }
                        }
                        this.state = 1770;
                        _localctx._kind = this.match(FlinkSqlParser.KW_IN);
                        this.state = 1771;
                        this.match(FlinkSqlParser.LR_BRACKET);
                        this.state = 1772;
                        this.queryStatement(0);
                        this.state = 1773;
                        this.match(FlinkSqlParser.RR_BRACKET);
                    }
                    break;
                case 4:
                    this.enterOuterAlt(_localctx, 4);
                    {
                        this.state = 1775;
                        _localctx._kind = this.match(FlinkSqlParser.KW_EXISTS);
                        this.state = 1776;
                        this.match(FlinkSqlParser.LR_BRACKET);
                        this.state = 1777;
                        this.queryStatement(0);
                        this.state = 1778;
                        this.match(FlinkSqlParser.RR_BRACKET);
                    }
                    break;
                case 5:
                    this.enterOuterAlt(_localctx, 5);
                    {
                        this.state = 1781;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === FlinkSqlParser.KW_NOT) {
                            {
                                this.state = 1780;
                                this.match(FlinkSqlParser.KW_NOT);
                            }
                        }
                        this.state = 1783;
                        _localctx._kind = this.match(FlinkSqlParser.KW_RLIKE);
                        this.state = 1784;
                        _localctx._pattern = this.valueExpression(0);
                    }
                    break;
                case 6:
                    this.enterOuterAlt(_localctx, 6);
                    {
                        this.state = 1785;
                        this.likePredicate();
                    }
                    break;
                case 7:
                    this.enterOuterAlt(_localctx, 7);
                    {
                        this.state = 1786;
                        this.match(FlinkSqlParser.KW_IS);
                        this.state = 1788;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === FlinkSqlParser.KW_NOT) {
                            {
                                this.state = 1787;
                                this.match(FlinkSqlParser.KW_NOT);
                            }
                        }
                        this.state = 1790;
                        _localctx._kind = this._input.LT(1);
                        _la = this._input.LA(1);
                        if (!(_la === FlinkSqlParser.KW_FALSE || _la === FlinkSqlParser.KW_NULL || _la === FlinkSqlParser.KW_TRUE || _la === FlinkSqlParser.KW_UNKNOWN)) {
                            _localctx._kind = this._errHandler.recoverInline(this);
                        }
                        else {
                            if (this._input.LA(1) === Token.Token.EOF) {
                                this.matchedEOF = true;
                            }
                            this._errHandler.reportMatch(this);
                            this.consume();
                        }
                    }
                    break;
                case 8:
                    this.enterOuterAlt(_localctx, 8);
                    {
                        this.state = 1791;
                        this.match(FlinkSqlParser.KW_IS);
                        this.state = 1793;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === FlinkSqlParser.KW_NOT) {
                            {
                                this.state = 1792;
                                this.match(FlinkSqlParser.KW_NOT);
                            }
                        }
                        this.state = 1795;
                        _localctx._kind = this.match(FlinkSqlParser.KW_DISTINCT);
                        this.state = 1796;
                        this.match(FlinkSqlParser.KW_FROM);
                        this.state = 1797;
                        _localctx._right = this.valueExpression(0);
                    }
                    break;
                case 9:
                    this.enterOuterAlt(_localctx, 9);
                    {
                        this.state = 1799;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === FlinkSqlParser.KW_NOT) {
                            {
                                this.state = 1798;
                                this.match(FlinkSqlParser.KW_NOT);
                            }
                        }
                        this.state = 1801;
                        _localctx._kind = this.match(FlinkSqlParser.KW_SIMILAR);
                        this.state = 1802;
                        this.match(FlinkSqlParser.KW_TO);
                        this.state = 1803;
                        _localctx._right = this.valueExpression(0);
                        this.state = 1806;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 205, this._ctx)) {
                            case 1:
                                {
                                    this.state = 1804;
                                    this.match(FlinkSqlParser.KW_ESCAPE);
                                    this.state = 1805;
                                    this.stringLiteral();
                                }
                                break;
                        }
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    likePredicate() {
        let _localctx = new LikePredicateContext(this._ctx, this.state);
        this.enterRule(_localctx, 264, FlinkSqlParser.RULE_likePredicate);
        let _la;
        try {
            this.state = 1839;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 212, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 1811;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === FlinkSqlParser.KW_NOT) {
                            {
                                this.state = 1810;
                                this.match(FlinkSqlParser.KW_NOT);
                            }
                        }
                        this.state = 1813;
                        _localctx._kind = this.match(FlinkSqlParser.KW_LIKE);
                        this.state = 1814;
                        _localctx._quantifier = this._input.LT(1);
                        _la = this._input.LA(1);
                        if (!(_la === FlinkSqlParser.KW_ALL || _la === FlinkSqlParser.KW_ANY)) {
                            _localctx._quantifier = this._errHandler.recoverInline(this);
                        }
                        else {
                            if (this._input.LA(1) === Token.Token.EOF) {
                                this.matchedEOF = true;
                            }
                            this._errHandler.reportMatch(this);
                            this.consume();
                        }
                        this.state = 1828;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 209, this._ctx)) {
                            case 1:
                                {
                                    this.state = 1815;
                                    this.match(FlinkSqlParser.LR_BRACKET);
                                    this.state = 1816;
                                    this.match(FlinkSqlParser.RR_BRACKET);
                                }
                                break;
                            case 2:
                                {
                                    this.state = 1817;
                                    this.match(FlinkSqlParser.LR_BRACKET);
                                    this.state = 1818;
                                    this.expression();
                                    this.state = 1823;
                                    this._errHandler.sync(this);
                                    _la = this._input.LA(1);
                                    while (_la === FlinkSqlParser.COMMA) {
                                        {
                                            {
                                                this.state = 1819;
                                                this.match(FlinkSqlParser.COMMA);
                                                this.state = 1820;
                                                this.expression();
                                            }
                                        }
                                        this.state = 1825;
                                        this._errHandler.sync(this);
                                        _la = this._input.LA(1);
                                    }
                                    this.state = 1826;
                                    this.match(FlinkSqlParser.RR_BRACKET);
                                }
                                break;
                        }
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 1831;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === FlinkSqlParser.KW_NOT) {
                            {
                                this.state = 1830;
                                this.match(FlinkSqlParser.KW_NOT);
                            }
                        }
                        this.state = 1833;
                        _localctx._kind = this.match(FlinkSqlParser.KW_LIKE);
                        this.state = 1834;
                        _localctx._pattern = this.valueExpression(0);
                        this.state = 1837;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 211, this._ctx)) {
                            case 1:
                                {
                                    this.state = 1835;
                                    this.match(FlinkSqlParser.KW_ESCAPE);
                                    this.state = 1836;
                                    this.stringLiteral();
                                }
                                break;
                        }
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    valueExpression(_p) {
        if (_p === undefined) {
            _p = 0;
        }
        let _parentctx = this._ctx;
        let _parentState = this.state;
        let _localctx = new ValueExpressionContext(this._ctx, _parentState);
        let _prevctx = _localctx;
        let _startState = 266;
        this.enterRecursionRule(_localctx, 266, FlinkSqlParser.RULE_valueExpression, _p);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1845;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 213, this._ctx)) {
                    case 1:
                        {
                            _localctx = new ValueExpressionDefaultContext(_localctx);
                            this._ctx = _localctx;
                            _prevctx = _localctx;
                            this.state = 1842;
                            this.primaryExpression(0);
                        }
                        break;
                    case 2:
                        {
                            _localctx = new ArithmeticUnaryContext(_localctx);
                            this._ctx = _localctx;
                            _prevctx = _localctx;
                            this.state = 1843;
                            _localctx._operator = this._input.LT(1);
                            _la = this._input.LA(1);
                            if (!(((((_la - 509)) & ~0x1F) === 0 && ((1 << (_la - 509)) & ((1 << (FlinkSqlParser.BIT_NOT_OP - 509)) | (1 << (FlinkSqlParser.HYPNEN_SIGN - 509)) | (1 << (FlinkSqlParser.ADD_SIGN - 509)))) !== 0))) {
                                _localctx._operator = this._errHandler.recoverInline(this);
                            }
                            else {
                                if (this._input.LA(1) === Token.Token.EOF) {
                                    this.matchedEOF = true;
                                }
                                this._errHandler.reportMatch(this);
                                this.consume();
                            }
                            this.state = 1844;
                            this.valueExpression(7);
                        }
                        break;
                }
                this._ctx._stop = this._input.tryLT(-1);
                this.state = 1868;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 215, this._ctx);
                while (_alt !== 2 && _alt !== ATN.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        if (this._parseListeners != null) {
                            this.triggerExitRuleEvent();
                        }
                        _prevctx = _localctx;
                        {
                            this.state = 1866;
                            this._errHandler.sync(this);
                            switch (this.interpreter.adaptivePredict(this._input, 214, this._ctx)) {
                                case 1:
                                    {
                                        _localctx = new ArithmeticBinaryContext(new ValueExpressionContext(_parentctx, _parentState));
                                        _localctx._left = _prevctx;
                                        this.pushNewRecursionContext(_localctx, _startState, FlinkSqlParser.RULE_valueExpression);
                                        this.state = 1847;
                                        if (!(this.precpred(this._ctx, 6))) {
                                            throw this.createFailedPredicateException("this.precpred(this._ctx, 6)");
                                        }
                                        this.state = 1848;
                                        _localctx._operator = this._input.LT(1);
                                        _la = this._input.LA(1);
                                        if (!(_la === FlinkSqlParser.KW_DIV || ((((_la - 527)) & ~0x1F) === 0 && ((1 << (_la - 527)) & ((1 << (FlinkSqlParser.ASTERISK_SIGN - 527)) | (1 << (FlinkSqlParser.PENCENT_SIGN - 527)) | (1 << (FlinkSqlParser.SLASH_SIGN - 527)))) !== 0))) {
                                            _localctx._operator = this._errHandler.recoverInline(this);
                                        }
                                        else {
                                            if (this._input.LA(1) === Token.Token.EOF) {
                                                this.matchedEOF = true;
                                            }
                                            this._errHandler.reportMatch(this);
                                            this.consume();
                                        }
                                        this.state = 1849;
                                        _localctx._right = this.valueExpression(7);
                                    }
                                    break;
                                case 2:
                                    {
                                        _localctx = new ArithmeticBinaryContext(new ValueExpressionContext(_parentctx, _parentState));
                                        _localctx._left = _prevctx;
                                        this.pushNewRecursionContext(_localctx, _startState, FlinkSqlParser.RULE_valueExpression);
                                        this.state = 1850;
                                        if (!(this.precpred(this._ctx, 5))) {
                                            throw this.createFailedPredicateException("this.precpred(this._ctx, 5)");
                                        }
                                        this.state = 1851;
                                        _localctx._operator = this._input.LT(1);
                                        _la = this._input.LA(1);
                                        if (!(((((_la - 529)) & ~0x1F) === 0 && ((1 << (_la - 529)) & ((1 << (FlinkSqlParser.HYPNEN_SIGN - 529)) | (1 << (FlinkSqlParser.ADD_SIGN - 529)) | (1 << (FlinkSqlParser.DOUBLE_VERTICAL_SIGN - 529)))) !== 0))) {
                                            _localctx._operator = this._errHandler.recoverInline(this);
                                        }
                                        else {
                                            if (this._input.LA(1) === Token.Token.EOF) {
                                                this.matchedEOF = true;
                                            }
                                            this._errHandler.reportMatch(this);
                                            this.consume();
                                        }
                                        this.state = 1852;
                                        _localctx._right = this.valueExpression(6);
                                    }
                                    break;
                                case 3:
                                    {
                                        _localctx = new ArithmeticBinaryContext(new ValueExpressionContext(_parentctx, _parentState));
                                        _localctx._left = _prevctx;
                                        this.pushNewRecursionContext(_localctx, _startState, FlinkSqlParser.RULE_valueExpression);
                                        this.state = 1853;
                                        if (!(this.precpred(this._ctx, 4))) {
                                            throw this.createFailedPredicateException("this.precpred(this._ctx, 4)");
                                        }
                                        this.state = 1854;
                                        _localctx._operator = this.match(FlinkSqlParser.BIT_AND_OP);
                                        this.state = 1855;
                                        _localctx._right = this.valueExpression(5);
                                    }
                                    break;
                                case 4:
                                    {
                                        _localctx = new ArithmeticBinaryContext(new ValueExpressionContext(_parentctx, _parentState));
                                        _localctx._left = _prevctx;
                                        this.pushNewRecursionContext(_localctx, _startState, FlinkSqlParser.RULE_valueExpression);
                                        this.state = 1856;
                                        if (!(this.precpred(this._ctx, 3))) {
                                            throw this.createFailedPredicateException("this.precpred(this._ctx, 3)");
                                        }
                                        this.state = 1857;
                                        _localctx._operator = this.match(FlinkSqlParser.BIT_XOR_OP);
                                        this.state = 1858;
                                        _localctx._right = this.valueExpression(4);
                                    }
                                    break;
                                case 5:
                                    {
                                        _localctx = new ArithmeticBinaryContext(new ValueExpressionContext(_parentctx, _parentState));
                                        _localctx._left = _prevctx;
                                        this.pushNewRecursionContext(_localctx, _startState, FlinkSqlParser.RULE_valueExpression);
                                        this.state = 1859;
                                        if (!(this.precpred(this._ctx, 2))) {
                                            throw this.createFailedPredicateException("this.precpred(this._ctx, 2)");
                                        }
                                        this.state = 1860;
                                        _localctx._operator = this.match(FlinkSqlParser.BIT_OR_OP);
                                        this.state = 1861;
                                        _localctx._right = this.valueExpression(3);
                                    }
                                    break;
                                case 6:
                                    {
                                        _localctx = new ComparisonContext(new ValueExpressionContext(_parentctx, _parentState));
                                        _localctx._left = _prevctx;
                                        this.pushNewRecursionContext(_localctx, _startState, FlinkSqlParser.RULE_valueExpression);
                                        this.state = 1862;
                                        if (!(this.precpred(this._ctx, 1))) {
                                            throw this.createFailedPredicateException("this.precpred(this._ctx, 1)");
                                        }
                                        this.state = 1863;
                                        this.comparisonOperator();
                                        this.state = 1864;
                                        _localctx._right = this.valueExpression(2);
                                    }
                                    break;
                            }
                        }
                    }
                    this.state = 1870;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 215, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.unrollRecursionContexts(_parentctx);
        }
        return _localctx;
    }
    // @RuleVersion(0)
    primaryExpression(_p) {
        if (_p === undefined) {
            _p = 0;
        }
        let _parentctx = this._ctx;
        let _parentState = this.state;
        let _localctx = new PrimaryExpressionContext(this._ctx, _parentState);
        let _prevctx = _localctx;
        let _startState = 268;
        this.enterRecursionRule(_localctx, 268, FlinkSqlParser.RULE_primaryExpression, _p);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1963;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 225, this._ctx)) {
                    case 1:
                        {
                            _localctx = new SearchedCaseContext(_localctx);
                            this._ctx = _localctx;
                            _prevctx = _localctx;
                            this.state = 1872;
                            this.match(FlinkSqlParser.KW_CASE);
                            this.state = 1874;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            do {
                                {
                                    {
                                        this.state = 1873;
                                        this.whenClause();
                                    }
                                }
                                this.state = 1876;
                                this._errHandler.sync(this);
                                _la = this._input.LA(1);
                            } while (_la === FlinkSqlParser.KW_WHEN);
                            this.state = 1880;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            if (_la === FlinkSqlParser.KW_ELSE) {
                                {
                                    this.state = 1878;
                                    this.match(FlinkSqlParser.KW_ELSE);
                                    this.state = 1879;
                                    _localctx._elseExpression = this.expression();
                                }
                            }
                            this.state = 1882;
                            this.match(FlinkSqlParser.KW_END);
                        }
                        break;
                    case 2:
                        {
                            _localctx = new SimpleCaseContext(_localctx);
                            this._ctx = _localctx;
                            _prevctx = _localctx;
                            this.state = 1884;
                            this.match(FlinkSqlParser.KW_CASE);
                            this.state = 1885;
                            _localctx._value = this.expression();
                            this.state = 1887;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            do {
                                {
                                    {
                                        this.state = 1886;
                                        this.whenClause();
                                    }
                                }
                                this.state = 1889;
                                this._errHandler.sync(this);
                                _la = this._input.LA(1);
                            } while (_la === FlinkSqlParser.KW_WHEN);
                            this.state = 1893;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            if (_la === FlinkSqlParser.KW_ELSE) {
                                {
                                    this.state = 1891;
                                    this.match(FlinkSqlParser.KW_ELSE);
                                    this.state = 1892;
                                    _localctx._elseExpression = this.expression();
                                }
                            }
                            this.state = 1895;
                            this.match(FlinkSqlParser.KW_END);
                        }
                        break;
                    case 3:
                        {
                            _localctx = new CastContext(_localctx);
                            this._ctx = _localctx;
                            _prevctx = _localctx;
                            this.state = 1897;
                            this.match(FlinkSqlParser.KW_CAST);
                            this.state = 1898;
                            this.match(FlinkSqlParser.LR_BRACKET);
                            this.state = 1899;
                            this.expression();
                            this.state = 1900;
                            this.match(FlinkSqlParser.KW_AS);
                            this.state = 1901;
                            this.columnType();
                            this.state = 1902;
                            this.match(FlinkSqlParser.RR_BRACKET);
                        }
                        break;
                    case 4:
                        {
                            _localctx = new FirstContext(_localctx);
                            this._ctx = _localctx;
                            _prevctx = _localctx;
                            this.state = 1904;
                            this.match(FlinkSqlParser.KW_FIRST);
                            this.state = 1905;
                            this.match(FlinkSqlParser.LR_BRACKET);
                            this.state = 1906;
                            this.expression();
                            this.state = 1909;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            if (_la === FlinkSqlParser.KW_IGNORE) {
                                {
                                    this.state = 1907;
                                    this.match(FlinkSqlParser.KW_IGNORE);
                                    this.state = 1908;
                                    this.match(FlinkSqlParser.KW_NULLS);
                                }
                            }
                            this.state = 1911;
                            this.match(FlinkSqlParser.RR_BRACKET);
                        }
                        break;
                    case 5:
                        {
                            _localctx = new LastContext(_localctx);
                            this._ctx = _localctx;
                            _prevctx = _localctx;
                            this.state = 1913;
                            this.match(FlinkSqlParser.KW_LAST);
                            this.state = 1914;
                            this.match(FlinkSqlParser.LR_BRACKET);
                            this.state = 1915;
                            this.expression();
                            this.state = 1918;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            if (_la === FlinkSqlParser.KW_IGNORE) {
                                {
                                    this.state = 1916;
                                    this.match(FlinkSqlParser.KW_IGNORE);
                                    this.state = 1917;
                                    this.match(FlinkSqlParser.KW_NULLS);
                                }
                            }
                            this.state = 1920;
                            this.match(FlinkSqlParser.RR_BRACKET);
                        }
                        break;
                    case 6:
                        {
                            _localctx = new PositionContext(_localctx);
                            this._ctx = _localctx;
                            _prevctx = _localctx;
                            this.state = 1922;
                            this.match(FlinkSqlParser.KW_POSITION);
                            this.state = 1923;
                            this.match(FlinkSqlParser.LR_BRACKET);
                            this.state = 1924;
                            _localctx._substr = this.valueExpression(0);
                            this.state = 1925;
                            this.match(FlinkSqlParser.KW_IN);
                            this.state = 1926;
                            _localctx._str = this.valueExpression(0);
                            this.state = 1927;
                            this.match(FlinkSqlParser.RR_BRACKET);
                        }
                        break;
                    case 7:
                        {
                            _localctx = new ConstantDefaultContext(_localctx);
                            this._ctx = _localctx;
                            _prevctx = _localctx;
                            this.state = 1929;
                            this.constant();
                        }
                        break;
                    case 8:
                        {
                            _localctx = new StarContext(_localctx);
                            this._ctx = _localctx;
                            _prevctx = _localctx;
                            this.state = 1930;
                            this.match(FlinkSqlParser.ASTERISK_SIGN);
                        }
                        break;
                    case 9:
                        {
                            _localctx = new StarContext(_localctx);
                            this._ctx = _localctx;
                            _prevctx = _localctx;
                            this.state = 1931;
                            this.uid();
                            this.state = 1932;
                            this.match(FlinkSqlParser.DOT);
                            this.state = 1933;
                            this.match(FlinkSqlParser.ASTERISK_SIGN);
                        }
                        break;
                    case 10:
                        {
                            _localctx = new SubqueryExpressionContext(_localctx);
                            this._ctx = _localctx;
                            _prevctx = _localctx;
                            this.state = 1935;
                            this.match(FlinkSqlParser.LR_BRACKET);
                            this.state = 1936;
                            this.queryStatement(0);
                            this.state = 1937;
                            this.match(FlinkSqlParser.RR_BRACKET);
                        }
                        break;
                    case 11:
                        {
                            _localctx = new FunctionCallContext(_localctx);
                            this._ctx = _localctx;
                            _prevctx = _localctx;
                            this.state = 1939;
                            this.functionName();
                            this.state = 1940;
                            this.match(FlinkSqlParser.LR_BRACKET);
                            this.state = 1952;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            if ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << FlinkSqlParser.KW_ABS) | (1 << FlinkSqlParser.KW_ALL) | (1 << FlinkSqlParser.KW_ARRAY) | (1 << FlinkSqlParser.KW_AVG))) !== 0) || ((((_la - 33)) & ~0x1F) === 0 && ((1 << (_la - 33)) & ((1 << (FlinkSqlParser.KW_BOTH - 33)) | (1 << (FlinkSqlParser.KW_CARDINALITY - 33)) | (1 << (FlinkSqlParser.KW_CASE - 33)) | (1 << (FlinkSqlParser.KW_CAST - 33)) | (1 << (FlinkSqlParser.KW_CEIL - 33)) | (1 << (FlinkSqlParser.KW_CEILING - 33)) | (1 << (FlinkSqlParser.KW_COALESCE - 33)) | (1 << (FlinkSqlParser.KW_COLLECT - 33)))) !== 0) || ((((_la - 69)) & ~0x1F) === 0 && ((1 << (_la - 69)) & ((1 << (FlinkSqlParser.KW_COUNT - 69)) | (1 << (FlinkSqlParser.KW_CUME_DIST - 69)) | (1 << (FlinkSqlParser.KW_CURRENT_DATE - 69)) | (1 << (FlinkSqlParser.KW_CURRENT_TIME - 69)) | (1 << (FlinkSqlParser.KW_CURRENT_TIMESTAMP - 69)) | (1 << (FlinkSqlParser.KW_DATE - 69)) | (1 << (FlinkSqlParser.KW_DAY - 69)) | (1 << (FlinkSqlParser.KW_DAYOFWEEK - 69)) | (1 << (FlinkSqlParser.KW_DAYOFYEAR - 69)))) !== 0) || ((((_la - 107)) & ~0x1F) === 0 && ((1 << (_la - 107)) & ((1 << (FlinkSqlParser.KW_DENSE_RANK - 107)) | (1 << (FlinkSqlParser.KW_DISTINCT - 107)) | (1 << (FlinkSqlParser.KW_ELEMENT - 107)) | (1 << (FlinkSqlParser.KW_EXISTS - 107)) | (1 << (FlinkSqlParser.KW_EXP - 107)))) !== 0) || ((((_la - 139)) & ~0x1F) === 0 && ((1 << (_la - 139)) & ((1 << (FlinkSqlParser.KW_EXTRACT - 139)) | (1 << (FlinkSqlParser.KW_FALSE - 139)) | (1 << (FlinkSqlParser.KW_FIRST_VALUE - 139)) | (1 << (FlinkSqlParser.KW_FLOOR - 139)) | (1 << (FlinkSqlParser.KW_GROUPING - 139)) | (1 << (FlinkSqlParser.KW_HOUR - 139)) | (1 << (FlinkSqlParser.KW_IF - 139)))) !== 0) || ((((_la - 182)) & ~0x1F) === 0 && ((1 << (_la - 182)) & ((1 << (FlinkSqlParser.KW_INTERVAL - 182)) | (1 << (FlinkSqlParser.KW_LAG - 182)) | (1 << (FlinkSqlParser.KW_LAST_VALUE - 182)) | (1 << (FlinkSqlParser.KW_LEAD - 182)) | (1 << (FlinkSqlParser.KW_LEADING - 182)) | (1 << (FlinkSqlParser.KW_LEFT - 182)) | (1 << (FlinkSqlParser.KW_LN - 182)) | (1 << (FlinkSqlParser.KW_LOCALTIME - 182)) | (1 << (FlinkSqlParser.KW_LOCALTIMESTAMP - 182)) | (1 << (FlinkSqlParser.KW_LOWER - 182)))) !== 0) || ((((_la - 214)) & ~0x1F) === 0 && ((1 << (_la - 214)) & ((1 << (FlinkSqlParser.KW_MAX - 214)) | (1 << (FlinkSqlParser.KW_MIN - 214)) | (1 << (FlinkSqlParser.KW_MINUTE - 214)) | (1 << (FlinkSqlParser.KW_MOD - 214)) | (1 << (FlinkSqlParser.KW_MONTH - 214)) | (1 << (FlinkSqlParser.KW_NOT - 214)) | (1 << (FlinkSqlParser.KW_NTILE - 214)) | (1 << (FlinkSqlParser.KW_NULL - 214)) | (1 << (FlinkSqlParser.KW_NULLIF - 214)))) !== 0) || ((((_la - 264)) & ~0x1F) === 0 && ((1 << (_la - 264)) & ((1 << (FlinkSqlParser.KW_OVERLAY - 264)) | (1 << (FlinkSqlParser.KW_PERCENT_RANK - 264)) | (1 << (FlinkSqlParser.KW_POSITION - 264)) | (1 << (FlinkSqlParser.KW_POWER - 264)) | (1 << (FlinkSqlParser.KW_RANK - 264)))) !== 0) || ((((_la - 317)) & ~0x1F) === 0 && ((1 << (_la - 317)) & ((1 << (FlinkSqlParser.KW_RIGHT - 317)) | (1 << (FlinkSqlParser.KW_ROW - 317)) | (1 << (FlinkSqlParser.KW_ROWS - 317)) | (1 << (FlinkSqlParser.KW_ROW_NUMBER - 317)) | (1 << (FlinkSqlParser.KW_SECOND - 317)))) !== 0) || ((((_la - 357)) & ~0x1F) === 0 && ((1 << (_la - 357)) & ((1 << (FlinkSqlParser.KW_STDDEV_POP - 357)) | (1 << (FlinkSqlParser.KW_STDDEV_SAMP - 357)) | (1 << (FlinkSqlParser.KW_SUBSTRING - 357)) | (1 << (FlinkSqlParser.KW_SUM - 357)) | (1 << (FlinkSqlParser.KW_TIME - 357)) | (1 << (FlinkSqlParser.KW_TIMESTAMP - 357)) | (1 << (FlinkSqlParser.KW_TIMESTAMP_DIFF - 357)))) !== 0) || ((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & ((1 << (FlinkSqlParser.KW_TRAILING - 389)) | (1 << (FlinkSqlParser.KW_TRIM - 389)) | (1 << (FlinkSqlParser.KW_TRUE - 389)) | (1 << (FlinkSqlParser.KW_TRUNCATE - 389)) | (1 << (FlinkSqlParser.KW_TRY_CAST - 389)) | (1 << (FlinkSqlParser.KW_UPPER - 389)) | (1 << (FlinkSqlParser.KW_VALUE - 389)) | (1 << (FlinkSqlParser.KW_VAR_POP - 389)) | (1 << (FlinkSqlParser.KW_VAR_SAMP - 389)))) !== 0) || ((((_la - 427)) & ~0x1F) === 0 && ((1 << (_la - 427)) & ((1 << (FlinkSqlParser.KW_WEEKS - 427)) | (1 << (FlinkSqlParser.KW_YEAR - 427)) | (1 << (FlinkSqlParser.KW_ADD - 427)) | (1 << (FlinkSqlParser.KW_AFTER - 427)) | (1 << (FlinkSqlParser.KW_ASC - 427)) | (1 << (FlinkSqlParser.KW_CASCADE - 427)) | (1 << (FlinkSqlParser.KW_CATALOG - 427)) | (1 << (FlinkSqlParser.KW_CENTURY - 427)) | (1 << (FlinkSqlParser.KW_CONFIG - 427)) | (1 << (FlinkSqlParser.KW_CONSTRAINTS - 427)) | (1 << (FlinkSqlParser.KW_CUMULATE - 427)) | (1 << (FlinkSqlParser.KW_DATA - 427)) | (1 << (FlinkSqlParser.KW_DATABASE - 427)) | (1 << (FlinkSqlParser.KW_DAYS - 427)) | (1 << (FlinkSqlParser.KW_DECADE - 427)) | (1 << (FlinkSqlParser.KW_DESC - 427)) | (1 << (FlinkSqlParser.KW_DESCRIPTOR - 427)) | (1 << (FlinkSqlParser.KW_DIV - 427)) | (1 << (FlinkSqlParser.KW_ENGINE - 427)) | (1 << (FlinkSqlParser.KW_EPOCH - 427)) | (1 << (FlinkSqlParser.KW_EXCLUDING - 427)) | (1 << (FlinkSqlParser.KW_FILE - 427)) | (1 << (FlinkSqlParser.KW_FIRST - 427)) | (1 << (FlinkSqlParser.KW_GENERATED - 427)))) !== 0) || ((((_la - 459)) & ~0x1F) === 0 && ((1 << (_la - 459)) & ((1 << (FlinkSqlParser.KW_HOP - 459)) | (1 << (FlinkSqlParser.KW_HOURS - 459)) | (1 << (FlinkSqlParser.KW_IGNORE - 459)) | (1 << (FlinkSqlParser.KW_INCLUDING - 459)) | (1 << (FlinkSqlParser.KW_JAR - 459)) | (1 << (FlinkSqlParser.KW_JARS - 459)) | (1 << (FlinkSqlParser.KW_JAVA - 459)) | (1 << (FlinkSqlParser.KW_KEY - 459)) | (1 << (FlinkSqlParser.KW_LAST - 459)) | (1 << (FlinkSqlParser.KW_LOAD - 459)) | (1 << (FlinkSqlParser.KW_MAP - 459)) | (1 << (FlinkSqlParser.KW_MICROSECOND - 459)) | (1 << (FlinkSqlParser.KW_MILLENNIUM - 459)) | (1 << (FlinkSqlParser.KW_MILLISECOND - 459)) | (1 << (FlinkSqlParser.KW_MINUTES - 459)) | (1 << (FlinkSqlParser.KW_MONTHS - 459)) | (1 << (FlinkSqlParser.KW_NANOSECOND - 459)) | (1 << (FlinkSqlParser.KW_NULLS - 459)) | (1 << (FlinkSqlParser.KW_OPTIONS - 459)) | (1 << (FlinkSqlParser.KW_PAST - 459)) | (1 << (FlinkSqlParser.KW_PLAN - 459)) | (1 << (FlinkSqlParser.KW_PRECEDING - 459)) | (1 << (FlinkSqlParser.KW_PYTHON - 459)) | (1 << (FlinkSqlParser.KW_PYTHON_ARCHIVES - 459)) | (1 << (FlinkSqlParser.KW_PYTHON_DEPENDENCIES - 459)) | (1 << (FlinkSqlParser.KW_PYTHON_FILES - 459)) | (1 << (FlinkSqlParser.KW_PYTHON_JAR - 459)) | (1 << (FlinkSqlParser.KW_PYTHON_PARAMETER - 459)) | (1 << (FlinkSqlParser.KW_PYTHON_REQUIREMENTS - 459)) | (1 << (FlinkSqlParser.KW_QUARTER - 459)) | (1 << (FlinkSqlParser.KW_REMOVE - 459)) | (1 << (FlinkSqlParser.KW_RESTRICT - 459)))) !== 0) || ((((_la - 491)) & ~0x1F) === 0 && ((1 << (_la - 491)) & ((1 << (FlinkSqlParser.KW_SECONDS - 491)) | (1 << (FlinkSqlParser.KW_SESSION - 491)) | (1 << (FlinkSqlParser.KW_SETS - 491)) | (1 << (FlinkSqlParser.KW_SIZE - 491)) | (1 << (FlinkSqlParser.KW_SLIDE - 491)) | (1 << (FlinkSqlParser.KW_STEP - 491)) | (1 << (FlinkSqlParser.KW_TEMPORARY - 491)) | (1 << (FlinkSqlParser.KW_TIMECOL - 491)) | (1 << (FlinkSqlParser.KW_TUMBLE - 491)) | (1 << (FlinkSqlParser.KW_UNLOAD - 491)) | (1 << (FlinkSqlParser.KW_VIEW - 491)) | (1 << (FlinkSqlParser.KW_WEEK - 491)) | (1 << (FlinkSqlParser.KW_YEARS - 491)) | (1 << (FlinkSqlParser.KW_ZONE - 491)) | (1 << (FlinkSqlParser.BIT_NOT_OP - 491)) | (1 << (FlinkSqlParser.LR_BRACKET - 491)))) !== 0) || ((((_la - 527)) & ~0x1F) === 0 && ((1 << (_la - 527)) & ((1 << (FlinkSqlParser.ASTERISK_SIGN - 527)) | (1 << (FlinkSqlParser.HYPNEN_SIGN - 527)) | (1 << (FlinkSqlParser.ADD_SIGN - 527)) | (1 << (FlinkSqlParser.STRING_LITERAL - 527)) | (1 << (FlinkSqlParser.DIG_LITERAL - 527)) | (1 << (FlinkSqlParser.REAL_LITERAL - 527)) | (1 << (FlinkSqlParser.BIT_STRING - 527)) | (1 << (FlinkSqlParser.ID_LITERAL - 527)))) !== 0)) {
                                {
                                    this.state = 1942;
                                    this._errHandler.sync(this);
                                    switch (this.interpreter.adaptivePredict(this._input, 222, this._ctx)) {
                                        case 1:
                                            {
                                                this.state = 1941;
                                                this.setQuantifier();
                                            }
                                            break;
                                    }
                                    this.state = 1944;
                                    this.functionParam();
                                    this.state = 1949;
                                    this._errHandler.sync(this);
                                    _la = this._input.LA(1);
                                    while (_la === FlinkSqlParser.COMMA) {
                                        {
                                            {
                                                this.state = 1945;
                                                this.match(FlinkSqlParser.COMMA);
                                                this.state = 1946;
                                                this.functionParam();
                                            }
                                        }
                                        this.state = 1951;
                                        this._errHandler.sync(this);
                                        _la = this._input.LA(1);
                                    }
                                }
                            }
                            this.state = 1954;
                            this.match(FlinkSqlParser.RR_BRACKET);
                        }
                        break;
                    case 12:
                        {
                            _localctx = new ColumnReferenceContext(_localctx);
                            this._ctx = _localctx;
                            _prevctx = _localctx;
                            this.state = 1956;
                            this.identifier();
                        }
                        break;
                    case 13:
                        {
                            _localctx = new DereferenceContext(_localctx);
                            this._ctx = _localctx;
                            _prevctx = _localctx;
                            this.state = 1957;
                            this.dereferenceDefinition();
                        }
                        break;
                    case 14:
                        {
                            _localctx = new ParenthesizedExpressionContext(_localctx);
                            this._ctx = _localctx;
                            _prevctx = _localctx;
                            this.state = 1958;
                            this.match(FlinkSqlParser.LR_BRACKET);
                            this.state = 1959;
                            this.expression();
                            this.state = 1960;
                            this.match(FlinkSqlParser.RR_BRACKET);
                        }
                        break;
                    case 15:
                        {
                            _localctx = new DateFunctionExpressionContext(_localctx);
                            this._ctx = _localctx;
                            _prevctx = _localctx;
                            this.state = 1962;
                            this.match(FlinkSqlParser.KW_CURRENT_TIMESTAMP);
                        }
                        break;
                }
                this._ctx._stop = this._input.tryLT(-1);
                this.state = 1972;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 226, this._ctx);
                while (_alt !== 2 && _alt !== ATN.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        if (this._parseListeners != null) {
                            this.triggerExitRuleEvent();
                        }
                        _prevctx = _localctx;
                        {
                            {
                                _localctx = new SubscriptContext(new PrimaryExpressionContext(_parentctx, _parentState));
                                _localctx._value = _prevctx;
                                this.pushNewRecursionContext(_localctx, _startState, FlinkSqlParser.RULE_primaryExpression);
                                this.state = 1965;
                                if (!(this.precpred(this._ctx, 5))) {
                                    throw this.createFailedPredicateException("this.precpred(this._ctx, 5)");
                                }
                                this.state = 1966;
                                this.match(FlinkSqlParser.LS_BRACKET);
                                this.state = 1967;
                                _localctx._index = this.valueExpression(0);
                                this.state = 1968;
                                this.match(FlinkSqlParser.RS_BRACKET);
                            }
                        }
                    }
                    this.state = 1974;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 226, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.unrollRecursionContexts(_parentctx);
        }
        return _localctx;
    }
    // @RuleVersion(0)
    functionNameCreate() {
        let _localctx = new FunctionNameCreateContext(this._ctx, this.state);
        this.enterRule(_localctx, 270, FlinkSqlParser.RULE_functionNameCreate);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1975;
                this.uid();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    functionName() {
        let _localctx = new FunctionNameContext(this._ctx, this.state);
        this.enterRule(_localctx, 272, FlinkSqlParser.RULE_functionName);
        try {
            this.state = 1979;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 227, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 1977;
                        this.reservedKeywordsUsedAsFuncName();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 1978;
                        this.uid();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    functionParam() {
        let _localctx = new FunctionParamContext(this._ctx, this.state);
        this.enterRule(_localctx, 274, FlinkSqlParser.RULE_functionParam);
        try {
            this.state = 1985;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 228, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 1981;
                        this.reservedKeywordsUsedAsFuncParam();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 1982;
                        this.timeIntervalUnit();
                    }
                    break;
                case 3:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 1983;
                        this.timePointUnit();
                    }
                    break;
                case 4:
                    this.enterOuterAlt(_localctx, 4);
                    {
                        this.state = 1984;
                        this.expression();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    dereferenceDefinition() {
        let _localctx = new DereferenceDefinitionContext(this._ctx, this.state);
        this.enterRule(_localctx, 276, FlinkSqlParser.RULE_dereferenceDefinition);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1987;
                this.uid();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    correlationName() {
        let _localctx = new CorrelationNameContext(this._ctx, this.state);
        this.enterRule(_localctx, 278, FlinkSqlParser.RULE_correlationName);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1989;
                this.identifier();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    qualifiedName() {
        let _localctx = new QualifiedNameContext(this._ctx, this.state);
        this.enterRule(_localctx, 280, FlinkSqlParser.RULE_qualifiedName);
        try {
            this.state = 1993;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 229, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 1991;
                        this.identifier();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 1992;
                        this.dereferenceDefinition();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    timeIntervalExpression() {
        let _localctx = new TimeIntervalExpressionContext(this._ctx, this.state);
        this.enterRule(_localctx, 282, FlinkSqlParser.RULE_timeIntervalExpression);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 1995;
                this.match(FlinkSqlParser.KW_INTERVAL);
                this.state = 1998;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 230, this._ctx)) {
                    case 1:
                        {
                            this.state = 1996;
                            this.errorCapturingMultiUnitsInterval();
                        }
                        break;
                    case 2:
                        {
                            this.state = 1997;
                            this.errorCapturingUnitToUnitInterval();
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    errorCapturingMultiUnitsInterval() {
        let _localctx = new ErrorCapturingMultiUnitsIntervalContext(this._ctx, this.state);
        this.enterRule(_localctx, 284, FlinkSqlParser.RULE_errorCapturingMultiUnitsInterval);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2000;
                this.multiUnitsInterval();
                this.state = 2002;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 231, this._ctx)) {
                    case 1:
                        {
                            this.state = 2001;
                            this.unitToUnitInterval();
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    multiUnitsInterval() {
        let _localctx = new MultiUnitsIntervalContext(this._ctx, this.state);
        this.enterRule(_localctx, 286, FlinkSqlParser.RULE_multiUnitsInterval);
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2007;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 2004;
                                    this.intervalValue();
                                    this.state = 2005;
                                    this.timeIntervalUnit();
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException.NoViableAltException(this);
                    }
                    this.state = 2009;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 232, this._ctx);
                } while (_alt !== 2 && _alt !== ATN.ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    errorCapturingUnitToUnitInterval() {
        let _localctx = new ErrorCapturingUnitToUnitIntervalContext(this._ctx, this.state);
        this.enterRule(_localctx, 288, FlinkSqlParser.RULE_errorCapturingUnitToUnitInterval);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2011;
                _localctx._body = this.unitToUnitInterval();
                this.state = 2014;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 233, this._ctx)) {
                    case 1:
                        {
                            this.state = 2012;
                            _localctx._error1 = this.multiUnitsInterval();
                        }
                        break;
                    case 2:
                        {
                            this.state = 2013;
                            _localctx._error2 = this.unitToUnitInterval();
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    unitToUnitInterval() {
        let _localctx = new UnitToUnitIntervalContext(this._ctx, this.state);
        this.enterRule(_localctx, 290, FlinkSqlParser.RULE_unitToUnitInterval);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2016;
                _localctx._value = this.intervalValue();
                this.state = 2017;
                _localctx._from = this.timeIntervalUnit();
                this.state = 2018;
                this.match(FlinkSqlParser.KW_TO);
                this.state = 2019;
                _localctx._to = this.timeIntervalUnit();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    intervalValue() {
        let _localctx = new IntervalValueContext(this._ctx, this.state);
        this.enterRule(_localctx, 292, FlinkSqlParser.RULE_intervalValue);
        let _la;
        try {
            this.state = 2026;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case FlinkSqlParser.HYPNEN_SIGN:
                case FlinkSqlParser.ADD_SIGN:
                case FlinkSqlParser.DIG_LITERAL:
                case FlinkSqlParser.REAL_LITERAL:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 2022;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === FlinkSqlParser.HYPNEN_SIGN || _la === FlinkSqlParser.ADD_SIGN) {
                            {
                                this.state = 2021;
                                _la = this._input.LA(1);
                                if (!(_la === FlinkSqlParser.HYPNEN_SIGN || _la === FlinkSqlParser.ADD_SIGN)) {
                                    this._errHandler.recoverInline(this);
                                }
                                else {
                                    if (this._input.LA(1) === Token.Token.EOF) {
                                        this.matchedEOF = true;
                                    }
                                    this._errHandler.reportMatch(this);
                                    this.consume();
                                }
                            }
                        }
                        this.state = 2024;
                        _la = this._input.LA(1);
                        if (!(_la === FlinkSqlParser.DIG_LITERAL || _la === FlinkSqlParser.REAL_LITERAL)) {
                            this._errHandler.recoverInline(this);
                        }
                        else {
                            if (this._input.LA(1) === Token.Token.EOF) {
                                this.matchedEOF = true;
                            }
                            this._errHandler.reportMatch(this);
                            this.consume();
                        }
                    }
                    break;
                case FlinkSqlParser.STRING_LITERAL:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 2025;
                        this.match(FlinkSqlParser.STRING_LITERAL);
                    }
                    break;
                default:
                    throw new NoViableAltException.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    tableAlias() {
        let _localctx = new TableAliasContext(this._ctx, this.state);
        this.enterRule(_localctx, 294, FlinkSqlParser.RULE_tableAlias);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2029;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === FlinkSqlParser.KW_AS) {
                    {
                        this.state = 2028;
                        this.match(FlinkSqlParser.KW_AS);
                    }
                }
                this.state = 2031;
                this.identifier();
                this.state = 2033;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 237, this._ctx)) {
                    case 1:
                        {
                            this.state = 2032;
                            this.identifierList();
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    errorCapturingIdentifier() {
        let _localctx = new ErrorCapturingIdentifierContext(this._ctx, this.state);
        this.enterRule(_localctx, 296, FlinkSqlParser.RULE_errorCapturingIdentifier);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2035;
                this.identifier();
                this.state = 2036;
                this.errorCapturingIdentifierExtra();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    errorCapturingIdentifierExtra() {
        let _localctx = new ErrorCapturingIdentifierExtraContext(this._ctx, this.state);
        this.enterRule(_localctx, 298, FlinkSqlParser.RULE_errorCapturingIdentifierExtra);
        let _la;
        try {
            this.state = 2045;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case FlinkSqlParser.KW_MINUS:
                    _localctx = new ErrorIdentContext(_localctx);
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 2040;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        do {
                            {
                                {
                                    this.state = 2038;
                                    this.match(FlinkSqlParser.KW_MINUS);
                                    this.state = 2039;
                                    this.identifier();
                                }
                            }
                            this.state = 2042;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                        } while (_la === FlinkSqlParser.KW_MINUS);
                    }
                    break;
                case FlinkSqlParser.KW_AS:
                case FlinkSqlParser.LR_BRACKET:
                    _localctx = new RealIdentContext(_localctx);
                    this.enterOuterAlt(_localctx, 2);
                    // tslint:disable-next-line:no-empty
                    {
                    }
                    break;
                default:
                    throw new NoViableAltException.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    identifierList() {
        let _localctx = new IdentifierListContext(this._ctx, this.state);
        this.enterRule(_localctx, 300, FlinkSqlParser.RULE_identifierList);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2047;
                this.match(FlinkSqlParser.LR_BRACKET);
                this.state = 2048;
                this.identifierSeq();
                this.state = 2049;
                this.match(FlinkSqlParser.RR_BRACKET);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    identifierSeq() {
        let _localctx = new IdentifierSeqContext(this._ctx, this.state);
        this.enterRule(_localctx, 302, FlinkSqlParser.RULE_identifierSeq);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2051;
                this.identifier();
                this.state = 2056;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === FlinkSqlParser.COMMA) {
                    {
                        {
                            this.state = 2052;
                            this.match(FlinkSqlParser.COMMA);
                            this.state = 2053;
                            this.identifier();
                        }
                    }
                    this.state = 2058;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    identifier() {
        let _localctx = new IdentifierContext(this._ctx, this.state);
        this.enterRule(_localctx, 304, FlinkSqlParser.RULE_identifier);
        try {
            this.state = 2062;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case FlinkSqlParser.DIG_LITERAL:
                case FlinkSqlParser.ID_LITERAL:
                    _localctx = new UnquotedIdentifierAlternativeContext(_localctx);
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 2059;
                        this.unquotedIdentifier();
                    }
                    break;
                case FlinkSqlParser.STRING_LITERAL:
                    _localctx = new QuotedIdentifierAlternativeContext(_localctx);
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 2060;
                        this.quotedIdentifier();
                    }
                    break;
                case FlinkSqlParser.KW_ADD:
                case FlinkSqlParser.KW_AFTER:
                case FlinkSqlParser.KW_ASC:
                case FlinkSqlParser.KW_CASCADE:
                case FlinkSqlParser.KW_CATALOG:
                case FlinkSqlParser.KW_CENTURY:
                case FlinkSqlParser.KW_CONFIG:
                case FlinkSqlParser.KW_CONSTRAINTS:
                case FlinkSqlParser.KW_CUMULATE:
                case FlinkSqlParser.KW_DATA:
                case FlinkSqlParser.KW_DATABASE:
                case FlinkSqlParser.KW_DAYS:
                case FlinkSqlParser.KW_DECADE:
                case FlinkSqlParser.KW_DESC:
                case FlinkSqlParser.KW_DESCRIPTOR:
                case FlinkSqlParser.KW_DIV:
                case FlinkSqlParser.KW_ENGINE:
                case FlinkSqlParser.KW_EPOCH:
                case FlinkSqlParser.KW_EXCLUDING:
                case FlinkSqlParser.KW_FILE:
                case FlinkSqlParser.KW_FIRST:
                case FlinkSqlParser.KW_GENERATED:
                case FlinkSqlParser.KW_HOP:
                case FlinkSqlParser.KW_HOURS:
                case FlinkSqlParser.KW_IGNORE:
                case FlinkSqlParser.KW_INCLUDING:
                case FlinkSqlParser.KW_JAR:
                case FlinkSqlParser.KW_JARS:
                case FlinkSqlParser.KW_JAVA:
                case FlinkSqlParser.KW_KEY:
                case FlinkSqlParser.KW_LAST:
                case FlinkSqlParser.KW_LOAD:
                case FlinkSqlParser.KW_MAP:
                case FlinkSqlParser.KW_MICROSECOND:
                case FlinkSqlParser.KW_MILLENNIUM:
                case FlinkSqlParser.KW_MILLISECOND:
                case FlinkSqlParser.KW_MINUTES:
                case FlinkSqlParser.KW_MONTHS:
                case FlinkSqlParser.KW_NANOSECOND:
                case FlinkSqlParser.KW_NULLS:
                case FlinkSqlParser.KW_OPTIONS:
                case FlinkSqlParser.KW_PAST:
                case FlinkSqlParser.KW_PLAN:
                case FlinkSqlParser.KW_PRECEDING:
                case FlinkSqlParser.KW_PYTHON:
                case FlinkSqlParser.KW_PYTHON_ARCHIVES:
                case FlinkSqlParser.KW_PYTHON_DEPENDENCIES:
                case FlinkSqlParser.KW_PYTHON_FILES:
                case FlinkSqlParser.KW_PYTHON_JAR:
                case FlinkSqlParser.KW_PYTHON_PARAMETER:
                case FlinkSqlParser.KW_PYTHON_REQUIREMENTS:
                case FlinkSqlParser.KW_QUARTER:
                case FlinkSqlParser.KW_REMOVE:
                case FlinkSqlParser.KW_RESTRICT:
                case FlinkSqlParser.KW_SECONDS:
                case FlinkSqlParser.KW_SESSION:
                case FlinkSqlParser.KW_SETS:
                case FlinkSqlParser.KW_SIZE:
                case FlinkSqlParser.KW_SLIDE:
                case FlinkSqlParser.KW_STEP:
                case FlinkSqlParser.KW_TEMPORARY:
                case FlinkSqlParser.KW_TIMECOL:
                case FlinkSqlParser.KW_TUMBLE:
                case FlinkSqlParser.KW_UNLOAD:
                case FlinkSqlParser.KW_VIEW:
                case FlinkSqlParser.KW_WEEK:
                case FlinkSqlParser.KW_YEARS:
                case FlinkSqlParser.KW_ZONE:
                    _localctx = new NonReservedKeywordsAlternativeContext(_localctx);
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 2061;
                        this.nonReservedKeywords();
                    }
                    break;
                default:
                    throw new NoViableAltException.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    unquotedIdentifier() {
        let _localctx = new UnquotedIdentifierContext(this._ctx, this.state);
        this.enterRule(_localctx, 306, FlinkSqlParser.RULE_unquotedIdentifier);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2064;
                _la = this._input.LA(1);
                if (!(_la === FlinkSqlParser.DIG_LITERAL || _la === FlinkSqlParser.ID_LITERAL)) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token.Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    quotedIdentifier() {
        let _localctx = new QuotedIdentifierContext(this._ctx, this.state);
        this.enterRule(_localctx, 308, FlinkSqlParser.RULE_quotedIdentifier);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2066;
                this.match(FlinkSqlParser.STRING_LITERAL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    whenClause() {
        let _localctx = new WhenClauseContext(this._ctx, this.state);
        this.enterRule(_localctx, 310, FlinkSqlParser.RULE_whenClause);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2068;
                this.match(FlinkSqlParser.KW_WHEN);
                this.state = 2069;
                _localctx._condition = this.expression();
                this.state = 2070;
                this.match(FlinkSqlParser.KW_THEN);
                this.state = 2071;
                _localctx._result = this.expression();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    catalogPath() {
        let _localctx = new CatalogPathContext(this._ctx, this.state);
        this.enterRule(_localctx, 312, FlinkSqlParser.RULE_catalogPath);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2073;
                this.identifier();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    catalogPathCreate() {
        let _localctx = new CatalogPathCreateContext(this._ctx, this.state);
        this.enterRule(_localctx, 314, FlinkSqlParser.RULE_catalogPathCreate);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2075;
                this.identifier();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    databasePath() {
        let _localctx = new DatabasePathContext(this._ctx, this.state);
        this.enterRule(_localctx, 316, FlinkSqlParser.RULE_databasePath);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2077;
                this.identifier();
                this.state = 2080;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === FlinkSqlParser.DOT) {
                    {
                        this.state = 2078;
                        this.match(FlinkSqlParser.DOT);
                        this.state = 2079;
                        this.identifier();
                    }
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    databasePathCreate() {
        let _localctx = new DatabasePathCreateContext(this._ctx, this.state);
        this.enterRule(_localctx, 318, FlinkSqlParser.RULE_databasePathCreate);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2082;
                this.identifier();
                this.state = 2085;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === FlinkSqlParser.DOT) {
                    {
                        this.state = 2083;
                        this.match(FlinkSqlParser.DOT);
                        this.state = 2084;
                        this.identifier();
                    }
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    tablePathCreate() {
        let _localctx = new TablePathCreateContext(this._ctx, this.state);
        this.enterRule(_localctx, 320, FlinkSqlParser.RULE_tablePathCreate);
        let _la;
        try {
            this.state = 2099;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 246, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 2087;
                        this.identifier();
                        this.state = 2090;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === FlinkSqlParser.DOT) {
                            {
                                this.state = 2088;
                                this.match(FlinkSqlParser.DOT);
                                this.state = 2089;
                                this.identifier();
                            }
                        }
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 2092;
                        this.identifier();
                        this.state = 2093;
                        this.match(FlinkSqlParser.DOT);
                        this.state = 2094;
                        this.identifier();
                        this.state = 2097;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === FlinkSqlParser.DOT) {
                            {
                                this.state = 2095;
                                this.match(FlinkSqlParser.DOT);
                                this.state = 2096;
                                this.identifier();
                            }
                        }
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    tablePath() {
        let _localctx = new TablePathContext(this._ctx, this.state);
        this.enterRule(_localctx, 322, FlinkSqlParser.RULE_tablePath);
        try {
            this.state = 2113;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 249, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 2101;
                        this.identifier();
                        this.state = 2104;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 247, this._ctx)) {
                            case 1:
                                {
                                    this.state = 2102;
                                    this.match(FlinkSqlParser.DOT);
                                    this.state = 2103;
                                    this.identifier();
                                }
                                break;
                        }
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 2106;
                        this.identifier();
                        this.state = 2107;
                        this.match(FlinkSqlParser.DOT);
                        this.state = 2108;
                        this.identifier();
                        this.state = 2111;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 248, this._ctx)) {
                            case 1:
                                {
                                    this.state = 2109;
                                    this.match(FlinkSqlParser.DOT);
                                    this.state = 2110;
                                    this.identifier();
                                }
                                break;
                        }
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    viewPath() {
        let _localctx = new ViewPathContext(this._ctx, this.state);
        this.enterRule(_localctx, 324, FlinkSqlParser.RULE_viewPath);
        try {
            this.state = 2127;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 252, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 2115;
                        this.identifier();
                        this.state = 2118;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 250, this._ctx)) {
                            case 1:
                                {
                                    this.state = 2116;
                                    this.match(FlinkSqlParser.DOT);
                                    this.state = 2117;
                                    this.identifier();
                                }
                                break;
                        }
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 2120;
                        this.identifier();
                        this.state = 2121;
                        this.match(FlinkSqlParser.DOT);
                        this.state = 2122;
                        this.identifier();
                        this.state = 2125;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 251, this._ctx)) {
                            case 1:
                                {
                                    this.state = 2123;
                                    this.match(FlinkSqlParser.DOT);
                                    this.state = 2124;
                                    this.identifier();
                                }
                                break;
                        }
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    viewPathCreate() {
        let _localctx = new ViewPathCreateContext(this._ctx, this.state);
        this.enterRule(_localctx, 326, FlinkSqlParser.RULE_viewPathCreate);
        let _la;
        try {
            this.state = 2141;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 255, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 2129;
                        this.identifier();
                        this.state = 2132;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === FlinkSqlParser.DOT) {
                            {
                                this.state = 2130;
                                this.match(FlinkSqlParser.DOT);
                                this.state = 2131;
                                this.identifier();
                            }
                        }
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 2134;
                        this.identifier();
                        this.state = 2135;
                        this.match(FlinkSqlParser.DOT);
                        this.state = 2136;
                        this.identifier();
                        this.state = 2139;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === FlinkSqlParser.DOT) {
                            {
                                this.state = 2137;
                                this.match(FlinkSqlParser.DOT);
                                this.state = 2138;
                                this.identifier();
                            }
                        }
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    uid() {
        let _localctx = new UidContext(this._ctx, this.state);
        this.enterRule(_localctx, 328, FlinkSqlParser.RULE_uid);
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2143;
                this.identifier();
                this.state = 2148;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 256, this._ctx);
                while (_alt !== 1 && _alt !== ATN.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1 + 1) {
                        {
                            {
                                this.state = 2144;
                                this.match(FlinkSqlParser.DOT);
                                this.state = 2145;
                                this.identifier();
                            }
                        }
                    }
                    this.state = 2150;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 256, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    withOption() {
        let _localctx = new WithOptionContext(this._ctx, this.state);
        this.enterRule(_localctx, 330, FlinkSqlParser.RULE_withOption);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2151;
                this.match(FlinkSqlParser.KW_WITH);
                this.state = 2152;
                this.tablePropertyList();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    ifNotExists() {
        let _localctx = new IfNotExistsContext(this._ctx, this.state);
        this.enterRule(_localctx, 332, FlinkSqlParser.RULE_ifNotExists);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2154;
                this.match(FlinkSqlParser.KW_IF);
                this.state = 2155;
                this.match(FlinkSqlParser.KW_NOT);
                this.state = 2156;
                this.match(FlinkSqlParser.KW_EXISTS);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    ifExists() {
        let _localctx = new IfExistsContext(this._ctx, this.state);
        this.enterRule(_localctx, 334, FlinkSqlParser.RULE_ifExists);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2158;
                this.match(FlinkSqlParser.KW_IF);
                this.state = 2159;
                this.match(FlinkSqlParser.KW_EXISTS);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    tablePropertyList() {
        let _localctx = new TablePropertyListContext(this._ctx, this.state);
        this.enterRule(_localctx, 336, FlinkSqlParser.RULE_tablePropertyList);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2161;
                this.match(FlinkSqlParser.LR_BRACKET);
                this.state = 2162;
                this.tableProperty();
                this.state = 2167;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === FlinkSqlParser.COMMA) {
                    {
                        {
                            this.state = 2163;
                            this.match(FlinkSqlParser.COMMA);
                            this.state = 2164;
                            this.tableProperty();
                        }
                    }
                    this.state = 2169;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 2170;
                this.match(FlinkSqlParser.RR_BRACKET);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    tableProperty() {
        let _localctx = new TablePropertyContext(this._ctx, this.state);
        this.enterRule(_localctx, 338, FlinkSqlParser.RULE_tableProperty);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2172;
                _localctx._key = this.tablePropertyKey();
                this.state = 2177;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === FlinkSqlParser.KW_FALSE || _la === FlinkSqlParser.KW_TRUE || _la === FlinkSqlParser.EQUAL_SYMBOL || ((((_la - 537)) & ~0x1F) === 0 && ((1 << (_la - 537)) & ((1 << (FlinkSqlParser.STRING_LITERAL - 537)) | (1 << (FlinkSqlParser.DIG_LITERAL - 537)) | (1 << (FlinkSqlParser.REAL_LITERAL - 537)))) !== 0)) {
                    {
                        this.state = 2174;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === FlinkSqlParser.EQUAL_SYMBOL) {
                            {
                                this.state = 2173;
                                this.match(FlinkSqlParser.EQUAL_SYMBOL);
                            }
                        }
                        this.state = 2176;
                        _localctx._value = this.tablePropertyValue();
                    }
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    tablePropertyKey() {
        let _localctx = new TablePropertyKeyContext(this._ctx, this.state);
        this.enterRule(_localctx, 340, FlinkSqlParser.RULE_tablePropertyKey);
        try {
            this.state = 2182;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 260, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 2179;
                        this.identifier();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 2180;
                        this.dereferenceDefinition();
                    }
                    break;
                case 3:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 2181;
                        this.match(FlinkSqlParser.STRING_LITERAL);
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    tablePropertyValue() {
        let _localctx = new TablePropertyValueContext(this._ctx, this.state);
        this.enterRule(_localctx, 342, FlinkSqlParser.RULE_tablePropertyValue);
        try {
            this.state = 2188;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case FlinkSqlParser.DIG_LITERAL:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 2184;
                        this.match(FlinkSqlParser.DIG_LITERAL);
                    }
                    break;
                case FlinkSqlParser.REAL_LITERAL:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 2185;
                        this.match(FlinkSqlParser.REAL_LITERAL);
                    }
                    break;
                case FlinkSqlParser.KW_FALSE:
                case FlinkSqlParser.KW_TRUE:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 2186;
                        this.booleanLiteral();
                    }
                    break;
                case FlinkSqlParser.STRING_LITERAL:
                    this.enterOuterAlt(_localctx, 4);
                    {
                        this.state = 2187;
                        this.match(FlinkSqlParser.STRING_LITERAL);
                    }
                    break;
                default:
                    throw new NoViableAltException.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    logicalOperator() {
        let _localctx = new LogicalOperatorContext(this._ctx, this.state);
        this.enterRule(_localctx, 344, FlinkSqlParser.RULE_logicalOperator);
        try {
            this.state = 2196;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case FlinkSqlParser.KW_AND:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 2190;
                        this.match(FlinkSqlParser.KW_AND);
                    }
                    break;
                case FlinkSqlParser.BIT_AND_OP:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 2191;
                        this.match(FlinkSqlParser.BIT_AND_OP);
                        this.state = 2192;
                        this.match(FlinkSqlParser.BIT_AND_OP);
                    }
                    break;
                case FlinkSqlParser.KW_OR:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 2193;
                        this.match(FlinkSqlParser.KW_OR);
                    }
                    break;
                case FlinkSqlParser.BIT_OR_OP:
                    this.enterOuterAlt(_localctx, 4);
                    {
                        this.state = 2194;
                        this.match(FlinkSqlParser.BIT_OR_OP);
                        this.state = 2195;
                        this.match(FlinkSqlParser.BIT_OR_OP);
                    }
                    break;
                default:
                    throw new NoViableAltException.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    comparisonOperator() {
        let _localctx = new ComparisonOperatorContext(this._ctx, this.state);
        this.enterRule(_localctx, 346, FlinkSqlParser.RULE_comparisonOperator);
        try {
            this.state = 2212;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 263, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 2198;
                        this.match(FlinkSqlParser.EQUAL_SYMBOL);
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 2199;
                        this.match(FlinkSqlParser.GREATER_SYMBOL);
                    }
                    break;
                case 3:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 2200;
                        this.match(FlinkSqlParser.LESS_SYMBOL);
                    }
                    break;
                case 4:
                    this.enterOuterAlt(_localctx, 4);
                    {
                        this.state = 2201;
                        this.match(FlinkSqlParser.LESS_SYMBOL);
                        this.state = 2202;
                        this.match(FlinkSqlParser.EQUAL_SYMBOL);
                    }
                    break;
                case 5:
                    this.enterOuterAlt(_localctx, 5);
                    {
                        this.state = 2203;
                        this.match(FlinkSqlParser.GREATER_SYMBOL);
                        this.state = 2204;
                        this.match(FlinkSqlParser.EQUAL_SYMBOL);
                    }
                    break;
                case 6:
                    this.enterOuterAlt(_localctx, 6);
                    {
                        this.state = 2205;
                        this.match(FlinkSqlParser.LESS_SYMBOL);
                        this.state = 2206;
                        this.match(FlinkSqlParser.GREATER_SYMBOL);
                    }
                    break;
                case 7:
                    this.enterOuterAlt(_localctx, 7);
                    {
                        this.state = 2207;
                        this.match(FlinkSqlParser.EXCLAMATION_SYMBOL);
                        this.state = 2208;
                        this.match(FlinkSqlParser.EQUAL_SYMBOL);
                    }
                    break;
                case 8:
                    this.enterOuterAlt(_localctx, 8);
                    {
                        this.state = 2209;
                        this.match(FlinkSqlParser.LESS_SYMBOL);
                        this.state = 2210;
                        this.match(FlinkSqlParser.EQUAL_SYMBOL);
                        this.state = 2211;
                        this.match(FlinkSqlParser.GREATER_SYMBOL);
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    bitOperator() {
        let _localctx = new BitOperatorContext(this._ctx, this.state);
        this.enterRule(_localctx, 348, FlinkSqlParser.RULE_bitOperator);
        try {
            this.state = 2221;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case FlinkSqlParser.LESS_SYMBOL:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 2214;
                        this.match(FlinkSqlParser.LESS_SYMBOL);
                        this.state = 2215;
                        this.match(FlinkSqlParser.LESS_SYMBOL);
                    }
                    break;
                case FlinkSqlParser.GREATER_SYMBOL:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 2216;
                        this.match(FlinkSqlParser.GREATER_SYMBOL);
                        this.state = 2217;
                        this.match(FlinkSqlParser.GREATER_SYMBOL);
                    }
                    break;
                case FlinkSqlParser.BIT_AND_OP:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 2218;
                        this.match(FlinkSqlParser.BIT_AND_OP);
                    }
                    break;
                case FlinkSqlParser.BIT_XOR_OP:
                    this.enterOuterAlt(_localctx, 4);
                    {
                        this.state = 2219;
                        this.match(FlinkSqlParser.BIT_XOR_OP);
                    }
                    break;
                case FlinkSqlParser.BIT_OR_OP:
                    this.enterOuterAlt(_localctx, 5);
                    {
                        this.state = 2220;
                        this.match(FlinkSqlParser.BIT_OR_OP);
                    }
                    break;
                default:
                    throw new NoViableAltException.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    mathOperator() {
        let _localctx = new MathOperatorContext(this._ctx, this.state);
        this.enterRule(_localctx, 350, FlinkSqlParser.RULE_mathOperator);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2223;
                _la = this._input.LA(1);
                if (!(_la === FlinkSqlParser.KW_DIV || ((((_la - 527)) & ~0x1F) === 0 && ((1 << (_la - 527)) & ((1 << (FlinkSqlParser.ASTERISK_SIGN - 527)) | (1 << (FlinkSqlParser.HYPNEN_SIGN - 527)) | (1 << (FlinkSqlParser.ADD_SIGN - 527)) | (1 << (FlinkSqlParser.PENCENT_SIGN - 527)) | (1 << (FlinkSqlParser.DOUBLE_HYPNEN_SIGN - 527)) | (1 << (FlinkSqlParser.SLASH_SIGN - 527)))) !== 0))) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token.Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    unaryOperator() {
        let _localctx = new UnaryOperatorContext(this._ctx, this.state);
        this.enterRule(_localctx, 352, FlinkSqlParser.RULE_unaryOperator);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2225;
                _la = this._input.LA(1);
                if (!(_la === FlinkSqlParser.KW_NOT || ((((_la - 508)) & ~0x1F) === 0 && ((1 << (_la - 508)) & ((1 << (FlinkSqlParser.EXCLAMATION_SYMBOL - 508)) | (1 << (FlinkSqlParser.BIT_NOT_OP - 508)) | (1 << (FlinkSqlParser.HYPNEN_SIGN - 508)) | (1 << (FlinkSqlParser.ADD_SIGN - 508)))) !== 0))) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token.Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    constant() {
        let _localctx = new ConstantContext(this._ctx, this.state);
        this.enterRule(_localctx, 354, FlinkSqlParser.RULE_constant);
        let _la;
        try {
            this.state = 2241;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case FlinkSqlParser.KW_INTERVAL:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 2227;
                        this.timeIntervalExpression();
                    }
                    break;
                case FlinkSqlParser.KW_DAY:
                case FlinkSqlParser.KW_HOUR:
                case FlinkSqlParser.KW_MINUTE:
                case FlinkSqlParser.KW_MONTH:
                case FlinkSqlParser.KW_SECOND:
                case FlinkSqlParser.KW_YEAR:
                case FlinkSqlParser.KW_MICROSECOND:
                case FlinkSqlParser.KW_MILLISECOND:
                case FlinkSqlParser.KW_QUARTER:
                case FlinkSqlParser.KW_WEEK:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 2228;
                        this.timePointLiteral();
                    }
                    break;
                case FlinkSqlParser.STRING_LITERAL:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 2229;
                        this.stringLiteral();
                    }
                    break;
                case FlinkSqlParser.HYPNEN_SIGN:
                case FlinkSqlParser.DIG_LITERAL:
                    this.enterOuterAlt(_localctx, 4);
                    {
                        this.state = 2231;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === FlinkSqlParser.HYPNEN_SIGN) {
                            {
                                this.state = 2230;
                                this.match(FlinkSqlParser.HYPNEN_SIGN);
                            }
                        }
                        this.state = 2233;
                        this.decimalLiteral();
                    }
                    break;
                case FlinkSqlParser.KW_FALSE:
                case FlinkSqlParser.KW_TRUE:
                    this.enterOuterAlt(_localctx, 5);
                    {
                        this.state = 2234;
                        this.booleanLiteral();
                    }
                    break;
                case FlinkSqlParser.REAL_LITERAL:
                    this.enterOuterAlt(_localctx, 6);
                    {
                        this.state = 2235;
                        this.match(FlinkSqlParser.REAL_LITERAL);
                    }
                    break;
                case FlinkSqlParser.BIT_STRING:
                    this.enterOuterAlt(_localctx, 7);
                    {
                        this.state = 2236;
                        this.match(FlinkSqlParser.BIT_STRING);
                    }
                    break;
                case FlinkSqlParser.KW_NOT:
                case FlinkSqlParser.KW_NULL:
                    this.enterOuterAlt(_localctx, 8);
                    {
                        this.state = 2238;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === FlinkSqlParser.KW_NOT) {
                            {
                                this.state = 2237;
                                this.match(FlinkSqlParser.KW_NOT);
                            }
                        }
                        this.state = 2240;
                        this.match(FlinkSqlParser.KW_NULL);
                    }
                    break;
                default:
                    throw new NoViableAltException.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    timePointLiteral() {
        let _localctx = new TimePointLiteralContext(this._ctx, this.state);
        this.enterRule(_localctx, 356, FlinkSqlParser.RULE_timePointLiteral);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2243;
                this.timePointUnit();
                this.state = 2244;
                this.stringLiteral();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    stringLiteral() {
        let _localctx = new StringLiteralContext(this._ctx, this.state);
        this.enterRule(_localctx, 358, FlinkSqlParser.RULE_stringLiteral);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2246;
                this.match(FlinkSqlParser.STRING_LITERAL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    decimalLiteral() {
        let _localctx = new DecimalLiteralContext(this._ctx, this.state);
        this.enterRule(_localctx, 360, FlinkSqlParser.RULE_decimalLiteral);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2248;
                this.match(FlinkSqlParser.DIG_LITERAL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    booleanLiteral() {
        let _localctx = new BooleanLiteralContext(this._ctx, this.state);
        this.enterRule(_localctx, 362, FlinkSqlParser.RULE_booleanLiteral);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2250;
                _la = this._input.LA(1);
                if (!(_la === FlinkSqlParser.KW_FALSE || _la === FlinkSqlParser.KW_TRUE)) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token.Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    setQuantifier() {
        let _localctx = new SetQuantifierContext(this._ctx, this.state);
        this.enterRule(_localctx, 364, FlinkSqlParser.RULE_setQuantifier);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2252;
                _la = this._input.LA(1);
                if (!(_la === FlinkSqlParser.KW_ALL || _la === FlinkSqlParser.KW_DISTINCT)) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token.Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    timePointUnit() {
        let _localctx = new TimePointUnitContext(this._ctx, this.state);
        this.enterRule(_localctx, 366, FlinkSqlParser.RULE_timePointUnit);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2254;
                _la = this._input.LA(1);
                if (!(_la === FlinkSqlParser.KW_DAY || _la === FlinkSqlParser.KW_HOUR || _la === FlinkSqlParser.KW_MINUTE || _la === FlinkSqlParser.KW_MONTH || _la === FlinkSqlParser.KW_SECOND || _la === FlinkSqlParser.KW_YEAR || ((((_la - 470)) & ~0x1F) === 0 && ((1 << (_la - 470)) & ((1 << (FlinkSqlParser.KW_MICROSECOND - 470)) | (1 << (FlinkSqlParser.KW_MILLISECOND - 470)) | (1 << (FlinkSqlParser.KW_QUARTER - 470)))) !== 0) || _la === FlinkSqlParser.KW_WEEK)) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token.Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    timeIntervalUnit() {
        let _localctx = new TimeIntervalUnitContext(this._ctx, this.state);
        this.enterRule(_localctx, 368, FlinkSqlParser.RULE_timeIntervalUnit);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2256;
                _la = this._input.LA(1);
                if (!(_la === FlinkSqlParser.KW_DAY || _la === FlinkSqlParser.KW_HOUR || _la === FlinkSqlParser.KW_MINUTE || _la === FlinkSqlParser.KW_MONTH || _la === FlinkSqlParser.KW_SECOND || ((((_la - 427)) & ~0x1F) === 0 && ((1 << (_la - 427)) & ((1 << (FlinkSqlParser.KW_WEEKS - 427)) | (1 << (FlinkSqlParser.KW_YEAR - 427)) | (1 << (FlinkSqlParser.KW_CENTURY - 427)) | (1 << (FlinkSqlParser.KW_DAYS - 427)) | (1 << (FlinkSqlParser.KW_DECADE - 427)) | (1 << (FlinkSqlParser.KW_EPOCH - 427)))) !== 0) || ((((_la - 460)) & ~0x1F) === 0 && ((1 << (_la - 460)) & ((1 << (FlinkSqlParser.KW_HOURS - 460)) | (1 << (FlinkSqlParser.KW_MICROSECOND - 460)) | (1 << (FlinkSqlParser.KW_MILLENNIUM - 460)) | (1 << (FlinkSqlParser.KW_MILLISECOND - 460)) | (1 << (FlinkSqlParser.KW_MINUTES - 460)) | (1 << (FlinkSqlParser.KW_MONTHS - 460)) | (1 << (FlinkSqlParser.KW_NANOSECOND - 460)) | (1 << (FlinkSqlParser.KW_QUARTER - 460)) | (1 << (FlinkSqlParser.KW_SECONDS - 460)))) !== 0) || _la === FlinkSqlParser.KW_WEEK || _la === FlinkSqlParser.KW_YEARS)) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token.Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    reservedKeywordsUsedAsFuncParam() {
        let _localctx = new ReservedKeywordsUsedAsFuncParamContext(this._ctx, this.state);
        this.enterRule(_localctx, 370, FlinkSqlParser.RULE_reservedKeywordsUsedAsFuncParam);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2258;
                _la = this._input.LA(1);
                if (!(((((_la - 5)) & ~0x1F) === 0 && ((1 << (_la - 5)) & ((1 << (FlinkSqlParser.KW_ALL - 5)) | (1 << (FlinkSqlParser.KW_ARRAY - 5)) | (1 << (FlinkSqlParser.KW_BOTH - 5)))) !== 0) || _la === FlinkSqlParser.KW_CURRENT_TIMESTAMP || _la === FlinkSqlParser.KW_DISTINCT || _la === FlinkSqlParser.KW_LEADING || _la === FlinkSqlParser.KW_TRAILING || _la === FlinkSqlParser.KW_VALUE || _la === FlinkSqlParser.ASTERISK_SIGN)) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token.Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    reservedKeywordsUsedAsFuncName() {
        let _localctx = new ReservedKeywordsUsedAsFuncNameContext(this._ctx, this.state);
        this.enterRule(_localctx, 372, FlinkSqlParser.RULE_reservedKeywordsUsedAsFuncName);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2260;
                _la = this._input.LA(1);
                if (!((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << FlinkSqlParser.KW_ABS) | (1 << FlinkSqlParser.KW_ARRAY) | (1 << FlinkSqlParser.KW_AVG))) !== 0) || ((((_la - 38)) & ~0x1F) === 0 && ((1 << (_la - 38)) & ((1 << (FlinkSqlParser.KW_CARDINALITY - 38)) | (1 << (FlinkSqlParser.KW_CAST - 38)) | (1 << (FlinkSqlParser.KW_CEIL - 38)) | (1 << (FlinkSqlParser.KW_CEILING - 38)) | (1 << (FlinkSqlParser.KW_COALESCE - 38)) | (1 << (FlinkSqlParser.KW_COLLECT - 38)) | (1 << (FlinkSqlParser.KW_COUNT - 38)))) !== 0) || ((((_la - 75)) & ~0x1F) === 0 && ((1 << (_la - 75)) & ((1 << (FlinkSqlParser.KW_CUME_DIST - 75)) | (1 << (FlinkSqlParser.KW_CURRENT_DATE - 75)) | (1 << (FlinkSqlParser.KW_CURRENT_TIME - 75)) | (1 << (FlinkSqlParser.KW_CURRENT_TIMESTAMP - 75)) | (1 << (FlinkSqlParser.KW_DATE - 75)) | (1 << (FlinkSqlParser.KW_DAYOFWEEK - 75)) | (1 << (FlinkSqlParser.KW_DAYOFYEAR - 75)))) !== 0) || ((((_la - 107)) & ~0x1F) === 0 && ((1 << (_la - 107)) & ((1 << (FlinkSqlParser.KW_DENSE_RANK - 107)) | (1 << (FlinkSqlParser.KW_ELEMENT - 107)) | (1 << (FlinkSqlParser.KW_EXP - 107)))) !== 0) || ((((_la - 139)) & ~0x1F) === 0 && ((1 << (_la - 139)) & ((1 << (FlinkSqlParser.KW_EXTRACT - 139)) | (1 << (FlinkSqlParser.KW_FIRST_VALUE - 139)) | (1 << (FlinkSqlParser.KW_FLOOR - 139)) | (1 << (FlinkSqlParser.KW_GROUPING - 139)) | (1 << (FlinkSqlParser.KW_HOUR - 139)) | (1 << (FlinkSqlParser.KW_IF - 139)))) !== 0) || ((((_la - 194)) & ~0x1F) === 0 && ((1 << (_la - 194)) & ((1 << (FlinkSqlParser.KW_LAG - 194)) | (1 << (FlinkSqlParser.KW_LAST_VALUE - 194)) | (1 << (FlinkSqlParser.KW_LEAD - 194)) | (1 << (FlinkSqlParser.KW_LEFT - 194)) | (1 << (FlinkSqlParser.KW_LN - 194)) | (1 << (FlinkSqlParser.KW_LOCALTIME - 194)) | (1 << (FlinkSqlParser.KW_LOCALTIMESTAMP - 194)) | (1 << (FlinkSqlParser.KW_LOWER - 194)) | (1 << (FlinkSqlParser.KW_MAX - 194)) | (1 << (FlinkSqlParser.KW_MIN - 194)) | (1 << (FlinkSqlParser.KW_MINUTE - 194)) | (1 << (FlinkSqlParser.KW_MOD - 194)))) !== 0) || ((((_la - 229)) & ~0x1F) === 0 && ((1 << (_la - 229)) & ((1 << (FlinkSqlParser.KW_MONTH - 229)) | (1 << (FlinkSqlParser.KW_NTILE - 229)) | (1 << (FlinkSqlParser.KW_NULLIF - 229)))) !== 0) || ((((_la - 264)) & ~0x1F) === 0 && ((1 << (_la - 264)) & ((1 << (FlinkSqlParser.KW_OVERLAY - 264)) | (1 << (FlinkSqlParser.KW_PERCENT_RANK - 264)) | (1 << (FlinkSqlParser.KW_POSITION - 264)) | (1 << (FlinkSqlParser.KW_POWER - 264)) | (1 << (FlinkSqlParser.KW_RANK - 264)))) !== 0) || ((((_la - 317)) & ~0x1F) === 0 && ((1 << (_la - 317)) & ((1 << (FlinkSqlParser.KW_RIGHT - 317)) | (1 << (FlinkSqlParser.KW_ROW - 317)) | (1 << (FlinkSqlParser.KW_ROWS - 317)) | (1 << (FlinkSqlParser.KW_ROW_NUMBER - 317)) | (1 << (FlinkSqlParser.KW_SECOND - 317)))) !== 0) || ((((_la - 357)) & ~0x1F) === 0 && ((1 << (_la - 357)) & ((1 << (FlinkSqlParser.KW_STDDEV_POP - 357)) | (1 << (FlinkSqlParser.KW_STDDEV_SAMP - 357)) | (1 << (FlinkSqlParser.KW_SUBSTRING - 357)) | (1 << (FlinkSqlParser.KW_SUM - 357)) | (1 << (FlinkSqlParser.KW_TIME - 357)) | (1 << (FlinkSqlParser.KW_TIMESTAMP - 357)) | (1 << (FlinkSqlParser.KW_TIMESTAMP_DIFF - 357)))) !== 0) || ((((_la - 395)) & ~0x1F) === 0 && ((1 << (_la - 395)) & ((1 << (FlinkSqlParser.KW_TRIM - 395)) | (1 << (FlinkSqlParser.KW_TRUNCATE - 395)) | (1 << (FlinkSqlParser.KW_TRY_CAST - 395)) | (1 << (FlinkSqlParser.KW_UPPER - 395)) | (1 << (FlinkSqlParser.KW_VAR_POP - 395)) | (1 << (FlinkSqlParser.KW_VAR_SAMP - 395)))) !== 0) || _la === FlinkSqlParser.KW_YEAR || _la === FlinkSqlParser.KW_MAP || _la === FlinkSqlParser.KW_QUARTER || _la === FlinkSqlParser.KW_WEEK)) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token.Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    nonReservedKeywords() {
        let _localctx = new NonReservedKeywordsContext(this._ctx, this.state);
        this.enterRule(_localctx, 374, FlinkSqlParser.RULE_nonReservedKeywords);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 2262;
                _la = this._input.LA(1);
                if (!(((((_la - 437)) & ~0x1F) === 0 && ((1 << (_la - 437)) & ((1 << (FlinkSqlParser.KW_ADD - 437)) | (1 << (FlinkSqlParser.KW_AFTER - 437)) | (1 << (FlinkSqlParser.KW_ASC - 437)) | (1 << (FlinkSqlParser.KW_CASCADE - 437)) | (1 << (FlinkSqlParser.KW_CATALOG - 437)) | (1 << (FlinkSqlParser.KW_CENTURY - 437)) | (1 << (FlinkSqlParser.KW_CONFIG - 437)) | (1 << (FlinkSqlParser.KW_CONSTRAINTS - 437)) | (1 << (FlinkSqlParser.KW_CUMULATE - 437)) | (1 << (FlinkSqlParser.KW_DATA - 437)) | (1 << (FlinkSqlParser.KW_DATABASE - 437)) | (1 << (FlinkSqlParser.KW_DAYS - 437)) | (1 << (FlinkSqlParser.KW_DECADE - 437)) | (1 << (FlinkSqlParser.KW_DESC - 437)) | (1 << (FlinkSqlParser.KW_DESCRIPTOR - 437)) | (1 << (FlinkSqlParser.KW_DIV - 437)) | (1 << (FlinkSqlParser.KW_ENGINE - 437)) | (1 << (FlinkSqlParser.KW_EPOCH - 437)) | (1 << (FlinkSqlParser.KW_EXCLUDING - 437)) | (1 << (FlinkSqlParser.KW_FILE - 437)) | (1 << (FlinkSqlParser.KW_FIRST - 437)) | (1 << (FlinkSqlParser.KW_GENERATED - 437)) | (1 << (FlinkSqlParser.KW_HOP - 437)) | (1 << (FlinkSqlParser.KW_HOURS - 437)) | (1 << (FlinkSqlParser.KW_IGNORE - 437)) | (1 << (FlinkSqlParser.KW_INCLUDING - 437)) | (1 << (FlinkSqlParser.KW_JAR - 437)) | (1 << (FlinkSqlParser.KW_JARS - 437)) | (1 << (FlinkSqlParser.KW_JAVA - 437)) | (1 << (FlinkSqlParser.KW_KEY - 437)) | (1 << (FlinkSqlParser.KW_LAST - 437)) | (1 << (FlinkSqlParser.KW_LOAD - 437)))) !== 0) || ((((_la - 469)) & ~0x1F) === 0 && ((1 << (_la - 469)) & ((1 << (FlinkSqlParser.KW_MAP - 469)) | (1 << (FlinkSqlParser.KW_MICROSECOND - 469)) | (1 << (FlinkSqlParser.KW_MILLENNIUM - 469)) | (1 << (FlinkSqlParser.KW_MILLISECOND - 469)) | (1 << (FlinkSqlParser.KW_MINUTES - 469)) | (1 << (FlinkSqlParser.KW_MONTHS - 469)) | (1 << (FlinkSqlParser.KW_NANOSECOND - 469)) | (1 << (FlinkSqlParser.KW_NULLS - 469)) | (1 << (FlinkSqlParser.KW_OPTIONS - 469)) | (1 << (FlinkSqlParser.KW_PAST - 469)) | (1 << (FlinkSqlParser.KW_PLAN - 469)) | (1 << (FlinkSqlParser.KW_PRECEDING - 469)) | (1 << (FlinkSqlParser.KW_PYTHON - 469)) | (1 << (FlinkSqlParser.KW_PYTHON_ARCHIVES - 469)) | (1 << (FlinkSqlParser.KW_PYTHON_DEPENDENCIES - 469)) | (1 << (FlinkSqlParser.KW_PYTHON_FILES - 469)) | (1 << (FlinkSqlParser.KW_PYTHON_JAR - 469)) | (1 << (FlinkSqlParser.KW_PYTHON_PARAMETER - 469)) | (1 << (FlinkSqlParser.KW_PYTHON_REQUIREMENTS - 469)) | (1 << (FlinkSqlParser.KW_QUARTER - 469)) | (1 << (FlinkSqlParser.KW_REMOVE - 469)) | (1 << (FlinkSqlParser.KW_RESTRICT - 469)) | (1 << (FlinkSqlParser.KW_SECONDS - 469)) | (1 << (FlinkSqlParser.KW_SESSION - 469)) | (1 << (FlinkSqlParser.KW_SETS - 469)) | (1 << (FlinkSqlParser.KW_SIZE - 469)) | (1 << (FlinkSqlParser.KW_SLIDE - 469)) | (1 << (FlinkSqlParser.KW_STEP - 469)) | (1 << (FlinkSqlParser.KW_TEMPORARY - 469)) | (1 << (FlinkSqlParser.KW_TIMECOL - 469)) | (1 << (FlinkSqlParser.KW_TUMBLE - 469)) | (1 << (FlinkSqlParser.KW_UNLOAD - 469)))) !== 0) || ((((_la - 501)) & ~0x1F) === 0 && ((1 << (_la - 501)) & ((1 << (FlinkSqlParser.KW_VIEW - 501)) | (1 << (FlinkSqlParser.KW_WEEK - 501)) | (1 << (FlinkSqlParser.KW_YEARS - 501)) | (1 << (FlinkSqlParser.KW_ZONE - 501)))) !== 0))) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token.Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException.RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    sempred(_localctx, ruleIndex, predIndex) {
        switch (ruleIndex) {
            case 79:
                return this.queryStatement_sempred(_localctx, predIndex);
            case 89:
                return this.tableExpression_sempred(_localctx, predIndex);
            case 130:
                return this.booleanExpression_sempred(_localctx, predIndex);
            case 133:
                return this.valueExpression_sempred(_localctx, predIndex);
            case 134:
                return this.primaryExpression_sempred(_localctx, predIndex);
        }
        return true;
    }
    queryStatement_sempred(_localctx, predIndex) {
        switch (predIndex) {
            case 0:
                return this.precpred(this._ctx, 3);
        }
        return true;
    }
    tableExpression_sempred(_localctx, predIndex) {
        switch (predIndex) {
            case 1:
                return this.precpred(this._ctx, 3);
            case 2:
                return this.precpred(this._ctx, 4);
        }
        return true;
    }
    booleanExpression_sempred(_localctx, predIndex) {
        switch (predIndex) {
            case 3:
                return this.precpred(this._ctx, 3);
            case 4:
                return this.precpred(this._ctx, 2);
            case 5:
                return this.precpred(this._ctx, 1);
        }
        return true;
    }
    valueExpression_sempred(_localctx, predIndex) {
        switch (predIndex) {
            case 6:
                return this.precpred(this._ctx, 6);
            case 7:
                return this.precpred(this._ctx, 5);
            case 8:
                return this.precpred(this._ctx, 4);
            case 9:
                return this.precpred(this._ctx, 3);
            case 10:
                return this.precpred(this._ctx, 2);
            case 11:
                return this.precpred(this._ctx, 1);
        }
        return true;
    }
    primaryExpression_sempred(_localctx, predIndex) {
        switch (predIndex) {
            case 12:
                return this.precpred(this._ctx, 5);
        }
        return true;
    }
    static get _ATN() {
        if (!FlinkSqlParser.__ATN) {
            FlinkSqlParser.__ATN = new ATNDeserializer.ATNDeserializer().deserialize(Utils.toCharArray(FlinkSqlParser._serializedATN));
        }
        return FlinkSqlParser.__ATN;
    }
}
FlinkSqlParser.SPACE = 1;
FlinkSqlParser.COMMENT_INPUT = 2;
FlinkSqlParser.LINE_COMMENT = 3;
FlinkSqlParser.KW_ABS = 4;
FlinkSqlParser.KW_ALL = 5;
FlinkSqlParser.KW_ALLOCATE = 6;
FlinkSqlParser.KW_ALLOW = 7;
FlinkSqlParser.KW_ALTER = 8;
FlinkSqlParser.KW_ANALYZE = 9;
FlinkSqlParser.KW_AND = 10;
FlinkSqlParser.KW_ANY = 11;
FlinkSqlParser.KW_ARE = 12;
FlinkSqlParser.KW_ARRAY = 13;
FlinkSqlParser.KW_ARRAY_AGG = 14;
FlinkSqlParser.KW_ARRAY_CONCAT_AGG = 15;
FlinkSqlParser.KW_ARRAY_MAX_CARDINALITY = 16;
FlinkSqlParser.KW_AS = 17;
FlinkSqlParser.KW_ASENSITIVE = 18;
FlinkSqlParser.KW_ASYMMETRIC = 19;
FlinkSqlParser.KW_AT = 20;
FlinkSqlParser.KW_ATOMIC = 21;
FlinkSqlParser.KW_AUTHORIZATION = 22;
FlinkSqlParser.KW_AVG = 23;
FlinkSqlParser.KW_BEGIN = 24;
FlinkSqlParser.KW_BEGIN_FRAME = 25;
FlinkSqlParser.KW_BEGIN_PARTITION = 26;
FlinkSqlParser.KW_BETWEEN = 27;
FlinkSqlParser.KW_BIGINT = 28;
FlinkSqlParser.KW_BINARY = 29;
FlinkSqlParser.KW_BIT = 30;
FlinkSqlParser.KW_BLOB = 31;
FlinkSqlParser.KW_BOOLEAN = 32;
FlinkSqlParser.KW_BOTH = 33;
FlinkSqlParser.KW_BY = 34;
FlinkSqlParser.KW_BYTES = 35;
FlinkSqlParser.KW_CALL = 36;
FlinkSqlParser.KW_CALLED = 37;
FlinkSqlParser.KW_CARDINALITY = 38;
FlinkSqlParser.KW_CASCADED = 39;
FlinkSqlParser.KW_CASE = 40;
FlinkSqlParser.KW_CAST = 41;
FlinkSqlParser.KW_CATALOGS = 42;
FlinkSqlParser.KW_CEIL = 43;
FlinkSqlParser.KW_CEILING = 44;
FlinkSqlParser.KW_CHANGELOG_MODE = 45;
FlinkSqlParser.KW_CHAR = 46;
FlinkSqlParser.KW_CHARACTER = 47;
FlinkSqlParser.KW_CHARACTER_LENGTH = 48;
FlinkSqlParser.KW_CHAR_LENGTH = 49;
FlinkSqlParser.KW_CHECK = 50;
FlinkSqlParser.KW_CLASSIFIER = 51;
FlinkSqlParser.KW_CLOB = 52;
FlinkSqlParser.KW_CLOSE = 53;
FlinkSqlParser.KW_COALESCE = 54;
FlinkSqlParser.KW_COLLATE = 55;
FlinkSqlParser.KW_COLLECT = 56;
FlinkSqlParser.KW_COLUMN = 57;
FlinkSqlParser.KW_COLUMNS = 58;
FlinkSqlParser.KW_COMMENT = 59;
FlinkSqlParser.KW_COMMIT = 60;
FlinkSqlParser.KW_COMPUTE = 61;
FlinkSqlParser.KW_CONDITION = 62;
FlinkSqlParser.KW_CONNECT = 63;
FlinkSqlParser.KW_CONSTRAINT = 64;
FlinkSqlParser.KW_CONTAINS = 65;
FlinkSqlParser.KW_CONVERT = 66;
FlinkSqlParser.KW_CORR = 67;
FlinkSqlParser.KW_CORRESPONDING = 68;
FlinkSqlParser.KW_COUNT = 69;
FlinkSqlParser.KW_COVAR_POP = 70;
FlinkSqlParser.KW_COVAR_SAMP = 71;
FlinkSqlParser.KW_CREATE = 72;
FlinkSqlParser.KW_CROSS = 73;
FlinkSqlParser.KW_CUBE = 74;
FlinkSqlParser.KW_CUME_DIST = 75;
FlinkSqlParser.KW_CURRENT = 76;
FlinkSqlParser.KW_CURRENT_CATALOG = 77;
FlinkSqlParser.KW_CURRENT_DATE = 78;
FlinkSqlParser.KW_CURRENT_DEFAULT_TRANSFORM_GROUP = 79;
FlinkSqlParser.KW_CURRENT_PATH = 80;
FlinkSqlParser.KW_CURRENT_ROLE = 81;
FlinkSqlParser.KW_CURRENT_ROW = 82;
FlinkSqlParser.KW_CURRENT_SCHEMA = 83;
FlinkSqlParser.KW_CURRENT_TIME = 84;
FlinkSqlParser.KW_CURRENT_TIMESTAMP = 85;
FlinkSqlParser.KW_CURRENT_TRANSFORM_GROUP_FOR_TYPE = 86;
FlinkSqlParser.KW_CURRENT_USER = 87;
FlinkSqlParser.KW_CURSOR = 88;
FlinkSqlParser.KW_CYCLE = 89;
FlinkSqlParser.KW_DATABASES = 90;
FlinkSqlParser.KW_DATE = 91;
FlinkSqlParser.KW_DATETIME = 92;
FlinkSqlParser.KW_DATETIME_DIFF = 93;
FlinkSqlParser.KW_DATETIME_TRUNC = 94;
FlinkSqlParser.KW_DATE_DIFF = 95;
FlinkSqlParser.KW_DATE_TRUNC = 96;
FlinkSqlParser.KW_DAY = 97;
FlinkSqlParser.KW_DAYOFWEEK = 98;
FlinkSqlParser.KW_DAYOFYEAR = 99;
FlinkSqlParser.KW_DEALLOCATE = 100;
FlinkSqlParser.KW_DEC = 101;
FlinkSqlParser.KW_DECIMAL = 102;
FlinkSqlParser.KW_DECLARE = 103;
FlinkSqlParser.KW_DEFAULT = 104;
FlinkSqlParser.KW_DEFINE = 105;
FlinkSqlParser.KW_DELETE = 106;
FlinkSqlParser.KW_DENSE_RANK = 107;
FlinkSqlParser.KW_DEREF = 108;
FlinkSqlParser.KW_DESCRIBE = 109;
FlinkSqlParser.KW_DETERMINISTIC = 110;
FlinkSqlParser.KW_DISALLOW = 111;
FlinkSqlParser.KW_DISCONNECT = 112;
FlinkSqlParser.KW_DISTINCT = 113;
FlinkSqlParser.KW_DOT = 114;
FlinkSqlParser.KW_DOUBLE = 115;
FlinkSqlParser.KW_DROP = 116;
FlinkSqlParser.KW_DYNAMIC = 117;
FlinkSqlParser.KW_EACH = 118;
FlinkSqlParser.KW_ELEMENT = 119;
FlinkSqlParser.KW_ELSE = 120;
FlinkSqlParser.KW_EMPTY = 121;
FlinkSqlParser.KW_END = 122;
FlinkSqlParser.KW_END_FRAME = 123;
FlinkSqlParser.KW_END_PARTITION = 124;
FlinkSqlParser.KW_ENFORCED = 125;
FlinkSqlParser.KW_EQUALS = 126;
FlinkSqlParser.KW_ESCAPE = 127;
FlinkSqlParser.KW_ESTIMATED_COST = 128;
FlinkSqlParser.KW_EVERY = 129;
FlinkSqlParser.KW_EXCEPT = 130;
FlinkSqlParser.KW_EXEC = 131;
FlinkSqlParser.KW_EXECUTE = 132;
FlinkSqlParser.KW_EXISTS = 133;
FlinkSqlParser.KW_EXP = 134;
FlinkSqlParser.KW_EXPLAIN = 135;
FlinkSqlParser.KW_EXTEND = 136;
FlinkSqlParser.KW_EXTENDED = 137;
FlinkSqlParser.KW_EXTERNAL = 138;
FlinkSqlParser.KW_EXTRACT = 139;
FlinkSqlParser.KW_FALSE = 140;
FlinkSqlParser.KW_FETCH = 141;
FlinkSqlParser.KW_FILTER = 142;
FlinkSqlParser.KW_FIRST_VALUE = 143;
FlinkSqlParser.KW_FLOAT = 144;
FlinkSqlParser.KW_FLOOR = 145;
FlinkSqlParser.KW_FOR = 146;
FlinkSqlParser.KW_FOREIGN = 147;
FlinkSqlParser.KW_FRAME_ROW = 148;
FlinkSqlParser.KW_FREE = 149;
FlinkSqlParser.KW_FRIDAY = 150;
FlinkSqlParser.KW_FROM = 151;
FlinkSqlParser.KW_FULL = 152;
FlinkSqlParser.KW_FUNCTION = 153;
FlinkSqlParser.KW_FUNCTIONS = 154;
FlinkSqlParser.KW_FUSION = 155;
FlinkSqlParser.KW_GET = 156;
FlinkSqlParser.KW_GLOBAL = 157;
FlinkSqlParser.KW_GRANT = 158;
FlinkSqlParser.KW_GROUP = 159;
FlinkSqlParser.KW_GROUPING = 160;
FlinkSqlParser.KW_GROUPS = 161;
FlinkSqlParser.KW_GROUP_CONCAT = 162;
FlinkSqlParser.KW_HAVING = 163;
FlinkSqlParser.KW_HOLD = 164;
FlinkSqlParser.KW_HOUR = 165;
FlinkSqlParser.KW_IDENTITY = 166;
FlinkSqlParser.KW_IF = 167;
FlinkSqlParser.KW_ILIKE = 168;
FlinkSqlParser.KW_IMPORT = 169;
FlinkSqlParser.KW_IN = 170;
FlinkSqlParser.KW_INCLUDE = 171;
FlinkSqlParser.KW_INDICATOR = 172;
FlinkSqlParser.KW_INITIAL = 173;
FlinkSqlParser.KW_INNER = 174;
FlinkSqlParser.KW_INOUT = 175;
FlinkSqlParser.KW_INSENSITIVE = 176;
FlinkSqlParser.KW_INSERT = 177;
FlinkSqlParser.KW_INT = 178;
FlinkSqlParser.KW_INTEGER = 179;
FlinkSqlParser.KW_INTERSECT = 180;
FlinkSqlParser.KW_INTERSECTION = 181;
FlinkSqlParser.KW_INTERVAL = 182;
FlinkSqlParser.KW_INTO = 183;
FlinkSqlParser.KW_IS = 184;
FlinkSqlParser.KW_JOIN = 185;
FlinkSqlParser.KW_JSON_ARRAY = 186;
FlinkSqlParser.KW_JSON_ARRAYAGG = 187;
FlinkSqlParser.KW_JSON_EXECUTION_PLAN = 188;
FlinkSqlParser.KW_JSON_EXISTS = 189;
FlinkSqlParser.KW_JSON_OBJECT = 190;
FlinkSqlParser.KW_JSON_OBJECTAGG = 191;
FlinkSqlParser.KW_JSON_QUERY = 192;
FlinkSqlParser.KW_JSON_VALUE = 193;
FlinkSqlParser.KW_LAG = 194;
FlinkSqlParser.KW_LANGUAGE = 195;
FlinkSqlParser.KW_LARGE = 196;
FlinkSqlParser.KW_LAST_VALUE = 197;
FlinkSqlParser.KW_LATERAL = 198;
FlinkSqlParser.KW_LEAD = 199;
FlinkSqlParser.KW_LEADING = 200;
FlinkSqlParser.KW_LEFT = 201;
FlinkSqlParser.KW_LIKE = 202;
FlinkSqlParser.KW_LIKE_REGEX = 203;
FlinkSqlParser.KW_LIMIT = 204;
FlinkSqlParser.KW_LN = 205;
FlinkSqlParser.KW_LOCAL = 206;
FlinkSqlParser.KW_LOCALTIME = 207;
FlinkSqlParser.KW_LOCALTIMESTAMP = 208;
FlinkSqlParser.KW_LOWER = 209;
FlinkSqlParser.KW_MATCH = 210;
FlinkSqlParser.KW_MATCHES = 211;
FlinkSqlParser.KW_MATCH_NUMBER = 212;
FlinkSqlParser.KW_MATCH_RECOGNIZE = 213;
FlinkSqlParser.KW_MAX = 214;
FlinkSqlParser.KW_MEASURES = 215;
FlinkSqlParser.KW_MEMBER = 216;
FlinkSqlParser.KW_MERGE = 217;
FlinkSqlParser.KW_METADATA = 218;
FlinkSqlParser.KW_METHOD = 219;
FlinkSqlParser.KW_MIN = 220;
FlinkSqlParser.KW_MINUS = 221;
FlinkSqlParser.KW_MINUTE = 222;
FlinkSqlParser.KW_MOD = 223;
FlinkSqlParser.KW_MODIFIES = 224;
FlinkSqlParser.KW_MODIFY = 225;
FlinkSqlParser.KW_MODULE = 226;
FlinkSqlParser.KW_MODULES = 227;
FlinkSqlParser.KW_MONDAY = 228;
FlinkSqlParser.KW_MONTH = 229;
FlinkSqlParser.KW_MORE = 230;
FlinkSqlParser.KW_MULTISET = 231;
FlinkSqlParser.KW_NATIONAL = 232;
FlinkSqlParser.KW_NATURAL = 233;
FlinkSqlParser.KW_NCHAR = 234;
FlinkSqlParser.KW_NCLOB = 235;
FlinkSqlParser.KW_NEW = 236;
FlinkSqlParser.KW_NEXT = 237;
FlinkSqlParser.KW_NO = 238;
FlinkSqlParser.KW_NONE = 239;
FlinkSqlParser.KW_NORMALIZE = 240;
FlinkSqlParser.KW_NOT = 241;
FlinkSqlParser.KW_NTH_VALUE = 242;
FlinkSqlParser.KW_NTILE = 243;
FlinkSqlParser.KW_NULL = 244;
FlinkSqlParser.KW_NULLIF = 245;
FlinkSqlParser.KW_NUMERIC = 246;
FlinkSqlParser.KW_OCCURRENCES_REGEX = 247;
FlinkSqlParser.KW_OCTET_LENGTH = 248;
FlinkSqlParser.KW_OF = 249;
FlinkSqlParser.KW_OFFSET = 250;
FlinkSqlParser.KW_OLD = 251;
FlinkSqlParser.KW_OMIT = 252;
FlinkSqlParser.KW_ON = 253;
FlinkSqlParser.KW_ONE = 254;
FlinkSqlParser.KW_ONLY = 255;
FlinkSqlParser.KW_OPEN = 256;
FlinkSqlParser.KW_OR = 257;
FlinkSqlParser.KW_ORDER = 258;
FlinkSqlParser.KW_ORDINAL = 259;
FlinkSqlParser.KW_OUT = 260;
FlinkSqlParser.KW_OUTER = 261;
FlinkSqlParser.KW_OVER = 262;
FlinkSqlParser.KW_OVERLAPS = 263;
FlinkSqlParser.KW_OVERLAY = 264;
FlinkSqlParser.KW_OVERWRITE = 265;
FlinkSqlParser.KW_OVERWRITING = 266;
FlinkSqlParser.KW_PARAMETER = 267;
FlinkSqlParser.KW_PARTITION = 268;
FlinkSqlParser.KW_PARTITIONED = 269;
FlinkSqlParser.KW_PARTITIONS = 270;
FlinkSqlParser.KW_PATTERN = 271;
FlinkSqlParser.KW_PER = 272;
FlinkSqlParser.KW_PERCENT = 273;
FlinkSqlParser.KW_PERCENTILE_CONT = 274;
FlinkSqlParser.KW_PERCENTILE_DISC = 275;
FlinkSqlParser.KW_PERCENT_RANK = 276;
FlinkSqlParser.KW_PERIOD = 277;
FlinkSqlParser.KW_PERMUTE = 278;
FlinkSqlParser.KW_PIVOT = 279;
FlinkSqlParser.KW_PORTION = 280;
FlinkSqlParser.KW_POSITION = 281;
FlinkSqlParser.KW_POSITION_REGEX = 282;
FlinkSqlParser.KW_POWER = 283;
FlinkSqlParser.KW_PRECEDES = 284;
FlinkSqlParser.KW_PRECISION = 285;
FlinkSqlParser.KW_PREPARE = 286;
FlinkSqlParser.KW_PREV = 287;
FlinkSqlParser.KW_PRIMARY = 288;
FlinkSqlParser.KW_PROCEDURE = 289;
FlinkSqlParser.KW_QUALIFY = 290;
FlinkSqlParser.KW_QUARTERS = 291;
FlinkSqlParser.KW_RANGE = 292;
FlinkSqlParser.KW_RANK = 293;
FlinkSqlParser.KW_RAW = 294;
FlinkSqlParser.KW_READS = 295;
FlinkSqlParser.KW_REAL = 296;
FlinkSqlParser.KW_RECURSIVE = 297;
FlinkSqlParser.KW_REF = 298;
FlinkSqlParser.KW_REFERENCES = 299;
FlinkSqlParser.KW_REFERENCING = 300;
FlinkSqlParser.KW_REGR_AVGX = 301;
FlinkSqlParser.KW_REGR_AVGY = 302;
FlinkSqlParser.KW_REGR_COUNT = 303;
FlinkSqlParser.KW_REGR_INTERCEPT = 304;
FlinkSqlParser.KW_REGR_R2 = 305;
FlinkSqlParser.KW_REGR_SLOPE = 306;
FlinkSqlParser.KW_REGR_SXX = 307;
FlinkSqlParser.KW_REGR_SXY = 308;
FlinkSqlParser.KW_REGR_SYY = 309;
FlinkSqlParser.KW_RELEASE = 310;
FlinkSqlParser.KW_RENAME = 311;
FlinkSqlParser.KW_RESET = 312;
FlinkSqlParser.KW_RESULT = 313;
FlinkSqlParser.KW_RETURN = 314;
FlinkSqlParser.KW_RETURNS = 315;
FlinkSqlParser.KW_REVOKE = 316;
FlinkSqlParser.KW_RIGHT = 317;
FlinkSqlParser.KW_RLIKE = 318;
FlinkSqlParser.KW_ROLLBACK = 319;
FlinkSqlParser.KW_ROLLUP = 320;
FlinkSqlParser.KW_ROW = 321;
FlinkSqlParser.KW_ROWS = 322;
FlinkSqlParser.KW_ROW_NUMBER = 323;
FlinkSqlParser.KW_RUNNING = 324;
FlinkSqlParser.KW_SAFE_CAST = 325;
FlinkSqlParser.KW_SAFE_OFFSET = 326;
FlinkSqlParser.KW_SAFE_ORDINAL = 327;
FlinkSqlParser.KW_SATURDAY = 328;
FlinkSqlParser.KW_SAVEPOINT = 329;
FlinkSqlParser.KW_SCALA = 330;
FlinkSqlParser.KW_SCOPE = 331;
FlinkSqlParser.KW_SCROLL = 332;
FlinkSqlParser.KW_SEARCH = 333;
FlinkSqlParser.KW_SECOND = 334;
FlinkSqlParser.KW_SEEK = 335;
FlinkSqlParser.KW_SELECT = 336;
FlinkSqlParser.KW_SENSITIVE = 337;
FlinkSqlParser.KW_SEPARATOR = 338;
FlinkSqlParser.KW_SESSION_USER = 339;
FlinkSqlParser.KW_SET = 340;
FlinkSqlParser.KW_SHOW = 341;
FlinkSqlParser.KW_SIMILAR = 342;
FlinkSqlParser.KW_SKIP = 343;
FlinkSqlParser.KW_SMALLINT = 344;
FlinkSqlParser.KW_SOME = 345;
FlinkSqlParser.KW_SPECIFIC = 346;
FlinkSqlParser.KW_SPECIFICTYPE = 347;
FlinkSqlParser.KW_SQL = 348;
FlinkSqlParser.KW_SQLEXCEPTION = 349;
FlinkSqlParser.KW_SQLSTATE = 350;
FlinkSqlParser.KW_SQLWARNING = 351;
FlinkSqlParser.KW_SQRT = 352;
FlinkSqlParser.KW_START = 353;
FlinkSqlParser.KW_STATEMENT = 354;
FlinkSqlParser.KW_STATIC = 355;
FlinkSqlParser.KW_STATISTICS = 356;
FlinkSqlParser.KW_STDDEV_POP = 357;
FlinkSqlParser.KW_STDDEV_SAMP = 358;
FlinkSqlParser.KW_STREAM = 359;
FlinkSqlParser.KW_STRING = 360;
FlinkSqlParser.KW_STRING_AGG = 361;
FlinkSqlParser.KW_SUBMULTISET = 362;
FlinkSqlParser.KW_SUBSET = 363;
FlinkSqlParser.KW_SUBSTRING = 364;
FlinkSqlParser.KW_SUBSTRING_REGEX = 365;
FlinkSqlParser.KW_SUCCEEDS = 366;
FlinkSqlParser.KW_SUM = 367;
FlinkSqlParser.KW_SUNDAY = 368;
FlinkSqlParser.KW_SYMMETRIC = 369;
FlinkSqlParser.KW_SYSTEM = 370;
FlinkSqlParser.KW_SYSTEM_TIME = 371;
FlinkSqlParser.KW_SYSTEM_USER = 372;
FlinkSqlParser.KW_TABLE = 373;
FlinkSqlParser.KW_TABLES = 374;
FlinkSqlParser.KW_TABLESAMPLE = 375;
FlinkSqlParser.KW_THEN = 376;
FlinkSqlParser.KW_THURSDAY = 377;
FlinkSqlParser.KW_TIME = 378;
FlinkSqlParser.KW_TIMESTAMP = 379;
FlinkSqlParser.KW_TIMESTAMP_DIFF = 380;
FlinkSqlParser.KW_TIMESTAMP_LTZ = 381;
FlinkSqlParser.KW_TIMESTAMP_TRUNC = 382;
FlinkSqlParser.KW_TIMEZONE_HOUR = 383;
FlinkSqlParser.KW_TIMEZONE_MINUTE = 384;
FlinkSqlParser.KW_TIME_DIFF = 385;
FlinkSqlParser.KW_TIME_TRUNC = 386;
FlinkSqlParser.KW_TINYINT = 387;
FlinkSqlParser.KW_TO = 388;
FlinkSqlParser.KW_TRAILING = 389;
FlinkSqlParser.KW_TRANSLATE = 390;
FlinkSqlParser.KW_TRANSLATE_REGEX = 391;
FlinkSqlParser.KW_TRANSLATION = 392;
FlinkSqlParser.KW_TREAT = 393;
FlinkSqlParser.KW_TRIGGER = 394;
FlinkSqlParser.KW_TRIM = 395;
FlinkSqlParser.KW_TRIM_ARRAY = 396;
FlinkSqlParser.KW_TRUE = 397;
FlinkSqlParser.KW_TRUNCATE = 398;
FlinkSqlParser.KW_TRY_CAST = 399;
FlinkSqlParser.KW_TUESDAY = 400;
FlinkSqlParser.KW_UESCAPE = 401;
FlinkSqlParser.KW_UNION = 402;
FlinkSqlParser.KW_UNIQUE = 403;
FlinkSqlParser.KW_UNKNOWN = 404;
FlinkSqlParser.KW_UNNEST = 405;
FlinkSqlParser.KW_UNPIVOT = 406;
FlinkSqlParser.KW_UPDATE = 407;
FlinkSqlParser.KW_UPPER = 408;
FlinkSqlParser.KW_UPSERT = 409;
FlinkSqlParser.KW_USE = 410;
FlinkSqlParser.KW_USER = 411;
FlinkSqlParser.KW_USING = 412;
FlinkSqlParser.KW_VALUE = 413;
FlinkSqlParser.KW_VALUES = 414;
FlinkSqlParser.KW_VALUE_OF = 415;
FlinkSqlParser.KW_VARBINARY = 416;
FlinkSqlParser.KW_VARCHAR = 417;
FlinkSqlParser.KW_VARYING = 418;
FlinkSqlParser.KW_VAR_POP = 419;
FlinkSqlParser.KW_VAR_SAMP = 420;
FlinkSqlParser.KW_VERSIONING = 421;
FlinkSqlParser.KW_VIEWS = 422;
FlinkSqlParser.KW_VIRTUAL = 423;
FlinkSqlParser.KW_WATERMARK = 424;
FlinkSqlParser.KW_WATERMARKS = 425;
FlinkSqlParser.KW_WEDNESDAY = 426;
FlinkSqlParser.KW_WEEKS = 427;
FlinkSqlParser.KW_WHEN = 428;
FlinkSqlParser.KW_WHENEVER = 429;
FlinkSqlParser.KW_WHERE = 430;
FlinkSqlParser.KW_WIDTH_BUCKET = 431;
FlinkSqlParser.KW_WINDOW = 432;
FlinkSqlParser.KW_WITH = 433;
FlinkSqlParser.KW_WITHIN = 434;
FlinkSqlParser.KW_WITHOUT = 435;
FlinkSqlParser.KW_YEAR = 436;
FlinkSqlParser.KW_ADD = 437;
FlinkSqlParser.KW_AFTER = 438;
FlinkSqlParser.KW_ASC = 439;
FlinkSqlParser.KW_CASCADE = 440;
FlinkSqlParser.KW_CATALOG = 441;
FlinkSqlParser.KW_CENTURY = 442;
FlinkSqlParser.KW_CONFIG = 443;
FlinkSqlParser.KW_CONSTRAINTS = 444;
FlinkSqlParser.KW_CUMULATE = 445;
FlinkSqlParser.KW_DATA = 446;
FlinkSqlParser.KW_DATABASE = 447;
FlinkSqlParser.KW_DAYS = 448;
FlinkSqlParser.KW_DECADE = 449;
FlinkSqlParser.KW_DESC = 450;
FlinkSqlParser.KW_DESCRIPTOR = 451;
FlinkSqlParser.KW_DIV = 452;
FlinkSqlParser.KW_ENGINE = 453;
FlinkSqlParser.KW_EPOCH = 454;
FlinkSqlParser.KW_EXCLUDING = 455;
FlinkSqlParser.KW_FILE = 456;
FlinkSqlParser.KW_FIRST = 457;
FlinkSqlParser.KW_GENERATED = 458;
FlinkSqlParser.KW_HOP = 459;
FlinkSqlParser.KW_HOURS = 460;
FlinkSqlParser.KW_IGNORE = 461;
FlinkSqlParser.KW_INCLUDING = 462;
FlinkSqlParser.KW_JAR = 463;
FlinkSqlParser.KW_JARS = 464;
FlinkSqlParser.KW_JAVA = 465;
FlinkSqlParser.KW_KEY = 466;
FlinkSqlParser.KW_LAST = 467;
FlinkSqlParser.KW_LOAD = 468;
FlinkSqlParser.KW_MAP = 469;
FlinkSqlParser.KW_MICROSECOND = 470;
FlinkSqlParser.KW_MILLENNIUM = 471;
FlinkSqlParser.KW_MILLISECOND = 472;
FlinkSqlParser.KW_MINUTES = 473;
FlinkSqlParser.KW_MONTHS = 474;
FlinkSqlParser.KW_NANOSECOND = 475;
FlinkSqlParser.KW_NULLS = 476;
FlinkSqlParser.KW_OPTIONS = 477;
FlinkSqlParser.KW_PAST = 478;
FlinkSqlParser.KW_PLAN = 479;
FlinkSqlParser.KW_PRECEDING = 480;
FlinkSqlParser.KW_PYTHON = 481;
FlinkSqlParser.KW_PYTHON_ARCHIVES = 482;
FlinkSqlParser.KW_PYTHON_DEPENDENCIES = 483;
FlinkSqlParser.KW_PYTHON_FILES = 484;
FlinkSqlParser.KW_PYTHON_JAR = 485;
FlinkSqlParser.KW_PYTHON_PARAMETER = 486;
FlinkSqlParser.KW_PYTHON_REQUIREMENTS = 487;
FlinkSqlParser.KW_QUARTER = 488;
FlinkSqlParser.KW_REMOVE = 489;
FlinkSqlParser.KW_RESTRICT = 490;
FlinkSqlParser.KW_SECONDS = 491;
FlinkSqlParser.KW_SESSION = 492;
FlinkSqlParser.KW_SETS = 493;
FlinkSqlParser.KW_SIZE = 494;
FlinkSqlParser.KW_SLIDE = 495;
FlinkSqlParser.KW_STEP = 496;
FlinkSqlParser.KW_TEMPORARY = 497;
FlinkSqlParser.KW_TIMECOL = 498;
FlinkSqlParser.KW_TUMBLE = 499;
FlinkSqlParser.KW_UNLOAD = 500;
FlinkSqlParser.KW_VIEW = 501;
FlinkSqlParser.KW_WEEK = 502;
FlinkSqlParser.KW_YEARS = 503;
FlinkSqlParser.KW_ZONE = 504;
FlinkSqlParser.EQUAL_SYMBOL = 505;
FlinkSqlParser.GREATER_SYMBOL = 506;
FlinkSqlParser.LESS_SYMBOL = 507;
FlinkSqlParser.EXCLAMATION_SYMBOL = 508;
FlinkSqlParser.BIT_NOT_OP = 509;
FlinkSqlParser.BIT_OR_OP = 510;
FlinkSqlParser.BIT_AND_OP = 511;
FlinkSqlParser.BIT_XOR_OP = 512;
FlinkSqlParser.DOT = 513;
FlinkSqlParser.LS_BRACKET = 514;
FlinkSqlParser.RS_BRACKET = 515;
FlinkSqlParser.LR_BRACKET = 516;
FlinkSqlParser.RR_BRACKET = 517;
FlinkSqlParser.LB_BRACKET = 518;
FlinkSqlParser.RB_BRACKET = 519;
FlinkSqlParser.COMMA = 520;
FlinkSqlParser.SEMICOLON = 521;
FlinkSqlParser.AT_SIGN = 522;
FlinkSqlParser.SINGLE_QUOTE_SYMB = 523;
FlinkSqlParser.DOUBLE_QUOTE_SYMB = 524;
FlinkSqlParser.REVERSE_QUOTE_SYMB = 525;
FlinkSqlParser.COLON_SYMB = 526;
FlinkSqlParser.ASTERISK_SIGN = 527;
FlinkSqlParser.UNDERLINE_SIGN = 528;
FlinkSqlParser.HYPNEN_SIGN = 529;
FlinkSqlParser.ADD_SIGN = 530;
FlinkSqlParser.PENCENT_SIGN = 531;
FlinkSqlParser.DOUBLE_VERTICAL_SIGN = 532;
FlinkSqlParser.DOUBLE_HYPNEN_SIGN = 533;
FlinkSqlParser.SLASH_SIGN = 534;
FlinkSqlParser.QUESTION_MARK_SIGN = 535;
FlinkSqlParser.DOUBLE_RIGHT_ARROW = 536;
FlinkSqlParser.STRING_LITERAL = 537;
FlinkSqlParser.DIG_LITERAL = 538;
FlinkSqlParser.REAL_LITERAL = 539;
FlinkSqlParser.BIT_STRING = 540;
FlinkSqlParser.ID_LITERAL = 541;
FlinkSqlParser.RULE_program = 0;
FlinkSqlParser.RULE_singleStatement = 1;
FlinkSqlParser.RULE_sqlStatement = 2;
FlinkSqlParser.RULE_emptyStatement = 3;
FlinkSqlParser.RULE_ddlStatement = 4;
FlinkSqlParser.RULE_dmlStatement = 5;
FlinkSqlParser.RULE_describeStatement = 6;
FlinkSqlParser.RULE_explainStatement = 7;
FlinkSqlParser.RULE_explainDetails = 8;
FlinkSqlParser.RULE_explainDetail = 9;
FlinkSqlParser.RULE_useStatement = 10;
FlinkSqlParser.RULE_useModuleStatement = 11;
FlinkSqlParser.RULE_showStatememt = 12;
FlinkSqlParser.RULE_loadStatement = 13;
FlinkSqlParser.RULE_unloadStatememt = 14;
FlinkSqlParser.RULE_setStatememt = 15;
FlinkSqlParser.RULE_resetStatememt = 16;
FlinkSqlParser.RULE_jarStatememt = 17;
FlinkSqlParser.RULE_dtAddStatement = 18;
FlinkSqlParser.RULE_dtFilePath = 19;
FlinkSqlParser.RULE_createTable = 20;
FlinkSqlParser.RULE_simpleCreateTable = 21;
FlinkSqlParser.RULE_createTableAsSelect = 22;
FlinkSqlParser.RULE_columnOptionDefinition = 23;
FlinkSqlParser.RULE_physicalColumnDefinition = 24;
FlinkSqlParser.RULE_columnNameCreate = 25;
FlinkSqlParser.RULE_columnName = 26;
FlinkSqlParser.RULE_columnNameList = 27;
FlinkSqlParser.RULE_columnType = 28;
FlinkSqlParser.RULE_lengthOneDimension = 29;
FlinkSqlParser.RULE_lengthTwoOptionalDimension = 30;
FlinkSqlParser.RULE_lengthTwoStringDimension = 31;
FlinkSqlParser.RULE_lengthOneTypeDimension = 32;
FlinkSqlParser.RULE_mapTypeDimension = 33;
FlinkSqlParser.RULE_rowTypeDimension = 34;
FlinkSqlParser.RULE_columnConstraint = 35;
FlinkSqlParser.RULE_commentSpec = 36;
FlinkSqlParser.RULE_metadataColumnDefinition = 37;
FlinkSqlParser.RULE_metadataKey = 38;
FlinkSqlParser.RULE_computedColumnDefinition = 39;
FlinkSqlParser.RULE_computedColumnExpression = 40;
FlinkSqlParser.RULE_watermarkDefinition = 41;
FlinkSqlParser.RULE_tableConstraint = 42;
FlinkSqlParser.RULE_constraintName = 43;
FlinkSqlParser.RULE_selfDefinitionClause = 44;
FlinkSqlParser.RULE_partitionDefinition = 45;
FlinkSqlParser.RULE_transformList = 46;
FlinkSqlParser.RULE_transform = 47;
FlinkSqlParser.RULE_transformArgument = 48;
FlinkSqlParser.RULE_likeDefinition = 49;
FlinkSqlParser.RULE_likeOption = 50;
FlinkSqlParser.RULE_createCatalog = 51;
FlinkSqlParser.RULE_createDatabase = 52;
FlinkSqlParser.RULE_createView = 53;
FlinkSqlParser.RULE_createFunction = 54;
FlinkSqlParser.RULE_usingClause = 55;
FlinkSqlParser.RULE_jarFileName = 56;
FlinkSqlParser.RULE_alterTable = 57;
FlinkSqlParser.RULE_renameDefinition = 58;
FlinkSqlParser.RULE_setKeyValueDefinition = 59;
FlinkSqlParser.RULE_addConstraint = 60;
FlinkSqlParser.RULE_dropConstraint = 61;
FlinkSqlParser.RULE_addUnique = 62;
FlinkSqlParser.RULE_notForced = 63;
FlinkSqlParser.RULE_alertView = 64;
FlinkSqlParser.RULE_alterDatabase = 65;
FlinkSqlParser.RULE_alterFunction = 66;
FlinkSqlParser.RULE_dropCatalog = 67;
FlinkSqlParser.RULE_dropTable = 68;
FlinkSqlParser.RULE_dropDatabase = 69;
FlinkSqlParser.RULE_dropView = 70;
FlinkSqlParser.RULE_dropFunction = 71;
FlinkSqlParser.RULE_insertStatement = 72;
FlinkSqlParser.RULE_insertSimpleStatement = 73;
FlinkSqlParser.RULE_insertPartitionDefinition = 74;
FlinkSqlParser.RULE_valuesDefinition = 75;
FlinkSqlParser.RULE_valuesRowDefinition = 76;
FlinkSqlParser.RULE_insertMulStatementCompatibility = 77;
FlinkSqlParser.RULE_insertMulStatement = 78;
FlinkSqlParser.RULE_queryStatement = 79;
FlinkSqlParser.RULE_valuesCaluse = 80;
FlinkSqlParser.RULE_withClause = 81;
FlinkSqlParser.RULE_withItem = 82;
FlinkSqlParser.RULE_withItemName = 83;
FlinkSqlParser.RULE_selectStatement = 84;
FlinkSqlParser.RULE_selectClause = 85;
FlinkSqlParser.RULE_projectItemDefinition = 86;
FlinkSqlParser.RULE_overWindowItem = 87;
FlinkSqlParser.RULE_fromClause = 88;
FlinkSqlParser.RULE_tableExpression = 89;
FlinkSqlParser.RULE_tableReference = 90;
FlinkSqlParser.RULE_tablePrimary = 91;
FlinkSqlParser.RULE_systemTimePeriod = 92;
FlinkSqlParser.RULE_dateTimeExpression = 93;
FlinkSqlParser.RULE_inlineDataValueClause = 94;
FlinkSqlParser.RULE_windoTVFClause = 95;
FlinkSqlParser.RULE_windowTVFExression = 96;
FlinkSqlParser.RULE_windoTVFName = 97;
FlinkSqlParser.RULE_windowTVFParam = 98;
FlinkSqlParser.RULE_timeIntervalParamName = 99;
FlinkSqlParser.RULE_columnDescriptor = 100;
FlinkSqlParser.RULE_joinCondition = 101;
FlinkSqlParser.RULE_whereClause = 102;
FlinkSqlParser.RULE_groupByClause = 103;
FlinkSqlParser.RULE_groupItemDefinition = 104;
FlinkSqlParser.RULE_groupingSets = 105;
FlinkSqlParser.RULE_groupingSetsNotaionName = 106;
FlinkSqlParser.RULE_groupWindowFunction = 107;
FlinkSqlParser.RULE_groupWindowFunctionName = 108;
FlinkSqlParser.RULE_timeAttrColumn = 109;
FlinkSqlParser.RULE_havingClause = 110;
FlinkSqlParser.RULE_windowClause = 111;
FlinkSqlParser.RULE_namedWindow = 112;
FlinkSqlParser.RULE_windowSpec = 113;
FlinkSqlParser.RULE_matchRecognizeClause = 114;
FlinkSqlParser.RULE_orderByCaluse = 115;
FlinkSqlParser.RULE_orderItemDefition = 116;
FlinkSqlParser.RULE_limitClause = 117;
FlinkSqlParser.RULE_partitionByClause = 118;
FlinkSqlParser.RULE_quantifiers = 119;
FlinkSqlParser.RULE_measuresClause = 120;
FlinkSqlParser.RULE_patternDefination = 121;
FlinkSqlParser.RULE_patternVariable = 122;
FlinkSqlParser.RULE_outputMode = 123;
FlinkSqlParser.RULE_afterMatchStrategy = 124;
FlinkSqlParser.RULE_patternVariablesDefination = 125;
FlinkSqlParser.RULE_windowFrame = 126;
FlinkSqlParser.RULE_frameBound = 127;
FlinkSqlParser.RULE_withinClause = 128;
FlinkSqlParser.RULE_expression = 129;
FlinkSqlParser.RULE_booleanExpression = 130;
FlinkSqlParser.RULE_predicate = 131;
FlinkSqlParser.RULE_likePredicate = 132;
FlinkSqlParser.RULE_valueExpression = 133;
FlinkSqlParser.RULE_primaryExpression = 134;
FlinkSqlParser.RULE_functionNameCreate = 135;
FlinkSqlParser.RULE_functionName = 136;
FlinkSqlParser.RULE_functionParam = 137;
FlinkSqlParser.RULE_dereferenceDefinition = 138;
FlinkSqlParser.RULE_correlationName = 139;
FlinkSqlParser.RULE_qualifiedName = 140;
FlinkSqlParser.RULE_timeIntervalExpression = 141;
FlinkSqlParser.RULE_errorCapturingMultiUnitsInterval = 142;
FlinkSqlParser.RULE_multiUnitsInterval = 143;
FlinkSqlParser.RULE_errorCapturingUnitToUnitInterval = 144;
FlinkSqlParser.RULE_unitToUnitInterval = 145;
FlinkSqlParser.RULE_intervalValue = 146;
FlinkSqlParser.RULE_tableAlias = 147;
FlinkSqlParser.RULE_errorCapturingIdentifier = 148;
FlinkSqlParser.RULE_errorCapturingIdentifierExtra = 149;
FlinkSqlParser.RULE_identifierList = 150;
FlinkSqlParser.RULE_identifierSeq = 151;
FlinkSqlParser.RULE_identifier = 152;
FlinkSqlParser.RULE_unquotedIdentifier = 153;
FlinkSqlParser.RULE_quotedIdentifier = 154;
FlinkSqlParser.RULE_whenClause = 155;
FlinkSqlParser.RULE_catalogPath = 156;
FlinkSqlParser.RULE_catalogPathCreate = 157;
FlinkSqlParser.RULE_databasePath = 158;
FlinkSqlParser.RULE_databasePathCreate = 159;
FlinkSqlParser.RULE_tablePathCreate = 160;
FlinkSqlParser.RULE_tablePath = 161;
FlinkSqlParser.RULE_viewPath = 162;
FlinkSqlParser.RULE_viewPathCreate = 163;
FlinkSqlParser.RULE_uid = 164;
FlinkSqlParser.RULE_withOption = 165;
FlinkSqlParser.RULE_ifNotExists = 166;
FlinkSqlParser.RULE_ifExists = 167;
FlinkSqlParser.RULE_tablePropertyList = 168;
FlinkSqlParser.RULE_tableProperty = 169;
FlinkSqlParser.RULE_tablePropertyKey = 170;
FlinkSqlParser.RULE_tablePropertyValue = 171;
FlinkSqlParser.RULE_logicalOperator = 172;
FlinkSqlParser.RULE_comparisonOperator = 173;
FlinkSqlParser.RULE_bitOperator = 174;
FlinkSqlParser.RULE_mathOperator = 175;
FlinkSqlParser.RULE_unaryOperator = 176;
FlinkSqlParser.RULE_constant = 177;
FlinkSqlParser.RULE_timePointLiteral = 178;
FlinkSqlParser.RULE_stringLiteral = 179;
FlinkSqlParser.RULE_decimalLiteral = 180;
FlinkSqlParser.RULE_booleanLiteral = 181;
FlinkSqlParser.RULE_setQuantifier = 182;
FlinkSqlParser.RULE_timePointUnit = 183;
FlinkSqlParser.RULE_timeIntervalUnit = 184;
FlinkSqlParser.RULE_reservedKeywordsUsedAsFuncParam = 185;
FlinkSqlParser.RULE_reservedKeywordsUsedAsFuncName = 186;
FlinkSqlParser.RULE_nonReservedKeywords = 187;
// tslint:disable:no-trailing-whitespace
FlinkSqlParser.ruleNames = [
    "program", "singleStatement", "sqlStatement", "emptyStatement", "ddlStatement",
    "dmlStatement", "describeStatement", "explainStatement", "explainDetails",
    "explainDetail", "useStatement", "useModuleStatement", "showStatememt",
    "loadStatement", "unloadStatememt", "setStatememt", "resetStatememt",
    "jarStatememt", "dtAddStatement", "dtFilePath", "createTable", "simpleCreateTable",
    "createTableAsSelect", "columnOptionDefinition", "physicalColumnDefinition",
    "columnNameCreate", "columnName", "columnNameList", "columnType", "lengthOneDimension",
    "lengthTwoOptionalDimension", "lengthTwoStringDimension", "lengthOneTypeDimension",
    "mapTypeDimension", "rowTypeDimension", "columnConstraint", "commentSpec",
    "metadataColumnDefinition", "metadataKey", "computedColumnDefinition",
    "computedColumnExpression", "watermarkDefinition", "tableConstraint",
    "constraintName", "selfDefinitionClause", "partitionDefinition", "transformList",
    "transform", "transformArgument", "likeDefinition", "likeOption", "createCatalog",
    "createDatabase", "createView", "createFunction", "usingClause", "jarFileName",
    "alterTable", "renameDefinition", "setKeyValueDefinition", "addConstraint",
    "dropConstraint", "addUnique", "notForced", "alertView", "alterDatabase",
    "alterFunction", "dropCatalog", "dropTable", "dropDatabase", "dropView",
    "dropFunction", "insertStatement", "insertSimpleStatement", "insertPartitionDefinition",
    "valuesDefinition", "valuesRowDefinition", "insertMulStatementCompatibility",
    "insertMulStatement", "queryStatement", "valuesCaluse", "withClause",
    "withItem", "withItemName", "selectStatement", "selectClause", "projectItemDefinition",
    "overWindowItem", "fromClause", "tableExpression", "tableReference", "tablePrimary",
    "systemTimePeriod", "dateTimeExpression", "inlineDataValueClause", "windoTVFClause",
    "windowTVFExression", "windoTVFName", "windowTVFParam", "timeIntervalParamName",
    "columnDescriptor", "joinCondition", "whereClause", "groupByClause", "groupItemDefinition",
    "groupingSets", "groupingSetsNotaionName", "groupWindowFunction", "groupWindowFunctionName",
    "timeAttrColumn", "havingClause", "windowClause", "namedWindow", "windowSpec",
    "matchRecognizeClause", "orderByCaluse", "orderItemDefition", "limitClause",
    "partitionByClause", "quantifiers", "measuresClause", "patternDefination",
    "patternVariable", "outputMode", "afterMatchStrategy", "patternVariablesDefination",
    "windowFrame", "frameBound", "withinClause", "expression", "booleanExpression",
    "predicate", "likePredicate", "valueExpression", "primaryExpression",
    "functionNameCreate", "functionName", "functionParam", "dereferenceDefinition",
    "correlationName", "qualifiedName", "timeIntervalExpression", "errorCapturingMultiUnitsInterval",
    "multiUnitsInterval", "errorCapturingUnitToUnitInterval", "unitToUnitInterval",
    "intervalValue", "tableAlias", "errorCapturingIdentifier", "errorCapturingIdentifierExtra",
    "identifierList", "identifierSeq", "identifier", "unquotedIdentifier",
    "quotedIdentifier", "whenClause", "catalogPath", "catalogPathCreate",
    "databasePath", "databasePathCreate", "tablePathCreate", "tablePath",
    "viewPath", "viewPathCreate", "uid", "withOption", "ifNotExists", "ifExists",
    "tablePropertyList", "tableProperty", "tablePropertyKey", "tablePropertyValue",
    "logicalOperator", "comparisonOperator", "bitOperator", "mathOperator",
    "unaryOperator", "constant", "timePointLiteral", "stringLiteral", "decimalLiteral",
    "booleanLiteral", "setQuantifier", "timePointUnit", "timeIntervalUnit",
    "reservedKeywordsUsedAsFuncParam", "reservedKeywordsUsedAsFuncName", "nonReservedKeywords",
];
FlinkSqlParser._LITERAL_NAMES = [
    undefined, undefined, undefined, undefined, "'ABS'", "'ALL'", "'ALLOCATE'",
    "'ALLOW'", "'ALTER'", "'ANALYZE'", "'AND'", "'ANY'", "'ARE'", "'ARRAY'",
    "'ARRAY_AGG'", "'ARRAY_CONCAT_AGG'", "'ARRAY_MAX_CARDINALITY'", "'AS'",
    "'ASENSITIVE'", "'ASYMMETRIC'", "'AT'", "'ATOMIC'", "'AUTHORIZATION'",
    "'AVG'", "'BEGIN'", "'BEGIN_FRAME'", "'BEGIN_PARTITION'", "'BETWEEN'",
    "'BIGINT'", "'BINARY'", "'BIT'", "'BLOB'", "'BOOLEAN'", "'BOTH'", "'BY'",
    "'BYTES'", "'CALL'", "'CALLED'", "'CARDINALITY'", "'CASCADED'", "'CASE'",
    "'CAST'", "'CATALOGS'", "'CEIL'", "'CEILING'", "'CHANGELOG_MODE'", "'CHAR'",
    "'CHARACTER'", "'CHARACTER_LENGTH'", "'CHAR_LENGTH'", "'CHECK'", "'CLASSIFIER'",
    "'CLOB'", "'CLOSE'", "'COALESCE'", "'COLLATE'", "'COLLECT'", "'COLUMN'",
    "'COLUMNS'", "'COMMENT'", "'COMMIT'", "'COMPUTE'", "'CONDITION'", "'CONNECT'",
    "'CONSTRAINT'", "'CONTAINS'", "'CONVERT'", "'CORR'", "'CORRESPONDING'",
    "'COUNT'", "'COVAR_POP'", "'COVAR_SAMP'", "'CREATE'", "'CROSS'", "'CUBE'",
    "'CUME_DIST'", "'CURRENT'", "'CURRENT_CATALOG'", "'CURRENT_DATE'", "'CURRENT_DEFAULT_TRANSFORM_GROUP'",
    "'CURRENT_PATH'", "'CURRENT_ROLE'", "'CURRENT_ROW'", "'CURRENT_SCHEMA'",
    "'CURRENT_TIME'", "'CURRENT_TIMESTAMP'", "'CURRENT_TRANSFORM_GROUP_FOR_TYPE'",
    "'CURRENT_USER'", "'CURSOR'", "'CYCLE'", "'DATABASES'", "'DATE'", "'DATETIME'",
    "'DATETIME_DIFF'", "'DATETIME_TRUNC'", "'DATE_DIFF'", "'DATE_TRUNC'",
    "'DAY'", "'DAYOFWEEK'", "'DAYOFYEAR'", "'DEALLOCATE'", "'DEC'", "'DECIMAL'",
    "'DECLARE'", "'DEFAULT'", "'DEFINE'", "'DELETE'", "'DENSE_RANK'", "'DEREF'",
    "'DESCRIBE'", "'DETERMINISTIC'", "'DISALLOW'", "'DISCONNECT'", "'DISTINCT'",
    "'DOT'", "'DOUBLE'", "'DROP'", "'DYNAMIC'", "'EACH'", "'ELEMENT'", "'ELSE'",
    "'EMPTY'", "'END'", "'END_FRAME'", "'END_PARTITION'", "'ENFORCED'", "'EQUALS'",
    "'ESCAPE'", "'ESTIMATED_COST'", "'EVERY'", "'EXCEPT'", "'EXEC'", "'EXECUTE'",
    "'EXISTS'", "'EXP'", "'EXPLAIN'", "'EXTEND'", "'EXTENDED'", "'EXTERNAL'",
    "'EXTRACT'", "'FALSE'", "'FETCH'", "'FILTER'", "'FIRST_VALUE'", "'FLOAT'",
    "'FLOOR'", "'FOR'", "'FOREIGN'", "'FRAME_ROW'", "'FREE'", "'FRIDAY'",
    "'FROM'", "'FULL'", "'FUNCTION'", "'FUNCTIONS'", "'FUSION'", "'GET'",
    "'GLOBAL'", "'GRANT'", "'GROUP'", "'GROUPING'", "'GROUPS'", "'GROUP_CONCAT'",
    "'HAVING'", "'HOLD'", "'HOUR'", "'IDENTITY'", "'IF'", "'ILIKE'", "'IMPORT'",
    "'IN'", "'INCLUDE'", "'INDICATOR'", "'INITIAL'", "'INNER'", "'INOUT'",
    "'INSENSITIVE'", "'INSERT'", "'INT'", "'INTEGER'", "'INTERSECT'", "'INTERSECTION'",
    "'INTERVAL'", "'INTO'", "'IS'", "'JOIN'", "'JSON_ARRAY'", "'JSON_ARRAYAGG'",
    "'JSON_EXECUTION_PLAN'", "'JSON_EXISTS'", "'JSON_OBJECT'", "'JSON_OBJECTAGG'",
    "'JSON_QUERY'", "'JSON_VALUE'", "'LAG'", "'LANGUAGE'", "'LARGE'", "'LAST_VALUE'",
    "'LATERAL'", "'LEAD'", "'LEADING'", "'LEFT'", "'LIKE'", "'LIKE_REGEX'",
    "'LIMIT'", "'LN'", "'LOCAL'", "'LOCALTIME'", "'LOCALTIMESTAMP'", "'LOWER'",
    "'MATCH'", "'MATCHES'", "'MATCH_NUMBER'", "'MATCH_RECOGNIZE'", "'MAX'",
    "'MEASURES'", "'MEMBER'", "'MERGE'", "'METADATA'", "'METHOD'", "'MIN'",
    "'MINUS'", "'MINUTE'", "'MOD'", "'MODIFIES'", "'MODIFY'", "'MODULE'",
    "'MODULES'", "'MONDAY'", "'MONTH'", "'MORE'", "'MULTISET'", "'NATIONAL'",
    "'NATURAL'", "'NCHAR'", "'NCLOB'", "'NEW'", "'NEXT'", "'NO'", "'NONE'",
    "'NORMALIZE'", "'NOT'", "'NTH_VALUE'", "'NTILE'", "'NULL'", "'NULLIF'",
    "'NUMERIC'", "'OCCURRENCES_REGEX'", "'OCTET_LENGTH'", "'OF'", "'OFFSET'",
    "'OLD'", "'OMIT'", "'ON'", "'ONE'", "'ONLY'", "'OPEN'", "'OR'", "'ORDER'",
    "'ORDINAL'", "'OUT'", "'OUTER'", "'OVER'", "'OVERLAPS'", "'OVERLAY'",
    "'OVERWRITE'", "'OVERWRITING'", "'PARAMETER'", "'PARTITION'", "'PARTITIONED'",
    "'PARTITIONS'", "'PATTERN'", "'PER'", "'PERCENT'", "'PERCENTILE_CONT'",
    "'PERCENTILE_DISC'", "'PERCENT_RANK'", "'PERIOD'", "'PERMUTE'", "'PIVOT'",
    "'PORTION'", "'POSITION'", "'POSITION_REGEX'", "'POWER'", "'PRECEDES'",
    "'PRECISION'", "'PREPARE'", "'PREV'", "'PRIMARY'", "'PROCEDURE'", "'QUALIFY'",
    "'QUARTERS'", "'RANGE'", "'RANK'", "'RAW'", "'READS'", "'REAL'", "'RECURSIVE'",
    "'REF'", "'REFERENCES'", "'REFERENCING'", "'REGR_AVGX'", "'REGR_AVGY'",
    "'REGR_COUNT'", "'REGR_INTERCEPT'", "'REGR_R2'", "'REGR_SLOPE'", "'REGR_SXX'",
    "'REGR_SXY'", "'REGR_SYY'", "'RELEASE'", "'RENAME'", "'RESET'", "'RESULT'",
    "'RETURN'", "'RETURNS'", "'REVOKE'", "'RIGHT'", "'RLIKE'", "'ROLLBACK'",
    "'ROLLUP'", "'ROW'", "'ROWS'", "'ROW_NUMBER'", "'RUNNING'", "'SAFE_CAST'",
    "'SAFE_OFFSET'", "'SAFE_ORDINAL'", "'SATURDAY'", "'SAVEPOINT'", "'SCALA'",
    "'SCOPE'", "'SCROLL'", "'SEARCH'", "'SECOND'", "'SEEK'", "'SELECT'", "'SENSITIVE'",
    "'SEPARATOR'", "'SESSION_USER'", "'SET'", "'SHOW'", "'SIMILAR'", "'SKIP'",
    "'SMALLINT'", "'SOME'", "'SPECIFIC'", "'SPECIFICTYPE'", "'SQL'", "'SQLEXCEPTION'",
    "'SQLSTATE'", "'SQLWARNING'", "'SQRT'", "'START'", "'STATEMENT'", "'STATIC'",
    "'STATISTICS'", "'STDDEV_POP'", "'STDDEV_SAMP'", "'STREAM'", "'STRING'",
    "'STRING_AGG'", "'SUBMULTISET'", "'SUBSET'", "'SUBSTRING'", "'SUBSTRING_REGEX'",
    "'SUCCEEDS'", "'SUM'", "'SUNDAY'", "'SYMMETRIC'", "'SYSTEM'", "'SYSTEM_TIME'",
    "'SYSTEM_USER'", "'TABLE'", "'TABLES'", "'TABLESAMPLE'", "'THEN'", "'THURSDAY'",
    "'TIME'", "'TIMESTAMP'", "'TIMESTAMP_DIFF'", "'TIMESTAMP_LTZ'", "'TIMESTAMP_TRUNC'",
    "'TIMEZONE_HOUR'", "'TIMEZONE_MINUTE'", "'TIME_DIFF'", "'TIME_TRUNC'",
    "'TINYINT'", "'TO'", "'TRAILING'", "'TRANSLATE'", "'TRANSLATE_REGEX'",
    "'TRANSLATION'", "'TREAT'", "'TRIGGER'", "'TRIM'", "'TRIM_ARRAY'", "'TRUE'",
    "'TRUNCATE'", "'TRY_CAST'", "'TUESDAY'", "'UESCAPE'", "'UNION'", "'UNIQUE'",
    "'UNKNOWN'", "'UNNEST'", "'UNPIVOT'", "'UPDATE'", "'UPPER'", "'UPSERT'",
    "'USE'", "'USER'", "'USING'", "'VALUE'", "'VALUES'", "'VALUE_OF'", "'VARBINARY'",
    "'VARCHAR'", "'VARYING'", "'VAR_POP'", "'VAR_SAMP'", "'VERSIONING'", "'VIEWS'",
    "'VIRTUAL'", "'WATERMARK'", "'WATERMARKS'", "'WEDNESDAY'", "'WEEKS'",
    "'WHEN'", "'WHENEVER'", "'WHERE'", "'WIDTH_BUCKET'", "'WINDOW'", "'WITH'",
    "'WITHIN'", "'WITHOUT'", "'YEAR'", "'ADD'", "'AFTER'", "'ASC'", "'CASCADE'",
    "'CATALOG'", "'CENTURY'", "'CONFIG'", "'CONSTRAINTS'", "'CUMULATE'", "'DATA'",
    "'DATABASE'", "'DAYS'", "'DECADE'", "'DESC'", "'DESCRIPTOR'", "'DIV'",
    "'ENGINE'", "'EPOCH'", "'EXCLUDING'", "'FILE'", "'FIRST'", "'GENERATED'",
    "'HOP'", "'HOURS'", "'IGNORE'", "'INCLUDING'", "'JAR'", "'JARS'", "'JAVA'",
    "'KEY'", "'LAST'", "'LOAD'", "'MAP'", "'MICROSECOND'", "'MILLENNIUM'",
    "'MILLISECOND'", "'MINUTES'", "'MONTHS'", "'NANOSECOND'", "'NULLS'", "'OPTIONS'",
    "'PAST'", "'PLAN'", "'PRECEDING'", "'PYTHON'", "'PYTHON_ARCHIVES'", "'PYTHON_DEPENDENCIES'",
    "'PYTHON_FILES'", "'PYTHON_JAR'", "'PYTHON_PARAMETER'", "'PYTHON_REQUIREMENTS'",
    "'QUARTER'", "'REMOVE'", "'RESTRICT'", "'SECONDS'", "'SESSION'", "'SETS'",
    "'SIZE'", "'SLIDE'", "'STEP'", "'TEMPORARY'", "'TIMECOL'", "'TUMBLE'",
    "'UNLOAD'", "'VIEW'", "'WEEK'", "'YEARS'", "'ZONE'", "'='", "'>'", "'<'",
    "'!'", "'~'", "'|'", "'&'", "'^'", "'.'", "'['", "']'", "'('", "')'",
    "'{'", "'}'", "','", "';'", "'@'", "'''", "'\"'", "'`'", "':'", "'*'",
    "'_'", "'-'", "'+'", "'%'", "'||'", "'--'", "'/'", "'?'", "'=>'",
];
FlinkSqlParser._SYMBOLIC_NAMES = [
    undefined, "SPACE", "COMMENT_INPUT", "LINE_COMMENT", "KW_ABS", "KW_ALL",
    "KW_ALLOCATE", "KW_ALLOW", "KW_ALTER", "KW_ANALYZE", "KW_AND", "KW_ANY",
    "KW_ARE", "KW_ARRAY", "KW_ARRAY_AGG", "KW_ARRAY_CONCAT_AGG", "KW_ARRAY_MAX_CARDINALITY",
    "KW_AS", "KW_ASENSITIVE", "KW_ASYMMETRIC", "KW_AT", "KW_ATOMIC", "KW_AUTHORIZATION",
    "KW_AVG", "KW_BEGIN", "KW_BEGIN_FRAME", "KW_BEGIN_PARTITION", "KW_BETWEEN",
    "KW_BIGINT", "KW_BINARY", "KW_BIT", "KW_BLOB", "KW_BOOLEAN", "KW_BOTH",
    "KW_BY", "KW_BYTES", "KW_CALL", "KW_CALLED", "KW_CARDINALITY", "KW_CASCADED",
    "KW_CASE", "KW_CAST", "KW_CATALOGS", "KW_CEIL", "KW_CEILING", "KW_CHANGELOG_MODE",
    "KW_CHAR", "KW_CHARACTER", "KW_CHARACTER_LENGTH", "KW_CHAR_LENGTH", "KW_CHECK",
    "KW_CLASSIFIER", "KW_CLOB", "KW_CLOSE", "KW_COALESCE", "KW_COLLATE", "KW_COLLECT",
    "KW_COLUMN", "KW_COLUMNS", "KW_COMMENT", "KW_COMMIT", "KW_COMPUTE", "KW_CONDITION",
    "KW_CONNECT", "KW_CONSTRAINT", "KW_CONTAINS", "KW_CONVERT", "KW_CORR",
    "KW_CORRESPONDING", "KW_COUNT", "KW_COVAR_POP", "KW_COVAR_SAMP", "KW_CREATE",
    "KW_CROSS", "KW_CUBE", "KW_CUME_DIST", "KW_CURRENT", "KW_CURRENT_CATALOG",
    "KW_CURRENT_DATE", "KW_CURRENT_DEFAULT_TRANSFORM_GROUP", "KW_CURRENT_PATH",
    "KW_CURRENT_ROLE", "KW_CURRENT_ROW", "KW_CURRENT_SCHEMA", "KW_CURRENT_TIME",
    "KW_CURRENT_TIMESTAMP", "KW_CURRENT_TRANSFORM_GROUP_FOR_TYPE", "KW_CURRENT_USER",
    "KW_CURSOR", "KW_CYCLE", "KW_DATABASES", "KW_DATE", "KW_DATETIME", "KW_DATETIME_DIFF",
    "KW_DATETIME_TRUNC", "KW_DATE_DIFF", "KW_DATE_TRUNC", "KW_DAY", "KW_DAYOFWEEK",
    "KW_DAYOFYEAR", "KW_DEALLOCATE", "KW_DEC", "KW_DECIMAL", "KW_DECLARE",
    "KW_DEFAULT", "KW_DEFINE", "KW_DELETE", "KW_DENSE_RANK", "KW_DEREF", "KW_DESCRIBE",
    "KW_DETERMINISTIC", "KW_DISALLOW", "KW_DISCONNECT", "KW_DISTINCT", "KW_DOT",
    "KW_DOUBLE", "KW_DROP", "KW_DYNAMIC", "KW_EACH", "KW_ELEMENT", "KW_ELSE",
    "KW_EMPTY", "KW_END", "KW_END_FRAME", "KW_END_PARTITION", "KW_ENFORCED",
    "KW_EQUALS", "KW_ESCAPE", "KW_ESTIMATED_COST", "KW_EVERY", "KW_EXCEPT",
    "KW_EXEC", "KW_EXECUTE", "KW_EXISTS", "KW_EXP", "KW_EXPLAIN", "KW_EXTEND",
    "KW_EXTENDED", "KW_EXTERNAL", "KW_EXTRACT", "KW_FALSE", "KW_FETCH", "KW_FILTER",
    "KW_FIRST_VALUE", "KW_FLOAT", "KW_FLOOR", "KW_FOR", "KW_FOREIGN", "KW_FRAME_ROW",
    "KW_FREE", "KW_FRIDAY", "KW_FROM", "KW_FULL", "KW_FUNCTION", "KW_FUNCTIONS",
    "KW_FUSION", "KW_GET", "KW_GLOBAL", "KW_GRANT", "KW_GROUP", "KW_GROUPING",
    "KW_GROUPS", "KW_GROUP_CONCAT", "KW_HAVING", "KW_HOLD", "KW_HOUR", "KW_IDENTITY",
    "KW_IF", "KW_ILIKE", "KW_IMPORT", "KW_IN", "KW_INCLUDE", "KW_INDICATOR",
    "KW_INITIAL", "KW_INNER", "KW_INOUT", "KW_INSENSITIVE", "KW_INSERT", "KW_INT",
    "KW_INTEGER", "KW_INTERSECT", "KW_INTERSECTION", "KW_INTERVAL", "KW_INTO",
    "KW_IS", "KW_JOIN", "KW_JSON_ARRAY", "KW_JSON_ARRAYAGG", "KW_JSON_EXECUTION_PLAN",
    "KW_JSON_EXISTS", "KW_JSON_OBJECT", "KW_JSON_OBJECTAGG", "KW_JSON_QUERY",
    "KW_JSON_VALUE", "KW_LAG", "KW_LANGUAGE", "KW_LARGE", "KW_LAST_VALUE",
    "KW_LATERAL", "KW_LEAD", "KW_LEADING", "KW_LEFT", "KW_LIKE", "KW_LIKE_REGEX",
    "KW_LIMIT", "KW_LN", "KW_LOCAL", "KW_LOCALTIME", "KW_LOCALTIMESTAMP",
    "KW_LOWER", "KW_MATCH", "KW_MATCHES", "KW_MATCH_NUMBER", "KW_MATCH_RECOGNIZE",
    "KW_MAX", "KW_MEASURES", "KW_MEMBER", "KW_MERGE", "KW_METADATA", "KW_METHOD",
    "KW_MIN", "KW_MINUS", "KW_MINUTE", "KW_MOD", "KW_MODIFIES", "KW_MODIFY",
    "KW_MODULE", "KW_MODULES", "KW_MONDAY", "KW_MONTH", "KW_MORE", "KW_MULTISET",
    "KW_NATIONAL", "KW_NATURAL", "KW_NCHAR", "KW_NCLOB", "KW_NEW", "KW_NEXT",
    "KW_NO", "KW_NONE", "KW_NORMALIZE", "KW_NOT", "KW_NTH_VALUE", "KW_NTILE",
    "KW_NULL", "KW_NULLIF", "KW_NUMERIC", "KW_OCCURRENCES_REGEX", "KW_OCTET_LENGTH",
    "KW_OF", "KW_OFFSET", "KW_OLD", "KW_OMIT", "KW_ON", "KW_ONE", "KW_ONLY",
    "KW_OPEN", "KW_OR", "KW_ORDER", "KW_ORDINAL", "KW_OUT", "KW_OUTER", "KW_OVER",
    "KW_OVERLAPS", "KW_OVERLAY", "KW_OVERWRITE", "KW_OVERWRITING", "KW_PARAMETER",
    "KW_PARTITION", "KW_PARTITIONED", "KW_PARTITIONS", "KW_PATTERN", "KW_PER",
    "KW_PERCENT", "KW_PERCENTILE_CONT", "KW_PERCENTILE_DISC", "KW_PERCENT_RANK",
    "KW_PERIOD", "KW_PERMUTE", "KW_PIVOT", "KW_PORTION", "KW_POSITION", "KW_POSITION_REGEX",
    "KW_POWER", "KW_PRECEDES", "KW_PRECISION", "KW_PREPARE", "KW_PREV", "KW_PRIMARY",
    "KW_PROCEDURE", "KW_QUALIFY", "KW_QUARTERS", "KW_RANGE", "KW_RANK", "KW_RAW",
    "KW_READS", "KW_REAL", "KW_RECURSIVE", "KW_REF", "KW_REFERENCES", "KW_REFERENCING",
    "KW_REGR_AVGX", "KW_REGR_AVGY", "KW_REGR_COUNT", "KW_REGR_INTERCEPT",
    "KW_REGR_R2", "KW_REGR_SLOPE", "KW_REGR_SXX", "KW_REGR_SXY", "KW_REGR_SYY",
    "KW_RELEASE", "KW_RENAME", "KW_RESET", "KW_RESULT", "KW_RETURN", "KW_RETURNS",
    "KW_REVOKE", "KW_RIGHT", "KW_RLIKE", "KW_ROLLBACK", "KW_ROLLUP", "KW_ROW",
    "KW_ROWS", "KW_ROW_NUMBER", "KW_RUNNING", "KW_SAFE_CAST", "KW_SAFE_OFFSET",
    "KW_SAFE_ORDINAL", "KW_SATURDAY", "KW_SAVEPOINT", "KW_SCALA", "KW_SCOPE",
    "KW_SCROLL", "KW_SEARCH", "KW_SECOND", "KW_SEEK", "KW_SELECT", "KW_SENSITIVE",
    "KW_SEPARATOR", "KW_SESSION_USER", "KW_SET", "KW_SHOW", "KW_SIMILAR",
    "KW_SKIP", "KW_SMALLINT", "KW_SOME", "KW_SPECIFIC", "KW_SPECIFICTYPE",
    "KW_SQL", "KW_SQLEXCEPTION", "KW_SQLSTATE", "KW_SQLWARNING", "KW_SQRT",
    "KW_START", "KW_STATEMENT", "KW_STATIC", "KW_STATISTICS", "KW_STDDEV_POP",
    "KW_STDDEV_SAMP", "KW_STREAM", "KW_STRING", "KW_STRING_AGG", "KW_SUBMULTISET",
    "KW_SUBSET", "KW_SUBSTRING", "KW_SUBSTRING_REGEX", "KW_SUCCEEDS", "KW_SUM",
    "KW_SUNDAY", "KW_SYMMETRIC", "KW_SYSTEM", "KW_SYSTEM_TIME", "KW_SYSTEM_USER",
    "KW_TABLE", "KW_TABLES", "KW_TABLESAMPLE", "KW_THEN", "KW_THURSDAY", "KW_TIME",
    "KW_TIMESTAMP", "KW_TIMESTAMP_DIFF", "KW_TIMESTAMP_LTZ", "KW_TIMESTAMP_TRUNC",
    "KW_TIMEZONE_HOUR", "KW_TIMEZONE_MINUTE", "KW_TIME_DIFF", "KW_TIME_TRUNC",
    "KW_TINYINT", "KW_TO", "KW_TRAILING", "KW_TRANSLATE", "KW_TRANSLATE_REGEX",
    "KW_TRANSLATION", "KW_TREAT", "KW_TRIGGER", "KW_TRIM", "KW_TRIM_ARRAY",
    "KW_TRUE", "KW_TRUNCATE", "KW_TRY_CAST", "KW_TUESDAY", "KW_UESCAPE", "KW_UNION",
    "KW_UNIQUE", "KW_UNKNOWN", "KW_UNNEST", "KW_UNPIVOT", "KW_UPDATE", "KW_UPPER",
    "KW_UPSERT", "KW_USE", "KW_USER", "KW_USING", "KW_VALUE", "KW_VALUES",
    "KW_VALUE_OF", "KW_VARBINARY", "KW_VARCHAR", "KW_VARYING", "KW_VAR_POP",
    "KW_VAR_SAMP", "KW_VERSIONING", "KW_VIEWS", "KW_VIRTUAL", "KW_WATERMARK",
    "KW_WATERMARKS", "KW_WEDNESDAY", "KW_WEEKS", "KW_WHEN", "KW_WHENEVER",
    "KW_WHERE", "KW_WIDTH_BUCKET", "KW_WINDOW", "KW_WITH", "KW_WITHIN", "KW_WITHOUT",
    "KW_YEAR", "KW_ADD", "KW_AFTER", "KW_ASC", "KW_CASCADE", "KW_CATALOG",
    "KW_CENTURY", "KW_CONFIG", "KW_CONSTRAINTS", "KW_CUMULATE", "KW_DATA",
    "KW_DATABASE", "KW_DAYS", "KW_DECADE", "KW_DESC", "KW_DESCRIPTOR", "KW_DIV",
    "KW_ENGINE", "KW_EPOCH", "KW_EXCLUDING", "KW_FILE", "KW_FIRST", "KW_GENERATED",
    "KW_HOP", "KW_HOURS", "KW_IGNORE", "KW_INCLUDING", "KW_JAR", "KW_JARS",
    "KW_JAVA", "KW_KEY", "KW_LAST", "KW_LOAD", "KW_MAP", "KW_MICROSECOND",
    "KW_MILLENNIUM", "KW_MILLISECOND", "KW_MINUTES", "KW_MONTHS", "KW_NANOSECOND",
    "KW_NULLS", "KW_OPTIONS", "KW_PAST", "KW_PLAN", "KW_PRECEDING", "KW_PYTHON",
    "KW_PYTHON_ARCHIVES", "KW_PYTHON_DEPENDENCIES", "KW_PYTHON_FILES", "KW_PYTHON_JAR",
    "KW_PYTHON_PARAMETER", "KW_PYTHON_REQUIREMENTS", "KW_QUARTER", "KW_REMOVE",
    "KW_RESTRICT", "KW_SECONDS", "KW_SESSION", "KW_SETS", "KW_SIZE", "KW_SLIDE",
    "KW_STEP", "KW_TEMPORARY", "KW_TIMECOL", "KW_TUMBLE", "KW_UNLOAD", "KW_VIEW",
    "KW_WEEK", "KW_YEARS", "KW_ZONE", "EQUAL_SYMBOL", "GREATER_SYMBOL", "LESS_SYMBOL",
    "EXCLAMATION_SYMBOL", "BIT_NOT_OP", "BIT_OR_OP", "BIT_AND_OP", "BIT_XOR_OP",
    "DOT", "LS_BRACKET", "RS_BRACKET", "LR_BRACKET", "RR_BRACKET", "LB_BRACKET",
    "RB_BRACKET", "COMMA", "SEMICOLON", "AT_SIGN", "SINGLE_QUOTE_SYMB", "DOUBLE_QUOTE_SYMB",
    "REVERSE_QUOTE_SYMB", "COLON_SYMB", "ASTERISK_SIGN", "UNDERLINE_SIGN",
    "HYPNEN_SIGN", "ADD_SIGN", "PENCENT_SIGN", "DOUBLE_VERTICAL_SIGN", "DOUBLE_HYPNEN_SIGN",
    "SLASH_SIGN", "QUESTION_MARK_SIGN", "DOUBLE_RIGHT_ARROW", "STRING_LITERAL",
    "DIG_LITERAL", "REAL_LITERAL", "BIT_STRING", "ID_LITERAL",
];
FlinkSqlParser.VOCABULARY = new VocabularyImpl.VocabularyImpl(FlinkSqlParser._LITERAL_NAMES, FlinkSqlParser._SYMBOLIC_NAMES, []);
FlinkSqlParser._serializedATNSegments = 5;
FlinkSqlParser._serializedATNSegment0 = "\x03\uC91D\uCABA\u058D\uAFBA\u4F53\u0607\uEA8B\uC241\x03\u021F\u08DB\x04" +
    "\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06\x04" +
    "\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f\t\f\x04\r\t\r" +
    "\x04\x0E\t\x0E\x04\x0F\t\x0F\x04\x10\t\x10\x04\x11\t\x11\x04\x12\t\x12" +
    "\x04\x13\t\x13\x04\x14\t\x14\x04\x15\t\x15\x04\x16\t\x16\x04\x17\t\x17" +
    "\x04\x18\t\x18\x04\x19\t\x19\x04\x1A\t\x1A\x04\x1B\t\x1B\x04\x1C\t\x1C" +
    "\x04\x1D\t\x1D\x04\x1E\t\x1E\x04\x1F\t\x1F\x04 \t \x04!\t!\x04\"\t\"\x04" +
    "#\t#\x04$\t$\x04%\t%\x04&\t&\x04\'\t\'\x04(\t(\x04)\t)\x04*\t*\x04+\t" +
    "+\x04,\t,\x04-\t-\x04.\t.\x04/\t/\x040\t0\x041\t1\x042\t2\x043\t3\x04" +
    "4\t4\x045\t5\x046\t6\x047\t7\x048\t8\x049\t9\x04:\t:\x04;\t;\x04<\t<\x04" +
    "=\t=\x04>\t>\x04?\t?\x04@\t@\x04A\tA\x04B\tB\x04C\tC\x04D\tD\x04E\tE\x04" +
    "F\tF\x04G\tG\x04H\tH\x04I\tI\x04J\tJ\x04K\tK\x04L\tL\x04M\tM\x04N\tN\x04" +
    "O\tO\x04P\tP\x04Q\tQ\x04R\tR\x04S\tS\x04T\tT\x04U\tU\x04V\tV\x04W\tW\x04" +
    "X\tX\x04Y\tY\x04Z\tZ\x04[\t[\x04\\\t\\\x04]\t]\x04^\t^\x04_\t_\x04`\t" +
    "`\x04a\ta\x04b\tb\x04c\tc\x04d\td\x04e\te\x04f\tf\x04g\tg\x04h\th\x04" +
    "i\ti\x04j\tj\x04k\tk\x04l\tl\x04m\tm\x04n\tn\x04o\to\x04p\tp\x04q\tq\x04" +
    "r\tr\x04s\ts\x04t\tt\x04u\tu\x04v\tv\x04w\tw\x04x\tx\x04y\ty\x04z\tz\x04" +
    "{\t{\x04|\t|\x04}\t}\x04~\t~\x04\x7F\t\x7F\x04\x80\t\x80\x04\x81\t\x81" +
    "\x04\x82\t\x82\x04\x83\t\x83\x04\x84\t\x84\x04\x85\t\x85\x04\x86\t\x86" +
    "\x04\x87\t\x87\x04\x88\t\x88\x04\x89\t\x89\x04\x8A\t\x8A\x04\x8B\t\x8B" +
    "\x04\x8C\t\x8C\x04\x8D\t\x8D\x04\x8E\t\x8E\x04\x8F\t\x8F\x04\x90\t\x90" +
    "\x04\x91\t\x91\x04\x92\t\x92\x04\x93\t\x93\x04\x94\t\x94\x04\x95\t\x95" +
    "\x04\x96\t\x96\x04\x97\t\x97\x04\x98\t\x98\x04\x99\t\x99\x04\x9A\t\x9A" +
    "\x04\x9B\t\x9B\x04\x9C\t\x9C\x04\x9D\t\x9D\x04\x9E\t\x9E\x04\x9F\t\x9F" +
    "\x04\xA0\t\xA0\x04\xA1\t\xA1\x04\xA2\t\xA2\x04\xA3\t\xA3\x04\xA4\t\xA4" +
    "\x04\xA5\t\xA5\x04\xA6\t\xA6\x04\xA7\t\xA7\x04\xA8\t\xA8\x04\xA9\t\xA9" +
    "\x04\xAA\t\xAA\x04\xAB\t\xAB\x04\xAC\t\xAC\x04\xAD\t\xAD\x04\xAE\t\xAE" +
    "\x04\xAF\t\xAF\x04\xB0\t\xB0\x04\xB1\t\xB1\x04\xB2\t\xB2\x04\xB3\t\xB3" +
    "\x04\xB4\t\xB4\x04\xB5\t\xB5\x04\xB6\t\xB6\x04\xB7\t\xB7\x04\xB8\t\xB8" +
    "\x04\xB9\t\xB9\x04\xBA\t\xBA\x04\xBB\t\xBB\x04\xBC\t\xBC\x04\xBD\t\xBD" +
    "\x03\x02\x07\x02\u017C\n\x02\f\x02\x0E\x02\u017F\v\x02\x03\x02\x03\x02" +
    "\x03\x03\x03\x03\x05\x03\u0185\n\x03\x03\x03\x05\x03\u0188\n\x03\x03\x04" +
    "\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04" +
    "\x03\x04\x03\x04\x05\x04\u0196\n\x04\x03\x05\x03\x05\x03\x06\x03\x06\x03" +
    "\x06\x03\x06\x03\x06\x03\x06\x03\x06\x03\x06\x03\x06\x03\x06\x03\x06\x03" +
    "\x06\x03\x06\x03\x06\x05\x06\u01A8\n\x06\x03\x07\x03\x07\x05\x07\u01AC" +
    "\n\x07\x03\b\x03\b\x03\b\x03\t\x03\t\x03\t\x03\t\x05\t\u01B5\n\t\x03\t" +
    "\x03\t\x03\t\x05\t\u01BA\n\t\x03\n\x03\n\x03\n\x07\n\u01BF\n\n\f\n\x0E" +
    "\n\u01C2\v\n\x03\v\x03\v\x03\f\x03\f\x03\f\x03\f\x03\f\x03\f\x05\f\u01CC" +
    "\n\f\x03\r\x03\r\x03\r\x03\r\x03\r\x07\r\u01D3\n\r\f\r\x0E\r\u01D6\v\r" +
    "\x03\x0E\x03\x0E\x03\x0E\x03\x0E\x03\x0E\x03\x0E\x03\x0E\x03\x0E\x03\x0E" +
    "\x05\x0E\u01E1\n\x0E\x03\x0E\x05\x0E\u01E4\n\x0E\x03\x0E\x03\x0E\x03\x0E" +
    "\x03\x0E\x03\x0E\x05\x0E\u01EB\n\x0E\x03\x0E\x05\x0E\u01EE\n\x0E\x03\x0E" +
    "\x03\x0E\x03\x0E\x03\x0E\x03\x0E\x03\x0E\x05\x0E\u01F6\n\x0E\x03\x0E\x03" +
    "\x0E\x05\x0E\u01FA\n\x0E\x03\x0E\x03\x0E\x03\x0E\x05\x0E\u01FF\n\x0E\x03" +
    "\x0E\x05\x0E\u0202\n\x0E\x03\x0F\x03\x0F\x03\x0F\x03\x0F\x03\x0F\x05\x0F" +
    "\u0209\n\x0F\x03\x10\x03\x10\x03\x10\x03\x10\x03\x11\x03\x11\x05\x11\u0211" +
    "\n\x11\x03\x12\x03\x12\x05\x12\u0215\n\x12\x03\x13\x03\x13\x03\x13\x03" +
    "\x13\x03\x14\x03\x14\x03\x14\x03\x14\x03\x14\x03\x14\x05\x14\u0221\n\x14" +
    "\x03\x14\x03\x14\x03\x14\x03\x14\x03\x14\x03\x14\x05\x14\u0229\n\x14\x03" +
    "\x14\x03\x14\x05\x14\u022D\n\x14\x03\x14\x03\x14\x03\x14\x03\x14\x03\x14" +
    "\x03\x14\x03\x14\x03\x14\x03\x14\x03\x14\x03\x14\x03\x14\x03\x14\x03\x14" +
    "\x03\x14\x03\x14\x03\x14\x03\x14\x03\x14\x03\x14\x03\x14\x03\x14\x03\x14" +
    "\x03\x14\x03\x14\x03\x14\x03\x14\x03\x14\x03\x14\x03\x14\x05\x14\u024D" +
    "\n\x14\x03\x15\x05\x15\u0250\n\x15\x03\x15\x06\x15\u0253\n\x15\r\x15\x0E" +
    "\x15\u0254\x03\x16\x03\x16\x05\x16\u0259\n\x16\x03\x17\x03\x17\x05\x17" +
    "\u025D\n\x17\x03\x17\x03\x17\x05\x17\u0261\n\x17\x03\x17\x03\x17\x03\x17" +
    "\x03\x17\x03\x17\x07\x17\u0268\n\x17\f\x17\x0E\x17\u026B\v\x17\x03\x17" +
    "\x03\x17\x05\x17\u026F\n\x17\x03\x17\x03\x17\x05\x17\u0273\n\x17\x03\x17" +
    "\x03\x17\x05\x17\u0277\n\x17\x03\x17\x03\x17\x05\x17\u027B\n\x17\x03\x17" +
    "\x05\x17\u027E\n\x17\x03\x17\x03\x17\x05\x17\u0282\n\x17\x03\x18\x03\x18" +
    "\x03\x18\x05\x18\u0287\n\x18\x03\x18\x03\x18\x03\x18\x03\x18\x05\x18\u028D" +
    "\n\x18\x03\x19\x03\x19\x03\x19\x05\x19\u0292\n\x19\x03\x1A\x03\x1A\x03" +
    "\x1A\x05\x1A\u0297\n\x1A\x03\x1A\x05\x1A\u029A\n\x1A\x03\x1B\x03\x1B\x05" +
    "\x1B\u029E\n\x1B\x03\x1C\x03\x1C\x05\x1C\u02A2\n\x1C\x03\x1D\x03\x1D\x03" +
    "\x1D\x03\x1D\x07\x1D\u02A8\n\x1D\f\x1D\x0E\x1D\u02AB\v\x1D\x03\x1D\x03" +
    "\x1D\x03\x1E\x03\x1E\x03\x1E\x05\x1E\u02B2\n\x1E\x03\x1E\x03\x1E\x05\x1E" +
    "\u02B6\n\x1E\x03\x1E\x03\x1E\x05\x1E\u02BA\n\x1E\x03\x1E\x03\x1E\x05\x1E" +
    "\u02BE\n\x1E\x03\x1E\x03\x1E\x05\x1E\u02C2\n\x1E\x03\x1E\x03\x1E\x05\x1E" +
    "\u02C6\n\x1E\x03\x1E\x03\x1E\x05\x1E\u02CA\n\x1E\x03\x1E\x03\x1E\x05\x1E" +
    "\u02CE\n\x1E\x03\x1E\x03\x1E\x05\x1E\u02D2\n\x1E\x05\x1E\u02D4\n\x1E\x03" +
    "\x1F\x03\x1F\x03\x1F\x03\x1F\x03 \x03 \x03 \x03 \x05 \u02DE\n \x03 \x03" +
    " \x03!\x03!\x03!\x03!\x05!\u02E6\n!\x03!\x03!\x03\"\x03\"\x03\"\x03\"" +
    "\x03#\x03#\x03#\x03#\x03#\x03#\x03#\x03$\x03$\x03$\x03$\x03$\x03$\x03" +
    "$\x07$\u02FC\n$\f$\x0E$\u02FF\v$\x03$\x03$\x03%\x03%\x05%\u0305\n%\x03" +
    "%\x03%\x03%\x03%\x05%\u030B\n%\x03%\x05%\u030E\n%\x03%\x05%\u0311\n%\x03" +
    "&\x03&\x03&\x03\'\x03\'\x03\'\x03\'\x03\'\x05\'\u031B\n\'\x03\'\x05\'" +
    "\u031E\n\'\x03(\x03(\x03)\x03)\x03)\x03)\x05)\u0326\n)\x03*\x03*\x03+" +
    "\x03+\x03+\x03+\x03+\x03+\x03,\x03,\x05,\u0332\n,\x03,\x03,\x03,\x03," +
    "\x03,\x03,\x03-\x03-\x03.\x03.\x03.\x03.\x03/\x03/\x03/\x03/\x030\x03" +
    "0\x030\x030\x070\u0348\n0\f0\x0E0\u034B\v0\x030\x030\x031\x031\x031\x03" +
    "1\x031\x031\x071\u0355\n1\f1\x0E1\u0358\v1\x031\x031\x051\u035C\n1\x03" +
    "2\x032\x052\u0360\n2\x033\x033\x033\x033\x073\u0366\n3\f3\x0E3\u0369\v" +
    "3\x033\x053\u036C\n3\x034\x034\x034\x034\x054\u0372\n4\x035\x035\x035" +
    "\x035\x035\x036\x036\x036\x056\u037C\n6\x036\x036\x056\u0380\n6\x036\x03" +
    "6\x037\x037\x057\u0386\n7\x037\x037\x057\u038A\n7\x037\x037\x057\u038E" +
    "\n7\x037\x057\u0391\n7\x037\x037\x037\x038\x038\x038\x038\x058\u039A\n" +
    "8\x038\x038\x058\u039E\n8\x038\x038\x038\x038\x038\x058\u03A5\n8\x038" +
    "\x058\u03A8\n8\x039\x039\x039\x039\x039\x039\x079\u03B0\n9\f9\x0E9\u03B3" +
    "\v9\x03:\x03:\x03;\x03;\x03;\x05;\u03BA\n;\x03;\x03;\x03;\x03;\x03;\x03" +
    ";\x05;\u03C2\n;\x03<\x03<\x05<\u03C6\n<\x03<\x03<\x03<\x03=\x03=\x03=" +
    "\x03>\x03>\x03>\x03>\x03>\x03>\x03>\x05>\u03D5\n>\x03?\x03?\x03?\x03?" +
    "\x03@\x03@\x03@\x03@\x03A\x03A\x03A\x03B\x03B\x03B\x03B\x03B\x03B\x05" +
    "B\u03E8\nB\x03C\x03C\x03C\x03C\x03C\x03D\x03D\x03D\x03D\x05D\u03F3\nD" +
    "\x03D\x03D\x05D\u03F7\nD\x03D\x03D\x03D\x03D\x03D\x05D\u03FE\nD\x03E\x03" +
    "E\x03E\x05E\u0403\nE\x03E\x03E\x03F\x03F\x05F\u0409\nF\x03F\x03F\x05F" +
    "\u040D\nF\x03F\x03F\x03G\x03G\x03G\x05G\u0414\nG\x03G\x03G\x05G\u0418" +
    "\nG\x03H\x03H\x05H\u041C\nH\x03H\x03H\x05H\u0420\nH\x03H\x03H\x03I\x03" +
    "I\x03I\x03I\x05I\u0428\nI\x03I\x03I\x05I\u042C\nI\x03I\x03I\x03J\x05J" +
    "\u0431\nJ\x03J\x03J\x03J\x03J\x05J\u0437\nJ\x03K\x03K\x03K\x03K\x05K\u043D" +
    "\nK\x03K\x05K\u0440\nK\x03K\x03K\x05K\u0444\nK\x03L\x03L\x03L\x03M\x03" +
    "M\x03M\x03M\x07M\u044D\nM\fM\x0EM\u0450\vM\x03N\x03N\x03N\x03N\x07N\u0456" +
    "\nN\fN\x0EN\u0459\vN\x03N\x03N\x03O\x03O\x03O\x03O\x03O\x03O\x03O\x06" +
    "O\u0464\nO\rO\x0EO\u0465\x03O\x03O\x03P\x03P\x03P\x03P\x03P\x03P\x06P" +
    "\u0470\nP\rP\x0EP\u0471\x03P\x03P\x03Q\x03Q\x03Q\x03Q\x03Q\x03Q\x03Q\x03" +
    "Q\x03Q\x03Q\x03Q\x05Q\u0481\nQ\x03Q\x05Q\u0484\nQ\x03Q\x03Q\x05Q\u0488" +
    "\nQ\x03Q\x05Q\u048B\nQ\x05Q\u048D\nQ\x03Q\x03Q\x03Q\x05Q\u0492\nQ\x03" +
    "Q\x03Q\x05Q\u0496\nQ\x03Q\x05Q\u0499\nQ\x07Q\u049B\nQ\fQ\x0EQ\u049E\v" +
    "Q\x03R\x03R\x03R\x03R\x07R\u04A4\nR\fR\x0ER\u04A7\vR\x03S\x03S\x03S\x03" +
    "S\x07S\u04AD\nS\fS\x0ES\u04B0\vS\x03T\x03T\x03T\x03T\x03T\x07T\u04B7\n" +
    "T\fT\x0ET\u04BA\vT\x03T\x03T\x05T\u04BE\nT\x03T\x03T\x03T\x03T\x03T\x03" +
    "U\x03U\x03V\x03V\x05V\u04C9\nV\x03V\x05V\u04CC\nV\x03V\x05V\u04CF\nV\x03" +
    "V\x05V\u04D2\nV\x03V\x05V\u04D5\nV\x03V\x03V\x03V\x03V\x05V\u04DB\nV\x03" +
    "W\x03W\x05W\u04DF\nW\x03W\x03W\x03W\x03W\x07W\u04E5\nW\fW\x0EW\u04E8\v" +
    "W\x05W\u04EA\nW\x03X\x03X\x03X\x05X\u04EF\nX\x03X\x05X\u04F2\nX\x05X\u04F4" +
    "\nX\x03Y\x03Y\x03Y\x03Y\x03Y\x03Y\x03Y\x03Y\x03Y\x03Y\x03Y\x03Y\x05Y\u0502" +
    "\nY\x03Z\x03Z\x03Z\x03[\x03[\x03[\x03[\x07[\u050B\n[\f[\x0E[\u050E\v[" +
    "\x03[\x03[\x05[\u0512\n[\x03[\x03[\x03[\x03[\x03[\x03[\x05[\u051A\n[\x03" +
    "[\x05[\u051D\n[\x03[\x05[\u0520\n[\x03[\x03[\x03[\x05[\u0525\n[\x07[\u0527" +
    "\n[\f[\x0E[\u052A\v[\x03\\\x03\\\x05\\\u052E\n\\\x03]\x05]\u0531\n]\x03" +
    "]\x03]\x05]\u0535\n]\x03]\x05]\u0538\n]\x03]\x05]\u053B\n]\x03]\x03]\x05" +
    "]\u053F\n]\x03]\x05]\u0542\n]\x03]\x05]\u0545\n]\x03]\x03]\x03]\x03]\x03" +
    "]\x03]\x03]\x03]\x07]\u054F\n]\f]\x0E]\u0552\v]\x03]\x03]\x03]\x03]\x05" +
    "]\u0558\n]\x03]\x03]\x03]\x03]\x03]\x03]\x03]\x03]\x03]\x05]\u0563\n]" +
    "\x03^\x03^\x03^\x03^\x03^\x03^\x03_\x03_\x03`\x03`\x03`\x03`\x03`\x03" +
    "a\x03a\x03a\x03a\x03a\x03b\x03b\x03b\x03b\x03b\x07b\u057C\nb\fb\x0Eb\u057F" +
    "\vb\x03b\x03b\x03c\x03c\x03d\x03d\x03d\x03d\x03d\x03d\x03d\x03d\x03d\x03" +
    "d\x03d\x03d\x03d\x03d\x03d\x05d\u0594\nd\x03e\x03e\x03f\x03f\x03f\x03" +
    "f\x03f\x03g\x03g\x03g\x03g\x05g\u05A1\ng\x03h\x03h\x03h\x03i\x03i\x03" +
    "i\x03i\x03i\x07i\u05AB\ni\fi\x0Ei\u05AE\vi\x03j\x03j\x03j\x03j\x03j\x03" +
    "j\x03j\x03j\x07j\u05B8\nj\fj\x0Ej\u05BB\vj\x03j\x03j\x03j\x03j\x03j\x03" +
    "j\x03j\x07j\u05C4\nj\fj\x0Ej\u05C7\vj\x03j\x03j\x03j\x03j\x03j\x03j\x03" +
    "j\x07j\u05D0\nj\fj\x0Ej\u05D3\vj\x03j\x03j\x05j\u05D7\nj\x03k\x03k\x03" +
    "k\x03l\x03l\x03m\x03m\x03m\x03m\x03m\x03m\x03m\x03n\x03n\x03o\x03o\x03" +
    "p\x03p\x03p\x03q\x03q\x03q\x03q\x07q\u05F0\nq\fq\x0Eq\u05F3\vq\x03r\x03" +
    "r\x03r\x03r\x03s\x05s\u05FA\ns\x03s\x03s\x05s\u05FE\ns\x03s\x05s\u0601" +
    "\ns\x03s\x05s\u0604\ns\x03s\x03s\x03t\x03t\x03t\x05t\u060B\nt\x03t\x05" +
    "t\u060E\nt\x03t\x05t\u0611\nt\x03t\x05t\u0614\nt\x03t\x05t\u0617\nt\x03" +
    "t\x05t\u061A\nt\x03t\x03t\x03t\x05t\u061F\nt\x03t\x05t\u0622\nt\x03u\x03" +
    "u\x03u\x03u\x03u\x07u\u0629\nu\fu\x0Eu\u062C\vu\x03v\x03v\x05v\u0630\n" +
    "v\x03v\x03v\x05v\u0634\nv\x03w\x03w\x03w\x05w\u0639\nw\x03x\x03x\x03x" +
    "\x03x\x03x\x07x\u0640\nx\fx\x0Ex\u0643\vx\x03y\x03y\x03y\x03y\x03y\x03" +
    "y\x03y\x03y\x03y\x03y\x03y\x03y\x03y\x03y\x03y\x03y\x05y\u0655\ny\x03" +
    "z\x03z\x03z\x03z\x07z\u065B\nz\fz\x0Ez\u065E\vz\x03{\x03{\x03{\x06{\u0663" +
    "\n{\r{\x0E{\u0664\x03{\x03{\x05{\u0669\n{\x03|\x03|\x05|\u066D\n|\x03" +
    "}\x03}\x03}\x03}\x03}\x03}\x03}\x03}\x05}\u0677\n}\x03~\x03~\x03~\x03" +
    "~\x03~\x03~\x03~\x03~\x03~\x03~\x03~\x03~\x03~\x03~\x03~\x03~\x03~\x03" +
    "~\x03~\x03~\x03~\x03~\x03~\x03~\x05~\u0691\n~\x03\x7F\x03\x7F\x03\x7F" +
    "\x03\x7F\x07\x7F\u0697\n\x7F\f\x7F\x0E\x7F\u069A\v\x7F\x03\x80\x03\x80" +
    "\x03\x80\x03\x80\x03\x80\x03\x80\x03\x80\x03\x80\x03\x80\x05\x80\u06A5" +
    "\n\x80\x03\x81\x03\x81\x03\x81\x03\x81\x03\x81\x03\x82\x03\x82\x03\x82" +
    "\x03\x83\x03\x83\x03\x84\x03\x84\x03\x84\x03\x84\x03\x84\x03\x84\x03\x84" +
    "\x03\x84\x03\x84\x03\x84\x05\x84\u06BB\n\x84\x05\x84\u06BD\n\x84\x03\x84" +
    "\x03\x84\x03\x84\x03\x84\x03\x84\x03\x84\x03\x84\x03\x84\x03\x84\x05\x84" +
    "\u06C8\n\x84\x03\x84\x07\x84\u06CB\n\x84\f\x84\x0E\x84\u06CE\v\x84\x03" +
    "\x85\x05\x85\u06D1\n\x85\x03\x85\x03\x85\x05\x85\u06D5\n\x85\x03\x85\x03" +
    "\x85\x03\x85\x03\x85\x03\x85\x05\x85\u06DC\n\x85\x03\x85\x03\x85\x03\x85" +
    "\x03\x85\x03\x85\x07\x85\u06E3\n\x85\f\x85\x0E\x85\u06E6\v\x85\x03\x85" +
    "\x03\x85\x03\x85\x05\x85\u06EB\n\x85\x03\x85\x03\x85\x03\x85\x03\x85\x03" +
    "\x85\x03\x85\x03\x85\x03\x85\x03\x85\x03\x85\x03\x85\x05\x85\u06F8\n\x85" +
    "\x03\x85\x03\x85\x03\x85\x03\x85\x03\x85\x05\x85\u06FF\n\x85\x03\x85\x03" +
    "\x85\x03\x85\x05\x85\u0704\n\x85\x03\x85\x03\x85\x03\x85\x03\x85\x05\x85" +
    "\u070A\n\x85\x03\x85\x03\x85\x03\x85\x03\x85\x03\x85\x05\x85\u0711\n\x85" +
    "\x05\x85\u0713\n\x85\x03\x86\x05\x86\u0716\n\x86\x03\x86\x03\x86\x03\x86" +
    "\x03\x86\x03\x86\x03\x86\x03\x86\x03\x86\x07\x86\u0720\n\x86\f\x86\x0E" +
    "\x86\u0723\v\x86\x03\x86\x03\x86\x05\x86\u0727\n\x86\x03\x86\x05\x86\u072A" +
    "\n\x86\x03\x86\x03\x86\x03\x86\x03\x86\x05\x86\u0730\n\x86\x05\x86\u0732" +
    "\n\x86\x03\x87\x03\x87\x03\x87\x03\x87\x05\x87\u0738\n\x87\x03\x87\x03" +
    "\x87\x03\x87\x03\x87\x03\x87\x03\x87\x03\x87\x03\x87\x03\x87\x03\x87\x03" +
    "\x87\x03\x87\x03\x87\x03\x87\x03\x87\x03\x87\x03\x87\x03\x87\x03\x87\x07" +
    "\x87\u074D\n\x87\f\x87\x0E\x87\u0750\v\x87\x03\x88\x03\x88\x03\x88\x06" +
    "\x88\u0755\n\x88\r\x88\x0E\x88\u0756\x03\x88\x03\x88\x05\x88\u075B\n\x88" +
    "\x03\x88\x03\x88\x03\x88\x03\x88\x03\x88\x06\x88\u0762\n\x88\r\x88\x0E" +
    "\x88\u0763\x03\x88\x03\x88\x05\x88\u0768\n\x88\x03\x88\x03\x88\x03\x88" +
    "\x03\x88\x03\x88\x03\x88\x03\x88\x03\x88\x03\x88\x03\x88\x03\x88\x03\x88" +
    "\x03\x88\x03\x88\x05\x88\u0778\n\x88\x03\x88\x03\x88\x03\x88\x03\x88\x03" +
    "\x88\x03\x88\x03\x88\x05\x88\u0781\n\x88\x03\x88\x03\x88\x03\x88\x03\x88" +
    "\x03\x88\x03\x88\x03\x88\x03\x88\x03\x88\x03\x88\x03\x88\x03\x88\x03\x88" +
    "\x03\x88\x03\x88\x03\x88\x03\x88\x03\x88\x03\x88\x03\x88\x03\x88\x03\x88" +
    "\x05\x88\u0799\n\x88\x03\x88\x03\x88\x03\x88\x07\x88\u079E\n\x88\f\x88" +
    "\x0E\x88\u07A1\v\x88\x05\x88\u07A3\n\x88\x03\x88\x03\x88\x03\x88\x03\x88" +
    "\x03\x88\x03\x88\x03\x88\x03\x88\x03\x88\x05\x88\u07AE\n\x88\x03\x88\x03" +
    "\x88\x03\x88\x03\x88\x03\x88\x07\x88\u07B5\n\x88\f\x88\x0E\x88\u07B8\v" +
    "\x88\x03\x89\x03\x89\x03\x8A\x03\x8A\x05\x8A\u07BE\n\x8A\x03\x8B\x03\x8B" +
    "\x03\x8B\x03\x8B\x05\x8B\u07C4\n\x8B\x03\x8C\x03\x8C\x03\x8D\x03\x8D\x03" +
    "\x8E\x03\x8E\x05\x8E\u07CC\n\x8E\x03\x8F\x03\x8F\x03\x8F\x05\x8F\u07D1" +
    "\n\x8F\x03\x90\x03\x90\x05\x90\u07D5\n\x90\x03\x91\x03\x91\x03\x91\x06" +
    "\x91\u07DA\n\x91\r\x91\x0E\x91\u07DB\x03\x92\x03\x92\x03\x92\x05\x92\u07E1" +
    "\n\x92\x03\x93\x03\x93\x03\x93\x03\x93\x03\x93\x03\x94\x05\x94\u07E9\n" +
    "\x94\x03\x94\x03\x94\x05\x94\u07ED\n\x94\x03\x95\x05\x95\u07F0\n\x95\x03" +
    "\x95\x03\x95\x05\x95\u07F4\n\x95\x03\x96\x03\x96\x03\x96\x03\x97\x03\x97" +
    "\x06\x97\u07FB\n\x97\r\x97\x0E\x97\u07FC\x03\x97\x05\x97\u0800\n\x97\x03" +
    "\x98\x03\x98\x03\x98\x03\x98\x03\x99\x03\x99\x03\x99\x07\x99\u0809\n\x99" +
    "\f\x99\x0E\x99\u080C\v\x99\x03\x9A\x03\x9A\x03\x9A\x05\x9A\u0811\n\x9A" +
    "\x03\x9B\x03\x9B\x03\x9C\x03\x9C\x03\x9D\x03\x9D\x03\x9D\x03\x9D\x03\x9D" +
    "\x03\x9E\x03\x9E\x03\x9F\x03\x9F\x03\xA0\x03\xA0\x03\xA0\x05\xA0\u0823" +
    "\n\xA0\x03\xA1\x03\xA1\x03\xA1\x05\xA1\u0828\n\xA1\x03\xA2\x03\xA2\x03" +
    "\xA2\x05\xA2\u082D\n\xA2\x03\xA2\x03\xA2\x03\xA2\x03\xA2\x03\xA2\x05\xA2" +
    "\u0834\n\xA2\x05\xA2\u0836\n\xA2\x03\xA3\x03\xA3\x03\xA3\x05\xA3\u083B" +
    "\n\xA3\x03\xA3\x03\xA3\x03\xA3\x03\xA3\x03\xA3\x05\xA3\u0842\n\xA3\x05" +
    "\xA3\u0844\n\xA3\x03\xA4\x03\xA4\x03\xA4\x05\xA4\u0849\n\xA4\x03\xA4\x03" +
    "\xA4\x03\xA4\x03\xA4\x03\xA4\x05\xA4\u0850\n\xA4\x05\xA4\u0852\n\xA4\x03" +
    "\xA5\x03\xA5\x03\xA5\x05\xA5\u0857\n\xA5\x03\xA5\x03\xA5\x03\xA5\x03\xA5" +
    "\x03\xA5\x05\xA5\u085E\n\xA5\x05\xA5\u0860\n\xA5\x03\xA6\x03\xA6\x03\xA6" +
    "\x07\xA6\u0865\n\xA6\f\xA6\x0E\xA6\u0868\v\xA6\x03\xA7\x03\xA7\x03\xA7" +
    "\x03\xA8\x03\xA8\x03\xA8\x03\xA8\x03\xA9\x03\xA9\x03\xA9\x03\xAA\x03\xAA" +
    "\x03\xAA\x03\xAA\x07\xAA\u0878\n\xAA\f\xAA\x0E\xAA\u087B\v\xAA\x03\xAA" +
    "\x03\xAA\x03\xAB\x03\xAB\x05\xAB\u0881\n\xAB\x03\xAB\x05\xAB\u0884\n\xAB" +
    "\x03\xAC\x03\xAC\x03\xAC\x05\xAC\u0889\n\xAC\x03\xAD\x03\xAD\x03\xAD\x03" +
    "\xAD\x05\xAD\u088F\n\xAD\x03\xAE\x03\xAE\x03\xAE\x03\xAE\x03\xAE\x03\xAE" +
    "\x05\xAE\u0897\n\xAE\x03\xAF\x03\xAF\x03\xAF\x03\xAF\x03\xAF\x03\xAF\x03" +
    "\xAF\x03\xAF\x03\xAF\x03\xAF\x03\xAF\x03\xAF\x03\xAF\x03\xAF\x05\xAF\u08A7" +
    "\n\xAF\x03\xB0\x03\xB0\x03\xB0\x03\xB0\x03\xB0\x03\xB0\x03\xB0\x05\xB0" +
    "\u08B0\n\xB0\x03\xB1\x03\xB1\x03\xB2\x03\xB2\x03\xB3\x03\xB3\x03\xB3\x03" +
    "\xB3\x05\xB3\u08BA\n\xB3\x03\xB3\x03\xB3\x03\xB3\x03\xB3\x03\xB3\x05\xB3" +
    "\u08C1\n\xB3\x03\xB3\x05\xB3\u08C4\n\xB3\x03\xB4\x03\xB4\x03\xB4\x03\xB5" +
    "\x03\xB5\x03\xB6\x03\xB6\x03\xB7\x03\xB7\x03\xB8\x03\xB8\x03\xB9\x03\xB9" +
    "\x03\xBA\x03\xBA\x03\xBB\x03\xBB\x03\xBC\x03\xBC\x03\xBD\x03\xBD\x03\xBD" +
    "\x03\u0866\x02\x07\xA0\xB4\u0106\u010C\u010E\xBE\x02\x02\x04\x02\x06\x02" +
    "\b\x02\n\x02\f\x02\x0E\x02\x10\x02\x12\x02\x14\x02\x16\x02\x18\x02\x1A" +
    "\x02\x1C\x02\x1E\x02 \x02\"\x02$\x02&\x02(\x02*\x02,\x02.\x020\x022\x02" +
    "4\x026\x028\x02:\x02<\x02>\x02@\x02B\x02D\x02F\x02H\x02J\x02L\x02N\x02" +
    "P\x02R\x02T\x02V\x02X\x02Z\x02\\\x02^\x02`\x02b\x02d\x02f\x02h\x02j\x02" +
    "l\x02n\x02p\x02r\x02t\x02v\x02x\x02z\x02|\x02~\x02\x80\x02\x82\x02\x84" +
    "\x02\x86\x02\x88\x02";
FlinkSqlParser._serializedATNSegment1 = "\x8A\x02\x8C\x02\x8E\x02\x90\x02\x92\x02\x94\x02\x96\x02\x98\x02\x9A\x02" +
    "\x9C\x02\x9E\x02\xA0\x02\xA2\x02\xA4\x02\xA6\x02\xA8\x02\xAA\x02\xAC\x02" +
    "\xAE\x02\xB0\x02\xB2\x02\xB4\x02\xB6\x02\xB8\x02\xBA\x02\xBC\x02\xBE\x02" +
    "\xC0\x02\xC2\x02\xC4\x02\xC6\x02\xC8\x02\xCA\x02\xCC\x02\xCE\x02\xD0\x02" +
    "\xD2\x02\xD4\x02\xD6\x02\xD8\x02\xDA\x02\xDC\x02\xDE\x02\xE0\x02\xE2\x02" +
    "\xE4\x02\xE6\x02\xE8\x02\xEA\x02\xEC\x02\xEE\x02\xF0\x02\xF2\x02\xF4\x02" +
    "\xF6\x02\xF8\x02\xFA\x02\xFC\x02\xFE\x02\u0100\x02\u0102\x02\u0104\x02" +
    "\u0106\x02\u0108\x02\u010A\x02\u010C\x02\u010E\x02\u0110\x02\u0112\x02" +
    "\u0114\x02\u0116\x02\u0118\x02\u011A\x02\u011C\x02\u011E\x02\u0120\x02" +
    "\u0122\x02\u0124\x02\u0126\x02\u0128\x02\u012A\x02\u012C\x02\u012E\x02" +
    "\u0130\x02\u0132\x02\u0134\x02\u0136\x02\u0138\x02\u013A\x02\u013C\x02" +
    "\u013E\x02\u0140\x02\u0142\x02\u0144\x02\u0146\x02\u0148\x02\u014A\x02" +
    "\u014C\x02\u014E\x02\u0150\x02\u0152\x02\u0154\x02\u0156\x02\u0158\x02" +
    "\u015A\x02\u015C\x02\u015E\x02\u0160\x02\u0162\x02\u0164\x02\u0166\x02" +
    "\u0168\x02\u016A\x02\u016C\x02\u016E\x02\u0170\x02\u0172\x02\u0174\x02" +
    "\u0176\x02\u0178\x02\x02/\x04\x02oo\u01C4\u01C4\x05\x02//\x82\x82\xBE" +
    "\xBE\x06\x02,,\\\\\u01A8\u01A8\u01D2\u01D2\x04\x02\u01BB\u01BB\u01C1\u01C1" +
    "\x04\x02\x99\x99\xAC\xAC\x04\x02\u01B7\u01B7\u01EB\u01EB\x04\x02\u01E4" +
    "\u01E7\u01E9\u01E9\x05\x02\"\"]]\xF6\xF6\r\x02\x1E\x1F%%00^^\xB4\xB5\u015A" +
    "\u015A\u016A\u016A\u017C\u017C\u017F\u017F\u0185\u0185\u01A2\u01A3\x04" +
    "\x02\u01B3\u01B3\u01B5\u01B5\x06\x02ghuu\x92\x92\xF8\xF8\x04\x02\x0F\x0F" +
    "\xE9\xE9\x04\x02\u01C9\u01C9\u01D0\u01D0\x05\x02\x07\x07\u0110\u0110\u01BE" +
    "\u01BE\x05\x02\u010C\u010C\u01C9\u01C9\u01D0\u01D0\x05\x02\u01AB\u01AB" +
    "\u01CC\u01CC\u01DF\u01DF\x05\x02\u014C\u014C\u01D3\u01D3\u01E3\u01E3\x04" +
    "\x02\u01BA\u01BA\u01EC\u01EC\x04\x02\xB9\xB9\u010B\u010B\x05\x02\x84\x84" +
    "\xB6\xB6\u0194\u0194\x06\x02\x9A\x9A\xB0\xB0\xCB\xCB\u013F\u013F\x05\x02" +
    "\u01BF\u01BF\u01CD\u01CD\u01F5\u01F5\x06\x02\xFC\xFC\u01C0\u01C0\u01F0" +
    "\u01F2\u01F4\u01F4\x04\x02LL\u0142\u0142\x05\x02\u01CD\u01CD\u01EE\u01EE" +
    "\u01F5\u01F5\x04\x02\u01B9\u01B9\u01C4\u01C4\x04\x02\u01CB\u01CB\u01D5" +
    "\u01D5\x06\x02\x8E\x8E\xF6\xF6\u018F\u018F\u0196\u0196\x04\x02\x15\x15" +
    "\u0173\u0173\x04\x02\x07\x07\r\r\x04\x02\u01FF\u01FF\u0213\u0214\x06\x02" +
    "\u01C6\u01C6\u0211\u0211\u0215\u0215\u0218\u0218\x04\x02\u0213\u0214\u0216" +
    "\u0216\x03\x02\u0213\u0214\x03\x02\u021C\u021D\x04\x02\u021C\u021C\u021F" +
    "\u021F\x06\x02\u01C6\u01C6\u0211\u0211\u0213\u0215\u0217\u0218\x05\x02" +
    "\xF3\xF3\u01FE\u01FF\u0213\u0214\x04\x02\x8E\x8E\u018F\u018F\x04\x02\x07" +
    "\x07ss\f\x02cc\xA7\xA7\xE0\xE0\xE7\xE7\u0150\u0150\u01B6\u01B6\u01D8\u01D8" +
    "\u01DA\u01DA\u01EA\u01EA\u01F8\u01F8\x11\x02cc\xA7\xA7\xE0\xE0\xE7\xE7" +
    "\u0150\u0150\u01AD\u01AD\u01B6\u01B6\u01BC\u01BC\u01C2\u01C3\u01C8\u01C8" +
    "\u01CE\u01CE\u01D8\u01DD\u01EA\u01EA\u01ED\u01ED\u01F8\u01F9\v\x02\x07" +
    "\x07\x0F\x0F##WWss\xCA\xCA\u0187\u0187\u019F\u019F\u0211\u02119\x02\x06" +
    "\x06\x0F\x0F\x19\x19((++-.88::GGMMPPVW]]demmyy\x88\x88\x8D\x8D\x91\x91" +
    "\x93\x93\xA2\xA2\xA7\xA7\xA9\xA9\xC4\xC4\xC7\xC7\xC9\xC9\xCB\xCB\xCF\xCF" +
    "\xD1\xD3\xD8\xD8\xDE\xDE\xE0\xE1\xE7\xE7\xF5\xF5\xF7\xF7\u010A\u010A\u0116" +
    "\u0116\u011B\u011B\u011D\u011D\u0127\u0127\u013F\u013F\u0143\u0145\u0150" +
    "\u0150\u0167\u0168\u016E\u016E\u0171\u0171\u017C\u017E\u018D\u018D\u0190" +
    "\u0191\u019A\u019A\u01A5\u01A6\u01B6\u01B6\u01D7\u01D7\u01EA\u01EA\u01F8" +
    "\u01F8\x03\x02\u01B7\u01FA\x02\u09A3\x02\u017D\x03\x02\x02\x02\x04\u0187" +
    "\x03\x02\x02\x02\x06\u0195\x03\x02\x02\x02\b\u0197\x03\x02\x02\x02\n\u01A7" +
    "\x03\x02\x02\x02\f\u01AB\x03\x02\x02\x02\x0E\u01AD\x03\x02\x02\x02\x10" +
    "\u01B0\x03\x02\x02\x02\x12\u01BB\x03\x02\x02\x02\x14\u01C3\x03\x02\x02" +
    "\x02\x16\u01CB\x03\x02\x02\x02\x18\u01CD\x03\x02\x02\x02\x1A\u0201\x03" +
    "\x02\x02\x02\x1C\u0203\x03\x02\x02\x02\x1E\u020A\x03\x02\x02\x02 \u020E" +
    "\x03\x02\x02\x02\"\u0212\x03\x02\x02\x02$\u0216\x03\x02\x02\x02&\u024C" +
    "\x03\x02\x02\x02(\u0252\x03\x02\x02\x02*\u0258\x03\x02\x02\x02,\u025A" +
    "\x03\x02\x02\x02.\u0283\x03\x02\x02\x020\u0291\x03\x02\x02\x022\u0293" +
    "\x03\x02\x02\x024\u029D\x03\x02\x02\x026\u02A1\x03\x02\x02\x028\u02A3" +
    "\x03\x02\x02\x02:\u02D3\x03\x02\x02\x02<\u02D5\x03\x02\x02\x02>\u02D9" +
    "\x03\x02\x02\x02@\u02E1\x03\x02\x02\x02B\u02E9\x03\x02\x02\x02D\u02ED" +
    "\x03\x02\x02\x02F\u02F4\x03\x02\x02\x02H\u0310\x03\x02\x02\x02J\u0312" +
    "\x03\x02\x02\x02L\u0315\x03\x02\x02\x02N\u031F\x03\x02\x02\x02P\u0321" +
    "\x03\x02\x02\x02R\u0327\x03\x02\x02\x02T\u0329\x03\x02\x02\x02V\u0331" +
    "\x03\x02\x02\x02X\u0339\x03\x02\x02\x02Z\u033B\x03\x02\x02\x02\\\u033F" +
    "\x03\x02\x02\x02^\u0343\x03\x02\x02\x02`\u035B\x03\x02\x02\x02b\u035F" +
    "\x03\x02\x02\x02d\u0361\x03\x02\x02\x02f\u0371\x03\x02\x02\x02h\u0373" +
    "\x03\x02\x02\x02j\u0378\x03\x02\x02\x02l\u0383\x03\x02\x02\x02n\u0395" +
    "\x03\x02\x02\x02p\u03A9\x03\x02\x02\x02r\u03B4\x03\x02\x02\x02t\u03B6" +
    "\x03\x02\x02\x02v\u03C3\x03\x02\x02\x02x\u03CA\x03\x02\x02\x02z\u03CD" +
    "\x03\x02\x02\x02|\u03D6\x03\x02\x02\x02~\u03DA\x03\x02\x02\x02\x80\u03DE" +
    "\x03\x02\x02\x02\x82\u03E1\x03\x02\x02\x02\x84\u03E9\x03\x02\x02\x02\x86" +
    "\u03EE\x03\x02\x02\x02\x88\u03FF\x03\x02\x02\x02\x8A\u0406\x03\x02\x02" +
    "\x02\x8C\u0410\x03\x02\x02\x02\x8E\u0419\x03\x02\x02\x02\x90\u0423\x03" +
    "\x02\x02\x02\x92\u0436\x03\x02\x02\x02\x94\u0438\x03\x02\x02\x02\x96\u0445" +
    "\x03\x02\x02\x02\x98\u0448\x03\x02\x02\x02\x9A\u0451\x03\x02\x02\x02\x9C" +
    "\u045C\x03\x02\x02\x02\x9E\u0469\x03\x02\x02\x02\xA0\u048C\x03\x02\x02" +
    "\x02\xA2\u049F\x03\x02\x02\x02\xA4\u04A8\x03\x02\x02\x02\xA6\u04B1\x03" +
    "\x02\x02\x02\xA8\u04C4\x03\x02\x02\x02\xAA\u04DA\x03\x02\x02\x02\xAC\u04DC" +
    "\x03\x02\x02\x02\xAE\u04F3\x03\x02\x02\x02\xB0\u0501\x03\x02\x02\x02\xB2" +
    "\u0503\x03\x02\x02\x02\xB4\u0511\x03\x02\x02\x02\xB6\u052B\x03\x02\x02" +
    "\x02\xB8\u0562\x03\x02\x02\x02\xBA\u0564\x03\x02\x02\x02\xBC\u056A\x03" +
    "\x02\x02\x02\xBE\u056C\x03\x02\x02\x02\xC0\u0571\x03\x02\x02\x02\xC2\u0576" +
    "\x03\x02\x02\x02\xC4\u0582\x03\x02\x02\x02\xC6\u0593\x03\x02\x02\x02\xC8" +
    "\u0595\x03\x02\x02\x02\xCA\u0597\x03\x02\x02\x02\xCC\u05A0\x03\x02\x02" +
    "\x02\xCE\u05A2\x03\x02\x02\x02\xD0\u05A5\x03\x02\x02\x02\xD2\u05D6\x03" +
    "\x02\x02\x02\xD4\u05D8\x03\x02\x02\x02\xD6\u05DB\x03\x02\x02\x02\xD8\u05DD" +
    "\x03\x02\x02\x02\xDA\u05E4\x03\x02\x02\x02\xDC\u05E6\x03\x02\x02\x02\xDE" +
    "\u05E8\x03\x02\x02\x02\xE0\u05EB\x03\x02\x02\x02\xE2\u05F4\x03\x02\x02" +
    "\x02\xE4\u05F9\x03\x02\x02\x02\xE6\u0607\x03\x02\x02\x02\xE8\u0623\x03" +
    "\x02\x02\x02\xEA\u062D\x03\x02\x02\x02\xEC\u0635\x03\x02\x02\x02\xEE\u063A" +
    "\x03\x02\x02\x02\xF0\u0654\x03\x02\x02\x02\xF2\u0656\x03\x02\x02\x02\xF4" +
    "\u065F\x03\x02\x02\x02\xF6\u066A\x03\x02\x02\x02\xF8\u0676\x03\x02\x02" +
    "\x02\xFA\u0690\x03\x02\x02\x02\xFC\u0692\x03\x02\x02\x02\xFE\u06A4\x03" +
    "\x02\x02\x02\u0100\u06A6\x03\x02\x02\x02\u0102\u06AB\x03\x02\x02\x02\u0104" +
    "\u06AE\x03\x02\x02\x02\u0106\u06BC\x03\x02\x02\x02\u0108\u0712\x03\x02" +
    "\x02\x02\u010A\u0731\x03\x02\x02\x02\u010C\u0737\x03\x02\x02\x02\u010E" +
    "\u07AD\x03\x02\x02\x02\u0110\u07B9\x03\x02\x02\x02\u0112\u07BD\x03\x02" +
    "\x02\x02\u0114\u07C3\x03\x02\x02\x02\u0116\u07C5\x03\x02\x02\x02\u0118" +
    "\u07C7\x03\x02\x02\x02\u011A\u07CB\x03\x02\x02\x02\u011C\u07CD\x03\x02" +
    "\x02\x02\u011E\u07D2\x03\x02\x02\x02\u0120\u07D9\x03\x02\x02\x02\u0122" +
    "\u07DD\x03\x02\x02\x02\u0124\u07E2\x03\x02\x02\x02\u0126\u07EC\x03\x02" +
    "\x02\x02\u0128\u07EF\x03\x02\x02\x02\u012A\u07F5\x03\x02\x02\x02\u012C" +
    "\u07FF\x03\x02\x02\x02\u012E\u0801\x03\x02\x02\x02\u0130\u0805\x03\x02" +
    "\x02\x02\u0132\u0810\x03\x02\x02\x02\u0134\u0812\x03\x02\x02\x02\u0136" +
    "\u0814\x03\x02\x02\x02\u0138\u0816\x03\x02\x02\x02\u013A\u081B\x03\x02" +
    "\x02\x02\u013C\u081D\x03\x02\x02\x02\u013E\u081F\x03\x02\x02\x02\u0140" +
    "\u0824\x03\x02\x02\x02\u0142\u0835\x03\x02\x02\x02\u0144\u0843\x03\x02" +
    "\x02\x02\u0146\u0851\x03\x02\x02\x02\u0148\u085F\x03\x02\x02\x02\u014A" +
    "\u0861\x03\x02\x02\x02\u014C\u0869\x03\x02\x02\x02\u014E\u086C\x03\x02" +
    "\x02\x02\u0150\u0870\x03\x02\x02\x02\u0152\u0873\x03\x02\x02\x02\u0154" +
    "\u087E\x03\x02\x02\x02\u0156\u0888\x03\x02\x02\x02\u0158\u088E\x03\x02" +
    "\x02\x02\u015A\u0896\x03\x02\x02\x02\u015C\u08A6\x03\x02\x02\x02\u015E" +
    "\u08AF\x03\x02\x02\x02\u0160\u08B1\x03\x02\x02\x02\u0162\u08B3\x03\x02" +
    "\x02\x02\u0164\u08C3\x03\x02\x02\x02\u0166\u08C5\x03\x02\x02\x02\u0168" +
    "\u08C8\x03\x02\x02\x02\u016A\u08CA\x03\x02\x02\x02\u016C\u08CC\x03\x02" +
    "\x02\x02\u016E\u08CE\x03\x02\x02\x02\u0170\u08D0\x03\x02\x02\x02\u0172" +
    "\u08D2\x03\x02\x02\x02\u0174\u08D4\x03\x02\x02\x02\u0176\u08D6\x03\x02" +
    "\x02\x02\u0178\u08D8\x03\x02\x02\x02\u017A\u017C\x05\x04\x03\x02\u017B" +
    "\u017A\x03\x02\x02\x02\u017C\u017F\x03\x02\x02\x02\u017D\u017B\x03\x02" +
    "\x02\x02\u017D\u017E\x03\x02\x02\x02\u017E\u0180\x03\x02\x02\x02\u017F" +
    "\u017D\x03\x02\x02\x02\u0180\u0181\x07\x02\x02\x03\u0181\x03\x03\x02\x02" +
    "\x02\u0182\u0184\x05\x06\x04\x02\u0183\u0185\x07\u020B\x02\x02\u0184\u0183" +
    "\x03\x02\x02\x02\u0184\u0185\x03\x02\x02\x02\u0185\u0188\x03\x02\x02\x02" +
    "\u0186\u0188\x05\b\x05\x02\u0187\u0182\x03\x02\x02\x02\u0187\u0186\x03" +
    "\x02\x02\x02\u0188\x05\x03\x02\x02\x02\u0189\u0196\x05\n\x06\x02\u018A" +
    "\u0196\x05\f\x07\x02\u018B\u0196\x05\x0E\b\x02\u018C\u0196\x05\x10\t\x02" +
    "\u018D\u0196\x05\x16\f\x02\u018E\u0196\x05\x1A\x0E\x02\u018F\u0196\x05" +
    "\x1C\x0F\x02\u0190\u0196\x05\x1E\x10\x02\u0191\u0196\x05 \x11\x02\u0192" +
    "\u0196\x05\"\x12\x02\u0193\u0196\x05$\x13\x02\u0194\u0196\x05&\x14\x02" +
    "\u0195\u0189\x03\x02\x02\x02\u0195\u018A\x03\x02\x02\x02\u0195\u018B\x03" +
    "\x02\x02\x02\u0195\u018C\x03\x02\x02\x02\u0195\u018D\x03\x02\x02\x02\u0195" +
    "\u018E\x03\x02\x02\x02\u0195\u018F\x03\x02\x02\x02\u0195\u0190\x03\x02" +
    "\x02\x02\u0195\u0191\x03\x02\x02\x02\u0195\u0192\x03\x02\x02\x02\u0195" +
    "\u0193\x03\x02\x02\x02\u0195\u0194\x03\x02\x02\x02\u0196\x07\x03\x02\x02" +
    "\x02\u0197\u0198\x07\u020B\x02\x02\u0198\t\x03\x02\x02\x02\u0199\u01A8" +
    "\x05*\x16\x02\u019A\u01A8\x05j6\x02\u019B\u01A8\x05l7\x02\u019C\u01A8" +
    "\x05n8\x02\u019D\u01A8\x05h5\x02\u019E\u01A8\x05t;\x02\u019F\u01A8\x05" +
    "\x82B\x02\u01A0\u01A8\x05\x84C\x02\u01A1\u01A8\x05\x86D\x02\u01A2\u01A8" +
    "\x05\x88E\x02\u01A3\u01A8\x05\x8AF\x02\u01A4\u01A8\x05\x8CG\x02\u01A5" +
    "\u01A8\x05\x8EH\x02\u01A6\u01A8\x05\x90I\x02\u01A7\u0199\x03\x02\x02\x02" +
    "\u01A7\u019A\x03\x02\x02\x02\u01A7\u019B\x03\x02\x02\x02\u01A7\u019C\x03" +
    "\x02\x02\x02\u01A7\u019D\x03\x02\x02\x02\u01A7\u019E\x03\x02\x02\x02\u01A7" +
    "\u019F\x03\x02\x02\x02\u01A7\u01A0\x03\x02\x02\x02\u01A7\u01A1\x03\x02" +
    "\x02\x02\u01A7\u01A2\x03\x02\x02\x02\u01A7\u01A3\x03\x02\x02\x02\u01A7" +
    "\u01A4\x03\x02\x02\x02\u01A7\u01A5\x03\x02\x02\x02\u01A7\u01A6\x03\x02" +
    "\x02\x02\u01A8\v\x03\x02\x02\x02\u01A9\u01AC\x05\xA0Q\x02\u01AA\u01AC" +
    "\x05\x92J\x02\u01AB\u01A9\x03\x02\x02\x02\u01AB\u01AA\x03\x02\x02\x02" +
    "\u01AC\r\x03\x02\x02\x02\u01AD\u01AE\t\x02\x02\x02\u01AE\u01AF\x05\u0144" +
    "\xA3\x02\u01AF\x0F\x03\x02\x02\x02\u01B0\u01B4\x07\x89\x02\x02\u01B1\u01B5" +
    "\x05\x12\n\x02\u01B2\u01B3\x07\u01E1\x02\x02\u01B3\u01B5\x07\x94\x02\x02" +
    "\u01B4\u01B1\x03\x02\x02\x02\u01B4\u01B2\x03\x02\x02\x02\u01B4\u01B5\x03" +
    "\x02\x02\x02\u01B5\u01B9\x03\x02\x02\x02\u01B6\u01BA\x05\f\x07\x02\u01B7" +
    "\u01BA\x05\x94K\x02\u01B8\u01BA\x05\x9EP\x02\u01B9\u01B6\x03\x02\x02\x02" +
    "\u01B9\u01B7\x03\x02\x02\x02\u01B9\u01B8\x03\x02\x02\x02\u01BA\x11\x03" +
    "\x02\x02\x02\u01BB\u01C0\x05\x14\v\x02\u01BC\u01BD\x07\u020A\x02\x02\u01BD" +
    "\u01BF\x05\x14\v\x02\u01BE\u01BC\x03\x02\x02\x02\u01BF\u01C2\x03\x02\x02" +
    "\x02\u01C0\u01BE\x03\x02\x02\x02\u01C0\u01C1\x03\x02\x02\x02\u01C1\x13" +
    "\x03\x02\x02\x02\u01C2\u01C0\x03\x02\x02\x02\u01C3\u01C4\t\x03\x02\x02" +
    "\u01C4\x15\x03\x02\x02\x02\u01C5\u01C6\x07\u019C\x02\x02\u01C6\u01C7\x07" +
    "\u01BB\x02\x02\u01C7\u01CC\x05\u013A\x9E\x02\u01C8\u01C9\x07\u019C\x02" +
    "\x02\u01C9\u01CC\x05\u013E\xA0\x02\u01CA\u01CC\x05\x18\r\x02\u01CB\u01C5" +
    "\x03\x02\x02\x02\u01CB\u01C8\x03\x02\x02\x02\u01CB\u01CA\x03\x02\x02\x02" +
    "\u01CC\x17\x03\x02\x02\x02\u01CD\u01CE\x07\u019C\x02\x02\u01CE\u01CF\x07" +
    "\xE5\x02\x02\u01CF\u01D4\x05\u014A\xA6\x02\u01D0\u01D1\x07\u020A\x02\x02" +
    "\u01D1\u01D3\x05\u014A\xA6\x02\u01D2\u01D0\x03\x02\x02\x02\u01D3\u01D6" +
    "\x03\x02\x02\x02\u01D4\u01D2\x03\x02\x02\x02\u01D4\u01D5\x03\x02\x02\x02" +
    "\u01D5\x19\x03\x02\x02\x02\u01D6\u01D4\x03\x02\x02\x02\u01D7\u01D8\x07" +
    "\u0157\x02\x02\u01D8\u0202\t\x04\x02\x02\u01D9\u01DA\x07\u0157\x02\x02" +
    "\u01DA\u01DB\x07N\x02\x02\u01DB\u0202\t\x05\x02\x02\u01DC\u01DD\x07\u0157" +
    "\x02\x02\u01DD\u01E0\x07\u0178\x02\x02\u01DE\u01DF\t\x06\x02\x02\u01DF" +
    "\u01E1\x05\u013E\xA0\x02\u01E0\u01DE\x03\x02\x02\x02\u01E0\u01E1\x03\x02" +
    "\x02\x02\u01E1\u01E3\x03\x02\x02\x02\u01E2\u01E4\x05\u010A\x86\x02\u01E3" +
    "\u01E2\x03\x02\x02\x02\u01E3\u01E4\x03\x02\x02\x02\u01E4\u0202\x03\x02" +
    "\x02\x02\u01E5\u01E6\x07\u0157\x02\x02\u01E6\u01E7\x07<\x02\x02\u01E7" +
    "\u01EA\t\x06\x02\x02\u01E8\u01EB\x05\u0146\xA4\x02\u01E9\u01EB\x05\u0144" +
    "\xA3\x02\u01EA\u01E8\x03\x02\x02\x02\u01EA\u01E9\x03\x02\x02\x02\u01EB" +
    "\u01ED\x03\x02\x02\x02\u01EC\u01EE\x05\u010A\x86\x02\u01ED\u01EC\x03\x02" +
    "\x02\x02\u01ED\u01EE\x03\x02\x02\x02\u01EE\u0202\x03\x02\x02\x02\u01EF" +
    "\u01F0\x07\u0157\x02\x02\u01F0\u01F5\x07J\x02\x02\u01F1\u01F2\x07\u0177" +
    "\x02\x02\u01F2\u01F6\x05\u0144\xA3\x02\u01F3\u01F4\x07\u01F7\x02\x02\u01F4" +
    "\u01F6\x05\u0146\xA4\x02\u01F5\u01F1\x03\x02\x02\x02\u01F5\u01F3\x03\x02" +
    "\x02\x02\u01F6\u0202\x03\x02\x02\x02\u01F7\u01F9\x07\u0157\x02\x02\u01F8" +
    "\u01FA\x07\u019D\x02\x02\u01F9\u01F8\x03\x02\x02\x02\u01F9\u01FA\x03\x02" +
    "\x02\x02\u01FA\u01FB\x03\x02\x02\x02\u01FB\u0202\x07\x9C\x02\x02\u01FC" +
    "\u01FE\x07\u0157\x02\x02\u01FD\u01FF\x07\x9A\x02\x02\u01FE\u01FD\x03\x02" +
    "\x02\x02\u01FE\u01FF\x03\x02\x02\x02\u01FF\u0200\x03\x02\x02\x02\u0200" +
    "\u0202\x07\xE5\x02\x02\u0201\u01D7\x03\x02\x02\x02\u0201\u01D9\x03\x02" +
    "\x02\x02\u0201\u01DC\x03\x02\x02\x02\u0201\u01E5\x03\x02\x02\x02\u0201" +
    "\u01EF\x03\x02\x02\x02\u0201\u01F7\x03\x02\x02\x02\u0201\u01FC\x03\x02" +
    "\x02\x02\u0202\x1B\x03\x02\x02\x02\u0203\u0204\x07\u01D6\x02\x02\u0204" +
    "\u0205\x07\xE4\x02\x02\u0205\u0208\x05\u014A\xA6\x02\u0206\u0207\x07\u01B3" +
    "\x02\x02\u0207\u0209\x05\u0152\xAA\x02\u0208\u0206\x03\x02\x02\x02\u0208" +
    "\u0209\x03\x02\x02\x02\u0209\x1D\x03\x02\x02\x02\u020A\u020B\x07\u01F6" +
    "\x02\x02\u020B\u020C\x07\xE4\x02\x02\u020C\u020D\x05\u014A\xA6\x02\u020D" +
    "\x1F\x03\x02\x02\x02\u020E\u0210\x07\u0156\x02\x02\u020F\u0211\x05\u0154" +
    "\xAB\x02\u0210\u020F\x03\x02\x02\x02\u0210\u0211\x03\x02\x02\x02\u0211" +
    "!\x03\x02\x02\x02\u0212\u0214\x07\u013A\x02\x02\u0213\u0215\x05\u0156" +
    "\xAC\x02\u0214\u0213\x03\x02\x02\x02\u0214\u0215\x03\x02\x02\x02\u0215" +
    "#\x03\x02\x02\x02\u0216\u0217\t\x07\x02\x02\u0217\u0218\x07\u01D1\x02" +
    "\x02\u0218\u0219\x05r:\x02\u0219%\x03\x02\x02\x02\u021A\u021B\x07\u01B7" +
    "\x02\x02\u021B\u021C\x07\u01D1\x02\x02\u021C\u021D\x07\u01B3\x02\x02\u021D" +
    "\u0220\x05(\x15\x02\u021E\u021F\x07\x13\x02\x02\u021F\u0221\x05\u014A" +
    "\xA6\x02\u0220\u021E\x03\x02\x02\x02\u0220\u0221\x03\x02\x02\x02\u0221" +
    "\u024D\x03\x02\x02\x02\u0222\u0223\x07\u01B7\x02\x02\u0223\u0224\x07\u01CA" +
    "\x02\x02\u0224\u0225\x07\u01B3\x02\x02\u0225\u0228\x05(\x15\x02\u0226" +
    "\u0227\x07\x13\x02\x02\u0227\u0229\x05\u014A\xA6\x02\u0228\u0226\x03\x02" +
    "\x02\x02\u0228\u0229\x03\x02\x02\x02\u0229\u022C\x03\x02\x02\x02\u022A" +
    "\u022B\x07\u0139\x02\x02\u022B\u022D\x05\u014A\xA6\x02\u022C\u022A\x03" +
    "\x02\x02\x02\u022C\u022D\x03\x02\x02\x02\u022D\u024D\x03\x02\x02\x02\u022E" +
    "\u022F\x07\u01B7\x02\x02\u022F\u0230\t\b\x02\x02\u0230\u0231\x07\u01B3" +
    "\x02\x02\u0231\u0232\x05(\x15\x02\u0232\u0233\x07\u0139\x02\x02\u0233" +
    "\u0234\x05\u014A\xA6\x02\u0234\u024D\x03\x02\x02\x02\u0235\u0236\x07\u01B7" +
    "\x02\x02\u0236\u0237\x07\u01E8\x02\x02\u0237\u024D\x05(\x15\x02\u0238" +
    "\u0239\x07\u01B7\x02\x02\u0239\u023A\x07\u01C7\x02\x02\u023A\u023B\x07" +
    "\u01CA\x02\x02\u023B\u023C\x07\u01B3\x02\x02\u023C\u023D\x05(\x15\x02" +
    "\u023D\u023E\x07\u0139\x02\x02\u023E\u023F\x05\u014A\xA6\x02\u023F\u0240" +
    "\x07\u01D4\x02\x02\u0240\u0241\x05\u014A\xA6\x02\u0241\u024D\x03\x02\x02" +
    "\x02\u0242\u0243\x07\u01B7\x02\x02\u0243\u0244\x07\u01BD\x02\x02\u0244" +
    "\u0245\x07\u01CA\x02\x02\u0245\u0246\x07\u01B3\x02\x02\u0246\u0247\x05" +
    "(\x15\x02\u0247\u0248\x07\x94\x02\x02\u0248\u0249\x05\u014A\xA6\x02\u0249" +
    "\u024A\x07\x13\x02\x02\u024A\u024B\x05\u014A\xA6\x02\u024B\u024D\x03\x02" +
    "\x02\x02\u024C\u021A\x03\x02\x02\x02\u024C\u0222\x03\x02\x02\x02\u024C" +
    "\u022E\x03\x02\x02\x02\u024C\u0235\x03\x02\x02\x02\u024C\u0238\x03\x02" +
    "\x02\x02\u024C\u0242\x03\x02\x02\x02\u024D\'\x03\x02\x02\x02\u024E\u0250" +
    "\x07\u0218\x02\x02\u024F\u024E\x03\x02\x02\x02\u024F\u0250\x03\x02\x02" +
    "\x02\u0250\u0251\x03\x02\x02\x02\u0251\u0253\x05\u014A\xA6\x02\u0252\u024F" +
    "\x03\x02\x02\x02\u0253\u0254\x03\x02\x02\x02\u0254\u0252\x03\x02\x02\x02" +
    "\u0254\u0255\x03\x02\x02\x02\u0255)\x03\x02\x02\x02\u0256\u0259\x05,\x17" +
    "\x02\u0257\u0259\x05.\x18\x02\u0258\u0256\x03\x02\x02\x02\u0258\u0257" +
    "\x03\x02\x02\x02\u0259+\x03\x02\x02\x02\u025A\u025C\x07J\x02\x02\u025B" +
    "\u025D\x07\u01F3\x02\x02\u025C\u025B\x03\x02\x02\x02\u025C\u025D\x03\x02" +
    "\x02\x02\u025D\u025E\x03\x02\x02\x02\u025E\u0260\x07\u0177\x02\x02\u025F" +
    "\u0261\x05\u014E\xA8\x02\u0260\u025F\x03\x02\x02\x02\u0260\u0261\x03\x02" +
    "\x02\x02\u0261\u0262\x03\x02\x02\x02\u0262\u0263\x05\u0142\xA2\x02\u0263" +
    "\u0264\x07\u0206\x02\x02\u0264\u0269\x050\x19\x02\u0265\u0266\x07\u020A" +
    "\x02\x02\u0266\u0268\x050\x19\x02\u0267\u0265\x03\x02\x02\x02\u0268\u026B" +
    "\x03\x02\x02\x02\u0269\u0267\x03\x02\x02\x02\u0269\u026A\x03\x02\x02\x02" +
    "\u026A\u026E\x03\x02\x02\x02\u026B\u0269\x03\x02\x02\x02\u026C\u026D\x07" +
    "\u020A\x02\x02\u026D\u026F\x05T+\x02\u026E\u026C\x03\x02\x02\x02\u026E" +
    "\u026F\x03\x02\x02\x02\u026F\u0272\x03\x02\x02\x02\u0270\u0271\x07\u020A" +
    "\x02\x02\u0271\u0273\x05V,\x02\u0272\u0270\x03\x02\x02\x02\u0272\u0273" +
    "\x03\x02\x02\x02\u0273\u0276\x03\x02\x02\x02\u0274\u0275\x07\u020A\x02" +
    "\x02\u0275\u0277\x05Z.\x02\u0276\u0274\x03\x02\x02\x02\u0276\u0277\x03" +
    "\x02\x02\x02\u0277\u0278\x03\x02\x02\x02\u0278\u027A\x07\u0207\x02\x02" +
    "\u0279\u027B\x05J&\x02\u027A\u0279\x03\x02\x02\x02\u027A\u027B\x03\x02" +
    "\x02\x02\u027B\u027D\x03\x02\x02\x02\u027C\u027E\x05\\/\x02\u027D\u027C" +
    "\x03\x02\x02\x02\u027D\u027E\x03\x02\x02\x02\u027E\u027F\x03\x02\x02\x02" +
    "\u027F\u0281\x05\u014C\xA7\x02\u0280\u0282\x05d3\x02\u0281\u0280\x03\x02" +
    "\x02\x02\u0281\u0282\x03\x02\x02\x02\u0282-\x03\x02\x02\x02\u0283\u0284" +
    "\x07J\x02\x02\u0284\u0286\x07\u0177\x02\x02\u0285\u0287\x05\u014E\xA8" +
    "\x02\u0286\u0285\x03\x02\x02\x02\u0286\u0287\x03\x02\x02\x02\u0287\u0288" +
    "\x03\x02\x02\x02\u0288\u0289\x05\u0142\xA2\x02\u0289\u028C\x05\u014C\xA7" +
    "\x02\u028A\u028B\x07\x13\x02\x02\u028B\u028D\x05\xA0Q\x02\u028C\u028A" +
    "\x03\x02\x02\x02\u028C\u028D\x03\x02\x02\x02\u028D/\x03\x02\x02\x02\u028E" +
    "\u0292\x052\x1A\x02\u028F\u0292\x05L\'\x02\u0290\u0292\x05P)\x02\u0291" +
    "\u028E\x03\x02\x02\x02\u0291\u028F\x03\x02\x02\x02\u0291\u0290\x03\x02" +
    "\x02\x02\u02921\x03\x02\x02\x02\u0293\u0294\x054\x1B\x02\u0294\u0296\x05" +
    ":\x1E\x02\u0295\u0297\x05H%\x02\u0296\u0295\x03\x02\x02\x02\u0296\u0297" +
    "\x03\x02\x02\x02\u0297\u0299\x03\x02\x02\x02\u0298\u029A\x05J&\x02\u0299" +
    "\u0298\x03\x02\x02\x02\u0299\u029A\x03\x02\x02\x02\u029A3\x03\x02\x02" +
    "\x02\u029B\u029E\x05\u014A\xA6\x02\u029C\u029E\x05\u0104\x83\x02\u029D" +
    "\u029B\x03\x02\x02\x02\u029D\u029C\x03\x02\x02\x02\u029E5\x03\x02\x02" +
    "\x02\u029F\u02A2\x05\u014A\xA6\x02\u02A0\u02A2\x05\u0104\x83\x02\u02A1" +
    "\u029F\x03\x02\x02\x02\u02A1\u02A0\x03\x02\x02\x02\u02A27\x03\x02\x02" +
    "\x02\u02A3\u02A4\x07\u0206\x02\x02\u02A4\u02A9\x056\x1C\x02\u02A5\u02A6" +
    "\x07\u020A\x02\x02\u02A6\u02A8\x056\x1C\x02\u02A7\u02A5\x03\x02\x02\x02" +
    "\u02A8\u02AB\x03\x02\x02\x02\u02A9\u02A7\x03\x02\x02\x02\u02A9\u02AA\x03" +
    "\x02\x02\x02\u02AA\u02AC\x03\x02\x02\x02\u02AB\u02A9\x03\x02\x02\x02\u02AC" +
    "\u02AD\x07\u0207\x02\x02\u02AD9\x03\x02\x02\x02\u02AE\u02D4\t\t\x02\x02" +
    "\u02AF\u02B1\t\n\x02\x02\u02B0\u02B2\x05<\x1F\x02\u02B1\u02B0\x03\x02" +
    "\x02\x02\u02B1\u02B2\x03\x02\x02\x02\u02B2\u02D4\x03\x02\x02\x02\u02B3" +
    "\u02B5\x07\u017D\x02\x02\u02B4\u02B6\x05<\x1F\x02\u02B5\u02B4\x03\x02" +
    "\x02\x02\u02B5\u02B6\x03\x02\x02\x02\u02B6\u02BD\x03\x02\x02\x02\u02B7" +
    "\u02B9\t\v\x02\x02\u02B8\u02BA\x07\xD0\x02\x02\u02B9\u02B8\x03\x02\x02" +
    "\x02\u02B9\u02BA\x03\x02\x02\x02\u02BA\u02BB\x03\x02\x02\x02\u02BB\u02BC" +
    "\x07\u017C\x02\x02\u02BC\u02BE\x07\u01FA\x02\x02\u02BD\u02B7\x03\x02\x02" +
    "\x02\u02BD\u02BE\x03\x02\x02\x02\u02BE\u02D4\x03\x02\x02\x02\u02BF\u02C1" +
    "\t\f\x02\x02\u02C0\u02C2\x05> \x02\u02C1\u02C0\x03\x02\x02\x02\u02C1\u02C2" +
    "\x03\x02\x02\x02\u02C2\u02D4\x03\x02\x02\x02\u02C3\u02C5\t\r\x02\x02\u02C4" +
    "\u02C6\x05B\"\x02\u02C5\u02C4\x03\x02\x02\x02\u02C5\u02C6\x03\x02\x02" +
    "\x02\u02C6\u02D4\x03\x02\x02\x02\u02C7\u02C9\x07\u01D7\x02\x02\u02C8\u02CA" +
    "\x05D#\x02\u02C9\u02C8\x03\x02\x02\x02\u02C9\u02CA\x03\x02\x02\x02\u02CA" +
    "\u02D4\x03\x02\x02\x02\u02CB\u02CD\x07\u0143\x02\x02\u02CC\u02CE\x05F" +
    "$\x02\u02CD\u02CC\x03\x02\x02\x02\u02CD\u02CE\x03\x02\x02\x02\u02CE\u02D4" +
    "\x03\x02\x02\x02\u02CF\u02D1\x07\u0128\x02\x02\u02D0\u02D2\x05@!\x02\u02D1" +
    "\u02D0\x03\x02\x02\x02\u02D1\u02D2\x03\x02\x02\x02\u02D2\u02D4\x03\x02" +
    "\x02\x02\u02D3\u02AE\x03\x02\x02\x02\u02D3\u02AF\x03\x02\x02\x02\u02D3" +
    "\u02B3\x03\x02\x02\x02\u02D3\u02BF\x03\x02\x02\x02\u02D3\u02C3\x03\x02" +
    "\x02\x02\u02D3\u02C7\x03\x02\x02\x02\u02D3\u02CB\x03\x02\x02\x02\u02D3" +
    "\u02CF\x03\x02\x02\x02\u02D4;\x03\x02\x02\x02\u02D5\u02D6\x07\u0206\x02" +
    "\x02\u02D6\u02D7\x05\u016A\xB6\x02\u02D7\u02D8\x07\u0207\x02\x02\u02D8" +
    "=\x03\x02\x02\x02\u02D9\u02DA\x07\u0206\x02\x02\u02DA\u02DD\x05\u016A" +
    "\xB6\x02\u02DB\u02DC\x07\u020A\x02\x02\u02DC\u02DE\x05\u016A\xB6\x02\u02DD" +
    "\u02DB\x03\x02\x02\x02\u02DD\u02DE\x03\x02\x02\x02\u02DE\u02DF\x03\x02" +
    "\x02\x02\u02DF\u02E0\x07\u0207\x02\x02\u02E0?\x03\x02\x02\x02\u02E1\u02E2" +
    "\x07\u0206\x02\x02\u02E2\u02E5\x05\u0168\xB5\x02\u02E3\u02E4\x07\u020A" +
    "\x02\x02\u02E4\u02E6\x05\u0168\xB5\x02\u02E5\u02E3\x03\x02\x02\x02\u02E5" +
    "\u02E6\x03\x02\x02\x02\u02E6\u02E7\x03\x02\x02\x02\u02E7\u02E8\x07\u0207" +
    "\x02\x02\u02E8A\x03\x02\x02\x02\u02E9\u02EA\x07\u01FD\x02\x02\u02EA\u02EB" +
    "\x05:\x1E\x02\u02EB\u02EC\x07\u01FC\x02\x02\u02ECC\x03\x02\x02\x02\u02ED" +
    "\u02EE\x07\u01FD\x02\x02\u02EE\u02EF\x05:\x1E\x02\u02EF\u02F0\x07\u020A" +
    "\x02\x02\u02F0\u02F1\x05:\x1E\x02\u02F1\u02F2\x03\x02\x02\x02\u02F2\u02F3" +
    "\x07\u01FC\x02\x02\u02F3E\x03\x02\x02\x02\u02F4\u02F5\x07\u01FD\x02\x02" +
    "\u02F5\u02F6\x056\x1C\x02\u02F6\u02FD\x05:\x1E\x02\u02F7\u02F8\x07\u020A" +
    "\x02\x02\u02F8\u02F9\x056\x1C\x02\u02F9\u02FA\x05:\x1E\x02\u02FA\u02FC" +
    "\x03\x02\x02\x02\u02FB\u02F7\x03\x02\x02\x02\u02FC\u02FF\x03\x02\x02\x02" +
    "\u02FD\u02FB\x03\x02\x02\x02\u02FD\u02FE\x03\x02\x02\x02\u02FE\u0300\x03" +
    "\x02\x02\x02\u02FF\u02FD\x03\x02\x02\x02\u0300\u0301\x07\u01FC\x02\x02" +
    "\u0301G\x03\x02\x02\x02\u0302\u0303\x07B\x02\x02\u0303\u0305\x05X-\x02" +
    "\u0304\u0302\x03\x02\x02\x02\u0304\u0305\x03\x02\x02\x02\u0305\u0306\x03" +
    "\x02\x02\x02\u0306\u0307\x07\u0122\x02\x02\u0307\u030A\x07\u01D4\x02\x02" +
    "\u0308\u0309\x07\xF3\x02\x02\u0309\u030B\x07\x7F\x02\x02\u030A\u0308\x03" +
    "\x02\x02\x02\u030A\u030B\x03\x02\x02\x02\u030B\u0311\x03\x02\x02\x02\u030C" +
    "\u030E\x07\xF3\x02\x02\u030D\u030C\x03\x02\x02\x02\u030D\u030E\x03\x02" +
    "\x02\x02\u030E\u030F\x03\x02\x02\x02\u030F\u0311\x07\xF6\x02\x02\u0310" +
    "\u0304\x03\x02\x02\x02\u0310\u030D\x03\x02\x02\x02\u0311I\x03\x02\x02" +
    "\x02\u0312\u0313\x07=\x02\x02\u0313\u0314\x07\u021B\x02\x02\u0314K\x03" +
    "\x02\x02\x02\u0315\u0316\x054\x1B\x02\u0316\u0317\x05:\x1E\x02\u0317\u031A" +
    "\x07\xDC\x02\x02\u0318\u0319\x07\x99\x02\x02\u0319\u031B\x05N(\x02\u031A" +
    "\u0318\x03\x02\x02\x02\u031A\u031B\x03\x02\x02\x02\u031B\u031D\x03\x02";
FlinkSqlParser._serializedATNSegment2 = "\x02\x02\u031C\u031E\x07\u01A9\x02\x02\u031D\u031C\x03\x02\x02\x02\u031D" +
    "\u031E\x03\x02\x02\x02\u031EM\x03\x02\x02\x02\u031F\u0320\x07\u021B\x02" +
    "\x02\u0320O\x03\x02\x02\x02\u0321\u0322\x054\x1B\x02\u0322\u0323\x07\x13" +
    "\x02\x02\u0323\u0325\x05R*\x02\u0324\u0326\x05J&\x02\u0325\u0324\x03\x02" +
    "\x02\x02\u0325\u0326\x03\x02\x02\x02\u0326Q\x03\x02\x02\x02\u0327\u0328" +
    "\x05\u0104\x83\x02\u0328S\x03\x02\x02\x02\u0329\u032A\x07\u01AA\x02\x02" +
    "\u032A\u032B\x07\x94\x02\x02\u032B\u032C\x056\x1C\x02\u032C\u032D\x07" +
    "\x13\x02\x02\u032D\u032E\x05\u0104\x83\x02\u032EU\x03\x02\x02\x02\u032F" +
    "\u0330\x07B\x02\x02\u0330\u0332\x05X-\x02\u0331\u032F\x03\x02\x02\x02" +
    "\u0331\u0332\x03\x02\x02\x02\u0332\u0333\x03\x02\x02\x02\u0333\u0334\x07" +
    "\u0122\x02\x02\u0334\u0335\x07\u01D4\x02\x02\u0335\u0336\x058\x1D\x02" +
    "\u0336\u0337\x07\xF3\x02\x02\u0337\u0338\x07\x7F\x02\x02\u0338W\x03\x02" +
    "\x02\x02\u0339\u033A\x05\u0132\x9A\x02\u033AY\x03\x02\x02\x02\u033B\u033C" +
    "\x07\u0117\x02\x02\u033C\u033D\x07\x94\x02\x02\u033D\u033E\x07\u0175\x02" +
    "\x02\u033E[\x03\x02\x02\x02\u033F\u0340\x07\u010F\x02\x02\u0340\u0341" +
    "\x07$\x02\x02\u0341\u0342\x05^0\x02\u0342]\x03\x02\x02\x02\u0343\u0344" +
    "\x07\u0206\x02\x02\u0344\u0349\x05`1\x02\u0345\u0346\x07\u020A\x02\x02" +
    "\u0346\u0348\x05`1\x02\u0347\u0345\x03\x02\x02\x02\u0348\u034B\x03\x02" +
    "\x02\x02\u0349\u0347\x03\x02\x02\x02\u0349\u034A\x03\x02\x02\x02\u034A" +
    "\u034C\x03\x02\x02\x02\u034B\u0349\x03\x02\x02\x02\u034C\u034D\x07\u0207" +
    "\x02\x02\u034D_\x03\x02\x02\x02\u034E\u035C\x056\x1C\x02\u034F\u035C\x05" +
    "\u011A\x8E\x02\u0350\u0351\x07\u0206\x02\x02\u0351\u0356\x05b2\x02\u0352" +
    "\u0353\x07\u020A\x02\x02\u0353\u0355\x05b2\x02\u0354\u0352\x03\x02\x02" +
    "\x02\u0355\u0358\x03\x02\x02\x02\u0356\u0354\x03\x02\x02\x02\u0356\u0357" +
    "\x03\x02\x02\x02\u0357\u0359\x03\x02\x02\x02\u0358\u0356\x03\x02\x02\x02" +
    "\u0359\u035A\x07\u0207\x02\x02\u035A\u035C\x03\x02\x02\x02\u035B\u034E" +
    "\x03\x02\x02\x02\u035B\u034F\x03\x02\x02\x02\u035B\u0350\x03\x02\x02\x02" +
    "\u035Ca\x03\x02\x02\x02\u035D\u0360\x05\u011A\x8E\x02\u035E\u0360\x05" +
    "\u0164\xB3\x02\u035F\u035D\x03\x02\x02\x02\u035F\u035E\x03\x02\x02\x02" +
    "\u0360c\x03\x02\x02\x02\u0361\u0362\x07\xCC\x02\x02\u0362\u036B\x05\u0144" +
    "\xA3\x02\u0363\u0367\x07\u0206\x02\x02\u0364\u0366\x05f4\x02\u0365\u0364" +
    "\x03\x02\x02\x02\u0366\u0369\x03\x02\x02\x02\u0367\u0365\x03\x02\x02\x02" +
    "\u0367\u0368\x03\x02\x02\x02\u0368\u036A\x03\x02\x02\x02\u0369\u0367\x03" +
    "\x02\x02\x02\u036A\u036C\x07\u0207\x02\x02\u036B\u0363\x03\x02\x02\x02" +
    "\u036B\u036C\x03\x02\x02\x02\u036Ce\x03\x02\x02\x02\u036D\u036E\t\x0E" +
    "\x02\x02\u036E\u0372\t\x0F\x02\x02\u036F\u0370\t\x10\x02\x02\u0370\u0372" +
    "\t\x11\x02\x02\u0371\u036D\x03\x02\x02\x02\u0371\u036F\x03\x02\x02\x02" +
    "\u0372g\x03\x02\x02\x02\u0373\u0374\x07J\x02\x02\u0374\u0375\x07\u01BB" +
    "\x02\x02\u0375\u0376\x05\u013C\x9F\x02\u0376\u0377\x05\u014C\xA7\x02\u0377" +
    "i\x03\x02\x02\x02\u0378\u0379\x07J\x02\x02\u0379\u037B\x07\u01C1\x02\x02" +
    "\u037A\u037C\x05\u014E\xA8\x02\u037B\u037A\x03\x02\x02\x02\u037B\u037C" +
    "\x03\x02\x02\x02\u037C\u037D\x03\x02\x02\x02\u037D\u037F\x05\u0140\xA1" +
    "\x02\u037E\u0380\x05J&\x02\u037F\u037E\x03\x02\x02\x02\u037F\u0380\x03" +
    "\x02\x02\x02\u0380\u0381\x03\x02\x02\x02\u0381\u0382\x05\u014C\xA7\x02" +
    "\u0382k\x03\x02\x02\x02\u0383\u0385\x07J\x02\x02\u0384\u0386\x07\u01F3" +
    "\x02\x02\u0385\u0384\x03\x02\x02\x02\u0385\u0386\x03\x02\x02\x02\u0386" +
    "\u0387\x03\x02\x02\x02\u0387\u0389\x07\u01F7\x02\x02\u0388\u038A\x05\u014E" +
    "\xA8\x02\u0389\u0388\x03\x02\x02\x02\u0389\u038A\x03\x02\x02\x02\u038A" +
    "\u038B\x03\x02\x02\x02\u038B\u038D\x05\u0148\xA5\x02\u038C\u038E\x058" +
    "\x1D\x02\u038D\u038C\x03\x02\x02\x02\u038D\u038E\x03\x02\x02\x02\u038E" +
    "\u0390\x03\x02\x02\x02\u038F\u0391\x05J&\x02\u0390\u038F\x03\x02\x02\x02" +
    "\u0390\u0391\x03\x02\x02\x02\u0391\u0392\x03\x02\x02\x02\u0392\u0393\x07" +
    "\x13\x02\x02\u0393\u0394\x05\xA0Q\x02\u0394m\x03\x02\x02\x02\u0395\u0399" +
    "\x07J\x02\x02\u0396\u039A\x07\u01F3\x02\x02\u0397\u0398\x07\u01F3\x02" +
    "\x02\u0398\u039A\x07\u0174\x02\x02\u0399\u0396\x03\x02\x02\x02\u0399\u0397" +
    "\x03\x02\x02\x02\u0399\u039A\x03\x02\x02\x02\u039A\u039B\x03\x02\x02\x02" +
    "\u039B\u039D\x07\x9B\x02\x02\u039C\u039E\x05\u014E\xA8\x02\u039D\u039C" +
    "\x03\x02\x02\x02\u039D\u039E\x03\x02\x02\x02\u039E\u039F\x03\x02\x02\x02" +
    "\u039F\u03A0\x05\u0110\x89\x02\u03A0\u03A1\x07\x13\x02\x02\u03A1\u03A4" +
    "\x05\u0132\x9A\x02\u03A2\u03A3\x07\xC5\x02\x02\u03A3\u03A5\t\x12\x02\x02" +
    "\u03A4\u03A2\x03\x02\x02\x02\u03A4\u03A5\x03\x02\x02\x02\u03A5\u03A7\x03" +
    "\x02\x02\x02\u03A6\u03A8\x05p9\x02\u03A7\u03A6\x03\x02\x02\x02\u03A7\u03A8" +
    "\x03\x02\x02\x02\u03A8o\x03\x02\x02\x02\u03A9\u03AA\x07\u019E\x02\x02" +
    "\u03AA\u03AB\x07\u01D1\x02\x02\u03AB\u03B1\x05r:\x02\u03AC\u03AD\x07\u020A" +
    "\x02\x02\u03AD\u03AE\x07\u01D1\x02\x02\u03AE\u03B0\x05r:\x02\u03AF\u03AC" +
    "\x03\x02\x02\x02\u03B0\u03B3\x03\x02\x02\x02\u03B1\u03AF\x03\x02\x02\x02" +
    "\u03B1\u03B2\x03\x02\x02\x02\u03B2q\x03\x02\x02\x02\u03B3\u03B1\x03\x02" +
    "\x02\x02\u03B4\u03B5\x07\u021B\x02\x02\u03B5s\x03\x02\x02\x02\u03B6\u03B7" +
    "\x07\n\x02\x02\u03B7\u03B9\x07\u0177\x02\x02\u03B8\u03BA\x05\u0150\xA9" +
    "\x02\u03B9\u03B8\x03\x02\x02\x02\u03B9\u03BA\x03\x02\x02\x02\u03BA\u03BB" +
    "\x03\x02\x02\x02\u03BB\u03C1\x05\u0144\xA3\x02\u03BC\u03C2\x05v<\x02\u03BD" +
    "\u03C2\x05x=\x02\u03BE\u03C2\x05z>\x02\u03BF\u03C2\x05|?\x02\u03C0\u03C2" +
    "\x05~@\x02\u03C1\u03BC\x03\x02\x02\x02\u03C1\u03BD\x03\x02\x02\x02\u03C1" +
    "\u03BE\x03\x02\x02\x02\u03C1\u03BF\x03\x02\x02\x02\u03C1\u03C0\x03\x02" +
    "\x02\x02\u03C2u\x03\x02\x02\x02\u03C3\u03C5\x07\u0139\x02\x02\u03C4\u03C6" +
    "\x05\u014A\xA6\x02\u03C5\u03C4\x03\x02\x02\x02\u03C5\u03C6\x03\x02\x02" +
    "\x02\u03C6\u03C7\x03\x02\x02\x02\u03C7\u03C8\x07\u0186\x02\x02\u03C8\u03C9" +
    "\x05\u014A\xA6\x02\u03C9w\x03\x02\x02\x02\u03CA\u03CB\x07\u0156\x02\x02" +
    "\u03CB\u03CC\x05\u0152\xAA\x02\u03CCy\x03\x02\x02\x02\u03CD\u03CE\x07" +
    "\u01B7\x02\x02\u03CE\u03CF\x07B\x02\x02\u03CF\u03D0\x05X-\x02\u03D0\u03D1" +
    "\x07\u0122\x02\x02\u03D1\u03D2\x07\u01D4\x02\x02\u03D2\u03D4\x058\x1D" +
    "\x02\u03D3\u03D5\x05\x80A\x02\u03D4\u03D3\x03\x02\x02\x02\u03D4\u03D5" +
    "\x03\x02\x02\x02\u03D5{\x03\x02\x02\x02\u03D6\u03D7\x07v\x02\x02\u03D7" +
    "\u03D8\x07B\x02\x02\u03D8\u03D9\x05X-\x02\u03D9}\x03\x02\x02\x02\u03DA" +
    "\u03DB\x07\u01B7\x02\x02\u03DB\u03DC\x07\u0195\x02\x02\u03DC\u03DD\x05" +
    "8\x1D\x02\u03DD\x7F\x03\x02\x02\x02\u03DE\u03DF\x07\xF3\x02\x02\u03DF" +
    "\u03E0\x07\x7F\x02\x02\u03E0\x81\x03\x02\x02\x02\u03E1\u03E2\x07\n\x02" +
    "\x02\u03E2\u03E3\x07\u01F7\x02\x02\u03E3\u03E7\x05\u0146\xA4\x02\u03E4" +
    "\u03E8\x05v<\x02\u03E5\u03E6\x07\x13\x02\x02\u03E6\u03E8\x05\xA0Q\x02" +
    "\u03E7\u03E4\x03\x02\x02\x02\u03E7\u03E5\x03\x02\x02\x02\u03E8\x83\x03" +
    "\x02\x02\x02\u03E9\u03EA\x07\n\x02\x02\u03EA\u03EB\x07\u01C1\x02\x02\u03EB" +
    "\u03EC\x05\u013E\xA0\x02\u03EC\u03ED\x05x=\x02\u03ED\x85\x03\x02\x02\x02" +
    "\u03EE\u03F2\x07\n\x02\x02\u03EF\u03F3\x07\u01F3\x02\x02\u03F0\u03F1\x07" +
    "\u01F3\x02\x02\u03F1\u03F3\x07\u0174\x02\x02\u03F2\u03EF\x03\x02\x02\x02" +
    "\u03F2\u03F0\x03\x02\x02\x02\u03F2\u03F3\x03\x02\x02\x02\u03F3\u03F4\x03" +
    "\x02\x02\x02\u03F4\u03F6\x07\x9B\x02\x02\u03F5\u03F7\x05\u0150\xA9\x02" +
    "\u03F6\u03F5\x03\x02\x02\x02\u03F6\u03F7\x03\x02\x02\x02\u03F7\u03F8\x03" +
    "\x02\x02\x02\u03F8\u03F9\x05\u0112\x8A\x02\u03F9\u03FA\x07\x13\x02\x02" +
    "\u03FA\u03FD\x05\u0132\x9A\x02\u03FB\u03FC\x07\xC5\x02\x02\u03FC\u03FE" +
    "\t\x12\x02\x02\u03FD\u03FB\x03\x02\x02\x02\u03FD\u03FE\x03\x02\x02\x02" +
    "\u03FE\x87\x03\x02\x02\x02\u03FF\u0400\x07v\x02\x02\u0400\u0402\x07\u01BB" +
    "\x02\x02\u0401\u0403\x05\u0150\xA9\x02\u0402\u0401\x03\x02\x02\x02\u0402" +
    "\u0403\x03\x02\x02\x02\u0403\u0404\x03\x02\x02\x02\u0404\u0405\x05\u013A" +
    "\x9E\x02\u0405\x89\x03\x02\x02\x02\u0406\u0408\x07v\x02\x02\u0407\u0409" +
    "\x07\u01F3\x02\x02\u0408\u0407\x03\x02\x02\x02\u0408\u0409\x03\x02\x02" +
    "\x02\u0409\u040A\x03\x02\x02\x02\u040A\u040C\x07\u0177\x02\x02\u040B\u040D" +
    "\x05\u0150\xA9\x02\u040C\u040B\x03\x02\x02\x02\u040C\u040D\x03\x02\x02" +
    "\x02\u040D\u040E\x03\x02\x02\x02\u040E\u040F\x05\u0144\xA3\x02\u040F\x8B" +
    "\x03\x02\x02\x02\u0410\u0411\x07v\x02\x02\u0411\u0413\x07\u01C1\x02\x02" +
    "\u0412\u0414\x05\u0150\xA9\x02\u0413\u0412\x03\x02\x02\x02\u0413\u0414" +
    "\x03\x02\x02\x02\u0414\u0415\x03\x02\x02\x02\u0415\u0417\x05\u013E\xA0" +
    "\x02\u0416\u0418\t\x13\x02\x02\u0417\u0416\x03\x02\x02\x02\u0417\u0418" +
    "\x03\x02\x02\x02\u0418\x8D\x03\x02\x02\x02\u0419\u041B\x07v\x02\x02\u041A" +
    "\u041C\x07\u01F3\x02\x02\u041B\u041A\x03\x02\x02\x02\u041B\u041C\x03\x02" +
    "\x02\x02\u041C\u041D\x03\x02\x02\x02\u041D\u041F\x07\u01F7\x02\x02\u041E" +
    "\u0420\x05\u0150\xA9\x02\u041F\u041E\x03\x02\x02\x02\u041F\u0420\x03\x02" +
    "\x02\x02\u0420\u0421\x03\x02\x02\x02\u0421\u0422\x05\u0146\xA4\x02\u0422" +
    "\x8F\x03\x02\x02\x02\u0423\u0427\x07v\x02\x02\u0424\u0428\x07\u01F3\x02" +
    "\x02\u0425\u0426\x07\u01F3\x02\x02\u0426\u0428\x07\u0174\x02\x02\u0427" +
    "\u0424\x03\x02\x02\x02\u0427\u0425\x03\x02\x02\x02\u0427\u0428\x03\x02" +
    "\x02\x02\u0428\u0429\x03\x02\x02\x02\u0429\u042B\x07\x9B\x02\x02\u042A" +
    "\u042C\x05\u0150\xA9\x02\u042B\u042A\x03\x02\x02\x02\u042B\u042C\x03\x02" +
    "\x02\x02\u042C\u042D\x03\x02\x02\x02\u042D\u042E\x05\u0112\x8A\x02\u042E" +
    "\x91\x03\x02\x02\x02\u042F\u0431\x07\x86\x02\x02\u0430\u042F\x03\x02\x02" +
    "\x02\u0430\u0431\x03\x02\x02\x02\u0431\u0432\x03\x02\x02\x02\u0432\u0437" +
    "\x05\x94K\x02\u0433\u0437\x05\x9CO\x02\u0434\u0435\x07\x86\x02\x02\u0435" +
    "\u0437\x05\x9EP\x02\u0436\u0430\x03\x02\x02\x02\u0436\u0433\x03\x02\x02" +
    "\x02\u0436\u0434\x03\x02\x02\x02\u0437\x93\x03\x02\x02\x02\u0438\u0439" +
    "\x07\xB3\x02\x02\u0439\u043A\t\x14\x02\x02\u043A\u0443\x05\u0144\xA3\x02" +
    "\u043B\u043D\x05\x96L\x02\u043C\u043B\x03\x02\x02\x02\u043C\u043D\x03" +
    "\x02\x02\x02\u043D\u043F\x03\x02\x02\x02\u043E\u0440\x058\x1D\x02\u043F" +
    "\u043E\x03\x02\x02\x02\u043F\u0440\x03\x02\x02\x02\u0440\u0441\x03\x02" +
    "\x02\x02\u0441\u0444\x05\xA0Q\x02\u0442\u0444\x05\x98M\x02\u0443\u043C" +
    "\x03\x02\x02\x02\u0443\u0442\x03\x02\x02\x02\u0444\x95\x03\x02\x02\x02" +
    "\u0445\u0446\x07\u010E\x02\x02\u0446\u0447\x05\u0152\xAA\x02\u0447\x97" +
    "\x03\x02\x02\x02\u0448\u0449\x07\u01A0\x02\x02\u0449\u044E\x05\x9AN\x02" +
    "\u044A\u044B\x07\u020A\x02\x02\u044B\u044D\x05\x9AN\x02\u044C\u044A\x03" +
    "\x02\x02\x02\u044D\u0450\x03\x02\x02\x02\u044E\u044C\x03\x02\x02\x02\u044E" +
    "\u044F\x03\x02\x02\x02\u044F\x99\x03\x02\x02\x02\u0450\u044E\x03\x02\x02" +
    "\x02\u0451\u0452\x07\u0206\x02\x02\u0452\u0457\x05\u0164\xB3\x02\u0453" +
    "\u0454\x07\u020A\x02\x02\u0454\u0456\x05\u0164\xB3\x02\u0455\u0453\x03" +
    "\x02\x02\x02\u0456\u0459\x03\x02\x02\x02\u0457\u0455\x03\x02\x02\x02\u0457" +
    "\u0458\x03\x02\x02\x02\u0458\u045A\x03\x02\x02\x02\u0459\u0457\x03\x02" +
    "\x02\x02\u045A\u045B\x07\u0207\x02\x02\u045B\x9B\x03\x02\x02\x02\u045C" +
    "\u045D\x07\x1A\x02\x02\u045D\u045E\x07\u0164\x02\x02\u045E\u045F\x07\u0156" +
    "\x02\x02\u045F\u0463\x07\u020B\x02\x02\u0460\u0461\x05\x94K\x02\u0461" +
    "\u0462\x07\u020B\x02\x02\u0462\u0464\x03\x02\x02\x02\u0463\u0460\x03\x02" +
    "\x02\x02\u0464\u0465\x03\x02\x02\x02\u0465\u0463\x03\x02\x02\x02\u0465" +
    "\u0466\x03\x02\x02\x02\u0466\u0467\x03\x02\x02\x02\u0467\u0468\x07|\x02" +
    "\x02\u0468\x9D\x03\x02\x02\x02\u0469\u046A\x07\u0164\x02\x02\u046A\u046B" +
    "\x07\u0156\x02\x02\u046B\u046F\x07\x1A\x02\x02\u046C\u046D\x05\x94K\x02" +
    "\u046D\u046E\x07\u020B\x02\x02\u046E\u0470\x03\x02\x02\x02\u046F\u046C" +
    "\x03\x02\x02\x02\u0470\u0471\x03\x02\x02\x02\u0471\u046F\x03\x02\x02\x02" +
    "\u0471\u0472\x03\x02\x02\x02\u0472\u0473\x03\x02\x02\x02\u0473\u0474\x07" +
    "|\x02\x02\u0474\x9F\x03\x02\x02\x02\u0475\u0476\bQ\x01\x02\u0476\u048D" +
    "\x05\xA2R\x02\u0477\u0478\x05\xA4S\x02\u0478\u0479\x05\xA0Q\x07\u0479" +
    "\u048D\x03\x02\x02\x02\u047A\u047B\x07\u0206\x02\x02\u047B\u047C\x05\xA0" +
    "Q\x02\u047C\u047D\x07\u0207\x02\x02\u047D\u048D\x03\x02\x02\x02\u047E" +
    "\u0480\x05\xACW\x02\u047F\u0481\x05\xE8u\x02\u0480\u047F\x03\x02\x02\x02" +
    "\u0480\u0481\x03\x02\x02\x02\u0481\u0483\x03\x02\x02\x02\u0482\u0484\x05" +
    "\xECw\x02\u0483\u0482\x03\x02\x02\x02\u0483\u0484\x03\x02\x02\x02\u0484" +
    "\u048D\x03\x02\x02\x02\u0485\u0487\x05\xAAV\x02\u0486\u0488\x05\xE8u\x02" +
    "\u0487\u0486\x03\x02\x02\x02\u0487\u0488\x03\x02\x02\x02\u0488\u048A\x03" +
    "\x02\x02\x02\u0489\u048B\x05\xECw\x02\u048A\u0489\x03\x02\x02\x02\u048A" +
    "\u048B\x03\x02\x02\x02\u048B\u048D\x03\x02\x02\x02\u048C\u0475\x03\x02" +
    "\x02\x02\u048C\u0477\x03\x02\x02\x02\u048C\u047A\x03\x02\x02\x02\u048C" +
    "\u047E\x03\x02\x02\x02\u048C\u0485\x03\x02\x02\x02\u048D\u049C\x03\x02" +
    "\x02\x02\u048E\u048F\f\x05\x02\x02\u048F\u0491\t\x15\x02\x02\u0490\u0492" +
    "\x07\x07\x02\x02\u0491\u0490\x03\x02\x02\x02\u0491\u0492\x03\x02\x02\x02" +
    "\u0492\u0493\x03\x02\x02\x02\u0493\u0495\x05\xA0Q\x02\u0494\u0496\x05" +
    "\xE8u\x02\u0495\u0494\x03\x02\x02\x02\u0495\u0496\x03\x02\x02\x02\u0496" +
    "\u0498\x03\x02\x02\x02\u0497\u0499\x05\xECw\x02\u0498\u0497\x03\x02\x02" +
    "\x02\u0498\u0499\x03\x02\x02\x02\u0499\u049B\x03\x02\x02\x02\u049A\u048E" +
    "\x03\x02\x02\x02\u049B\u049E\x03\x02\x02\x02\u049C\u049A\x03\x02\x02\x02" +
    "\u049C\u049D\x03\x02\x02\x02\u049D\xA1\x03\x02\x02\x02\u049E\u049C\x03" +
    "\x02\x02\x02\u049F\u04A0\x07\u01A0\x02\x02\u04A0\u04A5\x05\u0104\x83\x02" +
    "\u04A1\u04A2\x07\u020A\x02\x02\u04A2\u04A4\x05\u0104\x83\x02\u04A3\u04A1" +
    "\x03\x02\x02\x02\u04A4\u04A7\x03\x02\x02\x02\u04A5\u04A3\x03\x02\x02\x02" +
    "\u04A5\u04A6\x03\x02\x02\x02\u04A6\xA3\x03\x02\x02\x02\u04A7\u04A5\x03" +
    "\x02\x02\x02\u04A8\u04A9\x07\u01B3\x02\x02\u04A9\u04AE\x05\xA6T\x02\u04AA" +
    "\u04AB\x07\u020A\x02\x02\u04AB\u04AD\x05\xA6T\x02\u04AC\u04AA\x03\x02" +
    "\x02\x02\u04AD\u04B0\x03\x02\x02\x02\u04AE\u04AC\x03\x02\x02\x02\u04AE" +
    "\u04AF\x03\x02\x02\x02\u04AF\xA5\x03\x02\x02\x02\u04B0\u04AE\x03\x02\x02" +
    "\x02\u04B1\u04BD\x05\xA8U\x02\u04B2\u04B3\x07\u0206\x02\x02\u04B3\u04B8" +
    "\x056\x1C\x02\u04B4\u04B5\x07\u020A\x02\x02\u04B5\u04B7\x056\x1C\x02\u04B6" +
    "\u04B4\x03\x02\x02\x02\u04B7\u04BA\x03\x02\x02\x02\u04B8\u04B6\x03\x02" +
    "\x02\x02\u04B8\u04B9\x03\x02\x02\x02\u04B9\u04BB\x03\x02\x02\x02\u04BA" +
    "\u04B8\x03\x02\x02\x02\u04BB\u04BC\x07\u0207\x02\x02\u04BC\u04BE\x03\x02" +
    "\x02\x02\u04BD\u04B2\x03\x02\x02\x02\u04BD\u04BE\x03\x02\x02\x02\u04BE" +
    "\u04BF\x03\x02\x02\x02\u04BF\u04C0\x07\x13\x02\x02\u04C0\u04C1\x07\u0206" +
    "\x02\x02\u04C1\u04C2\x05\xA0Q\x02\u04C2\u04C3\x07\u0207\x02\x02\u04C3" +
    "\xA7\x03\x02\x02\x02\u04C4\u04C5\x05\u0132\x9A\x02\u04C5\xA9\x03\x02\x02" +
    "\x02\u04C6\u04C8\x05\xACW\x02\u04C7\u04C9\x05\xB2Z\x02\u04C8\u04C7\x03" +
    "\x02\x02\x02\u04C8\u04C9\x03\x02\x02\x02\u04C9\u04CB\x03\x02\x02\x02\u04CA" +
    "\u04CC\x05\xCEh\x02\u04CB\u04CA\x03\x02\x02\x02\u04CB\u04CC\x03\x02\x02" +
    "\x02\u04CC\u04CE\x03\x02\x02\x02\u04CD\u04CF\x05\xD0i\x02\u04CE\u04CD" +
    "\x03\x02\x02\x02\u04CE\u04CF\x03\x02\x02\x02\u04CF\u04D1\x03\x02\x02\x02" +
    "\u04D0\u04D2\x05\xDEp\x02\u04D1\u04D0\x03\x02\x02\x02\u04D1\u04D2\x03" +
    "\x02\x02\x02\u04D2\u04D4\x03\x02\x02\x02\u04D3\u04D5\x05\xE0q\x02\u04D4" +
    "\u04D3\x03\x02\x02\x02\u04D4\u04D5\x03\x02\x02\x02\u04D5\u04DB\x03\x02" +
    "\x02\x02\u04D6\u04D7\x05\xACW\x02\u04D7\u04D8\x05\xB2Z\x02\u04D8\u04D9" +
    "\x05\xE6t\x02\u04D9\u04DB\x03\x02\x02\x02\u04DA\u04C6\x03\x02\x02\x02" +
    "\u04DA\u04D6\x03\x02\x02\x02\u04DB\xAB\x03\x02\x02\x02\u04DC\u04DE\x07" +
    "\u0152\x02\x02\u04DD\u04DF\x05\u016E\xB8\x02\u04DE\u04DD\x03\x02\x02\x02" +
    "\u04DE\u04DF\x03\x02\x02\x02\u04DF\u04E9\x03\x02\x02\x02\u04E0\u04EA\x07" +
    "\u0211\x02\x02\u04E1\u04E6\x05\xAEX\x02\u04E2\u04E3\x07\u020A\x02\x02" +
    "\u04E3\u04E5\x05\xAEX\x02\u04E4\u04E2\x03\x02\x02\x02\u04E5\u04E8\x03" +
    "\x02\x02\x02\u04E6\u04E4\x03\x02\x02\x02\u04E6\u04E7\x03\x02\x02\x02\u04E7" +
    "\u04EA\x03\x02\x02\x02\u04E8\u04E6\x03\x02\x02\x02\u04E9\u04E0\x03\x02" +
    "\x02\x02\u04E9\u04E1\x03\x02\x02\x02\u04EA\xAD\x03\x02\x02\x02\u04EB\u04F4" +
    "\x05\xB0Y\x02\u04EC\u04F1\x056\x1C\x02\u04ED\u04EF\x07\x13\x02\x02\u04EE" +
    "\u04ED\x03\x02\x02\x02\u04EE\u04EF\x03\x02\x02\x02\u04EF\u04F0\x03\x02" +
    "\x02\x02\u04F0\u04F2\x05\u0104\x83\x02\u04F1\u04EE\x03\x02\x02\x02\u04F1" +
    "\u04F2\x03\x02\x02\x02\u04F2\u04F4\x03\x02\x02\x02\u04F3\u04EB\x03\x02" +
    "\x02\x02\u04F3\u04EC\x03\x02\x02\x02\u04F4\xAF\x03\x02\x02\x02\u04F5\u04F6" +
    "\x05\u010E\x88\x02\u04F6\u04F7\x07\u0108\x02\x02\u04F7\u04F8\x05\xE4s" +
    "\x02\u04F8\u04F9\x07\x13\x02\x02\u04F9\u04FA\x05\u0132\x9A\x02\u04FA\u0502" +
    "\x03\x02\x02\x02\u04FB\u04FC\x05\u010E\x88\x02\u04FC\u04FD\x07\u0108\x02" +
    "\x02\u04FD\u04FE\x05\u012A\x96\x02\u04FE\u04FF\x07\x13\x02\x02\u04FF\u0500" +
    "\x05\u0132\x9A\x02\u0500\u0502\x03\x02\x02\x02\u0501\u04F5\x03\x02\x02" +
    "\x02\u0501\u04FB\x03\x02\x02\x02\u0502\xB1\x03\x02\x02\x02\u0503\u0504" +
    "\x07\x99\x02\x02\u0504\u0505\x05\xB4[\x02\u0505\xB3\x03\x02\x02\x02\u0506" +
    "\u0507\b[\x01\x02\u0507\u050C\x05\xB6\\\x02\u0508\u0509\x07\u020A\x02" +
    "\x02\u0509\u050B\x05\xB6\\\x02\u050A\u0508\x03\x02\x02\x02\u050B\u050E" +
    "\x03\x02\x02\x02\u050C\u050A\x03\x02\x02\x02\u050C\u050D\x03\x02\x02\x02" +
    "\u050D\u0512\x03\x02\x02\x02\u050E\u050C\x03\x02\x02\x02\u050F\u0512\x05" +
    "\xBE`\x02\u0510\u0512\x05\xC0a\x02\u0511\u0506\x03\x02\x02\x02\u0511\u050F" +
    "\x03\x02\x02\x02\u0511\u0510\x03\x02\x02\x02\u0512\u0528\x03\x02\x02\x02" +
    "\u0513\u0514\f\x05\x02\x02\u0514\u0515\x07K\x02\x02\u0515\u0516\x07\xBB" +
    "\x02\x02\u0516\u0527\x05\xB4[\x06\u0517\u0519\f\x06\x02\x02\u0518\u051A" +
    "\x07\xEB\x02\x02\u0519\u0518\x03\x02\x02\x02\u0519\u051A\x03\x02\x02\x02" +
    "\u051A\u051C\x03\x02\x02\x02\u051B\u051D\t\x16\x02\x02\u051C\u051B\x03" +
    "\x02\x02\x02\u051C\u051D\x03\x02\x02\x02\u051D\u051F\x03\x02\x02\x02\u051E" +
    "\u0520\x07\u0107\x02\x02\u051F\u051E\x03\x02\x02\x02\u051F\u0520\x03\x02" +
    "\x02\x02\u0520\u0521\x03\x02\x02\x02\u0521\u0522\x07\xBB\x02\x02\u0522" +
    "\u0524\x05\xB4[\x02\u0523\u0525\x05\xCCg\x02\u0524\u0523\x03\x02\x02\x02" +
    "\u0524\u0525\x03\x02\x02\x02\u0525\u0527\x03\x02\x02\x02\u0526\u0513\x03" +
    "\x02\x02\x02\u0526\u0517\x03\x02\x02\x02\u0527\u052A\x03\x02\x02\x02\u0528" +
    "\u0526\x03\x02\x02\x02\u0528\u0529\x03\x02\x02\x02\u0529\xB5\x03\x02\x02" +
    "\x02\u052A\u0528\x03\x02\x02\x02\u052B\u052D\x05\xB8]\x02\u052C\u052E" +
    "\x05\u0128\x95\x02\u052D\u052C\x03\x02\x02\x02\u052D\u052E\x03\x02\x02" +
    "\x02\u052E\xB7\x03\x02\x02\x02\u052F\u0531\x07\u0177\x02\x02\u0530\u052F" +
    "\x03\x02\x02\x02\u0530\u0531\x03\x02\x02\x02\u0531\u0532\x03\x02\x02\x02" +
    "\u0532\u0534\x05\u0144\xA3\x02\u0533\u0535\x05\xBA^\x02\u0534\u0533\x03" +
    "\x02\x02\x02\u0534\u0535\x03\x02\x02\x02\u0535\u053A\x03\x02\x02\x02\u0536" +
    "\u0538\x07\x13\x02\x02\u0537\u0536\x03\x02\x02\x02\u0537\u0538\x03\x02" +
    "\x02\x02\u0538\u0539\x03\x02\x02\x02\u0539\u053B\x05\u0118\x8D\x02\u053A" +
    "\u0537\x03\x02\x02\x02\u053A\u053B\x03\x02\x02\x02\u053B\u0563\x03\x02" +
    "\x02\x02\u053C\u053E\x05\u0146\xA4\x02\u053D\u053F\x05\xBA^\x02\u053E" +
    "\u053D\x03\x02\x02\x02\u053E\u053F\x03\x02\x02\x02\u053F\u0544\x03\x02" +
    "\x02\x02\u0540\u0542\x07\x13\x02\x02\u0541\u0540\x03\x02\x02\x02\u0541" +
    "\u0542\x03\x02\x02\x02\u0542\u0543\x03\x02\x02\x02\u0543\u0545\x05\u0118" +
    "\x8D\x02\u0544\u0541\x03\x02\x02\x02\u0544\u0545\x03\x02\x02\x02\u0545" +
    "\u0563\x03\x02\x02\x02\u0546\u0547\x07\xC8\x02\x02\u0547\u0548\x07\u0177" +
    "\x02\x02\u0548\u0549\x07\u0206\x02\x02\u0549\u054A\x05\u0112\x8A\x02\u054A" +
    "\u054B\x07\u0206\x02\x02\u054B\u0550\x05\u0114\x8B\x02\u054C\u054D\x07" +
    "\u020A\x02\x02\u054D\u054F\x05\u0114\x8B\x02\u054E\u054C\x03\x02\x02\x02" +
    "\u054F\u0552\x03\x02\x02\x02\u0550\u054E\x03\x02\x02\x02\u0550\u0551\x03" +
    "\x02\x02\x02\u0551\u0553\x03\x02\x02\x02\u0552\u0550\x03\x02\x02\x02\u0553" +
    "\u0554\x07\u0207\x02\x02\u0554\u0555\x07\u0207\x02\x02\u0555\u0563\x03" +
    "\x02\x02\x02\u0556\u0558\x07\xC8\x02\x02\u0557\u0556\x03\x02\x02\x02\u0557" +
    "\u0558\x03\x02\x02\x02\u0558\u0559\x03\x02\x02\x02\u0559\u055A\x07\u0206" +
    "\x02\x02\u055A\u055B\x05\xA0Q\x02\u055B\u055C\x07\u0207\x02\x02\u055C" +
    "\u0563\x03\x02\x02\x02\u055D\u055E\x07\u0197\x02\x02\u055E\u055F\x07\u0206" +
    "\x02\x02\u055F\u0560\x05\u0104\x83\x02\u0560\u0561\x07\u0207\x02\x02\u0561" +
    "\u0563\x03\x02\x02\x02\u0562\u0530\x03\x02\x02\x02\u0562\u053C\x03\x02" +
    "\x02\x02\u0562\u0546\x03\x02\x02\x02\u0562\u0557\x03\x02\x02\x02\u0562" +
    "\u055D\x03\x02\x02\x02\u0563\xB9\x03\x02\x02\x02\u0564\u0565\x07\x94\x02" +
    "\x02\u0565\u0566\x07\u0175\x02\x02\u0566\u0567\x07\x13\x02\x02\u0567\u0568" +
    "\x07\xFB\x02\x02\u0568\u0569\x05\xBC_\x02\u0569\xBB\x03\x02\x02\x02\u056A" +
    "\u056B\x05\u0104\x83\x02\u056B\xBD\x03\x02\x02\x02\u056C\u056D\x07\u0206" +
    "\x02\x02\u056D\u056E\x05\x98M\x02\u056E\u056F\x07\u0207\x02\x02\u056F" +
    "\u0570\x05\u0128\x95\x02\u0570\xBF\x03\x02\x02\x02\u0571\u0572\x07\u0177" +
    "\x02\x02\u0572\u0573\x07\u0206\x02\x02\u0573\u0574\x05\xC2b\x02\u0574" +
    "\u0575\x07\u0207\x02\x02\u0575\xC1\x03\x02\x02\x02\u0576\u0577\x05\xC4" +
    "c\x02\u0577\u0578\x07\u0206\x02\x02\u0578\u057D\x05\xC6d\x02\u0579\u057A" +
    "\x07\u020A\x02\x02\u057A\u057C\x05\xC6d\x02\u057B\u0579\x03\x02\x02\x02" +
    "\u057C\u057F\x03\x02\x02\x02\u057D\u057B\x03\x02\x02\x02\u057D\u057E\x03" +
    "\x02\x02\x02\u057E\u0580\x03\x02\x02\x02\u057F\u057D\x03\x02\x02\x02\u0580" +
    "\u0581\x07\u0207\x02\x02\u0581\xC3\x03\x02\x02\x02\u0582\u0583\t\x17\x02" +
    "\x02\u0583\xC5\x03\x02\x02\x02\u0584\u0585\x07\u0177\x02\x02\u0585\u0594" +
    "\x05\xDCo\x02\u0586\u0594\x05\xCAf\x02\u0587\u0594\x05\u011C\x8F\x02\u0588" +
    "\u0589\x07\u01C0\x02\x02\u0589\u058A\x07\u021A\x02\x02\u058A\u058B\x07" +
    "\u0177\x02\x02\u058B\u0594\x05\xDCo\x02\u058C\u058D\x07\u01F4\x02\x02" +
    "\u058D\u058E\x07\u021A\x02\x02\u058E\u0594\x05\xCAf\x02\u058F\u0590\x05" +
    "\xC8e\x02\u0590\u0591\x07\u021A\x02\x02\u0591\u0592\x05\u011C\x8F\x02" +
    "\u0592\u0594\x03\x02\x02\x02\u0593\u0584\x03\x02\x02\x02\u0593\u0586\x03" +
    "\x02\x02\x02\u0593\u0587\x03\x02\x02\x02\u0593\u0588\x03\x02\x02\x02\u0593" +
    "\u058C\x03\x02\x02\x02\u0593\u058F\x03\x02\x02\x02\u0594\xC7\x03\x02\x02" +
    "\x02\u0595\u0596\t\x18\x02\x02\u0596\xC9\x03\x02\x02\x02\u0597\u0598\x07" +
    "\u01C5\x02\x02\u0598\u0599\x07\u0206\x02\x02\u0599\u059A\x056\x1C\x02" +
    "\u059A\u059B\x07\u0207\x02\x02\u059B\xCB\x03\x02\x02\x02\u059C\u059D\x07" +
    "\xFF\x02\x02\u059D\u05A1\x05\u0106\x84\x02\u059E\u059F\x07\u019E\x02\x02" +
    "\u059F\u05A1\x058\x1D\x02\u05A0\u059C\x03\x02\x02\x02\u05A0\u059E\x03" +
    "\x02\x02\x02\u05A1\xCD\x03\x02\x02\x02\u05A2\u05A3\x07\u01B0\x02\x02\u05A3" +
    "\u05A4\x05\u0106\x84\x02\u05A4\xCF\x03\x02\x02\x02\u05A5\u05A6\x07\xA1" +
    "\x02\x02\u05A6\u05A7\x07$\x02\x02\u05A7\u05AC\x05\xD2j\x02\u05A8\u05A9" +
    "\x07\u020A\x02\x02\u05A9\u05AB\x05\xD2j\x02\u05AA\u05A8\x03\x02\x02\x02" +
    "\u05AB\u05AE\x03\x02\x02\x02\u05AC\u05AA\x03\x02\x02\x02\u05AC\u05AD\x03" +
    "\x02\x02\x02\u05AD\xD1\x03\x02\x02\x02\u05AE\u05AC\x03\x02\x02\x02\u05AF" +
    "\u05D7\x056\x1C\x02\u05B0\u05D7\x05\xD8m\x02\u05B1\u05B2\x07\u0206\x02" +
    "\x02\u05B2\u05D7\x07\u0207\x02\x02\u05B3\u05B4\x07\u0206\x02\x02\u05B4" +
    "\u05B9\x05\u0104\x83\x02\u05B5\u05B6\x07\u020A\x02\x02\u05B6\u05B8\x05" +
    "\u0104\x83\x02\u05B7\u05B5\x03\x02\x02\x02\u05B8\u05BB\x03\x02\x02\x02" +
    "\u05B9\u05B7\x03\x02\x02\x02\u05B9\u05BA\x03\x02\x02\x02\u05BA\u05BC\x03" +
    "\x02\x02\x02\u05BB\u05B9\x03\x02\x02\x02\u05BC\u05BD\x07\u0207\x02\x02" +
    "\u05BD\u05D7\x03\x02\x02\x02\u05BE\u05BF\x05\xD6l\x02\u05BF\u05C0\x07" +
    "\u0206\x02\x02\u05C0\u05C5\x05\u0104\x83\x02\u05C1\u05C2\x07\u020A\x02" +
    "\x02\u05C2\u05C4\x05\u0104\x83\x02\u05C3\u05C1\x03\x02\x02\x02\u05C4\u05C7" +
    "\x03\x02\x02\x02\u05C5\u05C3\x03\x02\x02\x02\u05C5\u05C6\x03\x02\x02\x02" +
    "\u05C6\u05C8\x03\x02\x02\x02\u05C7\u05C5\x03\x02\x02\x02\u05C8\u05C9\x07" +
    "\u0207\x02\x02\u05C9\u05D7\x03\x02\x02\x02\u05CA\u05CB\x05\xD4k\x02\u05CB" +
    "\u05CC\x07\u0206\x02\x02\u05CC\u05D1\x05\xD2j\x02\u05CD\u05CE\x07\u020A" +
    "\x02\x02\u05CE\u05D0\x05\xD2j\x02\u05CF\u05CD\x03\x02\x02\x02\u05D0\u05D3" +
    "\x03\x02\x02\x02\u05D1\u05CF\x03\x02\x02\x02\u05D1\u05D2\x03\x02\x02\x02" +
    "\u05D2\u05D4\x03\x02\x02\x02\u05D3\u05D1\x03\x02\x02\x02\u05D4\u05D5\x07" +
    "\u0207\x02\x02\u05D5\u05D7\x03\x02\x02\x02\u05D6\u05AF\x03\x02\x02\x02" +
    "\u05D6\u05B0\x03\x02\x02\x02\u05D6\u05B1\x03\x02\x02\x02\u05D6\u05B3\x03" +
    "\x02\x02\x02\u05D6\u05BE\x03\x02\x02\x02\u05D6\u05CA\x03\x02\x02\x02\u05D7" +
    "\xD3\x03\x02\x02\x02\u05D8\u05D9\x07\xA2\x02\x02\u05D9\u05DA\x07\u01EF" +
    "\x02\x02\u05DA\xD5\x03\x02\x02\x02\u05DB\u05DC\t\x19\x02\x02\u05DC\xD7" +
    "\x03\x02\x02\x02\u05DD\u05DE\x05\xDAn\x02\u05DE\u05DF\x07\u0206\x02\x02" +
    "\u05DF\u05E0\x05\xDCo\x02\u05E0\u05E1\x07\u020A\x02\x02\u05E1\u05E2\x05" +
    "\u011C\x8F\x02";
FlinkSqlParser._serializedATNSegment3 = "\u05E2\u05E3\x07\u0207\x02\x02\u05E3\xD9\x03\x02\x02\x02\u05E4\u05E5\t" +
    "\x1A\x02\x02\u05E5\xDB\x03\x02\x02\x02\u05E6\u05E7\x05\u014A\xA6\x02\u05E7" +
    "\xDD\x03\x02\x02\x02\u05E8\u05E9\x07\xA5\x02\x02\u05E9\u05EA\x05\u0106" +
    "\x84\x02\u05EA\xDF\x03\x02\x02\x02\u05EB\u05EC\x07\u01B2\x02\x02\u05EC" +
    "\u05F1\x05\xE2r\x02\u05ED\u05EE\x07\u020A\x02\x02\u05EE\u05F0\x05\xE2" +
    "r\x02\u05EF\u05ED\x03\x02\x02\x02\u05F0\u05F3\x03\x02\x02\x02\u05F1\u05EF" +
    "\x03\x02\x02\x02\u05F1\u05F2\x03\x02\x02\x02\u05F2\xE1\x03\x02\x02\x02" +
    "\u05F3\u05F1\x03\x02\x02\x02\u05F4\u05F5\x05\u012A\x96\x02\u05F5\u05F6" +
    "\x07\x13\x02\x02\u05F6\u05F7\x05\xE4s\x02\u05F7\xE3\x03\x02\x02\x02\u05F8" +
    "\u05FA\x05\u012A\x96\x02\u05F9\u05F8\x03\x02\x02\x02\u05F9\u05FA\x03\x02" +
    "\x02\x02\u05FA\u05FB\x03\x02\x02\x02\u05FB\u05FD\x07\u0206\x02\x02\u05FC" +
    "\u05FE\x05\xEEx\x02\u05FD\u05FC\x03\x02\x02\x02\u05FD\u05FE\x03\x02\x02" +
    "\x02\u05FE\u0600\x03\x02\x02\x02\u05FF\u0601\x05\xE8u\x02\u0600\u05FF" +
    "\x03\x02\x02\x02\u0600\u0601\x03\x02\x02\x02\u0601\u0603\x03\x02\x02\x02" +
    "\u0602\u0604\x05\xFE\x80\x02\u0603\u0602\x03\x02\x02\x02\u0603\u0604\x03" +
    "\x02\x02\x02\u0604\u0605\x03\x02\x02\x02\u0605\u0606\x07\u0207\x02\x02" +
    "\u0606\xE5\x03\x02\x02\x02\u0607\u0608\x07\xD7\x02\x02\u0608\u060A\x07" +
    "\u0206\x02\x02\u0609\u060B\x05\xEEx\x02\u060A\u0609\x03\x02\x02\x02\u060A" +
    "\u060B\x03\x02\x02\x02\u060B\u060D\x03\x02\x02\x02\u060C\u060E\x05\xE8" +
    "u\x02\u060D\u060C\x03\x02\x02\x02\u060D\u060E\x03\x02\x02\x02\u060E\u0610" +
    "\x03\x02\x02\x02\u060F\u0611\x05\xF2z\x02\u0610\u060F\x03\x02\x02\x02" +
    "\u0610\u0611\x03\x02\x02\x02\u0611\u0613\x03\x02\x02\x02\u0612\u0614\x05" +
    "\xF8}\x02\u0613\u0612\x03\x02\x02\x02\u0613\u0614\x03\x02\x02\x02\u0614" +
    "\u0616\x03\x02\x02\x02\u0615\u0617\x05\xFA~\x02\u0616\u0615\x03\x02\x02" +
    "\x02\u0616\u0617\x03\x02\x02\x02\u0617\u0619\x03\x02\x02\x02\u0618\u061A" +
    "\x05\xF4{\x02\u0619\u0618\x03\x02\x02\x02\u0619\u061A\x03\x02\x02\x02" +
    "\u061A\u061B\x03\x02\x02\x02\u061B\u061C\x05\xFC\x7F\x02\u061C\u0621\x07" +
    "\u0207\x02\x02\u061D\u061F\x07\x13\x02\x02\u061E\u061D\x03\x02\x02\x02" +
    "\u061E\u061F\x03\x02\x02\x02\u061F\u0620\x03\x02\x02\x02\u0620\u0622\x05" +
    "\u0132\x9A\x02\u0621\u061E\x03\x02\x02\x02\u0621\u0622\x03\x02\x02\x02" +
    "\u0622\xE7\x03\x02\x02\x02\u0623\u0624\x07\u0104\x02\x02\u0624\u0625\x07" +
    "$\x02\x02\u0625\u062A\x05\xEAv\x02\u0626\u0627\x07\u020A\x02\x02\u0627" +
    "\u0629\x05\xEAv\x02\u0628\u0626\x03\x02\x02\x02\u0629\u062C\x03\x02\x02" +
    "\x02\u062A\u0628\x03\x02\x02\x02\u062A\u062B\x03\x02\x02\x02\u062B\xE9" +
    "\x03\x02\x02\x02\u062C\u062A\x03\x02\x02\x02\u062D\u062F\x056\x1C\x02" +
    "\u062E\u0630\t\x1B\x02\x02\u062F\u062E\x03\x02\x02\x02\u062F\u0630\x03" +
    "\x02\x02\x02\u0630\u0633\x03\x02\x02\x02\u0631\u0632\x07\u01DE\x02\x02" +
    "\u0632\u0634\t\x1C\x02\x02\u0633\u0631\x03\x02\x02\x02\u0633\u0634\x03" +
    "\x02\x02\x02\u0634\xEB\x03\x02\x02\x02\u0635\u0638\x07\xCE\x02\x02\u0636" +
    "\u0639\x07\x07\x02\x02\u0637\u0639\x05\u0104\x83\x02\u0638\u0636\x03\x02" +
    "\x02\x02\u0638\u0637\x03\x02\x02\x02\u0639\xED\x03\x02\x02\x02\u063A\u063B" +
    "\x07\u010E\x02\x02\u063B\u063C\x07$\x02\x02\u063C\u0641\x056\x1C\x02\u063D" +
    "\u063E\x07\u020A\x02\x02\u063E\u0640\x056\x1C\x02\u063F\u063D\x03\x02" +
    "\x02\x02\u0640\u0643\x03\x02\x02\x02\u0641\u063F\x03\x02\x02\x02\u0641" +
    "\u0642\x03\x02\x02\x02\u0642\xEF\x03\x02\x02\x02\u0643\u0641\x03\x02\x02" +
    "\x02\u0644\u0655\x07\u0211\x02\x02\u0645\u0655\x07\u0214\x02\x02\u0646" +
    "\u0655\x07\u0219\x02\x02\u0647\u0648\x07\u0208\x02\x02\u0648\u0649\x07" +
    "\u021C\x02\x02\u0649\u064A\x07\u020A\x02\x02\u064A\u064B\x07\u021C\x02" +
    "\x02\u064B\u0655\x07\u0209\x02\x02\u064C\u064D\x07\u0208\x02\x02\u064D" +
    "\u064E\x07\u021C\x02\x02\u064E\u064F\x07\u020A\x02\x02\u064F\u0655\x07" +
    "\u0209\x02\x02\u0650\u0651\x07\u0208\x02\x02\u0651\u0652\x07\u020A\x02" +
    "\x02\u0652\u0653\x07\u021C\x02\x02\u0653\u0655\x07\u0209\x02\x02\u0654" +
    "\u0644\x03\x02\x02\x02\u0654\u0645\x03\x02\x02\x02\u0654\u0646\x03\x02" +
    "\x02\x02\u0654\u0647\x03\x02\x02\x02\u0654\u064C\x03\x02\x02\x02\u0654" +
    "\u0650\x03\x02\x02\x02\u0655\xF1\x03\x02\x02\x02\u0656\u0657\x07\xD9\x02" +
    "\x02\u0657\u065C\x05\xAEX\x02\u0658\u0659\x07\u020A\x02\x02\u0659\u065B" +
    "\x05\xAEX\x02\u065A\u0658\x03\x02\x02\x02\u065B\u065E\x03\x02\x02\x02" +
    "\u065C\u065A\x03\x02\x02\x02\u065C\u065D\x03\x02\x02\x02\u065D\xF3\x03" +
    "\x02\x02\x02\u065E\u065C\x03\x02\x02\x02\u065F\u0660\x07\u0111\x02\x02" +
    "\u0660\u0662\x07\u0206\x02\x02\u0661\u0663\x05\xF6|\x02\u0662\u0661\x03" +
    "\x02\x02\x02\u0663\u0664\x03\x02\x02\x02\u0664\u0662\x03\x02\x02\x02\u0664" +
    "\u0665\x03\x02\x02\x02\u0665\u0666\x03\x02\x02\x02\u0666\u0668\x07\u0207" +
    "\x02\x02\u0667\u0669\x05\u0102\x82\x02\u0668\u0667\x03\x02\x02\x02\u0668" +
    "\u0669\x03\x02\x02\x02\u0669\xF5\x03\x02\x02\x02\u066A\u066C\x05\u0134" +
    "\x9B\x02\u066B\u066D\x05\xF0y\x02\u066C\u066B\x03\x02\x02\x02\u066C\u066D" +
    "\x03\x02\x02\x02\u066D\xF7\x03\x02\x02\x02\u066E\u066F\x07\x07\x02\x02" +
    "\u066F\u0670\x07\u0144\x02\x02\u0670\u0671\x07\u0112\x02\x02\u0671\u0677" +
    "\x07\xD4\x02\x02\u0672\u0673\x07\u0100\x02\x02\u0673\u0674\x07\u0143\x02" +
    "\x02\u0674\u0675\x07\u0112\x02\x02\u0675\u0677\x07\xD4\x02\x02\u0676\u066E" +
    "\x03\x02\x02\x02\u0676\u0672\x03\x02\x02\x02\u0677\xF9\x03\x02\x02\x02" +
    "\u0678\u0679\x07\u01B8\x02\x02\u0679\u067A\x07\xD4\x02\x02\u067A\u067B" +
    "\x07\u0159\x02\x02\u067B\u067C\x07\u01E0\x02\x02\u067C\u067D\x07\u01D5" +
    "\x02\x02\u067D\u0691\x07\u0143\x02\x02\u067E\u067F\x07\u01B8\x02\x02\u067F" +
    "\u0680\x07\xD4\x02\x02\u0680\u0681\x07\u0159\x02\x02\u0681\u0682\x07\u0186" +
    "\x02\x02\u0682\u0683\x07\xEF\x02\x02\u0683\u0691\x07\u0143\x02\x02\u0684" +
    "\u0685\x07\u01B8\x02\x02\u0685\u0686\x07\xD4\x02\x02\u0686\u0687\x07\u0159" +
    "\x02\x02\u0687\u0688\x07\u0186\x02\x02\u0688\u0689\x07\u01D5\x02\x02\u0689" +
    "\u0691\x05\u0134\x9B\x02\u068A\u068B\x07\u01B8\x02\x02\u068B\u068C\x07" +
    "\xD4\x02\x02\u068C\u068D\x07\u0159\x02\x02\u068D\u068E\x07\u0186\x02\x02" +
    "\u068E\u068F\x07\u01CB\x02\x02\u068F\u0691\x05\u0134\x9B\x02\u0690\u0678" +
    "\x03\x02\x02\x02\u0690\u067E\x03\x02\x02\x02\u0690\u0684\x03\x02\x02\x02" +
    "\u0690\u068A\x03\x02\x02\x02\u0691\xFB\x03\x02\x02\x02\u0692\u0693\x07" +
    "k\x02\x02\u0693\u0698\x05\xAEX\x02\u0694\u0695\x07\u020A\x02\x02\u0695" +
    "\u0697\x05\xAEX\x02\u0696\u0694\x03\x02\x02\x02\u0697\u069A\x03\x02\x02" +
    "\x02\u0698\u0696\x03\x02\x02\x02\u0698\u0699\x03\x02\x02\x02\u0699\xFD" +
    "\x03\x02\x02\x02\u069A\u0698\x03\x02\x02\x02\u069B\u069C\x07\u0126\x02" +
    "\x02\u069C\u069D\x07\x1D\x02\x02\u069D\u069E\x05\u011C\x8F\x02\u069E\u069F" +
    "\x05\u0100\x81\x02\u069F\u06A5\x03\x02\x02\x02\u06A0\u06A1\x07\u0144\x02" +
    "\x02\u06A1\u06A2\x07\x1D\x02\x02\u06A2\u06A3\x07\u021C\x02\x02\u06A3\u06A5" +
    "\x05\u0100\x81\x02\u06A4\u069B\x03\x02\x02\x02\u06A4\u06A0\x03\x02\x02" +
    "\x02\u06A5\xFF\x03\x02\x02\x02\u06A6\u06A7\x07\u01E2\x02\x02\u06A7\u06A8" +
    "\x07\f\x02\x02\u06A8\u06A9\x07N\x02\x02\u06A9\u06AA\x07\u0143\x02\x02" +
    "\u06AA\u0101\x03\x02\x02\x02\u06AB\u06AC\x07\u01B4\x02\x02\u06AC\u06AD" +
    "\x05\u011C\x8F\x02\u06AD\u0103\x03\x02\x02\x02\u06AE\u06AF\x05\u0106\x84" +
    "\x02\u06AF\u0105\x03\x02\x02\x02\u06B0\u06B1\b\x84\x01\x02\u06B1\u06B2" +
    "\x07\xF3\x02\x02\u06B2\u06BD\x05\u0106\x84\b\u06B3\u06B4\x07\x87\x02\x02" +
    "\u06B4\u06B5\x07\u0206\x02\x02\u06B5\u06B6\x05\xA0Q\x02\u06B6\u06B7\x07" +
    "\u0207\x02\x02\u06B7\u06BD\x03\x02\x02\x02\u06B8\u06BA\x05\u010C\x87\x02" +
    "\u06B9\u06BB\x05\u0108\x85\x02\u06BA\u06B9\x03\x02\x02\x02\u06BA\u06BB" +
    "\x03\x02\x02\x02\u06BB\u06BD\x03\x02\x02\x02\u06BC\u06B0\x03\x02\x02\x02" +
    "\u06BC\u06B3\x03\x02\x02\x02\u06BC\u06B8\x03\x02\x02\x02\u06BD\u06CC\x03" +
    "\x02\x02\x02\u06BE\u06BF\f\x05\x02\x02\u06BF\u06C0\x07\f\x02\x02\u06C0" +
    "\u06CB\x05\u0106\x84\x06\u06C1\u06C2\f\x04\x02\x02\u06C2\u06C3\x07\u0103" +
    "\x02\x02\u06C3\u06CB\x05\u0106\x84\x05\u06C4\u06C5\f\x03\x02\x02\u06C5" +
    "\u06C7\x07\xBA\x02\x02\u06C6\u06C8\x07\xF3\x02\x02\u06C7\u06C6\x03\x02" +
    "\x02\x02\u06C7\u06C8\x03\x02\x02\x02\u06C8\u06C9\x03\x02\x02\x02\u06C9" +
    "\u06CB\t\x1D\x02\x02\u06CA\u06BE\x03\x02\x02\x02\u06CA\u06C1\x03\x02\x02" +
    "\x02\u06CA\u06C4\x03\x02\x02\x02\u06CB\u06CE\x03\x02\x02\x02\u06CC\u06CA" +
    "\x03\x02\x02\x02\u06CC\u06CD\x03\x02\x02\x02\u06CD\u0107\x03\x02\x02\x02" +
    "\u06CE\u06CC\x03\x02\x02\x02\u06CF\u06D1\x07\xF3\x02\x02\u06D0\u06CF\x03" +
    "\x02\x02\x02\u06D0\u06D1\x03\x02\x02\x02\u06D1\u06D2\x03\x02\x02\x02\u06D2" +
    "\u06D4\x07\x1D\x02\x02\u06D3\u06D5\t\x1E\x02\x02\u06D4\u06D3\x03\x02\x02" +
    "\x02\u06D4\u06D5\x03\x02\x02\x02\u06D5\u06D6\x03\x02\x02\x02\u06D6\u06D7" +
    "\x05\u010C\x87\x02\u06D7\u06D8\x07\f\x02\x02\u06D8\u06D9\x05\u010C\x87" +
    "\x02\u06D9\u0713\x03\x02\x02\x02\u06DA\u06DC\x07\xF3\x02\x02\u06DB\u06DA" +
    "\x03\x02\x02\x02\u06DB\u06DC\x03\x02\x02\x02\u06DC\u06DD\x03\x02\x02\x02" +
    "\u06DD\u06DE\x07\xAC\x02\x02\u06DE\u06DF\x07\u0206\x02\x02\u06DF\u06E4" +
    "\x05\u0104\x83\x02\u06E0\u06E1\x07\u020A\x02\x02\u06E1\u06E3\x05\u0104" +
    "\x83\x02\u06E2\u06E0\x03\x02\x02\x02\u06E3\u06E6\x03\x02\x02\x02\u06E4" +
    "\u06E2\x03\x02\x02\x02\u06E4\u06E5\x03\x02\x02\x02\u06E5\u06E7\x03\x02" +
    "\x02\x02\u06E6\u06E4\x03\x02\x02\x02\u06E7\u06E8\x07\u0207\x02\x02\u06E8" +
    "\u0713\x03\x02\x02\x02\u06E9\u06EB\x07\xF3\x02\x02\u06EA\u06E9\x03\x02" +
    "\x02\x02\u06EA\u06EB\x03\x02\x02\x02\u06EB\u06EC\x03\x02\x02\x02\u06EC" +
    "\u06ED\x07\xAC\x02\x02\u06ED\u06EE\x07\u0206\x02\x02\u06EE\u06EF\x05\xA0" +
    "Q\x02\u06EF\u06F0\x07\u0207\x02\x02\u06F0\u0713\x03\x02\x02\x02\u06F1" +
    "\u06F2\x07\x87\x02\x02\u06F2\u06F3\x07\u0206\x02\x02\u06F3\u06F4\x05\xA0" +
    "Q\x02\u06F4\u06F5\x07\u0207\x02\x02\u06F5\u0713\x03\x02\x02\x02\u06F6" +
    "\u06F8\x07\xF3\x02\x02\u06F7\u06F6\x03\x02\x02\x02\u06F7\u06F8\x03\x02" +
    "\x02\x02\u06F8\u06F9\x03\x02\x02\x02\u06F9\u06FA\x07\u0140\x02\x02\u06FA" +
    "\u0713\x05\u010C\x87\x02\u06FB\u0713\x05\u010A\x86\x02\u06FC\u06FE\x07" +
    "\xBA\x02\x02\u06FD\u06FF\x07\xF3\x02\x02\u06FE\u06FD\x03\x02\x02\x02\u06FE" +
    "\u06FF\x03\x02\x02\x02\u06FF\u0700\x03\x02\x02\x02\u0700\u0713\t\x1D\x02" +
    "\x02\u0701\u0703\x07\xBA\x02\x02\u0702\u0704\x07\xF3\x02\x02\u0703\u0702" +
    "\x03\x02\x02\x02\u0703\u0704\x03\x02\x02\x02\u0704\u0705\x03\x02\x02\x02" +
    "\u0705\u0706\x07s\x02\x02\u0706\u0707\x07\x99\x02\x02\u0707\u0713\x05" +
    "\u010C\x87\x02\u0708\u070A\x07\xF3\x02\x02\u0709\u0708\x03\x02\x02\x02" +
    "\u0709\u070A\x03\x02\x02\x02\u070A\u070B\x03\x02\x02\x02\u070B\u070C\x07" +
    "\u0158\x02\x02\u070C\u070D\x07\u0186\x02\x02\u070D\u0710\x05\u010C\x87" +
    "\x02\u070E\u070F\x07\x81\x02\x02\u070F\u0711\x05\u0168\xB5\x02\u0710\u070E" +
    "\x03\x02\x02\x02\u0710\u0711\x03\x02\x02\x02\u0711\u0713\x03\x02\x02\x02" +
    "\u0712\u06D0\x03\x02\x02\x02\u0712\u06DB\x03\x02\x02\x02\u0712\u06EA\x03" +
    "\x02\x02\x02\u0712\u06F1\x03\x02\x02\x02\u0712\u06F7\x03\x02\x02\x02\u0712" +
    "\u06FB\x03\x02\x02\x02\u0712\u06FC\x03\x02\x02\x02\u0712\u0701\x03\x02" +
    "\x02\x02\u0712\u0709\x03\x02\x02\x02\u0713\u0109\x03\x02\x02\x02\u0714" +
    "\u0716\x07\xF3\x02\x02\u0715\u0714\x03\x02\x02\x02\u0715\u0716\x03\x02" +
    "\x02\x02\u0716\u0717\x03\x02\x02\x02\u0717\u0718\x07\xCC\x02\x02\u0718" +
    "\u0726\t\x1F\x02\x02\u0719\u071A\x07\u0206\x02\x02\u071A\u0727\x07\u0207" +
    "\x02\x02\u071B\u071C\x07\u0206\x02\x02\u071C\u0721\x05\u0104\x83\x02\u071D" +
    "\u071E\x07\u020A\x02\x02\u071E\u0720\x05\u0104\x83\x02\u071F\u071D\x03" +
    "\x02\x02\x02\u0720\u0723\x03\x02\x02\x02\u0721\u071F\x03\x02\x02\x02\u0721" +
    "\u0722\x03\x02\x02\x02\u0722\u0724\x03\x02\x02\x02\u0723\u0721\x03\x02" +
    "\x02\x02\u0724\u0725\x07\u0207\x02\x02\u0725\u0727\x03\x02\x02\x02\u0726" +
    "\u0719\x03\x02\x02\x02\u0726\u071B\x03\x02\x02\x02\u0727\u0732\x03\x02" +
    "\x02\x02\u0728\u072A\x07\xF3\x02\x02\u0729\u0728\x03\x02\x02\x02\u0729" +
    "\u072A\x03\x02\x02\x02\u072A\u072B\x03\x02\x02\x02\u072B\u072C\x07\xCC" +
    "\x02\x02\u072C\u072F\x05\u010C\x87\x02\u072D\u072E\x07\x81\x02\x02\u072E" +
    "\u0730\x05\u0168\xB5\x02\u072F\u072D\x03\x02\x02\x02\u072F\u0730\x03\x02" +
    "\x02\x02\u0730\u0732\x03\x02\x02\x02\u0731\u0715\x03\x02\x02\x02\u0731" +
    "\u0729\x03\x02\x02\x02\u0732\u010B\x03\x02\x02\x02\u0733\u0734\b\x87\x01" +
    "\x02\u0734\u0738\x05\u010E\x88\x02\u0735\u0736\t \x02\x02\u0736\u0738" +
    "\x05\u010C\x87\t\u0737\u0733\x03\x02\x02\x02\u0737\u0735\x03\x02\x02\x02" +
    "\u0738\u074E\x03\x02\x02\x02\u0739\u073A\f\b\x02\x02\u073A\u073B\t!\x02" +
    "\x02\u073B\u074D\x05\u010C\x87\t\u073C\u073D\f\x07\x02\x02\u073D\u073E" +
    "\t\"\x02\x02\u073E\u074D\x05\u010C\x87\b\u073F\u0740\f\x06\x02\x02\u0740" +
    "\u0741\x07\u0201\x02\x02\u0741\u074D\x05\u010C\x87\x07\u0742\u0743\f\x05" +
    "\x02\x02\u0743\u0744\x07\u0202\x02\x02\u0744\u074D\x05\u010C\x87\x06\u0745" +
    "\u0746\f\x04\x02\x02\u0746\u0747\x07\u0200\x02\x02\u0747\u074D\x05\u010C" +
    "\x87\x05\u0748\u0749\f\x03\x02\x02\u0749\u074A\x05\u015C\xAF\x02\u074A" +
    "\u074B\x05\u010C\x87\x04\u074B\u074D\x03\x02\x02\x02\u074C\u0739\x03\x02" +
    "\x02\x02\u074C\u073C\x03\x02\x02\x02\u074C\u073F\x03\x02\x02\x02\u074C" +
    "\u0742\x03\x02\x02\x02\u074C\u0745\x03\x02\x02\x02\u074C\u0748\x03\x02" +
    "\x02\x02\u074D\u0750\x03\x02\x02\x02\u074E\u074C\x03\x02\x02\x02\u074E" +
    "\u074F\x03\x02\x02\x02\u074F\u010D\x03\x02\x02\x02\u0750\u074E\x03\x02" +
    "\x02\x02\u0751\u0752\b\x88\x01\x02\u0752\u0754\x07*\x02\x02\u0753\u0755" +
    "\x05\u0138\x9D\x02\u0754\u0753\x03\x02\x02\x02\u0755\u0756\x03\x02\x02" +
    "\x02\u0756\u0754\x03\x02\x02\x02\u0756\u0757\x03\x02\x02\x02\u0757\u075A" +
    "\x03\x02\x02\x02\u0758\u0759\x07z\x02\x02\u0759\u075B\x05\u0104\x83\x02" +
    "\u075A\u0758\x03\x02\x02\x02\u075A\u075B\x03\x02\x02\x02\u075B\u075C\x03" +
    "\x02\x02\x02\u075C\u075D\x07|\x02\x02\u075D\u07AE\x03\x02\x02\x02\u075E" +
    "\u075F\x07*\x02\x02\u075F\u0761\x05\u0104\x83\x02\u0760\u0762\x05\u0138" +
    "\x9D\x02\u0761\u0760\x03\x02\x02\x02\u0762\u0763\x03\x02\x02\x02\u0763" +
    "\u0761\x03\x02\x02\x02\u0763\u0764\x03\x02\x02\x02\u0764\u0767\x03\x02" +
    "\x02\x02\u0765\u0766\x07z\x02\x02\u0766\u0768\x05\u0104\x83\x02\u0767" +
    "\u0765\x03\x02\x02\x02\u0767\u0768\x03\x02\x02\x02\u0768\u0769\x03\x02" +
    "\x02\x02\u0769\u076A\x07|\x02\x02\u076A\u07AE\x03\x02\x02\x02\u076B\u076C" +
    "\x07+\x02\x02\u076C\u076D\x07\u0206\x02\x02\u076D\u076E\x05\u0104\x83" +
    "\x02\u076E\u076F\x07\x13\x02\x02\u076F\u0770\x05:\x1E\x02\u0770\u0771" +
    "\x07\u0207\x02\x02\u0771\u07AE\x03\x02\x02\x02\u0772\u0773\x07\u01CB\x02" +
    "\x02\u0773\u0774\x07\u0206\x02\x02\u0774\u0777\x05\u0104\x83\x02\u0775" +
    "\u0776\x07\u01CF\x02\x02\u0776\u0778\x07\u01DE\x02\x02\u0777\u0775\x03" +
    "\x02\x02\x02\u0777\u0778\x03\x02\x02\x02\u0778\u0779\x03\x02\x02\x02\u0779" +
    "\u077A\x07\u0207\x02\x02\u077A\u07AE\x03\x02\x02\x02\u077B\u077C\x07\u01D5" +
    "\x02\x02\u077C\u077D\x07\u0206\x02\x02\u077D\u0780\x05\u0104\x83\x02\u077E" +
    "\u077F\x07\u01CF\x02\x02\u077F\u0781\x07\u01DE\x02\x02\u0780\u077E\x03" +
    "\x02\x02\x02\u0780\u0781\x03\x02\x02\x02\u0781\u0782\x03\x02\x02\x02\u0782" +
    "\u0783\x07\u0207\x02\x02\u0783\u07AE\x03\x02\x02\x02\u0784\u0785\x07\u011B" +
    "\x02\x02\u0785\u0786\x07\u0206\x02\x02\u0786\u0787\x05\u010C\x87\x02\u0787" +
    "\u0788\x07\xAC\x02\x02\u0788\u0789\x05\u010C\x87\x02\u0789\u078A\x07\u0207" +
    "\x02\x02\u078A\u07AE\x03\x02\x02\x02\u078B\u07AE\x05\u0164\xB3\x02\u078C" +
    "\u07AE\x07\u0211\x02\x02\u078D\u078E\x05\u014A\xA6\x02\u078E\u078F\x07" +
    "\u0203\x02\x02\u078F\u0790\x07\u0211\x02\x02\u0790\u07AE\x03\x02\x02\x02" +
    "\u0791\u0792\x07\u0206\x02\x02\u0792\u0793\x05\xA0Q\x02\u0793\u0794\x07" +
    "\u0207\x02\x02\u0794\u07AE\x03\x02\x02\x02\u0795\u0796\x05\u0112\x8A\x02" +
    "\u0796\u07A2\x07\u0206\x02\x02\u0797\u0799\x05\u016E\xB8\x02\u0798\u0797" +
    "\x03\x02\x02\x02\u0798\u0799\x03\x02\x02\x02\u0799\u079A\x03\x02\x02\x02" +
    "\u079A\u079F\x05\u0114\x8B\x02\u079B\u079C\x07\u020A\x02\x02\u079C\u079E" +
    "\x05\u0114\x8B\x02\u079D\u079B\x03\x02\x02\x02\u079E\u07A1\x03\x02\x02" +
    "\x02\u079F\u079D\x03\x02\x02\x02\u079F\u07A0\x03\x02\x02\x02\u07A0\u07A3" +
    "\x03\x02\x02\x02\u07A1\u079F\x03\x02\x02\x02\u07A2\u0798\x03\x02\x02\x02" +
    "\u07A2\u07A3\x03\x02\x02\x02\u07A3\u07A4\x03\x02\x02\x02\u07A4\u07A5\x07" +
    "\u0207\x02\x02\u07A5\u07AE\x03\x02\x02\x02\u07A6\u07AE\x05\u0132\x9A\x02" +
    "\u07A7\u07AE\x05\u0116\x8C\x02\u07A8\u07A9\x07\u0206\x02\x02\u07A9\u07AA" +
    "\x05\u0104\x83\x02\u07AA\u07AB\x07\u0207\x02\x02\u07AB\u07AE\x03\x02\x02" +
    "\x02\u07AC\u07AE\x07W\x02\x02\u07AD\u0751\x03\x02\x02\x02\u07AD\u075E" +
    "\x03\x02\x02\x02\u07AD\u076B\x03\x02\x02\x02\u07AD\u0772\x03\x02\x02\x02" +
    "\u07AD\u077B\x03\x02\x02\x02\u07AD\u0784\x03\x02\x02\x02\u07AD\u078B\x03" +
    "\x02\x02\x02\u07AD\u078C\x03\x02\x02\x02\u07AD\u078D\x03\x02\x02\x02\u07AD" +
    "\u0791\x03\x02\x02\x02\u07AD\u0795\x03\x02\x02\x02\u07AD\u07A6\x03\x02" +
    "\x02\x02\u07AD\u07A7\x03\x02\x02\x02\u07AD\u07A8\x03\x02\x02\x02\u07AD" +
    "\u07AC\x03\x02\x02\x02\u07AE\u07B6\x03\x02\x02\x02\u07AF\u07B0\f\x07\x02" +
    "\x02\u07B0\u07B1\x07\u0204\x02\x02\u07B1\u07B2\x05\u010C\x87\x02\u07B2" +
    "\u07B3\x07\u0205\x02\x02\u07B3\u07B5\x03\x02\x02\x02\u07B4\u07AF\x03\x02" +
    "\x02\x02\u07B5\u07B8\x03\x02\x02\x02\u07B6\u07B4\x03\x02\x02\x02\u07B6" +
    "\u07B7\x03\x02\x02\x02\u07B7\u010F\x03\x02\x02\x02\u07B8\u07B6\x03\x02" +
    "\x02\x02\u07B9\u07BA\x05\u014A\xA6\x02\u07BA\u0111\x03\x02\x02\x02\u07BB" +
    "\u07BE\x05\u0176\xBC\x02\u07BC\u07BE\x05\u014A\xA6\x02\u07BD\u07BB\x03" +
    "\x02\x02\x02\u07BD\u07BC\x03\x02\x02\x02\u07BE\u0113\x03\x02\x02\x02\u07BF" +
    "\u07C4\x05\u0174\xBB\x02\u07C0\u07C4\x05\u0172\xBA\x02\u07C1\u07C4\x05" +
    "\u0170\xB9\x02\u07C2\u07C4\x05\u0104\x83\x02\u07C3\u07BF\x03\x02\x02\x02" +
    "\u07C3\u07C0\x03\x02\x02\x02\u07C3\u07C1\x03\x02\x02\x02\u07C3\u07C2\x03" +
    "\x02\x02\x02\u07C4\u0115\x03\x02\x02\x02\u07C5\u07C6\x05\u014A\xA6\x02" +
    "\u07C6\u0117\x03\x02\x02\x02\u07C7\u07C8\x05\u0132\x9A\x02\u07C8\u0119" +
    "\x03\x02\x02\x02\u07C9\u07CC\x05\u0132\x9A\x02\u07CA\u07CC\x05\u0116\x8C" +
    "\x02\u07CB\u07C9\x03\x02\x02\x02\u07CB\u07CA\x03\x02\x02\x02\u07CC\u011B" +
    "\x03\x02\x02\x02\u07CD\u07D0\x07\xB8\x02\x02\u07CE\u07D1\x05\u011E\x90" +
    "\x02\u07CF\u07D1\x05\u0122\x92\x02\u07D0\u07CE\x03\x02\x02\x02\u07D0\u07CF" +
    "\x03\x02\x02\x02\u07D0\u07D1\x03\x02\x02\x02\u07D1\u011D\x03\x02\x02\x02" +
    "\u07D2\u07D4\x05\u0120\x91\x02\u07D3\u07D5\x05\u0124\x93\x02\u07D4\u07D3" +
    "\x03\x02\x02\x02\u07D4\u07D5\x03\x02\x02\x02\u07D5\u011F\x03\x02\x02\x02" +
    "\u07D6\u07D7\x05\u0126\x94\x02\u07D7\u07D8\x05\u0172\xBA\x02\u07D8\u07DA" +
    "\x03\x02\x02\x02\u07D9\u07D6\x03\x02\x02\x02\u07DA\u07DB\x03\x02\x02\x02" +
    "\u07DB\u07D9\x03\x02\x02\x02\u07DB\u07DC\x03\x02\x02\x02\u07DC\u0121\x03" +
    "\x02\x02\x02\u07DD\u07E0\x05\u0124\x93\x02\u07DE\u07E1\x05\u0120\x91\x02" +
    "\u07DF\u07E1\x05\u0124\x93\x02\u07E0\u07DE\x03\x02\x02\x02\u07E0\u07DF" +
    "\x03\x02\x02\x02\u07E0\u07E1\x03\x02\x02\x02\u07E1\u0123\x03\x02\x02\x02" +
    "\u07E2\u07E3\x05\u0126\x94\x02\u07E3\u07E4\x05\u0172\xBA\x02\u07E4\u07E5" +
    "\x07\u0186\x02\x02\u07E5\u07E6\x05\u0172\xBA\x02\u07E6\u0125\x03\x02\x02" +
    "\x02\u07E7\u07E9\t#\x02\x02\u07E8\u07E7\x03\x02\x02\x02\u07E8\u07E9\x03" +
    "\x02\x02\x02\u07E9\u07EA\x03\x02\x02\x02\u07EA\u07ED\t$\x02\x02\u07EB" +
    "\u07ED\x07\u021B\x02\x02\u07EC\u07E8\x03\x02\x02\x02\u07EC\u07EB\x03\x02" +
    "\x02\x02\u07ED\u0127\x03\x02\x02\x02\u07EE\u07F0\x07\x13\x02\x02\u07EF" +
    "\u07EE\x03\x02\x02\x02\u07EF\u07F0\x03\x02\x02\x02\u07F0\u07F1\x03\x02" +
    "\x02\x02\u07F1\u07F3\x05\u0132\x9A\x02\u07F2\u07F4\x05\u012E\x98\x02\u07F3" +
    "\u07F2\x03\x02\x02\x02\u07F3\u07F4\x03\x02\x02\x02\u07F4\u0129\x03\x02" +
    "\x02\x02\u07F5\u07F6\x05\u0132\x9A\x02\u07F6\u07F7\x05\u012C\x97\x02\u07F7" +
    "\u012B\x03\x02\x02\x02\u07F8\u07F9\x07\xDF\x02\x02\u07F9\u07FB\x05\u0132" +
    "\x9A\x02\u07FA\u07F8\x03\x02\x02\x02\u07FB\u07FC\x03\x02\x02\x02\u07FC" +
    "\u07FA\x03\x02\x02\x02\u07FC\u07FD\x03\x02\x02\x02\u07FD\u0800\x03\x02" +
    "\x02\x02\u07FE\u0800\x03\x02\x02\x02\u07FF\u07FA\x03\x02\x02\x02\u07FF" +
    "\u07FE\x03\x02\x02\x02\u0800\u012D\x03\x02\x02\x02\u0801\u0802\x07\u0206" +
    "\x02\x02\u0802\u0803\x05\u0130\x99\x02\u0803\u0804\x07\u0207\x02\x02\u0804" +
    "\u012F\x03\x02\x02\x02\u0805\u080A\x05\u0132\x9A\x02\u0806\u0807\x07\u020A" +
    "\x02\x02\u0807\u0809\x05\u0132\x9A\x02\u0808\u0806\x03\x02\x02\x02\u0809" +
    "\u080C\x03\x02\x02\x02\u080A\u0808\x03\x02\x02\x02\u080A\u080B\x03\x02" +
    "\x02\x02\u080B\u0131\x03\x02\x02\x02\u080C\u080A\x03\x02\x02\x02\u080D" +
    "\u0811\x05\u0134\x9B\x02\u080E\u0811\x05\u0136\x9C\x02\u080F\u0811\x05" +
    "\u0178\xBD\x02\u0810\u080D\x03\x02\x02\x02\u0810\u080E\x03\x02\x02\x02" +
    "\u0810\u080F\x03\x02\x02\x02\u0811\u0133\x03\x02\x02\x02\u0812\u0813\t" +
    "%\x02\x02\u0813\u0135\x03\x02\x02\x02\u0814\u0815\x07\u021B\x02\x02\u0815" +
    "\u0137\x03\x02\x02\x02\u0816\u0817\x07\u01AE\x02\x02\u0817\u0818\x05\u0104" +
    "\x83\x02\u0818\u0819\x07\u017A\x02\x02\u0819\u081A\x05\u0104\x83\x02\u081A" +
    "\u0139\x03\x02\x02\x02\u081B\u081C\x05\u0132\x9A\x02\u081C\u013B\x03\x02" +
    "\x02\x02\u081D\u081E\x05\u0132\x9A\x02\u081E\u013D\x03\x02\x02\x02\u081F" +
    "\u0822\x05\u0132\x9A\x02\u0820\u0821\x07\u0203\x02\x02\u0821\u0823\x05" +
    "\u0132\x9A\x02\u0822\u0820\x03\x02\x02\x02\u0822\u0823\x03\x02\x02\x02" +
    "\u0823\u013F\x03\x02\x02\x02\u0824\u0827\x05\u0132\x9A\x02\u0825\u0826" +
    "\x07\u0203\x02\x02\u0826\u0828\x05\u0132\x9A\x02\u0827\u0825\x03\x02\x02" +
    "\x02\u0827\u0828\x03\x02\x02\x02\u0828\u0141\x03\x02\x02\x02\u0829\u082C" +
    "\x05\u0132\x9A\x02\u082A\u082B\x07\u0203\x02\x02\u082B\u082D\x05\u0132" +
    "\x9A\x02\u082C\u082A\x03\x02\x02\x02\u082C\u082D\x03\x02\x02\x02\u082D" +
    "\u0836\x03\x02\x02\x02\u082E\u082F\x05\u0132\x9A\x02\u082F\u0830\x07\u0203" +
    "\x02\x02\u0830\u0833\x05\u0132\x9A\x02\u0831\u0832\x07\u0203\x02\x02\u0832" +
    "\u0834\x05\u0132\x9A\x02\u0833\u0831\x03\x02\x02\x02\u0833\u0834\x03\x02" +
    "\x02\x02\u0834\u0836\x03\x02\x02\x02\u0835\u0829\x03\x02\x02\x02\u0835" +
    "\u082E\x03\x02\x02\x02\u0836\u0143\x03\x02\x02\x02\u0837\u083A\x05\u0132" +
    "\x9A\x02\u0838\u0839\x07\u0203\x02\x02\u0839\u083B\x05\u0132\x9A\x02\u083A" +
    "\u0838\x03\x02\x02\x02\u083A\u083B\x03\x02\x02\x02\u083B\u0844\x03\x02" +
    "\x02\x02\u083C\u083D\x05\u0132\x9A\x02\u083D\u083E\x07\u0203\x02\x02\u083E" +
    "\u0841\x05\u0132\x9A\x02\u083F\u0840\x07\u0203\x02\x02\u0840\u0842\x05" +
    "\u0132\x9A\x02\u0841\u083F\x03\x02\x02\x02\u0841\u0842\x03\x02\x02\x02" +
    "\u0842\u0844\x03\x02\x02\x02\u0843\u0837\x03\x02\x02\x02\u0843\u083C\x03" +
    "\x02\x02\x02\u0844\u0145\x03\x02\x02\x02\u0845\u0848\x05\u0132\x9A\x02" +
    "\u0846\u0847\x07\u0203\x02\x02\u0847\u0849\x05\u0132\x9A\x02\u0848\u0846" +
    "\x03\x02\x02\x02\u0848\u0849\x03\x02\x02\x02\u0849\u0852\x03\x02\x02\x02" +
    "\u084A\u084B\x05\u0132\x9A\x02\u084B\u084C\x07\u0203\x02\x02\u084C\u084F" +
    "\x05\u0132\x9A\x02\u084D\u084E\x07\u0203\x02\x02\u084E\u0850\x05\u0132" +
    "\x9A\x02\u084F\u084D\x03\x02\x02\x02\u084F\u0850\x03\x02\x02\x02\u0850" +
    "\u0852\x03\x02\x02\x02\u0851\u0845\x03\x02\x02\x02\u0851\u084A\x03\x02" +
    "\x02\x02\u0852\u0147\x03\x02\x02\x02\u0853\u0856\x05\u0132\x9A\x02\u0854" +
    "\u0855\x07\u0203\x02\x02\u0855\u0857\x05\u0132\x9A\x02\u0856\u0854\x03" +
    "\x02\x02\x02\u0856\u0857\x03\x02\x02\x02\u0857\u0860\x03\x02\x02\x02\u0858" +
    "\u0859\x05\u0132\x9A\x02\u0859\u085A\x07\u0203\x02\x02\u085A\u085D\x05" +
    "\u0132\x9A\x02\u085B\u085C\x07\u0203\x02\x02\u085C\u085E\x05\u0132\x9A" +
    "\x02\u085D\u085B\x03\x02\x02\x02\u085D\u085E\x03\x02\x02\x02\u085E\u0860" +
    "\x03\x02\x02\x02\u085F\u0853\x03\x02\x02\x02\u085F\u0858\x03\x02\x02\x02" +
    "\u0860\u0149\x03\x02\x02\x02\u0861\u0866\x05\u0132\x9A\x02\u0862\u0863" +
    "\x07\u0203\x02\x02\u0863\u0865\x05\u0132\x9A\x02\u0864\u0862\x03\x02\x02" +
    "\x02\u0865\u0868\x03\x02\x02\x02\u0866\u0867\x03\x02\x02\x02\u0866\u0864" +
    "\x03\x02\x02\x02\u0867\u014B\x03\x02\x02\x02\u0868\u0866\x03\x02\x02\x02" +
    "\u0869\u086A\x07\u01B3\x02\x02\u086A\u086B\x05\u0152\xAA\x02\u086B\u014D" +
    "\x03\x02\x02\x02\u086C\u086D\x07\xA9\x02\x02\u086D\u086E\x07\xF3\x02\x02" +
    "\u086E\u086F\x07\x87\x02\x02\u086F\u014F\x03\x02\x02\x02\u0870\u0871\x07" +
    "\xA9\x02\x02\u0871\u0872\x07\x87\x02\x02\u0872\u0151\x03\x02\x02\x02\u0873" +
    "\u0874\x07\u0206\x02\x02\u0874\u0879\x05\u0154\xAB\x02\u0875\u0876\x07" +
    "\u020A\x02\x02\u0876\u0878\x05\u0154\xAB\x02\u0877\u0875\x03\x02\x02\x02" +
    "\u0878\u087B\x03\x02\x02\x02\u0879\u0877\x03\x02\x02\x02\u0879\u087A\x03" +
    "\x02\x02\x02\u087A\u087C\x03\x02\x02\x02\u087B\u0879\x03\x02\x02\x02\u087C" +
    "\u087D\x07\u0207\x02\x02\u087D\u0153\x03\x02\x02\x02\u087E\u0883\x05\u0156" +
    "\xAC\x02\u087F\u0881\x07\u01FB\x02\x02\u0880\u087F\x03\x02\x02\x02\u0880" +
    "\u0881\x03\x02\x02\x02\u0881\u0882\x03\x02\x02\x02\u0882\u0884\x05\u0158" +
    "\xAD\x02\u0883\u0880\x03\x02\x02\x02\u0883\u0884\x03\x02\x02\x02\u0884" +
    "\u0155\x03\x02\x02\x02\u0885\u0889\x05\u0132\x9A\x02\u0886\u0889\x05\u0116" +
    "\x8C\x02\u0887\u0889\x07\u021B\x02\x02\u0888\u0885\x03\x02\x02\x02\u0888" +
    "\u0886\x03\x02\x02\x02\u0888\u0887\x03\x02\x02\x02\u0889\u0157\x03\x02" +
    "\x02\x02\u088A\u088F\x07\u021C\x02\x02\u088B\u088F\x07\u021D\x02\x02\u088C" +
    "\u088F\x05\u016C\xB7\x02\u088D\u088F\x07\u021B\x02\x02\u088E\u088A\x03" +
    "\x02\x02\x02\u088E\u088B\x03\x02\x02\x02\u088E\u088C\x03\x02\x02\x02\u088E" +
    "\u088D\x03\x02\x02\x02\u088F\u0159\x03\x02\x02\x02\u0890\u0897\x07\f\x02" +
    "\x02\u0891\u0892\x07\u0201\x02\x02\u0892\u0897\x07\u0201\x02\x02\u0893" +
    "\u0897\x07\u0103\x02\x02\u0894\u0895\x07\u0200\x02\x02\u0895\u0897\x07" +
    "\u0200\x02\x02\u0896\u0890\x03\x02\x02\x02\u0896\u0891\x03\x02\x02\x02" +
    "\u0896\u0893\x03\x02\x02\x02\u0896\u0894";
FlinkSqlParser._serializedATNSegment4 = "\x03\x02\x02\x02\u0897\u015B\x03\x02\x02\x02\u0898\u08A7\x07\u01FB\x02" +
    "\x02\u0899\u08A7\x07\u01FC\x02\x02\u089A\u08A7\x07\u01FD\x02\x02\u089B" +
    "\u089C\x07\u01FD\x02\x02\u089C\u08A7\x07\u01FB\x02\x02\u089D\u089E\x07" +
    "\u01FC\x02\x02\u089E\u08A7\x07\u01FB\x02\x02\u089F\u08A0\x07\u01FD\x02" +
    "\x02\u08A0\u08A7\x07\u01FC\x02\x02\u08A1\u08A2\x07\u01FE\x02\x02\u08A2" +
    "\u08A7\x07\u01FB\x02\x02\u08A3\u08A4\x07\u01FD\x02\x02\u08A4\u08A5\x07" +
    "\u01FB\x02\x02\u08A5\u08A7\x07\u01FC\x02\x02\u08A6\u0898\x03\x02\x02\x02" +
    "\u08A6\u0899\x03\x02\x02\x02\u08A6\u089A\x03\x02\x02\x02\u08A6\u089B\x03" +
    "\x02\x02\x02\u08A6\u089D\x03\x02\x02\x02\u08A6\u089F\x03\x02\x02\x02\u08A6" +
    "\u08A1\x03\x02\x02\x02\u08A6\u08A3\x03\x02\x02\x02\u08A7\u015D\x03\x02" +
    "\x02\x02\u08A8\u08A9\x07\u01FD\x02\x02\u08A9\u08B0\x07\u01FD\x02\x02\u08AA" +
    "\u08AB\x07\u01FC\x02\x02\u08AB\u08B0\x07\u01FC\x02\x02\u08AC\u08B0\x07" +
    "\u0201\x02\x02\u08AD\u08B0\x07\u0202\x02\x02\u08AE\u08B0\x07\u0200\x02" +
    "\x02\u08AF\u08A8\x03\x02\x02\x02\u08AF\u08AA\x03\x02\x02\x02\u08AF\u08AC" +
    "\x03\x02\x02\x02\u08AF\u08AD\x03\x02\x02\x02\u08AF\u08AE\x03\x02\x02\x02" +
    "\u08B0\u015F\x03\x02\x02\x02\u08B1\u08B2\t&\x02\x02\u08B2\u0161\x03\x02" +
    "\x02\x02\u08B3\u08B4\t\'\x02\x02\u08B4\u0163\x03\x02\x02\x02\u08B5\u08C4" +
    "\x05\u011C\x8F\x02\u08B6\u08C4\x05\u0166\xB4\x02\u08B7\u08C4\x05\u0168" +
    "\xB5\x02\u08B8\u08BA\x07\u0213\x02\x02\u08B9\u08B8\x03\x02\x02\x02\u08B9" +
    "\u08BA\x03\x02\x02\x02\u08BA\u08BB\x03\x02\x02\x02\u08BB\u08C4\x05\u016A" +
    "\xB6\x02\u08BC\u08C4\x05\u016C\xB7\x02\u08BD\u08C4\x07\u021D\x02\x02\u08BE" +
    "\u08C4\x07\u021E\x02\x02\u08BF\u08C1\x07\xF3\x02\x02\u08C0\u08BF\x03\x02" +
    "\x02\x02\u08C0\u08C1\x03\x02\x02\x02\u08C1\u08C2\x03\x02\x02\x02\u08C2" +
    "\u08C4\x07\xF6\x02\x02\u08C3\u08B5\x03\x02\x02\x02\u08C3\u08B6\x03\x02" +
    "\x02\x02\u08C3\u08B7\x03\x02\x02\x02\u08C3\u08B9\x03\x02\x02\x02\u08C3" +
    "\u08BC\x03\x02\x02\x02\u08C3\u08BD\x03\x02\x02\x02\u08C3\u08BE\x03\x02" +
    "\x02\x02\u08C3\u08C0\x03\x02\x02\x02\u08C4\u0165\x03\x02\x02\x02\u08C5" +
    "\u08C6\x05\u0170\xB9\x02\u08C6\u08C7\x05\u0168\xB5\x02\u08C7\u0167\x03" +
    "\x02\x02\x02\u08C8\u08C9\x07\u021B\x02\x02\u08C9\u0169\x03\x02\x02\x02" +
    "\u08CA\u08CB\x07\u021C\x02\x02\u08CB\u016B\x03\x02\x02\x02\u08CC\u08CD" +
    "\t(\x02\x02\u08CD\u016D\x03\x02\x02\x02\u08CE\u08CF\t)\x02\x02\u08CF\u016F" +
    "\x03\x02\x02\x02\u08D0\u08D1\t*\x02\x02\u08D1\u0171\x03\x02\x02\x02\u08D2" +
    "\u08D3\t+\x02\x02\u08D3\u0173\x03\x02\x02\x02\u08D4\u08D5\t,\x02\x02\u08D5" +
    "\u0175\x03\x02\x02\x02\u08D6\u08D7\t-\x02\x02\u08D7\u0177\x03\x02\x02" +
    "\x02\u08D8\u08D9\t.\x02\x02\u08D9\u0179\x03\x02\x02\x02\u010E\u017D\u0184" +
    "\u0187\u0195\u01A7\u01AB\u01B4\u01B9\u01C0\u01CB\u01D4\u01E0\u01E3\u01EA" +
    "\u01ED\u01F5\u01F9\u01FE\u0201\u0208\u0210\u0214\u0220\u0228\u022C\u024C" +
    "\u024F\u0254\u0258\u025C\u0260\u0269\u026E\u0272\u0276\u027A\u027D\u0281" +
    "\u0286\u028C\u0291\u0296\u0299\u029D\u02A1\u02A9\u02B1\u02B5\u02B9\u02BD" +
    "\u02C1\u02C5\u02C9\u02CD\u02D1\u02D3\u02DD\u02E5\u02FD\u0304\u030A\u030D" +
    "\u0310\u031A\u031D\u0325\u0331\u0349\u0356\u035B\u035F\u0367\u036B\u0371" +
    "\u037B\u037F\u0385\u0389\u038D\u0390\u0399\u039D\u03A4\u03A7\u03B1\u03B9" +
    "\u03C1\u03C5\u03D4\u03E7\u03F2\u03F6\u03FD\u0402\u0408\u040C\u0413\u0417" +
    "\u041B\u041F\u0427\u042B\u0430\u0436\u043C\u043F\u0443\u044E\u0457\u0465" +
    "\u0471\u0480\u0483\u0487\u048A\u048C\u0491\u0495\u0498\u049C\u04A5\u04AE" +
    "\u04B8\u04BD\u04C8\u04CB\u04CE\u04D1\u04D4\u04DA\u04DE\u04E6\u04E9\u04EE" +
    "\u04F1\u04F3\u0501\u050C\u0511\u0519\u051C\u051F\u0524\u0526\u0528\u052D" +
    "\u0530\u0534\u0537\u053A\u053E\u0541\u0544\u0550\u0557\u0562\u057D\u0593" +
    "\u05A0\u05AC\u05B9\u05C5\u05D1\u05D6\u05F1\u05F9\u05FD\u0600\u0603\u060A" +
    "\u060D\u0610\u0613\u0616\u0619\u061E\u0621\u062A\u062F\u0633\u0638\u0641" +
    "\u0654\u065C\u0664\u0668\u066C\u0676\u0690\u0698\u06A4\u06BA\u06BC\u06C7" +
    "\u06CA\u06CC\u06D0\u06D4\u06DB\u06E4\u06EA\u06F7\u06FE\u0703\u0709\u0710" +
    "\u0712\u0715\u0721\u0726\u0729\u072F\u0731\u0737\u074C\u074E\u0756\u075A" +
    "\u0763\u0767\u0777\u0780\u0798\u079F\u07A2\u07AD\u07B6\u07BD\u07C3\u07CB" +
    "\u07D0\u07D4\u07DB\u07E0\u07E8\u07EC\u07EF\u07F3\u07FC\u07FF\u080A\u0810" +
    "\u0822\u0827\u082C\u0833\u0835\u083A\u0841\u0843\u0848\u084F\u0851\u0856" +
    "\u085D\u085F\u0866\u0879\u0880\u0883\u0888\u088E\u0896\u08A6\u08AF\u08B9" +
    "\u08C0\u08C3";
FlinkSqlParser._serializedATN = Utils.join([
    FlinkSqlParser._serializedATNSegment0,
    FlinkSqlParser._serializedATNSegment1,
    FlinkSqlParser._serializedATNSegment2,
    FlinkSqlParser._serializedATNSegment3,
    FlinkSqlParser._serializedATNSegment4,
], "");

class ProgramContext extends ParserRuleContext.ParserRuleContext {
    EOF() { return this.getToken(FlinkSqlParser.EOF, 0); }
    singleStatement(i) {
        if (i === undefined) {
            return this.getRuleContexts(SingleStatementContext);
        }
        else {
            return this.getRuleContext(i, SingleStatementContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return FlinkSqlParser.RULE_program; }
    // @Override
    enterRule(listener) {
        if (listener.enterProgram) {
            listener.enterProgram(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitProgram) {
            listener.exitProgram(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitProgram) {
            return visitor.visitProgram(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class SingleStatementContext extends ParserRuleContext.ParserRuleContext {
    sqlStatement() {
        return this.tryGetRuleContext(0, SqlStatementContext);
    }
    SEMICOLON() { return this.tryGetToken(FlinkSqlParser.SEMICOLON, 0); }
    emptyStatement() {
        return this.tryGetRuleContext(0, EmptyStatementContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return FlinkSqlParser.RULE_singleStatement; }
    // @Override
    enterRule(listener) {
        if (listener.enterSingleStatement) {
            listener.enterSingleStatement(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitSingleStatement) {
            listener.exitSingleStatement(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitSingleStatement) {
            return visitor.visitSingleStatement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class SqlStatementContext extends ParserRuleContext.ParserRuleContext {
    ddlStatement() {
        return this.tryGetRuleContext(0, DdlStatementContext);
    }
    dmlStatement() {
        return this.tryGetRuleContext(0, DmlStatementContext);
    }
    describeStatement() {
        return this.tryGetRuleContext(0, DescribeStatementContext);
    }
    explainStatement() {
        return this.tryGetRuleContext(0, ExplainStatementContext);
    }
    useStatement() {
        return this.tryGetRuleContext(0, UseStatementContext);
    }
    showStatememt() {
        return this.tryGetRuleContext(0, ShowStatememtContext);
    }
    loadStatement() {
        return this.tryGetRuleContext(0, LoadStatementContext);
    }
    unloadStatememt() {
        return this.tryGetRuleContext(0, UnloadStatememtContext);
    }
    setStatememt() {
        return this.tryGetRuleContext(0, SetStatememtContext);
    }
    resetStatememt() {
        return this.tryGetRuleContext(0, ResetStatememtContext);
    }
    jarStatememt() {
        return this.tryGetRuleContext(0, JarStatememtContext);
    }
    dtAddStatement() {
        return this.tryGetRuleContext(0, DtAddStatementContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return FlinkSqlParser.RULE_sqlStatement; }
    // @Override
    enterRule(listener) {
        if (listener.enterSqlStatement) {
            listener.enterSqlStatement(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitSqlStatement) {
            listener.exitSqlStatement(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitSqlStatement) {
            return visitor.visitSqlStatement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class EmptyStatementContext extends ParserRuleContext.ParserRuleContext {
    SEMICOLON() { return this.getToken(FlinkSqlParser.SEMICOLON, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return FlinkSqlParser.RULE_emptyStatement; }
    // @Override
    enterRule(listener) {
        if (listener.enterEmptyStatement) {
            listener.enterEmptyStatement(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitEmptyStatement) {
            listener.exitEmptyStatement(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitEmptyStatement) {
            return visitor.visitEmptyStatement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class DdlStatementContext extends ParserRuleContext.ParserRuleContext {
    createTable() {
        return this.tryGetRuleContext(0, CreateTableContext);
    }
    createDatabase() {
        return this.tryGetRuleContext(0, CreateDatabaseContext);
    }
    createView() {
        return this.tryGetRuleContext(0, CreateViewContext);
    }
    createFunction() {
        return this.tryGetRuleContext(0, CreateFunctionContext);
    }
    createCatalog() {
        return this.tryGetRuleContext(0, CreateCatalogContext);
    }
    alterTable() {
        return this.tryGetRuleContext(0, AlterTableContext);
    }
    alertView() {
        return this.tryGetRuleContext(0, AlertViewContext);
    }
    alterDatabase() {
        return this.tryGetRuleContext(0, AlterDatabaseContext);
    }
    alterFunction() {
        return this.tryGetRuleContext(0, AlterFunctionContext);
    }
    dropCatalog() {
        return this.tryGetRuleContext(0, DropCatalogContext);
    }
    dropTable() {
        return this.tryGetRuleContext(0, DropTableContext);
    }
    dropDatabase() {
        return this.tryGetRuleContext(0, DropDatabaseContext);
    }
    dropView() {
        return this.tryGetRuleContext(0, DropViewContext);
    }
    dropFunction() {
        return this.tryGetRuleContext(0, DropFunctionContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return FlinkSqlParser.RULE_ddlStatement; }
    // @Override
    enterRule(listener) {
        if (listener.enterDdlStatement) {
            listener.enterDdlStatement(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitDdlStatement) {
            listener.exitDdlStatement(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitDdlStatement) {
            return visitor.visitDdlStatement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class DmlStatementContext extends ParserRuleContext.ParserRuleContext {
    queryStatement() {
        return this.tryGetRuleContext(0, QueryStatementContext);
    }
    insertStatement() {
        return this.tryGetRuleContext(0, InsertStatementContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return FlinkSqlParser.RULE_dmlStatement; }
    // @Override
    enterRule(listener) {
        if (listener.enterDmlStatement) {
            listener.enterDmlStatement(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitDmlStatement) {
            listener.exitDmlStatement(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitDmlStatement) {
            return visitor.visitDmlStatement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class DescribeStatementContext extends ParserRuleContext.ParserRuleContext {
    tablePath() {
        return this.getRuleContext(0, TablePathContext);
    }
    KW_DESCRIBE() { return this.tryGetToken(FlinkSqlParser.KW_DESCRIBE, 0); }
    KW_DESC() { return this.tryGetToken(FlinkSqlParser.KW_DESC, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return FlinkSqlParser.RULE_describeStatement; }
    // @Override
    enterRule(listener) {
        if (listener.enterDescribeStatement) {
            listener.enterDescribeStatement(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitDescribeStatement) {
            listener.exitDescribeStatement(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitDescribeStatement) {
            return visitor.visitDescribeStatement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class ExplainStatementContext extends ParserRuleContext.ParserRuleContext {
    KW_EXPLAIN() { return this.getToken(FlinkSqlParser.KW_EXPLAIN, 0); }
    dmlStatement() {
        return this.tryGetRuleContext(0, DmlStatementContext);
    }
    insertSimpleStatement() {
        return this.tryGetRuleContext(0, InsertSimpleStatementContext);
    }
    insertMulStatement() {
        return this.tryGetRuleContext(0, InsertMulStatementContext);
    }
    explainDetails() {
        return this.tryGetRuleContext(0, ExplainDetailsContext);
    }
    KW_PLAN() { return this.tryGetToken(FlinkSqlParser.KW_PLAN, 0); }
    KW_FOR() { return this.tryGetToken(FlinkSqlParser.KW_FOR, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return FlinkSqlParser.RULE_explainStatement; }
    // @Override
    enterRule(listener) {
        if (listener.enterExplainStatement) {
            listener.enterExplainStatement(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitExplainStatement) {
            listener.exitExplainStatement(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitExplainStatement) {
            return visitor.visitExplainStatement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class ExplainDetailsContext extends ParserRuleContext.ParserRuleContext {
    explainDetail(i) {
        if (i === undefined) {
            return this.getRuleContexts(ExplainDetailContext);
        }
        else {
            return this.getRuleContext(i, ExplainDetailContext);
        }
    }
    COMMA(i) {
        if (i === undefined) {
            return this.getTokens(FlinkSqlParser.COMMA);
        }
        else {
            return this.getToken(FlinkSqlParser.COMMA, i);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return FlinkSqlParser.RULE_explainDetails; }
    // @Override
    enterRule(listener) {
        if (listener.enterExplainDetails) {
            listener.enterExplainDetails(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitExplainDetails) {
            listener.exitExplainDetails(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitExplainDetails) {
            return visitor.visitExplainDetails(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class ExplainDetailContext extends ParserRuleContext.ParserRuleContext {
    KW_CHANGELOG_MODE() { return this.tryGetToken(FlinkSqlParser.KW_CHANGELOG_MODE, 0); }
    KW_JSON_EXECUTION_PLAN() { return this.tryGetToken(FlinkSqlParser.KW_JSON_EXECUTION_PLAN, 0); }
    KW_ESTIMATED_COST() { return this.tryGetToken(FlinkSqlParser.KW_ESTIMATED_COST, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return FlinkSqlParser.RULE_explainDetail; }
    // @Override
    enterRule(listener) {
        if (listener.enterExplainDetail) {
            listener.enterExplainDetail(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitExplainDetail) {
            listener.exitExplainDetail(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitExplainDetail) {
            return visitor.visitExplainDetail(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class UseStatementContext extends ParserRuleContext.ParserRuleContext {
    KW_USE() { return this.tryGetToken(FlinkSqlParser.KW_USE, 0); }
    KW_CATALOG() { return this.tryGetToken(FlinkSqlParser.KW_CATALOG, 0); }
    catalogPath() {
        return this.tryGetRuleContext(0, CatalogPathContext);
    }
    databasePath() {
        return this.tryGetRuleContext(0, DatabasePathContext);
    }
    useModuleStatement() {
        return this.tryGetRuleContext(0, UseModuleStatementContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return FlinkSqlParser.RULE_useStatement; }
    // @Override
    enterRule(listener) {
        if (listener.enterUseStatement) {
            listener.enterUseStatement(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitUseStatement) {
            listener.exitUseStatement(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitUseStatement) {
            return visitor.visitUseStatement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class UseModuleStatementContext extends ParserRuleContext.ParserRuleContext {
    KW_USE() { return this.getToken(FlinkSqlParser.KW_USE, 0); }
    KW_MODULES() { return this.getToken(FlinkSqlParser.KW_MODULES, 0); }
    uid(i) {
        if (i === undefined) {
            return this.getRuleContexts(UidContext);
        }
        else {
            return this.getRuleContext(i, UidContext);
        }
    }
    COMMA(i) {
        if (i === undefined) {
            return this.getTokens(FlinkSqlParser.COMMA);
        }
        else {
            return this.getToken(FlinkSqlParser.COMMA, i);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return FlinkSqlParser.RULE_useModuleStatement; }
    // @Override
    enterRule(listener) {
        if (listener.enterUseModuleStatement) {
            listener.enterUseModuleStatement(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitUseModuleStatement) {
            listener.exitUseModuleStatement(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitUseModuleStatement) {
            return visitor.visitUseModuleStatement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class ShowStatememtContext extends ParserRuleContext.ParserRuleContext {
    KW_SHOW() { return this.getToken(FlinkSqlParser.KW_SHOW, 0); }
    KW_CATALOGS() { return this.tryGetToken(FlinkSqlParser.KW_CATALOGS, 0); }
    KW_DATABASES() { return this.tryGetToken(FlinkSqlParser.KW_DATABASES, 0); }
    KW_VIEWS() { return this.tryGetToken(FlinkSqlParser.KW_VIEWS, 0); }
    KW_JARS() { return this.tryGetToken(FlinkSqlParser.KW_JARS, 0); }
    KW_CURRENT() { return this.tryGetToken(FlinkSqlParser.KW_CURRENT, 0); }
    KW_CATALOG() { return this.tryGetToken(FlinkSqlParser.KW_CATALOG, 0); }
    KW_DATABASE() { return this.tryGetToken(FlinkSqlParser.KW_DATABASE, 0); }
    KW_TABLES() { return this.tryGetToken(FlinkSqlParser.KW_TABLES, 0); }
    databasePath() {
        return this.tryGetRuleContext(0, DatabasePathContext);
    }
    likePredicate() {
        return this.tryGetRuleContext(0, LikePredicateContext);
    }
    KW_FROM() { return this.tryGetToken(FlinkSqlParser.KW_FROM, 0); }
    KW_IN() { return this.tryGetToken(FlinkSqlParser.KW_IN, 0); }
    KW_COLUMNS() { return this.tryGetToken(FlinkSqlParser.KW_COLUMNS, 0); }
    viewPath() {
        return this.tryGetRuleContext(0, ViewPathContext);
    }
    tablePath() {
        return this.tryGetRuleContext(0, TablePathContext);
    }
    KW_CREATE() { return this.tryGetToken(FlinkSqlParser.KW_CREATE, 0); }
    KW_TABLE() { return this.tryGetToken(FlinkSqlParser.KW_TABLE, 0); }
    KW_VIEW() { return this.tryGetToken(FlinkSqlParser.KW_VIEW, 0); }
    KW_FUNCTIONS() { return this.tryGetToken(FlinkSqlParser.KW_FUNCTIONS, 0); }
    KW_USER() { return this.tryGetToken(FlinkSqlParser.KW_USER, 0); }
    KW_MODULES() { return this.tryGetToken(FlinkSqlParser.KW_MODULES, 0); }
    KW_FULL() { return this.tryGetToken(FlinkSqlParser.KW_FULL, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return FlinkSqlParser.RULE_showStatememt; }
    // @Override
    enterRule(listener) {
        if (listener.enterShowStatememt) {
            listener.enterShowStatememt(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitShowStatememt) {
            listener.exitShowStatememt(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitShowStatememt) {
            return visitor.visitShowStatememt(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class LoadStatementContext extends ParserRuleContext.ParserRuleContext {
    KW_LOAD() { return this.getToken(FlinkSqlParser.KW_LOAD, 0); }
    KW_MODULE() { return this.getToken(FlinkSqlParser.KW_MODULE, 0); }
    uid() {
        return this.getRuleContext(0, UidContext);
    }
    KW_WITH() { return this.tryGetToken(FlinkSqlParser.KW_WITH, 0); }
    tablePropertyList() {
        return this.tryGetRuleContext(0, TablePropertyListContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return FlinkSqlParser.RULE_loadStatement; }
    // @Override
    enterRule(listener) {
        if (listener.enterLoadStatement) {
            listener.enterLoadStatement(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitLoadStatement) {
            listener.exitLoadStatement(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitLoadStatement) {
            return visitor.visitLoadStatement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class UnloadStatememtContext extends ParserRuleContext.ParserRuleContext {
    KW_UNLOAD() { return this.getToken(FlinkSqlParser.KW_UNLOAD, 0); }
    KW_MODULE() { return this.getToken(FlinkSqlParser.KW_MODULE, 0); }
    uid() {
        return this.getRuleContext(0, UidContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return FlinkSqlParser.RULE_unloadStatememt; }
    // @Override
    enterRule(listener) {
        if (listener.enterUnloadStatememt) {
            listener.enterUnloadStatememt(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitUnloadStatememt) {
            listener.exitUnloadStatememt(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitUnloadStatememt) {
            return visitor.visitUnloadStatememt(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class SetStatememtContext extends ParserRuleContext.ParserRuleContext {
    KW_SET() { return this.getToken(FlinkSqlParser.KW_SET, 0); }
    tableProperty() {
        return this.tryGetRuleContext(0, TablePropertyContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return FlinkSqlParser.RULE_setStatememt; }
    // @Override
    enterRule(listener) {
        if (listener.enterSetStatememt) {
            listener.enterSetStatememt(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitSetStatememt) {
            listener.exitSetStatememt(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitSetStatememt) {
            return visitor.visitSetStatememt(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class ResetStatememtContext extends ParserRuleContext.ParserRuleContext {
    KW_RESET() { return this.getToken(FlinkSqlParser.KW_RESET, 0); }
    tablePropertyKey() {
        return this.tryGetRuleContext(0, TablePropertyKeyContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return FlinkSqlParser.RULE_resetStatememt; }
    // @Override
    enterRule(listener) {
        if (listener.enterResetStatememt) {
            listener.enterResetStatememt(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitResetStatememt) {
            listener.exitResetStatememt(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitResetStatememt) {
            return visitor.visitResetStatememt(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class JarStatememtContext extends ParserRuleContext.ParserRuleContext {
    KW_JAR() { return this.getToken(FlinkSqlParser.KW_JAR, 0); }
    jarFileName() {
        return this.getRuleContext(0, JarFileNameContext);
    }
    KW_ADD() { return this.tryGetToken(FlinkSqlParser.KW_ADD, 0); }
    KW_REMOVE() { return this.tryGetToken(FlinkSqlParser.KW_REMOVE, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return FlinkSqlParser.RULE_jarStatememt; }
    // @Override
    enterRule(listener) {
        if (listener.enterJarStatememt) {
            listener.enterJarStatememt(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitJarStatememt) {
            listener.exitJarStatememt(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitJarStatememt) {
            return visitor.visitJarStatememt(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class DtAddStatementContext extends ParserRuleContext.ParserRuleContext {
    KW_ADD() { return this.getToken(FlinkSqlParser.KW_ADD, 0); }
    KW_JAR() { return this.tryGetToken(FlinkSqlParser.KW_JAR, 0); }
    KW_WITH() { return this.tryGetToken(FlinkSqlParser.KW_WITH, 0); }
    dtFilePath() {
        return this.getRuleContext(0, DtFilePathContext);
    }
    KW_AS() { return this.tryGetToken(FlinkSqlParser.KW_AS, 0); }
    uid(i) {
        if (i === undefined) {
            return this.getRuleContexts(UidContext);
        }
        else {
            return this.getRuleContext(i, UidContext);
        }
    }
    KW_FILE() { return this.tryGetToken(FlinkSqlParser.KW_FILE, 0); }
    KW_RENAME() { return this.tryGetToken(FlinkSqlParser.KW_RENAME, 0); }
    KW_PYTHON_FILES() { return this.tryGetToken(FlinkSqlParser.KW_PYTHON_FILES, 0); }
    KW_PYTHON_REQUIREMENTS() { return this.tryGetToken(FlinkSqlParser.KW_PYTHON_REQUIREMENTS, 0); }
    KW_PYTHON_DEPENDENCIES() { return this.tryGetToken(FlinkSqlParser.KW_PYTHON_DEPENDENCIES, 0); }
    KW_PYTHON_JAR() { return this.tryGetToken(FlinkSqlParser.KW_PYTHON_JAR, 0); }
    KW_PYTHON_ARCHIVES() { return this.tryGetToken(FlinkSqlParser.KW_PYTHON_ARCHIVES, 0); }
    KW_PYTHON_PARAMETER() { return this.tryGetToken(FlinkSqlParser.KW_PYTHON_PARAMETER, 0); }
    KW_ENGINE() { return this.tryGetToken(FlinkSqlParser.KW_ENGINE, 0); }
    KW_KEY() { return this.tryGetToken(FlinkSqlParser.KW_KEY, 0); }
    KW_CONFIG() { return this.tryGetToken(FlinkSqlParser.KW_CONFIG, 0); }
    KW_FOR() { return this.tryGetToken(FlinkSqlParser.KW_FOR, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return FlinkSqlParser.RULE_dtAddStatement; }
    // @Override
    enterRule(listener) {
        if (listener.enterDtAddStatement) {
            listener.enterDtAddStatement(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitDtAddStatement) {
            listener.exitDtAddStatement(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitDtAddStatement) {
            return visitor.visitDtAddStatement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class DtFilePathContext extends ParserRuleContext.ParserRuleContext {
    uid(i) {
        if (i === undefined) {
            return this.getRuleContexts(UidContext);
        }
        else {
            return this.getRuleContext(i, UidContext);
        }
    }
    SLASH_SIGN(i) {
        if (i === undefined) {
            return this.getTokens(FlinkSqlParser.SLASH_SIGN);
        }
        else {
            return this.getToken(FlinkSqlParser.SLASH_SIGN, i);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return FlinkSqlParser.RULE_dtFilePath; }
    // @Override
    enterRule(listener) {
        if (listener.enterDtFilePath) {
            listener.enterDtFilePath(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitDtFilePath) {
            listener.exitDtFilePath(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitDtFilePath) {
            return visitor.visitDtFilePath(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class CreateTableContext extends ParserRuleContext.ParserRuleContext {
    simpleCreateTable() {
        return this.tryGetRuleContext(0, SimpleCreateTableContext);
    }
    createTableAsSelect() {
        return this.tryGetRuleContext(0, CreateTableAsSelectContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return FlinkSqlParser.RULE_createTable; }
    // @Override
    enterRule(listener) {
        if (listener.enterCreateTable) {
            listener.enterCreateTable(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitCreateTable) {
            listener.exitCreateTable(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitCreateTable) {
            return visitor.visitCreateTable(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class SimpleCreateTableContext extends ParserRuleContext.ParserRuleContext {
    KW_CREATE() { return this.getToken(FlinkSqlParser.KW_CREATE, 0); }
    KW_TABLE() { return this.getToken(FlinkSqlParser.KW_TABLE, 0); }
    tablePathCreate() {
        return this.getRuleContext(0, TablePathCreateContext);
    }
    LR_BRACKET() { return this.getToken(FlinkSqlParser.LR_BRACKET, 0); }
    columnOptionDefinition(i) {
        if (i === undefined) {
            return this.getRuleContexts(ColumnOptionDefinitionContext);
        }
        else {
            return this.getRuleContext(i, ColumnOptionDefinitionContext);
        }
    }
    RR_BRACKET() { return this.getToken(FlinkSqlParser.RR_BRACKET, 0); }
    withOption() {
        return this.getRuleContext(0, WithOptionContext);
    }
    KW_TEMPORARY() { return this.tryGetToken(FlinkSqlParser.KW_TEMPORARY, 0); }
    ifNotExists() {
        return this.tryGetRuleContext(0, IfNotExistsContext);
    }
    COMMA(i) {
        if (i === undefined) {
            return this.getTokens(FlinkSqlParser.COMMA);
        }
        else {
            return this.getToken(FlinkSqlParser.COMMA, i);
        }
    }
    watermarkDefinition() {
        return this.tryGetRuleContext(0, WatermarkDefinitionContext);
    }
    tableConstraint() {
        return this.tryGetRuleContext(0, TableConstraintContext);
    }
    selfDefinitionClause() {
        return this.tryGetRuleContext(0, SelfDefinitionClauseContext);
    }
    commentSpec() {
        return this.tryGetRuleContext(0, CommentSpecContext);
    }
    partitionDefinition() {
        return this.tryGetRuleContext(0, PartitionDefinitionContext);
    }
    likeDefinition() {
        return this.tryGetRuleContext(0, LikeDefinitionContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return FlinkSqlParser.RULE_simpleCreateTable; }
    // @Override
    enterRule(listener) {
        if (listener.enterSimpleCreateTable) {
            listener.enterSimpleCreateTable(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitSimpleCreateTable) {
            listener.exitSimpleCreateTable(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitSimpleCreateTable) {
            return visitor.visitSimpleCreateTable(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class CreateTableAsSelectContext extends ParserRuleContext.ParserRuleContext {
    KW_CREATE() { return this.getToken(FlinkSqlParser.KW_CREATE, 0); }
    KW_TABLE() { return this.getToken(FlinkSqlParser.KW_TABLE, 0); }
    tablePathCreate() {
        return this.getRuleContext(0, TablePathCreateContext);
    }
    withOption() {
        return this.getRuleContext(0, WithOptionContext);
    }
    ifNotExists() {
        return this.tryGetRuleContext(0, IfNotExistsContext);
    }
    KW_AS() { return this.tryGetToken(FlinkSqlParser.KW_AS, 0); }
    queryStatement() {
        return this.tryGetRuleContext(0, QueryStatementContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return FlinkSqlParser.RULE_createTableAsSelect; }
    // @Override
    enterRule(listener) {
        if (listener.enterCreateTableAsSelect) {
            listener.enterCreateTableAsSelect(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitCreateTableAsSelect) {
            listener.exitCreateTableAsSelect(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitCreateTableAsSelect) {
            return visitor.visitCreateTableAsSelect(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class ColumnOptionDefinitionContext extends ParserRuleContext.ParserRuleContext {
    physicalColumnDefinition() {
        return this.tryGetRuleContext(0, PhysicalColumnDefinitionContext);
    }
    metadataColumnDefinition() {
        return this.tryGetRuleContext(0, MetadataColumnDefinitionContext);
    }
    computedColumnDefinition() {
        return this.tryGetRuleContext(0, ComputedColumnDefinitionContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return FlinkSqlParser.RULE_columnOptionDefinition; }
    // @Override
    enterRule(listener) {
        if (listener.enterColumnOptionDefinition) {
            listener.enterColumnOptionDefinition(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitColumnOptionDefinition) {
            listener.exitColumnOptionDefinition(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitColumnOptionDefinition) {
            return visitor.visitColumnOptionDefinition(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class PhysicalColumnDefinitionContext extends ParserRuleContext.ParserRuleContext {
    columnNameCreate() {
        return this.getRuleContext(0, ColumnNameCreateContext);
    }
    columnType() {
        return this.getRuleContext(0, ColumnTypeContext);
    }
    columnConstraint() {
        return this.tryGetRuleContext(0, ColumnConstraintContext);
    }
    commentSpec() {
        return this.tryGetRuleContext(0, CommentSpecContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return FlinkSqlParser.RULE_physicalColumnDefinition; }
    // @Override
    enterRule(listener) {
        if (listener.enterPhysicalColumnDefinition) {
            listener.enterPhysicalColumnDefinition(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitPhysicalColumnDefinition) {
            listener.exitPhysicalColumnDefinition(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitPhysicalColumnDefinition) {
            return visitor.visitPhysicalColumnDefinition(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class ColumnNameCreateContext extends ParserRuleContext.ParserRuleContext {
    uid() {
        return this.tryGetRuleContext(0, UidContext);
    }
    expression() {
        return this.tryGetRuleContext(0, ExpressionContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return FlinkSqlParser.RULE_columnNameCreate; }
    // @Override
    enterRule(listener) {
        if (listener.enterColumnNameCreate) {
            listener.enterColumnNameCreate(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitColumnNameCreate) {
            listener.exitColumnNameCreate(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitColumnNameCreate) {
            return visitor.visitColumnNameCreate(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class ColumnNameContext extends ParserRuleContext.ParserRuleContext {
    uid() {
        return this.tryGetRuleContext(0, UidContext);
    }
    expression() {
        return this.tryGetRuleContext(0, ExpressionContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return FlinkSqlParser.RULE_columnName; }
    // @Override
    enterRule(listener) {
        if (listener.enterColumnName) {
            listener.enterColumnName(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitColumnName) {
            listener.exitColumnName(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitColumnName) {
            return visitor.visitColumnName(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class ColumnNameListContext extends ParserRuleContext.ParserRuleContext {
    LR_BRACKET() { return this.getToken(FlinkSqlParser.LR_BRACKET, 0); }
    columnName(i) {
        if (i === undefined) {
            return this.getRuleContexts(ColumnNameContext);
        }
        else {
            return this.getRuleContext(i, ColumnNameContext);
        }
    }
    RR_BRACKET() { return this.getToken(FlinkSqlParser.RR_BRACKET, 0); }
    COMMA(i) {
        if (i === undefined) {
            return this.getTokens(FlinkSqlParser.COMMA);
        }
        else {
            return this.getToken(FlinkSqlParser.COMMA, i);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return FlinkSqlParser.RULE_columnNameList; }
    // @Override
    enterRule(listener) {
        if (listener.enterColumnNameList) {
            listener.enterColumnNameList(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitColumnNameList) {
            listener.exitColumnNameList(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitColumnNameList) {
            return visitor.visitColumnNameList(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class ColumnTypeContext extends ParserRuleContext.ParserRuleContext {
    KW_DATE() { return this.tryGetToken(FlinkSqlParser.KW_DATE, 0); }
    KW_BOOLEAN() { return this.tryGetToken(FlinkSqlParser.KW_BOOLEAN, 0); }
    KW_NULL() { return this.tryGetToken(FlinkSqlParser.KW_NULL, 0); }
    KW_CHAR() { return this.tryGetToken(FlinkSqlParser.KW_CHAR, 0); }
    KW_VARCHAR() { return this.tryGetToken(FlinkSqlParser.KW_VARCHAR, 0); }
    KW_STRING() { return this.tryGetToken(FlinkSqlParser.KW_STRING, 0); }
    KW_BINARY() { return this.tryGetToken(FlinkSqlParser.KW_BINARY, 0); }
    KW_VARBINARY() { return this.tryGetToken(FlinkSqlParser.KW_VARBINARY, 0); }
    KW_BYTES() { return this.tryGetToken(FlinkSqlParser.KW_BYTES, 0); }
    KW_TINYINT() { return this.tryGetToken(FlinkSqlParser.KW_TINYINT, 0); }
    KW_SMALLINT() { return this.tryGetToken(FlinkSqlParser.KW_SMALLINT, 0); }
    KW_INT() { return this.tryGetToken(FlinkSqlParser.KW_INT, 0); }
    KW_INTEGER() { return this.tryGetToken(FlinkSqlParser.KW_INTEGER, 0); }
    KW_BIGINT() { return this.tryGetToken(FlinkSqlParser.KW_BIGINT, 0); }
    KW_TIME() { return this.tryGetToken(FlinkSqlParser.KW_TIME, 0); }
    KW_TIMESTAMP_LTZ() { return this.tryGetToken(FlinkSqlParser.KW_TIMESTAMP_LTZ, 0); }
    KW_DATETIME() { return this.tryGetToken(FlinkSqlParser.KW_DATETIME, 0); }
    lengthOneDimension() {
        return this.tryGetRuleContext(0, LengthOneDimensionContext);
    }
    KW_TIMESTAMP() { return this.tryGetToken(FlinkSqlParser.KW_TIMESTAMP, 0); }
    KW_ZONE() { return this.tryGetToken(FlinkSqlParser.KW_ZONE, 0); }
    KW_WITHOUT() { return this.tryGetToken(FlinkSqlParser.KW_WITHOUT, 0); }
    KW_WITH() { return this.tryGetToken(FlinkSqlParser.KW_WITH, 0); }
    KW_LOCAL() { return this.tryGetToken(FlinkSqlParser.KW_LOCAL, 0); }
    KW_DECIMAL() { return this.tryGetToken(FlinkSqlParser.KW_DECIMAL, 0); }
    KW_DEC() { return this.tryGetToken(FlinkSqlParser.KW_DEC, 0); }
    KW_NUMERIC() { return this.tryGetToken(FlinkSqlParser.KW_NUMERIC, 0); }
    KW_FLOAT() { return this.tryGetToken(FlinkSqlParser.KW_FLOAT, 0); }
    KW_DOUBLE() { return this.tryGetToken(FlinkSqlParser.KW_DOUBLE, 0); }
    lengthTwoOptionalDimension() {
        return this.tryGetRuleContext(0, LengthTwoOptionalDimensionContext);
    }
    KW_ARRAY() { return this.tryGetToken(FlinkSqlParser.KW_ARRAY, 0); }
    KW_MULTISET() { return this.tryGetToken(FlinkSqlParser.KW_MULTISET, 0); }
    lengthOneTypeDimension() {
        return this.tryGetRuleContext(0, LengthOneTypeDimensionContext);
    }
    KW_MAP() { return this.tryGetToken(FlinkSqlParser.KW_MAP, 0); }
    mapTypeDimension() {
        return this.tryGetRuleContext(0, MapTypeDimensionContext);
    }
    KW_ROW() { return this.tryGetToken(FlinkSqlParser.KW_ROW, 0); }
    rowTypeDimension() {
        return this.tryGetRuleContext(0, RowTypeDimensionContext);
    }
    KW_RAW() { return this.tryGetToken(FlinkSqlParser.KW_RAW, 0); }
    lengthTwoStringDimension() {
        return this.tryGetRuleContext(0, LengthTwoStringDimensionContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return FlinkSqlParser.RULE_columnType; }
    // @Override
    enterRule(listener) {
        if (listener.enterColumnType) {
            listener.enterColumnType(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitColumnType) {
            listener.exitColumnType(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitColumnType) {
            return visitor.visitColumnType(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class LengthOneDimensionContext extends ParserRuleContext.ParserRuleContext {
    LR_BRACKET() { return this.getToken(FlinkSqlParser.LR_BRACKET, 0); }
    decimalLiteral() {
        return this.getRuleContext(0, DecimalLiteralContext);
    }
    RR_BRACKET() { return this.getToken(FlinkSqlParser.RR_BRACKET, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return FlinkSqlParser.RULE_lengthOneDimension; }
    // @Override
    enterRule(listener) {
        if (listener.enterLengthOneDimension) {
            listener.enterLengthOneDimension(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitLengthOneDimension) {
            listener.exitLengthOneDimension(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitLengthOneDimension) {
            return visitor.visitLengthOneDimension(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class LengthTwoOptionalDimensionContext extends ParserRuleContext.ParserRuleContext {
    LR_BRACKET() { return this.getToken(FlinkSqlParser.LR_BRACKET, 0); }
    decimalLiteral(i) {
        if (i === undefined) {
            return this.getRuleContexts(DecimalLiteralContext);
        }
        else {
            return this.getRuleContext(i, DecimalLiteralContext);
        }
    }
    RR_BRACKET() { return this.getToken(FlinkSqlParser.RR_BRACKET, 0); }
    COMMA() { return this.tryGetToken(FlinkSqlParser.COMMA, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return FlinkSqlParser.RULE_lengthTwoOptionalDimension; }
    // @Override
    enterRule(listener) {
        if (listener.enterLengthTwoOptionalDimension) {
            listener.enterLengthTwoOptionalDimension(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitLengthTwoOptionalDimension) {
            listener.exitLengthTwoOptionalDimension(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitLengthTwoOptionalDimension) {
            return visitor.visitLengthTwoOptionalDimension(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class LengthTwoStringDimensionContext extends ParserRuleContext.ParserRuleContext {
    LR_BRACKET() { return this.getToken(FlinkSqlParser.LR_BRACKET, 0); }
    stringLiteral(i) {
        if (i === undefined) {
            return this.getRuleContexts(StringLiteralContext);
        }
        else {
            return this.getRuleContext(i, StringLiteralContext);
        }
    }
    RR_BRACKET() { return this.getToken(FlinkSqlParser.RR_BRACKET, 0); }
    COMMA() { return this.tryGetToken(FlinkSqlParser.COMMA, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return FlinkSqlParser.RULE_lengthTwoStringDimension; }
    // @Override
    enterRule(listener) {
        if (listener.enterLengthTwoStringDimension) {
            listener.enterLengthTwoStringDimension(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitLengthTwoStringDimension) {
            listener.exitLengthTwoStringDimension(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitLengthTwoStringDimension) {
            return visitor.visitLengthTwoStringDimension(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class LengthOneTypeDimensionContext extends ParserRuleContext.ParserRuleContext {
    LESS_SYMBOL() { return this.getToken(FlinkSqlParser.LESS_SYMBOL, 0); }
    columnType() {
        return this.getRuleContext(0, ColumnTypeContext);
    }
    GREATER_SYMBOL() { return this.getToken(FlinkSqlParser.GREATER_SYMBOL, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return FlinkSqlParser.RULE_lengthOneTypeDimension; }
    // @Override
    enterRule(listener) {
        if (listener.enterLengthOneTypeDimension) {
            listener.enterLengthOneTypeDimension(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitLengthOneTypeDimension) {
            listener.exitLengthOneTypeDimension(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitLengthOneTypeDimension) {
            return visitor.visitLengthOneTypeDimension(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class MapTypeDimensionContext extends ParserRuleContext.ParserRuleContext {
    LESS_SYMBOL() { return this.getToken(FlinkSqlParser.LESS_SYMBOL, 0); }
    columnType(i) {
        if (i === undefined) {
            return this.getRuleContexts(ColumnTypeContext);
        }
        else {
            return this.getRuleContext(i, ColumnTypeContext);
        }
    }
    GREATER_SYMBOL() { return this.getToken(FlinkSqlParser.GREATER_SYMBOL, 0); }
    COMMA() { return this.tryGetToken(FlinkSqlParser.COMMA, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return FlinkSqlParser.RULE_mapTypeDimension; }
    // @Override
    enterRule(listener) {
        if (listener.enterMapTypeDimension) {
            listener.enterMapTypeDimension(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitMapTypeDimension) {
            listener.exitMapTypeDimension(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitMapTypeDimension) {
            return visitor.visitMapTypeDimension(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class RowTypeDimensionContext extends ParserRuleContext.ParserRuleContext {
    LESS_SYMBOL() { return this.getToken(FlinkSqlParser.LESS_SYMBOL, 0); }
    columnName(i) {
        if (i === undefined) {
            return this.getRuleContexts(ColumnNameContext);
        }
        else {
            return this.getRuleContext(i, ColumnNameContext);
        }
    }
    columnType(i) {
        if (i === undefined) {
            return this.getRuleContexts(ColumnTypeContext);
        }
        else {
            return this.getRuleContext(i, ColumnTypeContext);
        }
    }
    GREATER_SYMBOL() { return this.getToken(FlinkSqlParser.GREATER_SYMBOL, 0); }
    COMMA(i) {
        if (i === undefined) {
            return this.getTokens(FlinkSqlParser.COMMA);
        }
        else {
            return this.getToken(FlinkSqlParser.COMMA, i);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return FlinkSqlParser.RULE_rowTypeDimension; }
    // @Override
    enterRule(listener) {
        if (listener.enterRowTypeDimension) {
            listener.enterRowTypeDimension(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitRowTypeDimension) {
            listener.exitRowTypeDimension(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitRowTypeDimension) {
            return visitor.visitRowTypeDimension(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class ColumnConstraintContext extends ParserRuleContext.ParserRuleContext {
    KW_PRIMARY() { return this.tryGetToken(FlinkSqlParser.KW_PRIMARY, 0); }
    KW_KEY() { return this.tryGetToken(FlinkSqlParser.KW_KEY, 0); }
    KW_CONSTRAINT() { return this.tryGetToken(FlinkSqlParser.KW_CONSTRAINT, 0); }
    constraintName() {
        return this.tryGetRuleContext(0, ConstraintNameContext);
    }
    KW_NOT() { return this.tryGetToken(FlinkSqlParser.KW_NOT, 0); }
    KW_ENFORCED() { return this.tryGetToken(FlinkSqlParser.KW_ENFORCED, 0); }
    KW_NULL() { return this.tryGetToken(FlinkSqlParser.KW_NULL, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return FlinkSqlParser.RULE_columnConstraint; }
    // @Override
    enterRule(listener) {
        if (listener.enterColumnConstraint) {
            listener.enterColumnConstraint(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitColumnConstraint) {
            listener.exitColumnConstraint(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitColumnConstraint) {
            return visitor.visitColumnConstraint(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class CommentSpecContext extends ParserRuleContext.ParserRuleContext {
    KW_COMMENT() { return this.getToken(FlinkSqlParser.KW_COMMENT, 0); }
    STRING_LITERAL() { return this.getToken(FlinkSqlParser.STRING_LITERAL, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return FlinkSqlParser.RULE_commentSpec; }
    // @Override
    enterRule(listener) {
        if (listener.enterCommentSpec) {
            listener.enterCommentSpec(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitCommentSpec) {
            listener.exitCommentSpec(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitCommentSpec) {
            return visitor.visitCommentSpec(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class MetadataColumnDefinitionContext extends ParserRuleContext.ParserRuleContext {
    columnNameCreate() {
        return this.getRuleContext(0, ColumnNameCreateContext);
    }
    columnType() {
        return this.getRuleContext(0, ColumnTypeContext);
    }
    KW_METADATA() { return this.getToken(FlinkSqlParser.KW_METADATA, 0); }
    KW_FROM() { return this.tryGetToken(FlinkSqlParser.KW_FROM, 0); }
    metadataKey() {
        return this.tryGetRuleContext(0, MetadataKeyContext);
    }
    KW_VIRTUAL() { return this.tryGetToken(FlinkSqlParser.KW_VIRTUAL, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return FlinkSqlParser.RULE_metadataColumnDefinition; }
    // @Override
    enterRule(listener) {
        if (listener.enterMetadataColumnDefinition) {
            listener.enterMetadataColumnDefinition(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitMetadataColumnDefinition) {
            listener.exitMetadataColumnDefinition(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitMetadataColumnDefinition) {
            return visitor.visitMetadataColumnDefinition(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class MetadataKeyContext extends ParserRuleContext.ParserRuleContext {
    STRING_LITERAL() { return this.getToken(FlinkSqlParser.STRING_LITERAL, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return FlinkSqlParser.RULE_metadataKey; }
    // @Override
    enterRule(listener) {
        if (listener.enterMetadataKey) {
            listener.enterMetadataKey(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitMetadataKey) {
            listener.exitMetadataKey(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitMetadataKey) {
            return visitor.visitMetadataKey(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class ComputedColumnDefinitionContext extends ParserRuleContext.ParserRuleContext {
    columnNameCreate() {
        return this.getRuleContext(0, ColumnNameCreateContext);
    }
    KW_AS() { return this.getToken(FlinkSqlParser.KW_AS, 0); }
    computedColumnExpression() {
        return this.getRuleContext(0, ComputedColumnExpressionContext);
    }
    commentSpec() {
        return this.tryGetRuleContext(0, CommentSpecContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return FlinkSqlParser.RULE_computedColumnDefinition; }
    // @Override
    enterRule(listener) {
        if (listener.enterComputedColumnDefinition) {
            listener.enterComputedColumnDefinition(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitComputedColumnDefinition) {
            listener.exitComputedColumnDefinition(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitComputedColumnDefinition) {
            return visitor.visitComputedColumnDefinition(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class ComputedColumnExpressionContext extends ParserRuleContext.ParserRuleContext {
    expression() {
        return this.getRuleContext(0, ExpressionContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return FlinkSqlParser.RULE_computedColumnExpression; }
    // @Override
    enterRule(listener) {
        if (listener.enterComputedColumnExpression) {
            listener.enterComputedColumnExpression(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitComputedColumnExpression) {
            listener.exitComputedColumnExpression(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitComputedColumnExpression) {
            return visitor.visitComputedColumnExpression(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class WatermarkDefinitionContext extends ParserRuleContext.ParserRuleContext {
    KW_WATERMARK() { return this.getToken(FlinkSqlParser.KW_WATERMARK, 0); }
    KW_FOR() { return this.getToken(FlinkSqlParser.KW_FOR, 0); }
    columnName() {
        return this.getRuleContext(0, ColumnNameContext);
    }
    KW_AS() { return this.getToken(FlinkSqlParser.KW_AS, 0); }
    expression() {
        return this.getRuleContext(0, ExpressionContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return FlinkSqlParser.RULE_watermarkDefinition; }
    // @Override
    enterRule(listener) {
        if (listener.enterWatermarkDefinition) {
            listener.enterWatermarkDefinition(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitWatermarkDefinition) {
            listener.exitWatermarkDefinition(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitWatermarkDefinition) {
            return visitor.visitWatermarkDefinition(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class TableConstraintContext extends ParserRuleContext.ParserRuleContext {
    KW_PRIMARY() { return this.getToken(FlinkSqlParser.KW_PRIMARY, 0); }
    KW_KEY() { return this.getToken(FlinkSqlParser.KW_KEY, 0); }
    columnNameList() {
        return this.getRuleContext(0, ColumnNameListContext);
    }
    KW_NOT() { return this.getToken(FlinkSqlParser.KW_NOT, 0); }
    KW_ENFORCED() { return this.getToken(FlinkSqlParser.KW_ENFORCED, 0); }
    KW_CONSTRAINT() { return this.tryGetToken(FlinkSqlParser.KW_CONSTRAINT, 0); }
    constraintName() {
        return this.tryGetRuleContext(0, ConstraintNameContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return FlinkSqlParser.RULE_tableConstraint; }
    // @Override
    enterRule(listener) {
        if (listener.enterTableConstraint) {
            listener.enterTableConstraint(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitTableConstraint) {
            listener.exitTableConstraint(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitTableConstraint) {
            return visitor.visitTableConstraint(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class ConstraintNameContext extends ParserRuleContext.ParserRuleContext {
    identifier() {
        return this.getRuleContext(0, IdentifierContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return FlinkSqlParser.RULE_constraintName; }
    // @Override
    enterRule(listener) {
        if (listener.enterConstraintName) {
            listener.enterConstraintName(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitConstraintName) {
            listener.exitConstraintName(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitConstraintName) {
            return visitor.visitConstraintName(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class SelfDefinitionClauseContext extends ParserRuleContext.ParserRuleContext {
    KW_PERIOD() { return this.getToken(FlinkSqlParser.KW_PERIOD, 0); }
    KW_FOR() { return this.getToken(FlinkSqlParser.KW_FOR, 0); }
    KW_SYSTEM_TIME() { return this.getToken(FlinkSqlParser.KW_SYSTEM_TIME, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return FlinkSqlParser.RULE_selfDefinitionClause; }
    // @Override
    enterRule(listener) {
        if (listener.enterSelfDefinitionClause) {
            listener.enterSelfDefinitionClause(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitSelfDefinitionClause) {
            listener.exitSelfDefinitionClause(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitSelfDefinitionClause) {
            return visitor.visitSelfDefinitionClause(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class PartitionDefinitionContext extends ParserRuleContext.ParserRuleContext {
    KW_PARTITIONED() { return this.getToken(FlinkSqlParser.KW_PARTITIONED, 0); }
    KW_BY() { return this.getToken(FlinkSqlParser.KW_BY, 0); }
    transformList() {
        return this.getRuleContext(0, TransformListContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return FlinkSqlParser.RULE_partitionDefinition; }
    // @Override
    enterRule(listener) {
        if (listener.enterPartitionDefinition) {
            listener.enterPartitionDefinition(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitPartitionDefinition) {
            listener.exitPartitionDefinition(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitPartitionDefinition) {
            return visitor.visitPartitionDefinition(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class TransformListContext extends ParserRuleContext.ParserRuleContext {
    LR_BRACKET() { return this.getToken(FlinkSqlParser.LR_BRACKET, 0); }
    transform(i) {
        if (i === undefined) {
            return this.getRuleContexts(TransformContext);
        }
        else {
            return this.getRuleContext(i, TransformContext);
        }
    }
    RR_BRACKET() { return this.getToken(FlinkSqlParser.RR_BRACKET, 0); }
    COMMA(i) {
        if (i === undefined) {
            return this.getTokens(FlinkSqlParser.COMMA);
        }
        else {
            return this.getToken(FlinkSqlParser.COMMA, i);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return FlinkSqlParser.RULE_transformList; }
    // @Override
    enterRule(listener) {
        if (listener.enterTransformList) {
            listener.enterTransformList(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitTransformList) {
            listener.exitTransformList(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitTransformList) {
            return visitor.visitTransformList(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class TransformContext extends ParserRuleContext.ParserRuleContext {
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return FlinkSqlParser.RULE_transform; }
    copyFrom(ctx) {
        super.copyFrom(ctx);
    }
}
class IdentityTransformContext extends TransformContext {
    columnName() {
        return this.getRuleContext(0, ColumnNameContext);
    }
    constructor(ctx) {
        super(ctx.parent, ctx.invokingState);
        this.copyFrom(ctx);
    }
    // @Override
    enterRule(listener) {
        if (listener.enterIdentityTransform) {
            listener.enterIdentityTransform(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitIdentityTransform) {
            listener.exitIdentityTransform(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitIdentityTransform) {
            return visitor.visitIdentityTransform(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class ColumnTransformContext extends TransformContext {
    qualifiedName() {
        return this.getRuleContext(0, QualifiedNameContext);
    }
    constructor(ctx) {
        super(ctx.parent, ctx.invokingState);
        this.copyFrom(ctx);
    }
    // @Override
    enterRule(listener) {
        if (listener.enterColumnTransform) {
            listener.enterColumnTransform(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitColumnTransform) {
            listener.exitColumnTransform(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitColumnTransform) {
            return visitor.visitColumnTransform(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class ApplyTransformContext extends TransformContext {
    LR_BRACKET() { return this.getToken(FlinkSqlParser.LR_BRACKET, 0); }
    transformArgument(i) {
        if (i === undefined) {
            return this.getRuleContexts(TransformArgumentContext);
        }
        else {
            return this.getRuleContext(i, TransformArgumentContext);
        }
    }
    RR_BRACKET() { return this.getToken(FlinkSqlParser.RR_BRACKET, 0); }
    COMMA(i) {
        if (i === undefined) {
            return this.getTokens(FlinkSqlParser.COMMA);
        }
        else {
            return this.getToken(FlinkSqlParser.COMMA, i);
        }
    }
    constructor(ctx) {
        super(ctx.parent, ctx.invokingState);
        this.copyFrom(ctx);
    }
    // @Override
    enterRule(listener) {
        if (listener.enterApplyTransform) {
            listener.enterApplyTransform(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitApplyTransform) {
            listener.exitApplyTransform(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitApplyTransform) {
            return visitor.visitApplyTransform(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class TransformArgumentContext extends ParserRuleContext.ParserRuleContext {
    qualifiedName() {
        return this.tryGetRuleContext(0, QualifiedNameContext);
    }
    constant() {
        return this.tryGetRuleContext(0, ConstantContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return FlinkSqlParser.RULE_transformArgument; }
    // @Override
    enterRule(listener) {
        if (listener.enterTransformArgument) {
            listener.enterTransformArgument(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitTransformArgument) {
            listener.exitTransformArgument(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitTransformArgument) {
            return visitor.visitTransformArgument(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class LikeDefinitionContext extends ParserRuleContext.ParserRuleContext {
    KW_LIKE() { return this.getToken(FlinkSqlParser.KW_LIKE, 0); }
    tablePath() {
        return this.getRuleContext(0, TablePathContext);
    }
    LR_BRACKET() { return this.tryGetToken(FlinkSqlParser.LR_BRACKET, 0); }
    RR_BRACKET() { return this.tryGetToken(FlinkSqlParser.RR_BRACKET, 0); }
    likeOption(i) {
        if (i === undefined) {
            return this.getRuleContexts(LikeOptionContext);
        }
        else {
            return this.getRuleContext(i, LikeOptionContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return FlinkSqlParser.RULE_likeDefinition; }
    // @Override
    enterRule(listener) {
        if (listener.enterLikeDefinition) {
            listener.enterLikeDefinition(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitLikeDefinition) {
            listener.exitLikeDefinition(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitLikeDefinition) {
            return visitor.visitLikeDefinition(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class LikeOptionContext extends ParserRuleContext.ParserRuleContext {
    KW_INCLUDING() { return this.tryGetToken(FlinkSqlParser.KW_INCLUDING, 0); }
    KW_EXCLUDING() { return this.tryGetToken(FlinkSqlParser.KW_EXCLUDING, 0); }
    KW_ALL() { return this.tryGetToken(FlinkSqlParser.KW_ALL, 0); }
    KW_CONSTRAINTS() { return this.tryGetToken(FlinkSqlParser.KW_CONSTRAINTS, 0); }
    KW_PARTITIONS() { return this.tryGetToken(FlinkSqlParser.KW_PARTITIONS, 0); }
    KW_OVERWRITING() { return this.tryGetToken(FlinkSqlParser.KW_OVERWRITING, 0); }
    KW_GENERATED() { return this.tryGetToken(FlinkSqlParser.KW_GENERATED, 0); }
    KW_OPTIONS() { return this.tryGetToken(FlinkSqlParser.KW_OPTIONS, 0); }
    KW_WATERMARKS() { return this.tryGetToken(FlinkSqlParser.KW_WATERMARKS, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return FlinkSqlParser.RULE_likeOption; }
    // @Override
    enterRule(listener) {
        if (listener.enterLikeOption) {
            listener.enterLikeOption(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitLikeOption) {
            listener.exitLikeOption(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitLikeOption) {
            return visitor.visitLikeOption(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class CreateCatalogContext extends ParserRuleContext.ParserRuleContext {
    KW_CREATE() { return this.getToken(FlinkSqlParser.KW_CREATE, 0); }
    KW_CATALOG() { return this.getToken(FlinkSqlParser.KW_CATALOG, 0); }
    catalogPathCreate() {
        return this.getRuleContext(0, CatalogPathCreateContext);
    }
    withOption() {
        return this.getRuleContext(0, WithOptionContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return FlinkSqlParser.RULE_createCatalog; }
    // @Override
    enterRule(listener) {
        if (listener.enterCreateCatalog) {
            listener.enterCreateCatalog(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitCreateCatalog) {
            listener.exitCreateCatalog(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitCreateCatalog) {
            return visitor.visitCreateCatalog(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class CreateDatabaseContext extends ParserRuleContext.ParserRuleContext {
    KW_CREATE() { return this.getToken(FlinkSqlParser.KW_CREATE, 0); }
    KW_DATABASE() { return this.getToken(FlinkSqlParser.KW_DATABASE, 0); }
    databasePathCreate() {
        return this.getRuleContext(0, DatabasePathCreateContext);
    }
    withOption() {
        return this.getRuleContext(0, WithOptionContext);
    }
    ifNotExists() {
        return this.tryGetRuleContext(0, IfNotExistsContext);
    }
    commentSpec() {
        return this.tryGetRuleContext(0, CommentSpecContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return FlinkSqlParser.RULE_createDatabase; }
    // @Override
    enterRule(listener) {
        if (listener.enterCreateDatabase) {
            listener.enterCreateDatabase(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitCreateDatabase) {
            listener.exitCreateDatabase(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitCreateDatabase) {
            return visitor.visitCreateDatabase(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class CreateViewContext extends ParserRuleContext.ParserRuleContext {
    KW_CREATE() { return this.getToken(FlinkSqlParser.KW_CREATE, 0); }
    KW_VIEW() { return this.getToken(FlinkSqlParser.KW_VIEW, 0); }
    viewPathCreate() {
        return this.getRuleContext(0, ViewPathCreateContext);
    }
    KW_AS() { return this.getToken(FlinkSqlParser.KW_AS, 0); }
    queryStatement() {
        return this.getRuleContext(0, QueryStatementContext);
    }
    KW_TEMPORARY() { return this.tryGetToken(FlinkSqlParser.KW_TEMPORARY, 0); }
    ifNotExists() {
        return this.tryGetRuleContext(0, IfNotExistsContext);
    }
    columnNameList() {
        return this.tryGetRuleContext(0, ColumnNameListContext);
    }
    commentSpec() {
        return this.tryGetRuleContext(0, CommentSpecContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return FlinkSqlParser.RULE_createView; }
    // @Override
    enterRule(listener) {
        if (listener.enterCreateView) {
            listener.enterCreateView(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitCreateView) {
            listener.exitCreateView(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitCreateView) {
            return visitor.visitCreateView(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class CreateFunctionContext extends ParserRuleContext.ParserRuleContext {
    KW_CREATE() { return this.getToken(FlinkSqlParser.KW_CREATE, 0); }
    KW_FUNCTION() { return this.getToken(FlinkSqlParser.KW_FUNCTION, 0); }
    functionNameCreate() {
        return this.getRuleContext(0, FunctionNameCreateContext);
    }
    KW_AS() { return this.getToken(FlinkSqlParser.KW_AS, 0); }
    identifier() {
        return this.getRuleContext(0, IdentifierContext);
    }
    KW_TEMPORARY() { return this.tryGetToken(FlinkSqlParser.KW_TEMPORARY, 0); }
    KW_SYSTEM() { return this.tryGetToken(FlinkSqlParser.KW_SYSTEM, 0); }
    ifNotExists() {
        return this.tryGetRuleContext(0, IfNotExistsContext);
    }
    KW_LANGUAGE() { return this.tryGetToken(FlinkSqlParser.KW_LANGUAGE, 0); }
    usingClause() {
        return this.tryGetRuleContext(0, UsingClauseContext);
    }
    KW_JAVA() { return this.tryGetToken(FlinkSqlParser.KW_JAVA, 0); }
    KW_SCALA() { return this.tryGetToken(FlinkSqlParser.KW_SCALA, 0); }
    KW_PYTHON() { return this.tryGetToken(FlinkSqlParser.KW_PYTHON, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return FlinkSqlParser.RULE_createFunction; }
    // @Override
    enterRule(listener) {
        if (listener.enterCreateFunction) {
            listener.enterCreateFunction(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitCreateFunction) {
            listener.exitCreateFunction(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitCreateFunction) {
            return visitor.visitCreateFunction(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class UsingClauseContext extends ParserRuleContext.ParserRuleContext {
    KW_USING() { return this.getToken(FlinkSqlParser.KW_USING, 0); }
    KW_JAR(i) {
        if (i === undefined) {
            return this.getTokens(FlinkSqlParser.KW_JAR);
        }
        else {
            return this.getToken(FlinkSqlParser.KW_JAR, i);
        }
    }
    jarFileName(i) {
        if (i === undefined) {
            return this.getRuleContexts(JarFileNameContext);
        }
        else {
            return this.getRuleContext(i, JarFileNameContext);
        }
    }
    COMMA(i) {
        if (i === undefined) {
            return this.getTokens(FlinkSqlParser.COMMA);
        }
        else {
            return this.getToken(FlinkSqlParser.COMMA, i);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return FlinkSqlParser.RULE_usingClause; }
    // @Override
    enterRule(listener) {
        if (listener.enterUsingClause) {
            listener.enterUsingClause(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitUsingClause) {
            listener.exitUsingClause(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitUsingClause) {
            return visitor.visitUsingClause(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class JarFileNameContext extends ParserRuleContext.ParserRuleContext {
    STRING_LITERAL() { return this.getToken(FlinkSqlParser.STRING_LITERAL, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return FlinkSqlParser.RULE_jarFileName; }
    // @Override
    enterRule(listener) {
        if (listener.enterJarFileName) {
            listener.enterJarFileName(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitJarFileName) {
            listener.exitJarFileName(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitJarFileName) {
            return visitor.visitJarFileName(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class AlterTableContext extends ParserRuleContext.ParserRuleContext {
    KW_ALTER() { return this.getToken(FlinkSqlParser.KW_ALTER, 0); }
    KW_TABLE() { return this.getToken(FlinkSqlParser.KW_TABLE, 0); }
    tablePath() {
        return this.getRuleContext(0, TablePathContext);
    }
    renameDefinition() {
        return this.tryGetRuleContext(0, RenameDefinitionContext);
    }
    setKeyValueDefinition() {
        return this.tryGetRuleContext(0, SetKeyValueDefinitionContext);
    }
    addConstraint() {
        return this.tryGetRuleContext(0, AddConstraintContext);
    }
    dropConstraint() {
        return this.tryGetRuleContext(0, DropConstraintContext);
    }
    addUnique() {
        return this.tryGetRuleContext(0, AddUniqueContext);
    }
    ifExists() {
        return this.tryGetRuleContext(0, IfExistsContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return FlinkSqlParser.RULE_alterTable; }
    // @Override
    enterRule(listener) {
        if (listener.enterAlterTable) {
            listener.enterAlterTable(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitAlterTable) {
            listener.exitAlterTable(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitAlterTable) {
            return visitor.visitAlterTable(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class RenameDefinitionContext extends ParserRuleContext.ParserRuleContext {
    KW_RENAME() { return this.getToken(FlinkSqlParser.KW_RENAME, 0); }
    KW_TO() { return this.getToken(FlinkSqlParser.KW_TO, 0); }
    uid(i) {
        if (i === undefined) {
            return this.getRuleContexts(UidContext);
        }
        else {
            return this.getRuleContext(i, UidContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return FlinkSqlParser.RULE_renameDefinition; }
    // @Override
    enterRule(listener) {
        if (listener.enterRenameDefinition) {
            listener.enterRenameDefinition(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitRenameDefinition) {
            listener.exitRenameDefinition(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitRenameDefinition) {
            return visitor.visitRenameDefinition(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class SetKeyValueDefinitionContext extends ParserRuleContext.ParserRuleContext {
    KW_SET() { return this.getToken(FlinkSqlParser.KW_SET, 0); }
    tablePropertyList() {
        return this.getRuleContext(0, TablePropertyListContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return FlinkSqlParser.RULE_setKeyValueDefinition; }
    // @Override
    enterRule(listener) {
        if (listener.enterSetKeyValueDefinition) {
            listener.enterSetKeyValueDefinition(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitSetKeyValueDefinition) {
            listener.exitSetKeyValueDefinition(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitSetKeyValueDefinition) {
            return visitor.visitSetKeyValueDefinition(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class AddConstraintContext extends ParserRuleContext.ParserRuleContext {
    KW_ADD() { return this.getToken(FlinkSqlParser.KW_ADD, 0); }
    KW_CONSTRAINT() { return this.getToken(FlinkSqlParser.KW_CONSTRAINT, 0); }
    constraintName() {
        return this.getRuleContext(0, ConstraintNameContext);
    }
    KW_PRIMARY() { return this.getToken(FlinkSqlParser.KW_PRIMARY, 0); }
    KW_KEY() { return this.getToken(FlinkSqlParser.KW_KEY, 0); }
    columnNameList() {
        return this.getRuleContext(0, ColumnNameListContext);
    }
    notForced() {
        return this.tryGetRuleContext(0, NotForcedContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return FlinkSqlParser.RULE_addConstraint; }
    // @Override
    enterRule(listener) {
        if (listener.enterAddConstraint) {
            listener.enterAddConstraint(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitAddConstraint) {
            listener.exitAddConstraint(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitAddConstraint) {
            return visitor.visitAddConstraint(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class DropConstraintContext extends ParserRuleContext.ParserRuleContext {
    KW_DROP() { return this.getToken(FlinkSqlParser.KW_DROP, 0); }
    KW_CONSTRAINT() { return this.getToken(FlinkSqlParser.KW_CONSTRAINT, 0); }
    constraintName() {
        return this.getRuleContext(0, ConstraintNameContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return FlinkSqlParser.RULE_dropConstraint; }
    // @Override
    enterRule(listener) {
        if (listener.enterDropConstraint) {
            listener.enterDropConstraint(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitDropConstraint) {
            listener.exitDropConstraint(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitDropConstraint) {
            return visitor.visitDropConstraint(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class AddUniqueContext extends ParserRuleContext.ParserRuleContext {
    KW_ADD() { return this.getToken(FlinkSqlParser.KW_ADD, 0); }
    KW_UNIQUE() { return this.getToken(FlinkSqlParser.KW_UNIQUE, 0); }
    columnNameList() {
        return this.getRuleContext(0, ColumnNameListContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return FlinkSqlParser.RULE_addUnique; }
    // @Override
    enterRule(listener) {
        if (listener.enterAddUnique) {
            listener.enterAddUnique(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitAddUnique) {
            listener.exitAddUnique(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitAddUnique) {
            return visitor.visitAddUnique(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class NotForcedContext extends ParserRuleContext.ParserRuleContext {
    KW_NOT() { return this.getToken(FlinkSqlParser.KW_NOT, 0); }
    KW_ENFORCED() { return this.getToken(FlinkSqlParser.KW_ENFORCED, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return FlinkSqlParser.RULE_notForced; }
    // @Override
    enterRule(listener) {
        if (listener.enterNotForced) {
            listener.enterNotForced(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitNotForced) {
            listener.exitNotForced(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitNotForced) {
            return visitor.visitNotForced(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class AlertViewContext extends ParserRuleContext.ParserRuleContext {
    KW_ALTER() { return this.getToken(FlinkSqlParser.KW_ALTER, 0); }
    KW_VIEW() { return this.getToken(FlinkSqlParser.KW_VIEW, 0); }
    viewPath() {
        return this.getRuleContext(0, ViewPathContext);
    }
    renameDefinition() {
        return this.tryGetRuleContext(0, RenameDefinitionContext);
    }
    KW_AS() { return this.tryGetToken(FlinkSqlParser.KW_AS, 0); }
    queryStatement() {
        return this.tryGetRuleContext(0, QueryStatementContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return FlinkSqlParser.RULE_alertView; }
    // @Override
    enterRule(listener) {
        if (listener.enterAlertView) {
            listener.enterAlertView(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitAlertView) {
            listener.exitAlertView(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitAlertView) {
            return visitor.visitAlertView(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class AlterDatabaseContext extends ParserRuleContext.ParserRuleContext {
    KW_ALTER() { return this.getToken(FlinkSqlParser.KW_ALTER, 0); }
    KW_DATABASE() { return this.getToken(FlinkSqlParser.KW_DATABASE, 0); }
    databasePath() {
        return this.getRuleContext(0, DatabasePathContext);
    }
    setKeyValueDefinition() {
        return this.getRuleContext(0, SetKeyValueDefinitionContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return FlinkSqlParser.RULE_alterDatabase; }
    // @Override
    enterRule(listener) {
        if (listener.enterAlterDatabase) {
            listener.enterAlterDatabase(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitAlterDatabase) {
            listener.exitAlterDatabase(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitAlterDatabase) {
            return visitor.visitAlterDatabase(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class AlterFunctionContext extends ParserRuleContext.ParserRuleContext {
    KW_ALTER() { return this.getToken(FlinkSqlParser.KW_ALTER, 0); }
    KW_FUNCTION() { return this.getToken(FlinkSqlParser.KW_FUNCTION, 0); }
    functionName() {
        return this.getRuleContext(0, FunctionNameContext);
    }
    KW_AS() { return this.getToken(FlinkSqlParser.KW_AS, 0); }
    identifier() {
        return this.getRuleContext(0, IdentifierContext);
    }
    KW_TEMPORARY() { return this.tryGetToken(FlinkSqlParser.KW_TEMPORARY, 0); }
    KW_SYSTEM() { return this.tryGetToken(FlinkSqlParser.KW_SYSTEM, 0); }
    ifExists() {
        return this.tryGetRuleContext(0, IfExistsContext);
    }
    KW_LANGUAGE() { return this.tryGetToken(FlinkSqlParser.KW_LANGUAGE, 0); }
    KW_JAVA() { return this.tryGetToken(FlinkSqlParser.KW_JAVA, 0); }
    KW_SCALA() { return this.tryGetToken(FlinkSqlParser.KW_SCALA, 0); }
    KW_PYTHON() { return this.tryGetToken(FlinkSqlParser.KW_PYTHON, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return FlinkSqlParser.RULE_alterFunction; }
    // @Override
    enterRule(listener) {
        if (listener.enterAlterFunction) {
            listener.enterAlterFunction(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitAlterFunction) {
            listener.exitAlterFunction(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitAlterFunction) {
            return visitor.visitAlterFunction(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class DropCatalogContext extends ParserRuleContext.ParserRuleContext {
    KW_DROP() { return this.getToken(FlinkSqlParser.KW_DROP, 0); }
    KW_CATALOG() { return this.getToken(FlinkSqlParser.KW_CATALOG, 0); }
    catalogPath() {
        return this.getRuleContext(0, CatalogPathContext);
    }
    ifExists() {
        return this.tryGetRuleContext(0, IfExistsContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return FlinkSqlParser.RULE_dropCatalog; }
    // @Override
    enterRule(listener) {
        if (listener.enterDropCatalog) {
            listener.enterDropCatalog(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitDropCatalog) {
            listener.exitDropCatalog(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitDropCatalog) {
            return visitor.visitDropCatalog(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class DropTableContext extends ParserRuleContext.ParserRuleContext {
    KW_DROP() { return this.getToken(FlinkSqlParser.KW_DROP, 0); }
    KW_TABLE() { return this.getToken(FlinkSqlParser.KW_TABLE, 0); }
    tablePath() {
        return this.getRuleContext(0, TablePathContext);
    }
    KW_TEMPORARY() { return this.tryGetToken(FlinkSqlParser.KW_TEMPORARY, 0); }
    ifExists() {
        return this.tryGetRuleContext(0, IfExistsContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return FlinkSqlParser.RULE_dropTable; }
    // @Override
    enterRule(listener) {
        if (listener.enterDropTable) {
            listener.enterDropTable(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitDropTable) {
            listener.exitDropTable(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitDropTable) {
            return visitor.visitDropTable(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class DropDatabaseContext extends ParserRuleContext.ParserRuleContext {
    KW_DROP() { return this.getToken(FlinkSqlParser.KW_DROP, 0); }
    KW_DATABASE() { return this.getToken(FlinkSqlParser.KW_DATABASE, 0); }
    databasePath() {
        return this.getRuleContext(0, DatabasePathContext);
    }
    ifExists() {
        return this.tryGetRuleContext(0, IfExistsContext);
    }
    KW_RESTRICT() { return this.tryGetToken(FlinkSqlParser.KW_RESTRICT, 0); }
    KW_CASCADE() { return this.tryGetToken(FlinkSqlParser.KW_CASCADE, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return FlinkSqlParser.RULE_dropDatabase; }
    // @Override
    enterRule(listener) {
        if (listener.enterDropDatabase) {
            listener.enterDropDatabase(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitDropDatabase) {
            listener.exitDropDatabase(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitDropDatabase) {
            return visitor.visitDropDatabase(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class DropViewContext extends ParserRuleContext.ParserRuleContext {
    KW_DROP() { return this.getToken(FlinkSqlParser.KW_DROP, 0); }
    KW_VIEW() { return this.getToken(FlinkSqlParser.KW_VIEW, 0); }
    viewPath() {
        return this.getRuleContext(0, ViewPathContext);
    }
    KW_TEMPORARY() { return this.tryGetToken(FlinkSqlParser.KW_TEMPORARY, 0); }
    ifExists() {
        return this.tryGetRuleContext(0, IfExistsContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return FlinkSqlParser.RULE_dropView; }
    // @Override
    enterRule(listener) {
        if (listener.enterDropView) {
            listener.enterDropView(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitDropView) {
            listener.exitDropView(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitDropView) {
            return visitor.visitDropView(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class DropFunctionContext extends ParserRuleContext.ParserRuleContext {
    KW_DROP() { return this.getToken(FlinkSqlParser.KW_DROP, 0); }
    KW_FUNCTION() { return this.getToken(FlinkSqlParser.KW_FUNCTION, 0); }
    functionName() {
        return this.getRuleContext(0, FunctionNameContext);
    }
    KW_TEMPORARY() { return this.tryGetToken(FlinkSqlParser.KW_TEMPORARY, 0); }
    KW_SYSTEM() { return this.tryGetToken(FlinkSqlParser.KW_SYSTEM, 0); }
    ifExists() {
        return this.tryGetRuleContext(0, IfExistsContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return FlinkSqlParser.RULE_dropFunction; }
    // @Override
    enterRule(listener) {
        if (listener.enterDropFunction) {
            listener.enterDropFunction(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitDropFunction) {
            listener.exitDropFunction(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitDropFunction) {
            return visitor.visitDropFunction(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class InsertStatementContext extends ParserRuleContext.ParserRuleContext {
    insertSimpleStatement() {
        return this.tryGetRuleContext(0, InsertSimpleStatementContext);
    }
    KW_EXECUTE() { return this.tryGetToken(FlinkSqlParser.KW_EXECUTE, 0); }
    insertMulStatementCompatibility() {
        return this.tryGetRuleContext(0, InsertMulStatementCompatibilityContext);
    }
    insertMulStatement() {
        return this.tryGetRuleContext(0, InsertMulStatementContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return FlinkSqlParser.RULE_insertStatement; }
    // @Override
    enterRule(listener) {
        if (listener.enterInsertStatement) {
            listener.enterInsertStatement(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitInsertStatement) {
            listener.exitInsertStatement(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitInsertStatement) {
            return visitor.visitInsertStatement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class InsertSimpleStatementContext extends ParserRuleContext.ParserRuleContext {
    KW_INSERT() { return this.getToken(FlinkSqlParser.KW_INSERT, 0); }
    tablePath() {
        return this.getRuleContext(0, TablePathContext);
    }
    KW_INTO() { return this.tryGetToken(FlinkSqlParser.KW_INTO, 0); }
    KW_OVERWRITE() { return this.tryGetToken(FlinkSqlParser.KW_OVERWRITE, 0); }
    queryStatement() {
        return this.tryGetRuleContext(0, QueryStatementContext);
    }
    valuesDefinition() {
        return this.tryGetRuleContext(0, ValuesDefinitionContext);
    }
    insertPartitionDefinition() {
        return this.tryGetRuleContext(0, InsertPartitionDefinitionContext);
    }
    columnNameList() {
        return this.tryGetRuleContext(0, ColumnNameListContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return FlinkSqlParser.RULE_insertSimpleStatement; }
    // @Override
    enterRule(listener) {
        if (listener.enterInsertSimpleStatement) {
            listener.enterInsertSimpleStatement(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitInsertSimpleStatement) {
            listener.exitInsertSimpleStatement(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitInsertSimpleStatement) {
            return visitor.visitInsertSimpleStatement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class InsertPartitionDefinitionContext extends ParserRuleContext.ParserRuleContext {
    KW_PARTITION() { return this.getToken(FlinkSqlParser.KW_PARTITION, 0); }
    tablePropertyList() {
        return this.getRuleContext(0, TablePropertyListContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return FlinkSqlParser.RULE_insertPartitionDefinition; }
    // @Override
    enterRule(listener) {
        if (listener.enterInsertPartitionDefinition) {
            listener.enterInsertPartitionDefinition(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitInsertPartitionDefinition) {
            listener.exitInsertPartitionDefinition(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitInsertPartitionDefinition) {
            return visitor.visitInsertPartitionDefinition(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class ValuesDefinitionContext extends ParserRuleContext.ParserRuleContext {
    KW_VALUES() { return this.getToken(FlinkSqlParser.KW_VALUES, 0); }
    valuesRowDefinition(i) {
        if (i === undefined) {
            return this.getRuleContexts(ValuesRowDefinitionContext);
        }
        else {
            return this.getRuleContext(i, ValuesRowDefinitionContext);
        }
    }
    COMMA(i) {
        if (i === undefined) {
            return this.getTokens(FlinkSqlParser.COMMA);
        }
        else {
            return this.getToken(FlinkSqlParser.COMMA, i);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return FlinkSqlParser.RULE_valuesDefinition; }
    // @Override
    enterRule(listener) {
        if (listener.enterValuesDefinition) {
            listener.enterValuesDefinition(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitValuesDefinition) {
            listener.exitValuesDefinition(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitValuesDefinition) {
            return visitor.visitValuesDefinition(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class ValuesRowDefinitionContext extends ParserRuleContext.ParserRuleContext {
    LR_BRACKET() { return this.getToken(FlinkSqlParser.LR_BRACKET, 0); }
    constant(i) {
        if (i === undefined) {
            return this.getRuleContexts(ConstantContext);
        }
        else {
            return this.getRuleContext(i, ConstantContext);
        }
    }
    RR_BRACKET() { return this.getToken(FlinkSqlParser.RR_BRACKET, 0); }
    COMMA(i) {
        if (i === undefined) {
            return this.getTokens(FlinkSqlParser.COMMA);
        }
        else {
            return this.getToken(FlinkSqlParser.COMMA, i);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return FlinkSqlParser.RULE_valuesRowDefinition; }
    // @Override
    enterRule(listener) {
        if (listener.enterValuesRowDefinition) {
            listener.enterValuesRowDefinition(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitValuesRowDefinition) {
            listener.exitValuesRowDefinition(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitValuesRowDefinition) {
            return visitor.visitValuesRowDefinition(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class InsertMulStatementCompatibilityContext extends ParserRuleContext.ParserRuleContext {
    KW_BEGIN() { return this.getToken(FlinkSqlParser.KW_BEGIN, 0); }
    KW_STATEMENT() { return this.getToken(FlinkSqlParser.KW_STATEMENT, 0); }
    KW_SET() { return this.getToken(FlinkSqlParser.KW_SET, 0); }
    SEMICOLON(i) {
        if (i === undefined) {
            return this.getTokens(FlinkSqlParser.SEMICOLON);
        }
        else {
            return this.getToken(FlinkSqlParser.SEMICOLON, i);
        }
    }
    KW_END() { return this.getToken(FlinkSqlParser.KW_END, 0); }
    insertSimpleStatement(i) {
        if (i === undefined) {
            return this.getRuleContexts(InsertSimpleStatementContext);
        }
        else {
            return this.getRuleContext(i, InsertSimpleStatementContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return FlinkSqlParser.RULE_insertMulStatementCompatibility; }
    // @Override
    enterRule(listener) {
        if (listener.enterInsertMulStatementCompatibility) {
            listener.enterInsertMulStatementCompatibility(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitInsertMulStatementCompatibility) {
            listener.exitInsertMulStatementCompatibility(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitInsertMulStatementCompatibility) {
            return visitor.visitInsertMulStatementCompatibility(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class InsertMulStatementContext extends ParserRuleContext.ParserRuleContext {
    KW_STATEMENT() { return this.getToken(FlinkSqlParser.KW_STATEMENT, 0); }
    KW_SET() { return this.getToken(FlinkSqlParser.KW_SET, 0); }
    KW_BEGIN() { return this.getToken(FlinkSqlParser.KW_BEGIN, 0); }
    KW_END() { return this.getToken(FlinkSqlParser.KW_END, 0); }
    insertSimpleStatement(i) {
        if (i === undefined) {
            return this.getRuleContexts(InsertSimpleStatementContext);
        }
        else {
            return this.getRuleContext(i, InsertSimpleStatementContext);
        }
    }
    SEMICOLON(i) {
        if (i === undefined) {
            return this.getTokens(FlinkSqlParser.SEMICOLON);
        }
        else {
            return this.getToken(FlinkSqlParser.SEMICOLON, i);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return FlinkSqlParser.RULE_insertMulStatement; }
    // @Override
    enterRule(listener) {
        if (listener.enterInsertMulStatement) {
            listener.enterInsertMulStatement(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitInsertMulStatement) {
            listener.exitInsertMulStatement(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitInsertMulStatement) {
            return visitor.visitInsertMulStatement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class QueryStatementContext extends ParserRuleContext.ParserRuleContext {
    valuesCaluse() {
        return this.tryGetRuleContext(0, ValuesCaluseContext);
    }
    withClause() {
        return this.tryGetRuleContext(0, WithClauseContext);
    }
    queryStatement(i) {
        if (i === undefined) {
            return this.getRuleContexts(QueryStatementContext);
        }
        else {
            return this.getRuleContext(i, QueryStatementContext);
        }
    }
    LR_BRACKET() { return this.tryGetToken(FlinkSqlParser.LR_BRACKET, 0); }
    RR_BRACKET() { return this.tryGetToken(FlinkSqlParser.RR_BRACKET, 0); }
    KW_INTERSECT() { return this.tryGetToken(FlinkSqlParser.KW_INTERSECT, 0); }
    KW_UNION() { return this.tryGetToken(FlinkSqlParser.KW_UNION, 0); }
    KW_EXCEPT() { return this.tryGetToken(FlinkSqlParser.KW_EXCEPT, 0); }
    KW_ALL() { return this.tryGetToken(FlinkSqlParser.KW_ALL, 0); }
    orderByCaluse() {
        return this.tryGetRuleContext(0, OrderByCaluseContext);
    }
    limitClause() {
        return this.tryGetRuleContext(0, LimitClauseContext);
    }
    selectClause() {
        return this.tryGetRuleContext(0, SelectClauseContext);
    }
    selectStatement() {
        return this.tryGetRuleContext(0, SelectStatementContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return FlinkSqlParser.RULE_queryStatement; }
    // @Override
    enterRule(listener) {
        if (listener.enterQueryStatement) {
            listener.enterQueryStatement(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitQueryStatement) {
            listener.exitQueryStatement(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitQueryStatement) {
            return visitor.visitQueryStatement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class ValuesCaluseContext extends ParserRuleContext.ParserRuleContext {
    KW_VALUES() { return this.getToken(FlinkSqlParser.KW_VALUES, 0); }
    expression(i) {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }
        else {
            return this.getRuleContext(i, ExpressionContext);
        }
    }
    COMMA(i) {
        if (i === undefined) {
            return this.getTokens(FlinkSqlParser.COMMA);
        }
        else {
            return this.getToken(FlinkSqlParser.COMMA, i);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return FlinkSqlParser.RULE_valuesCaluse; }
    // @Override
    enterRule(listener) {
        if (listener.enterValuesCaluse) {
            listener.enterValuesCaluse(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitValuesCaluse) {
            listener.exitValuesCaluse(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitValuesCaluse) {
            return visitor.visitValuesCaluse(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class WithClauseContext extends ParserRuleContext.ParserRuleContext {
    KW_WITH() { return this.getToken(FlinkSqlParser.KW_WITH, 0); }
    withItem(i) {
        if (i === undefined) {
            return this.getRuleContexts(WithItemContext);
        }
        else {
            return this.getRuleContext(i, WithItemContext);
        }
    }
    COMMA(i) {
        if (i === undefined) {
            return this.getTokens(FlinkSqlParser.COMMA);
        }
        else {
            return this.getToken(FlinkSqlParser.COMMA, i);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return FlinkSqlParser.RULE_withClause; }
    // @Override
    enterRule(listener) {
        if (listener.enterWithClause) {
            listener.enterWithClause(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitWithClause) {
            listener.exitWithClause(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitWithClause) {
            return visitor.visitWithClause(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class WithItemContext extends ParserRuleContext.ParserRuleContext {
    withItemName() {
        return this.getRuleContext(0, WithItemNameContext);
    }
    KW_AS() { return this.getToken(FlinkSqlParser.KW_AS, 0); }
    LR_BRACKET(i) {
        if (i === undefined) {
            return this.getTokens(FlinkSqlParser.LR_BRACKET);
        }
        else {
            return this.getToken(FlinkSqlParser.LR_BRACKET, i);
        }
    }
    queryStatement() {
        return this.getRuleContext(0, QueryStatementContext);
    }
    RR_BRACKET(i) {
        if (i === undefined) {
            return this.getTokens(FlinkSqlParser.RR_BRACKET);
        }
        else {
            return this.getToken(FlinkSqlParser.RR_BRACKET, i);
        }
    }
    columnName(i) {
        if (i === undefined) {
            return this.getRuleContexts(ColumnNameContext);
        }
        else {
            return this.getRuleContext(i, ColumnNameContext);
        }
    }
    COMMA(i) {
        if (i === undefined) {
            return this.getTokens(FlinkSqlParser.COMMA);
        }
        else {
            return this.getToken(FlinkSqlParser.COMMA, i);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return FlinkSqlParser.RULE_withItem; }
    // @Override
    enterRule(listener) {
        if (listener.enterWithItem) {
            listener.enterWithItem(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitWithItem) {
            listener.exitWithItem(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitWithItem) {
            return visitor.visitWithItem(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class WithItemNameContext extends ParserRuleContext.ParserRuleContext {
    identifier() {
        return this.getRuleContext(0, IdentifierContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return FlinkSqlParser.RULE_withItemName; }
    // @Override
    enterRule(listener) {
        if (listener.enterWithItemName) {
            listener.enterWithItemName(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitWithItemName) {
            listener.exitWithItemName(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitWithItemName) {
            return visitor.visitWithItemName(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class SelectStatementContext extends ParserRuleContext.ParserRuleContext {
    selectClause() {
        return this.getRuleContext(0, SelectClauseContext);
    }
    fromClause() {
        return this.tryGetRuleContext(0, FromClauseContext);
    }
    whereClause() {
        return this.tryGetRuleContext(0, WhereClauseContext);
    }
    groupByClause() {
        return this.tryGetRuleContext(0, GroupByClauseContext);
    }
    havingClause() {
        return this.tryGetRuleContext(0, HavingClauseContext);
    }
    windowClause() {
        return this.tryGetRuleContext(0, WindowClauseContext);
    }
    matchRecognizeClause() {
        return this.tryGetRuleContext(0, MatchRecognizeClauseContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return FlinkSqlParser.RULE_selectStatement; }
    // @Override
    enterRule(listener) {
        if (listener.enterSelectStatement) {
            listener.enterSelectStatement(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitSelectStatement) {
            listener.exitSelectStatement(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitSelectStatement) {
            return visitor.visitSelectStatement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class SelectClauseContext extends ParserRuleContext.ParserRuleContext {
    KW_SELECT() { return this.getToken(FlinkSqlParser.KW_SELECT, 0); }
    ASTERISK_SIGN() { return this.tryGetToken(FlinkSqlParser.ASTERISK_SIGN, 0); }
    projectItemDefinition(i) {
        if (i === undefined) {
            return this.getRuleContexts(ProjectItemDefinitionContext);
        }
        else {
            return this.getRuleContext(i, ProjectItemDefinitionContext);
        }
    }
    setQuantifier() {
        return this.tryGetRuleContext(0, SetQuantifierContext);
    }
    COMMA(i) {
        if (i === undefined) {
            return this.getTokens(FlinkSqlParser.COMMA);
        }
        else {
            return this.getToken(FlinkSqlParser.COMMA, i);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return FlinkSqlParser.RULE_selectClause; }
    // @Override
    enterRule(listener) {
        if (listener.enterSelectClause) {
            listener.enterSelectClause(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitSelectClause) {
            listener.exitSelectClause(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitSelectClause) {
            return visitor.visitSelectClause(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class ProjectItemDefinitionContext extends ParserRuleContext.ParserRuleContext {
    overWindowItem() {
        return this.tryGetRuleContext(0, OverWindowItemContext);
    }
    columnName() {
        return this.tryGetRuleContext(0, ColumnNameContext);
    }
    expression() {
        return this.tryGetRuleContext(0, ExpressionContext);
    }
    KW_AS() { return this.tryGetToken(FlinkSqlParser.KW_AS, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return FlinkSqlParser.RULE_projectItemDefinition; }
    // @Override
    enterRule(listener) {
        if (listener.enterProjectItemDefinition) {
            listener.enterProjectItemDefinition(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitProjectItemDefinition) {
            listener.exitProjectItemDefinition(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitProjectItemDefinition) {
            return visitor.visitProjectItemDefinition(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class OverWindowItemContext extends ParserRuleContext.ParserRuleContext {
    primaryExpression() {
        return this.getRuleContext(0, PrimaryExpressionContext);
    }
    KW_OVER() { return this.getToken(FlinkSqlParser.KW_OVER, 0); }
    windowSpec() {
        return this.tryGetRuleContext(0, WindowSpecContext);
    }
    KW_AS() { return this.getToken(FlinkSqlParser.KW_AS, 0); }
    identifier() {
        return this.getRuleContext(0, IdentifierContext);
    }
    errorCapturingIdentifier() {
        return this.tryGetRuleContext(0, ErrorCapturingIdentifierContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return FlinkSqlParser.RULE_overWindowItem; }
    // @Override
    enterRule(listener) {
        if (listener.enterOverWindowItem) {
            listener.enterOverWindowItem(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitOverWindowItem) {
            listener.exitOverWindowItem(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitOverWindowItem) {
            return visitor.visitOverWindowItem(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class FromClauseContext extends ParserRuleContext.ParserRuleContext {
    KW_FROM() { return this.getToken(FlinkSqlParser.KW_FROM, 0); }
    tableExpression() {
        return this.getRuleContext(0, TableExpressionContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return FlinkSqlParser.RULE_fromClause; }
    // @Override
    enterRule(listener) {
        if (listener.enterFromClause) {
            listener.enterFromClause(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitFromClause) {
            listener.exitFromClause(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitFromClause) {
            return visitor.visitFromClause(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class TableExpressionContext extends ParserRuleContext.ParserRuleContext {
    tableReference(i) {
        if (i === undefined) {
            return this.getRuleContexts(TableReferenceContext);
        }
        else {
            return this.getRuleContext(i, TableReferenceContext);
        }
    }
    COMMA(i) {
        if (i === undefined) {
            return this.getTokens(FlinkSqlParser.COMMA);
        }
        else {
            return this.getToken(FlinkSqlParser.COMMA, i);
        }
    }
    tableExpression(i) {
        if (i === undefined) {
            return this.getRuleContexts(TableExpressionContext);
        }
        else {
            return this.getRuleContext(i, TableExpressionContext);
        }
    }
    KW_JOIN() { return this.tryGetToken(FlinkSqlParser.KW_JOIN, 0); }
    KW_NATURAL() { return this.tryGetToken(FlinkSqlParser.KW_NATURAL, 0); }
    KW_OUTER() { return this.tryGetToken(FlinkSqlParser.KW_OUTER, 0); }
    joinCondition() {
        return this.tryGetRuleContext(0, JoinConditionContext);
    }
    KW_LEFT() { return this.tryGetToken(FlinkSqlParser.KW_LEFT, 0); }
    KW_RIGHT() { return this.tryGetToken(FlinkSqlParser.KW_RIGHT, 0); }
    KW_FULL() { return this.tryGetToken(FlinkSqlParser.KW_FULL, 0); }
    KW_INNER() { return this.tryGetToken(FlinkSqlParser.KW_INNER, 0); }
    KW_CROSS() { return this.tryGetToken(FlinkSqlParser.KW_CROSS, 0); }
    inlineDataValueClause() {
        return this.tryGetRuleContext(0, InlineDataValueClauseContext);
    }
    windoTVFClause() {
        return this.tryGetRuleContext(0, WindoTVFClauseContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return FlinkSqlParser.RULE_tableExpression; }
    // @Override
    enterRule(listener) {
        if (listener.enterTableExpression) {
            listener.enterTableExpression(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitTableExpression) {
            listener.exitTableExpression(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitTableExpression) {
            return visitor.visitTableExpression(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class TableReferenceContext extends ParserRuleContext.ParserRuleContext {
    tablePrimary() {
        return this.getRuleContext(0, TablePrimaryContext);
    }
    tableAlias() {
        return this.tryGetRuleContext(0, TableAliasContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return FlinkSqlParser.RULE_tableReference; }
    // @Override
    enterRule(listener) {
        if (listener.enterTableReference) {
            listener.enterTableReference(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitTableReference) {
            listener.exitTableReference(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitTableReference) {
            return visitor.visitTableReference(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class TablePrimaryContext extends ParserRuleContext.ParserRuleContext {
    tablePath() {
        return this.tryGetRuleContext(0, TablePathContext);
    }
    KW_TABLE() { return this.tryGetToken(FlinkSqlParser.KW_TABLE, 0); }
    systemTimePeriod() {
        return this.tryGetRuleContext(0, SystemTimePeriodContext);
    }
    correlationName() {
        return this.tryGetRuleContext(0, CorrelationNameContext);
    }
    KW_AS() { return this.tryGetToken(FlinkSqlParser.KW_AS, 0); }
    viewPath() {
        return this.tryGetRuleContext(0, ViewPathContext);
    }
    KW_LATERAL() { return this.tryGetToken(FlinkSqlParser.KW_LATERAL, 0); }
    LR_BRACKET(i) {
        if (i === undefined) {
            return this.getTokens(FlinkSqlParser.LR_BRACKET);
        }
        else {
            return this.getToken(FlinkSqlParser.LR_BRACKET, i);
        }
    }
    functionName() {
        return this.tryGetRuleContext(0, FunctionNameContext);
    }
    functionParam(i) {
        if (i === undefined) {
            return this.getRuleContexts(FunctionParamContext);
        }
        else {
            return this.getRuleContext(i, FunctionParamContext);
        }
    }
    RR_BRACKET(i) {
        if (i === undefined) {
            return this.getTokens(FlinkSqlParser.RR_BRACKET);
        }
        else {
            return this.getToken(FlinkSqlParser.RR_BRACKET, i);
        }
    }
    COMMA(i) {
        if (i === undefined) {
            return this.getTokens(FlinkSqlParser.COMMA);
        }
        else {
            return this.getToken(FlinkSqlParser.COMMA, i);
        }
    }
    queryStatement() {
        return this.tryGetRuleContext(0, QueryStatementContext);
    }
    KW_UNNEST() { return this.tryGetToken(FlinkSqlParser.KW_UNNEST, 0); }
    expression() {
        return this.tryGetRuleContext(0, ExpressionContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return FlinkSqlParser.RULE_tablePrimary; }
    // @Override
    enterRule(listener) {
        if (listener.enterTablePrimary) {
            listener.enterTablePrimary(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitTablePrimary) {
            listener.exitTablePrimary(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitTablePrimary) {
            return visitor.visitTablePrimary(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class SystemTimePeriodContext extends ParserRuleContext.ParserRuleContext {
    KW_FOR() { return this.getToken(FlinkSqlParser.KW_FOR, 0); }
    KW_SYSTEM_TIME() { return this.getToken(FlinkSqlParser.KW_SYSTEM_TIME, 0); }
    KW_AS() { return this.getToken(FlinkSqlParser.KW_AS, 0); }
    KW_OF() { return this.getToken(FlinkSqlParser.KW_OF, 0); }
    dateTimeExpression() {
        return this.getRuleContext(0, DateTimeExpressionContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return FlinkSqlParser.RULE_systemTimePeriod; }
    // @Override
    enterRule(listener) {
        if (listener.enterSystemTimePeriod) {
            listener.enterSystemTimePeriod(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitSystemTimePeriod) {
            listener.exitSystemTimePeriod(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitSystemTimePeriod) {
            return visitor.visitSystemTimePeriod(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class DateTimeExpressionContext extends ParserRuleContext.ParserRuleContext {
    expression() {
        return this.getRuleContext(0, ExpressionContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return FlinkSqlParser.RULE_dateTimeExpression; }
    // @Override
    enterRule(listener) {
        if (listener.enterDateTimeExpression) {
            listener.enterDateTimeExpression(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitDateTimeExpression) {
            listener.exitDateTimeExpression(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitDateTimeExpression) {
            return visitor.visitDateTimeExpression(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class InlineDataValueClauseContext extends ParserRuleContext.ParserRuleContext {
    LR_BRACKET() { return this.getToken(FlinkSqlParser.LR_BRACKET, 0); }
    valuesDefinition() {
        return this.getRuleContext(0, ValuesDefinitionContext);
    }
    RR_BRACKET() { return this.getToken(FlinkSqlParser.RR_BRACKET, 0); }
    tableAlias() {
        return this.getRuleContext(0, TableAliasContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return FlinkSqlParser.RULE_inlineDataValueClause; }
    // @Override
    enterRule(listener) {
        if (listener.enterInlineDataValueClause) {
            listener.enterInlineDataValueClause(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitInlineDataValueClause) {
            listener.exitInlineDataValueClause(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitInlineDataValueClause) {
            return visitor.visitInlineDataValueClause(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class WindoTVFClauseContext extends ParserRuleContext.ParserRuleContext {
    KW_TABLE() { return this.getToken(FlinkSqlParser.KW_TABLE, 0); }
    LR_BRACKET() { return this.getToken(FlinkSqlParser.LR_BRACKET, 0); }
    windowTVFExression() {
        return this.getRuleContext(0, WindowTVFExressionContext);
    }
    RR_BRACKET() { return this.getToken(FlinkSqlParser.RR_BRACKET, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return FlinkSqlParser.RULE_windoTVFClause; }
    // @Override
    enterRule(listener) {
        if (listener.enterWindoTVFClause) {
            listener.enterWindoTVFClause(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitWindoTVFClause) {
            listener.exitWindoTVFClause(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitWindoTVFClause) {
            return visitor.visitWindoTVFClause(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class WindowTVFExressionContext extends ParserRuleContext.ParserRuleContext {
    windoTVFName() {
        return this.getRuleContext(0, WindoTVFNameContext);
    }
    LR_BRACKET() { return this.getToken(FlinkSqlParser.LR_BRACKET, 0); }
    windowTVFParam(i) {
        if (i === undefined) {
            return this.getRuleContexts(WindowTVFParamContext);
        }
        else {
            return this.getRuleContext(i, WindowTVFParamContext);
        }
    }
    RR_BRACKET() { return this.getToken(FlinkSqlParser.RR_BRACKET, 0); }
    COMMA(i) {
        if (i === undefined) {
            return this.getTokens(FlinkSqlParser.COMMA);
        }
        else {
            return this.getToken(FlinkSqlParser.COMMA, i);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return FlinkSqlParser.RULE_windowTVFExression; }
    // @Override
    enterRule(listener) {
        if (listener.enterWindowTVFExression) {
            listener.enterWindowTVFExression(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitWindowTVFExression) {
            listener.exitWindowTVFExression(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitWindowTVFExression) {
            return visitor.visitWindowTVFExression(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class WindoTVFNameContext extends ParserRuleContext.ParserRuleContext {
    KW_TUMBLE() { return this.tryGetToken(FlinkSqlParser.KW_TUMBLE, 0); }
    KW_HOP() { return this.tryGetToken(FlinkSqlParser.KW_HOP, 0); }
    KW_CUMULATE() { return this.tryGetToken(FlinkSqlParser.KW_CUMULATE, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return FlinkSqlParser.RULE_windoTVFName; }
    // @Override
    enterRule(listener) {
        if (listener.enterWindoTVFName) {
            listener.enterWindoTVFName(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitWindoTVFName) {
            listener.exitWindoTVFName(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitWindoTVFName) {
            return visitor.visitWindoTVFName(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class WindowTVFParamContext extends ParserRuleContext.ParserRuleContext {
    KW_TABLE() { return this.tryGetToken(FlinkSqlParser.KW_TABLE, 0); }
    timeAttrColumn() {
        return this.tryGetRuleContext(0, TimeAttrColumnContext);
    }
    columnDescriptor() {
        return this.tryGetRuleContext(0, ColumnDescriptorContext);
    }
    timeIntervalExpression() {
        return this.tryGetRuleContext(0, TimeIntervalExpressionContext);
    }
    KW_DATA() { return this.tryGetToken(FlinkSqlParser.KW_DATA, 0); }
    DOUBLE_RIGHT_ARROW() { return this.tryGetToken(FlinkSqlParser.DOUBLE_RIGHT_ARROW, 0); }
    KW_TIMECOL() { return this.tryGetToken(FlinkSqlParser.KW_TIMECOL, 0); }
    timeIntervalParamName() {
        return this.tryGetRuleContext(0, TimeIntervalParamNameContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return FlinkSqlParser.RULE_windowTVFParam; }
    // @Override
    enterRule(listener) {
        if (listener.enterWindowTVFParam) {
            listener.enterWindowTVFParam(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitWindowTVFParam) {
            listener.exitWindowTVFParam(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitWindowTVFParam) {
            return visitor.visitWindowTVFParam(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class TimeIntervalParamNameContext extends ParserRuleContext.ParserRuleContext {
    KW_DATA() { return this.tryGetToken(FlinkSqlParser.KW_DATA, 0); }
    KW_TIMECOL() { return this.tryGetToken(FlinkSqlParser.KW_TIMECOL, 0); }
    KW_SIZE() { return this.tryGetToken(FlinkSqlParser.KW_SIZE, 0); }
    KW_OFFSET() { return this.tryGetToken(FlinkSqlParser.KW_OFFSET, 0); }
    KW_STEP() { return this.tryGetToken(FlinkSqlParser.KW_STEP, 0); }
    KW_SLIDE() { return this.tryGetToken(FlinkSqlParser.KW_SLIDE, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return FlinkSqlParser.RULE_timeIntervalParamName; }
    // @Override
    enterRule(listener) {
        if (listener.enterTimeIntervalParamName) {
            listener.enterTimeIntervalParamName(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitTimeIntervalParamName) {
            listener.exitTimeIntervalParamName(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitTimeIntervalParamName) {
            return visitor.visitTimeIntervalParamName(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class ColumnDescriptorContext extends ParserRuleContext.ParserRuleContext {
    KW_DESCRIPTOR() { return this.getToken(FlinkSqlParser.KW_DESCRIPTOR, 0); }
    LR_BRACKET() { return this.getToken(FlinkSqlParser.LR_BRACKET, 0); }
    columnName() {
        return this.getRuleContext(0, ColumnNameContext);
    }
    RR_BRACKET() { return this.getToken(FlinkSqlParser.RR_BRACKET, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return FlinkSqlParser.RULE_columnDescriptor; }
    // @Override
    enterRule(listener) {
        if (listener.enterColumnDescriptor) {
            listener.enterColumnDescriptor(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitColumnDescriptor) {
            listener.exitColumnDescriptor(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitColumnDescriptor) {
            return visitor.visitColumnDescriptor(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class JoinConditionContext extends ParserRuleContext.ParserRuleContext {
    KW_ON() { return this.tryGetToken(FlinkSqlParser.KW_ON, 0); }
    booleanExpression() {
        return this.tryGetRuleContext(0, BooleanExpressionContext);
    }
    KW_USING() { return this.tryGetToken(FlinkSqlParser.KW_USING, 0); }
    columnNameList() {
        return this.tryGetRuleContext(0, ColumnNameListContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return FlinkSqlParser.RULE_joinCondition; }
    // @Override
    enterRule(listener) {
        if (listener.enterJoinCondition) {
            listener.enterJoinCondition(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitJoinCondition) {
            listener.exitJoinCondition(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitJoinCondition) {
            return visitor.visitJoinCondition(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class WhereClauseContext extends ParserRuleContext.ParserRuleContext {
    KW_WHERE() { return this.getToken(FlinkSqlParser.KW_WHERE, 0); }
    booleanExpression() {
        return this.getRuleContext(0, BooleanExpressionContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return FlinkSqlParser.RULE_whereClause; }
    // @Override
    enterRule(listener) {
        if (listener.enterWhereClause) {
            listener.enterWhereClause(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitWhereClause) {
            listener.exitWhereClause(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitWhereClause) {
            return visitor.visitWhereClause(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class GroupByClauseContext extends ParserRuleContext.ParserRuleContext {
    KW_GROUP() { return this.getToken(FlinkSqlParser.KW_GROUP, 0); }
    KW_BY() { return this.getToken(FlinkSqlParser.KW_BY, 0); }
    groupItemDefinition(i) {
        if (i === undefined) {
            return this.getRuleContexts(GroupItemDefinitionContext);
        }
        else {
            return this.getRuleContext(i, GroupItemDefinitionContext);
        }
    }
    COMMA(i) {
        if (i === undefined) {
            return this.getTokens(FlinkSqlParser.COMMA);
        }
        else {
            return this.getToken(FlinkSqlParser.COMMA, i);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return FlinkSqlParser.RULE_groupByClause; }
    // @Override
    enterRule(listener) {
        if (listener.enterGroupByClause) {
            listener.enterGroupByClause(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitGroupByClause) {
            listener.exitGroupByClause(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitGroupByClause) {
            return visitor.visitGroupByClause(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class GroupItemDefinitionContext extends ParserRuleContext.ParserRuleContext {
    columnName() {
        return this.tryGetRuleContext(0, ColumnNameContext);
    }
    groupWindowFunction() {
        return this.tryGetRuleContext(0, GroupWindowFunctionContext);
    }
    LR_BRACKET() { return this.tryGetToken(FlinkSqlParser.LR_BRACKET, 0); }
    RR_BRACKET() { return this.tryGetToken(FlinkSqlParser.RR_BRACKET, 0); }
    expression(i) {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }
        else {
            return this.getRuleContext(i, ExpressionContext);
        }
    }
    COMMA(i) {
        if (i === undefined) {
            return this.getTokens(FlinkSqlParser.COMMA);
        }
        else {
            return this.getToken(FlinkSqlParser.COMMA, i);
        }
    }
    groupingSetsNotaionName() {
        return this.tryGetRuleContext(0, GroupingSetsNotaionNameContext);
    }
    groupingSets() {
        return this.tryGetRuleContext(0, GroupingSetsContext);
    }
    groupItemDefinition(i) {
        if (i === undefined) {
            return this.getRuleContexts(GroupItemDefinitionContext);
        }
        else {
            return this.getRuleContext(i, GroupItemDefinitionContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return FlinkSqlParser.RULE_groupItemDefinition; }
    // @Override
    enterRule(listener) {
        if (listener.enterGroupItemDefinition) {
            listener.enterGroupItemDefinition(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitGroupItemDefinition) {
            listener.exitGroupItemDefinition(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitGroupItemDefinition) {
            return visitor.visitGroupItemDefinition(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class GroupingSetsContext extends ParserRuleContext.ParserRuleContext {
    KW_GROUPING() { return this.getToken(FlinkSqlParser.KW_GROUPING, 0); }
    KW_SETS() { return this.getToken(FlinkSqlParser.KW_SETS, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return FlinkSqlParser.RULE_groupingSets; }
    // @Override
    enterRule(listener) {
        if (listener.enterGroupingSets) {
            listener.enterGroupingSets(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitGroupingSets) {
            listener.exitGroupingSets(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitGroupingSets) {
            return visitor.visitGroupingSets(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class GroupingSetsNotaionNameContext extends ParserRuleContext.ParserRuleContext {
    KW_CUBE() { return this.tryGetToken(FlinkSqlParser.KW_CUBE, 0); }
    KW_ROLLUP() { return this.tryGetToken(FlinkSqlParser.KW_ROLLUP, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return FlinkSqlParser.RULE_groupingSetsNotaionName; }
    // @Override
    enterRule(listener) {
        if (listener.enterGroupingSetsNotaionName) {
            listener.enterGroupingSetsNotaionName(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitGroupingSetsNotaionName) {
            listener.exitGroupingSetsNotaionName(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitGroupingSetsNotaionName) {
            return visitor.visitGroupingSetsNotaionName(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class GroupWindowFunctionContext extends ParserRuleContext.ParserRuleContext {
    groupWindowFunctionName() {
        return this.getRuleContext(0, GroupWindowFunctionNameContext);
    }
    LR_BRACKET() { return this.getToken(FlinkSqlParser.LR_BRACKET, 0); }
    timeAttrColumn() {
        return this.getRuleContext(0, TimeAttrColumnContext);
    }
    COMMA() { return this.getToken(FlinkSqlParser.COMMA, 0); }
    timeIntervalExpression() {
        return this.getRuleContext(0, TimeIntervalExpressionContext);
    }
    RR_BRACKET() { return this.getToken(FlinkSqlParser.RR_BRACKET, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return FlinkSqlParser.RULE_groupWindowFunction; }
    // @Override
    enterRule(listener) {
        if (listener.enterGroupWindowFunction) {
            listener.enterGroupWindowFunction(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitGroupWindowFunction) {
            listener.exitGroupWindowFunction(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitGroupWindowFunction) {
            return visitor.visitGroupWindowFunction(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class GroupWindowFunctionNameContext extends ParserRuleContext.ParserRuleContext {
    KW_TUMBLE() { return this.tryGetToken(FlinkSqlParser.KW_TUMBLE, 0); }
    KW_HOP() { return this.tryGetToken(FlinkSqlParser.KW_HOP, 0); }
    KW_SESSION() { return this.tryGetToken(FlinkSqlParser.KW_SESSION, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return FlinkSqlParser.RULE_groupWindowFunctionName; }
    // @Override
    enterRule(listener) {
        if (listener.enterGroupWindowFunctionName) {
            listener.enterGroupWindowFunctionName(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitGroupWindowFunctionName) {
            listener.exitGroupWindowFunctionName(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitGroupWindowFunctionName) {
            return visitor.visitGroupWindowFunctionName(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class TimeAttrColumnContext extends ParserRuleContext.ParserRuleContext {
    uid() {
        return this.getRuleContext(0, UidContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return FlinkSqlParser.RULE_timeAttrColumn; }
    // @Override
    enterRule(listener) {
        if (listener.enterTimeAttrColumn) {
            listener.enterTimeAttrColumn(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitTimeAttrColumn) {
            listener.exitTimeAttrColumn(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitTimeAttrColumn) {
            return visitor.visitTimeAttrColumn(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class HavingClauseContext extends ParserRuleContext.ParserRuleContext {
    KW_HAVING() { return this.getToken(FlinkSqlParser.KW_HAVING, 0); }
    booleanExpression() {
        return this.getRuleContext(0, BooleanExpressionContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return FlinkSqlParser.RULE_havingClause; }
    // @Override
    enterRule(listener) {
        if (listener.enterHavingClause) {
            listener.enterHavingClause(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitHavingClause) {
            listener.exitHavingClause(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitHavingClause) {
            return visitor.visitHavingClause(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class WindowClauseContext extends ParserRuleContext.ParserRuleContext {
    KW_WINDOW() { return this.getToken(FlinkSqlParser.KW_WINDOW, 0); }
    namedWindow(i) {
        if (i === undefined) {
            return this.getRuleContexts(NamedWindowContext);
        }
        else {
            return this.getRuleContext(i, NamedWindowContext);
        }
    }
    COMMA(i) {
        if (i === undefined) {
            return this.getTokens(FlinkSqlParser.COMMA);
        }
        else {
            return this.getToken(FlinkSqlParser.COMMA, i);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return FlinkSqlParser.RULE_windowClause; }
    // @Override
    enterRule(listener) {
        if (listener.enterWindowClause) {
            listener.enterWindowClause(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitWindowClause) {
            listener.exitWindowClause(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitWindowClause) {
            return visitor.visitWindowClause(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class NamedWindowContext extends ParserRuleContext.ParserRuleContext {
    KW_AS() { return this.getToken(FlinkSqlParser.KW_AS, 0); }
    windowSpec() {
        return this.getRuleContext(0, WindowSpecContext);
    }
    errorCapturingIdentifier() {
        return this.getRuleContext(0, ErrorCapturingIdentifierContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return FlinkSqlParser.RULE_namedWindow; }
    // @Override
    enterRule(listener) {
        if (listener.enterNamedWindow) {
            listener.enterNamedWindow(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitNamedWindow) {
            listener.exitNamedWindow(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitNamedWindow) {
            return visitor.visitNamedWindow(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class WindowSpecContext extends ParserRuleContext.ParserRuleContext {
    LR_BRACKET() { return this.getToken(FlinkSqlParser.LR_BRACKET, 0); }
    RR_BRACKET() { return this.getToken(FlinkSqlParser.RR_BRACKET, 0); }
    partitionByClause() {
        return this.tryGetRuleContext(0, PartitionByClauseContext);
    }
    orderByCaluse() {
        return this.tryGetRuleContext(0, OrderByCaluseContext);
    }
    windowFrame() {
        return this.tryGetRuleContext(0, WindowFrameContext);
    }
    errorCapturingIdentifier() {
        return this.tryGetRuleContext(0, ErrorCapturingIdentifierContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return FlinkSqlParser.RULE_windowSpec; }
    // @Override
    enterRule(listener) {
        if (listener.enterWindowSpec) {
            listener.enterWindowSpec(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitWindowSpec) {
            listener.exitWindowSpec(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitWindowSpec) {
            return visitor.visitWindowSpec(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class MatchRecognizeClauseContext extends ParserRuleContext.ParserRuleContext {
    KW_MATCH_RECOGNIZE() { return this.getToken(FlinkSqlParser.KW_MATCH_RECOGNIZE, 0); }
    LR_BRACKET() { return this.getToken(FlinkSqlParser.LR_BRACKET, 0); }
    patternVariablesDefination() {
        return this.getRuleContext(0, PatternVariablesDefinationContext);
    }
    RR_BRACKET() { return this.getToken(FlinkSqlParser.RR_BRACKET, 0); }
    partitionByClause() {
        return this.tryGetRuleContext(0, PartitionByClauseContext);
    }
    orderByCaluse() {
        return this.tryGetRuleContext(0, OrderByCaluseContext);
    }
    measuresClause() {
        return this.tryGetRuleContext(0, MeasuresClauseContext);
    }
    outputMode() {
        return this.tryGetRuleContext(0, OutputModeContext);
    }
    afterMatchStrategy() {
        return this.tryGetRuleContext(0, AfterMatchStrategyContext);
    }
    patternDefination() {
        return this.tryGetRuleContext(0, PatternDefinationContext);
    }
    identifier() {
        return this.tryGetRuleContext(0, IdentifierContext);
    }
    KW_AS() { return this.tryGetToken(FlinkSqlParser.KW_AS, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return FlinkSqlParser.RULE_matchRecognizeClause; }
    // @Override
    enterRule(listener) {
        if (listener.enterMatchRecognizeClause) {
            listener.enterMatchRecognizeClause(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitMatchRecognizeClause) {
            listener.exitMatchRecognizeClause(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitMatchRecognizeClause) {
            return visitor.visitMatchRecognizeClause(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class OrderByCaluseContext extends ParserRuleContext.ParserRuleContext {
    KW_ORDER() { return this.getToken(FlinkSqlParser.KW_ORDER, 0); }
    KW_BY() { return this.getToken(FlinkSqlParser.KW_BY, 0); }
    orderItemDefition(i) {
        if (i === undefined) {
            return this.getRuleContexts(OrderItemDefitionContext);
        }
        else {
            return this.getRuleContext(i, OrderItemDefitionContext);
        }
    }
    COMMA(i) {
        if (i === undefined) {
            return this.getTokens(FlinkSqlParser.COMMA);
        }
        else {
            return this.getToken(FlinkSqlParser.COMMA, i);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return FlinkSqlParser.RULE_orderByCaluse; }
    // @Override
    enterRule(listener) {
        if (listener.enterOrderByCaluse) {
            listener.enterOrderByCaluse(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitOrderByCaluse) {
            listener.exitOrderByCaluse(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitOrderByCaluse) {
            return visitor.visitOrderByCaluse(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class OrderItemDefitionContext extends ParserRuleContext.ParserRuleContext {
    columnName() {
        return this.getRuleContext(0, ColumnNameContext);
    }
    KW_NULLS() { return this.tryGetToken(FlinkSqlParser.KW_NULLS, 0); }
    KW_ASC() { return this.tryGetToken(FlinkSqlParser.KW_ASC, 0); }
    KW_DESC() { return this.tryGetToken(FlinkSqlParser.KW_DESC, 0); }
    KW_LAST() { return this.tryGetToken(FlinkSqlParser.KW_LAST, 0); }
    KW_FIRST() { return this.tryGetToken(FlinkSqlParser.KW_FIRST, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return FlinkSqlParser.RULE_orderItemDefition; }
    // @Override
    enterRule(listener) {
        if (listener.enterOrderItemDefition) {
            listener.enterOrderItemDefition(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitOrderItemDefition) {
            listener.exitOrderItemDefition(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitOrderItemDefition) {
            return visitor.visitOrderItemDefition(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class LimitClauseContext extends ParserRuleContext.ParserRuleContext {
    KW_LIMIT() { return this.getToken(FlinkSqlParser.KW_LIMIT, 0); }
    KW_ALL() { return this.tryGetToken(FlinkSqlParser.KW_ALL, 0); }
    expression() {
        return this.tryGetRuleContext(0, ExpressionContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return FlinkSqlParser.RULE_limitClause; }
    // @Override
    enterRule(listener) {
        if (listener.enterLimitClause) {
            listener.enterLimitClause(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitLimitClause) {
            listener.exitLimitClause(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitLimitClause) {
            return visitor.visitLimitClause(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class PartitionByClauseContext extends ParserRuleContext.ParserRuleContext {
    KW_PARTITION() { return this.getToken(FlinkSqlParser.KW_PARTITION, 0); }
    KW_BY() { return this.getToken(FlinkSqlParser.KW_BY, 0); }
    columnName(i) {
        if (i === undefined) {
            return this.getRuleContexts(ColumnNameContext);
        }
        else {
            return this.getRuleContext(i, ColumnNameContext);
        }
    }
    COMMA(i) {
        if (i === undefined) {
            return this.getTokens(FlinkSqlParser.COMMA);
        }
        else {
            return this.getToken(FlinkSqlParser.COMMA, i);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return FlinkSqlParser.RULE_partitionByClause; }
    // @Override
    enterRule(listener) {
        if (listener.enterPartitionByClause) {
            listener.enterPartitionByClause(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitPartitionByClause) {
            listener.exitPartitionByClause(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitPartitionByClause) {
            return visitor.visitPartitionByClause(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class QuantifiersContext extends ParserRuleContext.ParserRuleContext {
    ASTERISK_SIGN() { return this.tryGetToken(FlinkSqlParser.ASTERISK_SIGN, 0); }
    ADD_SIGN() { return this.tryGetToken(FlinkSqlParser.ADD_SIGN, 0); }
    QUESTION_MARK_SIGN() { return this.tryGetToken(FlinkSqlParser.QUESTION_MARK_SIGN, 0); }
    LB_BRACKET() { return this.tryGetToken(FlinkSqlParser.LB_BRACKET, 0); }
    DIG_LITERAL(i) {
        if (i === undefined) {
            return this.getTokens(FlinkSqlParser.DIG_LITERAL);
        }
        else {
            return this.getToken(FlinkSqlParser.DIG_LITERAL, i);
        }
    }
    COMMA() { return this.tryGetToken(FlinkSqlParser.COMMA, 0); }
    RB_BRACKET() { return this.tryGetToken(FlinkSqlParser.RB_BRACKET, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return FlinkSqlParser.RULE_quantifiers; }
    // @Override
    enterRule(listener) {
        if (listener.enterQuantifiers) {
            listener.enterQuantifiers(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitQuantifiers) {
            listener.exitQuantifiers(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitQuantifiers) {
            return visitor.visitQuantifiers(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class MeasuresClauseContext extends ParserRuleContext.ParserRuleContext {
    KW_MEASURES() { return this.getToken(FlinkSqlParser.KW_MEASURES, 0); }
    projectItemDefinition(i) {
        if (i === undefined) {
            return this.getRuleContexts(ProjectItemDefinitionContext);
        }
        else {
            return this.getRuleContext(i, ProjectItemDefinitionContext);
        }
    }
    COMMA(i) {
        if (i === undefined) {
            return this.getTokens(FlinkSqlParser.COMMA);
        }
        else {
            return this.getToken(FlinkSqlParser.COMMA, i);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return FlinkSqlParser.RULE_measuresClause; }
    // @Override
    enterRule(listener) {
        if (listener.enterMeasuresClause) {
            listener.enterMeasuresClause(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitMeasuresClause) {
            listener.exitMeasuresClause(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitMeasuresClause) {
            return visitor.visitMeasuresClause(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class PatternDefinationContext extends ParserRuleContext.ParserRuleContext {
    KW_PATTERN() { return this.getToken(FlinkSqlParser.KW_PATTERN, 0); }
    LR_BRACKET() { return this.getToken(FlinkSqlParser.LR_BRACKET, 0); }
    RR_BRACKET() { return this.getToken(FlinkSqlParser.RR_BRACKET, 0); }
    patternVariable(i) {
        if (i === undefined) {
            return this.getRuleContexts(PatternVariableContext);
        }
        else {
            return this.getRuleContext(i, PatternVariableContext);
        }
    }
    withinClause() {
        return this.tryGetRuleContext(0, WithinClauseContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return FlinkSqlParser.RULE_patternDefination; }
    // @Override
    enterRule(listener) {
        if (listener.enterPatternDefination) {
            listener.enterPatternDefination(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitPatternDefination) {
            listener.exitPatternDefination(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitPatternDefination) {
            return visitor.visitPatternDefination(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class PatternVariableContext extends ParserRuleContext.ParserRuleContext {
    unquotedIdentifier() {
        return this.getRuleContext(0, UnquotedIdentifierContext);
    }
    quantifiers() {
        return this.tryGetRuleContext(0, QuantifiersContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return FlinkSqlParser.RULE_patternVariable; }
    // @Override
    enterRule(listener) {
        if (listener.enterPatternVariable) {
            listener.enterPatternVariable(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitPatternVariable) {
            listener.exitPatternVariable(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitPatternVariable) {
            return visitor.visitPatternVariable(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class OutputModeContext extends ParserRuleContext.ParserRuleContext {
    KW_ALL() { return this.tryGetToken(FlinkSqlParser.KW_ALL, 0); }
    KW_ROWS() { return this.tryGetToken(FlinkSqlParser.KW_ROWS, 0); }
    KW_PER() { return this.getToken(FlinkSqlParser.KW_PER, 0); }
    KW_MATCH() { return this.getToken(FlinkSqlParser.KW_MATCH, 0); }
    KW_ONE() { return this.tryGetToken(FlinkSqlParser.KW_ONE, 0); }
    KW_ROW() { return this.tryGetToken(FlinkSqlParser.KW_ROW, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return FlinkSqlParser.RULE_outputMode; }
    // @Override
    enterRule(listener) {
        if (listener.enterOutputMode) {
            listener.enterOutputMode(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitOutputMode) {
            listener.exitOutputMode(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitOutputMode) {
            return visitor.visitOutputMode(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class AfterMatchStrategyContext extends ParserRuleContext.ParserRuleContext {
    KW_AFTER() { return this.getToken(FlinkSqlParser.KW_AFTER, 0); }
    KW_MATCH() { return this.getToken(FlinkSqlParser.KW_MATCH, 0); }
    KW_SKIP() { return this.getToken(FlinkSqlParser.KW_SKIP, 0); }
    KW_PAST() { return this.tryGetToken(FlinkSqlParser.KW_PAST, 0); }
    KW_LAST() { return this.tryGetToken(FlinkSqlParser.KW_LAST, 0); }
    KW_ROW() { return this.tryGetToken(FlinkSqlParser.KW_ROW, 0); }
    KW_TO() { return this.tryGetToken(FlinkSqlParser.KW_TO, 0); }
    KW_NEXT() { return this.tryGetToken(FlinkSqlParser.KW_NEXT, 0); }
    unquotedIdentifier() {
        return this.tryGetRuleContext(0, UnquotedIdentifierContext);
    }
    KW_FIRST() { return this.tryGetToken(FlinkSqlParser.KW_FIRST, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return FlinkSqlParser.RULE_afterMatchStrategy; }
    // @Override
    enterRule(listener) {
        if (listener.enterAfterMatchStrategy) {
            listener.enterAfterMatchStrategy(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitAfterMatchStrategy) {
            listener.exitAfterMatchStrategy(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitAfterMatchStrategy) {
            return visitor.visitAfterMatchStrategy(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class PatternVariablesDefinationContext extends ParserRuleContext.ParserRuleContext {
    KW_DEFINE() { return this.getToken(FlinkSqlParser.KW_DEFINE, 0); }
    projectItemDefinition(i) {
        if (i === undefined) {
            return this.getRuleContexts(ProjectItemDefinitionContext);
        }
        else {
            return this.getRuleContext(i, ProjectItemDefinitionContext);
        }
    }
    COMMA(i) {
        if (i === undefined) {
            return this.getTokens(FlinkSqlParser.COMMA);
        }
        else {
            return this.getToken(FlinkSqlParser.COMMA, i);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return FlinkSqlParser.RULE_patternVariablesDefination; }
    // @Override
    enterRule(listener) {
        if (listener.enterPatternVariablesDefination) {
            listener.enterPatternVariablesDefination(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitPatternVariablesDefination) {
            listener.exitPatternVariablesDefination(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitPatternVariablesDefination) {
            return visitor.visitPatternVariablesDefination(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class WindowFrameContext extends ParserRuleContext.ParserRuleContext {
    KW_RANGE() { return this.tryGetToken(FlinkSqlParser.KW_RANGE, 0); }
    KW_BETWEEN() { return this.getToken(FlinkSqlParser.KW_BETWEEN, 0); }
    timeIntervalExpression() {
        return this.tryGetRuleContext(0, TimeIntervalExpressionContext);
    }
    frameBound() {
        return this.getRuleContext(0, FrameBoundContext);
    }
    KW_ROWS() { return this.tryGetToken(FlinkSqlParser.KW_ROWS, 0); }
    DIG_LITERAL() { return this.tryGetToken(FlinkSqlParser.DIG_LITERAL, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return FlinkSqlParser.RULE_windowFrame; }
    // @Override
    enterRule(listener) {
        if (listener.enterWindowFrame) {
            listener.enterWindowFrame(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitWindowFrame) {
            listener.exitWindowFrame(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitWindowFrame) {
            return visitor.visitWindowFrame(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class FrameBoundContext extends ParserRuleContext.ParserRuleContext {
    KW_PRECEDING() { return this.getToken(FlinkSqlParser.KW_PRECEDING, 0); }
    KW_AND() { return this.getToken(FlinkSqlParser.KW_AND, 0); }
    KW_CURRENT() { return this.getToken(FlinkSqlParser.KW_CURRENT, 0); }
    KW_ROW() { return this.getToken(FlinkSqlParser.KW_ROW, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return FlinkSqlParser.RULE_frameBound; }
    // @Override
    enterRule(listener) {
        if (listener.enterFrameBound) {
            listener.enterFrameBound(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitFrameBound) {
            listener.exitFrameBound(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitFrameBound) {
            return visitor.visitFrameBound(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class WithinClauseContext extends ParserRuleContext.ParserRuleContext {
    KW_WITHIN() { return this.getToken(FlinkSqlParser.KW_WITHIN, 0); }
    timeIntervalExpression() {
        return this.getRuleContext(0, TimeIntervalExpressionContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return FlinkSqlParser.RULE_withinClause; }
    // @Override
    enterRule(listener) {
        if (listener.enterWithinClause) {
            listener.enterWithinClause(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitWithinClause) {
            listener.exitWithinClause(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitWithinClause) {
            return visitor.visitWithinClause(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class ExpressionContext extends ParserRuleContext.ParserRuleContext {
    booleanExpression() {
        return this.getRuleContext(0, BooleanExpressionContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return FlinkSqlParser.RULE_expression; }
    // @Override
    enterRule(listener) {
        if (listener.enterExpression) {
            listener.enterExpression(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitExpression) {
            listener.exitExpression(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitExpression) {
            return visitor.visitExpression(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class BooleanExpressionContext extends ParserRuleContext.ParserRuleContext {
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return FlinkSqlParser.RULE_booleanExpression; }
    copyFrom(ctx) {
        super.copyFrom(ctx);
    }
}
class LogicalNotContext extends BooleanExpressionContext {
    KW_NOT() { return this.getToken(FlinkSqlParser.KW_NOT, 0); }
    booleanExpression() {
        return this.getRuleContext(0, BooleanExpressionContext);
    }
    constructor(ctx) {
        super(ctx.parent, ctx.invokingState);
        this.copyFrom(ctx);
    }
    // @Override
    enterRule(listener) {
        if (listener.enterLogicalNot) {
            listener.enterLogicalNot(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitLogicalNot) {
            listener.exitLogicalNot(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitLogicalNot) {
            return visitor.visitLogicalNot(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class ExistsContext extends BooleanExpressionContext {
    KW_EXISTS() { return this.getToken(FlinkSqlParser.KW_EXISTS, 0); }
    LR_BRACKET() { return this.getToken(FlinkSqlParser.LR_BRACKET, 0); }
    queryStatement() {
        return this.getRuleContext(0, QueryStatementContext);
    }
    RR_BRACKET() { return this.getToken(FlinkSqlParser.RR_BRACKET, 0); }
    constructor(ctx) {
        super(ctx.parent, ctx.invokingState);
        this.copyFrom(ctx);
    }
    // @Override
    enterRule(listener) {
        if (listener.enterExists) {
            listener.enterExists(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitExists) {
            listener.exitExists(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitExists) {
            return visitor.visitExists(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class PredicatedContext extends BooleanExpressionContext {
    valueExpression() {
        return this.getRuleContext(0, ValueExpressionContext);
    }
    predicate() {
        return this.tryGetRuleContext(0, PredicateContext);
    }
    constructor(ctx) {
        super(ctx.parent, ctx.invokingState);
        this.copyFrom(ctx);
    }
    // @Override
    enterRule(listener) {
        if (listener.enterPredicated) {
            listener.enterPredicated(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitPredicated) {
            listener.exitPredicated(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitPredicated) {
            return visitor.visitPredicated(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class LogicalBinaryContext extends BooleanExpressionContext {
    booleanExpression(i) {
        if (i === undefined) {
            return this.getRuleContexts(BooleanExpressionContext);
        }
        else {
            return this.getRuleContext(i, BooleanExpressionContext);
        }
    }
    KW_AND() { return this.tryGetToken(FlinkSqlParser.KW_AND, 0); }
    KW_OR() { return this.tryGetToken(FlinkSqlParser.KW_OR, 0); }
    constructor(ctx) {
        super(ctx.parent, ctx.invokingState);
        this.copyFrom(ctx);
    }
    // @Override
    enterRule(listener) {
        if (listener.enterLogicalBinary) {
            listener.enterLogicalBinary(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitLogicalBinary) {
            listener.exitLogicalBinary(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitLogicalBinary) {
            return visitor.visitLogicalBinary(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class LogicalNestedContext extends BooleanExpressionContext {
    booleanExpression() {
        return this.getRuleContext(0, BooleanExpressionContext);
    }
    KW_IS() { return this.getToken(FlinkSqlParser.KW_IS, 0); }
    KW_TRUE() { return this.tryGetToken(FlinkSqlParser.KW_TRUE, 0); }
    KW_FALSE() { return this.tryGetToken(FlinkSqlParser.KW_FALSE, 0); }
    KW_UNKNOWN() { return this.tryGetToken(FlinkSqlParser.KW_UNKNOWN, 0); }
    KW_NULL() { return this.tryGetToken(FlinkSqlParser.KW_NULL, 0); }
    KW_NOT() { return this.tryGetToken(FlinkSqlParser.KW_NOT, 0); }
    constructor(ctx) {
        super(ctx.parent, ctx.invokingState);
        this.copyFrom(ctx);
    }
    // @Override
    enterRule(listener) {
        if (listener.enterLogicalNested) {
            listener.enterLogicalNested(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitLogicalNested) {
            listener.exitLogicalNested(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitLogicalNested) {
            return visitor.visitLogicalNested(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class PredicateContext extends ParserRuleContext.ParserRuleContext {
    KW_AND() { return this.tryGetToken(FlinkSqlParser.KW_AND, 0); }
    KW_BETWEEN() { return this.tryGetToken(FlinkSqlParser.KW_BETWEEN, 0); }
    valueExpression(i) {
        if (i === undefined) {
            return this.getRuleContexts(ValueExpressionContext);
        }
        else {
            return this.getRuleContext(i, ValueExpressionContext);
        }
    }
    KW_NOT() { return this.tryGetToken(FlinkSqlParser.KW_NOT, 0); }
    KW_ASYMMETRIC() { return this.tryGetToken(FlinkSqlParser.KW_ASYMMETRIC, 0); }
    KW_SYMMETRIC() { return this.tryGetToken(FlinkSqlParser.KW_SYMMETRIC, 0); }
    LR_BRACKET() { return this.tryGetToken(FlinkSqlParser.LR_BRACKET, 0); }
    expression(i) {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }
        else {
            return this.getRuleContext(i, ExpressionContext);
        }
    }
    RR_BRACKET() { return this.tryGetToken(FlinkSqlParser.RR_BRACKET, 0); }
    KW_IN() { return this.tryGetToken(FlinkSqlParser.KW_IN, 0); }
    COMMA(i) {
        if (i === undefined) {
            return this.getTokens(FlinkSqlParser.COMMA);
        }
        else {
            return this.getToken(FlinkSqlParser.COMMA, i);
        }
    }
    queryStatement() {
        return this.tryGetRuleContext(0, QueryStatementContext);
    }
    KW_EXISTS() { return this.tryGetToken(FlinkSqlParser.KW_EXISTS, 0); }
    KW_RLIKE() { return this.tryGetToken(FlinkSqlParser.KW_RLIKE, 0); }
    likePredicate() {
        return this.tryGetRuleContext(0, LikePredicateContext);
    }
    KW_IS() { return this.tryGetToken(FlinkSqlParser.KW_IS, 0); }
    KW_TRUE() { return this.tryGetToken(FlinkSqlParser.KW_TRUE, 0); }
    KW_FALSE() { return this.tryGetToken(FlinkSqlParser.KW_FALSE, 0); }
    KW_UNKNOWN() { return this.tryGetToken(FlinkSqlParser.KW_UNKNOWN, 0); }
    KW_NULL() { return this.tryGetToken(FlinkSqlParser.KW_NULL, 0); }
    KW_FROM() { return this.tryGetToken(FlinkSqlParser.KW_FROM, 0); }
    KW_DISTINCT() { return this.tryGetToken(FlinkSqlParser.KW_DISTINCT, 0); }
    KW_TO() { return this.tryGetToken(FlinkSqlParser.KW_TO, 0); }
    KW_SIMILAR() { return this.tryGetToken(FlinkSqlParser.KW_SIMILAR, 0); }
    KW_ESCAPE() { return this.tryGetToken(FlinkSqlParser.KW_ESCAPE, 0); }
    stringLiteral() {
        return this.tryGetRuleContext(0, StringLiteralContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return FlinkSqlParser.RULE_predicate; }
    // @Override
    enterRule(listener) {
        if (listener.enterPredicate) {
            listener.enterPredicate(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitPredicate) {
            listener.exitPredicate(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitPredicate) {
            return visitor.visitPredicate(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class LikePredicateContext extends ParserRuleContext.ParserRuleContext {
    KW_LIKE() { return this.getToken(FlinkSqlParser.KW_LIKE, 0); }
    KW_ANY() { return this.tryGetToken(FlinkSqlParser.KW_ANY, 0); }
    KW_ALL() { return this.tryGetToken(FlinkSqlParser.KW_ALL, 0); }
    LR_BRACKET() { return this.tryGetToken(FlinkSqlParser.LR_BRACKET, 0); }
    RR_BRACKET() { return this.tryGetToken(FlinkSqlParser.RR_BRACKET, 0); }
    expression(i) {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }
        else {
            return this.getRuleContext(i, ExpressionContext);
        }
    }
    KW_NOT() { return this.tryGetToken(FlinkSqlParser.KW_NOT, 0); }
    COMMA(i) {
        if (i === undefined) {
            return this.getTokens(FlinkSqlParser.COMMA);
        }
        else {
            return this.getToken(FlinkSqlParser.COMMA, i);
        }
    }
    valueExpression() {
        return this.tryGetRuleContext(0, ValueExpressionContext);
    }
    KW_ESCAPE() { return this.tryGetToken(FlinkSqlParser.KW_ESCAPE, 0); }
    stringLiteral() {
        return this.tryGetRuleContext(0, StringLiteralContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return FlinkSqlParser.RULE_likePredicate; }
    // @Override
    enterRule(listener) {
        if (listener.enterLikePredicate) {
            listener.enterLikePredicate(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitLikePredicate) {
            listener.exitLikePredicate(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitLikePredicate) {
            return visitor.visitLikePredicate(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class ValueExpressionContext extends ParserRuleContext.ParserRuleContext {
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return FlinkSqlParser.RULE_valueExpression; }
    copyFrom(ctx) {
        super.copyFrom(ctx);
    }
}
class ValueExpressionDefaultContext extends ValueExpressionContext {
    primaryExpression() {
        return this.getRuleContext(0, PrimaryExpressionContext);
    }
    constructor(ctx) {
        super(ctx.parent, ctx.invokingState);
        this.copyFrom(ctx);
    }
    // @Override
    enterRule(listener) {
        if (listener.enterValueExpressionDefault) {
            listener.enterValueExpressionDefault(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitValueExpressionDefault) {
            listener.exitValueExpressionDefault(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitValueExpressionDefault) {
            return visitor.visitValueExpressionDefault(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class ArithmeticUnaryContext extends ValueExpressionContext {
    valueExpression() {
        return this.getRuleContext(0, ValueExpressionContext);
    }
    HYPNEN_SIGN() { return this.tryGetToken(FlinkSqlParser.HYPNEN_SIGN, 0); }
    ADD_SIGN() { return this.tryGetToken(FlinkSqlParser.ADD_SIGN, 0); }
    BIT_NOT_OP() { return this.tryGetToken(FlinkSqlParser.BIT_NOT_OP, 0); }
    constructor(ctx) {
        super(ctx.parent, ctx.invokingState);
        this.copyFrom(ctx);
    }
    // @Override
    enterRule(listener) {
        if (listener.enterArithmeticUnary) {
            listener.enterArithmeticUnary(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitArithmeticUnary) {
            listener.exitArithmeticUnary(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitArithmeticUnary) {
            return visitor.visitArithmeticUnary(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class ArithmeticBinaryContext extends ValueExpressionContext {
    valueExpression(i) {
        if (i === undefined) {
            return this.getRuleContexts(ValueExpressionContext);
        }
        else {
            return this.getRuleContext(i, ValueExpressionContext);
        }
    }
    ASTERISK_SIGN() { return this.tryGetToken(FlinkSqlParser.ASTERISK_SIGN, 0); }
    SLASH_SIGN() { return this.tryGetToken(FlinkSqlParser.SLASH_SIGN, 0); }
    PENCENT_SIGN() { return this.tryGetToken(FlinkSqlParser.PENCENT_SIGN, 0); }
    KW_DIV() { return this.tryGetToken(FlinkSqlParser.KW_DIV, 0); }
    ADD_SIGN() { return this.tryGetToken(FlinkSqlParser.ADD_SIGN, 0); }
    HYPNEN_SIGN() { return this.tryGetToken(FlinkSqlParser.HYPNEN_SIGN, 0); }
    DOUBLE_VERTICAL_SIGN() { return this.tryGetToken(FlinkSqlParser.DOUBLE_VERTICAL_SIGN, 0); }
    BIT_AND_OP() { return this.tryGetToken(FlinkSqlParser.BIT_AND_OP, 0); }
    BIT_XOR_OP() { return this.tryGetToken(FlinkSqlParser.BIT_XOR_OP, 0); }
    BIT_OR_OP() { return this.tryGetToken(FlinkSqlParser.BIT_OR_OP, 0); }
    constructor(ctx) {
        super(ctx.parent, ctx.invokingState);
        this.copyFrom(ctx);
    }
    // @Override
    enterRule(listener) {
        if (listener.enterArithmeticBinary) {
            listener.enterArithmeticBinary(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitArithmeticBinary) {
            listener.exitArithmeticBinary(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitArithmeticBinary) {
            return visitor.visitArithmeticBinary(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class ComparisonContext extends ValueExpressionContext {
    comparisonOperator() {
        return this.getRuleContext(0, ComparisonOperatorContext);
    }
    valueExpression(i) {
        if (i === undefined) {
            return this.getRuleContexts(ValueExpressionContext);
        }
        else {
            return this.getRuleContext(i, ValueExpressionContext);
        }
    }
    constructor(ctx) {
        super(ctx.parent, ctx.invokingState);
        this.copyFrom(ctx);
    }
    // @Override
    enterRule(listener) {
        if (listener.enterComparison) {
            listener.enterComparison(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitComparison) {
            listener.exitComparison(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitComparison) {
            return visitor.visitComparison(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class PrimaryExpressionContext extends ParserRuleContext.ParserRuleContext {
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return FlinkSqlParser.RULE_primaryExpression; }
    copyFrom(ctx) {
        super.copyFrom(ctx);
    }
}
class SearchedCaseContext extends PrimaryExpressionContext {
    KW_CASE() { return this.getToken(FlinkSqlParser.KW_CASE, 0); }
    KW_END() { return this.getToken(FlinkSqlParser.KW_END, 0); }
    whenClause(i) {
        if (i === undefined) {
            return this.getRuleContexts(WhenClauseContext);
        }
        else {
            return this.getRuleContext(i, WhenClauseContext);
        }
    }
    KW_ELSE() { return this.tryGetToken(FlinkSqlParser.KW_ELSE, 0); }
    expression() {
        return this.tryGetRuleContext(0, ExpressionContext);
    }
    constructor(ctx) {
        super(ctx.parent, ctx.invokingState);
        this.copyFrom(ctx);
    }
    // @Override
    enterRule(listener) {
        if (listener.enterSearchedCase) {
            listener.enterSearchedCase(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitSearchedCase) {
            listener.exitSearchedCase(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitSearchedCase) {
            return visitor.visitSearchedCase(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class SimpleCaseContext extends PrimaryExpressionContext {
    KW_CASE() { return this.getToken(FlinkSqlParser.KW_CASE, 0); }
    KW_END() { return this.getToken(FlinkSqlParser.KW_END, 0); }
    expression(i) {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }
        else {
            return this.getRuleContext(i, ExpressionContext);
        }
    }
    whenClause(i) {
        if (i === undefined) {
            return this.getRuleContexts(WhenClauseContext);
        }
        else {
            return this.getRuleContext(i, WhenClauseContext);
        }
    }
    KW_ELSE() { return this.tryGetToken(FlinkSqlParser.KW_ELSE, 0); }
    constructor(ctx) {
        super(ctx.parent, ctx.invokingState);
        this.copyFrom(ctx);
    }
    // @Override
    enterRule(listener) {
        if (listener.enterSimpleCase) {
            listener.enterSimpleCase(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitSimpleCase) {
            listener.exitSimpleCase(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitSimpleCase) {
            return visitor.visitSimpleCase(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class CastContext extends PrimaryExpressionContext {
    KW_CAST() { return this.getToken(FlinkSqlParser.KW_CAST, 0); }
    LR_BRACKET() { return this.getToken(FlinkSqlParser.LR_BRACKET, 0); }
    expression() {
        return this.getRuleContext(0, ExpressionContext);
    }
    KW_AS() { return this.getToken(FlinkSqlParser.KW_AS, 0); }
    columnType() {
        return this.getRuleContext(0, ColumnTypeContext);
    }
    RR_BRACKET() { return this.getToken(FlinkSqlParser.RR_BRACKET, 0); }
    constructor(ctx) {
        super(ctx.parent, ctx.invokingState);
        this.copyFrom(ctx);
    }
    // @Override
    enterRule(listener) {
        if (listener.enterCast) {
            listener.enterCast(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitCast) {
            listener.exitCast(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitCast) {
            return visitor.visitCast(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class FirstContext extends PrimaryExpressionContext {
    KW_FIRST() { return this.getToken(FlinkSqlParser.KW_FIRST, 0); }
    LR_BRACKET() { return this.getToken(FlinkSqlParser.LR_BRACKET, 0); }
    expression() {
        return this.getRuleContext(0, ExpressionContext);
    }
    RR_BRACKET() { return this.getToken(FlinkSqlParser.RR_BRACKET, 0); }
    KW_IGNORE() { return this.tryGetToken(FlinkSqlParser.KW_IGNORE, 0); }
    KW_NULLS() { return this.tryGetToken(FlinkSqlParser.KW_NULLS, 0); }
    constructor(ctx) {
        super(ctx.parent, ctx.invokingState);
        this.copyFrom(ctx);
    }
    // @Override
    enterRule(listener) {
        if (listener.enterFirst) {
            listener.enterFirst(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitFirst) {
            listener.exitFirst(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitFirst) {
            return visitor.visitFirst(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class LastContext extends PrimaryExpressionContext {
    KW_LAST() { return this.getToken(FlinkSqlParser.KW_LAST, 0); }
    LR_BRACKET() { return this.getToken(FlinkSqlParser.LR_BRACKET, 0); }
    expression() {
        return this.getRuleContext(0, ExpressionContext);
    }
    RR_BRACKET() { return this.getToken(FlinkSqlParser.RR_BRACKET, 0); }
    KW_IGNORE() { return this.tryGetToken(FlinkSqlParser.KW_IGNORE, 0); }
    KW_NULLS() { return this.tryGetToken(FlinkSqlParser.KW_NULLS, 0); }
    constructor(ctx) {
        super(ctx.parent, ctx.invokingState);
        this.copyFrom(ctx);
    }
    // @Override
    enterRule(listener) {
        if (listener.enterLast) {
            listener.enterLast(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitLast) {
            listener.exitLast(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitLast) {
            return visitor.visitLast(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class PositionContext extends PrimaryExpressionContext {
    KW_POSITION() { return this.getToken(FlinkSqlParser.KW_POSITION, 0); }
    LR_BRACKET() { return this.getToken(FlinkSqlParser.LR_BRACKET, 0); }
    KW_IN() { return this.getToken(FlinkSqlParser.KW_IN, 0); }
    RR_BRACKET() { return this.getToken(FlinkSqlParser.RR_BRACKET, 0); }
    valueExpression(i) {
        if (i === undefined) {
            return this.getRuleContexts(ValueExpressionContext);
        }
        else {
            return this.getRuleContext(i, ValueExpressionContext);
        }
    }
    constructor(ctx) {
        super(ctx.parent, ctx.invokingState);
        this.copyFrom(ctx);
    }
    // @Override
    enterRule(listener) {
        if (listener.enterPosition) {
            listener.enterPosition(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitPosition) {
            listener.exitPosition(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitPosition) {
            return visitor.visitPosition(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class ConstantDefaultContext extends PrimaryExpressionContext {
    constant() {
        return this.getRuleContext(0, ConstantContext);
    }
    constructor(ctx) {
        super(ctx.parent, ctx.invokingState);
        this.copyFrom(ctx);
    }
    // @Override
    enterRule(listener) {
        if (listener.enterConstantDefault) {
            listener.enterConstantDefault(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitConstantDefault) {
            listener.exitConstantDefault(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitConstantDefault) {
            return visitor.visitConstantDefault(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class StarContext extends PrimaryExpressionContext {
    ASTERISK_SIGN() { return this.getToken(FlinkSqlParser.ASTERISK_SIGN, 0); }
    uid() {
        return this.tryGetRuleContext(0, UidContext);
    }
    DOT() { return this.tryGetToken(FlinkSqlParser.DOT, 0); }
    constructor(ctx) {
        super(ctx.parent, ctx.invokingState);
        this.copyFrom(ctx);
    }
    // @Override
    enterRule(listener) {
        if (listener.enterStar) {
            listener.enterStar(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitStar) {
            listener.exitStar(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitStar) {
            return visitor.visitStar(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class SubqueryExpressionContext extends PrimaryExpressionContext {
    LR_BRACKET() { return this.getToken(FlinkSqlParser.LR_BRACKET, 0); }
    queryStatement() {
        return this.getRuleContext(0, QueryStatementContext);
    }
    RR_BRACKET() { return this.getToken(FlinkSqlParser.RR_BRACKET, 0); }
    constructor(ctx) {
        super(ctx.parent, ctx.invokingState);
        this.copyFrom(ctx);
    }
    // @Override
    enterRule(listener) {
        if (listener.enterSubqueryExpression) {
            listener.enterSubqueryExpression(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitSubqueryExpression) {
            listener.exitSubqueryExpression(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitSubqueryExpression) {
            return visitor.visitSubqueryExpression(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class FunctionCallContext extends PrimaryExpressionContext {
    functionName() {
        return this.getRuleContext(0, FunctionNameContext);
    }
    LR_BRACKET() { return this.getToken(FlinkSqlParser.LR_BRACKET, 0); }
    RR_BRACKET() { return this.getToken(FlinkSqlParser.RR_BRACKET, 0); }
    functionParam(i) {
        if (i === undefined) {
            return this.getRuleContexts(FunctionParamContext);
        }
        else {
            return this.getRuleContext(i, FunctionParamContext);
        }
    }
    setQuantifier() {
        return this.tryGetRuleContext(0, SetQuantifierContext);
    }
    COMMA(i) {
        if (i === undefined) {
            return this.getTokens(FlinkSqlParser.COMMA);
        }
        else {
            return this.getToken(FlinkSqlParser.COMMA, i);
        }
    }
    constructor(ctx) {
        super(ctx.parent, ctx.invokingState);
        this.copyFrom(ctx);
    }
    // @Override
    enterRule(listener) {
        if (listener.enterFunctionCall) {
            listener.enterFunctionCall(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitFunctionCall) {
            listener.exitFunctionCall(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitFunctionCall) {
            return visitor.visitFunctionCall(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class SubscriptContext extends PrimaryExpressionContext {
    LS_BRACKET() { return this.getToken(FlinkSqlParser.LS_BRACKET, 0); }
    RS_BRACKET() { return this.getToken(FlinkSqlParser.RS_BRACKET, 0); }
    primaryExpression() {
        return this.getRuleContext(0, PrimaryExpressionContext);
    }
    valueExpression() {
        return this.getRuleContext(0, ValueExpressionContext);
    }
    constructor(ctx) {
        super(ctx.parent, ctx.invokingState);
        this.copyFrom(ctx);
    }
    // @Override
    enterRule(listener) {
        if (listener.enterSubscript) {
            listener.enterSubscript(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitSubscript) {
            listener.exitSubscript(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitSubscript) {
            return visitor.visitSubscript(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class ColumnReferenceContext extends PrimaryExpressionContext {
    identifier() {
        return this.getRuleContext(0, IdentifierContext);
    }
    constructor(ctx) {
        super(ctx.parent, ctx.invokingState);
        this.copyFrom(ctx);
    }
    // @Override
    enterRule(listener) {
        if (listener.enterColumnReference) {
            listener.enterColumnReference(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitColumnReference) {
            listener.exitColumnReference(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitColumnReference) {
            return visitor.visitColumnReference(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class DereferenceContext extends PrimaryExpressionContext {
    dereferenceDefinition() {
        return this.getRuleContext(0, DereferenceDefinitionContext);
    }
    constructor(ctx) {
        super(ctx.parent, ctx.invokingState);
        this.copyFrom(ctx);
    }
    // @Override
    enterRule(listener) {
        if (listener.enterDereference) {
            listener.enterDereference(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitDereference) {
            listener.exitDereference(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitDereference) {
            return visitor.visitDereference(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class ParenthesizedExpressionContext extends PrimaryExpressionContext {
    LR_BRACKET() { return this.getToken(FlinkSqlParser.LR_BRACKET, 0); }
    expression() {
        return this.getRuleContext(0, ExpressionContext);
    }
    RR_BRACKET() { return this.getToken(FlinkSqlParser.RR_BRACKET, 0); }
    constructor(ctx) {
        super(ctx.parent, ctx.invokingState);
        this.copyFrom(ctx);
    }
    // @Override
    enterRule(listener) {
        if (listener.enterParenthesizedExpression) {
            listener.enterParenthesizedExpression(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitParenthesizedExpression) {
            listener.exitParenthesizedExpression(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitParenthesizedExpression) {
            return visitor.visitParenthesizedExpression(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class DateFunctionExpressionContext extends PrimaryExpressionContext {
    KW_CURRENT_TIMESTAMP() { return this.getToken(FlinkSqlParser.KW_CURRENT_TIMESTAMP, 0); }
    constructor(ctx) {
        super(ctx.parent, ctx.invokingState);
        this.copyFrom(ctx);
    }
    // @Override
    enterRule(listener) {
        if (listener.enterDateFunctionExpression) {
            listener.enterDateFunctionExpression(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitDateFunctionExpression) {
            listener.exitDateFunctionExpression(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitDateFunctionExpression) {
            return visitor.visitDateFunctionExpression(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class FunctionNameCreateContext extends ParserRuleContext.ParserRuleContext {
    uid() {
        return this.getRuleContext(0, UidContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return FlinkSqlParser.RULE_functionNameCreate; }
    // @Override
    enterRule(listener) {
        if (listener.enterFunctionNameCreate) {
            listener.enterFunctionNameCreate(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitFunctionNameCreate) {
            listener.exitFunctionNameCreate(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitFunctionNameCreate) {
            return visitor.visitFunctionNameCreate(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class FunctionNameContext extends ParserRuleContext.ParserRuleContext {
    reservedKeywordsUsedAsFuncName() {
        return this.tryGetRuleContext(0, ReservedKeywordsUsedAsFuncNameContext);
    }
    uid() {
        return this.tryGetRuleContext(0, UidContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return FlinkSqlParser.RULE_functionName; }
    // @Override
    enterRule(listener) {
        if (listener.enterFunctionName) {
            listener.enterFunctionName(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitFunctionName) {
            listener.exitFunctionName(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitFunctionName) {
            return visitor.visitFunctionName(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class FunctionParamContext extends ParserRuleContext.ParserRuleContext {
    reservedKeywordsUsedAsFuncParam() {
        return this.tryGetRuleContext(0, ReservedKeywordsUsedAsFuncParamContext);
    }
    timeIntervalUnit() {
        return this.tryGetRuleContext(0, TimeIntervalUnitContext);
    }
    timePointUnit() {
        return this.tryGetRuleContext(0, TimePointUnitContext);
    }
    expression() {
        return this.tryGetRuleContext(0, ExpressionContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return FlinkSqlParser.RULE_functionParam; }
    // @Override
    enterRule(listener) {
        if (listener.enterFunctionParam) {
            listener.enterFunctionParam(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitFunctionParam) {
            listener.exitFunctionParam(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitFunctionParam) {
            return visitor.visitFunctionParam(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class DereferenceDefinitionContext extends ParserRuleContext.ParserRuleContext {
    uid() {
        return this.getRuleContext(0, UidContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return FlinkSqlParser.RULE_dereferenceDefinition; }
    // @Override
    enterRule(listener) {
        if (listener.enterDereferenceDefinition) {
            listener.enterDereferenceDefinition(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitDereferenceDefinition) {
            listener.exitDereferenceDefinition(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitDereferenceDefinition) {
            return visitor.visitDereferenceDefinition(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class CorrelationNameContext extends ParserRuleContext.ParserRuleContext {
    identifier() {
        return this.getRuleContext(0, IdentifierContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return FlinkSqlParser.RULE_correlationName; }
    // @Override
    enterRule(listener) {
        if (listener.enterCorrelationName) {
            listener.enterCorrelationName(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitCorrelationName) {
            listener.exitCorrelationName(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitCorrelationName) {
            return visitor.visitCorrelationName(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class QualifiedNameContext extends ParserRuleContext.ParserRuleContext {
    identifier() {
        return this.tryGetRuleContext(0, IdentifierContext);
    }
    dereferenceDefinition() {
        return this.tryGetRuleContext(0, DereferenceDefinitionContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return FlinkSqlParser.RULE_qualifiedName; }
    // @Override
    enterRule(listener) {
        if (listener.enterQualifiedName) {
            listener.enterQualifiedName(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitQualifiedName) {
            listener.exitQualifiedName(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitQualifiedName) {
            return visitor.visitQualifiedName(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class TimeIntervalExpressionContext extends ParserRuleContext.ParserRuleContext {
    KW_INTERVAL() { return this.getToken(FlinkSqlParser.KW_INTERVAL, 0); }
    errorCapturingMultiUnitsInterval() {
        return this.tryGetRuleContext(0, ErrorCapturingMultiUnitsIntervalContext);
    }
    errorCapturingUnitToUnitInterval() {
        return this.tryGetRuleContext(0, ErrorCapturingUnitToUnitIntervalContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return FlinkSqlParser.RULE_timeIntervalExpression; }
    // @Override
    enterRule(listener) {
        if (listener.enterTimeIntervalExpression) {
            listener.enterTimeIntervalExpression(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitTimeIntervalExpression) {
            listener.exitTimeIntervalExpression(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitTimeIntervalExpression) {
            return visitor.visitTimeIntervalExpression(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class ErrorCapturingMultiUnitsIntervalContext extends ParserRuleContext.ParserRuleContext {
    multiUnitsInterval() {
        return this.getRuleContext(0, MultiUnitsIntervalContext);
    }
    unitToUnitInterval() {
        return this.tryGetRuleContext(0, UnitToUnitIntervalContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return FlinkSqlParser.RULE_errorCapturingMultiUnitsInterval; }
    // @Override
    enterRule(listener) {
        if (listener.enterErrorCapturingMultiUnitsInterval) {
            listener.enterErrorCapturingMultiUnitsInterval(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitErrorCapturingMultiUnitsInterval) {
            listener.exitErrorCapturingMultiUnitsInterval(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitErrorCapturingMultiUnitsInterval) {
            return visitor.visitErrorCapturingMultiUnitsInterval(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class MultiUnitsIntervalContext extends ParserRuleContext.ParserRuleContext {
    intervalValue(i) {
        if (i === undefined) {
            return this.getRuleContexts(IntervalValueContext);
        }
        else {
            return this.getRuleContext(i, IntervalValueContext);
        }
    }
    timeIntervalUnit(i) {
        if (i === undefined) {
            return this.getRuleContexts(TimeIntervalUnitContext);
        }
        else {
            return this.getRuleContext(i, TimeIntervalUnitContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return FlinkSqlParser.RULE_multiUnitsInterval; }
    // @Override
    enterRule(listener) {
        if (listener.enterMultiUnitsInterval) {
            listener.enterMultiUnitsInterval(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitMultiUnitsInterval) {
            listener.exitMultiUnitsInterval(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitMultiUnitsInterval) {
            return visitor.visitMultiUnitsInterval(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class ErrorCapturingUnitToUnitIntervalContext extends ParserRuleContext.ParserRuleContext {
    unitToUnitInterval(i) {
        if (i === undefined) {
            return this.getRuleContexts(UnitToUnitIntervalContext);
        }
        else {
            return this.getRuleContext(i, UnitToUnitIntervalContext);
        }
    }
    multiUnitsInterval() {
        return this.tryGetRuleContext(0, MultiUnitsIntervalContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return FlinkSqlParser.RULE_errorCapturingUnitToUnitInterval; }
    // @Override
    enterRule(listener) {
        if (listener.enterErrorCapturingUnitToUnitInterval) {
            listener.enterErrorCapturingUnitToUnitInterval(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitErrorCapturingUnitToUnitInterval) {
            listener.exitErrorCapturingUnitToUnitInterval(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitErrorCapturingUnitToUnitInterval) {
            return visitor.visitErrorCapturingUnitToUnitInterval(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class UnitToUnitIntervalContext extends ParserRuleContext.ParserRuleContext {
    KW_TO() { return this.getToken(FlinkSqlParser.KW_TO, 0); }
    intervalValue() {
        return this.getRuleContext(0, IntervalValueContext);
    }
    timeIntervalUnit(i) {
        if (i === undefined) {
            return this.getRuleContexts(TimeIntervalUnitContext);
        }
        else {
            return this.getRuleContext(i, TimeIntervalUnitContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return FlinkSqlParser.RULE_unitToUnitInterval; }
    // @Override
    enterRule(listener) {
        if (listener.enterUnitToUnitInterval) {
            listener.enterUnitToUnitInterval(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitUnitToUnitInterval) {
            listener.exitUnitToUnitInterval(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitUnitToUnitInterval) {
            return visitor.visitUnitToUnitInterval(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class IntervalValueContext extends ParserRuleContext.ParserRuleContext {
    DIG_LITERAL() { return this.tryGetToken(FlinkSqlParser.DIG_LITERAL, 0); }
    REAL_LITERAL() { return this.tryGetToken(FlinkSqlParser.REAL_LITERAL, 0); }
    ADD_SIGN() { return this.tryGetToken(FlinkSqlParser.ADD_SIGN, 0); }
    HYPNEN_SIGN() { return this.tryGetToken(FlinkSqlParser.HYPNEN_SIGN, 0); }
    STRING_LITERAL() { return this.tryGetToken(FlinkSqlParser.STRING_LITERAL, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return FlinkSqlParser.RULE_intervalValue; }
    // @Override
    enterRule(listener) {
        if (listener.enterIntervalValue) {
            listener.enterIntervalValue(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitIntervalValue) {
            listener.exitIntervalValue(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitIntervalValue) {
            return visitor.visitIntervalValue(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class TableAliasContext extends ParserRuleContext.ParserRuleContext {
    identifier() {
        return this.getRuleContext(0, IdentifierContext);
    }
    KW_AS() { return this.tryGetToken(FlinkSqlParser.KW_AS, 0); }
    identifierList() {
        return this.tryGetRuleContext(0, IdentifierListContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return FlinkSqlParser.RULE_tableAlias; }
    // @Override
    enterRule(listener) {
        if (listener.enterTableAlias) {
            listener.enterTableAlias(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitTableAlias) {
            listener.exitTableAlias(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitTableAlias) {
            return visitor.visitTableAlias(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class ErrorCapturingIdentifierContext extends ParserRuleContext.ParserRuleContext {
    identifier() {
        return this.getRuleContext(0, IdentifierContext);
    }
    errorCapturingIdentifierExtra() {
        return this.getRuleContext(0, ErrorCapturingIdentifierExtraContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return FlinkSqlParser.RULE_errorCapturingIdentifier; }
    // @Override
    enterRule(listener) {
        if (listener.enterErrorCapturingIdentifier) {
            listener.enterErrorCapturingIdentifier(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitErrorCapturingIdentifier) {
            listener.exitErrorCapturingIdentifier(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitErrorCapturingIdentifier) {
            return visitor.visitErrorCapturingIdentifier(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class ErrorCapturingIdentifierExtraContext extends ParserRuleContext.ParserRuleContext {
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return FlinkSqlParser.RULE_errorCapturingIdentifierExtra; }
    copyFrom(ctx) {
        super.copyFrom(ctx);
    }
}
class ErrorIdentContext extends ErrorCapturingIdentifierExtraContext {
    KW_MINUS(i) {
        if (i === undefined) {
            return this.getTokens(FlinkSqlParser.KW_MINUS);
        }
        else {
            return this.getToken(FlinkSqlParser.KW_MINUS, i);
        }
    }
    identifier(i) {
        if (i === undefined) {
            return this.getRuleContexts(IdentifierContext);
        }
        else {
            return this.getRuleContext(i, IdentifierContext);
        }
    }
    constructor(ctx) {
        super(ctx.parent, ctx.invokingState);
        this.copyFrom(ctx);
    }
    // @Override
    enterRule(listener) {
        if (listener.enterErrorIdent) {
            listener.enterErrorIdent(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitErrorIdent) {
            listener.exitErrorIdent(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitErrorIdent) {
            return visitor.visitErrorIdent(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class RealIdentContext extends ErrorCapturingIdentifierExtraContext {
    constructor(ctx) {
        super(ctx.parent, ctx.invokingState);
        this.copyFrom(ctx);
    }
    // @Override
    enterRule(listener) {
        if (listener.enterRealIdent) {
            listener.enterRealIdent(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitRealIdent) {
            listener.exitRealIdent(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitRealIdent) {
            return visitor.visitRealIdent(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class IdentifierListContext extends ParserRuleContext.ParserRuleContext {
    LR_BRACKET() { return this.getToken(FlinkSqlParser.LR_BRACKET, 0); }
    identifierSeq() {
        return this.getRuleContext(0, IdentifierSeqContext);
    }
    RR_BRACKET() { return this.getToken(FlinkSqlParser.RR_BRACKET, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return FlinkSqlParser.RULE_identifierList; }
    // @Override
    enterRule(listener) {
        if (listener.enterIdentifierList) {
            listener.enterIdentifierList(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitIdentifierList) {
            listener.exitIdentifierList(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitIdentifierList) {
            return visitor.visitIdentifierList(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class IdentifierSeqContext extends ParserRuleContext.ParserRuleContext {
    identifier(i) {
        if (i === undefined) {
            return this.getRuleContexts(IdentifierContext);
        }
        else {
            return this.getRuleContext(i, IdentifierContext);
        }
    }
    COMMA(i) {
        if (i === undefined) {
            return this.getTokens(FlinkSqlParser.COMMA);
        }
        else {
            return this.getToken(FlinkSqlParser.COMMA, i);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return FlinkSqlParser.RULE_identifierSeq; }
    // @Override
    enterRule(listener) {
        if (listener.enterIdentifierSeq) {
            listener.enterIdentifierSeq(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitIdentifierSeq) {
            listener.exitIdentifierSeq(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitIdentifierSeq) {
            return visitor.visitIdentifierSeq(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class IdentifierContext extends ParserRuleContext.ParserRuleContext {
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return FlinkSqlParser.RULE_identifier; }
    copyFrom(ctx) {
        super.copyFrom(ctx);
    }
}
class UnquotedIdentifierAlternativeContext extends IdentifierContext {
    unquotedIdentifier() {
        return this.getRuleContext(0, UnquotedIdentifierContext);
    }
    constructor(ctx) {
        super(ctx.parent, ctx.invokingState);
        this.copyFrom(ctx);
    }
    // @Override
    enterRule(listener) {
        if (listener.enterUnquotedIdentifierAlternative) {
            listener.enterUnquotedIdentifierAlternative(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitUnquotedIdentifierAlternative) {
            listener.exitUnquotedIdentifierAlternative(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitUnquotedIdentifierAlternative) {
            return visitor.visitUnquotedIdentifierAlternative(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class QuotedIdentifierAlternativeContext extends IdentifierContext {
    quotedIdentifier() {
        return this.getRuleContext(0, QuotedIdentifierContext);
    }
    constructor(ctx) {
        super(ctx.parent, ctx.invokingState);
        this.copyFrom(ctx);
    }
    // @Override
    enterRule(listener) {
        if (listener.enterQuotedIdentifierAlternative) {
            listener.enterQuotedIdentifierAlternative(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitQuotedIdentifierAlternative) {
            listener.exitQuotedIdentifierAlternative(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitQuotedIdentifierAlternative) {
            return visitor.visitQuotedIdentifierAlternative(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class NonReservedKeywordsAlternativeContext extends IdentifierContext {
    nonReservedKeywords() {
        return this.getRuleContext(0, NonReservedKeywordsContext);
    }
    constructor(ctx) {
        super(ctx.parent, ctx.invokingState);
        this.copyFrom(ctx);
    }
    // @Override
    enterRule(listener) {
        if (listener.enterNonReservedKeywordsAlternative) {
            listener.enterNonReservedKeywordsAlternative(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitNonReservedKeywordsAlternative) {
            listener.exitNonReservedKeywordsAlternative(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitNonReservedKeywordsAlternative) {
            return visitor.visitNonReservedKeywordsAlternative(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class UnquotedIdentifierContext extends ParserRuleContext.ParserRuleContext {
    DIG_LITERAL() { return this.tryGetToken(FlinkSqlParser.DIG_LITERAL, 0); }
    ID_LITERAL() { return this.tryGetToken(FlinkSqlParser.ID_LITERAL, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return FlinkSqlParser.RULE_unquotedIdentifier; }
    // @Override
    enterRule(listener) {
        if (listener.enterUnquotedIdentifier) {
            listener.enterUnquotedIdentifier(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitUnquotedIdentifier) {
            listener.exitUnquotedIdentifier(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitUnquotedIdentifier) {
            return visitor.visitUnquotedIdentifier(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class QuotedIdentifierContext extends ParserRuleContext.ParserRuleContext {
    STRING_LITERAL() { return this.getToken(FlinkSqlParser.STRING_LITERAL, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return FlinkSqlParser.RULE_quotedIdentifier; }
    // @Override
    enterRule(listener) {
        if (listener.enterQuotedIdentifier) {
            listener.enterQuotedIdentifier(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitQuotedIdentifier) {
            listener.exitQuotedIdentifier(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitQuotedIdentifier) {
            return visitor.visitQuotedIdentifier(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class WhenClauseContext extends ParserRuleContext.ParserRuleContext {
    KW_WHEN() { return this.getToken(FlinkSqlParser.KW_WHEN, 0); }
    KW_THEN() { return this.getToken(FlinkSqlParser.KW_THEN, 0); }
    expression(i) {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }
        else {
            return this.getRuleContext(i, ExpressionContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return FlinkSqlParser.RULE_whenClause; }
    // @Override
    enterRule(listener) {
        if (listener.enterWhenClause) {
            listener.enterWhenClause(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitWhenClause) {
            listener.exitWhenClause(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitWhenClause) {
            return visitor.visitWhenClause(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class CatalogPathContext extends ParserRuleContext.ParserRuleContext {
    identifier() {
        return this.getRuleContext(0, IdentifierContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return FlinkSqlParser.RULE_catalogPath; }
    // @Override
    enterRule(listener) {
        if (listener.enterCatalogPath) {
            listener.enterCatalogPath(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitCatalogPath) {
            listener.exitCatalogPath(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitCatalogPath) {
            return visitor.visitCatalogPath(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class CatalogPathCreateContext extends ParserRuleContext.ParserRuleContext {
    identifier() {
        return this.getRuleContext(0, IdentifierContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return FlinkSqlParser.RULE_catalogPathCreate; }
    // @Override
    enterRule(listener) {
        if (listener.enterCatalogPathCreate) {
            listener.enterCatalogPathCreate(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitCatalogPathCreate) {
            listener.exitCatalogPathCreate(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitCatalogPathCreate) {
            return visitor.visitCatalogPathCreate(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class DatabasePathContext extends ParserRuleContext.ParserRuleContext {
    identifier(i) {
        if (i === undefined) {
            return this.getRuleContexts(IdentifierContext);
        }
        else {
            return this.getRuleContext(i, IdentifierContext);
        }
    }
    DOT() { return this.tryGetToken(FlinkSqlParser.DOT, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return FlinkSqlParser.RULE_databasePath; }
    // @Override
    enterRule(listener) {
        if (listener.enterDatabasePath) {
            listener.enterDatabasePath(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitDatabasePath) {
            listener.exitDatabasePath(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitDatabasePath) {
            return visitor.visitDatabasePath(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class DatabasePathCreateContext extends ParserRuleContext.ParserRuleContext {
    identifier(i) {
        if (i === undefined) {
            return this.getRuleContexts(IdentifierContext);
        }
        else {
            return this.getRuleContext(i, IdentifierContext);
        }
    }
    DOT() { return this.tryGetToken(FlinkSqlParser.DOT, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return FlinkSqlParser.RULE_databasePathCreate; }
    // @Override
    enterRule(listener) {
        if (listener.enterDatabasePathCreate) {
            listener.enterDatabasePathCreate(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitDatabasePathCreate) {
            listener.exitDatabasePathCreate(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitDatabasePathCreate) {
            return visitor.visitDatabasePathCreate(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class TablePathCreateContext extends ParserRuleContext.ParserRuleContext {
    identifier(i) {
        if (i === undefined) {
            return this.getRuleContexts(IdentifierContext);
        }
        else {
            return this.getRuleContext(i, IdentifierContext);
        }
    }
    DOT(i) {
        if (i === undefined) {
            return this.getTokens(FlinkSqlParser.DOT);
        }
        else {
            return this.getToken(FlinkSqlParser.DOT, i);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return FlinkSqlParser.RULE_tablePathCreate; }
    // @Override
    enterRule(listener) {
        if (listener.enterTablePathCreate) {
            listener.enterTablePathCreate(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitTablePathCreate) {
            listener.exitTablePathCreate(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitTablePathCreate) {
            return visitor.visitTablePathCreate(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class TablePathContext extends ParserRuleContext.ParserRuleContext {
    identifier(i) {
        if (i === undefined) {
            return this.getRuleContexts(IdentifierContext);
        }
        else {
            return this.getRuleContext(i, IdentifierContext);
        }
    }
    DOT(i) {
        if (i === undefined) {
            return this.getTokens(FlinkSqlParser.DOT);
        }
        else {
            return this.getToken(FlinkSqlParser.DOT, i);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return FlinkSqlParser.RULE_tablePath; }
    // @Override
    enterRule(listener) {
        if (listener.enterTablePath) {
            listener.enterTablePath(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitTablePath) {
            listener.exitTablePath(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitTablePath) {
            return visitor.visitTablePath(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class ViewPathContext extends ParserRuleContext.ParserRuleContext {
    identifier(i) {
        if (i === undefined) {
            return this.getRuleContexts(IdentifierContext);
        }
        else {
            return this.getRuleContext(i, IdentifierContext);
        }
    }
    DOT(i) {
        if (i === undefined) {
            return this.getTokens(FlinkSqlParser.DOT);
        }
        else {
            return this.getToken(FlinkSqlParser.DOT, i);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return FlinkSqlParser.RULE_viewPath; }
    // @Override
    enterRule(listener) {
        if (listener.enterViewPath) {
            listener.enterViewPath(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitViewPath) {
            listener.exitViewPath(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitViewPath) {
            return visitor.visitViewPath(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class ViewPathCreateContext extends ParserRuleContext.ParserRuleContext {
    identifier(i) {
        if (i === undefined) {
            return this.getRuleContexts(IdentifierContext);
        }
        else {
            return this.getRuleContext(i, IdentifierContext);
        }
    }
    DOT(i) {
        if (i === undefined) {
            return this.getTokens(FlinkSqlParser.DOT);
        }
        else {
            return this.getToken(FlinkSqlParser.DOT, i);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return FlinkSqlParser.RULE_viewPathCreate; }
    // @Override
    enterRule(listener) {
        if (listener.enterViewPathCreate) {
            listener.enterViewPathCreate(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitViewPathCreate) {
            listener.exitViewPathCreate(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitViewPathCreate) {
            return visitor.visitViewPathCreate(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class UidContext extends ParserRuleContext.ParserRuleContext {
    identifier(i) {
        if (i === undefined) {
            return this.getRuleContexts(IdentifierContext);
        }
        else {
            return this.getRuleContext(i, IdentifierContext);
        }
    }
    DOT(i) {
        if (i === undefined) {
            return this.getTokens(FlinkSqlParser.DOT);
        }
        else {
            return this.getToken(FlinkSqlParser.DOT, i);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return FlinkSqlParser.RULE_uid; }
    // @Override
    enterRule(listener) {
        if (listener.enterUid) {
            listener.enterUid(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitUid) {
            listener.exitUid(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitUid) {
            return visitor.visitUid(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class WithOptionContext extends ParserRuleContext.ParserRuleContext {
    KW_WITH() { return this.getToken(FlinkSqlParser.KW_WITH, 0); }
    tablePropertyList() {
        return this.getRuleContext(0, TablePropertyListContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return FlinkSqlParser.RULE_withOption; }
    // @Override
    enterRule(listener) {
        if (listener.enterWithOption) {
            listener.enterWithOption(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitWithOption) {
            listener.exitWithOption(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitWithOption) {
            return visitor.visitWithOption(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class IfNotExistsContext extends ParserRuleContext.ParserRuleContext {
    KW_IF() { return this.getToken(FlinkSqlParser.KW_IF, 0); }
    KW_NOT() { return this.getToken(FlinkSqlParser.KW_NOT, 0); }
    KW_EXISTS() { return this.getToken(FlinkSqlParser.KW_EXISTS, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return FlinkSqlParser.RULE_ifNotExists; }
    // @Override
    enterRule(listener) {
        if (listener.enterIfNotExists) {
            listener.enterIfNotExists(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitIfNotExists) {
            listener.exitIfNotExists(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitIfNotExists) {
            return visitor.visitIfNotExists(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class IfExistsContext extends ParserRuleContext.ParserRuleContext {
    KW_IF() { return this.getToken(FlinkSqlParser.KW_IF, 0); }
    KW_EXISTS() { return this.getToken(FlinkSqlParser.KW_EXISTS, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return FlinkSqlParser.RULE_ifExists; }
    // @Override
    enterRule(listener) {
        if (listener.enterIfExists) {
            listener.enterIfExists(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitIfExists) {
            listener.exitIfExists(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitIfExists) {
            return visitor.visitIfExists(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class TablePropertyListContext extends ParserRuleContext.ParserRuleContext {
    LR_BRACKET() { return this.getToken(FlinkSqlParser.LR_BRACKET, 0); }
    tableProperty(i) {
        if (i === undefined) {
            return this.getRuleContexts(TablePropertyContext);
        }
        else {
            return this.getRuleContext(i, TablePropertyContext);
        }
    }
    RR_BRACKET() { return this.getToken(FlinkSqlParser.RR_BRACKET, 0); }
    COMMA(i) {
        if (i === undefined) {
            return this.getTokens(FlinkSqlParser.COMMA);
        }
        else {
            return this.getToken(FlinkSqlParser.COMMA, i);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return FlinkSqlParser.RULE_tablePropertyList; }
    // @Override
    enterRule(listener) {
        if (listener.enterTablePropertyList) {
            listener.enterTablePropertyList(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitTablePropertyList) {
            listener.exitTablePropertyList(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitTablePropertyList) {
            return visitor.visitTablePropertyList(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class TablePropertyContext extends ParserRuleContext.ParserRuleContext {
    tablePropertyKey() {
        return this.getRuleContext(0, TablePropertyKeyContext);
    }
    tablePropertyValue() {
        return this.tryGetRuleContext(0, TablePropertyValueContext);
    }
    EQUAL_SYMBOL() { return this.tryGetToken(FlinkSqlParser.EQUAL_SYMBOL, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return FlinkSqlParser.RULE_tableProperty; }
    // @Override
    enterRule(listener) {
        if (listener.enterTableProperty) {
            listener.enterTableProperty(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitTableProperty) {
            listener.exitTableProperty(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitTableProperty) {
            return visitor.visitTableProperty(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class TablePropertyKeyContext extends ParserRuleContext.ParserRuleContext {
    identifier() {
        return this.tryGetRuleContext(0, IdentifierContext);
    }
    dereferenceDefinition() {
        return this.tryGetRuleContext(0, DereferenceDefinitionContext);
    }
    STRING_LITERAL() { return this.tryGetToken(FlinkSqlParser.STRING_LITERAL, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return FlinkSqlParser.RULE_tablePropertyKey; }
    // @Override
    enterRule(listener) {
        if (listener.enterTablePropertyKey) {
            listener.enterTablePropertyKey(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitTablePropertyKey) {
            listener.exitTablePropertyKey(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitTablePropertyKey) {
            return visitor.visitTablePropertyKey(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class TablePropertyValueContext extends ParserRuleContext.ParserRuleContext {
    DIG_LITERAL() { return this.tryGetToken(FlinkSqlParser.DIG_LITERAL, 0); }
    REAL_LITERAL() { return this.tryGetToken(FlinkSqlParser.REAL_LITERAL, 0); }
    booleanLiteral() {
        return this.tryGetRuleContext(0, BooleanLiteralContext);
    }
    STRING_LITERAL() { return this.tryGetToken(FlinkSqlParser.STRING_LITERAL, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return FlinkSqlParser.RULE_tablePropertyValue; }
    // @Override
    enterRule(listener) {
        if (listener.enterTablePropertyValue) {
            listener.enterTablePropertyValue(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitTablePropertyValue) {
            listener.exitTablePropertyValue(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitTablePropertyValue) {
            return visitor.visitTablePropertyValue(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class LogicalOperatorContext extends ParserRuleContext.ParserRuleContext {
    KW_AND() { return this.tryGetToken(FlinkSqlParser.KW_AND, 0); }
    BIT_AND_OP(i) {
        if (i === undefined) {
            return this.getTokens(FlinkSqlParser.BIT_AND_OP);
        }
        else {
            return this.getToken(FlinkSqlParser.BIT_AND_OP, i);
        }
    }
    KW_OR() { return this.tryGetToken(FlinkSqlParser.KW_OR, 0); }
    BIT_OR_OP(i) {
        if (i === undefined) {
            return this.getTokens(FlinkSqlParser.BIT_OR_OP);
        }
        else {
            return this.getToken(FlinkSqlParser.BIT_OR_OP, i);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return FlinkSqlParser.RULE_logicalOperator; }
    // @Override
    enterRule(listener) {
        if (listener.enterLogicalOperator) {
            listener.enterLogicalOperator(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitLogicalOperator) {
            listener.exitLogicalOperator(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitLogicalOperator) {
            return visitor.visitLogicalOperator(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class ComparisonOperatorContext extends ParserRuleContext.ParserRuleContext {
    EQUAL_SYMBOL() { return this.tryGetToken(FlinkSqlParser.EQUAL_SYMBOL, 0); }
    GREATER_SYMBOL() { return this.tryGetToken(FlinkSqlParser.GREATER_SYMBOL, 0); }
    LESS_SYMBOL() { return this.tryGetToken(FlinkSqlParser.LESS_SYMBOL, 0); }
    EXCLAMATION_SYMBOL() { return this.tryGetToken(FlinkSqlParser.EXCLAMATION_SYMBOL, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return FlinkSqlParser.RULE_comparisonOperator; }
    // @Override
    enterRule(listener) {
        if (listener.enterComparisonOperator) {
            listener.enterComparisonOperator(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitComparisonOperator) {
            listener.exitComparisonOperator(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitComparisonOperator) {
            return visitor.visitComparisonOperator(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class BitOperatorContext extends ParserRuleContext.ParserRuleContext {
    LESS_SYMBOL(i) {
        if (i === undefined) {
            return this.getTokens(FlinkSqlParser.LESS_SYMBOL);
        }
        else {
            return this.getToken(FlinkSqlParser.LESS_SYMBOL, i);
        }
    }
    GREATER_SYMBOL(i) {
        if (i === undefined) {
            return this.getTokens(FlinkSqlParser.GREATER_SYMBOL);
        }
        else {
            return this.getToken(FlinkSqlParser.GREATER_SYMBOL, i);
        }
    }
    BIT_AND_OP() { return this.tryGetToken(FlinkSqlParser.BIT_AND_OP, 0); }
    BIT_XOR_OP() { return this.tryGetToken(FlinkSqlParser.BIT_XOR_OP, 0); }
    BIT_OR_OP() { return this.tryGetToken(FlinkSqlParser.BIT_OR_OP, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return FlinkSqlParser.RULE_bitOperator; }
    // @Override
    enterRule(listener) {
        if (listener.enterBitOperator) {
            listener.enterBitOperator(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBitOperator) {
            listener.exitBitOperator(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitBitOperator) {
            return visitor.visitBitOperator(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class MathOperatorContext extends ParserRuleContext.ParserRuleContext {
    ASTERISK_SIGN() { return this.tryGetToken(FlinkSqlParser.ASTERISK_SIGN, 0); }
    SLASH_SIGN() { return this.tryGetToken(FlinkSqlParser.SLASH_SIGN, 0); }
    PENCENT_SIGN() { return this.tryGetToken(FlinkSqlParser.PENCENT_SIGN, 0); }
    KW_DIV() { return this.tryGetToken(FlinkSqlParser.KW_DIV, 0); }
    ADD_SIGN() { return this.tryGetToken(FlinkSqlParser.ADD_SIGN, 0); }
    HYPNEN_SIGN() { return this.tryGetToken(FlinkSqlParser.HYPNEN_SIGN, 0); }
    DOUBLE_HYPNEN_SIGN() { return this.tryGetToken(FlinkSqlParser.DOUBLE_HYPNEN_SIGN, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return FlinkSqlParser.RULE_mathOperator; }
    // @Override
    enterRule(listener) {
        if (listener.enterMathOperator) {
            listener.enterMathOperator(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitMathOperator) {
            listener.exitMathOperator(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitMathOperator) {
            return visitor.visitMathOperator(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class UnaryOperatorContext extends ParserRuleContext.ParserRuleContext {
    EXCLAMATION_SYMBOL() { return this.tryGetToken(FlinkSqlParser.EXCLAMATION_SYMBOL, 0); }
    BIT_NOT_OP() { return this.tryGetToken(FlinkSqlParser.BIT_NOT_OP, 0); }
    ADD_SIGN() { return this.tryGetToken(FlinkSqlParser.ADD_SIGN, 0); }
    HYPNEN_SIGN() { return this.tryGetToken(FlinkSqlParser.HYPNEN_SIGN, 0); }
    KW_NOT() { return this.tryGetToken(FlinkSqlParser.KW_NOT, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return FlinkSqlParser.RULE_unaryOperator; }
    // @Override
    enterRule(listener) {
        if (listener.enterUnaryOperator) {
            listener.enterUnaryOperator(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitUnaryOperator) {
            listener.exitUnaryOperator(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitUnaryOperator) {
            return visitor.visitUnaryOperator(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class ConstantContext extends ParserRuleContext.ParserRuleContext {
    timeIntervalExpression() {
        return this.tryGetRuleContext(0, TimeIntervalExpressionContext);
    }
    timePointLiteral() {
        return this.tryGetRuleContext(0, TimePointLiteralContext);
    }
    stringLiteral() {
        return this.tryGetRuleContext(0, StringLiteralContext);
    }
    decimalLiteral() {
        return this.tryGetRuleContext(0, DecimalLiteralContext);
    }
    HYPNEN_SIGN() { return this.tryGetToken(FlinkSqlParser.HYPNEN_SIGN, 0); }
    booleanLiteral() {
        return this.tryGetRuleContext(0, BooleanLiteralContext);
    }
    REAL_LITERAL() { return this.tryGetToken(FlinkSqlParser.REAL_LITERAL, 0); }
    BIT_STRING() { return this.tryGetToken(FlinkSqlParser.BIT_STRING, 0); }
    KW_NULL() { return this.tryGetToken(FlinkSqlParser.KW_NULL, 0); }
    KW_NOT() { return this.tryGetToken(FlinkSqlParser.KW_NOT, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return FlinkSqlParser.RULE_constant; }
    // @Override
    enterRule(listener) {
        if (listener.enterConstant) {
            listener.enterConstant(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitConstant) {
            listener.exitConstant(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitConstant) {
            return visitor.visitConstant(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class TimePointLiteralContext extends ParserRuleContext.ParserRuleContext {
    timePointUnit() {
        return this.getRuleContext(0, TimePointUnitContext);
    }
    stringLiteral() {
        return this.getRuleContext(0, StringLiteralContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return FlinkSqlParser.RULE_timePointLiteral; }
    // @Override
    enterRule(listener) {
        if (listener.enterTimePointLiteral) {
            listener.enterTimePointLiteral(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitTimePointLiteral) {
            listener.exitTimePointLiteral(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitTimePointLiteral) {
            return visitor.visitTimePointLiteral(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class StringLiteralContext extends ParserRuleContext.ParserRuleContext {
    STRING_LITERAL() { return this.getToken(FlinkSqlParser.STRING_LITERAL, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return FlinkSqlParser.RULE_stringLiteral; }
    // @Override
    enterRule(listener) {
        if (listener.enterStringLiteral) {
            listener.enterStringLiteral(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitStringLiteral) {
            listener.exitStringLiteral(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitStringLiteral) {
            return visitor.visitStringLiteral(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class DecimalLiteralContext extends ParserRuleContext.ParserRuleContext {
    DIG_LITERAL() { return this.getToken(FlinkSqlParser.DIG_LITERAL, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return FlinkSqlParser.RULE_decimalLiteral; }
    // @Override
    enterRule(listener) {
        if (listener.enterDecimalLiteral) {
            listener.enterDecimalLiteral(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitDecimalLiteral) {
            listener.exitDecimalLiteral(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitDecimalLiteral) {
            return visitor.visitDecimalLiteral(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class BooleanLiteralContext extends ParserRuleContext.ParserRuleContext {
    KW_TRUE() { return this.tryGetToken(FlinkSqlParser.KW_TRUE, 0); }
    KW_FALSE() { return this.tryGetToken(FlinkSqlParser.KW_FALSE, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return FlinkSqlParser.RULE_booleanLiteral; }
    // @Override
    enterRule(listener) {
        if (listener.enterBooleanLiteral) {
            listener.enterBooleanLiteral(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBooleanLiteral) {
            listener.exitBooleanLiteral(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitBooleanLiteral) {
            return visitor.visitBooleanLiteral(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class SetQuantifierContext extends ParserRuleContext.ParserRuleContext {
    KW_DISTINCT() { return this.tryGetToken(FlinkSqlParser.KW_DISTINCT, 0); }
    KW_ALL() { return this.tryGetToken(FlinkSqlParser.KW_ALL, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return FlinkSqlParser.RULE_setQuantifier; }
    // @Override
    enterRule(listener) {
        if (listener.enterSetQuantifier) {
            listener.enterSetQuantifier(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitSetQuantifier) {
            listener.exitSetQuantifier(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitSetQuantifier) {
            return visitor.visitSetQuantifier(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class TimePointUnitContext extends ParserRuleContext.ParserRuleContext {
    KW_YEAR() { return this.tryGetToken(FlinkSqlParser.KW_YEAR, 0); }
    KW_QUARTER() { return this.tryGetToken(FlinkSqlParser.KW_QUARTER, 0); }
    KW_MONTH() { return this.tryGetToken(FlinkSqlParser.KW_MONTH, 0); }
    KW_WEEK() { return this.tryGetToken(FlinkSqlParser.KW_WEEK, 0); }
    KW_DAY() { return this.tryGetToken(FlinkSqlParser.KW_DAY, 0); }
    KW_HOUR() { return this.tryGetToken(FlinkSqlParser.KW_HOUR, 0); }
    KW_MINUTE() { return this.tryGetToken(FlinkSqlParser.KW_MINUTE, 0); }
    KW_SECOND() { return this.tryGetToken(FlinkSqlParser.KW_SECOND, 0); }
    KW_MILLISECOND() { return this.tryGetToken(FlinkSqlParser.KW_MILLISECOND, 0); }
    KW_MICROSECOND() { return this.tryGetToken(FlinkSqlParser.KW_MICROSECOND, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return FlinkSqlParser.RULE_timePointUnit; }
    // @Override
    enterRule(listener) {
        if (listener.enterTimePointUnit) {
            listener.enterTimePointUnit(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitTimePointUnit) {
            listener.exitTimePointUnit(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitTimePointUnit) {
            return visitor.visitTimePointUnit(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class TimeIntervalUnitContext extends ParserRuleContext.ParserRuleContext {
    KW_MILLENNIUM() { return this.tryGetToken(FlinkSqlParser.KW_MILLENNIUM, 0); }
    KW_CENTURY() { return this.tryGetToken(FlinkSqlParser.KW_CENTURY, 0); }
    KW_DECADE() { return this.tryGetToken(FlinkSqlParser.KW_DECADE, 0); }
    KW_YEAR() { return this.tryGetToken(FlinkSqlParser.KW_YEAR, 0); }
    KW_YEARS() { return this.tryGetToken(FlinkSqlParser.KW_YEARS, 0); }
    KW_QUARTER() { return this.tryGetToken(FlinkSqlParser.KW_QUARTER, 0); }
    KW_MONTH() { return this.tryGetToken(FlinkSqlParser.KW_MONTH, 0); }
    KW_MONTHS() { return this.tryGetToken(FlinkSqlParser.KW_MONTHS, 0); }
    KW_WEEK() { return this.tryGetToken(FlinkSqlParser.KW_WEEK, 0); }
    KW_WEEKS() { return this.tryGetToken(FlinkSqlParser.KW_WEEKS, 0); }
    KW_DAY() { return this.tryGetToken(FlinkSqlParser.KW_DAY, 0); }
    KW_DAYS() { return this.tryGetToken(FlinkSqlParser.KW_DAYS, 0); }
    KW_HOUR() { return this.tryGetToken(FlinkSqlParser.KW_HOUR, 0); }
    KW_HOURS() { return this.tryGetToken(FlinkSqlParser.KW_HOURS, 0); }
    KW_MINUTE() { return this.tryGetToken(FlinkSqlParser.KW_MINUTE, 0); }
    KW_MINUTES() { return this.tryGetToken(FlinkSqlParser.KW_MINUTES, 0); }
    KW_SECOND() { return this.tryGetToken(FlinkSqlParser.KW_SECOND, 0); }
    KW_SECONDS() { return this.tryGetToken(FlinkSqlParser.KW_SECONDS, 0); }
    KW_MILLISECOND() { return this.tryGetToken(FlinkSqlParser.KW_MILLISECOND, 0); }
    KW_MICROSECOND() { return this.tryGetToken(FlinkSqlParser.KW_MICROSECOND, 0); }
    KW_NANOSECOND() { return this.tryGetToken(FlinkSqlParser.KW_NANOSECOND, 0); }
    KW_EPOCH() { return this.tryGetToken(FlinkSqlParser.KW_EPOCH, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return FlinkSqlParser.RULE_timeIntervalUnit; }
    // @Override
    enterRule(listener) {
        if (listener.enterTimeIntervalUnit) {
            listener.enterTimeIntervalUnit(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitTimeIntervalUnit) {
            listener.exitTimeIntervalUnit(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitTimeIntervalUnit) {
            return visitor.visitTimeIntervalUnit(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class ReservedKeywordsUsedAsFuncParamContext extends ParserRuleContext.ParserRuleContext {
    KW_ARRAY() { return this.tryGetToken(FlinkSqlParser.KW_ARRAY, 0); }
    KW_ALL() { return this.tryGetToken(FlinkSqlParser.KW_ALL, 0); }
    KW_BOTH() { return this.tryGetToken(FlinkSqlParser.KW_BOTH, 0); }
    KW_CURRENT_TIMESTAMP() { return this.tryGetToken(FlinkSqlParser.KW_CURRENT_TIMESTAMP, 0); }
    KW_DISTINCT() { return this.tryGetToken(FlinkSqlParser.KW_DISTINCT, 0); }
    KW_LEADING() { return this.tryGetToken(FlinkSqlParser.KW_LEADING, 0); }
    KW_TRAILING() { return this.tryGetToken(FlinkSqlParser.KW_TRAILING, 0); }
    KW_VALUE() { return this.tryGetToken(FlinkSqlParser.KW_VALUE, 0); }
    ASTERISK_SIGN() { return this.tryGetToken(FlinkSqlParser.ASTERISK_SIGN, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return FlinkSqlParser.RULE_reservedKeywordsUsedAsFuncParam; }
    // @Override
    enterRule(listener) {
        if (listener.enterReservedKeywordsUsedAsFuncParam) {
            listener.enterReservedKeywordsUsedAsFuncParam(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitReservedKeywordsUsedAsFuncParam) {
            listener.exitReservedKeywordsUsedAsFuncParam(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitReservedKeywordsUsedAsFuncParam) {
            return visitor.visitReservedKeywordsUsedAsFuncParam(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class ReservedKeywordsUsedAsFuncNameContext extends ParserRuleContext.ParserRuleContext {
    KW_ABS() { return this.tryGetToken(FlinkSqlParser.KW_ABS, 0); }
    KW_ARRAY() { return this.tryGetToken(FlinkSqlParser.KW_ARRAY, 0); }
    KW_AVG() { return this.tryGetToken(FlinkSqlParser.KW_AVG, 0); }
    KW_CARDINALITY() { return this.tryGetToken(FlinkSqlParser.KW_CARDINALITY, 0); }
    KW_CAST() { return this.tryGetToken(FlinkSqlParser.KW_CAST, 0); }
    KW_CEIL() { return this.tryGetToken(FlinkSqlParser.KW_CEIL, 0); }
    KW_CEILING() { return this.tryGetToken(FlinkSqlParser.KW_CEILING, 0); }
    KW_COALESCE() { return this.tryGetToken(FlinkSqlParser.KW_COALESCE, 0); }
    KW_COLLECT() { return this.tryGetToken(FlinkSqlParser.KW_COLLECT, 0); }
    KW_COUNT() { return this.tryGetToken(FlinkSqlParser.KW_COUNT, 0); }
    KW_CUME_DIST() { return this.tryGetToken(FlinkSqlParser.KW_CUME_DIST, 0); }
    KW_CURRENT_DATE() { return this.tryGetToken(FlinkSqlParser.KW_CURRENT_DATE, 0); }
    KW_CURRENT_TIME() { return this.tryGetToken(FlinkSqlParser.KW_CURRENT_TIME, 0); }
    KW_CURRENT_TIMESTAMP() { return this.tryGetToken(FlinkSqlParser.KW_CURRENT_TIMESTAMP, 0); }
    KW_DATE() { return this.tryGetToken(FlinkSqlParser.KW_DATE, 0); }
    KW_DAYOFWEEK() { return this.tryGetToken(FlinkSqlParser.KW_DAYOFWEEK, 0); }
    KW_DAYOFYEAR() { return this.tryGetToken(FlinkSqlParser.KW_DAYOFYEAR, 0); }
    KW_DENSE_RANK() { return this.tryGetToken(FlinkSqlParser.KW_DENSE_RANK, 0); }
    KW_ELEMENT() { return this.tryGetToken(FlinkSqlParser.KW_ELEMENT, 0); }
    KW_EXP() { return this.tryGetToken(FlinkSqlParser.KW_EXP, 0); }
    KW_EXTRACT() { return this.tryGetToken(FlinkSqlParser.KW_EXTRACT, 0); }
    KW_FIRST_VALUE() { return this.tryGetToken(FlinkSqlParser.KW_FIRST_VALUE, 0); }
    KW_FLOOR() { return this.tryGetToken(FlinkSqlParser.KW_FLOOR, 0); }
    KW_GROUPING() { return this.tryGetToken(FlinkSqlParser.KW_GROUPING, 0); }
    KW_HOUR() { return this.tryGetToken(FlinkSqlParser.KW_HOUR, 0); }
    KW_IF() { return this.tryGetToken(FlinkSqlParser.KW_IF, 0); }
    KW_LAG() { return this.tryGetToken(FlinkSqlParser.KW_LAG, 0); }
    KW_LAST_VALUE() { return this.tryGetToken(FlinkSqlParser.KW_LAST_VALUE, 0); }
    KW_LEAD() { return this.tryGetToken(FlinkSqlParser.KW_LEAD, 0); }
    KW_LEFT() { return this.tryGetToken(FlinkSqlParser.KW_LEFT, 0); }
    KW_LN() { return this.tryGetToken(FlinkSqlParser.KW_LN, 0); }
    KW_LOCALTIME() { return this.tryGetToken(FlinkSqlParser.KW_LOCALTIME, 0); }
    KW_LOCALTIMESTAMP() { return this.tryGetToken(FlinkSqlParser.KW_LOCALTIMESTAMP, 0); }
    KW_LOWER() { return this.tryGetToken(FlinkSqlParser.KW_LOWER, 0); }
    KW_MAP() { return this.tryGetToken(FlinkSqlParser.KW_MAP, 0); }
    KW_MAX() { return this.tryGetToken(FlinkSqlParser.KW_MAX, 0); }
    KW_MIN() { return this.tryGetToken(FlinkSqlParser.KW_MIN, 0); }
    KW_MINUTE() { return this.tryGetToken(FlinkSqlParser.KW_MINUTE, 0); }
    KW_MOD() { return this.tryGetToken(FlinkSqlParser.KW_MOD, 0); }
    KW_MONTH() { return this.tryGetToken(FlinkSqlParser.KW_MONTH, 0); }
    KW_NULLIF() { return this.tryGetToken(FlinkSqlParser.KW_NULLIF, 0); }
    KW_NTILE() { return this.tryGetToken(FlinkSqlParser.KW_NTILE, 0); }
    KW_OVERLAY() { return this.tryGetToken(FlinkSqlParser.KW_OVERLAY, 0); }
    KW_PERCENT_RANK() { return this.tryGetToken(FlinkSqlParser.KW_PERCENT_RANK, 0); }
    KW_POSITION() { return this.tryGetToken(FlinkSqlParser.KW_POSITION, 0); }
    KW_POWER() { return this.tryGetToken(FlinkSqlParser.KW_POWER, 0); }
    KW_QUARTER() { return this.tryGetToken(FlinkSqlParser.KW_QUARTER, 0); }
    KW_ROW() { return this.tryGetToken(FlinkSqlParser.KW_ROW, 0); }
    KW_ROWS() { return this.tryGetToken(FlinkSqlParser.KW_ROWS, 0); }
    KW_ROW_NUMBER() { return this.tryGetToken(FlinkSqlParser.KW_ROW_NUMBER, 0); }
    KW_RANK() { return this.tryGetToken(FlinkSqlParser.KW_RANK, 0); }
    KW_RIGHT() { return this.tryGetToken(FlinkSqlParser.KW_RIGHT, 0); }
    KW_SECOND() { return this.tryGetToken(FlinkSqlParser.KW_SECOND, 0); }
    KW_STDDEV_POP() { return this.tryGetToken(FlinkSqlParser.KW_STDDEV_POP, 0); }
    KW_STDDEV_SAMP() { return this.tryGetToken(FlinkSqlParser.KW_STDDEV_SAMP, 0); }
    KW_SUBSTRING() { return this.tryGetToken(FlinkSqlParser.KW_SUBSTRING, 0); }
    KW_SUM() { return this.tryGetToken(FlinkSqlParser.KW_SUM, 0); }
    KW_TIME() { return this.tryGetToken(FlinkSqlParser.KW_TIME, 0); }
    KW_TIMESTAMP() { return this.tryGetToken(FlinkSqlParser.KW_TIMESTAMP, 0); }
    KW_TIMESTAMP_DIFF() { return this.tryGetToken(FlinkSqlParser.KW_TIMESTAMP_DIFF, 0); }
    KW_TRIM() { return this.tryGetToken(FlinkSqlParser.KW_TRIM, 0); }
    KW_TRUNCATE() { return this.tryGetToken(FlinkSqlParser.KW_TRUNCATE, 0); }
    KW_TRY_CAST() { return this.tryGetToken(FlinkSqlParser.KW_TRY_CAST, 0); }
    KW_UPPER() { return this.tryGetToken(FlinkSqlParser.KW_UPPER, 0); }
    KW_VAR_POP() { return this.tryGetToken(FlinkSqlParser.KW_VAR_POP, 0); }
    KW_VAR_SAMP() { return this.tryGetToken(FlinkSqlParser.KW_VAR_SAMP, 0); }
    KW_WEEK() { return this.tryGetToken(FlinkSqlParser.KW_WEEK, 0); }
    KW_YEAR() { return this.tryGetToken(FlinkSqlParser.KW_YEAR, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return FlinkSqlParser.RULE_reservedKeywordsUsedAsFuncName; }
    // @Override
    enterRule(listener) {
        if (listener.enterReservedKeywordsUsedAsFuncName) {
            listener.enterReservedKeywordsUsedAsFuncName(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitReservedKeywordsUsedAsFuncName) {
            listener.exitReservedKeywordsUsedAsFuncName(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitReservedKeywordsUsedAsFuncName) {
            return visitor.visitReservedKeywordsUsedAsFuncName(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class NonReservedKeywordsContext extends ParserRuleContext.ParserRuleContext {
    KW_ADD() { return this.tryGetToken(FlinkSqlParser.KW_ADD, 0); }
    KW_AFTER() { return this.tryGetToken(FlinkSqlParser.KW_AFTER, 0); }
    KW_ASC() { return this.tryGetToken(FlinkSqlParser.KW_ASC, 0); }
    KW_CASCADE() { return this.tryGetToken(FlinkSqlParser.KW_CASCADE, 0); }
    KW_CATALOG() { return this.tryGetToken(FlinkSqlParser.KW_CATALOG, 0); }
    KW_CENTURY() { return this.tryGetToken(FlinkSqlParser.KW_CENTURY, 0); }
    KW_CONFIG() { return this.tryGetToken(FlinkSqlParser.KW_CONFIG, 0); }
    KW_CONSTRAINTS() { return this.tryGetToken(FlinkSqlParser.KW_CONSTRAINTS, 0); }
    KW_CUMULATE() { return this.tryGetToken(FlinkSqlParser.KW_CUMULATE, 0); }
    KW_DATA() { return this.tryGetToken(FlinkSqlParser.KW_DATA, 0); }
    KW_DATABASE() { return this.tryGetToken(FlinkSqlParser.KW_DATABASE, 0); }
    KW_DAYS() { return this.tryGetToken(FlinkSqlParser.KW_DAYS, 0); }
    KW_DECADE() { return this.tryGetToken(FlinkSqlParser.KW_DECADE, 0); }
    KW_DESC() { return this.tryGetToken(FlinkSqlParser.KW_DESC, 0); }
    KW_DESCRIPTOR() { return this.tryGetToken(FlinkSqlParser.KW_DESCRIPTOR, 0); }
    KW_DIV() { return this.tryGetToken(FlinkSqlParser.KW_DIV, 0); }
    KW_ENGINE() { return this.tryGetToken(FlinkSqlParser.KW_ENGINE, 0); }
    KW_EPOCH() { return this.tryGetToken(FlinkSqlParser.KW_EPOCH, 0); }
    KW_EXCLUDING() { return this.tryGetToken(FlinkSqlParser.KW_EXCLUDING, 0); }
    KW_FILE() { return this.tryGetToken(FlinkSqlParser.KW_FILE, 0); }
    KW_FIRST() { return this.tryGetToken(FlinkSqlParser.KW_FIRST, 0); }
    KW_GENERATED() { return this.tryGetToken(FlinkSqlParser.KW_GENERATED, 0); }
    KW_HOP() { return this.tryGetToken(FlinkSqlParser.KW_HOP, 0); }
    KW_HOURS() { return this.tryGetToken(FlinkSqlParser.KW_HOURS, 0); }
    KW_IGNORE() { return this.tryGetToken(FlinkSqlParser.KW_IGNORE, 0); }
    KW_INCLUDING() { return this.tryGetToken(FlinkSqlParser.KW_INCLUDING, 0); }
    KW_JAR() { return this.tryGetToken(FlinkSqlParser.KW_JAR, 0); }
    KW_JARS() { return this.tryGetToken(FlinkSqlParser.KW_JARS, 0); }
    KW_JAVA() { return this.tryGetToken(FlinkSqlParser.KW_JAVA, 0); }
    KW_KEY() { return this.tryGetToken(FlinkSqlParser.KW_KEY, 0); }
    KW_LAST() { return this.tryGetToken(FlinkSqlParser.KW_LAST, 0); }
    KW_LOAD() { return this.tryGetToken(FlinkSqlParser.KW_LOAD, 0); }
    KW_MAP() { return this.tryGetToken(FlinkSqlParser.KW_MAP, 0); }
    KW_MICROSECOND() { return this.tryGetToken(FlinkSqlParser.KW_MICROSECOND, 0); }
    KW_MILLENNIUM() { return this.tryGetToken(FlinkSqlParser.KW_MILLENNIUM, 0); }
    KW_MILLISECOND() { return this.tryGetToken(FlinkSqlParser.KW_MILLISECOND, 0); }
    KW_MINUTES() { return this.tryGetToken(FlinkSqlParser.KW_MINUTES, 0); }
    KW_MONTHS() { return this.tryGetToken(FlinkSqlParser.KW_MONTHS, 0); }
    KW_NANOSECOND() { return this.tryGetToken(FlinkSqlParser.KW_NANOSECOND, 0); }
    KW_NULLS() { return this.tryGetToken(FlinkSqlParser.KW_NULLS, 0); }
    KW_OPTIONS() { return this.tryGetToken(FlinkSqlParser.KW_OPTIONS, 0); }
    KW_PAST() { return this.tryGetToken(FlinkSqlParser.KW_PAST, 0); }
    KW_PLAN() { return this.tryGetToken(FlinkSqlParser.KW_PLAN, 0); }
    KW_PRECEDING() { return this.tryGetToken(FlinkSqlParser.KW_PRECEDING, 0); }
    KW_PYTHON() { return this.tryGetToken(FlinkSqlParser.KW_PYTHON, 0); }
    KW_PYTHON_ARCHIVES() { return this.tryGetToken(FlinkSqlParser.KW_PYTHON_ARCHIVES, 0); }
    KW_PYTHON_DEPENDENCIES() { return this.tryGetToken(FlinkSqlParser.KW_PYTHON_DEPENDENCIES, 0); }
    KW_PYTHON_FILES() { return this.tryGetToken(FlinkSqlParser.KW_PYTHON_FILES, 0); }
    KW_PYTHON_JAR() { return this.tryGetToken(FlinkSqlParser.KW_PYTHON_JAR, 0); }
    KW_PYTHON_PARAMETER() { return this.tryGetToken(FlinkSqlParser.KW_PYTHON_PARAMETER, 0); }
    KW_PYTHON_REQUIREMENTS() { return this.tryGetToken(FlinkSqlParser.KW_PYTHON_REQUIREMENTS, 0); }
    KW_QUARTER() { return this.tryGetToken(FlinkSqlParser.KW_QUARTER, 0); }
    KW_REMOVE() { return this.tryGetToken(FlinkSqlParser.KW_REMOVE, 0); }
    KW_RESTRICT() { return this.tryGetToken(FlinkSqlParser.KW_RESTRICT, 0); }
    KW_SECONDS() { return this.tryGetToken(FlinkSqlParser.KW_SECONDS, 0); }
    KW_SESSION() { return this.tryGetToken(FlinkSqlParser.KW_SESSION, 0); }
    KW_SETS() { return this.tryGetToken(FlinkSqlParser.KW_SETS, 0); }
    KW_SIZE() { return this.tryGetToken(FlinkSqlParser.KW_SIZE, 0); }
    KW_SLIDE() { return this.tryGetToken(FlinkSqlParser.KW_SLIDE, 0); }
    KW_STEP() { return this.tryGetToken(FlinkSqlParser.KW_STEP, 0); }
    KW_TEMPORARY() { return this.tryGetToken(FlinkSqlParser.KW_TEMPORARY, 0); }
    KW_TIMECOL() { return this.tryGetToken(FlinkSqlParser.KW_TIMECOL, 0); }
    KW_TUMBLE() { return this.tryGetToken(FlinkSqlParser.KW_TUMBLE, 0); }
    KW_UNLOAD() { return this.tryGetToken(FlinkSqlParser.KW_UNLOAD, 0); }
    KW_VIEW() { return this.tryGetToken(FlinkSqlParser.KW_VIEW, 0); }
    KW_WEEK() { return this.tryGetToken(FlinkSqlParser.KW_WEEK, 0); }
    KW_YEARS() { return this.tryGetToken(FlinkSqlParser.KW_YEARS, 0); }
    KW_ZONE() { return this.tryGetToken(FlinkSqlParser.KW_ZONE, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return FlinkSqlParser.RULE_nonReservedKeywords; }
    // @Override
    enterRule(listener) {
        if (listener.enterNonReservedKeywords) {
            listener.enterNonReservedKeywords(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitNonReservedKeywords) {
            listener.exitNonReservedKeywords(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitNonReservedKeywords) {
            return visitor.visitNonReservedKeywords(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}

;// CONCATENATED MODULE: ../../node_modules/dt-sql-parser/dist/parser/common/basic-parser-types.js
/**
 * Syntax context type at caret position
 */
var SyntaxContextType;
(function (SyntaxContextType) {
    /** catalog name */
    SyntaxContextType["CATALOG"] = "catalog";
    /** catalog name that will be created  */
    SyntaxContextType["CATALOG_CREATE"] = "catalogCreate";
    /** database name path, such as catalog.db */
    SyntaxContextType["DATABASE"] = "database";
    /** database name path that will be created  */
    SyntaxContextType["DATABASE_CREATE"] = "databaseCreate";
    /** table name path, such as catalog.db.tb */
    SyntaxContextType["TABLE"] = "table";
    /** table name path that will be created */
    SyntaxContextType["TABLE_CREATE"] = "tableCreate";
    /** view name path, such as db.tb.view */
    SyntaxContextType["VIEW"] = "view";
    /** view name path that will be created */
    SyntaxContextType["VIEW_CREATE"] = "viewCreate";
    /** function name */
    SyntaxContextType["FUNCTION"] = "function";
    /** function name that will be created */
    SyntaxContextType["FUNCTION_CREATE"] = "functionCreate";
    /** procedure name */
    SyntaxContextType["PROCEDURE"] = "procedure";
    /** procedure name that will be created */
    SyntaxContextType["PROCEDURE_CREATE"] = "procedureCreate";
    /** column name */
    SyntaxContextType["COLUMN"] = "column";
    /** column name that will be created */
    SyntaxContextType["COLUMN_CREATE"] = "columnCreate";
})(SyntaxContextType || (SyntaxContextType = {}));

// EXTERNAL MODULE: ../../node_modules/antlr4ts/index.js
var antlr4ts = __webpack_require__(5029);
// EXTERNAL MODULE: ../../node_modules/antlr4ts/tree/index.js
var tree = __webpack_require__(1410);
// EXTERNAL MODULE: ../../node_modules/antlr4-c3/lib/index.js
var lib = __webpack_require__(7248);
;// CONCATENATED MODULE: ../../node_modules/dt-sql-parser/dist/parser/common/utils/findCaretTokenIndex.js
/**
 * find token index via caret position (cursor position)
 * @param caretPosition
 * @param allTokens all the tokens
 * @returns caretTokenIndex
 */
function findCaretTokenIndex(caretPosition, allTokens) {
    const { lineNumber: caretLine, column: caretCol } = caretPosition;
    let left = 0;
    let right = allTokens.length - 1;
    while (left <= right) {
        const mid = left + ((right - left) >> 1);
        const token = allTokens[mid];
        if (token.line > caretLine ||
            (token.line === caretLine && token.charPositionInLine + 1 >= caretCol)) {
            right = mid - 1;
        }
        else if (token.line < caretLine ||
            (token.line === caretLine &&
                token.charPositionInLine + token.text.length + 1 < caretCol)) {
            left = mid + 1;
        }
        else {
            return allTokens[mid].tokenIndex;
        }
    }
    return null;
}

;// CONCATENATED MODULE: ../../node_modules/dt-sql-parser/dist/parser/common/parseErrorListener.js
class ParseErrorListener {
    constructor(errorListener) {
        this._errorListener = errorListener;
    }
    syntaxError(recognizer, offendingSymbol, line, charPositionInLine, msg, e) {
        let endCol = charPositionInLine + 1;
        if (offendingSymbol && offendingSymbol.text !== null) {
            endCol = charPositionInLine + offendingSymbol.text.length;
        }
        if (this._errorListener) {
            this._errorListener({
                startLine: line,
                endLine: line,
                startColumn: charPositionInLine + 1,
                endColumn: endCol + 1,
                message: msg,
            }, {
                e,
                line,
                msg,
                recognizer,
                offendingSymbol,
                charPositionInLine,
            });
        }
    }
}

// EXTERNAL MODULE: ../../node_modules/antlr4ts/DefaultErrorStrategy.js
var DefaultErrorStrategy = __webpack_require__(4242);
// EXTERNAL MODULE: ../../node_modules/antlr4ts/InputMismatchException.js
var InputMismatchException = __webpack_require__(7432);
// EXTERNAL MODULE: ../../node_modules/antlr4ts/misc/IntervalSet.js
var IntervalSet = __webpack_require__(5462);
;// CONCATENATED MODULE: ../../node_modules/dt-sql-parser/dist/parser/common/errorStrategy.js



/**
 * Base on DefaultErrorStrategy.
 * The difference is that it assigns exception to the context.exception when it encounters error.
 */
class ErrorStrategy extends DefaultErrorStrategy.DefaultErrorStrategy {
    recover(recognizer, e) {
        // Mark the context as an anomaly
        for (let context = recognizer.context; context; context = context.parent) {
            context.exception = e;
        }
        // Error recovery
        if (this.lastErrorIndex === recognizer.inputStream.index &&
            this.lastErrorStates &&
            this.lastErrorStates.contains(recognizer.state)) {
            recognizer.consume();
        }
        this.lastErrorIndex = recognizer.inputStream.index;
        if (!this.lastErrorStates) {
            this.lastErrorStates = new IntervalSet.IntervalSet();
        }
        this.lastErrorStates.add(recognizer.state);
        let followSet = this.getErrorRecoverySet(recognizer);
        this.consumeUntil(recognizer, followSet);
    }
    recoverInline(recognizer) {
        let e;
        if (this.nextTokensContext === undefined) {
            e = new InputMismatchException.InputMismatchException(recognizer);
        }
        else {
            e = new InputMismatchException.InputMismatchException(recognizer, this.nextTokensState, this.nextTokensContext);
        }
        // Mark the context as an anomaly
        for (let context = recognizer.context; context; context = context.parent) {
            context.exception = e;
        }
        // Error recovery
        let matchedSymbol = this.singleTokenDeletion(recognizer);
        if (matchedSymbol) {
            recognizer.consume();
            return matchedSymbol;
        }
        if (this.singleTokenInsertion(recognizer)) {
            return this.getMissingSymbol(recognizer);
        }
        throw e;
    }
}

;// CONCATENATED MODULE: ../../node_modules/dt-sql-parser/dist/parser/common/basicParser.js






/**
 * Custom Parser class, subclass needs extends it.
 */
class BasicParser {
    constructor() {
        this._parsedInput = null;
        this._parseErrors = [];
        /** members for cache end */
        this._errorListener = (error) => {
            this._parseErrors.push(error);
        };
    }
    /**
     * Create an antlr4 lexer from input.
     * @param input string
     */
    createLexer(input, errorListener) {
        const charStreams = antlr4ts.CharStreams.fromString(input.toUpperCase());
        const lexer = this.createLexerFromCharStream(charStreams);
        if (errorListener) {
            lexer.removeErrorListeners();
            lexer.addErrorListener(new ParseErrorListener(errorListener));
        }
        return lexer;
    }
    /**
     * Create an antlr4 parser from input.
     * @param input string
     */
    createParser(input, errorListener) {
        const lexer = this.createLexer(input, errorListener);
        const tokenStream = new antlr4ts.CommonTokenStream(lexer);
        const parser = this.createParserFromTokenStream(tokenStream);
        if (errorListener) {
            parser.removeErrorListeners();
            parser.addErrorListener(new ParseErrorListener(errorListener));
        }
        return parser;
    }
    /**
     * Parse input string and return parseTree.
     * @param input string
     * @param errorListener listen parse errors and lexer errors.
     * @returns parseTree
     */
    parse(input, errorListener) {
        const parser = this.createParser(input, errorListener);
        parser.buildParseTree = true;
        parser.errorHandler = new ErrorStrategy();
        return parser.program();
    }
    /**
     * Create an antlr4 parser from input.
     * And the instances will be cache.
     * @param input string
     */
    createParserWithCache(input) {
        this._parseTree = null;
        this._charStreams = antlr4ts.CharStreams.fromString(input.toUpperCase());
        this._lexer = this.createLexerFromCharStream(this._charStreams);
        this._lexer.removeErrorListeners();
        this._lexer.addErrorListener(new ParseErrorListener(this._errorListener));
        this._tokenStream = new antlr4ts.CommonTokenStream(this._lexer);
        /**
         * All tokens are generated in advance.
         * This can cause performance degradation, but it seems necessary for now.
         * Because the tokens will be used multiple times.
         */
        this._tokenStream.fill();
        this._parser = this.createParserFromTokenStream(this._tokenStream);
        this._parser.buildParseTree = true;
        this._parser.errorHandler = new ErrorStrategy();
        return this._parser;
    }
    /**
     * If it is invoked multiple times in a row and the input parameters is the same,
     * this method returns the parsing result directly for the first time
     * unless the errorListener parameter is passed.
     * @param input source string
     * @param errorListener listen errors
     * @returns parseTree
     */
    parseWithCache(input, errorListener) {
        // Avoid parsing the same input repeatedly.
        if (this._parsedInput === input && !errorListener) {
            return this._parseTree;
        }
        this._parseErrors = [];
        const parser = this.createParserWithCache(input);
        this._parsedInput = input;
        parser.removeErrorListeners();
        parser.addErrorListener(new ParseErrorListener(this._errorListener));
        this._parseTree = parser.program();
        return this._parseTree;
    }
    /**
     * Validate input string and return syntax errors if exists.
     * @param input source string
     * @returns syntax errors
     */
    validate(input) {
        this.parseWithCache(input);
        return this._parseErrors;
    }
    /**
     * Get all Tokens of input string，'<EOF>' is not included.
     * @param input source string
     * @returns Token[]
     */
    getAllTokens(input) {
        this.parseWithCache(input);
        let allTokens = this._tokenStream.getTokens();
        if (allTokens[allTokens.length - 1].text === '<EOF>') {
            allTokens = allTokens.slice(0, -1);
        }
        return allTokens;
    }
    /**
     * @param listener Listener instance extends ParserListener
     * @param parseTree parser Tree
     */
    listen(listener, parseTree) {
        tree.ParseTreeWalker.DEFAULT.walk(listener, parseTree);
    }
    /**
     * Split input into statements.
     * If exist syntax error it will return null.
     * @param input source string
     */
    splitSQLByStatement(input) {
        const errors = this.validate(input);
        if (errors.length) {
            return null;
        }
        const splitListener = this.splitListener;
        // TODO: add splitListener to all sqlParser implements add remove following if
        if (!splitListener)
            return null;
        this.listen(splitListener, this._parseTree);
        const res = splitListener.statementsContext.map((context) => {
            const { start, stop } = context;
            return {
                startIndex: start.startIndex,
                endIndex: stop.stopIndex,
                startLine: start.line,
                endLine: stop.line,
                startColumn: start.charPositionInLine + 1,
                endColumn: stop.charPositionInLine + 1 + stop.text.length,
                text: this._parsedInput.slice(start.startIndex, stop.stopIndex + 1),
            };
        });
        return res;
    }
    /**
     * Get suggestions of syntax and token at caretPosition
     * @param input source string
     * @param caretPosition caret position, such as cursor position
     * @returns suggestion
     */
    getSuggestionAtCaretPosition(input, caretPosition) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j;
        const splitListener = this.splitListener;
        // TODO: add splitListener to all sqlParser implements add remove following if
        if (!splitListener)
            return null;
        this.parseWithCache(input);
        let sqlParserIns = this._parser;
        const allTokens = this.getAllTokens(input);
        let caretTokenIndex = findCaretTokenIndex(caretPosition, allTokens);
        let c3Context = this._parseTree;
        let tokenIndexOffset = 0;
        if (!caretTokenIndex && caretTokenIndex !== 0)
            return null;
        /**
         * Split sql by statement.
         * Try to collect candidates in as small a range as possible.
         */
        this.listen(splitListener, this._parseTree);
        const statementCount = (_a = splitListener.statementsContext) === null || _a === void 0 ? void 0 : _a.length;
        const statementsContext = splitListener.statementsContext;
        // If there are multiple statements.
        if (statementCount > 1) {
            /**
             * Find a minimum valid range, reparse the fragment, and provide a new parse tree to C3.
             * The boundaries of this range must be statements with no syntax errors.
             * This can ensure the stable performance of the C3.
             */
            let startStatement;
            let stopStatement;
            for (let index = 0; index < statementCount; index++) {
                const ctx = statementsContext[index];
                const isCurrentCtxValid = !ctx.exception;
                if (!isCurrentCtxValid)
                    continue;
                /**
                 * Ensure that the statementContext before the left boundary
                 * and the last statementContext on the right boundary are qualified SQL statements.
                 */
                const isPrevCtxValid = index === 0 || !((_b = statementsContext[index - 1]) === null || _b === void 0 ? void 0 : _b.exception);
                const isNextCtxValid = index === statementCount - 1 || !((_c = statementsContext[index + 1]) === null || _c === void 0 ? void 0 : _c.exception);
                if (ctx.stop.tokenIndex < caretTokenIndex && isPrevCtxValid) {
                    startStatement = ctx;
                }
                if (!stopStatement && ctx.start.tokenIndex > caretTokenIndex && isNextCtxValid) {
                    stopStatement = ctx;
                    break;
                }
            }
            // A boundary consisting of the index of the input.
            const startIndex = (_e = (_d = startStatement === null || startStatement === void 0 ? void 0 : startStatement.start) === null || _d === void 0 ? void 0 : _d.startIndex) !== null && _e !== void 0 ? _e : 0;
            const stopIndex = (_g = (_f = stopStatement === null || stopStatement === void 0 ? void 0 : stopStatement.stop) === null || _f === void 0 ? void 0 : _f.stopIndex) !== null && _g !== void 0 ? _g : input.length - 1;
            /**
             * Save offset of the tokenIndex in the range of input
             * compared to the tokenIndex in the whole input
             */
            tokenIndexOffset = (_j = (_h = startStatement === null || startStatement === void 0 ? void 0 : startStatement.start) === null || _h === void 0 ? void 0 : _h.tokenIndex) !== null && _j !== void 0 ? _j : 0;
            caretTokenIndex = caretTokenIndex - tokenIndexOffset;
            /**
             * Reparse the input fragment，
             * and c3 will collect candidates in the newly generated parseTree.
             */
            const inputSlice = input.slice(startIndex, stopIndex);
            const lexer = this.createLexer(inputSlice);
            lexer.removeErrorListeners();
            const tokenStream = new antlr4ts.CommonTokenStream(lexer);
            tokenStream.fill();
            const parser = this.createParserFromTokenStream(tokenStream);
            parser.removeErrorListeners();
            parser.buildParseTree = true;
            parser.errorHandler = new ErrorStrategy();
            sqlParserIns = parser;
            c3Context = parser.program();
        }
        const core = new lib.CodeCompletionCore(sqlParserIns);
        core.preferredRules = this.preferredRules;
        const candidates = core.collectCandidates(caretTokenIndex, c3Context);
        const originalSuggestions = this.processCandidates(candidates, allTokens, caretTokenIndex, tokenIndexOffset);
        const syntaxSuggestions = originalSuggestions.syntax.map((syntaxCtx) => {
            const wordRanges = syntaxCtx.wordRanges.map((token) => {
                return {
                    text: this._parsedInput.slice(token.startIndex, token.stopIndex + 1),
                    startIndex: token.startIndex,
                    endIndex: token.stopIndex,
                    line: token.line,
                    startColumn: token.charPositionInLine + 1,
                    stopColumn: token.charPositionInLine + 1 + token.text.length,
                };
            });
            return {
                syntaxContextType: syntaxCtx.syntaxContextType,
                wordRanges,
            };
        });
        return {
            syntax: syntaxSuggestions,
            keywords: originalSuggestions.keywords,
        };
    }
}

;// CONCATENATED MODULE: ../../node_modules/dt-sql-parser/dist/parser/flinksql.js




class FlinkSQL extends BasicParser {
    constructor() {
        super(...arguments);
        this.preferredRules = new Set([
            FlinkSqlParser.RULE_catalogPath,
            FlinkSqlParser.RULE_databasePath,
            FlinkSqlParser.RULE_databasePathCreate,
            FlinkSqlParser.RULE_tablePath,
            FlinkSqlParser.RULE_tablePathCreate,
            FlinkSqlParser.RULE_viewPath,
            FlinkSqlParser.RULE_viewPathCreate,
            FlinkSqlParser.RULE_functionName,
            FlinkSqlParser.RULE_functionNameCreate,
            FlinkSqlParser.RULE_columnName,
            FlinkSqlParser.RULE_columnNameCreate,
        ]);
    }
    createLexerFromCharStream(charStreams) {
        const lexer = new FlinkSqlLexer(charStreams);
        return lexer;
    }
    createParserFromTokenStream(tokenStream) {
        const parser = new FlinkSqlParser(tokenStream);
        return parser;
    }
    get splitListener() {
        return new FlinkSqlSplitListener();
    }
    processCandidates(candidates, allTokens, caretTokenIndex, tokenIndexOffset) {
        const originalSyntaxSuggestions = [];
        const keywords = [];
        for (let candidate of candidates.rules) {
            const [ruleType, candidateRule] = candidate;
            const startTokenIndex = candidateRule.startTokenIndex + tokenIndexOffset;
            const tokenRanges = allTokens.slice(startTokenIndex, caretTokenIndex + tokenIndexOffset + 1);
            let syntaxContextType;
            switch (ruleType) {
                case FlinkSqlParser.RULE_catalogPath: {
                    syntaxContextType = SyntaxContextType.CATALOG;
                    break;
                }
                case FlinkSqlParser.RULE_databasePath: {
                    syntaxContextType = SyntaxContextType.DATABASE;
                    break;
                }
                case FlinkSqlParser.RULE_databasePathCreate: {
                    syntaxContextType = SyntaxContextType.DATABASE_CREATE;
                    break;
                }
                case FlinkSqlParser.RULE_tablePath: {
                    syntaxContextType = SyntaxContextType.TABLE;
                    break;
                }
                case FlinkSqlParser.RULE_tablePathCreate: {
                    syntaxContextType = SyntaxContextType.TABLE_CREATE;
                    break;
                }
                case FlinkSqlParser.RULE_viewPath: {
                    syntaxContextType = SyntaxContextType.VIEW;
                    break;
                }
                case FlinkSqlParser.RULE_viewPathCreate: {
                    syntaxContextType = SyntaxContextType.VIEW_CREATE;
                    break;
                }
                case FlinkSqlParser.RULE_functionName: {
                    syntaxContextType = SyntaxContextType.FUNCTION;
                    break;
                }
                case FlinkSqlParser.RULE_functionNameCreate: {
                    syntaxContextType = SyntaxContextType.FUNCTION_CREATE;
                    break;
                }
                case FlinkSqlParser.RULE_columnName: {
                    syntaxContextType = SyntaxContextType.COLUMN;
                    break;
                }
                case FlinkSqlParser.RULE_columnNameCreate: {
                    syntaxContextType = SyntaxContextType.COLUMN_CREATE;
                    break;
                }
                default:
                    break;
            }
            if (syntaxContextType) {
                originalSyntaxSuggestions.push({
                    syntaxContextType,
                    wordRanges: tokenRanges,
                });
            }
        }
        for (let candidate of candidates.tokens) {
            const symbolicName = this._parser.vocabulary.getSymbolicName(candidate[0]);
            const displayName = this._parser.vocabulary.getDisplayName(candidate[0]);
            if (symbolicName && symbolicName.startsWith('KW_')) {
                const keyword = displayName.startsWith("'") && displayName.endsWith("'")
                    ? displayName.slice(1, -1)
                    : displayName;
                keywords.push(keyword);
            }
        }
        return {
            syntax: originalSyntaxSuggestions,
            keywords,
        };
    }
}
class FlinkSqlSplitListener {
    constructor() {
        this._statementsContext = [];
        this.exitSingleStatement = (ctx) => {
            this._statementsContext.push(ctx);
        };
        this.enterSingleStatement = (ctx) => { };
    }
    get statementsContext() {
        return this._statementsContext;
    }
}

;// CONCATENATED MODULE: ../ace-linters/src/utils.ts
function mergeObjects(obj1, obj2, excludeUndefined = false) {
    if (!obj1) return obj2;
    if (!obj2) return obj1;
    if (excludeUndefined) {
        obj1 = excludeUndefinedValues(obj1);
        obj2 = excludeUndefinedValues(obj2);
    }
    const mergedObjects = {
        ...obj2,
        ...obj1
    }; // Give priority to obj1 values by spreading obj2 first, then obj1
    for (const key of Object.keys(mergedObjects)){
        if (obj1[key] && obj2[key]) {
            if (Array.isArray(obj1[key])) {
                mergedObjects[key] = obj1[key].concat(obj2[key]);
            } else if (Array.isArray(obj2[key])) {
                mergedObjects[key] = obj2[key].concat(obj1[key]);
            } else if (typeof obj1[key] === 'object' && typeof obj2[key] === 'object') {
                mergedObjects[key] = mergeObjects(obj1[key], obj2[key]);
            }
        }
    }
    return mergedObjects;
}
function excludeUndefinedValues(obj) {
    const filteredEntries = Object.entries(obj).filter(([_, value])=>value !== undefined);
    return Object.fromEntries(filteredEntries);
}
function notEmpty(value) {
    return value !== null && value !== undefined;
}
//taken with small changes from ace-code
function mergeRanges(ranges) {
    var list = ranges;
    list = list.sort(function(a, b) {
        return comparePoints(a.start, b.start);
    });
    var next = list[0], range;
    for(var i = 1; i < list.length; i++){
        range = next;
        next = list[i];
        var cmp = comparePoints(range.end, next.start);
        if (cmp < 0) continue;
        if (cmp == 0 && !range.isEmpty() && !next.isEmpty()) continue;
        if (comparePoints(range.end, next.end) < 0) {
            range.end.row = next.end.row;
            range.end.column = next.end.column;
        }
        list.splice(i, 1);
        next = range;
        i--;
    }
    return list;
}
function comparePoints(p1, p2) {
    return p1.row - p2.row || p1.column - p2.column;
}
function checkValueAgainstRegexpArray(value, regexpArray) {
    if (!regexpArray) {
        return false;
    }
    for(let i = 0; i < regexpArray.length; i++){
        if (regexpArray[i].test(value)) {
            return true;
        }
    }
    return false;
}

;// CONCATENATED MODULE: ../../node_modules/vscode-languageserver-textdocument/lib/esm/main.js
/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */

var __spreadArray = (undefined && undefined.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
var FullTextDocument = /** @class */ (function () {
    function FullTextDocument(uri, languageId, version, content) {
        this._uri = uri;
        this._languageId = languageId;
        this._version = version;
        this._content = content;
        this._lineOffsets = undefined;
    }
    Object.defineProperty(FullTextDocument.prototype, "uri", {
        get: function () {
            return this._uri;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FullTextDocument.prototype, "languageId", {
        get: function () {
            return this._languageId;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FullTextDocument.prototype, "version", {
        get: function () {
            return this._version;
        },
        enumerable: false,
        configurable: true
    });
    FullTextDocument.prototype.getText = function (range) {
        if (range) {
            var start = this.offsetAt(range.start);
            var end = this.offsetAt(range.end);
            return this._content.substring(start, end);
        }
        return this._content;
    };
    FullTextDocument.prototype.update = function (changes, version) {
        for (var _i = 0, changes_1 = changes; _i < changes_1.length; _i++) {
            var change = changes_1[_i];
            if (FullTextDocument.isIncremental(change)) {
                // makes sure start is before end
                var range = getWellformedRange(change.range);
                // update content
                var startOffset = this.offsetAt(range.start);
                var endOffset = this.offsetAt(range.end);
                this._content = this._content.substring(0, startOffset) + change.text + this._content.substring(endOffset, this._content.length);
                // update the offsets
                var startLine = Math.max(range.start.line, 0);
                var endLine = Math.max(range.end.line, 0);
                var lineOffsets = this._lineOffsets;
                var addedLineOffsets = computeLineOffsets(change.text, false, startOffset);
                if (endLine - startLine === addedLineOffsets.length) {
                    for (var i = 0, len = addedLineOffsets.length; i < len; i++) {
                        lineOffsets[i + startLine + 1] = addedLineOffsets[i];
                    }
                }
                else {
                    if (addedLineOffsets.length < 10000) {
                        lineOffsets.splice.apply(lineOffsets, __spreadArray([startLine + 1, endLine - startLine], addedLineOffsets, false));
                    }
                    else { // avoid too many arguments for splice
                        this._lineOffsets = lineOffsets = lineOffsets.slice(0, startLine + 1).concat(addedLineOffsets, lineOffsets.slice(endLine + 1));
                    }
                }
                var diff = change.text.length - (endOffset - startOffset);
                if (diff !== 0) {
                    for (var i = startLine + 1 + addedLineOffsets.length, len = lineOffsets.length; i < len; i++) {
                        lineOffsets[i] = lineOffsets[i] + diff;
                    }
                }
            }
            else if (FullTextDocument.isFull(change)) {
                this._content = change.text;
                this._lineOffsets = undefined;
            }
            else {
                throw new Error('Unknown change event received');
            }
        }
        this._version = version;
    };
    FullTextDocument.prototype.getLineOffsets = function () {
        if (this._lineOffsets === undefined) {
            this._lineOffsets = computeLineOffsets(this._content, true);
        }
        return this._lineOffsets;
    };
    FullTextDocument.prototype.positionAt = function (offset) {
        offset = Math.max(Math.min(offset, this._content.length), 0);
        var lineOffsets = this.getLineOffsets();
        var low = 0, high = lineOffsets.length;
        if (high === 0) {
            return { line: 0, character: offset };
        }
        while (low < high) {
            var mid = Math.floor((low + high) / 2);
            if (lineOffsets[mid] > offset) {
                high = mid;
            }
            else {
                low = mid + 1;
            }
        }
        // low is the least x for which the line offset is larger than the current offset
        // or array.length if no line offset is larger than the current offset
        var line = low - 1;
        return { line: line, character: offset - lineOffsets[line] };
    };
    FullTextDocument.prototype.offsetAt = function (position) {
        var lineOffsets = this.getLineOffsets();
        if (position.line >= lineOffsets.length) {
            return this._content.length;
        }
        else if (position.line < 0) {
            return 0;
        }
        var lineOffset = lineOffsets[position.line];
        var nextLineOffset = (position.line + 1 < lineOffsets.length) ? lineOffsets[position.line + 1] : this._content.length;
        return Math.max(Math.min(lineOffset + position.character, nextLineOffset), lineOffset);
    };
    Object.defineProperty(FullTextDocument.prototype, "lineCount", {
        get: function () {
            return this.getLineOffsets().length;
        },
        enumerable: false,
        configurable: true
    });
    FullTextDocument.isIncremental = function (event) {
        var candidate = event;
        return candidate !== undefined && candidate !== null &&
            typeof candidate.text === 'string' && candidate.range !== undefined &&
            (candidate.rangeLength === undefined || typeof candidate.rangeLength === 'number');
    };
    FullTextDocument.isFull = function (event) {
        var candidate = event;
        return candidate !== undefined && candidate !== null &&
            typeof candidate.text === 'string' && candidate.range === undefined && candidate.rangeLength === undefined;
    };
    return FullTextDocument;
}());
var TextDocument;
(function (TextDocument) {
    /**
     * Creates a new text document.
     *
     * @param uri The document's uri.
     * @param languageId  The document's language Id.
     * @param version The document's initial version number.
     * @param content The document's content.
     */
    function create(uri, languageId, version, content) {
        return new FullTextDocument(uri, languageId, version, content);
    }
    TextDocument.create = create;
    /**
     * Updates a TextDocument by modifying its content.
     *
     * @param document the document to update. Only documents created by TextDocument.create are valid inputs.
     * @param changes the changes to apply to the document.
     * @param version the changes version for the document.
     * @returns The updated TextDocument. Note: That's the same document instance passed in as first parameter.
     *
     */
    function update(document, changes, version) {
        if (document instanceof FullTextDocument) {
            document.update(changes, version);
            return document;
        }
        else {
            throw new Error('TextDocument.update: document must be created by TextDocument.create');
        }
    }
    TextDocument.update = update;
    function applyEdits(document, edits) {
        var text = document.getText();
        var sortedEdits = mergeSort(edits.map(getWellformedEdit), function (a, b) {
            var diff = a.range.start.line - b.range.start.line;
            if (diff === 0) {
                return a.range.start.character - b.range.start.character;
            }
            return diff;
        });
        var lastModifiedOffset = 0;
        var spans = [];
        for (var _i = 0, sortedEdits_1 = sortedEdits; _i < sortedEdits_1.length; _i++) {
            var e = sortedEdits_1[_i];
            var startOffset = document.offsetAt(e.range.start);
            if (startOffset < lastModifiedOffset) {
                throw new Error('Overlapping edit');
            }
            else if (startOffset > lastModifiedOffset) {
                spans.push(text.substring(lastModifiedOffset, startOffset));
            }
            if (e.newText.length) {
                spans.push(e.newText);
            }
            lastModifiedOffset = document.offsetAt(e.range.end);
        }
        spans.push(text.substr(lastModifiedOffset));
        return spans.join('');
    }
    TextDocument.applyEdits = applyEdits;
})(TextDocument || (TextDocument = {}));
function mergeSort(data, compare) {
    if (data.length <= 1) {
        // sorted
        return data;
    }
    var p = (data.length / 2) | 0;
    var left = data.slice(0, p);
    var right = data.slice(p);
    mergeSort(left, compare);
    mergeSort(right, compare);
    var leftIdx = 0;
    var rightIdx = 0;
    var i = 0;
    while (leftIdx < left.length && rightIdx < right.length) {
        var ret = compare(left[leftIdx], right[rightIdx]);
        if (ret <= 0) {
            // smaller_equal -> take left to preserve order
            data[i++] = left[leftIdx++];
        }
        else {
            // greater -> take right
            data[i++] = right[rightIdx++];
        }
    }
    while (leftIdx < left.length) {
        data[i++] = left[leftIdx++];
    }
    while (rightIdx < right.length) {
        data[i++] = right[rightIdx++];
    }
    return data;
}
function computeLineOffsets(text, isAtLineStart, textOffset) {
    if (textOffset === void 0) { textOffset = 0; }
    var result = isAtLineStart ? [textOffset] : [];
    for (var i = 0; i < text.length; i++) {
        var ch = text.charCodeAt(i);
        if (ch === 13 /* CharCode.CarriageReturn */ || ch === 10 /* CharCode.LineFeed */) {
            if (ch === 13 /* CharCode.CarriageReturn */ && i + 1 < text.length && text.charCodeAt(i + 1) === 10 /* CharCode.LineFeed */) {
                i++;
            }
            result.push(textOffset + i + 1);
        }
    }
    return result;
}
function getWellformedRange(range) {
    var start = range.start;
    var end = range.end;
    if (start.line > end.line || (start.line === end.line && start.character > end.character)) {
        return { start: end, end: start };
    }
    return range;
}
function getWellformedEdit(textEdit) {
    var range = getWellformedRange(textEdit.range);
    if (range !== textEdit.range) {
        return { newText: textEdit.newText, range: range };
    }
    return textEdit;
}

;// CONCATENATED MODULE: ../ace-linters/src/services/base-service.ts
function _define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}


class BaseService {
    addDocument(document) {
        this.documents[document.uri] = TextDocument.create(document.uri, document.languageId, document.version, document.text);
    //TODO:
    /*if (options)
            this.setSessionOptions(sessionID, options);*/ }
    getDocument(uri) {
        return this.documents[uri];
    }
    removeDocument(document) {
        delete this.documents[document.uri];
        if (this.options[document.uri]) {
            delete this.options[document.uri];
        }
    }
    getDocumentValue(uri) {
        var _this_getDocument;
        return (_this_getDocument = this.getDocument(uri)) === null || _this_getDocument === void 0 ? void 0 : _this_getDocument.getText();
    }
    setValue(identifier, value) {
        let document = this.getDocument(identifier.uri);
        if (document) {
            document = TextDocument.create(document.uri, document.languageId, document.version, value);
            this.documents[document.uri] = document;
        }
    }
    setGlobalOptions(options) {
        this.globalOptions = options !== null && options !== void 0 ? options : {};
    }
    setOptions(sessionID, options, merge = false) {
        this.options[sessionID] = merge ? mergeObjects(options, this.options[sessionID]) : options;
    }
    getOption(sessionID, optionName) {
        if (this.options[sessionID] && this.options[sessionID][optionName]) {
            return this.options[sessionID][optionName];
        } else {
            return this.globalOptions[optionName];
        }
    }
    applyDeltas(identifier, deltas) {
        let document = this.getDocument(identifier.uri);
        if (document) TextDocument.update(document, deltas, identifier.version);
    }
    async doComplete(document, position) {
        return null;
    }
    async doHover(document, position) {
        return null;
    }
    async doResolve(item) {
        return null;
    }
    async doValidation(document) {
        return [];
    }
    format(document, range, options) {
        return Promise.resolve([]);
    }
    async provideSignatureHelp(document, position) {
        return null;
    }
    async findDocumentHighlights(document, position) {
        return [];
    }
    get optionsToFilterDiagnostics() {
        var _this_globalOptions_errorCodesToIgnore, _this_globalOptions_errorCodesToTreatAsWarning, _this_globalOptions_errorCodesToTreatAsInfo, _this_globalOptions_errorMessagesToIgnore, _this_globalOptions_errorMessagesToTreatAsWarning, _this_globalOptions_errorMessagesToTreatAsInfo;
        return {
            errorCodesToIgnore: (_this_globalOptions_errorCodesToIgnore = this.globalOptions.errorCodesToIgnore) !== null && _this_globalOptions_errorCodesToIgnore !== void 0 ? _this_globalOptions_errorCodesToIgnore : [],
            errorCodesToTreatAsWarning: (_this_globalOptions_errorCodesToTreatAsWarning = this.globalOptions.errorCodesToTreatAsWarning) !== null && _this_globalOptions_errorCodesToTreatAsWarning !== void 0 ? _this_globalOptions_errorCodesToTreatAsWarning : [],
            errorCodesToTreatAsInfo: (_this_globalOptions_errorCodesToTreatAsInfo = this.globalOptions.errorCodesToTreatAsInfo) !== null && _this_globalOptions_errorCodesToTreatAsInfo !== void 0 ? _this_globalOptions_errorCodesToTreatAsInfo : [],
            errorMessagesToIgnore: (_this_globalOptions_errorMessagesToIgnore = this.globalOptions.errorMessagesToIgnore) !== null && _this_globalOptions_errorMessagesToIgnore !== void 0 ? _this_globalOptions_errorMessagesToIgnore : [],
            errorMessagesToTreatAsWarning: (_this_globalOptions_errorMessagesToTreatAsWarning = this.globalOptions.errorMessagesToTreatAsWarning) !== null && _this_globalOptions_errorMessagesToTreatAsWarning !== void 0 ? _this_globalOptions_errorMessagesToTreatAsWarning : [],
            errorMessagesToTreatAsInfo: (_this_globalOptions_errorMessagesToTreatAsInfo = this.globalOptions.errorMessagesToTreatAsInfo) !== null && _this_globalOptions_errorMessagesToTreatAsInfo !== void 0 ? _this_globalOptions_errorMessagesToTreatAsInfo : []
        };
    }
    getSemanticTokens(document, range) {
        return Promise.resolve(null);
    }
    dispose() {
        return Promise.resolve();
    }
    constructor(mode){
        _define_property(this, "serviceName", void 0);
        _define_property(this, "mode", void 0);
        _define_property(this, "documents", {});
        _define_property(this, "options", {});
        _define_property(this, "globalOptions", {});
        _define_property(this, "serviceData", void 0);
        _define_property(this, "serviceCapabilities", {});
        _define_property(this, "clientCapabilities", {
            textDocument: {
                hover: {
                    dynamicRegistration: true,
                    contentFormat: [
                        'markdown',
                        'plaintext'
                    ]
                },
                synchronization: {
                    dynamicRegistration: true,
                    willSave: false,
                    didSave: false,
                    willSaveWaitUntil: false
                },
                formatting: {
                    dynamicRegistration: true
                },
                completion: {
                    dynamicRegistration: true,
                    completionItem: {
                        snippetSupport: true,
                        commitCharactersSupport: false,
                        documentationFormat: [
                            'markdown',
                            'plaintext'
                        ],
                        deprecatedSupport: false,
                        preselectSupport: false
                    },
                    contextSupport: false
                },
                signatureHelp: {
                    signatureInformation: {
                        documentationFormat: [
                            'markdown',
                            'plaintext'
                        ],
                        activeParameterSupport: true
                    }
                },
                documentHighlight: {
                    dynamicRegistration: true
                },
                semanticTokens: {
                    multilineTokenSupport: false,
                    overlappingTokenSupport: false,
                    tokenTypes: [],
                    tokenModifiers: [],
                    formats: [
                        "relative"
                    ],
                    requests: {
                        full: {
                            delta: false
                        },
                        range: true
                    },
                    augmentsSyntaxTokens: true
                }
            },
            workspace: {
                didChangeConfiguration: {
                    dynamicRegistration: true
                }
            }
        });
        this.mode = mode;
    }
}

// EXTERNAL MODULE: ../../node_modules/vscode-languageserver-protocol/lib/browser/main.js
var main = __webpack_require__(294);
;// CONCATENATED MODULE: ../ace-linters/src/ace/range-singleton.ts
function range_singleton_define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
class AceRange {
    static getConstructor(editor) {
        if (!AceRange._instance && editor) {
            AceRange._instance = editor.getSelectionRange().constructor;
        }
        return AceRange._instance;
    }
}
range_singleton_define_property(AceRange, "_instance", void 0);

;// CONCATENATED MODULE: ../ace-linters/src/type-converters/common-converters.ts



var CommonConverter;
(function(CommonConverter) {
    function normalizeRanges(completions) {
        return completions && completions.map((el)=>{
            if (el["range"]) {
                el["range"] = toRange(el["range"]);
            }
            return el;
        });
    }
    CommonConverter.normalizeRanges = normalizeRanges;
    function cleanHtml(html) {
        return html.replace(/<a\s/, "<a target='_blank' ");
    }
    CommonConverter.cleanHtml = cleanHtml;
    function toRange(range) {
        if (!range || !range.start || !range.end) {
            return;
        }
        let Range = AceRange.getConstructor();
        // @ts-ignore
        return Range.fromPoints(range.start, range.end);
    }
    CommonConverter.toRange = toRange;
    function convertKind(kind) {
        switch(kind){
            case "primitiveType":
            case "keyword":
                return main.CompletionItemKind.Keyword;
            case "variable":
            case "localVariable":
                return main.CompletionItemKind.Variable;
            case "memberVariable":
            case "memberGetAccessor":
            case "memberSetAccessor":
                return main.CompletionItemKind.Field;
            case "function":
            case "memberFunction":
            case "constructSignature":
            case "callSignature":
            case "indexSignature":
                return main.CompletionItemKind.Function;
            case "enum":
                return main.CompletionItemKind.Enum;
            case "module":
                return main.CompletionItemKind.Module;
            case "class":
                return main.CompletionItemKind.Class;
            case "interface":
                return main.CompletionItemKind.Interface;
            case "warning":
                return main.CompletionItemKind.File;
        }
        return main.CompletionItemKind.Property;
    }
    CommonConverter.convertKind = convertKind;
    function excludeByErrorMessage(diagnostics, errorMessagesToIgnore, fieldName = "message") {
        if (!errorMessagesToIgnore) return diagnostics;
        return diagnostics.filter((el)=>!checkValueAgainstRegexpArray(el[fieldName], errorMessagesToIgnore));
    }
    CommonConverter.excludeByErrorMessage = excludeByErrorMessage;
})(CommonConverter || (CommonConverter = {}));

;// CONCATENATED MODULE: ./src/type-converters/sql-converters.ts

function toDiagnostics(diagnostics, filterErrors) {
    return CommonConverter.excludeByErrorMessage(diagnostics, filterErrors.errorMessagesToIgnore).map((el)=>{
        let code = typeof el.code === 'number' ? String(el.code) : el.code;
        return {
            range: {
                start: {
                    line: el.startLine - 1,
                    character: el.startCol
                },
                end: {
                    line: el.endLine - 1,
                    character: el.endCol
                }
            },
            severity: 1,
            message: el.message,
            code: code,
            source: el.source
        };
    });
}
function toPosition(pos) {
    return {
        line: pos.lineNumber,
        character: pos.column
    };
}
function fromPosition(pos) {
    return {
        lineNumber: pos.line + 1,
        column: pos.character + 1
    };
}
function toCompletions(completions) {
    if (!completions) {
        return null;
    }
    return completions.keywords.map((el)=>{
        return {
            label: el,
            kind: 14,
            detail: "keyword"
        };
    });
}

;// CONCATENATED MODULE: ./src/base-sql-service.ts


class BaseSQLService extends BaseService {
    async doValidation(document) {
        let fullDocument = this.getDocument(document.uri);
        if (!fullDocument) return [];
        return toDiagnostics(this.$service.validate(fullDocument.getText()), this.optionsToFilterDiagnostics);
    }
    async doComplete(document, position) {
        let fullDocument = this.getDocument(document.uri);
        if (!fullDocument) return null;
        return toCompletions(this.$service.getSuggestionAtCaretPosition(fullDocument.getText(), fromPosition(position)));
    }
}

;// CONCATENATED MODULE: ./src/flinksql-service.ts
function flinksql_service_define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}


class FlinkSQLService extends BaseSQLService {
    constructor(mode){
        super(mode);
        flinksql_service_define_property(this, "$service", void 0);
        flinksql_service_define_property(this, "serviceCapabilities", {
            completionProvider: {
                triggerCharacters: [
                    ".",
                    " "
                ]
            },
            diagnosticProvider: {
                interFileDependencies: true,
                workspaceDiagnostics: true
            }
        });
        this.$service = new FlinkSQL();
    }
}

})();

/******/ 	return __webpack_exports__;
/******/ })()
;
});